import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoTreemapComponent {
    get isTreemap() {
        return true;
    }
    /** Defines the data to use, must be specified for this component. */
    set dataset(dataset) {
        this.options.dataset = dataset;
        if (this.treemap) {
            this.treemap.settings.dataset = dataset;
            this.updateRequired = true;
        }
    }
    /** If false, the component will not resize when resizing the page. */
    set redrawOnResize(value) {
        this.options.redrawOnResize = value;
        if (this.treemap) {
            this.treemap.settings.redrawOnResize = value;
            this.updateRequired = true;
        }
    }
    /** The margins of the SVG, which you may want to adjust depending on text location. */
    set margin(value) {
        this.options.margin = value;
        if (this.treemap) {
            this.treemap.settings.margin = value;
            this.updateRequired = true;
        }
    }
    /** An array of colors used in sequence from front to end of the array. */
    set colors(value) {
        this.options.colors = value;
        if (this.treemap) {
            this.treemap.settings.colors = value;
            this.updateRequired = true;
        }
    }
    /** If false then the percentage wont be shown in the blocks. */
    set showLabel(value) {
        this.options.showLabel = value;
        if (this.treemap) {
            this.treemap.settings.showLabel = value;
            this.updateRequired = true;
        }
    }
    /** The d3 formatter function for the value label. */
    set labelFormatter(value) {
        this.options.labelFormatter = value;
        if (this.treemap) {
            this.treemap.settings.labelFormatter = value;
            this.updateRequired = true;
        }
    }
    /** If true then the first name will be used for the title area. */
    set showTitle(value) {
        this.options.showTitle = value;
        if (this.treemap) {
            this.treemap.settings.showTitle = value;
            this.updateRequired = true;
        }
    }
    /** An empty message will be displayed when there is no chart data. */
    set emptyMessage(value) {
        this.options.emptyMessage = value;
        if (this.treemap) {
            this.treemap.settings.emptyMessage = value;
            this.updateRequired = true;
        }
    }
    /** Add extra attributes like id's to the component **/
    set attributes(value) {
        this.options.attributes = value;
        if (this.treemap) {
            this.treemap.settings.attributes = value;
            this.updateRequired = true;
        }
    }
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        /** Options. */
        this.options = {};
        /** Events */
        this.rendered = new EventEmitter();
        this.updateRequired = false;
    }
    /** Setup */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            // this.options.type = 'treemap';
            this.jQueryElement.treemap(this.options);
            this.treemap = this.jQueryElement.data('treemap');
            // Setup the events
            this.jQueryElement.on('rendered', (...args) => this.ngZone.run(() => this.rendered.emit(args)));
        });
    }
    ngAfterViewChecked() {
        if (this.treemap && this.updateRequired) {
            this.ngZone.runOutsideAngular(() => this.treemap?.updated(this.treemap.settings));
            this.updateRequired = false;
        }
    }
    /** Tear Down */
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.treemap) {
                this.treemap.destroy();
                this.treemap = null;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTreemapComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoTreemapComponent, selector: "[soho-treemap]", inputs: { dataset: "dataset", redrawOnResize: "redrawOnResize", margin: "margin", colors: "colors", showLabel: "showLabel", labelFormatter: "labelFormatter", showTitle: "showTitle", emptyMessage: "emptyMessage", attributes: "attributes" }, outputs: { rendered: "rendered" }, host: { properties: { "class.chart-container.chart-treemap": "this.isTreemap" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTreemapComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-treemap]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isTreemap: [{
                type: HostBinding,
                args: ['class.chart-container.chart-treemap']
            }], dataset: [{
                type: Input
            }], redrawOnResize: [{
                type: Input
            }], margin: [{
                type: Input
            }], colors: [{
                type: Input
            }], showLabel: [{
                type: Input
            }], labelFormatter: [{
                type: Input
            }], showTitle: [{
                type: Input
            }], emptyMessage: [{
                type: Input
            }], attributes: [{
                type: Input
            }], rendered: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { Injectable } from '@angular/core';
import { ArgumentHelper } from '../utils/argument.helper';
import { SohoContextualActionPanelRef } from './soho-contextual-action-panel.ref';
import * as i0 from "@angular/core";
/**
 * This service is used to create a panel panel, based on the content
 * of an Angular Component on the screen.
 */
export class SohoContextualActionPanelService {
    /**
     * Constructor.
     *
     * @param appRef - application reference; must not be null.
     * @param componentFactoryResolver - used to create component factories for components dynamically.
     * @param injector - the current in scope injector, use as a delegate.
     * @param ngZone - the angular zone; must not be null.
     */
    constructor(appRef, componentFactoryResolver, injector, ngZone) {
        this.appRef = appRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.ngZone = ngZone;
    }
    /**
     * Creates a panel defined by the given component, returning a reference to the
     * panel that can be interacted with.
     *
     * The component has the potential to include the panel reference when it is
     * instantiated, as a provider.
     *
     * The panel won't necessarily be open yet, see the panel ref Api for further methods.
     *
     * @param component - the type of the component to instantiate; must not be null.
     * @param parent - the parent container; must not be null.
     * @param options - the default options for the panel; optional.
     *
     * @return the panel reference.
     */
    contextualactionpanel(component, parent, options) {
        ArgumentHelper.checkNotNull('component', component);
        ArgumentHelper.checkNotNull('parent', parent);
        return new SohoContextualActionPanelRef(this.appRef, this.componentFactoryResolver, this.injector, this.ngZone, options, component);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoContextualActionPanelService, deps: [{ token: i0.ApplicationRef }, { token: i0.ComponentFactoryResolver }, { token: i0.Injector }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoContextualActionPanelService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoContextualActionPanelService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ApplicationRef }, { type: i0.ComponentFactoryResolver }, { type: i0.Injector }, { type: i0.NgZone }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby1jb250ZXh0dWFsLWFjdGlvbi1wYW5lbC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWRzLWVudGVycHJpc2Utbmcvc3JjL2xpYi9jb250ZXh0dWFsLWFjdGlvbi1wYW5lbC9zb2hvLWNvbnRleHR1YWwtYWN0aW9uLXBhbmVsLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFVBQVUsRUFLWCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDMUQsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sb0NBQW9DLENBQUM7O0FBRWxGOzs7R0FHRztBQUVILE1BQU0sT0FBTyxnQ0FBZ0M7SUFDM0M7Ozs7Ozs7T0FPRztJQUNILFlBQ21CLE1BQXNCLEVBQ3RCLHdCQUFrRCxFQUNsRCxRQUFrQixFQUNsQixNQUFjO1FBSGQsV0FBTSxHQUFOLE1BQU0sQ0FBZ0I7UUFDdEIsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUNsRCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLFdBQU0sR0FBTixNQUFNLENBQVE7SUFDakMsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7OztPQWNHO0lBQ0kscUJBQXFCLENBQUksU0FBZ0MsRUFBRSxNQUF3QixFQUN4RixPQUEwQztRQUMxQyxjQUFjLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUNwRCxjQUFjLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQUMsQ0FBQztRQUU5QyxPQUFPLElBQUksNEJBQTRCLENBQ3JDLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLHdCQUF3QixFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRyxPQUFlLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDekcsQ0FBQzs4R0F0Q1UsZ0NBQWdDO2tIQUFoQyxnQ0FBZ0M7OzJGQUFoQyxnQ0FBZ0M7a0JBRDVDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBWaWV3Q29udGFpbmVyUmVmLFxuICBJbmplY3RhYmxlLFxuICBJbmplY3RvcixcbiAgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICBBcHBsaWNhdGlvblJlZixcbiAgTmdab25lXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBBcmd1bWVudEhlbHBlciB9IGZyb20gJy4uL3V0aWxzL2FyZ3VtZW50LmhlbHBlcic7XG5pbXBvcnQgeyBTb2hvQ29udGV4dHVhbEFjdGlvblBhbmVsUmVmIH0gZnJvbSAnLi9zb2hvLWNvbnRleHR1YWwtYWN0aW9uLXBhbmVsLnJlZic7XG5cbi8qKlxuICogVGhpcyBzZXJ2aWNlIGlzIHVzZWQgdG8gY3JlYXRlIGEgcGFuZWwgcGFuZWwsIGJhc2VkIG9uIHRoZSBjb250ZW50XG4gKiBvZiBhbiBBbmd1bGFyIENvbXBvbmVudCBvbiB0aGUgc2NyZWVuLlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgU29ob0NvbnRleHR1YWxBY3Rpb25QYW5lbFNlcnZpY2Uge1xuICAvKipcbiAgICogQ29uc3RydWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSBhcHBSZWYgLSBhcHBsaWNhdGlvbiByZWZlcmVuY2U7IG11c3Qgbm90IGJlIG51bGwuXG4gICAqIEBwYXJhbSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgLSB1c2VkIHRvIGNyZWF0ZSBjb21wb25lbnQgZmFjdG9yaWVzIGZvciBjb21wb25lbnRzIGR5bmFtaWNhbGx5LlxuICAgKiBAcGFyYW0gaW5qZWN0b3IgLSB0aGUgY3VycmVudCBpbiBzY29wZSBpbmplY3RvciwgdXNlIGFzIGEgZGVsZWdhdGUuXG4gICAqIEBwYXJhbSBuZ1pvbmUgLSB0aGUgYW5ndWxhciB6b25lOyBtdXN0IG5vdCBiZSBudWxsLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSByZWFkb25seSBhcHBSZWY6IEFwcGxpY2F0aW9uUmVmLFxuICAgIHByaXZhdGUgcmVhZG9ubHkgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSByZWFkb25seSBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgcHJpdmF0ZSByZWFkb25seSBuZ1pvbmU6IE5nWm9uZSkge1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBwYW5lbCBkZWZpbmVkIGJ5IHRoZSBnaXZlbiBjb21wb25lbnQsIHJldHVybmluZyBhIHJlZmVyZW5jZSB0byB0aGVcbiAgICogcGFuZWwgdGhhdCBjYW4gYmUgaW50ZXJhY3RlZCB3aXRoLlxuICAgKlxuICAgKiBUaGUgY29tcG9uZW50IGhhcyB0aGUgcG90ZW50aWFsIHRvIGluY2x1ZGUgdGhlIHBhbmVsIHJlZmVyZW5jZSB3aGVuIGl0IGlzXG4gICAqIGluc3RhbnRpYXRlZCwgYXMgYSBwcm92aWRlci5cbiAgICpcbiAgICogVGhlIHBhbmVsIHdvbid0IG5lY2Vzc2FyaWx5IGJlIG9wZW4geWV0LCBzZWUgdGhlIHBhbmVsIHJlZiBBcGkgZm9yIGZ1cnRoZXIgbWV0aG9kcy5cbiAgICpcbiAgICogQHBhcmFtIGNvbXBvbmVudCAtIHRoZSB0eXBlIG9mIHRoZSBjb21wb25lbnQgdG8gaW5zdGFudGlhdGU7IG11c3Qgbm90IGJlIG51bGwuXG4gICAqIEBwYXJhbSBwYXJlbnQgLSB0aGUgcGFyZW50IGNvbnRhaW5lcjsgbXVzdCBub3QgYmUgbnVsbC5cbiAgICogQHBhcmFtIG9wdGlvbnMgLSB0aGUgZGVmYXVsdCBvcHRpb25zIGZvciB0aGUgcGFuZWw7IG9wdGlvbmFsLlxuICAgKlxuICAgKiBAcmV0dXJuIHRoZSBwYW5lbCByZWZlcmVuY2UuXG4gICAqL1xuICBwdWJsaWMgY29udGV4dHVhbGFjdGlvbnBhbmVsPFQ+KGNvbXBvbmVudDogUGFuZWxDb21wb25lbnRUeXBlPFQ+LCBwYXJlbnQ6IFZpZXdDb250YWluZXJSZWYsXG4gICAgb3B0aW9ucz86IFNvaG9Db250ZXh0dWFsQWN0aW9uUGFuZWxPcHRpb25zKTogU29ob0NvbnRleHR1YWxBY3Rpb25QYW5lbFJlZjxUPiB7XG4gICAgQXJndW1lbnRIZWxwZXIuY2hlY2tOb3ROdWxsKCdjb21wb25lbnQnLCBjb21wb25lbnQpO1xuICAgIEFyZ3VtZW50SGVscGVyLmNoZWNrTm90TnVsbCgncGFyZW50JywgcGFyZW50KTtcblxuICAgIHJldHVybiBuZXcgU29ob0NvbnRleHR1YWxBY3Rpb25QYW5lbFJlZjxUPihcbiAgICAgIHRoaXMuYXBwUmVmLCB0aGlzLmNvbXBvbmVudEZhY3RvcnlSZXNvbHZlciwgdGhpcy5pbmplY3RvciwgdGhpcy5uZ1pvbmUsIChvcHRpb25zIGFzIGFueSksIGNvbXBvbmVudCk7XG4gIH1cbn1cblxuLyoqXG4gKiBPYmplY3Qgd2l0aCBhIFwibmV3XCJcIiBtZXRob2QgcmV0dXJuaW5nIHRoZSB0eXBlIFQuXG4gKi9cbmV4cG9ydCB0eXBlIFBhbmVsQ29tcG9uZW50VHlwZTxUPiA9IG5ldyAoLi4uYXJnczogYW55W10pID0+IFQ7XG4iXX0=
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
/**
 * Wrapper for the jQuery panel control.
 *
 */
export class SohoContextualActionPanelRef {
    /**
     * The component displayed as the panel content.
     *
     * @param componentRef - reference to the component defining the panel panel content.
     */
    set component(componentRef) {
        // The component can also implement the guard interface, if it does
        // use it.
        this.componentRef = componentRef;
    }
    /**
     * The component displayed inside the panel's frame, if specified.  This may
     * be null if the component is built from an HTML fragment or a jQuery selector.
     */
    get componentPanel() {
        if (this.componentRef) {
            return this.componentRef.instance;
        }
        return null;
    }
    /**
     * The buttonset API for the CAP dialog.
     *
     * @returns the buttonset API for the CAP dialog, if initialized.
     */
    get buttonsetAPI() {
        return this.contextualactionpanel ? this.contextualactionpanel.buttonsetAPI : undefined;
    }
    /**
     * Sets the whole options block for this contextual action panel.
     *
     * @param options - the options to set.
     */
    options(options) {
        this._options = $.extend(true, this._options, options);
        if (this.contextualactionpanel) {
            this.contextualactionpanel.settings = this._options;
        }
        return this;
    }
    /**
     * Sets the whole options block for this contextual action panel.
     *
     * @param modalSettings - the options to set.
     */
    modalSettings(modalSettings) {
        this._options.modalSettings = $.extend(true, this._options.modalSettings, modalSettings);
        if (this.contextualactionpanel) {
            this.contextualactionpanel.settings.modalSettings = this._options.modalSettings;
        }
        return this;
    }
    /**
     * Ability to add class(es) to the parent CAP element.
     *
     * @param cssClass - the class(es) value to add in CAP element.
     */
    cssClass(cssClass) {
        if (this.contextualactionpanel && this.open()) {
            this.ngZone.runOutsideAngular(() => {
                const cap = jQuery('div.contextual-action-panel.modal');
                cap.addClass(`${cssClass}`);
            });
        }
        else {
            this._options.modalSettings = $.extend(true, this._options.modalSettings, { cssClass: cssClass });
            if (this.contextualactionpanel) {
                this.contextualactionpanel.settings.modalSettings = this._options.modalSettings;
            }
        }
        return this;
    }
    /** Add extra attributes like id's to the component **/
    attributes(attributes) {
        this._options.attributes = $.extend(true, this._options.attributes, attributes);
        if (this.contextualactionpanel) {
            this.contextualactionpanel.settings.attributes = this._options.attributes;
        }
        return this;
    }
    /**
     * Sets the title of the panel.
     *
     * @param title - the title of the panel.
     */
    title(title) {
        this._options.title = title;
        if (this.contextualactionpanel) {
            this.contextualactionpanel.settings.title = title;
        }
        return this;
    }
    /**
     * Sets the buttons to use on the panel panel.
     *
     * @deprecated (use modalSettings)
     * @param buttons - list of buttons to display
     */
    buttons(buttons) {
        this._options.buttons = buttons;
        if (this.contextualactionpanel) {
            this.contextualactionpanel.settings.buttons = buttons;
        }
        return this;
    }
    /**
     * Sets the 'id' that the panel control uses.
     *
     * @deprecated (use modalSettings)
     * @param id - the id.
     */
    id(id) {
        this._options.id = id;
        if (this.contextualactionpanel) {
            this.contextualactionpanel.settings.id = id;
        }
        return this;
    }
    /**
     * Sets the 'id' that the panel control uses.
     *
     * @param initializeContent - Sets the ability to initialize content.
     */
    initializeContent(initializeContent) {
        this._options.initializeContent = initializeContent;
        if (this.contextualactionpanel) {
            this.contextualactionpanel.settings.initializeContent = initializeContent;
        }
        return this;
    }
    /**
     * Sets the 'centerTitle' that the panel control uses.
     *
     * @deprecated (use modalSettings)
     * @param centerTitle - Aligns title to center
     */
    centerTitle(centerTitle) {
        this._options.centerTitle = centerTitle;
        if (this.contextualactionpanel) {
            this.contextualactionpanel.settings.centerTitle = centerTitle;
        }
        return this;
    }
    /**
     * Sets the 'trigger' that the panel control uses.
     *
     * @deprecated (use modalSettings)
     * @param trigger - when to open the panel.
     */
    trigger(trigger) {
        this._options.trigger = trigger;
        if (this.contextualactionpanel) {
            this.contextualactionpanel.settings.trigger = trigger;
        }
        return this;
    }
    /**
     * Sets the 'content' that the panel control uses.
     *
     * @param content - a selector or string representing the panel content.
     */
    content(content) {
        this._options.content = content;
        if (this.contextualactionpanel) {
            this.contextualactionpanel.settings.content = content;
        }
        return this;
    }
    /**
     * Applies a function to the instantiated component,
     * allowing the component to be modified, or initialised.
     *
     * The function is provided with a typed value for the
     * instance.
     *
     * @param component - the instantiated instance.
     * @return the panel ref for onward assignment.
     */
    apply(fn) {
        if (fn && this.componentRef?.instance) {
            fn(this.componentRef?.instance);
        }
        return this;
    }
    /**
     * panel result property.
     *
     * @param panelResult - the stored result of the panel.
     */
    set panelResult(panelResult) {
        this._panelResult = panelResult;
    }
    get panelResult() {
        return this._panelResult;
    }
    /**
     * Constructor.
     */
    constructor(appRef, componentFactoryResolver, injector, ngZone, settings, panelComponent) {
        this.appRef = appRef;
        this.injector = injector;
        this.ngZone = ngZone;
        /** Event fired when the panel is opened. */
        this.open$ = new Subject();
        /** Event fired when the panel is closed. */
        this.close$ = new Subject();
        /** Event fired before closing the panel */
        this.beforeClose$ = new Subject();
        /** Event fired after closing the panel. */
        this.afterClose$ = new Subject();
        /** Event fired after opening the panel panel. */
        this.afterOpen$ = new Subject();
        /** Handle resource tidy up of this class. */
        this.destroyed$ = new Subject();
        // -------------------------------------------
        // Default options block
        // -------------------------------------------
        /**
         * Cached options.
         */
        this._options = {
            content: undefined,
            initializeContent: true,
            title: 'Contextual Action Panel',
            modalSettings: {
                title: undefined,
                buttons: [],
                centerTitle: false,
                showCloseBtn: false,
                trigger: 'immediate',
                useFlexToolbar: false
            }
        };
        if (settings) {
            this.options(settings);
        }
        if (panelComponent) {
            this.componentRef = componentFactoryResolver
                .resolveComponentFactory(panelComponent)
                .create(this.injector);
            appRef.attachView(this.componentRef.hostView);
            this._options.content = jQuery(this.componentRef.location.nativeElement);
        }
    }
    /**
     * Opens the panel.
     *
     * @return the panel ref.
     */
    open() {
        if (this.contextualactionpanel) {
            // this.contextualactionpanel.open();
            return this;
        }
        if (!this.componentRef && !this._options.content) {
            throw Error('componentRef or content must be initialised.');
        }
        this.jQueryElement = this.ngZone.runOutsideAngular(() => {
            const element = jQuery('body');
            element.contextualactionpanel(this._options);
            this.contextualactionpanel = element.data('contextualactionpanel');
            return this.contextualactionpanel?.element;
        });
        // Add listeners to control events
        this.jQueryElement?.on('close.contextualactionpanel', ((event, isCancelled) => {
            this.onClose(event, isCancelled);
        }));
        this.jQueryElement?.on('open.contextualactionpanel', ((event) => {
            this.onOpen(event);
        }));
        this.contextualactionpanel.panel?.on('afterclose.contextualactionpanel', ((event) => {
            this.onAfterClose(event);
        }));
        this.contextualactionpanel.panel?.on('afteropen.contextualactionpanel', ((event) => {
            this.onAfterOpen(event);
        }));
        this.contextualactionpanel.panel?.on('beforeclose.contextualactionpanel', ((event) => {
            this.onBeforeClose(event);
        }));
        return this;
    }
    /**
     * Closes the panel, if open. The panel is not closed
     * fully until the 'afterClosed' event is fired.
     *
     * @param panelResult - optional result - passed back to the caller.
     * @param doForce - optional - forces the modal to close.
     */
    close(panelResult, doForce) {
        this.panelResult = panelResult;
        if (this.contextualactionpanel) {
            this.ngZone.runOutsideAngular(() => {
                this.contextualactionpanel?.close(doForce);
            });
        }
        return this;
    }
    // ------------------------------------------
    // Events
    // ------------------------------------------
    /**
     * Opened Event.
     *
     * This event is fired when the panel is being opened.
     *
     * @param eventFn - the function to invoke when the panel is to be opened.
     */
    opened(eventFn) {
        this.open$.pipe(takeUntil(this.destroyed$)).subscribe((f) => {
            eventFn(f, this);
        });
        return this;
    }
    /**
     * Opened Event.
     * This event is fired after the panel has been opened.
     *
     * @param eventFn - the function to invoke when the panel is to be opened.
     */
    afterOpen(eventFn) {
        this.afterOpen$.pipe(takeUntil(this.destroyed$)).subscribe((f) => {
            eventFn(f, this);
        });
        return this;
    }
    /**
     * Before Closed Event.
     * This event is fired before closing the panel.
     *
     * @param eventFn - the function to invoke when the panel before closing.
     */
    beforeClose(eventFn) {
        this.beforeClose$.pipe(takeUntil(this.destroyed$)).subscribe((f) => {
            eventFn(f, this);
        });
        return this;
    }
    /**
     * Closed Event.
     *
     * This event is fired when the panel is being closed.
     *
     * @param eventFn - the function to invoke when the panel is to be closed.
     */
    closed(eventFn) {
        this.close$.pipe(takeUntil(this.destroyed$)).subscribe((result) => {
            eventFn(result, this, this.componentPanel);
        });
        return this;
    }
    /**
     * After Closed Event.
     *
     * This event is fired, with the result of the panel, when the panel has been
     * closed and destroyed.
     *
     * @param eventFn - the function to invoke after the panel has been closed.
     */
    afterClose(eventFn) {
        this.afterClose$.pipe(takeUntil(this.destroyed$)).subscribe((result) => {
            if (!eventFn) {
                return;
            }
            eventFn(result, this, this.componentPanel);
        });
        return this;
    }
    // -------------------------------------------
    // Event Handlers
    // -------------------------------------------
    /**
     * Handles the 'open' event, fired just before
     * the focus is assigned to a panel.
     *
     * @param event - full event object.
     */
    onOpen(event) {
        this.open$.next(event);
    }
    /**
     * Handles the 'afterOpen' event, fired after the panel panel
     * has been opened.
     *
     * @param event - full event object.
     */
    onAfterOpen(event) {
        this.afterOpen$.next(event);
    }
    /**
     * Handles the close event.
     *
     * @param event - full event object.
     * @param isCancelled - is true if the cancel button was pressed; otherwise false.
     */
    onClose(_event, isCancelled) {
        this.close$.next(isCancelled);
    }
    /**
     * Handles the 'afterClose' event, fired when th panel
     * has been closed and tidy up is required.
     *
     * @param event - full event object.
     */
    onAfterClose(_event) {
        // Pass the panel result back.
        this.ngZone.run(() => {
            this.afterClose$.next(this.panelResult);
            this.afterClose$.complete();
        });
        if (this.jQueryElement) {
            this.jQueryElement.off('close.contextualactionpanel open.contextualactionpanel');
        }
        this.contextualactionpanel?.destroy();
        this.contextualactionpanel = null;
        this.ngZone.run(() => {
            if (this.componentRef) {
                this.appRef.detachView(this.componentRef.hostView);
                this.componentRef.destroy();
                this.componentRef = null;
            }
            this.destroyed$.next(_event);
            this.destroyed$.complete();
        });
    }
    /**
     * Handles the 'beforeclose' event.
     *
     * @param event - full event object.
     */
    onBeforeClose(event) {
        this.beforeClose$.next(event);
    }
}
//# sourceMappingURL=data:application/json;base64,
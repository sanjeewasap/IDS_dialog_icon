import { ChangeDetectionStrategy, Component, HostBinding, HostListener, Input, } from '@angular/core';
import { ArgumentHelper } from '../utils/argument.helper';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../icon/soho-icon.component";
export class SohoButtonComponent {
    // -------------------------------------------
    // Supported button types.
    // -------------------------------------------
    static { this.BTN = 'btn'; }
    static { this.PRIMARY = 'primary'; }
    static { this.SECONDARY = 'secondary'; }
    static { this.TERTIARY = 'tertiary'; }
    static { this.ICON = 'icon'; }
    static { this.FAVORITE = 'favorite'; }
    static { this.MODAL = 'modal'; }
    static { this.MODAL_PRIMARY = 'modal-primary'; }
    /**
     * The type of the button, defaulting to 'secondary'.
     *
     * Allow override of input, to match component selector.
     */
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set sohoButton(type) {
        this.buttonType = type ? type : SohoButtonComponent.SECONDARY;
    }
    /**
     * Sets the button options
     */
    set buttonOptions(buttonOptions) {
        ArgumentHelper.checkNotNull('buttonOptions', buttonOptions);
        this._buttonOptions = buttonOptions;
        if (this.button) {
            // todo: how to update the button when options change?
        }
    }
    get buttonOptions() {
        return this._buttonOptions;
    }
    set toggleOnIcon(toggleOnIcon) {
        this._buttonOptions.toggleOnIcon = toggleOnIcon;
        if (this.jQueryElement) {
            // todo: how to update the button when toggleOnIcon changes?
        }
    }
    set toggleOffIcon(toggleOffIcon) {
        this._buttonOptions.toggleOffIcon = toggleOffIcon;
        if (this.jQueryElement) {
            // todo: how to update the button when toggleOffIcon changes?
        }
    }
    set replaceText(replaceText) {
        this._buttonOptions.replaceText = replaceText;
        if (this.jQueryElement) {
            this.button.settings.replaceText = replaceText;
        }
    }
    set hideMenuArrow(value) {
        this._buttonOptions.hideMenuArrow = value;
        if (this.button) {
            this.button.settings.hideMenuArrow = value;
        }
    }
    get hideMenuArrow() {
        return this._buttonOptions.hideMenuArrow;
    }
    /**
     * Used to add a bigger hit area (for mobile)
     */
    set hitbox(value) {
        this._buttonOptions.hitbox = value;
        if (this.button) {
            this.button.settings.hitbox = value;
        }
    }
    get hitbox() {
        return this._buttonOptions.hitbox;
    }
    /**
     * Used to set a notification badge on the button
     */
    set notificationBadge(value) {
        this._buttonOptions.notificationBadge = value;
        if (this.button) {
            this.button.settings.notificationBadge = value;
        }
    }
    get notificationBadge() {
        return this._buttonOptions.notificationBadge;
    }
    /**
     * Set the position and color of the notification badge on the button
     */
    set notificationBadgeOptions(value) {
        this._buttonOptions.notificationBadgeOptions = value;
        if (this.button) {
            this.button.settings.notificationBadgeOptions = value;
        }
    }
    get notificationBadgeOptions() {
        return this._buttonOptions.notificationBadgeOptions;
    }
    /**
     * Whether this button should be a toggle button or not. Alternate toggle on/off icons
     * can be used through toggleOnIcon/toggleOffIcon inputs.
     */
    set isToggle(isToggle) {
        this._isToggle = isToggle;
    }
    get isToggle() {
        return this._isToggle;
    }
    /**
     * Whether the toggle button should be in a pressed state or not.
     */
    set isTogglePressed(isTogglePressed) {
        this._isTogglePressed = isTogglePressed;
    }
    get isTogglePressed() {
        return this._isTogglePressed;
    }
    /**
     * The icon placement
     */
    set iconAlign(iconAlign) {
        this._iconAlign = iconAlign;
    }
    get iconAlign() {
        return this._iconAlign;
    }
    get btn() {
        return this.buttonType === SohoButtonComponent.BTN;
    }
    get btnPrimary() {
        return this.buttonType === SohoButtonComponent.PRIMARY;
    }
    get btnSecondary() {
        return this.buttonType === SohoButtonComponent.SECONDARY;
    }
    get btnTertiary() {
        return this.buttonType === SohoButtonComponent.TERTIARY;
    }
    get btnIcon() {
        return this.buttonType === SohoButtonComponent.ICON || this.buttonType === SohoButtonComponent.FAVORITE;
    }
    get btnToggle() {
        return this.isToggle;
    }
    get btnModal() {
        return this.buttonType === SohoButtonComponent.MODAL;
    }
    get btnModalPrimary() {
        return this.buttonType === SohoButtonComponent.MODAL_PRIMARY;
    }
    get btnTogglePressed() {
        return this.isTogglePressed;
    }
    get iconFavorite() {
        return this.buttonType === SohoButtonComponent.FAVORITE;
    }
    get noRipple() {
        return !this.ripple;
    }
    get type() {
        return this.isSubmit ? 'submit' : 'button';
    }
    get isExpandableExpander() {
        return this.expandableExpander;
    }
    /**
     * @deprecated no longer needed once this.toggle is removed.
     */
    toggleState() {
        if (this.toggle) { // eslint-disable-line
            this.state = !this.state; // eslint-disable-line
        }
    }
    get ariaPressed() {
        return this.isTogglePressed;
    }
    /**
     * Constructor.
     *
     * @param elementRef - the element matching the component's selector.
     */
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        this._buttonOptions = {};
        this._isToggle = false;
        this._isTogglePressed = false;
        this._iconAlign = 'start';
        this._isPressed = false;
        /** Sets the button type to 'submit' when true. */
        this.isSubmit = false;
        /** Sets whether the button should have a ripple effect on click. */
        this.ripple = true;
        /**
         * Sets the expandable-expander class to be placed on the button for the
         * soho-expandablearea to use as it's expand/collapse trigger
         *
         */
        this.expandableExpander = false;
    }
    // ------------------------------------------
    // Lifecycle Events
    // ------------------------------------------
    ngOnInit() {
        if (this.buttonType === SohoButtonComponent.FAVORITE) {
            if (this.isToggle) {
                this.toggleOffIcon = 'star-outlined';
                this.toggleOnIcon = 'star-filled';
            }
            else {
                // deprecated in 4.3.0 sohoxi
                this.toggle = 'star-outlined'; // eslint-disable-line
                this.icon = 'star-filled';
            }
        }
        if (this.notificationBadge && this.notificationBadgeOptions?.position === 'upper-right') {
            this.iconAlign = 'end';
        }
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            const self = this;
            // Wrap the element in a jQuery selector.
            this.jQueryElement = jQuery(this.element.nativeElement);
            // Initialise the Soho control.
            this.jQueryElement.button(this._buttonOptions);
            // Initialize title attribute as a soho tooltip
            if (this.jQueryElement.has('[title]') && !this.jQueryElement.has('[popover]')) {
                this.jQueryElement.tooltip();
            }
            // Once the control is initialised, extract the control
            // plug-in from the element.  The element name is defined
            // by the plug-in, but in this case is 'button'.
            this.button = this.jQueryElement.data('button');
            if (this.state !== undefined) { // eslint-disable-line
                // turn off the default handling of the favorite icon switching
                // in the sohoxi controls (button.js). This is so that only this
                // button-component handles the switching of the toggle icon for
                // favorite.
                if (this.buttonType === SohoButtonComponent.FAVORITE) {
                    this.jQueryElement.off('click.favorite');
                }
            }
            // Remove aria-pressed attribute if button is not toggle
            if (!this.isToggle) {
                if (this.jQueryElement.attr('aria-pressed') !== undefined) {
                    this.jQueryElement.removeAttr('aria-pressed');
                }
            }
            // There are no 'extra' event handlers for button.
            // Add observer for button changes in html
            const observer = new MutationObserver(function (mutations) {
                if (mutations[0].attributeName === 'soho-button' && self.jQueryElement) {
                    const buttonStyles = [
                        'btn',
                        'btn-primary',
                        'btn-secondary',
                        'btn-tertiary',
                        'btn-icon',
                        'icon-favorite',
                        'default'
                    ];
                    const removeClassStyles = () => {
                        if (self.jQueryElement) {
                            buttonStyles.forEach(style => {
                                if (self.jQueryElement?.hasClass(style)) {
                                    self.jQueryElement.removeClass(style);
                                }
                            });
                        }
                    };
                    const type = self.jQueryElement.attr('soho-button');
                    const buttonOptions = { style: self._buttonOptions.style, type: self._buttonOptions.type };
                    switch (type) {
                        case 'btn':
                            removeClassStyles();
                            self.buttonType = SohoButtonComponent.BTN;
                            buttonOptions.style = 'btn';
                            break;
                        case 'primary':
                            removeClassStyles();
                            self.buttonType = SohoButtonComponent.PRIMARY;
                            buttonOptions.style = 'btn-primary';
                            break;
                        case 'secondary':
                            removeClassStyles();
                            self.buttonType = SohoButtonComponent.SECONDARY;
                            buttonOptions.style = 'btn-secondary';
                            break;
                        case 'tertiary':
                            removeClassStyles();
                            self.buttonType = SohoButtonComponent.TERTIARY;
                            buttonOptions.style = 'btn-tertiary';
                            break;
                        case 'icon':
                            removeClassStyles();
                            self.buttonType = SohoButtonComponent.ICON;
                            buttonOptions.type = 'btn-icon';
                            break;
                        case 'favorite':
                            removeClassStyles();
                            self.buttonType = SohoButtonComponent.FAVORITE;
                            buttonOptions.type = 'icon-favorite';
                            break;
                        case 'default':
                            removeClassStyles();
                            buttonOptions.style = 'default';
                            buttonOptions.type = 'default';
                            break;
                    }
                    self.updated(buttonOptions);
                }
            });
            observer.observe(this.element.nativeElement, {
                attributes: true,
                attributeFilter: ['soho-button']
            });
        });
    }
    /**
     * Destructor.
     */
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.button) {
                this.button.destroy();
                this.button = null;
            }
        });
    }
    get hasIcon() {
        return (this.icon || (this.buttonOptions.toggleOnIcon && this.buttonOptions.toggleOffIcon)) && (this.iconAlign !== 'end');
    }
    get hasIconEnd() {
        return (this.icon || (this.buttonOptions.toggleOnIcon && this.buttonOptions.toggleOffIcon)) && (this.iconAlign === 'end');
    }
    get currentIcon() {
        if (this.isToggle && this.buttonOptions.toggleOnIcon && this.buttonOptions.toggleOffIcon) {
            return this.isTogglePressed ? this.buttonOptions.toggleOnIcon : this.buttonOptions.toggleOffIcon;
        }
        if (this.toggle) { // eslint-disable-line
            return this.state ? this.icon : this.toggle; // eslint-disable-line
        }
        return this.icon;
    }
    /**
     * @deprecated use isToggle and isTogglePressed instead.
     */
    isPressed() {
        return this.ngZone.runOutsideAngular(() => {
            const pressed = this.element.nativeElement.getAttribute('aria-pressed');
            this._isPressed = (pressed === true || pressed === 'true');
            return this._isPressed;
        });
    }
    updated(settings) {
        if (settings) {
            this._buttonOptions = Soho.utils.mergeSettings(this.element[0], settings, this._buttonOptions);
        }
        this.ngZone.runOutsideAngular(() => {
            if (this.button) {
                this.button.updated(this._buttonOptions);
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoButtonComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoButtonComponent, selector: "button[soho-button]", inputs: { sohoButton: ["soho-button", "sohoButton"], buttonOptions: "buttonOptions", toggleOnIcon: "toggleOnIcon", toggleOffIcon: "toggleOffIcon", replaceText: "replaceText", hideMenuArrow: "hideMenuArrow", hitbox: "hitbox", notificationBadge: "notificationBadge", notificationBadgeOptions: "notificationBadgeOptions", extraIconClass: "extraIconClass", isToggle: "isToggle", isTogglePressed: "isTogglePressed", icon: "icon", iconAlign: "iconAlign", isSubmit: "isSubmit", ripple: "ripple", state: "state", toggle: "toggle", expandableExpander: "expandableExpander", moveToLeft: "moveToLeft", moveToRight: "moveToRight", moveToSelected: "moveToSelected" }, host: { listeners: { "click": "toggleState()" }, properties: { "class.btn": "this.btn", "class.btn-primary": "this.btnPrimary", "class.btn-secondary": "this.btnSecondary", "class.btn-tertiary": "this.btnTertiary", "class.btn-icon": "this.btnIcon", "class.btn-toggle": "this.btnToggle", "class.btn-modal": "this.btnModal", "class.btn-modal-primary": "this.btnModalPrimary", "class.is-pressed": "this.btnTogglePressed", "class.icon-favorite": "this.iconFavorite", "class.btn-moveto-left": "this.moveToLeft", "class.btn-moveto-right": "this.moveToRight", "class.btn-moveto-selected": "this.moveToSelected", "class.no-ripple": "this.noRipple", "attr.type": "this.type", "class.expandable-expander": "this.isExpandableExpander", "attr.aria-pressed": "this.ariaPressed" } }, ngImport: i0, template: "<svg soho-icon *ngIf=\"hasIcon\" [icon]=\"currentIcon\" [extraIconClass]=\"extraIconClass\"></svg>\n<span><ng-content></ng-content></span>\n<svg soho-icon *ngIf=\"hasIconEnd\" [icon]=\"currentIcon\" [extraIconClass]=\"extraIconClass\"></svg>\n<ng-content select=\"div.disabled-tooltip\"></ng-content>\n", dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.SohoIconComponent, selector: "svg[soho-icon]", inputs: ["isEmptyState", "extraIconClass", "alert", "icon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'button[soho-button]', changeDetection: ChangeDetectionStrategy.OnPush, template: "<svg soho-icon *ngIf=\"hasIcon\" [icon]=\"currentIcon\" [extraIconClass]=\"extraIconClass\"></svg>\n<span><ng-content></ng-content></span>\n<svg soho-icon *ngIf=\"hasIconEnd\" [icon]=\"currentIcon\" [extraIconClass]=\"extraIconClass\"></svg>\n<ng-content select=\"div.disabled-tooltip\"></ng-content>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { sohoButton: [{
                type: Input,
                args: ['soho-button']
            }], buttonOptions: [{
                type: Input
            }], toggleOnIcon: [{
                type: Input
            }], toggleOffIcon: [{
                type: Input
            }], replaceText: [{
                type: Input
            }], hideMenuArrow: [{
                type: Input
            }], hitbox: [{
                type: Input
            }], notificationBadge: [{
                type: Input
            }], notificationBadgeOptions: [{
                type: Input
            }], extraIconClass: [{
                type: Input
            }], isToggle: [{
                type: Input
            }], isTogglePressed: [{
                type: Input
            }], icon: [{
                type: Input
            }], iconAlign: [{
                type: Input
            }], isSubmit: [{
                type: Input
            }], ripple: [{
                type: Input
            }], state: [{
                type: Input
            }], toggle: [{
                type: Input
            }], expandableExpander: [{
                type: Input
            }], btn: [{
                type: HostBinding,
                args: ['class.btn']
            }], btnPrimary: [{
                type: HostBinding,
                args: ['class.btn-primary']
            }], btnSecondary: [{
                type: HostBinding,
                args: ['class.btn-secondary']
            }], btnTertiary: [{
                type: HostBinding,
                args: ['class.btn-tertiary']
            }], btnIcon: [{
                type: HostBinding,
                args: ['class.btn-icon']
            }], btnToggle: [{
                type: HostBinding,
                args: ['class.btn-toggle']
            }], btnModal: [{
                type: HostBinding,
                args: ['class.btn-modal']
            }], btnModalPrimary: [{
                type: HostBinding,
                args: ['class.btn-modal-primary']
            }], btnTogglePressed: [{
                type: HostBinding,
                args: ['class.is-pressed']
            }], iconFavorite: [{
                type: HostBinding,
                args: ['class.icon-favorite']
            }], moveToLeft: [{
                type: HostBinding,
                args: ['class.btn-moveto-left']
            }, {
                type: Input
            }], moveToRight: [{
                type: HostBinding,
                args: ['class.btn-moveto-right']
            }, {
                type: Input
            }], moveToSelected: [{
                type: HostBinding,
                args: ['class.btn-moveto-selected']
            }, {
                type: Input
            }], noRipple: [{
                type: HostBinding,
                args: ['class.no-ripple']
            }], type: [{
                type: HostBinding,
                args: ['attr.type']
            }], isExpandableExpander: [{
                type: HostBinding,
                args: ['class.expandable-expander']
            }], toggleState: [{
                type: HostListener,
                args: ['click']
            }], ariaPressed: [{
                type: HostBinding,
                args: ['attr.aria-pressed']
            }] } });
//# sourceMappingURL=data:application/json;base64,
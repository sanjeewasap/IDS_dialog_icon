import { Directive, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoMaskDirective {
    /** Sets all the options. */
    set options(value) {
        this._options = (typeof value === 'string') ? JSON.parse(value) : value;
        if (this.mask) {
            // After the mask has been created do not overwrite the mask.settings.
            // That will cause certain required defaults to go missing out of the mask.settings object.
            // Instead just call updated() with the new _options. The mask-input.js update() function
            // merges the new setting in w/o losing any important default.
            this.mask.updated(this._options);
        }
    }
    /** Definitions of pattern(s) as a regular expression. */
    set definitions(value) {
        this._options.definitions = value;
        if (this.mask) {
            this.mask.settings.definitions = value;
            this.mask.updated();
        }
    }
    /** When true, appends the leftover characters in the placeholder to the conformed value. */
    set guide(value) {
        this._options.guide = value;
        if (this.mask) {
            this.mask.settings.guide = value;
            this.mask.updated();
        }
    }
    /** When true, keeps groups of character intact. */
    set keepCharacterPositions(value) {
        this._options.keepCharacterPositions = value;
        if (this.mask) {
            this.mask.settings.keepCharacterPositions = value;
            this.mask.updated();
        }
    }
    /** Function that replaces the internal masking functionality. */
    set maskAPI(value) {
        this._options.maskAPI = value;
        if (this.mask) {
            this.mask.settings.maskAPI = value;
            this.mask.updated();
        }
    }
    /**
     *  The pattern to use for the mask.
     *
     * This uses the sohoPrefix otherwise the pattern interferes
     * with the pattern on form groups.
     */
    set sohoPattern(value) {
        this._options.pattern = value;
        if (this.mask) {
            this.mask.settings.pattern = value;
            this.mask.updated();
        }
    }
    /** Function that is executed after the masking process is complete. */
    set pipe(value) {
        this._options.pipe = value;
        if (this.mask) {
            this.mask.settings.pipe = value;
            this.mask.updated();
        }
    }
    /** The placeholder text for the mask. */
    set placeholder(value) {
        this._options.placeholderChar = value;
        if (this.mask) {
            this.mask.settings.placeholderChar = value;
            this.mask.updated();
        }
    }
    /** Indicates special formatting rules may apply to the mask. */
    set process(value) {
        this._options.process = value;
        if (this.mask) {
            this.mask.settings.process = value;
            this.mask.updated();
        }
    }
    /** When true, the onblur event executes mask processing. */
    set processOnBlur(value) {
        this._options.processOnBlur = value;
        if (this.mask) {
            this.mask.settings.processOnBlur = value;
            this.mask.updated();
        }
    }
    /** Indicates to initially mask the value of the input field. */
    set processOnInitialize(value) {
        this._options.processOnInitialize = value;
        if (this.mask) {
            this.mask.settings.processOnInitialize = value;
            this.mask.updated();
        }
    }
    /** The pattern options. */
    set patternOptions(value) {
        this._options.patternOptions = (typeof value === 'string') ? JSON.parse(value) : value;
        if (this.mask) {
            this.mask.settings.patternOptions = this._options.patternOptions;
            this.mask.updated();
        }
    }
    /** When true, the decimal separator symbol is allowed in a formatted number. */
    set allowDecimal(value) {
        this._options.patternOptions.allowDecimal = value;
        if (this.mask) {
            this.mask.settings.patternOptions.allowDecimal = value;
            this.mask.updated();
        }
    }
    /** When true, allows leading zeros in a formatted number. */
    set allowLeadingZeros(value) {
        this._options.patternOptions.allowLeadingZeros = value;
        if (this.mask) {
            this.mask.settings.patternOptions.allowLeadingZeros = value;
            this.mask.updated();
        }
    }
    /** When true, the negative symbol is allowed in a formatted number. */
    set allowNegative(value) {
        this._options.patternOptions.allowNegative = value;
        if (this.mask) {
            this.mask.settings.patternOptions.allowNegative = value;
            this.mask.updated();
        }
    }
    /** When true, adds the thousands separator symbol to the correct location in a formatted number. */
    set allowThousandsSeparator(value) {
        this._options.patternOptions.allowThousandsSeparator = value;
        if (this.mask) {
            this.mask.settings.patternOptions.allowThousandsSeparator = value;
            this.mask.updated();
        }
    }
    /** The maximum number of digits to the left of the decimal separator symbol in a formatted number. */
    set decimalLimit(value) {
        this._options.patternOptions.decimalLimit = value;
        if (this.mask) {
            this.mask.settings.patternOptions.decimalLimit = value;
            this.mask.updated();
        }
    }
    /** The maximum number of digits to the right of decimal separator symbol in a formatted number. */
    set integerLimit(value) {
        this._options.patternOptions.integerLimit = value;
        if (this.mask) {
            this.mask.settings.patternOptions.integerLimit = value;
            this.mask.updated();
        }
    }
    /** The character that precedes the masked value. */
    set prefix(value) {
        this._options.patternOptions.prefix = value;
        if (this.mask) {
            this.mask.settings.patternOptions.prefix = value;
            this.mask.updated();
        }
    }
    /** When true, the decimal separator symbol is required in a formatted number. */
    set requireDecimal(value) {
        this._options.patternOptions.requireDecimal = value;
        if (this.mask) {
            this.mask.settings.patternOptions.requireDecimal = value;
            this.mask.updated();
        }
    }
    /** The character that follows the masked value. */
    set suffix(value) {
        this._options.patternOptions.suffix = value;
        if (this.mask) {
            this.mask.settings.patternOptions.suffix = value;
            this.mask.updated();
        }
    }
    /** The symbols to use for the formatted number. */
    set symbols(value) {
        this._options.patternOptions.symbols = (typeof value === 'string') ? JSON.parse(value) : value;
        if (this.mask) {
            this.mask.settings.patternOptions.symbols = this._options.patternOptions.symbols;
            this.mask.updated();
        }
    }
    /** The locale to use for the formatted number. */
    set locale(value) {
        this._options.patternOptions.locale = value;
        if (this.mask) {
            this.mask.settings.patternOptions.locale = this._options.patternOptions.locale;
            this.mask.updated();
        }
    }
    /** The currency symbol to use for the formatted number. */
    set currencySymbol(value) {
        this._options.patternOptions.symbols.currency = value;
        if (this.mask) {
            this.mask.settings.patternOptions.symbols.currency = value;
            this.mask.updated();
        }
    }
    /** The decimal separator symbol to use for the formatted number. */
    set decimalSymbol(value) {
        this._options.patternOptions.symbols.decimal = value;
        if (this.mask) {
            this.mask.settings.patternOptions.symbols.decimal = value;
            this.mask.updated();
        }
    }
    /** The negative symbol to use for the formatted number. */
    set negativeSymbol(value) {
        this._options.patternOptions.symbols.negative = value;
        if (this.mask) {
            this.mask.settings.patternOptions.symbols.negative = value;
            this.mask.updated();
        }
    }
    /** The thousands separator symbol to use for the formatted number. */
    set thousandsSymbol(value) {
        this._options.patternOptions.symbols.thousands = value;
        if (this.mask) {
            this.mask.settings.patternOptions.symbols.thousands = value;
            this.mask.updated();
        }
    }
    // deprecated methods
    /**
     * Indicates if each section of the group pattern match must be full in order for
     * the literals in-between each section to be automatically added (meaning you can't
     * type a literal to end that group until all characters in that group are entered).
     *
     * @deprecated not supported
     */
    set groupComplete(_value) {
        console.warn('The groupComplete input is no longer supported, please remove your usage.');
    }
    /**
     * Indicates special formatting rules may apply to the mask.
     *
     * @deprecated use process instead
     */
    set mode(value) {
        console.warn('The mode input has been renamed, please use the process input instead.');
        this._options.process = value;
        if (this.mask) {
            this.mask.settings.process = value;
            this.mask.updated();
        }
    }
    /**
     * Indicates to complete the full mask or the mask will revert to empty.
     *
     * @deprecated not supported
     */
    set mustComplete(_value) {
        console.warn('The mustComplete input is no longer supported, please remove your usage.');
    }
    /**
     * Indicates you can enter the negative symbol in front of the number;
     * automatically set to true if a negative symbol is detected inside the mask.
     *
     * @deprecated use allowNegative instead
     */
    set negative(value) {
        console.warn('The negative input has been renamed, please use the allowNegative input instead.');
        this._options.patternOptions.allowNegative = value;
        if (this.mask) {
            this.mask.settings.patternOptions.allowNegative = value;
            this.mask.updated();
        }
    }
    /**
     * Option defined in control, but not referenced.
     *
     * @deprecated
     */
    set number(_value) {
        console.warn('The number input is no longer supported, please remove your usage.');
    }
    /**
     * Indicates the thousands separator for numbers (based on localization) will be
     * inserted wherever necessary during typing; automatically set to true if the
     * localized thousands separator is detected inside the mask.
     *
     * @deprecated use allowThousandsSeparator instead
     */
    set thousandsSeparator(value) {
        console.warn('The thousandsSeparator input has been renamed, please use the allowThousandsSeparator input instead.');
        this._options.patternOptions.allowThousandsSeparator = value;
        if (this.mask) {
            this.mask.settings.patternOptions.allowThousandsSeparator = value;
            this.mask.updated();
        }
    }
    /**
     * Indicates to display the localized symbol for currency or percent;
     * backwards compatible with old 'data-show-currency'; value true equates to currency
     *
     * @deprecated use prefix or suffix instead
     */
    set showSymbol(_value) {
        console.warn('The showSymbol input is no longer supported, please use the prefix or suffix input instead.');
    }
    constructor(element) {
        this.element = element;
        /**
         * Called when mask value changes
         */
        this.write = new EventEmitter();
        this._symbols = {};
        this._patternOptions = {
            symbols: this._symbols
        };
        this._options = {
            patternOptions: this._patternOptions
        };
    }
    ngAfterViewInit() {
        this.jQueryElement = jQuery(this.element.nativeElement);
        this.jQueryElement.mask(this._options);
        this.mask = this.jQueryElement.data('mask');
        /**
         * Bind to jQueryElement's events
         */
        this.jQueryElement
            .on('write.mask', (event) => {
            this.write.emit(event);
        });
    }
    /** Destructor. */
    ngOnDestroy() {
        if (this.jQueryElement) {
            this.jQueryElement.off();
            this.jQueryElement = undefined;
        }
        if (this.mask) {
            this.mask.destroy();
            this.mask = null;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoMaskDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: SohoMaskDirective, selector: "input[soho-mask]", inputs: { options: "options", definitions: "definitions", guide: "guide", keepCharacterPositions: "keepCharacterPositions", maskAPI: "maskAPI", sohoPattern: "sohoPattern", pipe: "pipe", placeholder: "placeholder", process: "process", processOnBlur: "processOnBlur", processOnInitialize: "processOnInitialize", patternOptions: "patternOptions", allowDecimal: "allowDecimal", allowLeadingZeros: "allowLeadingZeros", allowNegative: "allowNegative", allowThousandsSeparator: "allowThousandsSeparator", decimalLimit: "decimalLimit", integerLimit: "integerLimit", prefix: "prefix", requireDecimal: "requireDecimal", suffix: "suffix", symbols: "symbols", locale: "locale", currencySymbol: "currencySymbol", decimalSymbol: "decimalSymbol", negativeSymbol: "negativeSymbol", thousandsSymbol: "thousandsSymbol", groupComplete: "groupComplete", mode: "mode", mustComplete: "mustComplete", negative: "negative", number: "number", thousandsSeparator: "thousandsSeparator", showSymbol: "showSymbol" }, outputs: { write: "write" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoMaskDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[soho-mask]' // eslint-disable-line
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { options: [{
                type: Input
            }], definitions: [{
                type: Input
            }], guide: [{
                type: Input
            }], keepCharacterPositions: [{
                type: Input
            }], maskAPI: [{
                type: Input
            }], sohoPattern: [{
                type: Input
            }], pipe: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], process: [{
                type: Input
            }], processOnBlur: [{
                type: Input
            }], processOnInitialize: [{
                type: Input
            }], patternOptions: [{
                type: Input
            }], allowDecimal: [{
                type: Input
            }], allowLeadingZeros: [{
                type: Input
            }], allowNegative: [{
                type: Input
            }], allowThousandsSeparator: [{
                type: Input
            }], decimalLimit: [{
                type: Input
            }], integerLimit: [{
                type: Input
            }], prefix: [{
                type: Input
            }], requireDecimal: [{
                type: Input
            }], suffix: [{
                type: Input
            }], symbols: [{
                type: Input
            }], locale: [{
                type: Input
            }], currencySymbol: [{
                type: Input
            }], decimalSymbol: [{
                type: Input
            }], negativeSymbol: [{
                type: Input
            }], thousandsSymbol: [{
                type: Input
            }], groupComplete: [{
                type: Input
            }], mode: [{
                type: Input
            }], mustComplete: [{
                type: Input
            }], negative: [{
                type: Input
            }], number: [{
                type: Input
            }], thousandsSeparator: [{
                type: Input
            }], showSymbol: [{
                type: Input
            }], write: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
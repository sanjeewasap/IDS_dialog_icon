import { Component, Directive, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * SUB COMPONENT: SOHO-CONTEXT-MENU-HEADING
 */
export class SohoContextMenuHeadingComponent {
    get isHeading() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoContextMenuHeadingComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoContextMenuHeadingComponent, selector: "li[soho-context-menu-heading]", host: { properties: { "class.heading": "this.isHeading" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoContextMenuHeadingComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'li[soho-context-menu-heading]',
                    template: `<ng-content></ng-content>`
                }]
        }], propDecorators: { isHeading: [{
                type: HostBinding,
                args: ['class.heading']
            }] } });
/**
 * SUB COMPONENT: SOHO-CONTEXT-MENU-SHORTCUT-TEXT
 */
export class SohoContextMenuShortCutTextComponent {
    get isShortCutText() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoContextMenuShortCutTextComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoContextMenuShortCutTextComponent, selector: "span[soho-context-menu-shortcut-text]", host: { properties: { "class.shortcut-text": "this.isShortCutText" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoContextMenuShortCutTextComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'span[soho-context-menu-shortcut-text]',
                    template: `<ng-content></ng-content>`
                }]
        }], propDecorators: { isShortCutText: [{
                type: HostBinding,
                args: ['class.shortcut-text']
            }] } });
/**
 * SUB COMPONENT: SOHO-CONTEXT-MENU-SEPARATOR
 */
export class SohoContextMenuSeparatorComponent {
    constructor() {
        this.singleSelectableSection = false;
        this.multiSelectableSection = false;
    }
    get isSeparator() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoContextMenuSeparatorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoContextMenuSeparatorComponent, selector: "li[soho-context-menu-separator]", inputs: { singleSelectableSection: "singleSelectableSection", multiSelectableSection: "multiSelectableSection" }, host: { properties: { "class.separator": "this.isSeparator", "class.single-selectable-section": "this.singleSelectableSection", "class.multi-selectable-section": "this.multiSelectableSection" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoContextMenuSeparatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'li[soho-context-menu-separator]',
                    template: `<ng-content></ng-content>`
                }]
        }], propDecorators: { isSeparator: [{
                type: HostBinding,
                args: ['class.separator']
            }], singleSelectableSection: [{
                type: HostBinding,
                args: ['class.single-selectable-section']
            }, {
                type: Input
            }], multiSelectableSection: [{
                type: HostBinding,
                args: ['class.multi-selectable-section']
            }, {
                type: Input
            }] } });
/**
 * SUB COMPONENT: SOHO-CONTEXT-MENU-LABEL
 */
export class SohoContextMenuItemLabelComponent {
    get hrefAttr() {
        if (this.menuId) {
            return '#' + this.menuId;
        }
        if (this.menuUrl) {
            return this.menuUrl;
        }
        return '#';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoContextMenuItemLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoContextMenuItemLabelComponent, selector: "a[soho-context-menu-label]", inputs: { menuId: "menuId", menuUrl: "menuUrl" }, host: { properties: { "attr.href": "this.hrefAttr" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoContextMenuItemLabelComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'a[soho-context-menu-label]',
                    template: `<ng-content></ng-content>`
                }]
        }], propDecorators: { hrefAttr: [{
                type: HostBinding,
                args: ['attr.href']
            }], menuId: [{
                type: Input
            }], menuUrl: [{
                type: Input
            }] } });
/**
 * SUB COMPONENT: SOHO-CONTEXT-MENU-ITEM
 */
export class SohoContextMenuItemComponent {
    constructor() {
        this.isSelectable = false;
        this.isDisabled = false;
        this.isIndented = false;
        this.subMenu = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoContextMenuItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoContextMenuItemComponent, selector: "li[soho-context-menu-item]", inputs: { isChecked: "isChecked", isSelectable: "isSelectable", isDisabled: "isDisabled", isIndented: "isIndented", subMenu: "subMenu" }, host: { properties: { "class.is-checked": "this.isChecked", "class.is-selectable": "this.isSelectable", "class.is-disabled": "this.isDisabled", "class.is-indented": "this.isIndented", "class.submenu": "this.subMenu" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoContextMenuItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'li[soho-context-menu-item]',
                    template: `<ng-content></ng-content>`
                }]
        }], propDecorators: { isChecked: [{
                type: HostBinding,
                args: ['class.is-checked']
            }, {
                type: Input
            }], isSelectable: [{
                type: HostBinding,
                args: ['class.is-selectable']
            }, {
                type: Input
            }], isDisabled: [{
                type: HostBinding,
                args: ['class.is-disabled']
            }, {
                type: Input
            }], isIndented: [{
                type: HostBinding,
                args: ['class.is-indented']
            }, {
                type: Input
            }], subMenu: [{
                type: HostBinding,
                args: ['class.submenu']
            }, {
                type: Input
            }] } });
/**
 * MAIN DIRECTIVE: SOHO-CONTEXT-MENU
 */
export class SohoContextMenuDirective {
    // -------------------------------------------
    // Component Inputs
    set trigger(trigger) {
        this.options.trigger = trigger;
        if (this.contextMenu) {
            this.contextMenu.settings.trigger = trigger;
            this.contextMenu?.updated();
        }
    }
    set menu(menu) {
        this.options.menu = menu;
        if (this.contextMenu) {
            this.contextMenu.settings.menu = menu;
            this.contextMenu?.updated();
        }
    }
    /** Auto Focus */
    set autoFocus(autoFocus) {
        this.options.autoFocus = autoFocus;
        if (this.contextMenu) {
            this.contextMenu.settings.autoFocus = autoFocus;
        }
    }
    get autoFocus() {
        if (this.contextMenu) {
            return this.contextMenu.settings.autoFocus;
        }
        return this.options.autoFocus;
    }
    /** Mouse focus. */
    set mouseFocus(mouseFocus) {
        this.options.mouseFocus = mouseFocus;
        if (this.contextMenu) {
            this.contextMenu.settings.mouseFocus = mouseFocus;
        }
    }
    get mouseFocus() {
        if (this.contextMenu) {
            return this.contextMenu.settings.mouseFocus;
        }
        return this.options.mouseFocus;
    }
    /** Attach to body. */
    set attachToBody(attachToBody) {
        this.options.attachToBody = attachToBody;
        if (this.contextMenu) {
            this.contextMenu.settings.attachToBody = attachToBody;
        }
    }
    get attachToBody() {
        if (this.contextMenu) {
            return this.contextMenu.settings.attachToBody;
        }
        return this.options.attachToBody;
    }
    set placementOpts(placementOpts) {
        this.options.placementOpts = placementOpts;
        if (this.contextMenu) {
            this.contextMenu.settings.placementOpts = placementOpts;
        }
    }
    get placementOpts() {
        if (this.contextMenu) {
            return this.contextMenu.settings.placementOpts;
        }
        return this.options.placementOpts;
    }
    set offset(offset) {
        this.options.offset = offset;
        if (this.contextMenu) {
            this.contextMenu.settings.offset = offset;
        }
    }
    get offset() {
        if (this.contextMenu) {
            return this.contextMenu.settings.offset;
        }
        return this.options.offset;
    }
    set removeOnDestroy(removeOnDestroy) {
        this.options.removeOnDestroy = removeOnDestroy;
        if (this.contextMenu) {
            this.contextMenu.settings.removeOnDestroy = removeOnDestroy;
        }
    }
    get removeOnDestroy() {
        if (this.contextMenu) {
            return this.contextMenu.settings.removeOnDestroy;
        }
        return this.options.removeOnDestroy;
    }
    /** beforeOpen - ajax callback for open event */
    set beforeOpen(beforeOpen) {
        this.options.beforeOpen = beforeOpen;
        if (this.contextMenu) {
            this.contextMenu.settings.beforeOpen = beforeOpen;
        }
    }
    get beforeOpen() {
        if (this.contextMenu) {
            return this.contextMenu.settings.beforeOpen;
        }
        return this.options.beforeOpen;
    }
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        // -------------------------------------------
        // Default options block
        // -------------------------------------------
        this.options = {
            trigger: 'rightClick'
        };
        // -------------------------------------------
        // Component Output
        // -------------------------------------------
        this.selected = new EventEmitter();
        this.beforeopen = new EventEmitter();
        /**
         * @todo replace override of native attribute
         */
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.open = new EventEmitter();
        // using output renaming since close conflicts with the close method
        // in this class.
        this.closeEvent = new EventEmitter(); // eslint-disable-line
        this.listOffset = { x: 0, y: 0 };
        /** beforeOpen - ajax callback for open event */
        this.lazyLoad = false;
    }
    ngAfterViewInit() {
        if (!this.lazyLoad) {
            this.init();
        }
    }
    init() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.popupmenu(this.options);
            this.contextMenu = this.jQueryElement.data('popupmenu');
            // Add listeners to emit events
            this.jQueryElement.on('selected', (e, args) => this.ngZone.run(() => this.selected.next({ e, args })));
            this.jQueryElement.on('beforeopen', (e, args) => this.ngZone.run(() => this.beforeopen.emit({ e, args })));
            this.jQueryElement.on('close', (e, args) => this.ngZone.run(() => this.closeEvent.emit({ e, args })));
            this.jQueryElement.on('open', (e, args) => this.ngZone.run(() => this.open.emit({ e, args })));
            this.jQueryElement.on('contextmenu', (e, api) => this.onContextMenu(e, api));
        });
    }
    onContextMenu(e, api) {
        if (api && api.elem) {
            this.ngZone.runOutsideAngular(() => {
                const elem = api.elem[0];
                const rect = elem.getBoundingClientRect();
                this.offset = { x: rect.x + this.listOffset.x, y: rect.y + this.listOffset.y };
                if (this.contextMenu) {
                    this.contextMenu.updated();
                    this.contextMenu.position(e);
                }
            });
        }
    }
    updated() {
        this.ngZone.runOutsideAngular(() => this.contextMenu?.updated());
    }
    teardown() {
        this.ngZone.runOutsideAngular(() => this.contextMenu?.teardown());
    }
    /**
     * Closes the popup menu
     *
     * @param isCancelled Internally set option used if the operation is a cancel.
     *  Wont matter for manual api call.
     * @param noFocus Do not return focus to the calling element (fx a button)
     */
    close(isCancelled, noFocus) {
        if (this.contextMenu) {
            this.ngZone.runOutsideAngular(() => this.contextMenu?.close(isCancelled, noFocus));
        }
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.contextMenu) {
                // @todo raise an issue on this failing on removeData!
                // this.menuButton.destroy();
                this.contextMenu.destroy();
                this.contextMenu = null;
            }
        });
    }
    initializeComponent() {
        if (this.lazyLoad) {
            this.options.trigger = 'immediate';
            // Remove all existing events before re-initializing, or the events will keep getting listened
            // to (so on first click, listened to once. On second click, listened to twice).
            if (this.jQueryElement) {
                this.jQueryElement.off();
            }
            this.init();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoContextMenuDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: SohoContextMenuDirective, selector: "[soho-context-menu]", inputs: { trigger: "trigger", menu: "menu", autoFocus: "autoFocus", mouseFocus: "mouseFocus", attachToBody: "attachToBody", placementOpts: "placementOpts", offset: "offset", listOffset: "listOffset", removeOnDestroy: "removeOnDestroy", beforeOpen: "beforeOpen", lazyLoad: "lazyLoad" }, outputs: { selected: "selected", beforeopen: "beforeopen", open: "open", closeEvent: "close" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoContextMenuDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[soho-context-menu]', // eslint-disable-line
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { selected: [{
                type: Output
            }], beforeopen: [{
                type: Output
            }], open: [{
                type: Output
            }], closeEvent: [{
                type: Output,
                args: ['close']
            }], trigger: [{
                type: Input
            }], menu: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], mouseFocus: [{
                type: Input
            }], attachToBody: [{
                type: Input
            }], placementOpts: [{
                type: Input
            }], offset: [{
                type: Input
            }], listOffset: [{
                type: Input
            }], removeOnDestroy: [{
                type: Input
            }], beforeOpen: [{
                type: Input
            }], lazyLoad: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { Directive, EventEmitter, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the SoHo Busy Indicator control.
 *
 * This component searches for an element, annotated with the soho-busyindicator attribute,
 * and then matches this component to it.
 * <br>
 * The characteristics of the component can be controlled using the set of inputs.
 * <br>
 * When activated, this control will display the busy indicator over the control appropriately.
 */
export class SohoBusyIndicatorDirective {
    // -------------------------------------------
    // Component Inputs
    // -------------------------------------------
    // Makes the element that Busy Indicator is invoked on unusable while it's displayed.
    set blockUI(blockUI) {
        this.options.blockUI = blockUI;
        if (this.busyindicator) {
            this.busyindicator.settings.blockUI = blockUI;
            this.updateBusyIndicator = true;
        }
    }
    // Number in milliseconds to pass before the markup is displayed.  If 0, displays immediately
    set displayDelay(displayDelay) {
        this.options.displayDelay = displayDelay;
        if (this.busyindicator) {
            this.busyindicator.settings.displayDelay = displayDelay;
            this.updateBusyIndicator = true;
        }
    }
    // Fires the 'complete' trigger at a certain timing interval.  If 0, goes indefinitely.
    set timeToComplete(timeToComplete) {
        this.options.timeToComplete = timeToComplete;
        if (this.busyindicator) {
            this.busyindicator.settings.timeToComplete = timeToComplete;
            this.updateBusyIndicator = true;
        }
    }
    /** Custom Text To Show or Will Show Localized 'Loading...' */
    set text(text) {
        this.options.text = text;
        if (this.busyindicator) {
            this.busyindicator.settings.text = text;
            this.updateBusyIndicator = true;
        }
    }
    /** Controls the activated state of the busy indicator. */
    set activated(value) {
        this.initiallyActive = value;
        if (value) {
            this.open();
        }
        else {
            this.close(true);
        }
    }
    /**
     * Display an overlay that prevents interaction,
     * but appears transparent instead of gray.
     */
    set transparentOverlay(transparentOverlay) {
        this.options.transparentOverlay = transparentOverlay;
        if (this.busyindicator) {
            this.busyindicator.settings.transparentOverlay = transparentOverlay;
            this.updateBusyIndicator = true;
        }
    }
    /**
     * To display only the overlay w/o the badge and text. Useful to stop input to a component
     * that doesn't already have another mechanism (like a disabled state).
     */
    set overlayOnly(overlayOnly) {
        this.options.overlayOnly = overlayOnly;
        if (this.busyindicator) {
            this.busyindicator.settings.overlayOnly = overlayOnly;
            this.updateBusyIndicator = true;
        }
    }
    /**
     * To display only the overlay w/o the badge and text. Useful to stop input to a component
     * that doesn't already have another mechanism (like a disabled state).
     */
    set attributes(attributes) {
        this.options.attributes = attributes;
        if (this.busyindicator) {
            this.busyindicator.settings.attributes = attributes;
            this.updateBusyIndicator = true;
        }
    }
    /**
     * To get the attributes of the busy indicator. Useful for things like getting an indicator based on an Id.
     */
    get attributes() {
        if (this.busyindicator) {
            return this.options.attributes ? this.options.attributes : [];
        }
        return [];
    }
    /**
     * Constructor.
     *
     * @param elementRef - the element matching the component's selector.
     */
    constructor(elementRef, ngZone) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        // -------------------------------------------
        // Options Block
        // -------------------------------------------
        this.options = {};
        this.updateBusyIndicator = false;
        // -------------------------------------------
        // Component Output
        // -------------------------------------------
        // Fired after the busy indicator is displayed
        this.afterstart = new EventEmitter();
        /**
         * This event is fired when 'timeToComplete' milliseconds is reached
         * after the indicator is opened.
         *
         * @todo replace override of native attribute
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.complete = new EventEmitter();
    }
    // -------------------------------------------
    // Public API
    // -------------------------------------------
    /**
     * Closes the indicator, if open.
     */
    close(fromEvent) {
        if (this.busyindicator) {
            // call outside the angular zone so change detection isn't triggered by the soho component.
            this.ngZone.runOutsideAngular(() => this.busyindicator?.close(fromEvent));
        }
    }
    /**
     * Displays the busy indicator.
     */
    open() {
        if (this.busyindicator) {
            // call outside the angular zone so change detection isn't triggered by the soho component.
            this.ngZone.runOutsideAngular(() => this.busyindicator?.activate());
        }
    }
    isActive() {
        if (this.busyindicator) {
            // call outside the angular zone so change detection isn't triggered by the soho component.
            return this.ngZone.runOutsideAngular(() => this.busyindicator?.isActive());
        }
        return false;
    }
    // ------------------------------------------
    // Lifecycle Events
    // ------------------------------------------
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // Wrap the element in a jQuery selector.
            this.jQueryElement = jQuery(this.elementRef.nativeElement);
            // Initialise the SohoXi Control
            this.jQueryElement.busyindicator(this.options);
            // Once the control is initialised, extract the control
            // plug-in from the element.  The element name is
            // defined by the plug-in, but in this case it is 'busyindicator'.
            this.busyindicator = this.jQueryElement.data('busyindicator');
            // Initialise any event handlers.
            this.jQueryElement.on('afterstart', (e) => this.onAfterStart(e));
            this.jQueryElement.on('complete', (e) => this.onComplete(e));
            // Set initial state
            this.ngZone.run(() => this.activated = this.initiallyActive);
        });
    }
    ngAfterViewChecked() {
        if (this.busyindicator && this.updateBusyIndicator) {
            // call outside the angular zone so change detection isn't triggered by the soho component.
            this.ngZone.runOutsideAngular(() => {
                this.updateBusyIndicator = false;
                this.busyindicator?.updated();
            });
        }
    }
    /**
     * Destructor.
     */
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.busyindicator) {
                // call outside the angular zone so change detection isn't triggered by the soho component.
                this.busyindicator?.destroy();
                this.busyindicator = null;
            }
        });
    }
    // -------------------------------------------
    // Event Handlers
    // -------------------------------------------
    /**
     * Publishes the event, after annotating the event.
     */
    onAfterStart(event) {
        this.ngZone.run(() => this.afterstart.next({
            type: 'afterstart',
            component: this,
            event
        }));
    }
    /**
     * Publishes the event, after annotating the event.
     */
    onComplete(event) {
        this.ngZone.run(() => this.complete.next({
            type: 'complete',
            component: this,
            event
        }));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoBusyIndicatorDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: SohoBusyIndicatorDirective, selector: "[soho-busyindicator]", inputs: { blockUI: "blockUI", displayDelay: "displayDelay", timeToComplete: "timeToComplete", text: "text", activated: "activated", transparentOverlay: "transparentOverlay", overlayOnly: "overlayOnly", attributes: "attributes" }, outputs: { afterstart: "afterstart", complete: "complete" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoBusyIndicatorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[soho-busyindicator]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { afterstart: [{
                type: Output
            }], complete: [{
                type: Output
            }], blockUI: [{
                type: Input
            }], displayDelay: [{
                type: Input
            }], timeToComplete: [{
                type: Input
            }], text: [{
                type: Input
            }], activated: [{
                type: Input
            }], transparentOverlay: [{
                type: Input
            }], overlayOnly: [{
                type: Input
            }], attributes: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
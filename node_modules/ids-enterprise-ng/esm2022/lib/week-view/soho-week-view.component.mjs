import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
/********************************************************************
 * Weekview component
 *******************************************************************/
export class SohoWeekViewComponent {
    set weekViewOptions(weekViewOptions) {
        this._weekViewOptions = weekViewOptions;
        if (this.jQueryElement) {
            // No need to set the 'settings' as the Rebuild will create
            // a new control with the _gridOptions.
            this.markForRefresh();
        }
    }
    get weekViewOptions() {
        if (this.weekView) {
            return this.weekView.settings;
        }
        return this._weekViewOptions;
    }
    /**
     * Setting to toggle stacked week view layout
     */
    set stacked(isStacked) {
        this._weekViewOptions.stacked = isStacked;
        if (this.weekView) {
            this.weekView.settings.stacked = isStacked;
            this.markForRefresh();
        }
    }
    get stacked() {
        if (this.weekView) {
            return this.weekView.settings.stacked;
        }
        return this._weekViewOptions.stacked;
    }
    /**
     * Setting to toggle footer when in stacked week view mode
     */
    set showFooter(val) {
        this._weekViewOptions.showFooter = val;
        if (this.weekView) {
            this.weekView.settings.showFooter = val;
            this.markForRefresh();
        }
    }
    get showFooter() {
        if (this.weekView) {
            return this.weekView.settings.showFooter;
        }
        return this._weekViewOptions.showFooter;
    }
    /**
     * Setting to switch to one day view in phone-tablet sizes (stacked mode only)
     */
    set responsive(val) {
        this._weekViewOptions.responsive = val;
        if (this.weekView) {
            this.weekView.settings.responsive = val;
            this.markForRefresh();
        }
    }
    get responsive() {
        if (this.weekView) {
            return this.weekView.settings.responsive;
        }
        return this._weekViewOptions.responsive;
    }
    /**
     * Setting to hide week view calendar toolbar
     */
    set hideToolbar(val) {
        this._weekViewOptions.hideToolbar = val;
        if (this.weekView) {
            this.weekView.settings.hideToolbar = val;
            this.markForRefresh();
        }
    }
    get hideToolbar() {
        if (this.weekView) {
            return this.weekView.settings.hideToolbar;
        }
        return this._weekViewOptions.hideToolbar;
    }
    /**
     * An array of objects with data for the event types.
     */
    set eventTypes(eventTypes) {
        this._weekViewOptions.eventTypes = eventTypes;
        if (this.weekView) {
            this.weekView.settings.eventTypes = eventTypes;
            this.markForRefresh();
        }
    }
    get eventTypes() {
        if (this.weekView) {
            return this.weekView.settings.eventTypes;
        }
        return this._weekViewOptions.eventTypes;
    }
    /**
     * An array of objects with data for the filtered event types.
     */
    set filteredTypes(filteredTypes) {
        this._weekViewOptions.filteredTypes = filteredTypes;
        if (this.weekView) {
            this.weekView.settings.filteredTypes = filteredTypes;
            this.markForRefresh();
        }
    }
    get filteredTypes() {
        if (this.weekView) {
            return this.weekView.settings.filteredTypes;
        }
        return this._weekViewOptions.filteredTypes;
    }
    /**
     * An array of objects with data for the events.
     */
    set events(events) {
        this._weekViewOptions.events = events;
        if (this.weekView) {
            this.weekView.settings.events = events;
            this.markForRefresh();
        }
    }
    get events() {
        if (this.weekView) {
            return this.weekView.settings.events;
        }
        return this._weekViewOptions.events;
    }
    /**
     * The name of the locale to use for this instance. If not set the current locale will be used.
     */
    set locale(locale) {
        this._weekViewOptions.locale = locale;
        if (this.weekView) {
            this.weekView.settings.locale = locale;
            this.markForRefresh();
        }
    }
    get locale() {
        if (this.weekView) {
            return this.weekView.settings.locale;
        }
        return this._weekViewOptions.locale;
    }
    /**
     * Start of the week to show.
     */
    set startDate(startDate) {
        this._weekViewOptions.startDate = startDate;
        if (this.weekView) {
            this.weekView.settings.startDate = startDate;
            this.markForRefresh();
        }
    }
    get startDate() {
        if (this.weekView) {
            return this.weekView.settings.startDate;
        }
        return this._weekViewOptions.startDate;
    }
    /**
     * End of the week to show
     */
    set endDate(endDate) {
        this._weekViewOptions.endDate = endDate;
        if (this.weekView) {
            this.weekView.settings.endDate = endDate;
            this.markForRefresh();
        }
    }
    get endDate() {
        if (this.weekView) {
            return this.weekView.settings.endDate;
        }
        return this._weekViewOptions.endDate;
    }
    /**
     * Start of the hour to show.
     */
    set startHour(startHour) {
        this._weekViewOptions.startHour = startHour;
        if (this.weekView) {
            this.weekView.settings.startHour = startHour;
            this.markForRefresh();
        }
    }
    get startHour() {
        if (this.weekView) {
            return this.weekView.settings.startHour;
        }
        return this._weekViewOptions.startHour;
    }
    /**
     * End of the hour to show
     */
    set endHour(endHour) {
        this._weekViewOptions.endHour = endHour;
        if (this.weekView) {
            this.weekView.settings.endHour = endHour;
            this.markForRefresh();
        }
    }
    get endHour() {
        if (this.weekView) {
            return this.weekView.settings.endHour;
        }
        return this._weekViewOptions.endHour;
    }
    /**
     * Determines if the today button should be shown.
     */
    set showToday(showToday) {
        this._weekViewOptions.showToday = showToday;
        if (this.weekView) {
            this.weekView.settings.showToday = showToday;
            this.markForRefresh();
        }
    }
    get showToday() {
        if (this.weekView) {
            return this.weekView.settings.showToday;
        }
        return this._weekViewOptions.showToday;
    }
    /**
     * Determines if the all day events row should be shown.
     */
    set showAllDay(showAllDay) {
        this._weekViewOptions.showAllDay = showAllDay;
        if (this.weekView) {
            this.weekView.settings.showAllDay = showAllDay;
            this.markForRefresh();
        }
    }
    get showAllDay() {
        if (this.weekView) {
            return this.weekView.settings.showAllDay;
        }
        return this._weekViewOptions.showAllDay;
    }
    /**
     *  If false the dropdown to change views will not be shown.
     */
    set showViewChanger(showViewChanger) {
        this._weekViewOptions.showViewChanger = showViewChanger;
        if (this.weekView) {
            this.weekView.settings.showViewChanger = showViewChanger;
            this.markForRefresh();
        }
    }
    get showViewChanger() {
        if (this.weekView) {
            return this.weekView.settings.showViewChanger;
        }
        return this._weekViewOptions.showViewChanger;
    }
    /**
     * Shows a bar across the current time.
     */
    set showTimeLine(showTimeLine) {
        this._weekViewOptions.showTimeLine = showTimeLine;
        if (this.weekView) {
            this.weekView.settings.showTimeLine = showTimeLine;
            this.markForRefresh();
        }
    }
    get showTimeLine() {
        if (this.weekView) {
            return this.weekView.settings.showTimeLine;
        }
        return this._weekViewOptions.showTimeLine;
    }
    /**
     * Set first day of the week. '1' would be Monday.
     */
    set firstDayOfWeek(firstDayOfWeek) {
        this._weekViewOptions.firstDayOfWeek = firstDayOfWeek;
        if (this.weekView) {
            this.weekView.settings.firstDayOfWeek = firstDayOfWeek;
            this.markForRefresh();
        }
    }
    get firstDayOfWeek() {
        if (this.weekView) {
            return this.weekView.settings.firstDayOfWeek;
        }
        return this._weekViewOptions.firstDayOfWeek;
    }
    /**
     * If false the mouseover text or day event will not be shown.
     */
    set eventTooltip(eventTooltip) {
        this._weekViewOptions.eventTooltip = eventTooltip;
        if (this.weekView) {
            this.weekView.settings.eventTooltip = eventTooltip;
            this.markForRefresh();
        }
    }
    get eventTooltip() {
        if (this.weekView) {
            return this.weekView.settings.eventTooltip;
        }
        return this._weekViewOptions.eventTooltip;
    }
    /**
     * If false the mouseover text for event icon will not be shown.
     */
    set iconTooltip(iconTooltip) {
        this._weekViewOptions.iconTooltip = iconTooltip;
        if (this.weekView) {
            this.weekView.settings.iconTooltip = iconTooltip;
            this.markForRefresh();
        }
    }
    get iconTooltip() {
        if (this.weekView) {
            return this.weekView.settings.iconTooltip;
        }
        return this._weekViewOptions.iconTooltip;
    }
    /**
     * Fires when a week view is rendered, allowing you to pass back events or event types to show.
     */
    set renderWeekCallback(renderWeekCallback) {
        this._weekViewOptions.onRenderWeek = renderWeekCallback;
        if (this.weekView) {
            this.weekView.settings.onRenderWeek = renderWeekCallback;
            this.markForRefresh();
        }
    }
    get renderWeekCallback() {
        if (this.weekView) {
            return this.weekView.settings.onRenderWeek;
        }
        return this._weekViewOptions.onRenderWeek;
    }
    /**
     * Call back for when the view changer is changed.
     */
    set changeToWeekDayCallback(changeToWeekDayCallback) {
        this._weekViewOptions.onChangeToWeekDay = changeToWeekDayCallback;
        if (this.weekView) {
            this.weekView.settings.onChangeToWeekDay = changeToWeekDayCallback;
            this.markForRefresh();
        }
    }
    get changeToWeekDayCallback() {
        if (this.weekView) {
            return this.weekView.settings.onChangeToWeekDay;
        }
        return this._weekViewOptions.onChangeToWeekDay;
    }
    /**
     * Call back for when the week is changed.
     */
    set changeWeekCallback(changeWeekCallback) {
        this._weekViewOptions.onChangeWeek = changeWeekCallback;
        if (this.weekView) {
            this.weekView.settings.onChangeWeek = changeWeekCallback;
            this.markForRefresh();
        }
    }
    get changeWeekCallback() {
        if (this.weekView) {
            return this.weekView.settings.onChangeWeek;
        }
        return this._weekViewOptions.onChangeWeek;
    }
    /**
     * Call back for when the view changer is changed.
     */
    set changeViewCallback(changeViewCallback) {
        this._weekViewOptions.onChangeView = changeViewCallback;
        if (this.weekView) {
            this.weekView.settings.onChangeView = changeViewCallback;
            this.markForRefresh();
        }
    }
    get changeViewCallback() {
        if (this.weekView) {
            return this.weekView.settings.onChangeView;
        }
        return this._weekViewOptions.onChangeView;
    }
    /** Add extra attributes like id's to the component **/
    set attributes(attributes) {
        this._weekViewOptions.attributes = attributes;
        if (this.weekView) {
            this.weekView.settings.attributes = attributes;
            this.markForRefresh();
        }
    }
    get attributes() {
        if (this.weekView) {
            return this.weekView.settings.attributes;
        }
        return this._weekViewOptions.attributes;
    }
    constructor(element, ngZone, ref) {
        this.element = element;
        this.ngZone = ngZone;
        this.ref = ref;
        this.isWeekView = true;
        this.isCalendarWeekView = true;
        // -------------------------------------------
        // Component Output
        // -------------------------------------------
        this.selected = new EventEmitter();
        this.weekRendered = new EventEmitter();
        this.eventClick = new EventEmitter();
        this.eventDblClick = new EventEmitter();
        this.eventContextMenu = new EventEmitter();
        this._weekViewOptions = {};
    }
    weekviewOptions(weekviewOptions) {
        this._weekViewOptions = weekviewOptions;
        if (this.jQueryElement) {
            // No need to set the 'settings' as the Rebuild will create
            // a new control with the _gridOptions.
            this.markForRefresh();
        }
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // Wrap the element in a jQuery selector.
            this.jQueryElement = jQuery(this.element.nativeElement);
            // Add listeners to emit events
            this.jQueryElement
                .on('weekrendered', (_e, args) => this.onWeekRenderedEvent(args))
                .on('eventclick', (_e, args) => this.onEventClick(args))
                .on('eventdblclick', (_e, args) => this.onEventDblClick(args))
                .on('contextmenu', (_e, args) => this.onEventContextMenu(args));
            // Initialise the Soho control.
            this.jQueryElement.weekview(this._weekViewOptions);
            // Once the control is initialised, extract the control
            // plug-in from the element.  The element name is defined
            // by the plug-in, but in this case is 'weekview'.
            this.weekView = this.jQueryElement.data('weekview');
        });
    }
    ngAfterViewChecked() {
        if (!this.weekView || !this.jQueryElement) {
            return;
        }
        if (this.updateRequired) {
            // call outside the angular zone so change detection isn't triggered by the soho component.
            this.updated();
            this.updateRequired = false;
        }
    }
    onWeekRenderedEvent(event) {
        this.ngZone.run(() => this.weekRendered.emit(event));
    }
    onEventClick(event) {
        this.ngZone.run(() => this.eventClick.emit(event));
    }
    onEventDblClick(event) {
        this.ngZone.run(() => this.eventDblClick.emit(event));
    }
    onEventContextMenu(event) {
        this.ngZone.run(() => this.eventContextMenu.emit(event));
    }
    /**
     * Get the current selected date on the weekView calendar.
     *
     * @returns the currently selected date on the control.
     */
    currentDate() {
        return this.ngZone.runOutsideAngular(() => this.weekView?.currentDate());
    }
    /**
     * Get the events and date for the currently selected weekView calendar day.
     *
     * @param date The date to find the events for.
     * @returns dayEvents An object with all the events and the event date.
     */
    getDayEvents(date) {
        return this.ngZone.runOutsideAngular(() => this.weekView?.getDayEvents(date));
    }
    /**
     * Get dayMap object within weekview component
     * @returns {SohoWeekViewDayMap[]} dayMap object
     */
    getDayMap() {
        return this.weekView?.dayMap;
    }
    /**
     * Handle updated settings and values.
     */
    updated(settings) {
        this.ngZone.runOutsideAngular(() => this.weekView?.updated(settings));
    }
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh() {
        // Run updated on the next updated check.
        this.updateRequired = true;
        // ... make sure the change detector kicks in, otherwise if the inputs
        // were change programmatically the component may not be eligible for
        // updating.
        this.ref.markForCheck();
    }
    /**
     * Destructor.
     */
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.weekView) {
                this.weekView.destroy();
                this.weekView = undefined;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoWeekViewComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoWeekViewComponent, selector: "div[soho-week-view]", inputs: { weekViewOptions: "weekViewOptions", stacked: "stacked", showFooter: "showFooter", responsive: "responsive", hideToolbar: "hideToolbar", eventTypes: "eventTypes", filteredTypes: "filteredTypes", events: "events", locale: "locale", startDate: "startDate", endDate: "endDate", startHour: "startHour", endHour: "endHour", showToday: "showToday", showAllDay: "showAllDay", showViewChanger: "showViewChanger", showTimeLine: "showTimeLine", firstDayOfWeek: "firstDayOfWeek", eventTooltip: "eventTooltip", iconTooltip: "iconTooltip", renderWeekCallback: "renderWeekCallback", changeToWeekDayCallback: "changeToWeekDayCallback", changeWeekCallback: "changeWeekCallback", changeViewCallback: "changeViewCallback", attributes: "attributes", weekviewOptions: "weekviewOptions" }, outputs: { selected: "selected", weekRendered: "weekRendered", eventClick: "eventClick", eventDblClick: "eventDblClick", eventContextMenu: "eventContextMenu" }, host: { properties: { "class.week-view": "this.isWeekView", "class.calendar-weekview": "this.isCalendarWeekView" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoWeekViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'div[soho-week-view]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { isWeekView: [{
                type: HostBinding,
                args: ['class.week-view']
            }], weekViewOptions: [{
                type: Input
            }], stacked: [{
                type: Input
            }], showFooter: [{
                type: Input
            }], responsive: [{
                type: Input
            }], hideToolbar: [{
                type: Input
            }], eventTypes: [{
                type: Input
            }], filteredTypes: [{
                type: Input
            }], events: [{
                type: Input
            }], locale: [{
                type: Input
            }], startDate: [{
                type: Input
            }], endDate: [{
                type: Input
            }], startHour: [{
                type: Input
            }], endHour: [{
                type: Input
            }], showToday: [{
                type: Input
            }], showAllDay: [{
                type: Input
            }], showViewChanger: [{
                type: Input
            }], showTimeLine: [{
                type: Input
            }], firstDayOfWeek: [{
                type: Input
            }], eventTooltip: [{
                type: Input
            }], iconTooltip: [{
                type: Input
            }], renderWeekCallback: [{
                type: Input
            }], changeToWeekDayCallback: [{
                type: Input
            }], changeWeekCallback: [{
                type: Input
            }], changeViewCallback: [{
                type: Input
            }], attributes: [{
                type: Input
            }], isCalendarWeekView: [{
                type: HostBinding,
                args: ['class.calendar-weekview']
            }], selected: [{
                type: Output
            }], weekRendered: [{
                type: Output
            }], eventClick: [{
                type: Output
            }], eventDblClick: [{
                type: Output
            }], eventContextMenu: [{
                type: Output
            }], weekviewOptions: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
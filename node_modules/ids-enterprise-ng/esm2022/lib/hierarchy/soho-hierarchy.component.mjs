import { ChangeDetectionStrategy, Component, HostBinding, Input, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoHierarchyLeafTemplateComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoHierarchyLeafTemplateComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoHierarchyLeafTemplateComponent, selector: "soho-hierarchy-leaf-template", ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoHierarchyLeafTemplateComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'soho-hierarchy-leaf-template',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }] });
export class SohoHierarchyComponent {
    set dataset(dataset) {
        this.options.dataset = dataset;
    }
    get dataset() {
        return this.options.dataset;
    }
    set legend(legend) {
        this.options.legend = legend;
    }
    get legend() {
        return this.options.legend;
    }
    set legendKey(key) {
        this.options.legendKey = key;
    }
    get legendKey() {
        return this.options.legendKey;
    }
    set templateId(id) {
        this.options.templateId = id;
    }
    get leafTemplateId() {
        return this.options.templateId;
    }
    set layout(layout) {
        this.options.layout = layout;
    }
    get layout() {
        return this.options.layout;
    }
    constructor(elementRef, ngZone) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        /** An internal options object that gets updated by using the component's Inputs(). */
        this.options = {};
        this.hostClass = 'hierarchy';
        /**
         * Leaf is selected
         *
         */
        this.selected = new EventEmitter();
        /**
         * Leaf is double clicked.
         */
        this.doubleClick = new EventEmitter();
    }
    /**
     * Used to add new data lazily when a leaf is expanded
     *
     * @param id should match the leaf id in the DOM
     */
    add(id, dataset, newData) {
        this.ngZone.runOutsideAngular(() => this.hierarchy?.add(id, dataset, newData));
    }
    /**
     *  Reload hierarchy with a new dataset
     */
    reloadDataSet(dataSet) {
        this.options.dataset = dataSet;
        this.ngZone.runOutsideAngular(() => this.hierarchy?.reload(this.options));
    }
    /**
     * Update actions for action menu on a leaf
     */
    updateActions(eventInfo, updatedActions) {
        this.ngZone.runOutsideAngular(() => this.hierarchy?.updateActions(eventInfo, updatedActions));
    }
    /**
     * Manually select leaf by id
     */
    selectLeaf(leafId) {
        this.ngZone.runOutsideAngular(() => this.hierarchy?.selectLeaf(leafId));
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.hierarchy) {
                this.hierarchy.destroy();
                this.hierarchy = null;
            }
        });
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // Wrap the "unordered list" element in a jQuery selector.
            this.jQueryElement = jQuery(this.elementRef.nativeElement);
            // Initialise the Soho control.
            this.jQueryElement.hierarchy(this.options);
            this.jQueryElement
                .on('dblclick', ((_e, args) => this.ngZone.run(() => this.doubleClick.next(args))))
                .on('selected', ((_e, args) => this.ngZone.run(() => this.selected.next(args))));
            // Assign the hierarchy control
            this.hierarchy = this.jQueryElement.data('hierarchy');
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoHierarchyComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoHierarchyComponent, selector: "figure[soho-hierarchy]", inputs: { dataset: "dataset", legend: "legend", legendKey: "legendKey", templateId: "templateId", layout: "layout" }, outputs: { selected: "selected", doubleClick: "doubleClick" }, host: { properties: { "attr.class": "this.hostClass" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoHierarchyComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'figure[soho-hierarchy]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { hostClass: [{
                type: HostBinding,
                args: ['attr.class']
            }], dataset: [{
                type: Input
            }], legend: [{
                type: Input
            }], legendKey: [{
                type: Input
            }], templateId: [{
                type: Input
            }], layout: [{
                type: Input
            }], selected: [{
                type: Output
            }], doubleClick: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
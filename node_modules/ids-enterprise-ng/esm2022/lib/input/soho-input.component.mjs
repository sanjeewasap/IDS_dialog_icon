import { ChangeDetectionStrategy, Component, EventEmitter, Output, HostListener, HostBinding, Input } from '@angular/core';
import { BaseControlValueAccessor, provideControlValueAccessor } from '../utils/base-control-value-accessor';
import * as i0 from "@angular/core";
export class SohoInputComponent extends BaseControlValueAccessor {
    /**
     * Constructor.
     *
     * @param element the owning element.
     * @param changeDetectionRef change detection.
     */
    constructor(element, ngZone) {
        super();
        this.element = element;
        this.ngZone = ngZone;
        /**
         * todo: work around until landmark can change code to allow the initial format.
         * Right now landmark initially formats the value to current locale.
         */
        this.fireInputEventKludge = true;
        /**
         * Available Soho Template events as Output (EventEmitters passing the event)
         * Should match the Soho event names for the component
         *
         * @todo replace override of native attribute
         */
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.change = new EventEmitter();
        /**
         * Input controls managed their disabled state via the 'disabled' attribute.
         * We use null as the default, rather than false, to ensure the attribute is
         * not displayed.
         *
         *
         */
        this.isDisabled = undefined;
        /**
         * Clearable attribute. Adds a clear icon in input if true.
         */
        this.clearable = false;
    }
    onKeyUp(_event) {
        // This is required if masking is used, otherwise the
        // the form binding does not see updates.
        this.internalValue = this.jQueryElement?.val();
    }
    ngAfterViewInit() {
        this.jQueryElement = jQuery(this.element.nativeElement);
        // Bind to jQueryElement's events
        this.jQueryElement
            .on('change', (_e, args) => this.onChange(args));
        // There is no SoHoXi control initializer for input
        if (this.clearable) {
            this.jQueryElement.clearable();
        }
        // Make sure the value of the control is set appropriately.
        if (this.internalValue) {
            this.jQueryElement.val(this.internalValue);
        }
    }
    ngOnDestroy() {
        // No jQuery control.
        this.jQueryElement?.off();
        this.jQueryElement?.remove();
    }
    /**
     * Handle the control being changed.
     */
    onChange(event) {
        if (!event) {
            // sometimes the event is not available
            this.internalValue = this.jQueryElement?.val();
            super.writeValue(this.internalValue);
            return;
        }
        this.change.emit(event);
    }
    /**
     * Override writeValue to allow the mask input
     * element to be updated correctly.
     *
     * @param value - the new value
     */
    writeValue(value) {
        super.writeValue(value);
        if (this.jQueryElement) {
            // The processing is required to ensure we use the correct format
            // in the control.
            this.jQueryElement.val(value);
            if (this.fireInputEventKludge) {
                this.ngZone.runOutsideAngular(() => {
                    setTimeout(() => {
                        this.element.nativeElement.dispatchEvent(new Event('input'));
                    });
                });
            }
        }
    }
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled) {
        this.isDisabled = isDisabled ? true : undefined;
    }
    getValue() {
        return this.internalValue;
    }
    setValue(value) {
        this.writeValue(value);
    }
    focus() {
        this.element.nativeElement.focus();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoInputComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoInputComponent, selector: "input[soho-input]", inputs: { fireInputEventKludge: "fireInputEventKludge", isDisabled: "isDisabled", clearable: "clearable" }, outputs: { change: "change" }, host: { listeners: { "keyup": "onKeyUp($event)" }, properties: { "attr.disabled": "this.isDisabled", "attr.data-clearable": "this.clearable" } }, providers: [provideControlValueAccessor(SohoInputComponent)], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoInputComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[soho-input]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [provideControlValueAccessor(SohoInputComponent)]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { fireInputEventKludge: [{
                type: Input
            }], change: [{
                type: Output
            }], isDisabled: [{
                type: HostBinding,
                args: ['attr.disabled']
            }, {
                type: Input
            }], clearable: [{
                type: HostBinding,
                args: ['attr.data-clearable']
            }, {
                type: Input
            }], onKeyUp: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,
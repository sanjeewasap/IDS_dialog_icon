import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoBlockGridComponent {
    get isBlockGrid() {
        return true;
    }
    /** Defines the data to use, must be specified for this component. */
    set dataset(dataset) {
        this.options.dataset = dataset;
        if (this.blockgrid) {
            this.blockgrid.settings.dataset = dataset;
            this.updated(this.blockgrid.settings);
        }
    }
    get dataset() {
        if (!this.blockgrid) {
            return this.options.dataset;
        }
        return this.blockgrid.settings.dataset;
    }
    /** Defines the selection type. */
    set selectable(selectable) {
        this.options.selectable = selectable;
        if (this.blockgrid) {
            this.blockgrid.settings.selectable = selectable;
            this.updated(this.blockgrid.settings);
        }
    }
    get selectable() {
        if (!this.blockgrid) {
            return this.options.selectable;
        }
        return this.blockgrid.settings.selectable;
    }
    /** Defines whether or not paging is active. */
    set paging(paging) {
        this.options.paging = paging;
        if (this.blockgrid) {
            this.blockgrid.settings.paging = paging;
            this.updated(this.blockgrid.settings);
        }
    }
    get paging() {
        if (!this.blockgrid) {
            return this.options.paging;
        }
        return this.blockgrid.settings.paging;
    }
    /** Defines the current page size */
    set pagesize(pagesize) {
        this.options.pagerSettings.pagesize = pagesize;
        if (this.blockgrid) {
            this.blockgrid.settings.pagerSettings.pagesize = pagesize;
            this.updated(this.blockgrid.settings);
        }
    }
    get pagesize() {
        if (!this.blockgrid) {
            return this.options.pagerSettings.pagesize;
        }
        return this.blockgrid.settings.pagerSettings.pagesize;
    }
    /** Defines the array of selectable page sizes */
    set pagesizes(pagesizes) {
        this.options.pagerSettings.pagesizes = pagesizes;
        if (this.blockgrid) {
            this.blockgrid.settings.pagerSettings.pagesizes = pagesizes;
            this.updated(this.blockgrid.settings);
        }
    }
    get pagesizes() {
        if (!this.blockgrid) {
            return this.options.pagerSettings.pagesizes;
        }
        return this.blockgrid.settings.pagerSettings.pagesizes;
    }
    /** Add extra attributes like id's to the component **/
    set attributes(attributes) {
        this.options.attributes = attributes;
        if (this.blockgrid) {
            this.blockgrid.settings.attributes = attributes;
            this.updated(this.blockgrid.settings);
        }
    }
    get attributes() {
        if (!this.blockgrid) {
            return this.options.attributes;
        }
        return this.blockgrid.settings.attributes;
    }
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        /** Options. */
        this.options = {
            pagerSettings: {
                position: 'bottom'
            }
        };
        /* Events*/
        this.selected = new EventEmitter();
        this.deselected = new EventEmitter();
        this.activated = new EventEmitter();
        this.deactivated = new EventEmitter();
        this.page = new EventEmitter();
        this.pagesizechange = new EventEmitter();
    }
    /** Setup */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.blockgrid(this.options);
            this.blockgrid = this.jQueryElement.data('blockgrid');
            // Setup the events
            this.jQueryElement.on('selected', (...args) => this.onSelected(args));
            this.jQueryElement.on('deselected', (...args) => this.onDeselected(args));
            this.jQueryElement.on('activated', (...args) => this.onActivated(args));
            this.jQueryElement.on('deactivated', (...args) => this.onDeactivated(args));
            if (this.blockgrid?.pagerAPI) {
                this.jQueryElement.on('page', (...args) => this.onPage(args));
                this.jQueryElement.on('pagesizechange', (...args) => this.onPageSizeChange(args));
            }
        });
    }
    /** Tear Down */
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.blockgrid) {
                this.blockgrid.destroy();
                this.blockgrid = null;
            }
        });
    }
    /** Reinit blockgrid settings */
    updated(settings) {
        this.ngZone.runOutsideAngular(() => this.blockgrid?.updated(settings));
        return this;
    }
    activateBlock(idx) {
        this.ngZone.runOutsideAngular(() => {
            const blockChildren = this.element.nativeElement.querySelectorAll('.block');
            if (!blockChildren || idx <= -1 || idx >= blockChildren.length) {
                return; // safety check
            }
            this.blockgrid?.select($(blockChildren[idx]), false);
        });
    }
    deactivateBlock() {
        this.blockgrid?.select($(), false);
    }
    selectBlocks(idx) {
        this.ngZone.runOutsideAngular(() => {
            const blockChildren = this.element.nativeElement.querySelectorAll('.block');
            const blockChildrenArray = Array.from(blockChildren).filter((_blockChild, index) => idx.includes(index));
            this.blockgrid?.select($(blockChildrenArray), true);
        });
    }
    onSelected(args) {
        this.ngZone.run(() => this.selected.emit(args));
    }
    onDeselected(args) {
        this.ngZone.run(() => this.deselected.emit(args));
    }
    onActivated(args) {
        this.ngZone.run(() => this.activated.emit(args));
    }
    onDeactivated(args) {
        this.ngZone.run(() => this.deactivated.emit(args));
    }
    onPage(args) {
        this.ngZone.run(() => this.page.emit(args));
    }
    onPageSizeChange(args) {
        this.ngZone.run(() => this.pagesizechange.emit(args));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoBlockGridComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoBlockGridComponent, selector: "[soho-blockgrid]", inputs: { dataset: "dataset", selectable: "selectable", paging: "paging", pagesize: "pagesize", pagesizes: "pagesizes", attributes: "attributes" }, outputs: { selected: "selected", deselected: "deselected", activated: "activated", deactivated: "deactivated", page: "page", pagesizechange: "pagesizechange" }, host: { properties: { "class.blockgrid": "this.isBlockGrid" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoBlockGridComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-blockgrid]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isBlockGrid: [{
                type: HostBinding,
                args: ['class.blockgrid']
            }], dataset: [{
                type: Input
            }], selectable: [{
                type: Input
            }], paging: [{
                type: Input
            }], pagesize: [{
                type: Input
            }], pagesizes: [{
                type: Input
            }], attributes: [{
                type: Input
            }], selected: [{
                type: Output
            }], deselected: [{
                type: Output
            }], activated: [{
                type: Output
            }], deactivated: [{
                type: Output
            }], page: [{
                type: Output
            }], pagesizechange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
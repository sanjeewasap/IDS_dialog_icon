import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * This component does not extend the ControlValueAccessor
 * as Angular already implements RadioControlValueAccessor
 * which hooks the controls up to the Forms model, see
 * https://angular.io/api/forms/RadioControlValueAccessor.
 *
 * The requirement is that the control matches the following
 * selector:
 *
 * input[type=radio][formControlName]
 * input[type=radio][formControl]
 * input[type=radio][ngModel]
 *
 * Make sure you add `type="radio"` to your markup.
 */
export class SohoRadioButtonComponent {
    /** Bind attributes to the host input element. */
    get isRadioType() {
        return 'radio';
    }
    /** Sets the class attribute for the radio button. */
    get isRadioButton() {
        return true;
    }
    /**
     * Due to conflicts with the ReactiveForms API, this Input
     * and HostBinding has been removed, in favour of using
     * [attr.disabled]="isDisabled".
     */
    set disabled(_value) {
        console.warn('The property `disabled` has been removed, please use [attr.disabled]="disable"');
    }
    /**
     * Constructor.
     */
    constructor(element) {
        this.element = element;
        /**
         * Called when the radiobutton value changes.
         *
         * @todo remove override of native element
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.change = new EventEmitter();
    }
    ngAfterViewInit() {
        this.jQueryElement = jQuery(this.element.nativeElement);
        // There is no control initializer for radiobutton, since its css based
        if (this.value) {
            this.jQueryElement.val(this.value);
        }
        this.jQueryElement
            .on('change', (event) => this.onChange(event));
    }
    onChange(event) {
        const newValue = this.jQueryElement?.val();
        // Update the model
        this.value = newValue;
        // Update the data
        event.data = newValue;
        // Finally emit the changed value
        this.change.emit(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoRadioButtonComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoRadioButtonComponent, selector: "input[soho-radiobutton]", inputs: { value: "value", disabled: "disabled", checked: "checked" }, outputs: { change: "change" }, host: { properties: { "attr.type": "this.isRadioType", "class.radio": "this.isRadioButton", "attr.checked": "this.checked" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoRadioButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[soho-radiobutton]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { value: [{
                type: Input
            }], change: [{
                type: Output
            }], isRadioType: [{
                type: HostBinding,
                args: ['attr.type']
            }], isRadioButton: [{
                type: HostBinding,
                args: ['class.radio']
            }], disabled: [{
                type: Input
            }], checked: [{
                type: HostBinding,
                args: ['attr.checked']
            }, {
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby1yYWRpb2J1dHRvbi5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZHMtZW50ZXJwcmlzZS1uZy9zcmMvbGliL3JhZGlvYnV0dG9uL3NvaG8tcmFkaW9idXR0b24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUVULFlBQVksRUFDWixXQUFXLEVBQ1gsS0FBSyxFQUNMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQzs7QUFFdkI7Ozs7Ozs7Ozs7Ozs7O0dBY0c7QUFNSCxNQUFNLE9BQU8sd0JBQXdCO0lBWW5DLGlEQUFpRDtJQUNqRCxJQUE4QixXQUFXO1FBQ3ZDLE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxxREFBcUQ7SUFDckQsSUFBZ0MsYUFBYTtRQUMzQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBYSxRQUFRLENBQUMsTUFBZTtRQUNuQyxPQUFPLENBQUMsSUFBSSxDQUFDLGdGQUFnRixDQUFDLENBQUM7SUFDakcsQ0FBQztJQWNEOztPQUVHO0lBQ0gsWUFDVSxPQUFtQjtRQUFuQixZQUFPLEdBQVAsT0FBTyxDQUFZO1FBM0M3Qjs7OztXQUlHO1FBQ0gsNERBQTREO1FBQ2xELFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBd0IsQ0FBQztJQXNDNUQsQ0FBQztJQUVELGVBQWU7UUFDYixJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBRXhELHVFQUF1RTtRQUN2RSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDZCxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDcEM7UUFFRCxJQUFJLENBQUMsYUFBYTthQUNmLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUEyQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUEyQjtRQUNsQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsRUFBRSxDQUFDO1FBRTNDLG1CQUFtQjtRQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztRQUV0QixrQkFBa0I7UUFDbEIsS0FBSyxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFFdEIsaUNBQWlDO1FBQ2pDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFCLENBQUM7OEdBekVVLHdCQUF3QjtrR0FBeEIsd0JBQXdCLG9TQUh6QiwyQkFBMkI7OzJGQUcxQix3QkFBd0I7a0JBTHBDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHlCQUF5QjtvQkFDbkMsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEO2lHQUdVLEtBQUs7c0JBQWIsS0FBSztnQkFRSSxNQUFNO3NCQUFmLE1BQU07Z0JBR3VCLFdBQVc7c0JBQXhDLFdBQVc7dUJBQUMsV0FBVztnQkFLUSxhQUFhO3NCQUE1QyxXQUFXO3VCQUFDLGFBQWE7Z0JBU2IsUUFBUTtzQkFBcEIsS0FBSztnQkFLZ0MsT0FBTztzQkFBNUMsV0FBVzt1QkFBQyxjQUFjOztzQkFBRyxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG4gIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogVGhpcyBjb21wb25lbnQgZG9lcyBub3QgZXh0ZW5kIHRoZSBDb250cm9sVmFsdWVBY2Nlc3NvclxuICogYXMgQW5ndWxhciBhbHJlYWR5IGltcGxlbWVudHMgUmFkaW9Db250cm9sVmFsdWVBY2Nlc3NvclxuICogd2hpY2ggaG9va3MgdGhlIGNvbnRyb2xzIHVwIHRvIHRoZSBGb3JtcyBtb2RlbCwgc2VlXG4gKiBodHRwczovL2FuZ3VsYXIuaW8vYXBpL2Zvcm1zL1JhZGlvQ29udHJvbFZhbHVlQWNjZXNzb3IuXG4gKlxuICogVGhlIHJlcXVpcmVtZW50IGlzIHRoYXQgdGhlIGNvbnRyb2wgbWF0Y2hlcyB0aGUgZm9sbG93aW5nXG4gKiBzZWxlY3RvcjpcbiAqXG4gKiBpbnB1dFt0eXBlPXJhZGlvXVtmb3JtQ29udHJvbE5hbWVdXG4gKiBpbnB1dFt0eXBlPXJhZGlvXVtmb3JtQ29udHJvbF1cbiAqIGlucHV0W3R5cGU9cmFkaW9dW25nTW9kZWxdXG4gKlxuICogTWFrZSBzdXJlIHlvdSBhZGQgYHR5cGU9XCJyYWRpb1wiYCB0byB5b3VyIG1hcmt1cC5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnaW5wdXRbc29oby1yYWRpb2J1dHRvbl0nLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFNvaG9SYWRpb0J1dHRvbkNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICAvKiogQ3VycmVudCB2YWx1ZS4gKi9cbiAgQElucHV0KCkgdmFsdWU6IGFueTtcblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHJhZGlvYnV0dG9uIHZhbHVlIGNoYW5nZXMuXG4gICAqXG4gICAqIEB0b2RvIHJlbW92ZSBvdmVycmlkZSBvZiBuYXRpdmUgZWxlbWVudFxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1vdXRwdXQtbmF0aXZlXG4gIEBPdXRwdXQoKSBjaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPFNvaG9SYWRpb0J1dHRvbkV2ZW50PigpO1xuXG4gIC8qKiBCaW5kIGF0dHJpYnV0ZXMgdG8gdGhlIGhvc3QgaW5wdXQgZWxlbWVudC4gKi9cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLnR5cGUnKSBnZXQgaXNSYWRpb1R5cGUoKSB7XG4gICAgcmV0dXJuICdyYWRpbyc7XG4gIH1cblxuICAvKiogU2V0cyB0aGUgY2xhc3MgYXR0cmlidXRlIGZvciB0aGUgcmFkaW8gYnV0dG9uLiAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnJhZGlvJykgZ2V0IGlzUmFkaW9CdXR0b24oKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICAvKipcbiAgICogRHVlIHRvIGNvbmZsaWN0cyB3aXRoIHRoZSBSZWFjdGl2ZUZvcm1zIEFQSSwgdGhpcyBJbnB1dFxuICAgKiBhbmQgSG9zdEJpbmRpbmcgaGFzIGJlZW4gcmVtb3ZlZCwgaW4gZmF2b3VyIG9mIHVzaW5nXG4gICAqIFthdHRyLmRpc2FibGVkXT1cImlzRGlzYWJsZWRcIi5cbiAgICovXG4gIEBJbnB1dCgpIHNldCBkaXNhYmxlZChfdmFsdWU6IGJvb2xlYW4pIHtcbiAgICBjb25zb2xlLndhcm4oJ1RoZSBwcm9wZXJ0eSBgZGlzYWJsZWRgIGhhcyBiZWVuIHJlbW92ZWQsIHBsZWFzZSB1c2UgW2F0dHIuZGlzYWJsZWRdPVwiZGlzYWJsZVwiJyk7XG4gIH1cblxuICAvKiogU2V0cyB0aGUgZWxlbWVudCB0byBpbmRpY2F0ZSBjaGVja2VkLiAqL1xuICBASG9zdEJpbmRpbmcoJ2F0dHIuY2hlY2tlZCcpIEBJbnB1dCgpIGNoZWNrZWQ/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICogTG9jYWwgdmFyaWFibGVzXG4gICAqIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKi9cblxuICAvKiogSlF1ZXJ5IENvbXBvbmVudCAqL1xuICBwcml2YXRlIGpRdWVyeUVsZW1lbnQ/OiBKUXVlcnk7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmKSB7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5qUXVlcnlFbGVtZW50ID0galF1ZXJ5KHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50KTtcblxuICAgIC8vIFRoZXJlIGlzIG5vIGNvbnRyb2wgaW5pdGlhbGl6ZXIgZm9yIHJhZGlvYnV0dG9uLCBzaW5jZSBpdHMgY3NzIGJhc2VkXG4gICAgaWYgKHRoaXMudmFsdWUpIHtcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC52YWwodGhpcy52YWx1ZSk7XG4gICAgfVxuXG4gICAgdGhpcy5qUXVlcnlFbGVtZW50XG4gICAgICAub24oJ2NoYW5nZScsIChldmVudDogU29ob1JhZGlvQnV0dG9uRXZlbnQpID0+IHRoaXMub25DaGFuZ2UoZXZlbnQpKTtcbiAgfVxuXG4gIG9uQ2hhbmdlKGV2ZW50OiBTb2hvUmFkaW9CdXR0b25FdmVudCkge1xuICAgIGNvbnN0IG5ld1ZhbHVlID0gdGhpcy5qUXVlcnlFbGVtZW50Py52YWwoKTtcblxuICAgIC8vIFVwZGF0ZSB0aGUgbW9kZWxcbiAgICB0aGlzLnZhbHVlID0gbmV3VmFsdWU7XG5cbiAgICAvLyBVcGRhdGUgdGhlIGRhdGFcbiAgICBldmVudC5kYXRhID0gbmV3VmFsdWU7XG5cbiAgICAvLyBGaW5hbGx5IGVtaXQgdGhlIGNoYW5nZWQgdmFsdWVcbiAgICB0aGlzLmNoYW5nZS5lbWl0KGV2ZW50KTtcbiAgfVxufVxuIl19
import { Directive, HostBinding, Input } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoPopDownDirective {
    get isPopdown() {
        return true;
    }
    set keepOpen(keepOpen) {
        this.popdownOptions.keepOpen = keepOpen;
    }
    /*
    * If defined, provides a way to place the popdown against an alternate element.
    */
    set trigger(trigger) {
        this.popdownOptions.trigger = trigger;
    }
    /*
    * If true, when the popdown is opened, the first available input/button in its content area will be focused.
    */
    set autoFocus(autoFocus) {
        this.popdownOptions.autoFocus = autoFocus;
    }
    /*
    * If true, popdown will be toggle soon focused on the popdown trigger.
    */
    set toggleOnFocus(toggleOnFocus) {
        this.popdownOptions.toggleOnFocus = toggleOnFocus;
    }
    /**
     * Hook to work with tabbing in and out of the popdown.
     */
    set firstLastTab(firstLastTab) {
        this.popdownOptions.firstLastTab = firstLastTab;
    }
    constructor(element) {
        this.element = element;
        this.popdownOptions = {};
    }
    ngAfterViewInit() {
        this.jQueryElement = jQuery(this.element.nativeElement);
        this.jQueryElement.popdown(this.popdownOptions);
        this.popdown = this.jQueryElement.data('popdown');
    }
    ngOnDestroy() {
        if (this.popdown) {
            this.popdown.destroy();
        }
    }
    open() {
        this.popdown?.open();
    }
    close() {
        this.popdown?.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPopDownDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: SohoPopDownDirective, selector: "[soho-popdown]", inputs: { keepOpen: "keepOpen", trigger: "trigger", autoFocus: "autoFocus", toggleOnFocus: "toggleOnFocus", firstLastTab: "firstLastTab" }, host: { properties: { "attr.popdown": "this.isPopdown" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPopDownDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[soho-popdown]', // eslint-disable-line
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { isPopdown: [{
                type: HostBinding,
                args: ['attr.popdown']
            }], keepOpen: [{
                type: Input
            }], trigger: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], toggleOnFocus: [{
                type: Input
            }], firstLastTab: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby1wb3Bkb3duLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lkcy1lbnRlcnByaXNlLW5nL3NyYy9saWIvcG9wZG93bi9zb2hvLXBvcGRvd24uZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxTQUFTLEVBRVQsV0FBVyxFQUVYLEtBQUssRUFDTixNQUFNLGVBQWUsQ0FBQzs7QUFLdkIsTUFBTSxPQUFPLG9CQUFvQjtJQUMvQixJQUFpQyxTQUFTO1FBQzNDLE9BQU8sSUFBSSxDQUFDO0lBQ2IsQ0FBQztJQVFDLElBQ0ksUUFBUSxDQUFDLFFBQWlCO1FBQzVCLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztJQUMxQyxDQUFDO0lBRUQ7O01BRUU7SUFDRixJQUNJLE9BQU8sQ0FBQyxPQUFZO1FBQ3RCLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN4QyxDQUFDO0lBRUQ7O01BRUU7SUFDRixJQUNJLFNBQVMsQ0FBQyxTQUFrQjtRQUM5QixJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDNUMsQ0FBQztJQUVEOztNQUVFO0lBQ0YsSUFDSSxhQUFhLENBQUMsYUFBc0I7UUFDdEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDO0lBQ3BELENBQUM7SUFFRDs7T0FFRztJQUNILElBQ0ksWUFBWSxDQUFDLFlBQWlCO1FBQ2hDLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztJQUNsRCxDQUFDO0lBRUQsWUFBb0IsT0FBbUI7UUFBbkIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQXZDL0IsbUJBQWMsR0FBdUIsRUFBRSxDQUFDO0lBdUNMLENBQUM7SUFFNUMsZUFBZTtRQUNiLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDeEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQ2hELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDaEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUN4QjtJQUNILENBQUM7SUFFRCxJQUFJO1FBQ0YsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRUQsS0FBSztRQUNILElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDeEIsQ0FBQzs4R0FwRVUsb0JBQW9CO2tHQUFwQixvQkFBb0I7OzJGQUFwQixvQkFBb0I7a0JBSGhDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGdCQUFnQixFQUFFLHNCQUFzQjtpQkFDbkQ7aUdBRWtDLFNBQVM7c0JBQXpDLFdBQVc7dUJBQUMsY0FBYztnQkFXdkIsUUFBUTtzQkFEWCxLQUFLO2dCQVNGLE9BQU87c0JBRFYsS0FBSztnQkFTRixTQUFTO3NCQURaLEtBQUs7Z0JBU0YsYUFBYTtzQkFEaEIsS0FBSztnQkFTRixZQUFZO3NCQURmLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBEaXJlY3RpdmUsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RCaW5kaW5nLFxuICBPbkRlc3Ryb3ksXG4gIElucHV0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc29oby1wb3Bkb3duXScsIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbn0pXG5leHBvcnQgY2xhc3MgU29ob1BvcERvd25EaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICBASG9zdEJpbmRpbmcoJ2F0dHIucG9wZG93bicpIGdldCBpc1BvcGRvd24oKSB7XG4gcmV0dXJuIHRydWU7XG59XG5cbiAgcHJpdmF0ZSBqUXVlcnlFbGVtZW50PzogSlF1ZXJ5O1xuXG4gIHByaXZhdGUgcG9wZG93bj86IFNvaG9Qb3BEb3duU3RhdGljO1xuXG4gIHByaXZhdGUgcG9wZG93bk9wdGlvbnM6IFNvaG9Qb3BEb3duT3B0aW9ucyA9IHt9O1xuXG4gIEBJbnB1dCgpXG4gIHNldCBrZWVwT3BlbihrZWVwT3BlbjogYm9vbGVhbikge1xuICAgIHRoaXMucG9wZG93bk9wdGlvbnMua2VlcE9wZW4gPSBrZWVwT3BlbjtcbiAgfVxuXG4gIC8qXG4gICogSWYgZGVmaW5lZCwgcHJvdmlkZXMgYSB3YXkgdG8gcGxhY2UgdGhlIHBvcGRvd24gYWdhaW5zdCBhbiBhbHRlcm5hdGUgZWxlbWVudC5cbiAgKi9cbiAgQElucHV0KClcbiAgc2V0IHRyaWdnZXIodHJpZ2dlcjogYW55KSB7XG4gICAgdGhpcy5wb3Bkb3duT3B0aW9ucy50cmlnZ2VyID0gdHJpZ2dlcjtcbiAgfVxuXG4gIC8qXG4gICogSWYgdHJ1ZSwgd2hlbiB0aGUgcG9wZG93biBpcyBvcGVuZWQsIHRoZSBmaXJzdCBhdmFpbGFibGUgaW5wdXQvYnV0dG9uIGluIGl0cyBjb250ZW50IGFyZWEgd2lsbCBiZSBmb2N1c2VkLlxuICAqL1xuICBASW5wdXQoKVxuICBzZXQgYXV0b0ZvY3VzKGF1dG9Gb2N1czogYm9vbGVhbikge1xuICAgIHRoaXMucG9wZG93bk9wdGlvbnMuYXV0b0ZvY3VzID0gYXV0b0ZvY3VzO1xuICB9XG5cbiAgLypcbiAgKiBJZiB0cnVlLCBwb3Bkb3duIHdpbGwgYmUgdG9nZ2xlIHNvb24gZm9jdXNlZCBvbiB0aGUgcG9wZG93biB0cmlnZ2VyLlxuICAqL1xuICBASW5wdXQoKVxuICBzZXQgdG9nZ2xlT25Gb2N1cyh0b2dnbGVPbkZvY3VzOiBib29sZWFuKSB7XG4gICAgdGhpcy5wb3Bkb3duT3B0aW9ucy50b2dnbGVPbkZvY3VzID0gdG9nZ2xlT25Gb2N1cztcbiAgfVxuXG4gIC8qKlxuICAgKiBIb29rIHRvIHdvcmsgd2l0aCB0YWJiaW5nIGluIGFuZCBvdXQgb2YgdGhlIHBvcGRvd24uXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgZmlyc3RMYXN0VGFiKGZpcnN0TGFzdFRhYjogYW55KSB7XG4gICAgdGhpcy5wb3Bkb3duT3B0aW9ucy5maXJzdExhc3RUYWIgPSBmaXJzdExhc3RUYWI7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHsgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLmpRdWVyeUVsZW1lbnQgPSBqUXVlcnkodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xuICAgIHRoaXMualF1ZXJ5RWxlbWVudC5wb3Bkb3duKHRoaXMucG9wZG93bk9wdGlvbnMpO1xuICAgIHRoaXMucG9wZG93biA9IHRoaXMualF1ZXJ5RWxlbWVudC5kYXRhKCdwb3Bkb3duJyk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5wb3Bkb3duKSB7XG4gICAgICB0aGlzLnBvcGRvd24uZGVzdHJveSgpO1xuICAgIH1cbiAgfVxuXG4gIG9wZW4oKSB7XG4gICAgdGhpcy5wb3Bkb3duPy5vcGVuKCk7XG4gIH1cblxuICBjbG9zZSgpIHtcbiAgICB0aGlzLnBvcGRvd24/LmNsb3NlKCk7XG4gIH1cbn1cbiJdfQ==
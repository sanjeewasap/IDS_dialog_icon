import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { BaseControlValueAccessor, provideControlValueAccessor } from '../utils/base-control-value-accessor';
import * as i0 from "@angular/core";
export class SohoTimePickerComponent extends BaseControlValueAccessor {
    /**
     * Indicates mode, either 'standard' or 'range'; default value is 'standard'
     */
    set mode(mode) {
        this.options.mode = mode;
        if (this.timepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Indicates the pattern for the time format.
     */
    set timeFormat(timeFormat) {
        this.options.timeFormat = timeFormat;
        if (this.timepicker) {
            this.markForRefresh();
        }
    }
    /**
     * An integer from 1 to 60; multiples of this value are displayed as options in the minutes dropdown;
     * default value is 5.
     */
    set minuteInterval(minuteInterval) {
        this.options.minuteInterval = minuteInterval;
        if (this.timepicker) {
            this.markForRefresh();
        }
    }
    /**
     * If a non-matching minutes value is entered, will round the minutes value to the nearest interval on the blur event;
     * default value is false;
     */
    set roundToInterval(roundToInterval) {
        this.options.roundToInterval = roundToInterval;
        if (this.timepicker) {
            this.markForRefresh();
        }
    }
    /**
     * The name of the locale to use for this instance. If not set, the current locale will be used.
     */
    set locale(locale) {
        this.options.locale = locale;
        if (this.timepicker) {
            this.markForRefresh();
        }
    }
    /**
     * The name of the language to use for this instance. If not set, the current locale will be used or the the passed locale will be used.
     */
    set language(language) {
        this.options.language = language;
        if (this.timepicker) {
            this.markForRefresh();
        }
    }
    /**
     * An integer from 1 to 60; multiples of this value are displayed as options in the seconds dropdown;
     * default value is 5.
     */
    set secondInterval(secondInterval) {
        this.options.secondInterval = secondInterval;
        if (this.timepicker) {
            this.markForRefresh();
        }
    }
    /**
     * If defined as a JQuery-wrapped element, will be used as the target element.
     */
    set parentElement(parentElement) {
        this.options.parentElement = parentElement;
        if (this.timepicker) {
            this.markForRefresh();
        }
    }
    /**
     * If set to false, focus will not be returned to the calling element;
     * default value is true.
     */
    set returnFocus(returnFocus) {
        this.options.returnFocus = returnFocus;
        if (this.timepicker) {
            this.markForRefresh();
        }
    }
    /** Add extra attributes like id's to the component **/
    set attributes(attributes) {
        this.options.attributes = attributes;
        if (this.timepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Set the input to tabbable
     */
    set tabbable(tabbable) {
        this.options.tabbable = tabbable;
        if (this.timepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Sets the control to be disabled or not.
     */
    set disabled(value) {
        // Avoid setting the value if not required,
        // this causes issue on component initialisation
        // as enable() is called by both disabled()
        // and readonly().
        if (this.timepicker == null) {
            this.isDisabled = value;
            return;
        }
        // Set the status locally (for refreshing)
        this.isDisabled = value;
        if (value) {
            this.ngZone.runOutsideAngular(() => {
                this.timepicker.disable();
            });
        }
        else {
            this.ngZone.runOutsideAngular(() => {
                this.timepicker.enable();
                this.isReadOnly = false;
            });
        }
    }
    /**
     * Public API
     */
    get disabled() {
        return this.isDisabled;
    }
    /**
     * Sets the control to readonly
     */
    set readonly(value) {
        // Avoid setting the value if not required,
        // this causes issue on component initialisation
        // as enable() is called by both disabled()
        // and readonly().
        if (this.timepicker == null) {
            this.isReadOnly = value;
            return;
        }
        // Set the status locally (for refreshing)
        this.isReadOnly = value;
        if (value) {
            this.ngZone.runOutsideAngular(() => this.timepicker.readonly());
        }
        else {
            this.ngZone.runOutsideAngular(() => {
                this.timepicker.enable();
                this.isDisabled = false;
            });
        }
    }
    get readonly() {
        return this.isReadOnly;
    }
    setValue(time) {
        // There is no API to set the value on the timepicker, so this
        // emulates what the control does internally.
        this.timepicker.element.val(time).trigger('change');
    }
    /**
     * Bind attributes to the host input element
     */
    get isTimepicker() {
        return true;
    }
    /**
     * Creates an instance of SohoTimePickerComponent.
     *
     * @param element the element this component encapsulates.
     * @param ngZone the angular zone for this component.
     * @param ref reference to the change detector
     *
     */
    constructor(element, ngZone, ref) {
        super();
        this.element = element;
        this.ngZone = ngZone;
        this.ref = ref;
        this.isDisabled = undefined;
        this.isReadOnly = undefined;
        this.options = {
            roundToInterval: false,
            returnFocus: true
        };
        /**
         * Called when the datepicker value changes
         *
         * @todo remove override of native attribute.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.change = new EventEmitter();
    }
    ngAfterViewInit() {
        // call outside the angular zone so change detection
        // isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            // assign element to local variable
            this.jQueryElement = jQuery(this.element.nativeElement);
            // initialise the timepicker control
            this.jQueryElement.timepicker(this.options);
            // extract the api
            this.timepicker = this.jQueryElement.data('timepicker');
            /**
             * Bind to jQueryElement's events
             */
            this.jQueryElement
                .on('change', (args) => this.onChange(args));
            if (this.internalValue) {
                this.timepicker.element.val(this.internalValue);
            }
            this.runUpdatedOnCheck = true;
        });
    }
    ngAfterViewChecked() {
        if (this.runUpdatedOnCheck) {
            // Ensure the enabled/disabled flags are set.
            if (this.isDisabled !== null && this.isDisabled !== undefined) {
                this.disabled = this.isDisabled;
            }
            if (this.isReadOnly !== null && this.isReadOnly !== undefined) {
                this.readonly = this.isReadOnly;
            }
            this.ngZone.runOutsideAngular(() => {
                // We need to update the control AFTER the model
                // has been updated (assuming there is one), so
                // execute updated after angular has generated
                // the model and the view markup.
                if (this.timepicker) {
                    this.timepicker?.updated();
                }
                this.runUpdatedOnCheck = false;
            });
        }
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                // remove the event listeners on this element.
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.timepicker) {
                // Destroy any widget resources.
                this.timepicker?.destroy();
                this.timepicker = null;
            }
        });
    }
    /**
     * Handle the control being changed.
     */
    onChange(event) {
        this.internalValue = this.timepicker?.element.val();
        // Set the date on the event.
        event.data = this.internalValue;
        // When the request for data has completed, make sure we
        // update the 'dropdown' control.
        this.ngZone.run(() => {
            // Fire the event
            this.change.emit(event);
        });
    }
    /**
     * Override writeValue to allow the time picker
     * element to be updated correctly.
     *
     * @param value - the new value
     */
    writeValue(value) {
        super.writeValue(value);
        if (this.timepicker) {
            // The processing is required to ensure we use the correct format
            // in the control.
            this.timepicker?.element.val(value);
        }
    }
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh() {
        // Run updated on the next updated check.
        this.runUpdatedOnCheck = true;
        // ... make sure the change detector kicks in, otherwise if the inputs
        // were change programmatially the component may not be eligible for
        // updating.
        this.ref.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTimePickerComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoTimePickerComponent, selector: "input[soho-timepicker]", inputs: { mode: "mode", timeFormat: "timeFormat", minuteInterval: "minuteInterval", roundToInterval: "roundToInterval", locale: "locale", language: "language", secondInterval: "secondInterval", parentElement: "parentElement", returnFocus: "returnFocus", attributes: "attributes", tabbable: "tabbable", disabled: "disabled", readonly: "readonly" }, outputs: { change: "change" }, host: { properties: { "class.timepicker": "this.isTimepicker" } }, providers: [provideControlValueAccessor(SohoTimePickerComponent)], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTimePickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[soho-timepicker]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [provideControlValueAccessor(SohoTimePickerComponent)]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { mode: [{
                type: Input
            }], timeFormat: [{
                type: Input
            }], minuteInterval: [{
                type: Input
            }], roundToInterval: [{
                type: Input
            }], locale: [{
                type: Input
            }], language: [{
                type: Input
            }], secondInterval: [{
                type: Input
            }], parentElement: [{
                type: Input
            }], returnFocus: [{
                type: Input
            }], attributes: [{
                type: Input
            }], tabbable: [{
                type: Input
            }], disabled: [{
                type: Input
            }], readonly: [{
                type: Input
            }], change: [{
                type: Output
            }], isTimepicker: [{
                type: HostBinding,
                args: ['class.timepicker']
            }] } });
//# sourceMappingURL=data:application/json;base64,
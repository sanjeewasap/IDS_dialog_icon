/* eslint-disable @angular-eslint/no-input-rename */
import { ChangeDetectionStrategy, Component, HostBinding, Input } from "@angular/core";
import * as i0 from "@angular/core";
export class SohoStepChartComponent {
    get isStepChart() {
        return true;
    }
    /** The number of steps to show. */
    set steps(steps) {
        this.options.steps = steps;
        if (this.stepchart) {
            this.stepchart.settings.steps = steps;
            this.updateRequired = true;
        }
    }
    /** The number of steps complete (linear). */
    set completed(completed) {
        this.options.completed = completed;
        if (this.stepchart) {
            this.stepchart.settings.completed = completed;
            this.updateRequired = true;
        }
    }
    /** The number of the in progress step (linear). */
    set inProgress(inProgress) {
        this.options.inProgress = inProgress;
        if (this.stepchart) {
            this.stepchart.settings.inProgress = inProgress;
            this.updateRequired = true;
        }
    }
    /** The icon to display fx. 'icon-error', 'icon-success' */
    set iconType(iconType) {
        this.options.iconType = iconType;
        if (this.stepchart) {
            this.stepchart.settings.iconType = iconType;
            this.updateRequired = true;
        }
    }
    /**
     * The completed text or uses a localized 'N of N Steps complete'.
     *  You can use {0} and {1} to replace n of n in the string.
     */
    set completedText(completedText) {
        this.options.completedText = completedText;
        if (this.stepchart) {
            this.stepchart.settings.completedText = completedText;
            this.updateRequired = true;
        }
    }
    /**
     * The additional text to show on the right. Defaults to none.
     * You can use {0} to replace with the steps remaining count and {1} to replace the number of steps.
     */
    set extraText(extraText) {
        this.options.extraText = extraText;
        if (this.stepchart) {
            this.stepchart.settings.extraText = extraText;
            this.updateRequired = true;
        }
    }
    /** The color to show completed steps. Defaults to primary color. */
    set completedColor(completedColor) {
        this.options.completedColor = completedColor;
        if (this.stepchart) {
            this.stepchart.settings.completedColor = completedColor;
            this.updateRequired = true;
        }
    }
    /** The color to steps when all are completed. Defaults to primary color. */
    set allCompletedColor(allCompletedColor) {
        this.options.allCompletedColor = allCompletedColor;
        if (this.stepchart) {
            this.stepchart.settings.allCompletedColor = allCompletedColor;
            this.updateRequired = true;
        }
    }
    /** The color to show in-progress steps. Defaults to ruby02. */
    set inProgressColor(inProgressColor) {
        this.options.inProgressColor = inProgressColor;
        if (this.stepchart) {
            this.stepchart.settings.inProgressColor = inProgressColor;
            this.updateRequired = true;
        }
    }
    /** Add extra attributes like id's to the chart elements.
     * For example { name: 'id', value: 'my-unique-id' }
     */
    set attributes(attributes) {
        this.options.attributes = attributes;
        if (this.stepchart) {
            this.stepchart.settings.attributes = attributes;
            this.updateRequired = true;
        }
    }
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        this.options = {};
        this.updateRequired = false;
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // assign element to local variable
            this.jQueryElement = jQuery(this.element.nativeElement);
            // initialise the tag control
            this.jQueryElement.stepchart(this.options);
            // extract the api
            this.stepchart = this.jQueryElement.data('stepchart');
        });
    }
    ngAfterViewChecked() {
        if (this.stepchart && this.updateRequired) {
            this.ngZone.runOutsideAngular(() => this.stepchart?.updated(this.stepchart.settings));
            this.updateRequired = false;
        }
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                // remove the event listeners on this element.
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            // Destroy any widget resources.
            if (this.stepchart) {
                // Error occurs in teardown in enterprise
                // this.stepchart.destroy();
                this.stepchart = null;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoStepChartComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoStepChartComponent, selector: "[soho-stepchart]", inputs: { steps: "steps", completed: "completed", inProgress: "inProgress", iconType: "iconType", completedText: "completedText", extraText: "extraText", completedColor: "completedColor", allCompletedColor: "allCompletedColor", inProgressColor: "inProgressColor", attributes: "attributes" }, host: { properties: { "class.step-chart": "this.isStepChart" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoStepChartComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: '[soho-stepchart]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isStepChart: [{
                type: HostBinding,
                args: ['class.step-chart']
            }], steps: [{
                type: Input
            }], completed: [{
                type: Input
            }], inProgress: [{
                type: Input
            }], iconType: [{
                type: Input
            }], completedText: [{
                type: Input
            }], extraText: [{
                type: Input
            }], completedColor: [{
                type: Input
            }], allCompletedColor: [{
                type: Input
            }], inProgressColor: [{
                type: Input
            }], attributes: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
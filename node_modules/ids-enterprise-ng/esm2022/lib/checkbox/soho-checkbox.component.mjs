import { ChangeDetectionStrategy, Component, HostBinding, EventEmitter, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Wrapper for soho checkboxes.
 *
 * Note the control must have type="checkbox" for the values to be passed
 * to and from any ng model instances.
 */
export class SohoCheckBoxComponent {
    /**
     * Bind attributes to the host input element
     */
    get isCheckBoxType() {
        return 'checkbox';
    }
    get isCheckBox() {
        return !this.switch;
    }
    get isPartialCheckBox() {
        return this.partial ? true : false;
    }
    get isPartialAriaChecked() {
        return this.partial ? 'mixed' : null;
    }
    get isSwitch() {
        return this.switch;
    }
    /**
     * Constructor.
     *
     * @param elementRef - the element matching the component's selector.
     */
    constructor(elementRef, ngZone) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        /**
         * Indicate that the checkbox is displayed as a switch.
         */
        this.switch = false;
        // -------------------------------------------
        // Component Output
        // -------------------------------------------
        /** Called when the checkbox value changes. */
        this.changeEvent = new EventEmitter();
        /** Called when the checkbox updates in some way. */
        this.updateEvent = new EventEmitter();
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.elementRef.nativeElement);
            /**
             * Bind to jQueryElement's events
             */
            this.jQueryElement.on('change', (event) => this.ngZone.run(() => this.changeEvent.emit(event)));
            this.jQueryElement.on('updated', (event) => this.ngZone.run(() => this.updateEvent.emit(event)));
            // no control initializer for checkbox
        });
    }
    /**
     * Destructor.
     */
    ngOnDestroy() {
        // No jQuery control.
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCheckBoxComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoCheckBoxComponent, selector: "[soho-checkbox]", inputs: { partial: "partial", switch: "switch", checked: "checked" }, outputs: { changeEvent: "changeEvent", updateEvent: "updateEvent" }, host: { properties: { "attr.type": "this.isCheckBoxType", "class.checkbox": "this.isCheckBox", "class.partial": "this.isPartialCheckBox", "attr.aria-checked": "this.isPartialAriaChecked", "class.switch": "this.isSwitch", "attr.checked": "this.checked" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCheckBoxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-checkbox]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { partial: [{
                type: Input
            }], switch: [{
                type: Input
            }], isCheckBoxType: [{
                type: HostBinding,
                args: ['attr.type']
            }], isCheckBox: [{
                type: HostBinding,
                args: ['class.checkbox']
            }], isPartialCheckBox: [{
                type: HostBinding,
                args: ['class.partial']
            }], isPartialAriaChecked: [{
                type: HostBinding,
                args: ['attr.aria-checked']
            }], isSwitch: [{
                type: HostBinding,
                args: ['class.switch']
            }], checked: [{
                type: HostBinding,
                args: ['attr.checked']
            }, {
                type: Input
            }], changeEvent: [{
                type: Output
            }], updateEvent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby1jaGVja2JveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZHMtZW50ZXJwcmlzZS1uZy9zcmMvbGliL2NoZWNrYm94L3NvaG8tY2hlY2tib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFdBQVcsRUFFWCxZQUFZLEVBQ1osS0FBSyxFQUdMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQzs7QUFFdkI7Ozs7O0dBS0c7QUFNSCxNQUFNLE9BQU8scUJBQXFCO0lBWWhDOztPQUVHO0lBQ0gsSUFBOEIsY0FBYztRQUMxQyxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBQ0QsSUFBbUMsVUFBVTtRQUMzQyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUN0QixDQUFDO0lBQ0QsSUFBa0MsaUJBQWlCO1FBQ2pELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDckMsQ0FBQztJQUNELElBQXNDLG9CQUFvQjtRQUN4RCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3ZDLENBQUM7SUFDRCxJQUFpQyxRQUFRO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBbUJEOzs7O09BSUc7SUFDSCxZQUNVLFVBQXNCLEVBQ3RCLE1BQWM7UUFEZCxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFoRHhCOztXQUVHO1FBQ00sV0FBTSxHQUFHLEtBQUssQ0FBQztRQXVCeEIsOENBQThDO1FBQzlDLG1CQUFtQjtRQUNuQiw4Q0FBOEM7UUFFOUMsOENBQThDO1FBQ3BDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQXFCLENBQUM7UUFFOUQsb0RBQW9EO1FBQzFDLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQXFCLENBQUM7SUFnQjlELENBQUM7SUFFRCxlQUFlO1FBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDakMsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUUzRDs7ZUFFRztZQUNILElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEtBQXdCLEVBQUUsRUFBRSxDQUMzRCxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFFdkQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUMsS0FBd0IsRUFBRSxFQUFFLENBQzVELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUV2RCxzQ0FBc0M7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQ7O09BRUc7SUFDSCxXQUFXO1FBQ1QscUJBQXFCO0lBQ3ZCLENBQUM7OEdBakZVLHFCQUFxQjtrR0FBckIscUJBQXFCLG1jQUh0QiwyQkFBMkI7OzJGQUcxQixxQkFBcUI7a0JBTGpDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGlCQUFpQjtvQkFDM0IsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEO3NIQU1VLE9BQU87c0JBQWYsS0FBSztnQkFLRyxNQUFNO3NCQUFkLEtBQUs7Z0JBS3dCLGNBQWM7c0JBQTNDLFdBQVc7dUJBQUMsV0FBVztnQkFHVyxVQUFVO3NCQUE1QyxXQUFXO3VCQUFDLGdCQUFnQjtnQkFHSyxpQkFBaUI7c0JBQWxELFdBQVc7dUJBQUMsZUFBZTtnQkFHVSxvQkFBb0I7c0JBQXpELFdBQVc7dUJBQUMsbUJBQW1CO2dCQUdDLFFBQVE7c0JBQXhDLFdBQVc7dUJBQUMsY0FBYztnQkFJVyxPQUFPO3NCQUE1QyxXQUFXO3VCQUFDLGNBQWM7O3NCQUFHLEtBQUs7Z0JBT3pCLFdBQVc7c0JBQXBCLE1BQU07Z0JBR0csV0FBVztzQkFBcEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEhvc3RCaW5kaW5nLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIElucHV0LFxuICBOZ1pvbmUsXG4gIE9uRGVzdHJveSxcbiAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBXcmFwcGVyIGZvciBzb2hvIGNoZWNrYm94ZXMuXG4gKlxuICogTm90ZSB0aGUgY29udHJvbCBtdXN0IGhhdmUgdHlwZT1cImNoZWNrYm94XCIgZm9yIHRoZSB2YWx1ZXMgdG8gYmUgcGFzc2VkXG4gKiB0byBhbmQgZnJvbSBhbnkgbmcgbW9kZWwgaW5zdGFuY2VzLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdbc29oby1jaGVja2JveF0nLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFNvaG9DaGVja0JveENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG5cbiAgLyoqXG4gICAqIEluZGljYXRlIHRoYXQgdGhlIGNoZWNrYm94IGlzIHBhcnRpYWxcbiAgICovXG4gIEBJbnB1dCgpIHBhcnRpYWw/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZSB0aGF0IHRoZSBjaGVja2JveCBpcyBkaXNwbGF5ZWQgYXMgYSBzd2l0Y2guXG4gICAqL1xuICBASW5wdXQoKSBzd2l0Y2ggPSBmYWxzZTtcblxuICAvKipcbiAgICogQmluZCBhdHRyaWJ1dGVzIHRvIHRoZSBob3N0IGlucHV0IGVsZW1lbnRcbiAgICovXG4gIEBIb3N0QmluZGluZygnYXR0ci50eXBlJykgZ2V0IGlzQ2hlY2tCb3hUeXBlKCkge1xuICAgIHJldHVybiAnY2hlY2tib3gnO1xuICB9XG4gIEBIb3N0QmluZGluZygnY2xhc3MuY2hlY2tib3gnKSBnZXQgaXNDaGVja0JveCgpIHtcbiAgICByZXR1cm4gIXRoaXMuc3dpdGNoO1xuICB9XG4gIEBIb3N0QmluZGluZygnY2xhc3MucGFydGlhbCcpIGdldCBpc1BhcnRpYWxDaGVja0JveCgpIHtcbiAgICByZXR1cm4gdGhpcy5wYXJ0aWFsID8gdHJ1ZSA6IGZhbHNlO1xuICB9XG4gIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLWNoZWNrZWQnKSBnZXQgaXNQYXJ0aWFsQXJpYUNoZWNrZWQoKSB7XG4gICAgcmV0dXJuIHRoaXMucGFydGlhbCA/ICdtaXhlZCcgOiBudWxsO1xuICB9XG4gIEBIb3N0QmluZGluZygnY2xhc3Muc3dpdGNoJykgZ2V0IGlzU3dpdGNoKCkge1xuICAgIHJldHVybiB0aGlzLnN3aXRjaDtcbiAgfVxuXG4gIEBIb3N0QmluZGluZygnYXR0ci5jaGVja2VkJykgQElucHV0KCkgY2hlY2tlZD86IGJvb2xlYW47XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBDb21wb25lbnQgT3V0cHV0XG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvKiogQ2FsbGVkIHdoZW4gdGhlIGNoZWNrYm94IHZhbHVlIGNoYW5nZXMuICovXG4gIEBPdXRwdXQoKSBjaGFuZ2VFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXI8U29ob0NoZWNrQm94RXZlbnQ+KCk7XG5cbiAgLyoqIENhbGxlZCB3aGVuIHRoZSBjaGVja2JveCB1cGRhdGVzIGluIHNvbWUgd2F5LiAqL1xuICBAT3V0cHV0KCkgdXBkYXRlRXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyPFNvaG9DaGVja0JveEV2ZW50PigpO1xuXG4gIC8qKlxuICAgKiBMb2NhbCB2YXJpYWJsZXNcbiAgICovXG4gIHByaXZhdGUgalF1ZXJ5RWxlbWVudD86IEpRdWVyeTtcblxuICAvKipcbiAgICogQ29uc3RydWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSBlbGVtZW50UmVmIC0gdGhlIGVsZW1lbnQgbWF0Y2hpbmcgdGhlIGNvbXBvbmVudCdzIHNlbGVjdG9yLlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmVcbiAgKSB7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50ID0galF1ZXJ5KHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcblxuICAgICAgLyoqXG4gICAgICAgKiBCaW5kIHRvIGpRdWVyeUVsZW1lbnQncyBldmVudHNcbiAgICAgICAqL1xuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50Lm9uKCdjaGFuZ2UnLCAoZXZlbnQ6IFNvaG9DaGVja0JveEV2ZW50KSA9PlxuICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5jaGFuZ2VFdmVudC5lbWl0KGV2ZW50KSkpO1xuXG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQub24oJ3VwZGF0ZWQnLCAoZXZlbnQ6IFNvaG9DaGVja0JveEV2ZW50KSA9PlxuICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy51cGRhdGVFdmVudC5lbWl0KGV2ZW50KSkpO1xuXG4gICAgICAvLyBubyBjb250cm9sIGluaXRpYWxpemVyIGZvciBjaGVja2JveFxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIERlc3RydWN0b3IuXG4gICAqL1xuICBuZ09uRGVzdHJveSgpIHtcbiAgICAvLyBObyBqUXVlcnkgY29udHJvbC5cbiAgfVxufVxuIl19
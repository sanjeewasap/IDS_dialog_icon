import { ChangeDetectionStrategy, Component, Output, EventEmitter, HostBinding, Input, Optional } from '@angular/core';
import { ArgumentHelper } from '../utils/argument.helper';
import * as i0 from "@angular/core";
import * as i1 from "./soho-tree.service";
/**
 * Angular Wrapper for the Soho Tree Component.
 *
 * This component searches for an unordered list (ul) with the attribute
 * 'soho-tree' in the parent's DOM tree, initialising those found with
 * the SoHo tree control.
 *
 * The data is provided either by the content (li elements), a dataset
 * input or an implementation of the TreeService interface, by specifying
 * an implementation on the hosting component, e.g.
 *
 * providers: [ provide: TreeService, useClass: TreeDemoService} ]
 *
 * @todo Content based version does not work due to lack of TreeNode.
 * @todo Complete interface definition
 */
export class SohoTreeComponent {
    // -------------------------------------------
    // Soho Tree Types
    // -------------------------------------------
    // "auto" where nodes are obtained from an injected service (if defined) or via the Inputs if not.
    static { this.AUTO = 'auto'; }
    // 'content-only' where elements are used.
    static { this.CONTENT_ONLY = 'content-only'; }
    // -------------------------------------------
    // Component Inputs
    // -------------------------------------------
    // The array of root tree nodes to display.
    set dataset(dataset) {
        // @todo this is not fully working as the tree control does not
        // replace the contents but looks to merge it.
        this.options.dataset = dataset;
        if (this.tree) {
            this.tree?.loadData(dataset);
        }
    }
    get dataset() {
        // If the Soho control has been created, then the dataset
        // in the settings object will contain the rows currently
        // on display.
        if (this.tree) {
            return this.tree.settings.dataset;
        }
        // ... we've been called before the component has completed
        // initialisation, so no data has been set (or potentially
        // retrieved from a service), so the only option is the
        // Input dataset, which may be undefined.
        return this.options.dataset || [];
    }
    /** Defines the source type of the tree. */
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set sohoTree(treeType) {
        this.treeType = treeType ? treeType : SohoTreeComponent.AUTO;
    }
    /** Is the tree selectable? */
    set selectable(selectable) {
        this.options.selectable = selectable;
        if (this.tree) {
            this.tree.settings.selectable = selectable;
            // @todo - make tree updatable when settings change,
            // this.tree?.updated();
        }
    }
    get selectable() {
        if (this.tree) {
            return this.tree.settings.selectable;
        }
        return this.options.selectable;
    }
    /** Show/hide selection checkboxe */
    set hideCheckboxes(hideCheckboxes) {
        this.options.hideCheckboxes = hideCheckboxes;
        if (this.tree) {
            this.tree.settings.hideCheckboxes = hideCheckboxes;
        }
    }
    set menuId(menuId) {
        this.options.menuId = menuId;
        if (this.tree) {
            this.tree.settings.menuId = menuId;
        }
    }
    /** Set the source field, when not using a service or pre-defined data. */
    set source(value) {
        this.options.source = value;
        if (this.tree) {
            this.tree.settings.source = value;
            // @todo - make tree updatable when settings change,
            // this.tree?.updated();
        }
    }
    /** Show icon on node opened */
    set folderIconOpen(folderIconOpen) {
        this.options.folderIconOpen = folderIconOpen;
        if (this.tree) {
            this.tree.settings.folderIconOpen = folderIconOpen;
        }
    }
    /** Show icon on node closed */
    set folderIconClosed(folderIconClosed) {
        this.options.folderIconClosed = folderIconClosed;
        if (this.tree) {
            this.tree.settings.folderIconClosed = folderIconClosed;
        }
    }
    /**
     * Constructor.
     *
     * @param elementRef - the element matching this directive.
     * @param treeService - service for obtaining data (optional)
     */
    constructor(elementRef, treeService) {
        this.elementRef = elementRef;
        this.treeService = treeService;
        // -------------------------------------------
        // Component Output
        // -------------------------------------------
        /**
         * This event is fired when a node is expanded, the SohoTreeNode
         * expanded is passed in the argument passed to the handler.
         */
        this.expanded = new EventEmitter();
        /**
         * This event is fired when a node is collapsed, the SohoTreeNode
         * collapsed is passed in the argument passed to the handler.
         */
        this.collapsed = new EventEmitter();
        /**
         * This event is fired when a node is selected, the SohoTreeNode
         * selected is passed in the argument passed to the handler.
         * */
        this.selected = new EventEmitter();
        /**
         * This event is fired when right clicking a node.
         * */
        // @todo fix the use of this native attribute
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.contextmenu = new EventEmitter();
        /**
         * This event is fired when a node is unselected, the SohoTreeNode
         * unselected is passed in the argument passed to the handler.
         * */
        this.unselected = new EventEmitter();
        this.sortstart = new EventEmitter();
        this.sortend = new EventEmitter();
        /**
         * This event is fired when context menu is selected, the SohoTreeNode
         * selected is passed in the argument passed to the handler.
         * */
        this.menuselect = new EventEmitter();
        /**
         * This event is fired on context menu opening, the SohoTreeNode
         * selected is passed in the argument passed to the handler.
         * */
        this.menuopen = new EventEmitter();
        // -------------------------------------------
        // Host Bindings
        // -------------------------------------------
        // Set the enable / disabled class (not working)
        this.isDisabled = false;
        // Set the appropriate SoHo class for a tree.
        this.treeClass = true;
        // Set the role.
        this.treeRole = 'tree';
        /** An internal options object that gets updated by using the component's Inputs(). */
        this.options = {};
    }
    // -------------------------------------------
    // Public API
    // -------------------------------------------
    /**
     * Resets the data display to the default provided by the service,
     * that is by calling getRootNodes.
     *
     * The alternative is to set the dataset property, which
     * has the same affect but allows the client to specify
     * the nodes.
     *
     * This method is only applicable when the service is defined,
     * but will not fail if one is not set.
     */
    reset() {
        if (this.treeType !== SohoTreeComponent.CONTENT_ONLY && this.treeService) {
            this.treeService.getRootTreeNodes()
                .subscribe((dataset) => this.dataset = dataset);
        }
    }
    /** Enable the tree */
    enable() {
        this.isDisabled = false;
        if (this.tree) {
            this.tree?.enable();
        }
    }
    /** Disables the tree from reacting to events. */
    disable() {
        this.isDisabled = true;
        if (this.tree) {
            this.tree?.disable();
        }
    }
    setFocus(node) {
        ArgumentHelper.checkNotNull('node', node);
        this.tree?.setFocus(node);
    }
    disableNode(node) {
        ArgumentHelper.checkNotNull('node', node);
        node.disabled = true;
        this.tree?.updateNode(node);
    }
    enableNode(node) {
        ArgumentHelper.checkNotNull('node', node);
        node.disabled = false;
        this.tree?.updateNode(node);
    }
    /**
     * Updates the note with the information in the given SohoTreeNode.
     *
     * @parm node the tree node; must not be null.
     */
    updateNode(node) {
        ArgumentHelper.checkNotNull('node', node);
        this.tree?.updateNode(node);
    }
    /**
     * Expands all the loaded tree nodes.
     *
     * Note: this does not load additional nodes.
     */
    expandAll() {
        if (this.tree) {
            this.tree?.expandAll();
        }
    }
    /**
     * Collapse all the tree nodes.
     */
    collapseAll() {
        if (this.tree) {
            this.tree?.collapseAll();
        }
    }
    /**
     * Remove the given node.
     */
    removeNode(node) {
        if (this.tree) {
            this.tree?.removeNode(node);
        }
    }
    /**
     * Preserves all nodes' enablement states in the Tree component
     */
    preserveEnablementState() {
        if (this.tree) {
            return this.tree?.preserveEnablementState();
        }
    }
    /**
     * Restores all nodes' original enablement states in the Tree component
     */
    restoreEnablementState() {
        if (this.tree) {
            this.tree?.restoreEnablementState();
        }
    }
    /**
     * Set the selected note based in the id of the node.  If the node
     * does not exist an exception is thrown.
     */
    selectNode(id, focus = true) {
        ArgumentHelper.checkNotEmpty('id', id);
        const treeNode = this.tree?.findById(id);
        if (treeNode && treeNode.node) {
            this.tree?.selectNode(treeNode.node, focus);
        }
        else {
            throw Error(`Node ${id} does not exist`);
        }
    }
    /**
     * Set the selected note based in the id of the node.  If the node
     * does not exist an exception is thrown.
     */
    unSelectedNode(id, focus = false) {
        ArgumentHelper.checkNotEmpty('id', id);
        const treeNode = this.tree.findById(id);
        if (treeNode && treeNode.node) {
            this.tree.unSelectedNode(treeNode.node, focus);
        }
        else {
            throw Error(`Node ${id} does not exist`);
        }
    }
    /**
     * Returns a list of selected tree nodes, or an
     * empty array if the tree has not been initialised
     * yet.
     */
    getSelectedNodes() {
        const result = [];
        if (this.tree) {
            // It would be good if the tree widget had a method that returned
            // tree nodes rather then an intermediate wrapper, but to clean up
            // the api we dispose of the extra information here.
            this.tree?.getSelectedNodes().forEach((n) => {
                result.push(n.data);
            });
        }
        return result;
    }
    /**
     * Adds a node to the tree.
     */
    addNode(treeNode, location = 'bottom', isBeforeOrAfter = '') {
        ArgumentHelper.checkNotNull('treeNode', treeNode);
        this.tree?.addNode(treeNode, location, isBeforeOrAfter);
    }
    /**
     * Find the tree node for the given identifier (id).
     */
    findById(id) {
        ArgumentHelper.checkNotEmpty('id', id);
        return this.tree.findById(id);
    }
    /**
     * Toggles open/closed state of the given tree node.
     */
    toggleNode(node) {
        ArgumentHelper.checkNotNull('node', node);
        ArgumentHelper.checkNotNull('node.node', node.node);
        this.tree?.toggleNode(node.node);
    }
    // -------------------------------------------
    // Event Handlers
    // -------------------------------------------
    /**
     * Handle a request to load the children of the specified node.
     *
     * event - the tree event used to determine which node to load
     * response - function used to return the children
     */
    onDataRequest(event, response) {
        const node = event.data;
        this.treeService.getTreeNodes(node)
            .subscribe((children) => {
            response(children);
        });
    }
    // ------------------------------------------
    // Lifecycle Events
    // ------------------------------------------
    ngOnInit() {
    }
    ngAfterViewInit() {
        // Wrap the "unordered list" element in a jQuery selector.
        this.jQueryElement = jQuery(this.elementRef.nativeElement);
        // Ensure the source is set when a service is defined.
        if (!this.options.dataset && !this.options.source && this.treeService) {
            this.options.source =
                (args, response) => this.onDataRequest(args, response);
        }
        // Initialise the Soho control.
        this.jQueryElement.tree(this.options);
        // Once the control is initialised, extract the control
        // plug-in from the element.  The element name is
        // defined by the plug-in, but in this case it is 'tree'.
        this.tree = this.jQueryElement.data('tree');
        // Preload from the service if specified (unless data already provided).
        if (this.treeType !== SohoTreeComponent.CONTENT_ONLY && !this.options.dataset && this.treeService) {
            // ... bootstrap the root nodes ...
            this.treeService.getRootTreeNodes()
                .subscribe((dataset) => this.dataset = dataset);
        }
        // Initialize any event handlers.
        this.jQueryElement
            .on('contextmenu', (_e, args) => this.contextmenu?.next(args))
            .on('selected', (_e, args) => this.selected.next(args))
            .on('unselected', (_e, args) => this.unselected.next(args))
            .on('expanded', (_e, args) => this.expanded.next(args))
            .on('collapsed', (_e, args) => this.collapsed.next(args))
            .on('sortstart', (_e, args) => this.sortstart.next(args))
            .on('sortend', (_e, args) => this.sortend.next(args))
            .on('menuselect', (_e, args) => this.menuselect.next(args))
            .on('menuopen', (_e, args) => this.menuopen.next(args));
    }
    ngOnDestroy() {
        if (this.tree) {
            this.tree?.destroy();
            this.tree = null;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTreeComponent, deps: [{ token: i0.ElementRef }, { token: i1.SohoTreeService, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoTreeComponent, selector: "ul[soho-tree]", inputs: { dataset: "dataset", sohoTree: ["soho-tree", "sohoTree"], selectable: "selectable", hideCheckboxes: "hideCheckboxes", menuId: "menuId", source: "source", folderIconOpen: "folderIconOpen", folderIconClosed: "folderIconClosed" }, outputs: { expanded: "expanded", collapsed: "collapsed", selected: "selected", contextmenu: "contextmenu", unselected: "unselected", sortstart: "sortstart", sortend: "sortend", menuselect: "menuselect", menuopen: "menuopen" }, host: { properties: { "class.is-disabled": "this.isDisabled", "class.tree": "this.treeClass", "attr.role": "this.treeRole" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTreeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ul[soho-tree]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i1.SohoTreeService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { dataset: [{
                type: Input
            }], sohoTree: [{
                type: Input,
                args: ['soho-tree']
            }], selectable: [{
                type: Input
            }], hideCheckboxes: [{
                type: Input
            }], menuId: [{
                type: Input
            }], source: [{
                type: Input
            }], folderIconOpen: [{
                type: Input
            }], folderIconClosed: [{
                type: Input
            }], expanded: [{
                type: Output
            }], collapsed: [{
                type: Output
            }], selected: [{
                type: Output
            }], contextmenu: [{
                type: Output
            }], unselected: [{
                type: Output
            }], sortstart: [{
                type: Output
            }], sortend: [{
                type: Output
            }], menuselect: [{
                type: Output
            }], menuopen: [{
                type: Output
            }], isDisabled: [{
                type: HostBinding,
                args: ['class.is-disabled']
            }], treeClass: [{
                type: HostBinding,
                args: ['class.tree']
            }], treeRole: [{
                type: HostBinding,
                args: ['attr.role']
            }] } });
//# sourceMappingURL=data:application/json;base64,
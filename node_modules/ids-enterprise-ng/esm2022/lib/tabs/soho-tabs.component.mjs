import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { DeprecatedEventEmitter } from '../utils/deprecated-event-emitter';
import * as i0 from "@angular/core";
/**
 * Internal component to support the tab title
 */
export class SohoTabTitleComponent {
    get hrefAttr() {
        return '#' + this.tabId;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabTitleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoTabTitleComponent, selector: "a[soho-tab-title]", inputs: { tabId: "tabId" }, host: { properties: { "attr.href": "this.hrefAttr" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabTitleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'a[soho-tab-title]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { hrefAttr: [{
                type: HostBinding,
                args: ['attr.href']
            }], tabId: [{
                type: Input
            }] } });
/**
 * Internal component to support the tab with a 'count' on it.
 */
export class SohoTabCountComponent {
    // @ts-ignore
    constructor(_element) {
        // Adding the class this way to ensure that it is applied before the AfterViewInit.
        // Avoiding @HostBinding for this since an *ngIf causes bindings to be processed
        // after the AfterViewInit
        _element?.nativeElement.classList.add('count');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabCountComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoTabCountComponent, selector: "span[soho-tab-count]", ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabCountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'span[soho-tab-count]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });
/**
 * Internal component to support a divider between tab items
 */
export class SohoTabSeparatorComponent {
    constructor(_element) {
        // Adding the class this way to ensure that it is applied before the AfterViewInit.
        // Avoiding @HostBinding for this since an *ngIf causes bindings to be processed
        // after the AfterViewInit
        _element.nativeElement.classList.add('separator');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabSeparatorComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoTabSeparatorComponent, selector: "li[soho-tab-separator]", ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabSeparatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'li[soho-tab-separator]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });
/**
 * Internal component to support tab panel container content.
 */
export class SohoTabPanelContainerComponent {
    constructor(element) {
        this.element = element;
        // Adding the class this way to ensure that it is applied before the AfterViewInit.
        // Avoiding @HostBinding for this since an *ngIf causes bindings to be processed
        // after the AfterViewInit
        this.element.nativeElement.classList.add('tab-panel-container');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabPanelContainerComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoTabPanelContainerComponent, selector: "div[soho-tab-panel-container]", inputs: { verticalScrolling: "verticalScrolling" }, host: { properties: { "class.scrollable-y": "this.verticalScrolling" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabPanelContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'div[soho-tab-panel-container]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { verticalScrolling: [{
                type: HostBinding,
                args: ['class.scrollable-y']
            }, {
                type: Input
            }] } });
/**
 * Internal component to support tab panel content.
 */
export class SohoTabPanelComponent {
    constructor(_element) {
        // Adding the class this way to ensure that it is applied before the AfterViewInit.
        // Avoiding @HostBinding for this since an *ngIf causes bindings to be processed
        // after the AfterViewInit
        _element.nativeElement.classList.add('tab-panel');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabPanelComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoTabPanelComponent, selector: "div[soho-tab-panel]", inputs: { tabId: "tabId", contained: "contained" }, host: { properties: { "attr.id": "this.tabId", "attr.contained": "this.contained" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabPanelComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'div[soho-tab-panel]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { tabId: [{
                type: HostBinding,
                args: ['attr.id']
            }, {
                type: Input
            }], contained: [{
                type: HostBinding,
                args: ['attr.contained']
            }, {
                type: Input
            }] } });
/**
 * Internal component to support the tab list items
 */
export class SohoTabComponent {
    constructor(_element) {
        this.dismissible = false;
        this.selected = false;
        this.disabled = false;
        this.hidden = false;
        this.hasPopupMenu = false;
        // Adding the class this way to ensure that it is applied before the AfterViewInit.
        // Avoiding @HostBinding for this since an *ngIf causes bindings to be processed
        // after the AfterViewInit
        _element.nativeElement.classList.add('tab');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoTabComponent, selector: "li[soho-tab]", inputs: { dismissible: "dismissible", selected: "selected", disabled: "disabled", hidden: "hidden", hasPopupMenu: "hasPopupMenu" }, host: { properties: { "class.dismissible": "this.dismissible", "class.is-selected": "this.selected", "class.is-disabled": "this.disabled", "class.hidden": "this.hidden", "class.has-popupmenu": "this.hasPopupMenu" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'li[soho-tab]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { dismissible: [{
                type: HostBinding,
                args: ['class.dismissible']
            }, {
                type: Input
            }], selected: [{
                type: HostBinding,
                args: ['class.is-selected']
            }, {
                type: Input
            }], disabled: [{
                type: HostBinding,
                args: ['class.is-disabled']
            }, {
                type: Input
            }], hidden: [{
                type: HostBinding,
                args: ['class.hidden']
            }, {
                type: Input
            }], hasPopupMenu: [{
                type: HostBinding,
                args: ['class.has-popupmenu']
            }, {
                type: Input
            }] } });
/**
 * Main tabset header component
 */
export class SohoTabListComponent {
    constructor(_element) {
        // Adding the class this way to ensure that it is applied before the AfterViewInit.
        // Avoiding @HostBinding for this since an *ngIf causes bindings to be processed
        // after the AfterViewInit
        _element.nativeElement.classList.add('tab-list');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabListComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoTabListComponent, selector: "ul[soho-tab-list]", ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ul[soho-tab-list]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });
/**
 * Main tabset header component
 */
export class SohoTabListContainerComponent {
    constructor(_element) {
        // Adding the class this way to ensure that it is applied before the AfterViewInit.
        // Avoiding @HostBinding for this since an *ngIf causes bindings to be processed
        // after the AfterViewInit
        _element.nativeElement.classList.add('tab-list-container');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabListContainerComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoTabListContainerComponent, selector: "div[soho-tab-list-container]", inputs: { verticalScrolling: "verticalScrolling" }, host: { properties: { "class.scrollable-y": "this.verticalScrolling" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabListContainerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'div[soho-tab-list-container]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { verticalScrolling: [{
                type: HostBinding,
                args: ['class.scrollable-y']
            }, {
                type: Input
            }] } });
/**
 * The main soho-tabs component
 */
export class SohoTabsComponent {
    get isVertical() {
        return this.vertical;
    }
    get isModuleTabs() {
        return this.moduleTabs;
    }
    get isHeaderTabs() {
        return this.headerTabs;
    }
    get isAlternate() {
        return this.alternate;
    }
    set tabsOptions(tabsOptions) {
        this._tabsOptions = tabsOptions;
        if (this.jQueryElement) {
            this.tabs.settings = tabsOptions;
            this.updateRequired = true;
        }
    }
    /**
     * If set to true, creates a button at the end of the tab list that can be used to add an empty tab and panel.
     *
     */
    set addTabButton(addTabButton) {
        this._tabsOptions.addTabButton = addTabButton;
        if (this.jQueryElement) {
            this.tabs.settings.addTabButton = addTabButton;
            this.updateRequired = true;
        }
    }
    /**
     * if defined as a function, will be used in-place of the default Tab Adding method
     * TODO: how to handle call back function?
     */
    set addTabButtonCallback(addTabButtonCallback) {
        this._tabsOptions.addTabButtonCallback = addTabButtonCallback;
        if (this.jQueryElement) {
            this.tabs.settings.addTabButtonCallback = addTabButtonCallback;
            this.updateRequired = true;
        }
    }
    /**
     * If set to true, will force an App Menu trigger to be present on Non-Vertical Tabs implementatations.
     */
    set appMenuTrigger(appMenuTrigger) {
        this._tabsOptions.appMenuTrigger = appMenuTrigger;
        if (this.jQueryElement) {
            this.tabs.settings.appMenuTrigger = appMenuTrigger;
            this.updateRequired = true;
        }
    }
    /**
     * If defined, replaces the default "Menu" text used in the app menu trigger.
     */
    set appMenuTriggerText(appMenuTriggerText) {
        this._tabsOptions.appMenuTriggerText = appMenuTriggerText;
        if (this.jQueryElement) {
            this.tabs.settings.appMenuTriggerText = appMenuTriggerText;
            this.updateRequired = true;
        }
    }
    /**
     *  If true, causes an app menu trigger's text content to be visually hidden (but still exists for accessiblity purposes)
     */
    set appMenuTriggerTextAudible(appMenuTriggerTextAudible) {
        this._tabsOptions.appMenuTriggerTextAudible = appMenuTriggerTextAudible;
        if (this.jQueryElement) {
            this.tabs.settings.appMenuTriggerTextAudible = appMenuTriggerTextAudible;
            this.updateRequired = true;
        }
    }
    /**
     *  If defined, will be used by any internal Tabs AJAX calls as the desired request settings.
     */
    set ajaxOptions(ajaxOptions) {
        this._tabsOptions.ajaxOptions = ajaxOptions;
        if (this.jQueryElement) {
            this.tabs.settings.ajaxOptions = ajaxOptions;
            this.updateRequired = true;
        }
    }
    /**
     * Defines a separate element to be used for containing the tab panels.  Defaults to the Tab Container itself
     */
    set containerElement(containerElement) {
        this._tabsOptions.containerElement = containerElement;
        if (this.jQueryElement) {
            this.tabs.settings.containerElement = containerElement;
            this.updateRequired = true;
        }
    }
    /**
     * If true, will change the selected tab on invocation based on the URL that exists after the hash
     *
     */
    set changeTabOnHashChange(changeTabOnHashChange) {
        this._tabsOptions.changeTabOnHashChange = changeTabOnHashChange;
        if (this.jQueryElement) {
            this.tabs.settings.changeTabOnHashChange = changeTabOnHashChange;
            this.updateRequired = true;
        }
    }
    /**
     * If defined as a function, provides an external method for adjusting the current page hash used by these tabs
     * TODO: how to handle call back function?
     */
    set hashChangeCallback(hashChangeCallback) {
        this._tabsOptions.hashChangeCallback = hashChangeCallback;
        if (this.jQueryElement) {
            this.tabs.settings.hashChangeCallback = hashChangeCallback;
            this.updateRequired = true;
        }
    }
    /**
     * If true, when using full URLs in tab HREFs, or when using Ajax calls, tabs will be loaded as needed instead of the markup
     * all being established at once.
     */
    set lazyLoad(lazyLoad) {
        this._tabsOptions.lazyLoad = lazyLoad;
        if (this.jQueryElement) {
            this.tabs.settings.lazyLoad = lazyLoad;
            this.updateRequired = true;
        }
    }
    /**
     * If true, will display a tooltip or Module Tabs with cut-off text content.
     */
    set moduleTabsTooltips(moduleTabsTooltips) {
        this._tabsOptions.moduleTabsTooltips = moduleTabsTooltips;
        if (this.jQueryElement) {
            this.tabs.settings.moduleTabsTooltips = moduleTabsTooltips;
            this.updateRequired = true;
        }
    }
    /**
     * If true, will display a tooltip on Multi Tabs with cut-off text content.
     */
    set multiTabsTooltips(multiTabsTooltips) {
        this._tabsOptions.multiTabsTooltips = multiTabsTooltips;
        if (this.jQueryElement) {
            this.tabs.settings.multiTabsTooltips = multiTabsTooltips;
            this.updateRequired = true;
        }
    }
    /**
     * If defined, it will display the position of counts.
     */
    set countsPosition(countsPosition) {
        this._tabsOptions.countsPosition = countsPosition;
        if (this.jQueryElement) {
            this.tabs.settings.countsPosition = countsPosition;
            this.updateRequired = true;
        }
    }
    /**
     * If defined, will serve as a way of pulling in external content to fill tabs.
     */
    set source(source) {
        this._tabsOptions.source = source;
        if (this.jQueryElement) {
            this.tabs.settings.source = source;
            this.updateRequired = true;
        }
    }
    /**
     * If a source method is defined, this flexible object can be passed into the source method, and augmented with
     * parameters specific to the implementation.
     */
    set sourceArguments(sourceArguments) {
        this._tabsOptions.sourceArguments = sourceArguments;
        if (this.jQueryElement) {
            this.tabs.settings.sourceArguments = sourceArguments;
            this.updateRequired = true;
        }
    }
    /**
     * set to true to allow tab count markup <span class=tabcount>#</span>.
     *
     */
    set tabCounts(tabCounts) {
        this._tabsOptions.tabCounts = tabCounts;
        if (this.jQueryElement) {
            this.tabs.settings.tabCounts = tabCounts;
            this.updateRequired = true;
        }
    }
    /**
     * If Vertical Tabs & true, will automatically switch to Horizontal Tabs on smaller breakpoints.
     *
     */
    set verticalResponsive(verticalResponsive) {
        this._tabsOptions.verticalResponsive = verticalResponsive;
        if (this.jQueryElement) {
            this.tabs.settings.verticalResponsive = verticalResponsive;
            this.updateRequired = true;
        }
    }
    /** Add extra attributes like id's to the component **/
    set attributes(attributes) {
        this._tabsOptions.attributes = attributes;
        if (this.jQueryElement) {
            this.tabs.settings.attributes = attributes;
            this.updateRequired = true;
        }
    }
    /** Sets the tabs to be sortable by drag and drop. **/
    set sortable(sortable) {
        this._tabsOptions.sortable = sortable;
        if (this.jQueryElement) {
            this.tabs.settings.sortable = sortable;
            this.updateRequired = true;
        }
    }
    /**
     * Constructor.
     *
     * @param elementRef - the element matching the component's selector.
     */
    constructor(_changeDetectorRef, element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        // ------------------------------------------------------------------------
        // @Inputs
        // ------------------------------------------------------------------------
        /**
         * set to true to show a secondary style for the tabs
         *
         */
        this.alternate = false;
        /**
         * set to true to display the tabs vertically to the left of the tab-panel
         *
         */
        this.vertical = false;
        /**
         * set to true to display the tabs as module tabs
         *
         */
        this.moduleTabs = false;
        /**
         * set to true to display the tabs as header tabs
         *
         */
        this.headerTabs = false;
        /**
         * if you would like to run the updated() function yourself instead of having
         * this tabs component check for you set this input to true. The advantage to
         * this is that if you know when to update you can be more efficient.
         */
        this.disableAutoUpdatedCall = false;
        // ------------------------------------------------------------------------
        // @Outputs
        // ------------------------------------------------------------------------
        /**
         * The beforeactivated event is fired whenever a tab is selected giving the event handler a chance
         * to "veto" the tab selection change.
         *
         */
        this.beforeActivated = new EventEmitter();
        /**
         * The beforeactivate event is deprecated in favor of `beforeactivated`.
         *
         * @deprecated
         */
        this.beforeActivate = new DeprecatedEventEmitter('beforeactivate', 'beforeactivated');
        /**
         * The activated event is fired whenever a tab is selected (or "activated");
         */
        this.activated = new EventEmitter();
        /**
         * The afteractivate event is fired after the has been activated.
         */
        this.afterActivated = new EventEmitter();
        /**
         * fired before a tab closes
         */
        this.beforeClose = new EventEmitter();
        /**
         * fired when a tab closes
         *
         * @todo replace override of native element
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.close = new EventEmitter();
        /**
         * fired after a tab closes
         */
        this.afterClose = new EventEmitter();
        /**
         * fire when a new tab is added.
         *
         */
        this.tabAdded = new EventEmitter();
        // An internal tabsOptions object that gets updated by using
        // the component's Inputs()
        this._tabsOptions = {};
        /**
         * set to true when @input changes. This will cause the tabs.updated call
         * in the afterViewChecked. This technique has the advantage of only calling
         * updated once in the current angular cycle no matter how many inputs are
         * changed during that cycle.
         */
        this.updateRequired = false;
        // Adding the class this way to ensure that it is applied before the AfterViewInit.
        // Avoiding @HostBinding for this since an *ngIf causes bindings to be processed
        // after the AfterViewInit
        element.nativeElement.classList.add('tab-container');
    }
    ngAfterViewInit() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            // assign element to local variable
            this.jQueryElement = jQuery(this.element.nativeElement);
            // bind to jquery events and emit as angular events
            this.jQueryElement.on('beforeactivated', (event, tab) => this.onBeforeActivated(event, tab));
            this.jQueryElement.on('activated', (event, tab) => this.onActivated(event, tab));
            this.jQueryElement.on('afteractivated', (event, tab) => this.onAfterActivated(event, tab));
            this.jQueryElement.on('beforeclose', (event, tab) => this.onBeforeClose(event, tab));
            this.jQueryElement.on('close', (event, tab) => this.onClose(event, tab));
            this.jQueryElement.on('afterclose', (event, tab) => this.onAfterClose(event, tab));
            this.jQueryElement.on('tab-added', (event, tab) => this.onTabAdded(event, tab));
            // initialize the tabs plugin
            this.jQueryElement.tabs(this._tabsOptions);
            this.tabs = this.jQueryElement.data('tabs');
            this.updateTabInfo();
        });
    }
    ngAfterViewChecked() {
        if (!this.tabs || !this.jQueryElement) {
            return;
        }
        if (this.updateRequired) {
            // call outside the angular zone so change detection isn't triggered by the soho component.
            this.ngZone.runOutsideAngular(() => this.tabs?.updated());
            this.updateRequired = false;
        }
        if (this.disableAutoUpdatedCall) {
            return;
        }
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            const $liList = this.getTabLiList();
            const $activateTab = this.getActivatedTab();
            if (!$liList) {
                return;
            }
            const tabTitles = this.getTabTitles($liList);
            if (!tabTitles) {
                return;
            }
            const tabIds = this.getTabIds();
            if (!tabIds) {
                return;
            }
            if (this.tabCount !== $liList.length) {
                /* Must rebuild the tab control if the tab count changes */
                this.tabs?.updated();
                this.tabCount = $liList.length;
                this.tabTitles = this.getTabTitles($liList);
                this.tabIds = tabIds;
                this.activateTab($activateTab);
                return;
            }
            for (let i = 0; i < tabIds.length; i++) {
                if (this.tabIds && tabIds[i] !== this.tabIds[i]) {
                    this.tabs?.updated();
                    this.tabIds = tabIds;
                    this.tabTitles = this.getTabTitles($liList);
                    this.activateTab($activateTab);
                    return;
                }
            }
            /*
             * if only tab titles change then call handleResize.
             * It will update the tabs selection style and the overflow
             */
            for (let j = 0; j < tabTitles.length; j++) {
                if (this.tabTitles && tabTitles[j] !== this.tabTitles[j]) {
                    this.tabs?.handleResize();
                    this.tabTitles = tabTitles;
                    return;
                }
            }
        });
    }
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.tabs) {
                this.tabs.destroy();
                this.tabs = null;
            }
        });
    }
    updateTabInfo() {
        if (this.disableAutoUpdatedCall) {
            return;
        }
        /**
         * Used to auto update the control when projected content changes. Use wisely
         * as this can be slower than normal.
         */
        this.ngZone.runOutsideAngular(() => {
            const $liList = this.getTabLiList();
            this.tabCount = $liList.length;
            this.tabTitles = this.getTabTitles($liList);
            this.tabIds = this.getTabIds();
        });
    }
    getTabLiList() {
        // call outside the angular zone since angular doesn't need to know about this.
        return this.ngZone.runOutsideAngular(() => this.jQueryElement?.find('.tab-list').find('li'));
    }
    getActivatedTab() {
        // get the current selected tab outside of the angular zone
        return this.ngZone.runOutsideAngular(() => this.jQueryElement?.siblings('.tab-panel-container').find('.tab-panel.is-visible'));
    }
    getTabIds() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        return this.ngZone.runOutsideAngular(() => {
            const anchorList = this.jQueryElement?.find('.tab-list').find('a').toArray();
            return anchorList.map((anchor) => anchor.getAttribute('href').substring(1));
        });
    }
    getTabTitles($liList) {
        // call outside the angular zone
        return this.ngZone.runOutsideAngular(() => {
            if (!$liList) {
                $liList = this.getTabLiList();
            }
            const tabTitles = [];
            const $anchorList = $liList?.find('a');
            // eslint-disable-next-line @typescript-eslint/prefer-for-of
            for (let i = 0; i < $anchorList.length; i++) {
                tabTitles.push($($anchorList[i]).html());
            }
            return tabTitles;
        });
    }
    /**
     * Causes the tabs component view to be rebuilt
     */
    updated() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => this.tabs?.updated());
    }
    /**
     * @param tab The tab element in the list that needs to be activated
     * @returns
     */
    activateTab(tab) {
        return this.ngZone.runOutsideAngular(() => {
            if (!tab) {
                return;
            }
            const tabHref = `#${tab?.attr('id')}`;
            this.tabs?.activate(tabHref);
        });
    }
    /**
     * Call resize manually when tab titles change so that the underline width matches.
     */
    handleResize(doResponsiveCheck) {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => this.tabs?.handleResize(doResponsiveCheck));
    }
    /**
     * Manually call updated and refresh out of the zone.
     */
    refresh() {
        this.ngZone.runOutsideAngular(() => {
            setTimeout(() => {
                this.tabs?.updated();
            }, 1);
        });
    }
    /**
     * Adds a new tab into the tab component
     *
     * @param tabId The tabId of the tab to be added
     * @param options ?
     * @param atIndex The index location where the tab is to be added.
     */
    add(tabId, options, atIndex) {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => this.tabs?.add(tabId, options, atIndex));
    }
    /**
     * Removes a tab
     *
     * @param tabId The tabId of the tab to be removed.
     * @param disableBeforeClose If true, the beforeClose callback should be called
     * before removing the tab.
     */
    remove(tabId, disableBeforeClose) {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => this.tabs?.remove(tabId, disableBeforeClose));
    }
    /**
     * Hides a tab for the given tabId
     *
     * @param tabId The id of the tab to hide
     */
    hide(tabId) {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => this.tabs?.hide(tabId));
    }
    show(tabId) {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => this.tabs?.show(tabId));
    }
    disableTab(tabId) {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => this.tabs?.disableTab(tabId));
    }
    enableTab(tabId) {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => this.tabs?.enableTab(tabId));
    }
    rename(tabId, name) {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => this.tabs?.rename(tabId, name));
    }
    /**
     * Gets a tab given either an event or a tabId
     *
     * @param event And event from a tab that will allow tab retrieval
     * @param tabId The tabId of the tab to be retrieved.
     */
    getTab(event, tabId) {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        // TODO: getTab seems to return a jQuery object, what to return instead?
        return this.ngZone.runOutsideAngular(() => this.tabs?.getTab(event, tabId));
    }
    /**
     * Return the currenlty active/selected tab.
     *
     * @return  A JQuery object of the active tab element.
     */
    getActiveTab() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        // TODO: getActiveTab seems to return a jQuery object, what to return instead?
        return this.ngZone.runOutsideAngular(() => this.tabs.getActiveTab());
    }
    /**
     * Returns the visible tabs
     *
     * @return  An array of JQuery objects of the visible tab elements
     */
    getVisibleTabs() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        // TODO: getVisibleTabs seems to return a jQuery array, what to return instead?
        return this.ngZone.runOutsideAngular(() => this.tabs.getVisibleTabs());
    }
    /**
     * Returns the overflow tabs
     *
     * @return  An array of JQuery objects of the overflow tab elements
     */
    getOverflowTabs() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        // TODO: getVisibleTabs seems to return a jQuery array, what to return instead?
        return this.ngZone.runOutsideAngular(() => this.tabs.getOverflowTabs());
    }
    /**
     * Selects the tab given an href
     *
     * @param href an href used to find the tab to select
     */
    select(href) {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => this.tabs.select(href));
    }
    /**
     * Disables the entire tab component
     */
    disable() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => this.tabs.disable());
    }
    /**
     * enables the entire tab component
     */
    enable() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => this.tabs.enable());
    }
    onBeforeActivated(event, tab) {
        // ensure we are back in the angular zone
        this.ngZone.run(() => {
            event.tab = tab[0];
            this.beforeActivated.emit(event);
        });
    }
    onActivated(event, tab) {
        // ensure we are back in the angular zone
        this.ngZone.run(() => {
            event.tab = tab[0];
            this.activated.emit(event);
        });
    }
    onAfterActivated(event, tab) {
        // ensure we are back in the angular zone
        this.ngZone.run(() => {
            event.tab = tab[0];
            this.afterActivated.emit(event);
        });
    }
    onBeforeClose(event, tab) {
        // ensure we are back in the angular zone
        this.ngZone.run(() => {
            event.tab = tab[0];
            this.beforeClose.emit(event);
            if (this.beforeCloseCallback) {
                return this.beforeCloseCallback(event, tab);
            }
        });
    }
    onClose(event, tab) {
        // ensure we are back in the angular zone
        this.ngZone.run(() => {
            event.tab = tab[0];
            this.close.emit(event);
        });
    }
    onAfterClose(event, tab) {
        // ensure we are back in the angular zone
        this.ngZone.run(() => {
            event.tab = tab[0];
            this.afterClose.emit(event);
        });
    }
    onTabAdded(event, tab) {
        // ensure we are back in the angular zone
        this.ngZone.run(() => {
            event.tab = tab[0];
            this.tabAdded.emit(event);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabsComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoTabsComponent, selector: "div[soho-tabs]", inputs: { alternate: "alternate", vertical: "vertical", moduleTabs: "moduleTabs", headerTabs: "headerTabs", beforeCloseCallback: "beforeCloseCallback", tabsOptions: "tabsOptions", addTabButton: "addTabButton", addTabButtonCallback: "addTabButtonCallback", appMenuTrigger: "appMenuTrigger", appMenuTriggerText: "appMenuTriggerText", appMenuTriggerTextAudible: "appMenuTriggerTextAudible", ajaxOptions: "ajaxOptions", containerElement: "containerElement", changeTabOnHashChange: "changeTabOnHashChange", hashChangeCallback: "hashChangeCallback", lazyLoad: "lazyLoad", moduleTabsTooltips: "moduleTabsTooltips", multiTabsTooltips: "multiTabsTooltips", countsPosition: "countsPosition", source: "source", sourceArguments: "sourceArguments", tabCounts: "tabCounts", verticalResponsive: "verticalResponsive", attributes: "attributes", sortable: "sortable", disableAutoUpdatedCall: "disableAutoUpdatedCall" }, outputs: { beforeActivated: "beforeActivated", beforeActivate: "beforeActivate", activated: "activated", afterActivated: "afterActivated", beforeClose: "beforeClose", close: "close", afterClose: "afterClose", tabAdded: "tabAdded" }, host: { properties: { "class.vertical": "this.isVertical", "class.module-tabs": "this.isModuleTabs", "class.header-tabs": "this.isHeaderTabs", "class.alternate": "this.isAlternate" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTabsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'div[soho-tabs]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isVertical: [{
                type: HostBinding,
                args: ['class.vertical']
            }], isModuleTabs: [{
                type: HostBinding,
                args: ['class.module-tabs']
            }], isHeaderTabs: [{
                type: HostBinding,
                args: ['class.header-tabs']
            }], isAlternate: [{
                type: HostBinding,
                args: ['class.alternate']
            }], alternate: [{
                type: Input
            }], vertical: [{
                type: Input
            }], moduleTabs: [{
                type: Input
            }], headerTabs: [{
                type: Input
            }], beforeCloseCallback: [{
                type: Input
            }], tabsOptions: [{
                type: Input
            }], addTabButton: [{
                type: Input
            }], addTabButtonCallback: [{
                type: Input
            }], appMenuTrigger: [{
                type: Input
            }], appMenuTriggerText: [{
                type: Input
            }], appMenuTriggerTextAudible: [{
                type: Input
            }], ajaxOptions: [{
                type: Input
            }], containerElement: [{
                type: Input
            }], changeTabOnHashChange: [{
                type: Input
            }], hashChangeCallback: [{
                type: Input
            }], lazyLoad: [{
                type: Input
            }], moduleTabsTooltips: [{
                type: Input
            }], multiTabsTooltips: [{
                type: Input
            }], countsPosition: [{
                type: Input
            }], source: [{
                type: Input
            }], sourceArguments: [{
                type: Input
            }], tabCounts: [{
                type: Input
            }], verticalResponsive: [{
                type: Input
            }], attributes: [{
                type: Input
            }], sortable: [{
                type: Input
            }], disableAutoUpdatedCall: [{
                type: Input
            }], beforeActivated: [{
                type: Output
            }], beforeActivate: [{
                type: Output
            }], activated: [{
                type: Output
            }], afterActivated: [{
                type: Output
            }], beforeClose: [{
                type: Output
            }], close: [{
                type: Output
            }], afterClose: [{
                type: Output
            }], tabAdded: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
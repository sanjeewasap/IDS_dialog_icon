import { Attribute, Directive, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the SoHo Input Validate Directive.
 *
 * This component searches for an element with the attribute
 * 'data-validate' or 'data-validate-on="submit"'.
 */
export class SohoInputValidateDirective {
    constructor(el, dataValidateAttr, // eslint-disable-line
    ngZone) {
        this.el = el;
        this.ngZone = ngZone;
        /**
         * @todo replace override of native attribute
         */
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.error = new EventEmitter();
        this.alert = new EventEmitter();
        /**
         * @todo replace override of native attribute
         */
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.success = new EventEmitter();
        this.icon = new EventEmitter();
        this.info = new EventEmitter();
        this.valid = new EventEmitter();
        this.dataValidate = dataValidateAttr;
    }
    /**
     * After the control has been initialised and the view is ready,
     * get the SoHoXi controls to activate any validations.
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.el.nativeElement);
            this.jQueryElement.validate();
            // Initialise any event handlers.
            this.jQueryElement.on('error', (event, validation) => this.ngZone.run(() => {
                event.validation = { field: validation.field[0], message: validation.message };
                this.error.emit(event);
            }));
            this.jQueryElement.on('alert', (event, validation) => this.ngZone.run(() => {
                event.validation = { field: validation.field[0], message: validation.message };
                this.alert.emit(event);
            }));
            this.jQueryElement.on('success', (event, validation) => this.ngZone.run(() => {
                event.validation = { field: validation.field[0], message: validation.message };
                this.success.emit(event);
            }));
            this.jQueryElement.on('icon', (event, validation) => this.ngZone.run(() => {
                event.validation = { field: validation.field[0], message: validation.message };
                this.icon.emit(event);
            }));
            this.jQueryElement.on('info', (event, validation) => this.ngZone.run(() => {
                event.validation = { field: validation.field[0], message: validation.message };
                this.info.emit(event);
            }));
            this.jQueryElement.on('valid', (event, validation) => this.ngZone.run(() => {
                event.validation = { field: validation.field[0], message: validation.message };
                this.valid.emit(event);
            }));
            this.validator = this.jQueryElement.data('validate');
        });
    }
    ngOnDestroy() {
        // Necessary clean up step (add additional here)
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                // clean up attached events.
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            this.validator.destroy();
            this.validator = undefined;
            this.el.nativeElement = undefined;
        });
    }
    /**
     * Remove the message from the field if there is one and mark the field valid
     */
    removeMessage(type) {
        this.ngZone.runOutsideAngular(() => {
            this.validator?.removeMessage(this.jQueryElement, type);
        });
    }
    /**
     * Trigger validation of the field
     */
    validate(event) {
        this.ngZone.runOutsideAngular(() => {
            this.validator?.validate(this.jQueryElement, false, event);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoInputValidateDirective, deps: [{ token: i0.ElementRef }, { token: 'data-validate', attribute: true }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: SohoInputValidateDirective, selector: "form[soho-input-validate], input[soho-input-validate], input[data-validate], input[data-validate-on=\"submit\"], textarea[data-validate], select[data-validate]", inputs: { dataValidate: ["data-validate", "dataValidate"] }, outputs: { error: "error", alert: "alert", success: "success", icon: "icon", info: "info", valid: "valid" }, host: { properties: { "attr.data-validate": "this.dataValidate" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoInputValidateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'form[soho-input-validate], input[soho-input-validate], input[data-validate], input[data-validate-on="submit"], textarea[data-validate], select[data-validate]' // eslint-disable-line
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['data-validate']
                }] }, { type: i0.NgZone }]; }, propDecorators: { dataValidate: [{
                type: HostBinding,
                args: ['attr.data-validate']
            }, {
                type: Input,
                args: ['data-validate']
            }], error: [{
                type: Output
            }], alert: [{
                type: Output
            }], success: [{
                type: Output
            }], icon: [{
                type: Output
            }], info: [{
                type: Output
            }], valid: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
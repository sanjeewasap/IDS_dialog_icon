// tslint:disable-next-line:no-unused-variable
import { ChangeDetectionStrategy, Component } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the Soho Module Nav Settings element.
 * This Component attaches to an element annotated with the `soho-module-nav-settings` attribute,
 */
export class SohoModuleNavSettingsComponent {
    /** Constructor. */
    constructor(elementRef, ngZone) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        /** Stored settings */
        this._options = {
            displayMode: false,
        };
        /** Internal use flags */
        this._updateRequired = false;
    }
    // -------------------------------------------
    // Public API
    // -------------------------------------------
    accordionAPI() {
        return this.modulenavsettings?.accordionAPI;
    }
    accordionEl() {
        return this.modulenavsettings?.accordionEl;
    }
    menuAPI() {
        return this.modulenavsettings?.menuAPI;
    }
    init() {
        this.modulenavsettings?.init();
    }
    /** Triggers a UI Resync. */
    updated(val) {
        if (val) {
            this._options = jQuery.extend({}, this._options, val);
            if (this.modulenavsettings) {
                this.ngZone.runOutsideAngular(() => {
                    this.modulenavsettings?.updated(this._options);
                });
            }
        }
    }
    teardown() {
        this.modulenavsettings?.teardown();
    }
    // ------------------------------------------
    // Lifecycle Events
    // ------------------------------------------
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // Initialize/store instance
            this.jQueryElement = jQuery(this.elementRef.nativeElement);
            this.jQueryElement.modulenav(this._options);
            this.modulenavsettings = this.jQueryElement.data('modulenavsettings');
        });
    }
    ngAfterViewChecked() {
        if (this.modulenavsettings && this._updateRequired) {
            this.ngZone.runOutsideAngular(() => this.modulenavsettings?.updated(this._options));
            this._updateRequired = false;
        }
    }
    ngOnDestroy() {
        // call outside the angular zone so change detection
        // isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.modulenavsettings) {
                this.modulenavsettings.destroy();
                this.modulenavsettings = null;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoModuleNavSettingsComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoModuleNavSettingsComponent, selector: "soho-module-nav-settings, [soho-module-nav-settings]", ngImport: i0, template: "<ng-content></ng-content>\n", styles: ["soho-module-nav-settings{display:contents}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoModuleNavSettingsComponent, decorators: [{
            type: Component,
            args: [{ selector: 'soho-module-nav-settings, [soho-module-nav-settings]', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-content></ng-content>\n", styles: ["soho-module-nav-settings{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby1tb2R1bGUtbmF2LXNldHRpbmdzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lkcy1lbnRlcnByaXNlLW5nL3NyYy9saWIvbW9kdWxlLW5hdi1zZXR0aW5ncy9zb2hvLW1vZHVsZS1uYXYtc2V0dGluZ3MuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWRzLWVudGVycHJpc2Utbmcvc3JjL2xpYi9tb2R1bGUtbmF2LXNldHRpbmdzL3NvaG8tbW9kdWxlLW5hdi1zZXR0aW5ncy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4Q0FBOEM7QUFDOUMsT0FBTyxFQUdMLHVCQUF1QixFQUN2QixTQUFTLEVBSVYsTUFBTSxlQUFlLENBQUM7O0FBRXZCOzs7R0FHRztBQU9ILE1BQU0sT0FBTyw4QkFBOEI7SUFnQnpDLG1CQUFtQjtJQUNuQixZQUNVLFVBQXNCLEVBQ3RCLE1BQWM7UUFEZCxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFYeEIsc0JBQXNCO1FBQ2QsYUFBUSxHQUFpQztZQUMvQyxXQUFXLEVBQUUsS0FBSztTQUNuQixDQUFDO1FBRUYseUJBQXlCO1FBQ2pCLG9CQUFlLEdBQVksS0FBSyxDQUFDO0lBTXJDLENBQUM7SUFFTCw4Q0FBOEM7SUFDOUMsYUFBYTtJQUNiLDhDQUE4QztJQUV2QyxZQUFZO1FBQ2pCLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixFQUFFLFlBQVksQ0FBQztJQUM5QyxDQUFDO0lBRU0sV0FBVztRQUNoQixPQUFPLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxXQUFXLENBQUM7SUFDN0MsQ0FBQztJQUVNLE9BQU87UUFDWixPQUFPLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxPQUFPLENBQUM7SUFDekMsQ0FBQztJQUVNLElBQUk7UUFDVCxJQUFJLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUVELDRCQUE0QjtJQUNyQixPQUFPLENBQUMsR0FBa0M7UUFDL0MsSUFBSSxHQUFHLEVBQUU7WUFDUCxJQUFJLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDdEQsSUFBSSxJQUFJLENBQUMsaUJBQWlCLEVBQUU7Z0JBQzFCLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO29CQUNqQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDakQsQ0FBQyxDQUFDLENBQUM7YUFDSjtTQUNGO0lBQ0gsQ0FBQztJQUVNLFFBQVE7UUFDYixJQUFJLENBQUMsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLENBQUM7SUFDckMsQ0FBQztJQUVELDZDQUE2QztJQUM3QyxtQkFBbUI7SUFDbkIsNkNBQTZDO0lBRTdDLGVBQWU7UUFDYixJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNqQyw0QkFBNEI7WUFDNUIsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUMzRCxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDNUMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDeEUsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLElBQUksSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDbEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQ3BGLElBQUksQ0FBQyxlQUFlLEdBQUcsS0FBSyxDQUFDO1NBQzlCO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxvREFBb0Q7UUFDcEQseUNBQXlDO1FBQ3pDLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2pDLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FBQztnQkFDekIsSUFBSSxDQUFDLGFBQWEsR0FBRyxTQUFTLENBQUM7YUFDaEM7WUFDRCxJQUFJLElBQUksQ0FBQyxpQkFBaUIsRUFBRTtnQkFDMUIsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUNqQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsSUFBSSxDQUFDO2FBQy9CO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzhHQTNGVSw4QkFBOEI7a0dBQTlCLDhCQUE4Qiw0RkNyQjNDLDZCQUNBOzsyRkRvQmEsOEJBQThCO2tCQU4xQyxTQUFTOytCQUNFLHNEQUFzRCxtQkFHL0MsdUJBQXVCLENBQUMsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbIi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby11bnVzZWQtdmFyaWFibGVcbmltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIEFmdGVyVmlld0NoZWNrZWQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIE5nWm9uZSxcbiAgT25EZXN0cm95XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIEFuZ3VsYXIgV3JhcHBlciBmb3IgdGhlIFNvaG8gTW9kdWxlIE5hdiBTZXR0aW5ncyBlbGVtZW50LlxuICogVGhpcyBDb21wb25lbnQgYXR0YWNoZXMgdG8gYW4gZWxlbWVudCBhbm5vdGF0ZWQgd2l0aCB0aGUgYHNvaG8tbW9kdWxlLW5hdi1zZXR0aW5nc2AgYXR0cmlidXRlLFxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzb2hvLW1vZHVsZS1uYXYtc2V0dGluZ3MsIFtzb2hvLW1vZHVsZS1uYXYtc2V0dGluZ3NdJyxcbiAgc3R5bGVVcmxzOiBbJy4vc29oby1tb2R1bGUtbmF2LXNldHRpbmdzLmNvbXBvbmVudC5jc3MnXSxcbiAgdGVtcGxhdGVVcmw6ICdzb2hvLW1vZHVsZS1uYXYtc2V0dGluZ3MuY29tcG9uZW50Lmh0bWwnLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaFxufSlcbmV4cG9ydCBjbGFzcyBTb2hvTW9kdWxlTmF2U2V0dGluZ3NDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBBZnRlclZpZXdDaGVja2VkLCBPbkRlc3Ryb3kge1xuXG4gIC8qKiBSZWZlcmVuY2UgdG8gdGhlIGpRdWVyeSBlbGVtZW50LiAqL1xuICBwcml2YXRlIGpRdWVyeUVsZW1lbnQ/OiBKUXVlcnk7XG5cbiAgLyoqIFJlZmVyZW5jZSB0byB0aGUgYW5ub3RhdGVkIFNvSG9YaSBjb250cm9sICovXG4gIHByaXZhdGUgbW9kdWxlbmF2c2V0dGluZ3M/OiBTb2hvTW9kdWxlTmF2U2V0dGluZ3NTdGF0aWMgfCBudWxsO1xuXG4gIC8qKiBTdG9yZWQgc2V0dGluZ3MgKi9cbiAgcHJpdmF0ZSBfb3B0aW9uczogU29ob01vZHVsZU5hdlNldHRpbmdzT3B0aW9ucyA9IHtcbiAgICBkaXNwbGF5TW9kZTogZmFsc2UsXG4gIH07XG5cbiAgLyoqIEludGVybmFsIHVzZSBmbGFncyAqL1xuICBwcml2YXRlIF91cGRhdGVSZXF1aXJlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gIC8qKiBDb25zdHJ1Y3Rvci4gKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXG4gICkgeyB9XG5cbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBQdWJsaWMgQVBJXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBwdWJsaWMgYWNjb3JkaW9uQVBJKCk6IFNvaG9BY2NvcmRpb25TdGF0aWMgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLm1vZHVsZW5hdnNldHRpbmdzPy5hY2NvcmRpb25BUEk7XG4gIH1cblxuICBwdWJsaWMgYWNjb3JkaW9uRWwoKTogSFRNTEVsZW1lbnQgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLm1vZHVsZW5hdnNldHRpbmdzPy5hY2NvcmRpb25FbDtcbiAgfVxuXG4gIHB1YmxpYyBtZW51QVBJKCk6IFNvaG9Qb3B1cE1lbnVTdGF0aWMgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLm1vZHVsZW5hdnNldHRpbmdzPy5tZW51QVBJO1xuICB9XG5cbiAgcHVibGljIGluaXQoKSB7XG4gICAgdGhpcy5tb2R1bGVuYXZzZXR0aW5ncz8uaW5pdCgpO1xuICB9XG5cbiAgLyoqIFRyaWdnZXJzIGEgVUkgUmVzeW5jLiAqL1xuICBwdWJsaWMgdXBkYXRlZCh2YWw/OiBTb2hvTW9kdWxlTmF2U2V0dGluZ3NPcHRpb25zKSB7XG4gICAgaWYgKHZhbCkge1xuICAgICAgdGhpcy5fb3B0aW9ucyA9IGpRdWVyeS5leHRlbmQoe30sIHRoaXMuX29wdGlvbnMsIHZhbCk7XG4gICAgICBpZiAodGhpcy5tb2R1bGVuYXZzZXR0aW5ncykge1xuICAgICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgICAgdGhpcy5tb2R1bGVuYXZzZXR0aW5ncz8udXBkYXRlZCh0aGlzLl9vcHRpb25zKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHRlYXJkb3duKCkge1xuICAgIHRoaXMubW9kdWxlbmF2c2V0dGluZ3M/LnRlYXJkb3duKCk7XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gTGlmZWN5Y2xlIEV2ZW50c1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgLy8gSW5pdGlhbGl6ZS9zdG9yZSBpbnN0YW5jZVxuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50ID0galF1ZXJ5KHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50KTtcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5tb2R1bGVuYXYodGhpcy5fb3B0aW9ucyk7XG4gICAgICB0aGlzLm1vZHVsZW5hdnNldHRpbmdzID0gdGhpcy5qUXVlcnlFbGVtZW50LmRhdGEoJ21vZHVsZW5hdnNldHRpbmdzJyk7XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0NoZWNrZWQoKSB7XG4gICAgaWYgKHRoaXMubW9kdWxlbmF2c2V0dGluZ3MgJiYgdGhpcy5fdXBkYXRlUmVxdWlyZWQpIHtcbiAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMubW9kdWxlbmF2c2V0dGluZ3M/LnVwZGF0ZWQodGhpcy5fb3B0aW9ucykpO1xuICAgICAgdGhpcy5fdXBkYXRlUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICAvLyBjYWxsIG91dHNpZGUgdGhlIGFuZ3VsYXIgem9uZSBzbyBjaGFuZ2UgZGV0ZWN0aW9uXG4gICAgLy8gaXNuJ3QgdHJpZ2dlcmVkIGJ5IHRoZSBzb2hvIGNvbXBvbmVudC5cbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBpZiAodGhpcy5qUXVlcnlFbGVtZW50KSB7XG4gICAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5vZmYoKTtcbiAgICAgICAgdGhpcy5qUXVlcnlFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMubW9kdWxlbmF2c2V0dGluZ3MpIHtcbiAgICAgICAgdGhpcy5tb2R1bGVuYXZzZXR0aW5ncy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMubW9kdWxlbmF2c2V0dGluZ3MgPSBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG4iLCI8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4iXX0=
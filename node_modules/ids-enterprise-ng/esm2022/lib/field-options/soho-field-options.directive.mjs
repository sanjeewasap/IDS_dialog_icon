import { Directive, HostBinding, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoFieldOptionsDirective {
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        this.allFieldOptions = true;
        this._options = {};
    }
    ngAfterViewInit() {
        // -----------------------------------------------------------------------
        // Must run outside angular so that timeouts in the soho code won't cause
        // a ViewCheck in angular. Not running outside angular results in
        // unnecessary cycles causing the app to lock up (when lots of field-option
        // objects are used) until all the timeouts have resolved.
        // -----------------------------------------------------------------------
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.fieldoptions(this._options);
            this.fieldOptions = this.jQueryElement.data('field-options');
        });
    }
    /** Destructor. */
    ngOnDestroy() {
        if (this.fieldOptions) {
            this.ngZone.runOutsideAngular(() => {
                this.fieldOptions?.destroy();
                this.fieldOptions = null;
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoFieldOptionsDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: SohoFieldOptionsDirective, selector: "[soho-field-options]", host: { properties: { "class.field-options": "this.allFieldOptions" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoFieldOptionsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[soho-field-options]' // eslint-disable-line
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { allFieldOptions: [{
                type: HostBinding,
                args: ['class.field-options']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby1maWVsZC1vcHRpb25zLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lkcy1lbnRlcnByaXNlLW5nL3NyYy9saWIvZmllbGQtb3B0aW9ucy9zb2hvLWZpZWxkLW9wdGlvbnMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxTQUFTLEVBRVQsV0FBVyxHQUdaLE1BQU0sZUFBZSxDQUFDOztBQUt2QixNQUFNLE9BQU8seUJBQXlCO0lBYXBDLFlBQ1UsT0FBbUIsRUFDbkIsTUFBYztRQURkLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFDbkIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQVZ4QixvQkFBZSxHQUFHLElBQUksQ0FBQztRQVlyQixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsZUFBZTtRQUNiLDBFQUEwRTtRQUMxRSx5RUFBeUU7UUFDekUsaUVBQWlFO1FBQ2pFLDJFQUEyRTtRQUMzRSwwREFBMEQ7UUFDMUQsMEVBQTBFO1FBQzFFLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2pDLElBQUksQ0FBQyxhQUFhLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7WUFDeEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQy9DLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDL0QsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsa0JBQWtCO0lBQ2xCLFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2pDLElBQUksQ0FBQyxZQUFZLEVBQUUsT0FBTyxFQUFFLENBQUM7Z0JBQzdCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1lBQzNCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDOzhHQTFDVSx5QkFBeUI7a0dBQXpCLHlCQUF5Qjs7MkZBQXpCLHlCQUF5QjtrQkFIckMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsc0JBQXNCLENBQUMsc0JBQXNCO2lCQUN4RDtzSEFNQyxlQUFlO3NCQURkLFdBQVc7dUJBQUMscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBIb3N0QmluZGluZyxcbiAgT25EZXN0cm95LFxuICBOZ1pvbmUsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc29oby1maWVsZC1vcHRpb25zXScgLy8gZXNsaW50LWRpc2FibGUtbGluZVxufSlcbmV4cG9ydCBjbGFzcyBTb2hvRmllbGRPcHRpb25zRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcblxuICBwcml2YXRlIF9vcHRpb25zOiBTb2hvRmllbGRPcHRpb25zU2V0dGluZ3M7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5maWVsZC1vcHRpb25zJylcbiAgYWxsRmllbGRPcHRpb25zID0gdHJ1ZTtcblxuICAvKipcbiAgICogTG9jYWwgdmFyaWFibGVzXG4gICAqL1xuICBwcml2YXRlIGpRdWVyeUVsZW1lbnQ/OiBKUXVlcnk7XG4gIHByaXZhdGUgZmllbGRPcHRpb25zPzogU29ob0ZpZWxkT3B0aW9uc1N0YXRpYyB8IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXG4gICkge1xuICAgIHRoaXMuX29wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8vIE11c3QgcnVuIG91dHNpZGUgYW5ndWxhciBzbyB0aGF0IHRpbWVvdXRzIGluIHRoZSBzb2hvIGNvZGUgd29uJ3QgY2F1c2VcbiAgICAvLyBhIFZpZXdDaGVjayBpbiBhbmd1bGFyLiBOb3QgcnVubmluZyBvdXRzaWRlIGFuZ3VsYXIgcmVzdWx0cyBpblxuICAgIC8vIHVubmVjZXNzYXJ5IGN5Y2xlcyBjYXVzaW5nIHRoZSBhcHAgdG8gbG9jayB1cCAod2hlbiBsb3RzIG9mIGZpZWxkLW9wdGlvblxuICAgIC8vIG9iamVjdHMgYXJlIHVzZWQpIHVudGlsIGFsbCB0aGUgdGltZW91dHMgaGF2ZSByZXNvbHZlZC5cbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudCA9IGpRdWVyeSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCk7XG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQuZmllbGRvcHRpb25zKHRoaXMuX29wdGlvbnMpO1xuICAgICAgdGhpcy5maWVsZE9wdGlvbnMgPSB0aGlzLmpRdWVyeUVsZW1lbnQuZGF0YSgnZmllbGQtb3B0aW9ucycpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqIERlc3RydWN0b3IuICovXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLmZpZWxkT3B0aW9ucykge1xuICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgICB0aGlzLmZpZWxkT3B0aW9ucz8uZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmZpZWxkT3B0aW9ucyA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
import { Component, ChangeDetectionStrategy, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * needed in case you are using an *ngIf to display and remove the toolbar search field.
 * Otherwise sohoxi will create a wrapper and angular will not know how to handle the
 * element structure change.
 */
export class SohoToolbarSearchFieldWrapperComponent {
    get isSearchfieldWrapper() {
        return true;
    }
    get isToolbarSearchfieldWrapper() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarSearchFieldWrapperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoToolbarSearchFieldWrapperComponent, selector: "span[soho-toolbar-searchfield-wrapper]", host: { properties: { "class.searchfield-wrapper": "this.isSearchfieldWrapper", "class.toolbar-searchfield-wrapper": "this.isToolbarSearchfieldWrapper" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarSearchFieldWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'span[soho-toolbar-searchfield-wrapper]',
                    template: `<ng-content></ng-content>`
                }]
        }], propDecorators: { isSearchfieldWrapper: [{
                type: HostBinding,
                args: ['class.searchfield-wrapper']
            }], isToolbarSearchfieldWrapper: [{
                type: HostBinding,
                args: ['class.toolbar-searchfield-wrapper']
            }] } });
export class SohoToolbarSearchFieldComponent {
    /** Adds an X button for clearing the search value. */
    set clearable(value) {
        this.options.clearable = value;
        if (this.toolbarsearchfield) {
            this.toolbarsearchfield.settings.clearable = value;
            this.markForRefresh();
        }
    }
    /** Where it's collapsible or not */
    set collapsible(value) {
        this.options.collapsible = value;
        if (this.toolbarsearchfield) {
            this.toolbarsearchfield.settings.collapsible = value;
            this.markForRefresh();
        }
    }
    set collapsibleOnMobile(value) {
        this.options.collapsibleOnMobile = value;
        if (this.toolbarsearchfield) {
            this.toolbarsearchfield.settings.collapsibleOnMobile = value;
            this.markForRefresh();
        }
    }
    /** AutoComplete : Source Function/Data/Url/Array */
    set source(value) {
        this.options.source = value;
        if (this.toolbarsearchfield) {
            this.toolbarsearchfield.settings.source = value;
            this.markForRefresh();
        }
    }
    /** Template that can be passed */
    set template(value) {
        this.options.template = value;
        if (this.toolbarsearchfield) {
            this.toolbarsearchfield.settings.template = value;
            this.markForRefresh();
        }
    }
    get isSearchField() {
        return true;
    }
    constructor(changeDetector, element, ngZone) {
        this.changeDetector = changeDetector;
        this.element = element;
        this.ngZone = ngZone;
        /** Options. */
        this.options = {};
        // ------------------------------------------------------------
        this.selected = new EventEmitter();
        this.cleared = new EventEmitter();
        this.searchFieldChanged = false;
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.toolbarsearchfield(this.options);
            // Initialize title attribute as a soho tooltip
            if (this.jQueryElement.attr('title')) {
                this.jQueryElement.tooltip();
            }
            this.toolbarsearchfield = this.jQueryElement.data('toolbarsearchfield');
            /**
             * Bind to jQueryElement's events
             */
            this.jQueryElement.on('selected', (...args) => this.ngZone.run(() => this.selected.emit(args)));
            this.jQueryElement.on('cleared', (...args) => this.ngZone.run(() => this.cleared.emit(args)));
        });
    }
    ngAfterViewChecked() {
        if (this.searchFieldChanged) {
            this.ngZone.runOutsideAngular(() => this.toolbarsearchfield?.updated());
            this.searchFieldChanged = false;
        }
    }
    ngOnDestroy() {
        // Necessary clean up step (add additional here)
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                // clean up attached events.
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.toolbarsearchfield) {
                // destroy the soho component.
                this.toolbarsearchfield.destroy();
                this.toolbarsearchfield = undefined;
            }
        });
    }
    clear() {
        this.ngZone.runOutsideAngular(() => this.toolbarsearchfield?.clear());
    }
    markForRefresh() {
        this.searchFieldChanged = true;
        // ... make sure the change detector kicks in, otherwise if the inputs
        // were change programmatially the component may not be eligible for
        // updating.
        this.changeDetector.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarSearchFieldComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoToolbarSearchFieldComponent, selector: "input[soho-toolbar-searchfield]", inputs: { options: "options", clearable: "clearable", collapsible: "collapsible", collapsibleOnMobile: "collapsibleOnMobile", source: "source", template: "template" }, outputs: { selected: "selected", cleared: "cleared" }, host: { properties: { "class.searchfield": "this.isSearchField" } }, ngImport: i0, template: '<div #toolbarSearchField><ng-content></ng-content></div>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarSearchFieldComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[soho-toolbar-searchfield]',
                    template: '<div #toolbarSearchField><ng-content></ng-content></div>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { options: [{
                type: Input
            }], clearable: [{
                type: Input
            }], collapsible: [{
                type: Input
            }], collapsibleOnMobile: [{
                type: Input
            }], source: [{
                type: Input
            }], template: [{
                type: Input
            }], selected: [{
                type: Output
            }], cleared: [{
                type: Output
            }], isSearchField: [{
                type: HostBinding,
                args: ['class.searchfield']
            }] } });
/**
 * soho toolbar more button
 */
export class SohoToolbarMoreButtonComponent {
    constructor() {
        this.isPageChanger = false;
        this.isDisabled = false;
    }
    get isMoreButton() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarMoreButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoToolbarMoreButtonComponent, selector: "soho-toolbar-more-button", inputs: { isPageChanger: "isPageChanger", isDisabled: "isDisabled" }, host: { properties: { "class.more": "this.isMoreButton", "class.page-changer": "this.isPageChanger" } }, ngImport: i0, template: `
              <button class="btn-actions" type="button" [attr.disabled]="isDisabled ? 'disabled' : null">
                <svg class="icon" focusable="false" aria-hidden="true" role="presentation">
                  <use href="#icon-more"></use>
                </svg>
                <span class="audible" data-translate="text">More</span>
              </button>
              <!-- TODO: look into handling this through soho-button
              <button soho-button="actions" pageChanger="true" icon="more">
                <span class="audible" data-translate="text">More</span>
              </button>
              -->

              <ng-content></ng-content>
            `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarMoreButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'soho-toolbar-more-button',
                    template: `
              <button class="btn-actions" type="button" [attr.disabled]="isDisabled ? 'disabled' : null">
                <svg class="icon" focusable="false" aria-hidden="true" role="presentation">
                  <use href="#icon-more"></use>
                </svg>
                <span class="audible" data-translate="text">More</span>
              </button>
              <!-- TODO: look into handling this through soho-button
              <button soho-button="actions" pageChanger="true" icon="more">
                <span class="audible" data-translate="text">More</span>
              </button>
              -->

              <ng-content></ng-content>
            `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isMoreButton: [{
                type: HostBinding,
                args: ['class.more']
            }], isPageChanger: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.page-changer']
            }], isDisabled: [{
                type: Input
            }] } });
/**
 * soho toolbar page title.
 */
export class SohoPageTitleComponent {
    get isPageTitle() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPageTitleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoPageTitleComponent, selector: "span[soho-page-title]", host: { properties: { "class.page-title": "this.isPageTitle" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPageTitleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'span[soho-page-title]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isPageTitle: [{
                type: HostBinding,
                args: ['class.page-title']
            }] } });
/**
 * soho section title.
 */
export class SohoSectionTitleComponent {
    get isSectionTitle() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSectionTitleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoSectionTitleComponent, selector: "span[soho-section-title]", host: { properties: { "class.section-title": "this.isSectionTitle" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSectionTitleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'span[soho-section-title]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isSectionTitle: [{
                type: HostBinding,
                args: ['class.section-title']
            }] } });
/**
 * soho selection count.
 */
export class SohoSelectionCountComponent {
    get isTitle() {
        return true;
    }
    get isSelectionCount() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSelectionCountComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoSelectionCountComponent, selector: "div[soho-selection-count]", host: { properties: { "class.title": "this.isTitle", "class.selection-count": "this.isSelectionCount" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSelectionCountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'div[soho-selection-count]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isTitle: [{
                type: HostBinding,
                args: ['class.title']
            }], isSelectionCount: [{
                type: HostBinding,
                args: ['class.selection-count']
            }] } });
/**
 * Soho toolbar Navigation button
 */
export class SohoToolbarNavButtonComponent {
    // This HostBinding needs to go first to maintain correct styling
    get isIconButton() {
        return true;
    }
    get isAppMenuTrigger() {
        return true;
    }
    get typeAttr() {
        return 'button';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarNavButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoToolbarNavButtonComponent, selector: "button[soho-nav-button]", host: { properties: { "class.btn-icon": "this.isIconButton", "class.application-menu-trigger": "this.isAppMenuTrigger", "attr.type": "this.typeAttr" } }, ngImport: i0, template: `
        <svg class="icon" focusable="false" aria-hidden="true" role="presentation">
          <use href="#icon-menu"></use>
        </svg>
        <span class="audible">
        <ng-content></ng-content>
      </span>
            `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarNavButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'button[soho-nav-button]',
                    template: `
        <svg class="icon" focusable="false" aria-hidden="true" role="presentation">
          <use href="#icon-menu"></use>
        </svg>
        <span class="audible">
        <ng-content></ng-content>
      </span>
            `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isIconButton: [{
                type: HostBinding,
                args: ['class.btn-icon']
            }], isAppMenuTrigger: [{
                type: HostBinding,
                args: ['class.application-menu-trigger']
            }], typeAttr: [{
                type: HostBinding,
                args: ['attr.type']
            }] } });
/**
 * Soho toolbar title
 */
export class SohoToolbarTitleComponent {
    get isTitle() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarTitleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoToolbarTitleComponent, selector: "soho-toolbar-title", host: { properties: { "class.title": "this.isTitle" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, styles: [":host{display:inline-block}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarTitleComponent, decorators: [{
            type: Component,
            args: [{ selector: 'soho-toolbar-title', template: `<ng-content></ng-content>`, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{display:inline-block}\n"] }]
        }], propDecorators: { isTitle: [{
                type: HostBinding,
                args: ['class.title']
            }] } });
/**
 * Soho toolbar buttonset
 */
export class SohoToolbarButtonSetComponent {
    get isButtonSet() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarButtonSetComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoToolbarButtonSetComponent, selector: "soho-toolbar-button-set", host: { properties: { "class.buttonset": "this.isButtonSet" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, styles: [":host{display:inline-block}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarButtonSetComponent, decorators: [{
            type: Component,
            args: [{ selector: 'soho-toolbar-button-set', template: `<ng-content></ng-content>`, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{display:inline-block}\n"] }]
        }], propDecorators: { isButtonSet: [{
                type: HostBinding,
                args: ['class.buttonset']
            }] } });
/**
 * The main soho toolbar component
 */
export class SohoToolbarComponent {
    get isToolbar() {
        return true;
    }
    get showMoreButton() {
        return this.options.hasMoreButton;
    }
    get isBlock() {
        // custom elements don't have display: block set by default so set it here.
        // if display is expected to be overridden then use div[soho-toolbar] selector
        // instead. For example when a @media query wants to set something to display: none.
        return this.element.nativeElement.tagName === 'SOHO-TOOLBAR' ? 'block' : null;
    }
    /**
     * Set the has more button component option, this is used
     * to define if the more button is expected to exist in the toolbar logic.
     */
    set hasMoreButton(value) {
        this.options.hasMoreButton = value;
        if (this.toolbar) {
            this.toolbar.settings.hasMoreButton = value;
            this.markForRefresh();
        }
    }
    /**
     * Set the expected max visible buttons before overflow is forced.
     */
    set maxVisibleButtons(value) {
        this.options.maxVisibleButtons = value;
        if (this.toolbar) {
            this.toolbar.settings.maxVisibleButtons = value;
            this.markForRefresh();
        }
    }
    /**
     * Set the rightAligned hint. This is for toolbars with no title that should be forced to right align.
     */
    set rightAligned(value) {
        this.options.rightAligned = value;
        if (this.toolbar) {
            this.toolbar.settings.rightAligned = value;
            this.markForRefresh();
        }
    }
    /**
     * @deprecated Use the rightAligned option.
     */
    set rightAlign(value) {
        console.warn('This input has been renamed, please use the rightAligned input instead.');
        this.options.rightAligned = value;
        if (this.toolbar) {
            this.toolbar.settings.rightAligned = value;
            this.markForRefresh();
        }
    }
    /**
     * If true, uses Javascript to size the Title and Buttonset elements in a way that shows as much of the Title area as possible.
     */
    set resizeContainers(value) {
        this.options.resizeContainers = value;
        if (this.toolbar) {
            this.toolbar.settings.resizeContainers = value;
            this.markForRefresh();
        }
    }
    /**
     * If "resizeContainers" is true, setting this to true will try to display as many buttons as possible while resizing the toolbar.
     * Setting to false attempts to show the entire title instead.
     */
    set favorButtonset(value) {
        this.options.favorButtonset = value;
        if (this.toolbar) {
            this.toolbar.settings.favorButtonset = value;
            this.markForRefresh();
        }
    }
    /**
     * Allows a moreMenuSettings object to be propagated down into the Toolbar.
     * the jQuery Toolbar component handles passing these settings into the More Actions
     * menu's jQuery Popupmenu.
     */
    set moreMenuSettings(value) {
        this.options.moreMenuSettings = value;
        if (this.toolbar) {
            this.toolbar.settings.moreMenuSettings = value;
            this.markForRefresh();
        }
    }
    /** Add extra attributes like id's to the component **/
    set attributes(value) {
        this.options.attributes = value;
        if (this.toolbar) {
            this.toolbar.settings.attributes = value;
            this.markForRefresh();
        }
    }
    constructor(changeDetector, element, ngZone) {
        this.changeDetector = changeDetector;
        this.element = element;
        this.ngZone = ngZone;
        /**
         * Whether to display the overflow more-button or not regardless of
         * overflow content.
         */
        this.noActionsButton = false;
        /**
         * The beforeactivate event is fired whenever a toolbar is activated giving the event handler a chance
         * to "veto" the tab selection change.
         */
        this.beforeActivated = new EventEmitter();
        /**
         * The activated event is if the beforeActivate succeeds.
         */
        this.activated = new EventEmitter();
        /**
         * The afteractivate event is fired after the toolbar has been activated.
         */
        this.afterActivated = new EventEmitter();
        /**
         * The selected event is fired when a toolbar button has been clicked.
         */
        this.selected = new EventEmitter();
        // Lazy load example
        // Not fully implemented, see SOHO-5011
        this.menuItemMouseOver = new EventEmitter();
        this.options = {};
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.options.noSearchfieldReinvoke = true;
            // Assign element to local variable
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.toolbar(this.options);
            this.toolbar = this.jQueryElement.data('toolbar');
            // bind to jquery events and emit as angular events
            this.jQueryElement.on('beforeactivated', (event) => this.ngZone.run(() => this.beforeActivated.emit(event)));
            this.jQueryElement.on('activated', (event) => this.ngZone.run(() => this.activated.emit(event)));
            this.jQueryElement.on('afteractivated', (event) => this.ngZone.run(() => this.afterActivated.emit(event)));
            this.jQueryElement.on('selected', (event, item) => this.ngZone.run(() => this.selected.emit({ event, item })));
            // Returns original button info on mouseover event
            this.jQueryElement.find('.more').on('mouseover', 'li.submenu', ((event) => {
                const originalButton = jQuery(event.target).data('originalButton');
                if (originalButton !== undefined) {
                    this.ngZone.run(() => this.menuItemMouseOver.emit(originalButton));
                }
            }));
            this.toolbar = this.jQueryElement.data('toolbar');
        });
    }
    ngAfterViewChecked() {
        if (this.toolbarChanged) {
            this.updated();
            this.toolbarChanged = false;
        }
    }
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.find('.more').off();
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.toolbar) {
                this.toolbar.destroy();
                this.toolbar = null;
            }
        });
    }
    updated(settings) {
        if (this.toolbar) {
            this.ngZone.runOutsideAngular(() => this.toolbar?.updated(settings));
        }
    }
    handleResize() {
        if (this.toolbar) {
            this.ngZone.runOutsideAngular(() => this.toolbar?.handleResize());
        }
    }
    markForRefresh() {
        this.toolbarChanged = true;
        // ... make sure the change detector kicks in, otherwise if the inputs
        // were change programmatially the component may not be eligible for
        // updating.
        this.changeDetector.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoToolbarComponent, selector: "soho-toolbar, div[soho-toolbar]", inputs: { noActionsButton: "noActionsButton", hasMoreButton: "hasMoreButton", maxVisibleButtons: "maxVisibleButtons", rightAligned: "rightAligned", rightAlign: "rightAlign", resizeContainers: "resizeContainers", favorButtonset: "favorButtonset", moreMenuSettings: "moreMenuSettings", attributes: "attributes" }, outputs: { beforeActivated: "beforeActivated", activated: "activated", afterActivated: "afterActivated", selected: "selected", menuItemMouseOver: "menuItemMouseOver" }, host: { properties: { "class.toolbar": "this.isToolbar", "class.has-more-button": "this.showMoreButton", "style.display": "this.isBlock", "class.no-actions-button": "this.noActionsButton" } }, ngImport: i0, template: "<ng-content select=\"soho-toolbar-title\"></ng-content>\n<ng-content select=\"soho-toolbar-button-set\"></ng-content>\n<ng-content select=\"soho-toolbar-more-button\"></ng-content>\n", changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'soho-toolbar, div[soho-toolbar]', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-content select=\"soho-toolbar-title\"></ng-content>\n<ng-content select=\"soho-toolbar-button-set\"></ng-content>\n<ng-content select=\"soho-toolbar-more-button\"></ng-content>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isToolbar: [{
                type: HostBinding,
                args: ['class.toolbar']
            }], showMoreButton: [{
                type: HostBinding,
                args: ['class.has-more-button']
            }], isBlock: [{
                type: HostBinding,
                args: ['style.display']
            }], noActionsButton: [{
                type: HostBinding,
                args: ['class.no-actions-button']
            }, {
                type: Input
            }], hasMoreButton: [{
                type: Input
            }], maxVisibleButtons: [{
                type: Input
            }], rightAligned: [{
                type: Input
            }], rightAlign: [{
                type: Input
            }], resizeContainers: [{
                type: Input
            }], favorButtonset: [{
                type: Input
            }], moreMenuSettings: [{
                type: Input
            }], attributes: [{
                type: Input
            }], beforeActivated: [{
                type: Output
            }], activated: [{
                type: Output
            }], afterActivated: [{
                type: Output
            }], selected: [{
                type: Output
            }], menuItemMouseOver: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import { BaseControlValueAccessor, provideControlValueAccessor } from '../utils/base-control-value-accessor';
import * as i0 from "@angular/core";
export class SohoSliderComponent extends BaseControlValueAccessor {
    /** Minimum Value */
    set min(min) {
        this.options.min = min;
    }
    get min() {
        return this.options.min;
    }
    /** Maximum Value */
    set max(max) {
        this.options.max = max;
    }
    get max() {
        return this.options.max;
    }
    /** Increment or decrement by step value */
    set step(step) {
        this.options.step = step;
    }
    get step() {
        return this.options.step;
    }
    /** value or a range of values */
    set value(value) {
        this.options.value = value;
        if (this.slider && value) {
            this.slider.setValue(value[0], value[1]);
        }
    }
    get value() {
        if (this.slider) {
            return this.slider.value();
        }
        return this.options.value;
    }
    /** Choose a range of values or select a value */
    set range(range) {
        this.options.range = range;
    }
    get range() {
        return this.options.range;
    }
    /** An array of ticks that provide the value, description and color details */
    set ticks(ticks) {
        this.options.ticks = JSON.parse(ticks);
    }
    /** Persist tooltip */
    set persistTooltip(persistTooltip) {
        this.options.persistTooltip = persistTooltip;
    }
    /** Option to control the position of tooltip. ['top' , 'bottom'] */
    set tooltipPosition(tooltipPosition) {
        this.options.tooltipPosition = tooltipPosition;
    }
    /** Tooltip Content */
    set tooltipContent(tooltipContent) {
        this.options.tooltipContent = tooltipContent;
    }
    /** Set vertical class to render the slider vertically */
    set vertical(isVertical) {
        this.isVertical = isVertical;
    }
    /** Add extra attributes like id's to the component **/
    set attributes(attributes) {
        this.options.attributes = attributes;
    }
    /** Bind attributes to input element */
    get isSlider() {
        return true;
    }
    get isVerticalSlider() {
        return this.isVertical;
    }
    get sliderType() {
        return 'range';
    }
    constructor(element, ngZone) {
        super();
        this.element = element;
        this.ngZone = ngZone;
        /**
         * Called when the slider control changes
         *
         * @todo replace override of native element
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.change = new EventEmitter();
        /** Called when the slider is being slid */
        this.sliding = new EventEmitter();
        /** Called when the slider starts to be slid */
        this.slidestart = new EventEmitter();
        /** Called when the slider is finished sliding, change will also fire here. */
        this.slidestop = new EventEmitter();
        /** Called when the slider is updated when the model value changes */
        this.updated = new EventEmitter();
        /**
         * Local variables
         */
        this.isDisabled = undefined;
        this.isReadOnly = undefined;
        this.isVertical = false;
        this.isVerticalOriginal = false;
        this.options = {};
    }
    set disabled(value) {
        this.isDisabled = value;
        if (this.slider) {
            if (value) {
                this.ngZone.runOutsideAngular(() => this.slider?.disable());
                this.isDisabled = true;
            }
            else {
                this.ngZone.runOutsideAngular(() => this.slider?.enable());
                this.isDisabled = false;
                this.isReadOnly = false;
            }
        }
    }
    get disabled() {
        return this.isDisabled;
    }
    set readonly(value) {
        this.isReadOnly = value;
        if (value) {
            this.ngZone.runOutsideAngular(() => this.slider?.readonly());
            this.isReadOnly = true;
        }
        else {
            this.ngZone.runOutsideAngular(() => this.slider?.enable());
            this.isReadOnly = false;
            this.isDisabled = false;
        }
    }
    get readonly() {
        return this.isReadOnly;
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.slider(this.options);
            this.slider = this.jQueryElement.data('slider');
            // Bind to events
            this.jQueryElement
                .on('slidestart', (event) => this.onSlideStop(event))
                .on('slidestop', (event) => this.onSlideStart(event))
                .on('sliding', (event) => this.onSliding(event))
                .on('change', (event) => this.onChange(event))
                .on('updated', (event) => this.onUpdated(event));
            this.runUpdatedOnCheck = true;
        });
    }
    ngAfterViewChecked() {
        if (this.slider && this.runUpdatedOnCheck) {
            // Ensure the default disabled flag is applied.
            this.disabled = this.isDisabled;
            // Delay updated a bit so the class is also set for updated to render correctly.
            if (this.isVerticalOriginal !== this.isVertical) {
                this.slider.updated();
                this.isVerticalOriginal = this.isVertical;
            }
            this.ngZone.runOutsideAngular(() => {
                this.runUpdatedOnCheck = false;
            });
        }
    }
    ngOnDestroy() {
        if (this.slider) {
            this.slider.destroy();
            this.slider = null;
        }
    }
    onChange(event) {
        const newValue = this.jQueryElement?.val();
        if (this.internalValue !== newValue) {
            // Update the model ...
            this.internalValue = newValue;
            event.data = newValue;
            // ... then emit the changed value.
            this.change.emit(event);
        }
    }
    onSliding(event) {
        event.data = this.jQueryElement?.val();
        this.sliding.emit(event);
    }
    onSlideStart(event) {
        event.data = this.jQueryElement?.val();
        this.slidestart.emit(event);
    }
    onSlideStop(event) {
        event.data = this.jQueryElement?.val();
        this.slidestop.emit(event);
    }
    onUpdated(event) {
        event.data = this.jQueryElement?.val();
        this.updated.emit(event);
    }
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSliderComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoSliderComponent, selector: "input[soho-slider]", inputs: { min: "min", max: "max", step: "step", value: "value", range: "range", ticks: "ticks", persistTooltip: "persistTooltip", tooltipPosition: "tooltipPosition", tooltipContent: "tooltipContent", vertical: "vertical", attributes: "attributes", disabled: "disabled", readonly: "readonly" }, outputs: { change: "change", sliding: "sliding", slidestart: "slidestart", slidestop: "slidestop", updated: "updated" }, host: { properties: { "class.slider": "this.isSlider", "class.vertical": "this.isVerticalSlider", "attr.type": "this.sliderType" } }, providers: [provideControlValueAccessor(SohoSliderComponent)], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSliderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[soho-slider]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [provideControlValueAccessor(SohoSliderComponent)]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { min: [{
                type: Input
            }], max: [{
                type: Input
            }], step: [{
                type: Input
            }], value: [{
                type: Input
            }], range: [{
                type: Input
            }], ticks: [{
                type: Input
            }], persistTooltip: [{
                type: Input
            }], tooltipPosition: [{
                type: Input
            }], tooltipContent: [{
                type: Input
            }], vertical: [{
                type: Input
            }], attributes: [{
                type: Input
            }], change: [{
                type: Output
            }], sliding: [{
                type: Output
            }], slidestart: [{
                type: Output
            }], slidestop: [{
                type: Output
            }], updated: [{
                type: Output
            }], isSlider: [{
                type: HostBinding,
                args: ['class.slider']
            }], isVerticalSlider: [{
                type: HostBinding,
                args: ['class.vertical']
            }], sliderType: [{
                type: HostBinding,
                args: ['attr.type']
            }], disabled: [{
                type: Input
            }], readonly: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
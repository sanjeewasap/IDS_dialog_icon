import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';
import { BaseControlValueAccessor, provideControlValueAccessor } from '../utils/base-control-value-accessor';
import * as i0 from "@angular/core";
export class SohoAutoCompleteComponent extends BaseControlValueAccessor {
    /** Defines the data to use, must be specified for this component. */
    set source(source) {
        this.options.source = source;
    }
    /** Object is passed into the source method, and augmented with parameters. */
    set sourceArguments(sourceArguments) {
        this.options.sourceArguments = sourceArguments;
    }
    /** Menu template, appropriate markup is expected. */
    set template(template) {
        this.options.template = template;
    }
    /** if true, causes filter results that don't match case to be thrown out. */
    set caseSensitive(caseSensitive) {
        this.options.caseSensitive = caseSensitive;
    }
    /** Filters based on the first character('startsWidth') of the string, or the entire string('contains') */
    set filterMode(filterMode) {
        this.options.filterMode = filterMode;
    }
    /** Delay between key strokes on the keypad before the end of typing */
    set delay(delay) {
        this.options.delay = delay;
    }
    /** Width of the open menu */
    set width(width) {
        this.options.width = width;
    }
    /** Offset, the left or top offset */
    set offset(offset) {
        this.options.offset = offset;
    }
    /** Selects first item menu */
    set autoSelectFirstItem(autoSelectFirstItem) {
        this.options.autoSelectFirstItem = autoSelectFirstItem;
    }
    set attributes(attributes) {
        this.options.attributes = attributes;
    }
    get attributes() {
        return this.options.attributes;
    }
    get isAutoComplete() {
        return true;
    }
    // -------------------------------------------
    // Component Input
    // -------------------------------------------
    set disabled(value) {
        if (value) {
            if (this.autocomplete) {
                this.autocomplete.disable();
            }
            this.isDisabled = true;
        }
        else {
            if (this.autocomplete) {
                this.autocomplete.enable();
            }
            this.isDisabled = false;
            this.isReadOnly = false;
        }
    }
    get disabled() {
        return this.isDisabled;
    }
    set readonly(value) {
        if (this.autocomplete) {
            if (value) {
                this.autocomplete.readonly();
                this.isReadOnly = true;
            }
            else {
                this.autocomplete.enable();
                this.isDisabled = false;
                this.isReadOnly = false;
            }
        }
    }
    get readonly() {
        return this.isReadOnly;
    }
    constructor(element) {
        super();
        this.element = element;
        /** Options. */
        this.options = {};
        /**
         * Available Soho Template events as Output (EventEmitters passing the event)
         * Should match the Soho event names for the component
         *
         * @todo replace override of native attribute.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.change = new EventEmitter();
        this.selected = new EventEmitter();
        this.beforeopen = new EventEmitter();
    }
    onKeyUp(_event) {
        // This is required if masking is used, otherwise the
        // the form binding does not see updates.
        this.internalValue = this.jQueryElement?.val();
    }
    ngAfterViewInit() {
        this.jQueryElement = jQuery(this.element.nativeElement);
        // Bind to jQueryElement's events
        this.jQueryElement
            .on('selected', (...args) => this.selected.emit(args))
            .on('change', (_e, args) => this.onChange(args))
            .on('beforeopen', (_e, args) => this.beforeopen.emit(args));
        // Invoke the Autocomplete
        this.jQueryElement.autocomplete(this.options);
        this.autocomplete = this.jQueryElement.data('autocomplete');
        // Make sure the value of the control is set appropriately.
        if (this.internalValue) {
            this.jQueryElement.val(this.internalValue);
        }
    }
    ngAfterViewChecked() {
        this.disabled = this.isDisabled;
    }
    ngOnDestroy() {
        if (this.autocomplete) {
            this.autocomplete.destroy();
            this.autocomplete = undefined;
        }
    }
    /**
     * Handle the control being changed.
     */
    onChange(event) {
        if (!event) {
            // sometimes the event is not available
            this.internalValue = this.jQueryElement?.val();
            super.writeValue(this.internalValue);
            return;
        }
        this.change.emit(event);
    }
    /**
     * Override writeValue to allow the mask input
     * element to be updated correctly.
     *
     * @param value - the new value
     */
    writeValue(value) {
        super.writeValue(value);
        if (this.jQueryElement) {
            // The processing is required to ensure we use the correct format
            // in the control.
            this.jQueryElement.val(value);
        }
    }
    getValue() {
        return this.internalValue;
    }
    setValue(value) {
        this.writeValue(value);
    }
    /** For async methods, reinit autocomplete `source` setting. */
    updated() {
        this.autocomplete?.updated();
        return this;
    }
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoAutoCompleteComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoAutoCompleteComponent, selector: "input[soho-autocomplete]", inputs: { source: "source", sourceArguments: "sourceArguments", template: "template", caseSensitive: "caseSensitive", filterMode: "filterMode", delay: "delay", width: "width", offset: "offset", autoSelectFirstItem: "autoSelectFirstItem", attributes: "attributes", disabled: "disabled", readonly: "readonly" }, outputs: { change: "change", selected: "selected", beforeopen: "beforeopen" }, host: { listeners: { "keyup": "onKeyUp($event)" }, properties: { "class.autocomplete": "this.isAutoComplete" } }, providers: [provideControlValueAccessor(SohoAutoCompleteComponent)], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoAutoCompleteComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[soho-autocomplete]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [provideControlValueAccessor(SohoAutoCompleteComponent)]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { source: [{
                type: Input
            }], sourceArguments: [{
                type: Input
            }], template: [{
                type: Input
            }], caseSensitive: [{
                type: Input
            }], filterMode: [{
                type: Input
            }], delay: [{
                type: Input
            }], width: [{
                type: Input
            }], offset: [{
                type: Input
            }], autoSelectFirstItem: [{
                type: Input
            }], attributes: [{
                type: Input
            }], change: [{
                type: Output
            }], selected: [{
                type: Output
            }], beforeopen: [{
                type: Output
            }], isAutoComplete: [{
                type: HostBinding,
                args: ['class.autocomplete']
            }], disabled: [{
                type: Input
            }], readonly: [{
                type: Input
            }], onKeyUp: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,
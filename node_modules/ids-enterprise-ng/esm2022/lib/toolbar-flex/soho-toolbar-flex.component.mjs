import { Component, ChangeDetectionStrategy, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import { ArgumentHelper } from '../utils/argument.helper';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
export class SohoToolbarFlexSearchFieldComponent {
    /** Adds an X button for clearing the search value. */
    set clearable(value) {
        this.options.clearable = value;
        if (this.toolbarFlexSearchField) {
            this.toolbarFlexSearchField.settings.clearable = value;
            this.markForRefresh();
        }
    }
    /** Where it's collapsible or not */
    set collapsible(value) {
        this.options.collapsible = value;
        if (this.toolbarFlexSearchField) {
            this.toolbarFlexSearchField.settings.collapsible = value;
            this.markForRefresh();
        }
    }
    set collapsibleOnMobile(value) {
        this.options.collapsibleOnMobile = value;
        if (this.toolbarFlexSearchField) {
            this.toolbarFlexSearchField.settings.collapsibleOnMobile = value;
            this.markForRefresh();
        }
    }
    set filterMode(value) {
        this.options.filterMode = value;
        if (this.toolbarFlexSearchField) {
            this.toolbarFlexSearchField.settings.filterMode = value;
            this.markForRefresh();
        }
    }
    /** AutoComplete : Source Function/Data/Url/Array */
    set source(value) {
        this.options.source = value;
        if (this.toolbarFlexSearchField) {
            this.toolbarFlexSearchField.settings.source = value;
            this.markForRefresh();
        }
    }
    /** Template that can be passed */
    set template(value) {
        this.options.template = value;
        if (this.toolbarFlexSearchField) {
            this.toolbarFlexSearchField.settings.template = value;
            this.markForRefresh();
        }
    }
    get isSearchField() {
        return true;
    }
    constructor(changeDetector, element, ngZone) {
        this.changeDetector = changeDetector;
        this.element = element;
        this.ngZone = ngZone;
        /**
         * Options, overwriting any existing options already set on the component, and hence combining
         * this Input with the othera is not recommended.
         *
         * (Note: could change this to use {...this._options,...value})
         */
        this.options = {};
        // ------------------------------------------------------------
        this.selected = new EventEmitter();
        this.cleared = new EventEmitter();
        /**
         * @todo replace override of native element
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.change = new EventEmitter();
        this.searchFieldChanged = false;
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.searchfield(this.options);
            // Initialize title attribute as a soho tooltip
            if (this.jQueryElement.attr('title')) {
                this.jQueryElement.tooltip();
            }
            this.toolbarFlexSearchField = this.jQueryElement.data('searchfield');
            /**
             * Bind to jQueryElement's events
             */
            this.jQueryElement.on('selected', (...args) => this.ngZone.run(() => this.selected.emit(args)));
            this.jQueryElement.on('change', (...args) => this.ngZone.run(() => this.change.emit(args)));
            this.jQueryElement.on('cleared', (...args) => this.ngZone.run(() => this.cleared.emit(args)));
        });
    }
    ngAfterViewChecked() {
        if (this.searchFieldChanged) {
            this.ngZone.runOutsideAngular(() => this.toolbarFlexSearchField?.updated());
            this.searchFieldChanged = false;
        }
    }
    ngOnDestroy() {
        // Necessary clean up step (add additional here)
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                // clean up attached events.
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.toolbarFlexSearchField) {
                // destroy the soho component.
                this.toolbarFlexSearchField.destroy();
                this.toolbarFlexSearchField = undefined;
            }
        });
    }
    clear() {
        this.ngZone.runOutsideAngular(() => this.toolbarFlexSearchField?.clear());
    }
    // for testing
    get searchField() {
        return this.toolbarFlexSearchField;
    }
    markForRefresh() {
        this.searchFieldChanged = true;
        // ... make sure the change detector kicks in, otherwise if the inputs
        // were change programmatially the component may not be eligible for
        // updating.
        this.changeDetector.markForCheck();
    }
    updated(settings) {
        this.ngZone.runOutsideAngular(() => this.toolbarFlexSearchField?.updated(settings));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarFlexSearchFieldComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoToolbarFlexSearchFieldComponent, selector: "input[soho-toolbar-flex-searchfield]", inputs: { options: "options", clearable: "clearable", collapsible: "collapsible", collapsibleOnMobile: "collapsibleOnMobile", filterMode: "filterMode", source: "source", template: "template" }, outputs: { selected: "selected", cleared: "cleared", change: "change" }, host: { properties: { "class.searchfield": "this.isSearchField" } }, ngImport: i0, template: '<div #toolbarFlexSearchField><ng-content></ng-content></div>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarFlexSearchFieldComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[soho-toolbar-flex-searchfield]',
                    template: '<div #toolbarFlexSearchField><ng-content></ng-content></div>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { options: [{
                type: Input
            }], clearable: [{
                type: Input
            }], collapsible: [{
                type: Input
            }], collapsibleOnMobile: [{
                type: Input
            }], filterMode: [{
                type: Input
            }], source: [{
                type: Input
            }], template: [{
                type: Input
            }], selected: [{
                type: Output
            }], cleared: [{
                type: Output
            }], change: [{
                type: Output
            }], isSearchField: [{
                type: HostBinding,
                args: ['class.searchfield']
            }] } });
/**
 * soho toolbar flex more button
 */
export class SohoToolbarFlexMoreButtonComponent {
    constructor() {
        this.isMoreButton = true;
        this.isToolbarSection = true;
        this.isPageChanger = false;
        this.isDisabled = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarFlexMoreButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoToolbarFlexMoreButtonComponent, selector: "soho-toolbar-flex-more-button", inputs: { isPageChanger: "isPageChanger", isDisabled: "isDisabled", moreButtonId: "moreButtonId", ajaxBeforeFunction: "ajaxBeforeFunction", menuId: "menuId" }, host: { properties: { "class.more": "this.isMoreButton", "class.toolbar-section": "this.isToolbarSection" } }, ngImport: i0, template: `<button
      class="btn-actions"
      type="button"
      [ngClass]="{'page-changer': isPageChanger}"
      [attr.id]="moreButtonId"
      [attr.disabled]="isDisabled ? 'disabled' : null"
    >
      <svg class="icon" focusable="false" aria-hidden="true" role="presentation">
        <use href="#icon-more"></use>
      </svg>
      <span class="audible">More Actions</span>
    </button>
    <ng-content></ng-content>`, isInline: true, dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarFlexMoreButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'soho-toolbar-flex-more-button',
                    template: `<button
      class="btn-actions"
      type="button"
      [ngClass]="{'page-changer': isPageChanger}"
      [attr.id]="moreButtonId"
      [attr.disabled]="isDisabled ? 'disabled' : null"
    >
      <svg class="icon" focusable="false" aria-hidden="true" role="presentation">
        <use href="#icon-more"></use>
      </svg>
      <span class="audible">More Actions</span>
    </button>
    <ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isMoreButton: [{
                type: HostBinding,
                args: ['class.more']
            }], isToolbarSection: [{
                type: HostBinding,
                args: ['class.toolbar-section']
            }], isPageChanger: [{
                type: Input
            }], isDisabled: [{
                type: Input
            }], moreButtonId: [{
                type: Input
            }], ajaxBeforeFunction: [{
                type: Input
            }], menuId: [{
                type: Input
            }] } });
/**
 * soho toolbar flex page title.
 */
export class SohoToolbarFlexPageTitleComponent {
    constructor() {
        this.isPageTitle = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarFlexPageTitleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoToolbarFlexPageTitleComponent, selector: "[soho-toolbar-flex-page-title]", host: { properties: { "class.page-title": "this.isPageTitle" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarFlexPageTitleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-toolbar-flex-page-title]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isPageTitle: [{
                type: HostBinding,
                args: ['class.page-title']
            }] } });
/**
 * soho toolbar flex section title.
 */
export class SohoToolbarFlexSectionTitleComponent {
    constructor() {
        this.isSectionTitle = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarFlexSectionTitleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoToolbarFlexSectionTitleComponent, selector: "[soho-toolbar-flex-section-title]", host: { properties: { "class.section-title": "this.isSectionTitle" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarFlexSectionTitleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-toolbar-flex-section-title]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isSectionTitle: [{
                type: HostBinding,
                args: ['class.section-title']
            }] } });
/**
 * Generic soho toolbar flex section
 */
export class SohoToolbarFlexSectionComponent {
    constructor() {
        this.isToolbarSection = true;
        this.isTitleFavor = false;
        this.isTitle = false;
        this.isButtonSet = false;
        this.isSearch = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarFlexSectionComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoToolbarFlexSectionComponent, selector: "soho-toolbar-flex-section", inputs: { isTitleFavor: "isTitleFavor", isTitle: "isTitle", isButtonSet: "isButtonSet", isSearch: "isSearch" }, host: { properties: { "class.toolbar-section": "this.isToolbarSection", "class.favor": "this.isTitleFavor", "class.title": "this.isTitle", "class.buttonset": "this.isButtonSet", "class.search": "this.isSearch" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarFlexSectionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'soho-toolbar-flex-section',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isToolbarSection: [{
                type: HostBinding,
                args: ['class.toolbar-section']
            }], isTitleFavor: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.favor']
            }], isTitle: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.title']
            }], isButtonSet: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.buttonset']
            }], isSearch: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.search']
            }] } });
/**
 * Soho toolbar Navigation button
 */
export class SohoToolbarFlexNavButtonComponent {
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        this.isIconButton = true;
        this.isAppMenuTrigger = true;
        this.typeAttr = 'button';
        this._buttonOptions = {};
    }
    set buttonOptions(buttonOptions) {
        ArgumentHelper.checkNotNull('buttonOptions', buttonOptions);
        this._buttonOptions = buttonOptions;
        if (this.button) {
            // todo: how to update the button when options change?
        }
    }
    get buttonOptions() {
        return this._buttonOptions;
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            const self = this;
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.button(this._buttonOptions);
            this.button = this.jQueryElement.data('button');
        });
    }
    updated(settings) {
        if (settings) {
            this._buttonOptions = Soho.utils.mergeSettings(this.element[0], settings, this._buttonOptions);
        }
        if (this.button) {
            this.ngZone.runOutsideAngular(() => {
                this.button?.updated(this._buttonOptions);
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarFlexNavButtonComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoToolbarFlexNavButtonComponent, selector: "button[soho-toolbar-flex-nav-button]", inputs: { buttonOptions: "buttonOptions" }, host: { properties: { "class.btn-icon": "this.isIconButton", "class.application-menu-trigger": "this.isAppMenuTrigger", "attr.type": "this.typeAttr" } }, ngImport: i0, template: `
    <svg class="icon" focusable="false" aria-hidden="true" role="presentation">
      <use href="#icon-menu"></use>
    </svg>
    <span class="audible">
        <ng-content></ng-content>
    </span>
            `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarFlexNavButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'button[soho-toolbar-flex-nav-button]',
                    template: `
    <svg class="icon" focusable="false" aria-hidden="true" role="presentation">
      <use href="#icon-menu"></use>
    </svg>
    <span class="audible">
        <ng-content></ng-content>
    </span>
            `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isIconButton: [{
                type: HostBinding,
                args: ['class.btn-icon']
            }], isAppMenuTrigger: [{
                type: HostBinding,
                args: ['class.application-menu-trigger']
            }], typeAttr: [{
                type: HostBinding,
                args: ['attr.type']
            }], buttonOptions: [{
                type: Input
            }] } });
/**
 * The main soho toolbar flex component
 */
export class SohoToolbarFlexComponent {
    /**
     * Allows a moreMenuSettings object to be propagated down into the Toolbar Flex.
     * the jQuery Toolbar Flex component handles passing these settings into the More Actions
     * menu's jQuery Popupmenu.
     */
    set moreMenuBeforeOpenFunction(beforeOpen) {
        if (!this._options.moreMenuSettings) {
            this._options.moreMenuSettings = {};
        }
        this._options.moreMenuSettings.beforeOpen = beforeOpen;
        if (this.toolbarFlex) {
            this.toolbarFlex.settings.beforeMoreMenuOpen = beforeOpen;
            this.markForRefresh();
        }
    }
    /** Add extra attributes like id's to the component **/
    set attributes(attributes) {
        this._options.attributes = attributes;
        if (this.toolbarFlex) {
            this.toolbarFlex.settings.attributes = attributes;
            this.markForRefresh();
        }
    }
    constructor(changeDetector, element, ngZone) {
        this.changeDetector = changeDetector;
        this.element = element;
        this.ngZone = ngZone;
        this.isToolbar = true;
        /**
         * The selected event is fired when a toolbar button has been clicked.
         */
        this.selected = new EventEmitter();
        this._options = {};
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // Assign element to local variable
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.toolbarflex(this._options);
            this.toolbarFlex = this.jQueryElement.data('toolbarFlex');
            this.jQueryElement.on('selected', (event, item) => this.ngZone.run(() => {
                this.selected.emit({ event, item });
            }));
        });
    }
    ngAfterViewChecked() {
        if (this.toolbarFlexChanged) {
            this.updated();
            this.toolbarFlexChanged = false;
        }
    }
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.toolbarFlex) {
                this.toolbarFlex.destroy();
                this.toolbarFlex = null;
            }
        });
    }
    updated(settings) {
        if (this.toolbarFlex) {
            this.ngZone.runOutsideAngular(() => this.toolbarFlex?.updated(settings));
        }
    }
    /**
     * The buttonset API for the modal dialog.
     *
     * @returns the buttonset API for the modal dialog, if initialised.
     */
    get buttonsetAPIs() {
        return this.toolbarFlex ? this.toolbarFlex.buttonsetAPIs : undefined;
    }
    /**
     * The buttonset API for the modal dialog.
     *
     * @returns the buttonset API for the modal dialog, if initialised.
     */
    get buttonsets() {
        return this.toolbarFlex ? this.toolbarFlex.buttonsets : undefined;
    }
    // For testing
    get options() {
        return this._options;
    }
    markForRefresh() {
        this.toolbarFlexChanged = true;
        this.changeDetector.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarFlexComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoToolbarFlexComponent, selector: "soho-toolbar-flex, div[soho-toolbar-flex]", inputs: { moreMenuBeforeOpenFunction: "moreMenuBeforeOpenFunction", attributes: "attributes" }, outputs: { selected: "selected" }, host: { properties: { "class.flex-toolbar": "this.isToolbar" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoToolbarFlexComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'soho-toolbar-flex, div[soho-toolbar-flex]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isToolbar: [{
                type: HostBinding,
                args: ['class.flex-toolbar']
            }], moreMenuBeforeOpenFunction: [{
                type: Input
            }], attributes: [{
                type: Input
            }], selected: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby10b29sYmFyLWZsZXguY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWRzLWVudGVycHJpc2Utbmcvc3JjL2xpYi90b29sYmFyLWZsZXgvc29oby10b29sYmFyLWZsZXguY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFHTCxTQUFTLEVBRVQsdUJBQXVCLEVBRXZCLFlBQVksRUFDWixXQUFXLEVBQ1gsS0FBSyxFQUVMLE1BQU0sR0FFUCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sMEJBQTBCLENBQUM7OztBQU8xRCxNQUFNLE9BQU8sbUNBQW1DO0lBUzlDLHNEQUFzRDtJQUN0RCxJQUFhLFNBQVMsQ0FBQyxLQUFjO1FBQ25DLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztRQUMvQixJQUFJLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUMvQixJQUFJLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7WUFDdkQsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQztJQUVELG9DQUFvQztJQUNwQyxJQUFhLFdBQVcsQ0FBQyxLQUFjO1FBQ3JDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUNqQyxJQUFJLElBQUksQ0FBQyxzQkFBc0IsRUFBRTtZQUMvQixJQUFJLENBQUMsc0JBQXNCLENBQUMsUUFBUSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUM7WUFDekQsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQztJQUVELElBQWEsbUJBQW1CLENBQUMsS0FBYztRQUM3QyxJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixHQUFHLEtBQUssQ0FBQztRQUN6QyxJQUFJLElBQUksQ0FB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QUUvQixJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ3JDLENBQUM7OEdBbEhVLHdCQUF3QjtrR0FBeEIsd0JBQXdCLHNSQUh6QiwyQkFBMkI7OzJGQUcxQix3QkFBd0I7a0JBTHBDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDJDQUEyQztvQkFDckQsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEO3NKQUVvQyxTQUFTO3NCQUEzQyxXQUFXO3VCQUFDLG9CQUFvQjtnQkFPcEIsMEJBQTBCO3NCQUF0QyxLQUFLO2dCQWFPLFVBQVU7c0JBQXRCLEtBQUs7Z0JBV0ksUUFBUTtzQkFBakIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0NoZWNrZWQsXG4gIEFmdGVyVmlld0luaXQsXG4gIENvbXBvbmVudCxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBPdXRwdXQsXG4gIE9uRGVzdHJveSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IEFyZ3VtZW50SGVscGVyIH0gZnJvbSAnLi4vdXRpbHMvYXJndW1lbnQuaGVscGVyJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnaW5wdXRbc29oby10b29sYmFyLWZsZXgtc2VhcmNoZmllbGRdJywgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB0ZW1wbGF0ZTogJzxkaXYgI3Rvb2xiYXJGbGV4U2VhcmNoRmllbGQ+PG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PjwvZGl2PicsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFNvaG9Ub29sYmFyRmxleFNlYXJjaEZpZWxkQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgLyoqXG4gICAqIE9wdGlvbnMsIG92ZXJ3cml0aW5nIGFueSBleGlzdGluZyBvcHRpb25zIGFscmVhZHkgc2V0IG9uIHRoZSBjb21wb25lbnQsIGFuZCBoZW5jZSBjb21iaW5pbmdcbiAgICogdGhpcyBJbnB1dCB3aXRoIHRoZSBvdGhlcmEgaXMgbm90IHJlY29tbWVuZGVkLlxuICAgKlxuICAgKiAoTm90ZTogY291bGQgY2hhbmdlIHRoaXMgdG8gdXNlIHsuLi50aGlzLl9vcHRpb25zLC4uLnZhbHVlfSlcbiAgICovXG4gIEBJbnB1dCgpIG9wdGlvbnM6IFNvaG9Ub29sYmFyRmxleFNlYXJjaEZpZWxkT3B0aW9ucyA9IHt9O1xuXG4gIC8qKiBBZGRzIGFuIFggYnV0dG9uIGZvciBjbGVhcmluZyB0aGUgc2VhcmNoIHZhbHVlLiAqL1xuICBASW5wdXQoKSBzZXQgY2xlYXJhYmxlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5vcHRpb25zLmNsZWFyYWJsZSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLnRvb2xiYXJGbGV4U2VhcmNoRmllbGQpIHtcbiAgICAgIHRoaXMudG9vbGJhckZsZXhTZWFyY2hGaWVsZC5zZXR0aW5ncy5jbGVhcmFibGUgPSB2YWx1ZTtcbiAgICAgIHRoaXMubWFya0ZvclJlZnJlc2goKTtcbiAgICB9XG4gIH1cblxuICAvKiogV2hlcmUgaXQncyBjb2xsYXBzaWJsZSBvciBub3QgKi9cbiAgQElucHV0KCkgc2V0IGNvbGxhcHNpYmxlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5vcHRpb25zLmNvbGxhcHNpYmxlID0gdmFsdWU7XG4gICAgaWYgKHRoaXMudG9vbGJhckZsZXhTZWFyY2hGaWVsZCkge1xuICAgICAgdGhpcy50b29sYmFyRmxleFNlYXJjaEZpZWxkLnNldHRpbmdzLmNvbGxhcHNpYmxlID0gdmFsdWU7XG4gICAgICB0aGlzLm1hcmtGb3JSZWZyZXNoKCk7XG4gICAgfVxuICB9XG5cbiAgQElucHV0KCkgc2V0IGNvbGxhcHNpYmxlT25Nb2JpbGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLm9wdGlvbnMuY29sbGFwc2libGVPbk1vYmlsZSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLnRvb2xiYXJGbGV4U2VhcmNoRmllbGQpIHtcbiAgICAgIHRoaXMudG9vbGJhckZsZXhTZWFyY2hGaWVsZC5zZXR0aW5ncy5jb2xsYXBzaWJsZU9uTW9iaWxlID0gdmFsdWU7XG4gICAgICB0aGlzLm1hcmtGb3JSZWZyZXNoKCk7XG4gICAgfVxuICB9XG5cbiAgQElucHV0KCkgc2V0IGZpbHRlck1vZGUodmFsdWU6IFNvaG9BdXRvQ29tcGxldGVGaWx0ZXJNb2RlKSB7XG4gICAgdGhpcy5vcHRpb25zLmZpbHRlck1vZGUgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy50b29sYmFyRmxleFNlYXJjaEZpZWxkKSB7XG4gICAgICB0aGlzLnRvb2xiYXJGbGV4U2VhcmNoRmllbGQuc2V0dGluZ3MuZmlsdGVyTW9kZSA9IHZhbHVlO1xuICAgICAgdGhpcy5tYXJrRm9yUmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBBdXRvQ29tcGxldGUgOiBTb3VyY2UgRnVuY3Rpb24vRGF0YS9VcmwvQXJyYXkgKi9cbiAgQElucHV0KCkgc2V0IHNvdXJjZSh2YWx1ZTogU29ob0F1dG9Db21wbGV0ZVNvdXJjZSkge1xuICAgIHRoaXMub3B0aW9ucy5zb3VyY2UgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy50b29sYmFyRmxleFNlYXJjaEZpZWxkKSB7XG4gICAgICB0aGlzLnRvb2xiYXJGbGV4U2VhcmNoRmllbGQuc2V0dGluZ3Muc291cmNlID0gdmFsdWU7XG4gICAgICB0aGlzLm1hcmtGb3JSZWZyZXNoKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIFRlbXBsYXRlIHRoYXQgY2FuIGJlIHBhc3NlZCAqL1xuICBASW5wdXQoKSBzZXQgdGVtcGxhdGUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMub3B0aW9ucy50ZW1wbGF0ZSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLnRvb2xiYXJGbGV4U2VhcmNoRmllbGQpIHtcbiAgICAgIHRoaXMudG9vbGJhckZsZXhTZWFyY2hGaWVsZC5zZXR0aW5ncy50ZW1wbGF0ZSA9IHZhbHVlO1xuICAgICAgdGhpcy5tYXJrRm9yUmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIEBPdXRwdXQoKSBzZWxlY3RlZDogRXZlbnRFbWl0dGVyPE9iamVjdFtdPiA9IG5ldyBFdmVudEVtaXR0ZXI8T2JqZWN0W10+KCk7XG4gIEBPdXRwdXQoKSBjbGVhcmVkOiBFdmVudEVtaXR0ZXI8T2JqZWN0W10+ID0gbmV3IEV2ZW50RW1pdHRlcjxPYmplY3RbXT4oKTtcblxuICAvKipcbiAgICogQHRvZG8gcmVwbGFjZSBvdmVycmlkZSBvZiBuYXRpdmUgZWxlbWVudFxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1vdXRwdXQtbmF0aXZlXG4gIEBPdXRwdXQoKSBjaGFuZ2U6IEV2ZW50RW1pdHRlcjxPYmplY3RbXT4gPSBuZXcgRXZlbnRFbWl0dGVyPE9iamVjdFtdPigpO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3Muc2VhcmNoZmllbGQnKSBnZXQgaXNTZWFyY2hGaWVsZCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2NhbCB2YXJpYWJsZXNcbiAgICovXG4gIHByaXZhdGUgalF1ZXJ5RWxlbWVudD86IEpRdWVyeTxIVE1MRWxlbWVudD47XG4gIHByaXZhdGUgdG9vbGJhckZsZXhTZWFyY2hGaWVsZD86IFNvaG9Ub29sYmFyRmxleFNlYXJjaEZpZWxkU3RhdGljO1xuICBwcml2YXRlIHNlYXJjaEZpZWxkQ2hhbmdlZCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lXG4gICkgeyB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudCA9IGpRdWVyeSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCk7XG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQuc2VhcmNoZmllbGQodGhpcy5vcHRpb25zKTtcblxuICAgICAgLy8gSW5pdGlhbGl6ZSB0aXRsZSBhdHRyaWJ1dGUgYXMgYSBzb2hvIHRvb2x0aXBcbiAgICAgIGlmICh0aGlzLmpRdWVyeUVsZW1lbnQuYXR0cigndGl0bGUnKSkge1xuICAgICAgICB0aGlzLmpRdWVyeUVsZW1lbnQudG9vbHRpcCgpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRvb2xiYXJGbGV4U2VhcmNoRmllbGQgPSB0aGlzLmpRdWVyeUVsZW1lbnQuZGF0YSgnc2VhcmNoZmllbGQnKTtcblxuICAgICAgLyoqXG4gICAgICAgKiBCaW5kIHRvIGpRdWVyeUVsZW1lbnQncyBldmVudHNcbiAgICAgICAqL1xuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50Lm9uKCdzZWxlY3RlZCcsICguLi5hcmdzKSA9PlxuICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5zZWxlY3RlZC5lbWl0KGFyZ3MpKSk7XG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQub24oJ2NoYW5nZScsICguLi5hcmdzKSA9PlxuICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5jaGFuZ2UuZW1pdChhcmdzKSkpO1xuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50Lm9uKCdjbGVhcmVkJywgKC4uLmFyZ3MpID0+XG4gICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB0aGlzLmNsZWFyZWQuZW1pdChhcmdzKSkpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdDaGVja2VkKCkge1xuICAgIGlmICh0aGlzLnNlYXJjaEZpZWxkQ2hhbmdlZCkge1xuICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gdGhpcy50b29sYmFyRmxleFNlYXJjaEZpZWxkPy51cGRhdGVkKCkpO1xuICAgICAgdGhpcy5zZWFyY2hGaWVsZENoYW5nZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICAvLyBOZWNlc3NhcnkgY2xlYW4gdXAgc3RlcCAoYWRkIGFkZGl0aW9uYWwgaGVyZSlcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBpZiAodGhpcy5qUXVlcnlFbGVtZW50KSB7XG4gICAgICAgIC8vIGNsZWFuIHVwIGF0dGFjaGVkIGV2ZW50cy5cbiAgICAgICAgdGhpcy5qUXVlcnlFbGVtZW50Lm9mZigpO1xuICAgICAgICB0aGlzLmpRdWVyeUVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy50b29sYmFyRmxleFNlYXJjaEZpZWxkKSB7XG4gICAgICAgIC8vIGRlc3Ryb3kgdGhlIHNvaG8gY29tcG9uZW50LlxuICAgICAgICB0aGlzLnRvb2xiYXJGbGV4U2VhcmNoRmllbGQuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLnRvb2xiYXJGbGV4U2VhcmNoRmllbGQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjbGVhcigpOiB2b2lkIHtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB0aGlzLnRvb2xiYXJGbGV4U2VhcmNoRmllbGQ/LmNsZWFyKCkpO1xuICB9XG5cbiAgLy8gZm9yIHRlc3RpbmdcbiAgZ2V0IHNlYXJjaEZpZWxkKCk6IFNvaG9Ub29sYmFyRmxleFNlYXJjaEZpZWxkU3RhdGljIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy50b29sYmFyRmxleFNlYXJjaEZpZWxkO1xuICB9XG5cbiAgcHJpdmF0ZSBtYXJrRm9yUmVmcmVzaCgpIHtcbiAgICB0aGlzLnNlYXJjaEZpZWxkQ2hhbmdlZCA9IHRydWU7XG5cbiAgICAvLyAuLi4gbWFrZSBzdXJlIHRoZSBjaGFuZ2UgZGV0ZWN0b3Iga2lja3MgaW4sIG90aGVyd2lzZSBpZiB0aGUgaW5wdXRzXG4gICAgLy8gd2VyZSBjaGFuZ2UgcHJvZ3JhbW1hdGlhbGx5IHRoZSBjb21wb25lbnQgbWF5IG5vdCBiZSBlbGlnaWJsZSBmb3JcbiAgICAvLyB1cGRhdGluZy5cbiAgICB0aGlzLmNoYW5nZURldGVjdG9yLm1hcmtGb3JDaGVjaygpO1xuICB9XG5cbiAgdXBkYXRlZChzZXR0aW5nczogU29ob1Rvb2xiYXJGbGV4U2VhcmNoRmllbGRPcHRpb25zKSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gdGhpcy50b29sYmFyRmxleFNlYXJjaEZpZWxkPy51cGRhdGVkKHNldHRpbmdzKSk7XG4gIH1cbn1cblxuLyoqXG4gKiBzb2hvIHRvb2xiYXIgZmxleCBtb3JlIGJ1dHRvblxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzb2hvLXRvb2xiYXItZmxleC1tb3JlLWJ1dHRvbicsIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgdGVtcGxhdGU6XG4gICAgYDxidXR0b25cbiAgICAgIGNsYXNzPVwiYnRuLWFjdGlvbnNcIlxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICBbbmdDbGFzc109XCJ7J3BhZ2UtY2hhbmdlcic6IGlzUGFnZUNoYW5nZXJ9XCJcbiAgICAgIFthdHRyLmlkXT1cIm1vcmVCdXR0b25JZFwiXG4gICAgICBbYXR0ci5kaXNhYmxlZF09XCJpc0Rpc2FibGVkID8gJ2Rpc2FibGVkJyA6IG51bGxcIlxuICAgID5cbiAgICAgIDxzdmcgY2xhc3M9XCJpY29uXCIgZm9jdXNhYmxlPVwiZmFsc2VcIiBhcmlhLWhpZGRlbj1cInRydWVcIiByb2xlPVwicHJlc2VudGF0aW9uXCI+XG4gICAgICAgIDx1c2UgaHJlZj1cIiNpY29uLW1vcmVcIj48L3VzZT5cbiAgICAgIDwvc3ZnPlxuICAgICAgPHNwYW4gY2xhc3M9XCJhdWRpYmxlXCI+TW9yZSBBY3Rpb25zPC9zcGFuPlxuICAgIDwvYnV0dG9uPlxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgU29ob1Rvb2xiYXJGbGV4TW9yZUJ1dHRvbkNvbXBvbmVudCB7XG4gIEBIb3N0QmluZGluZygnY2xhc3MubW9yZScpIGlzTW9yZUJ1dHRvbiA9IHRydWU7XG4gIEBIb3N0QmluZGluZygnY2xhc3MudG9vbGJhci1zZWN0aW9uJykgaXNUb29sYmFyU2VjdGlvbiA9IHRydWU7XG4gIEBJbnB1dCgpIGlzUGFnZUNoYW5nZXIgPSBmYWxzZTtcbiAgQElucHV0KCkgaXNEaXNhYmxlZCA9IGZhbHNlO1xuXG4gIEBJbnB1dCgpIG1vcmVCdXR0b25JZD86IHN0cmluZztcbiAgLyoqIEBkZXByZWNhdGVkIGRvZXNuJ3Qgc2VlbSB0byBiZSB1c2VkICoqL1xuICBASW5wdXQoKSBhamF4QmVmb3JlRnVuY3Rpb24/OiBGdW5jdGlvbjtcbiAgLyoqIEBkZXByZWNhdGVkIGRvZXNuJ3Qgc2VlbSB0byBiZSB1c2VkICoqL1xuXG4gIEBJbnB1dCgpIG1lbnVJZD86IHN0cmluZztcbn1cblxuLyoqXG4gKiBzb2hvIHRvb2xiYXIgZmxleCBwYWdlIHRpdGxlLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdbc29oby10b29sYmFyLWZsZXgtcGFnZS10aXRsZV0nLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBTb2hvVG9vbGJhckZsZXhQYWdlVGl0bGVDb21wb25lbnQge1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLnBhZ2UtdGl0bGUnKSBpc1BhZ2VUaXRsZSA9IHRydWU7XG59XG5cbi8qKlxuICogc29obyB0b29sYmFyIGZsZXggc2VjdGlvbiB0aXRsZS5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnW3NvaG8tdG9vbGJhci1mbGV4LXNlY3Rpb24tdGl0bGVdJywgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgU29ob1Rvb2xiYXJGbGV4U2VjdGlvblRpdGxlQ29tcG9uZW50IHtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5zZWN0aW9uLXRpdGxlJykgaXNTZWN0aW9uVGl0bGUgPSB0cnVlO1xufVxuXG4vKipcbiAqIEdlbmVyaWMgc29obyB0b29sYmFyIGZsZXggc2VjdGlvblxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzb2hvLXRvb2xiYXItZmxleC1zZWN0aW9uJywgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgU29ob1Rvb2xiYXJGbGV4U2VjdGlvbkNvbXBvbmVudCB7XG4gIEBIb3N0QmluZGluZygnY2xhc3MudG9vbGJhci1zZWN0aW9uJykgaXNUb29sYmFyU2VjdGlvbiA9IHRydWU7XG4gIEBJbnB1dCgpIEBIb3N0QmluZGluZygnY2xhc3MuZmF2b3InKSBpc1RpdGxlRmF2b3IgPSBmYWxzZTtcbiAgQElucHV0KCkgQEhvc3RCaW5kaW5nKCdjbGFzcy50aXRsZScpIGlzVGl0bGUgPSBmYWxzZTtcbiAgQElucHV0KCkgQEhvc3RCaW5kaW5nKCdjbGFzcy5idXR0b25zZXQnKSBpc0J1dHRvblNldCA9IGZhbHNlO1xuICBASW5wdXQoKSBASG9zdEJpbmRpbmcoJ2NsYXNzLnNlYXJjaCcpIGlzU2VhcmNoID0gZmFsc2U7XG59XG5cbi8qKlxuICogU29obyB0b29sYmFyIE5hdmlnYXRpb24gYnV0dG9uXG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2J1dHRvbltzb2hvLXRvb2xiYXItZmxleC1uYXYtYnV0dG9uXScsIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgdGVtcGxhdGU6IGBcbiAgICA8c3ZnIGNsYXNzPVwiaWNvblwiIGZvY3VzYWJsZT1cImZhbHNlXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCIgcm9sZT1cInByZXNlbnRhdGlvblwiPlxuICAgICAgPHVzZSBocmVmPVwiI2ljb24tbWVudVwiPjwvdXNlPlxuICAgIDwvc3ZnPlxuICAgIDxzcGFuIGNsYXNzPVwiYXVkaWJsZVwiPlxuICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gICAgPC9zcGFuPlxuICAgICAgICAgICAgYCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFNvaG9Ub29sYmFyRmxleE5hdkJ1dHRvbkNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmJ0bi1pY29uJykgaXNJY29uQnV0dG9uID0gdHJ1ZTtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hcHBsaWNhdGlvbi1tZW51LXRyaWdnZXInKSBpc0FwcE1lbnVUcmlnZ2VyID0gdHJ1ZTtcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLnR5cGUnKSB0eXBlQXR0ciA9ICdidXR0b24nO1xuXG4gIC8qKiBSZWZlcmVuY2UgdG8gdGhlIFNvaG8gY29udHJvbCBhcGkuICovXG4gIHByaXZhdGUgYnV0dG9uPzogU29ob0J1dHRvblN0YXRpYyB8IG51bGw7XG5cbiAgcHJpdmF0ZSBfYnV0dG9uT3B0aW9uczogU29ob0J1dHRvbk9wdGlvbnMgPSB7fTtcblxuICAvKiogUmVmZXJlbmNlIHRvIHRoZSBqUXVlcnkgY29udHJvbC4gKi9cbiAgcHJpdmF0ZSBqUXVlcnlFbGVtZW50PzogSlF1ZXJ5O1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZiwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkge1xuICB9XG5cbiAgQElucHV0KCkgc2V0IGJ1dHRvbk9wdGlvbnMoYnV0dG9uT3B0aW9uczogU29ob0J1dHRvbk9wdGlvbnMpIHtcbiAgICBBcmd1bWVudEhlbHBlci5jaGVja05vdE51bGwoJ2J1dHRvbk9wdGlvbnMnLCBidXR0b25PcHRpb25zKTtcblxuICAgIHRoaXMuX2J1dHRvbk9wdGlvbnMgPSBidXR0b25PcHRpb25zO1xuICAgIGlmICh0aGlzLmJ1dHRvbikge1xuICAgICAgLy8gdG9kbzogaG93IHRvIHVwZGF0ZSB0aGUgYnV0dG9uIHdoZW4gb3B0aW9ucyBjaGFuZ2U/XG4gICAgfVxuICB9XG5cbiAgZ2V0IGJ1dHRvbk9wdGlvbnMoKTogU29ob0J1dHRvbk9wdGlvbnMge1xuICAgIHJldHVybiB0aGlzLl9idXR0b25PcHRpb25zO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuXG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQgPSBqUXVlcnkodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50LmJ1dHRvbih0aGlzLl9idXR0b25PcHRpb25zKTtcblxuICAgICAgdGhpcy5idXR0b24gPSB0aGlzLmpRdWVyeUVsZW1lbnQuZGF0YSgnYnV0dG9uJyk7XG4gICAgfSk7XG4gIH1cblxuXG4gIHVwZGF0ZWQoc2V0dGluZ3M/OiBTb2hvQnV0dG9uT3B0aW9ucykge1xuICAgIGlmIChzZXR0aW5ncykge1xuICAgICAgdGhpcy5fYnV0dG9uT3B0aW9ucyA9IFNvaG8udXRpbHMubWVyZ2VTZXR0aW5ncygodGhpcy5lbGVtZW50IGFzIGFueSlbMF0sIHNldHRpbmdzLCB0aGlzLl9idXR0b25PcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuYnV0dG9uKSB7XG4gICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgIHRoaXMuYnV0dG9uPy51cGRhdGVkKHRoaXMuX2J1dHRvbk9wdGlvbnMpXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgbWFpbiBzb2hvIHRvb2xiYXIgZmxleCBjb21wb25lbnRcbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc29oby10b29sYmFyLWZsZXgsIGRpdltzb2hvLXRvb2xiYXItZmxleF0nLFxuICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgU29ob1Rvb2xiYXJGbGV4Q29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mbGV4LXRvb2xiYXInKSBpc1Rvb2xiYXIgPSB0cnVlO1xuXG4gIC8qKlxuICAgKiBBbGxvd3MgYSBtb3JlTWVudVNldHRpbmdzIG9iamVjdCB0byBiZSBwcm9wYWdhdGVkIGRvd24gaW50byB0aGUgVG9vbGJhciBGbGV4LlxuICAgKiB0aGUgalF1ZXJ5IFRvb2xiYXIgRmxleCBjb21wb25lbnQgaGFuZGxlcyBwYXNzaW5nIHRoZXNlIHNldHRpbmdzIGludG8gdGhlIE1vcmUgQWN0aW9uc1xuICAgKiBtZW51J3MgalF1ZXJ5IFBvcHVwbWVudS5cbiAgICovXG4gIEBJbnB1dCgpIHNldCBtb3JlTWVudUJlZm9yZU9wZW5GdW5jdGlvbihiZWZvcmVPcGVuOiBBamF4QmVmb3JlTW9yZU1lbnVPcGVuRnVuY3Rpb24pIHtcbiAgICBpZiAoIXRoaXMuX29wdGlvbnMubW9yZU1lbnVTZXR0aW5ncykge1xuICAgICAgdGhpcy5fb3B0aW9ucy5tb3JlTWVudVNldHRpbmdzID0ge307XG4gICAgfVxuICAgIHRoaXMuX29wdGlvbnMubW9yZU1lbnVTZXR0aW5ncy5iZWZvcmVPcGVuID0gYmVmb3JlT3BlbjtcblxuICAgIGlmICh0aGlzLnRvb2xiYXJGbGV4KSB7XG4gICAgICB0aGlzLnRvb2xiYXJGbGV4LnNldHRpbmdzLmJlZm9yZU1vcmVNZW51T3BlbiA9IGJlZm9yZU9wZW47XG4gICAgICB0aGlzLm1hcmtGb3JSZWZyZXNoKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqIEFkZCBleHRyYSBhdHRyaWJ1dGVzIGxpa2UgaWQncyB0byB0aGUgY29tcG9uZW50ICoqL1xuICBASW5wdXQoKSBzZXQgYXR0cmlidXRlcyhhdHRyaWJ1dGVzOiBBcnJheTxPYmplY3Q+IHwgT2JqZWN0KSB7XG4gICAgdGhpcy5fb3B0aW9ucy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgICBpZiAodGhpcy50b29sYmFyRmxleCkge1xuICAgICAgdGhpcy50b29sYmFyRmxleC5zZXR0aW5ncy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgICAgIHRoaXMubWFya0ZvclJlZnJlc2goKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVGhlIHNlbGVjdGVkIGV2ZW50IGlzIGZpcmVkIHdoZW4gYSB0b29sYmFyIGJ1dHRvbiBoYXMgYmVlbiBjbGlja2VkLlxuICAgKi9cbiAgQE91dHB1dCgpIHNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8U29ob1Rvb2xiYXJGbGV4U2VsZWN0ZWRFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPFNvaG9Ub29sYmFyRmxleFNlbGVjdGVkRXZlbnQ+KCk7XG5cbiAgcHJpdmF0ZSBfb3B0aW9uczogU29ob1Rvb2xiYXJGbGV4T3B0aW9ucyA9IHt9O1xuICBwcml2YXRlIGpRdWVyeUVsZW1lbnQ/OiBKUXVlcnk8SFRNTEVsZW1lbnQ+O1xuICBwcml2YXRlIHRvb2xiYXJGbGV4PzogU29ob1Rvb2xiYXJGbGV4U3RhdGljIHwgbnVsbDtcbiAgcHJpdmF0ZSB0b29sYmFyRmxleENoYW5nZWQ/OiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY2hhbmdlRGV0ZWN0b3I6IENoYW5nZURldGVjdG9yUmVmLFxuICAgIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lXG4gICkgeyB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcblxuICAgICAgLy8gQXNzaWduIGVsZW1lbnQgdG8gbG9jYWwgdmFyaWFibGVcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudCA9IGpRdWVyeSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCk7XG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQudG9vbGJhcmZsZXgodGhpcy5fb3B0aW9ucyk7XG4gICAgICB0aGlzLnRvb2xiYXJGbGV4ID0gdGhpcy5qUXVlcnlFbGVtZW50LmRhdGEoJ3Rvb2xiYXJGbGV4Jyk7XG5cbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5vbignc2VsZWN0ZWQnLCAoZXZlbnQ6IEpRdWVyeS5UcmlnZ2VyZWRFdmVudCwgaXRlbTogU29ob1Rvb2xiYXJGbGV4SXRlbVN0YXRpYykgPT5cbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHtcbiAgICAgICAgICB0aGlzLnNlbGVjdGVkLmVtaXQoeyBldmVudCwgaXRlbSB9KTtcbiAgICAgICAgfSkpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdDaGVja2VkKCkge1xuICAgIGlmICh0aGlzLnRvb2xiYXJGbGV4Q2hhbmdlZCkge1xuICAgICAgdGhpcy51cGRhdGVkKCk7XG4gICAgICB0aGlzLnRvb2xiYXJGbGV4Q2hhbmdlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIC8vIGNhbGwgb3V0c2lkZSB0aGUgYW5ndWxhciB6b25lIHNvIGNoYW5nZSBkZXRlY3Rpb24gaXNuJ3QgdHJpZ2dlcmVkIGJ5IHRoZSBzb2hvIGNvbXBvbmVudC5cbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBpZiAodGhpcy5qUXVlcnlFbGVtZW50KSB7XG4gICAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5vZmYoKTtcbiAgICAgICAgdGhpcy5qUXVlcnlFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMudG9vbGJhckZsZXgpIHtcbiAgICAgICAgdGhpcy50b29sYmFyRmxleC5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMudG9vbGJhckZsZXggPSBudWxsO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdXBkYXRlZChzZXR0aW5ncz86IFNvaG9Ub29sYmFyRmxleE9wdGlvbnMpIHtcbiAgICBpZiAodGhpcy50b29sYmFyRmxleCkge1xuICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gdGhpcy50b29sYmFyRmxleD8udXBkYXRlZChzZXR0aW5ncykpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYnV0dG9uc2V0IEFQSSBmb3IgdGhlIG1vZGFsIGRpYWxvZy5cbiAgICpcbiAgICogQHJldHVybnMgdGhlIGJ1dHRvbnNldCBBUEkgZm9yIHRoZSBtb2RhbCBkaWFsb2csIGlmIGluaXRpYWxpc2VkLlxuICAgKi9cbiAgcHVibGljIGdldCBidXR0b25zZXRBUElzKCk6IEFycmF5PFNvaG9CdXR0b25zZXRTdGF0aWM+IHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy50b29sYmFyRmxleCA/IHRoaXMudG9vbGJhckZsZXguYnV0dG9uc2V0QVBJcyA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgYnV0dG9uc2V0IEFQSSBmb3IgdGhlIG1vZGFsIGRpYWxvZy5cbiAgICpcbiAgICogQHJldHVybnMgdGhlIGJ1dHRvbnNldCBBUEkgZm9yIHRoZSBtb2RhbCBkaWFsb2csIGlmIGluaXRpYWxpc2VkLlxuICAgKi9cbiAgcHVibGljIGdldCBidXR0b25zZXRzKCk6IEFycmF5PEhUTUxFbGVtZW50PiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMudG9vbGJhckZsZXggPyB0aGlzLnRvb2xiYXJGbGV4LmJ1dHRvbnNldHMgOiB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBGb3IgdGVzdGluZ1xuICBnZXQgb3B0aW9ucygpOiBTb2hvVG9vbGJhckZsZXhPcHRpb25zIHtcbiAgICByZXR1cm4gdGhpcy5fb3B0aW9ucztcbiAgfVxuXG4gIHByaXZhdGUgbWFya0ZvclJlZnJlc2goKSB7XG4gICAgdGhpcy50b29sYmFyRmxleENoYW5nZWQgPSB0cnVlO1xuXG4gICAgdGhpcy5jaGFuZ2VEZXRlY3Rvci5tYXJrRm9yQ2hlY2soKTtcbiAgfVxufVxuIl19
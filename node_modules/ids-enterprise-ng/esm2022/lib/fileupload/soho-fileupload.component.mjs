import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoFileUploadComponent {
    get isFileUpload() {
        return true;
    }
    get isFileUploadType() {
        return 'file';
    }
    // -------------------------------------------
    // Component Input
    // -------------------------------------------
    set disabled(value) {
        this.isDisabled = value;
        this.isDisabled = false;
        this.isReadOnly = false;
        if (this.fileUpload) {
            if (value) {
                this.fileUpload.disable();
            }
            else {
                this.fileUpload.enable();
            }
        }
        this.changeDetectorRef.markForCheck();
    }
    get disabled() {
        return this.isDisabled;
    }
    set readonly(value) {
        this.isReadOnly = value;
        if (this.fileUpload) {
            if (value) {
                this.fileUpload.readonly();
                this.isReadOnly = true;
            }
            else {
                this.fileUpload.enable();
                this.isDisabled = false;
                this.isReadOnly = false;
            }
        }
        this.changeDetectorRef.markForCheck();
    }
    get readonly() {
        return this.isReadOnly;
    }
    constructor(element, changeDetectorRef, ngZone) {
        this.element = element;
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        // -------------------------------------------
        // Component Output
        // -------------------------------------------
        /**
         * Called when the fileupload value changes
         *
         * @todo replace override of native attribute
         */
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.change = new EventEmitter();
        this.options = {};
        /** Called when the value changes. */
        this.changeEvent = new EventEmitter();
    }
    set attributes(attributes) {
        this.options.attributes = attributes;
        if (this.jQueryElement) {
            this.options.attributes = this.options.attributes;
            this.jQueryElement?.data('fileupload').updated(this.options);
        }
    }
    get attributes() {
        return this.options.attributes;
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            // Initialize the SohoXi Control
            const $fileUpload = this.jQueryElement.fileupload(this.options);
            this.fileUpload = $fileUpload.data('fileupload');
            /**
             * Bind to jQueryElement's events
             */
            this.jQueryElement.on('change', (event) => this.ngZone.run(() => this.changeEvent.emit(event)));
        });
    }
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        if (this.jQueryElement) {
            this.jQueryElement.off();
            this.jQueryElement = undefined;
        }
        if (this.fileUpload) {
            this.fileUpload.destroy();
            this.fileUpload = null;
        }
    }
    clearUploadFile() {
        if (this.fileUpload) {
            this.fileUpload.clearUploadFile();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoFileUploadComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoFileUploadComponent, selector: "input[soho-fileupload]", inputs: { disabled: "disabled", readonly: "readonly", attributes: "attributes" }, outputs: { change: "change", changeEvent: "changeEvent" }, host: { properties: { "class.fileupload": "this.isFileUpload", "attr.type": "this.isFileUploadType" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoFileUploadComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[soho-fileupload]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, propDecorators: { isFileUpload: [{
                type: HostBinding,
                args: ['class.fileupload']
            }], isFileUploadType: [{
                type: HostBinding,
                args: ['attr.type']
            }], disabled: [{
                type: Input
            }], readonly: [{
                type: Input
            }], change: [{
                type: Output
            }], changeEvent: [{
                type: Output
            }], attributes: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
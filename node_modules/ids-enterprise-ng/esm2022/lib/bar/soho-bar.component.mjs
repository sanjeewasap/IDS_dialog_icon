import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoBarComponent {
    get isBar() {
        return true;
    }
    /** Defines the data to use, must be specified for this component. */
    set dataset(dataset) {
        this.options.dataset = dataset;
        if (this.bar) {
            this.bar.settings.dataset = dataset;
            this.updateRequired = true;
        }
    }
    /** Chart Type */
    set type(value) {
        this.options.type = value;
        if (this.bar) {
            this.bar.settings.type = value;
            this.updateRequired = true;
        }
    }
    /** Default is a single or stacked chart. */
    set isStacked(value) {
        this.options.isStacked = value;
        if (this.bar) {
            this.bar.settings.isStacked = value;
            this.updateRequired = true;
        }
    }
    /** If true its a 100% bar chart. */
    set isNormalized(value) {
        this.options.isNormalized = value;
        if (this.bar) {
            this.bar.settings.isNormalized = value;
            this.updateRequired = true;
        }
    }
    /** If true its a grouped bar chart. */
    set isGrouped(value) {
        this.options.isGrouped = value;
        if (this.bar) {
            this.bar.settings.isGrouped = value;
            this.updateRequired = true;
        }
    }
    /** If false the legend will not be shown. */
    set showLegend(value) {
        this.options.showLegend = value;
        if (this.bar) {
            this.bar.settings.showLegend = value;
            this.updateRequired = true;
        }
    }
    /** true|false - will do or not do the animation, 'initial' will do only first time the animation. */
    set animate(value) {
        this.options.animate = value;
        if (this.bar) {
            this.bar.settings.animate = value;
            this.updateRequired = true;
        }
    }
    /** If true, the component will not resize when resizing the page. */
    set redrawOnResize(value) {
        this.options.redrawOnResize = value;
        if (this.bar) {
            this.bar.settings.redrawOnResize = value;
            this.updateRequired = true;
        }
    }
    /** Use d3 format some examples can be found on http://bit.ly/1IKVhHh */
    set formatterString(value) {
        this.options.formatterString = value;
        if (this.bar) {
            this.bar.settings.formatterString = value;
            this.updateRequired = true;
        }
    }
    /** The d3 axis format. */
    set format(value) {
        this.options.format = value;
        if (this.bar) {
            this.bar.settings.format = value;
            this.updateRequired = true;
        }
    }
    /** A tooltip for the whole chart. */
    set tooltip(value) {
        this.options.tooltip = value;
        if (this.bar) {
            this.bar.settings.tooltip = value;
            this.updateRequired = true;
        }
    }
    /** If true log scale is enabled. */
    set useLogScale(value) {
        this.options.useLogScale = value;
        if (this.bar) {
            this.bar.settings.useLogScale = value;
            this.updateRequired = true;
        }
    }
    /** Settings for the chart ticks. Can set ticks: {format: d3Format, number: n} */
    set ticks(value) {
        this.options.ticks = value;
        if (this.bar) {
            this.bar.settings.ticks = value;
            this.updateRequired = true;
        }
    }
    /** Show the in the axis lines or not. */
    set showLines(value) {
        this.options.showLines = value;
        if (this.bar) {
            this.bar.settings.showLines = value;
            this.updateRequired = true;
        }
    }
    /** How far out than the outer circle should the labels be placed, this
     * may be useful to adjust for some labels. */
    set labelFactor(value) {
        this.options.labelFactor = value;
        if (this.bar) {
            this.bar.settings.labelFactor = value;
            this.updateRequired = true;
        }
    }
    /** The number of pixels after which a label needs to be given a new line.
     * You may want to change this based on label data. */
    set wrapWidth(value) {
        this.options.wrapWidth = value;
        if (this.bar) {
            this.bar.settings.wrapWidth = value;
            this.updateRequired = true;
        }
    }
    /** If true chart height will fit in parent available height. */
    set fitHeight(value) {
        this.options.fitHeight = value;
        if (this.bar) {
            this.bar.settings.fitHeight = value;
            this.updateRequired = true;
        }
    }
    /** An empty message will be displayed when there is no chart data. */
    set emptyMessage(value) {
        this.options.emptyMessage = value;
        if (this.bar) {
            this.bar.settings.emptyMessage = value;
            this.updateRequired = true;
        }
    }
    /**
     * Add extra attributes like id's to the component
     *
     * @param attributes - the array or object of attributes to add
     */
    set attributes(attributes) {
        this.options.attributes = attributes;
        if (this.bar) {
            this.bar.settings.attributes = attributes;
            this.updateRequired = true;
        }
    }
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        /** Options. */
        this.options = {};
        /** Events */
        this.selected = new EventEmitter();
        this.unselected = new EventEmitter();
        this.rendered = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.dblclick = new EventEmitter();
        /**
         * @todo replace override of native attribute
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.contextmenu = new EventEmitter();
        this.updateRequired = false;
    }
    /** Setup */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.chart(this.options);
            this.bar = this.jQueryElement.data('bar');
            // Setup the events
            this.jQueryElement.on('selected', (_e, args) => this.ngZone.run(() => this.selected.emit(args)));
            this.jQueryElement.on('unselected', (_e, args) => this.ngZone.run(() => this.unselected.emit(args)));
            this.jQueryElement.on('rendered', (...args) => this.ngZone.run(() => this.rendered.emit(args)));
            this.jQueryElement.on('contextmenu', (...args) => this.ngZone.run(() => this.contextmenu?.emit(args)));
            this.jQueryElement.on('dblclick', (_e, args) => this.ngZone.run(() => this.dblclick.emit(args)));
        });
    }
    ngAfterViewChecked() {
        if (this.bar && this.updateRequired) {
            this.ngZone.runOutsideAngular(() => this.bar?.updated(this.bar.settings));
            this.updateRequired = false;
        }
    }
    updated() {
        this.ngZone.runOutsideAngular(() => {
            this.options.type = 'bar';
            this.jQueryElement?.chart(this.options);
            this.bar = this.jQueryElement?.data('bar');
        });
    }
    /** Tear Down */
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.bar) {
                this.bar.destroy();
                this.bar = null;
            }
        });
    }
    setSelected(selected) {
        this.ngZone.runOutsideAngular(() => this.bar?.setSelected(selected));
    }
    toggleSelected(selected) {
        this.ngZone.runOutsideAngular(() => this.bar?.toggleSelected(selected));
    }
    getSelected() {
        return this.ngZone.runOutsideAngular(() => this.bar.getSelected());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoBarComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoBarComponent, selector: "[soho-bar]", inputs: { dataset: "dataset", type: "type", isStacked: "isStacked", isNormalized: "isNormalized", isGrouped: "isGrouped", showLegend: "showLegend", animate: "animate", redrawOnResize: "redrawOnResize", formatterString: "formatterString", format: "format", tooltip: "tooltip", useLogScale: "useLogScale", ticks: "ticks", showLines: "showLines", labelFactor: "labelFactor", wrapWidth: "wrapWidth", fitHeight: "fitHeight", emptyMessage: "emptyMessage", attributes: "attributes" }, outputs: { selected: "selected", unselected: "unselected", rendered: "rendered", dblclick: "dblclick", contextmenu: "contextmenu" }, host: { properties: { "class.chart-container.bar-chart": "this.isBar" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoBarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-bar]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isBar: [{
                type: HostBinding,
                args: ['class.chart-container.bar-chart']
            }], dataset: [{
                type: Input
            }], type: [{
                type: Input
            }], isStacked: [{
                type: Input
            }], isNormalized: [{
                type: Input
            }], isGrouped: [{
                type: Input
            }], showLegend: [{
                type: Input
            }], animate: [{
                type: Input
            }], redrawOnResize: [{
                type: Input
            }], formatterString: [{
                type: Input
            }], format: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], useLogScale: [{
                type: Input
            }], ticks: [{
                type: Input
            }], showLines: [{
                type: Input
            }], labelFactor: [{
                type: Input
            }], wrapWidth: [{
                type: Input
            }], fitHeight: [{
                type: Input
            }], emptyMessage: [{
                type: Input
            }], attributes: [{
                type: Input
            }], selected: [{
                type: Output
            }], unselected: [{
                type: Output
            }], rendered: [{
                type: Output
            }], dblclick: [{
                type: Output
            }], contextmenu: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
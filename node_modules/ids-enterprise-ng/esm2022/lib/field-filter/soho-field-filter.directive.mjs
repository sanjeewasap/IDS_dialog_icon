import { Directive, EventEmitter, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoFieldFilterDirective {
    set fieldSettings(settings) {
        if (settings) {
            this._settings = settings;
            this.markForRefresh();
        }
    }
    set fieldDropdownDataSet(dataset) {
        if (dataset) {
            this._settings.dataset = dataset;
            this.markForRefresh();
        }
    }
    set dropdownOpts(options) {
        if (options) {
            this._settings.dropdownOpts = options;
            this.markForRefresh();
        }
    }
    set template(template) {
        if (template) {
            this._settings.template = template;
            this.markForRefresh();
        }
    }
    set selectedFilterType(type) {
        this.setFilterType(type);
    }
    constructor(ref, element, ngZone) {
        this.ref = ref;
        this.element = element;
        this.ngZone = ngZone;
        this.filtered = new EventEmitter();
        // default to only equals
        this._settings = {
            dataset: [
                { value: 'equals', text: 'Equals', icon: 'filter-equals' }
            ]
        };
    }
    ngAfterViewChecked() {
        if (this.runUpdatedOnCheck) {
            this.ngZone.runOutsideAngular(() => {
                // We need to update the control AFTER the model
                // has been updated (assuming there is one), so
                // execute updated after angular has generated
                // the model and the view markup.
                if (this.fieldFilter) {
                    this.fieldFilter.updated(this._settings);
                }
                this.runUpdatedOnCheck = false;
            });
        }
    }
    ngAfterViewInit() {
        // -----------------------------------------------------------------------
        // Must run outside angular so that timeouts in the soho code won't cause
        // a ViewCheck in angular. Not running outside angular results in
        // unnecessary cycles causing the app to lock up (when lots of field-filter
        // objects are used) until all the timeouts have resolved.
        // -----------------------------------------------------------------------
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.fieldfilter(this._settings);
            this.fieldFilter = this.jQueryElement.data('fieldfilter');
            this.jQueryElement.on('filtered', (event, args) => this.onFiltered(event, args));
        });
    }
    /**
     * Get current filter type
     * returns {object} The current filter type
     */
    getFilterType() {
        return this.ngZone.runOutsideAngular(() => this.fieldFilter?.getFilterType());
    }
    /**
     * Set filter type to given value
     * param {number|string} value to be set, index or value.
     * returns {void}
     */
    setFilterType(value) {
        if (!value) {
            return;
        }
        // Do this if jQueryElement has been built already
        if (this.fieldFilter) {
            this.ngZone.runOutsideAngular(() => this.fieldFilter?.setFilterType(value));
            return;
        }
        // Otherwise, as long as type is SohoFieldFilterOperator, set the selected attribute
        if (typeof value !== 'number') {
            this._settings.dataset?.forEach((filterOption) => {
                filterOption.selected = (filterOption.value === value);
            });
        }
    }
    /** Destructor. */
    ngOnDestroy() {
        if (this.fieldFilter) {
            this.ngZone.runOutsideAngular(() => {
                this.jQueryElement?.off();
                this.fieldFilter?.destroy();
                this.fieldFilter = null;
            });
        }
    }
    markForRefresh() {
        // Run updated on the next updated check.
        this.runUpdatedOnCheck = true;
        // ... make sure the change detector kicks in, otherwise if the inputs
        // were change programmatically the component may not be eligible for
        // updating.
        this.ref.markForCheck();
    }
    onFiltered(event, args) {
        // ensure we are back in the angular zone
        this.ngZone.run(() => {
            event.filterOption = args.data;
            this.filtered.emit(event);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoFieldFilterDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: SohoFieldFilterDirective, selector: "[soho-field-filter]", inputs: { fieldSettings: "fieldSettings", fieldDropdownDataSet: "fieldDropdownDataSet", dropdownOpts: "dropdownOpts", template: "template", selectedFilterType: "selectedFilterType" }, outputs: { filtered: "filtered" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoFieldFilterDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[soho-field-filter]' // eslint-disable-line
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { fieldSettings: [{
                type: Input
            }], fieldDropdownDataSet: [{
                type: Input
            }], dropdownOpts: [{
                type: Input
            }], template: [{
                type: Input
            }], selectedFilterType: [{
                type: Input
            }], filtered: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoLineComponent {
    get isLine() {
        return true;
    }
    /** Defines the data to use, must be specified for this component. */
    set dataset(dataset) {
        this.options.dataset = dataset;
        if (this.line) {
            this.line.settings.dataset = dataset;
            this.updateRequired = true;
        }
    }
    set tooltip(value) {
        this.options.tooltip = value;
        if (this.line) {
            this.line.settings.tooltip = value;
            this.updateRequired = true;
        }
    }
    set isArea(value) {
        this.options.isArea = value;
        if (this.line) {
            this.line.settings.isArea = value;
            this.updateRequired = true;
        }
    }
    set isBubble(value) {
        this.options.isBubble = value;
        if (this.line) {
            this.line.settings.isBubble = value;
            this.updateRequired = true;
        }
    }
    set showLegend(value) {
        this.options.showLegend = value;
        if (this.line) {
            this.line.settings.showLegend = value;
            this.updateRequired = true;
        }
    }
    set xAxis(value) {
        this.options.xAxis = value;
        if (this.line) {
            this.line.settings.xAxis = value;
            this.updateRequired = true;
        }
    }
    set yAxis(value) {
        this.options.yAxis = value;
        if (this.line) {
            this.line.settings.yAxis = value;
            this.updateRequired = true;
        }
    }
    set hideDots(value) {
        this.options.hideDots = value;
        if (this.line) {
            this.line.settings.hideDots = value;
            this.updateRequired = true;
        }
    }
    set axisLabels(value) {
        this.options.axisLabels = value;
        if (this.line) {
            this.line.settings.axisLabels = value;
            this.updateRequired = true;
        }
    }
    set animate(value) {
        this.options.animate = value;
        if (this.line) {
            this.line.settings.animate = value;
            this.updateRequired = true;
        }
    }
    set redrawOnResize(value) {
        this.options.redrawOnResize = value;
        if (this.line) {
            this.line.settings.redrawOnResize = value;
            this.updateRequired = true;
        }
    }
    set dots(value) {
        this.options.dots = value;
        if (this.line) {
            this.line.settings.dots = value;
            this.updateRequired = true;
        }
    }
    set formatterString(value) {
        this.options.formatterString = value;
        if (this.line) {
            this.line.settings.formatterString = value;
            this.updateRequired = true;
        }
    }
    set emptyMessage(value) {
        this.options.emptyMessage = value;
        if (this.line) {
            this.line.settings.emptyMessage = value;
            this.updateRequired = true;
        }
    }
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        /** Options. */
        this.options = {};
        this.selected = new EventEmitter();
        this.unselected = new EventEmitter();
        this.rendered = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.dblclick = new EventEmitter();
        /**
         * @todo replace override of native attribute
         */
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.contextmenu = new EventEmitter();
        this.updateRequired = false;
    }
    /** Setup */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.options.type = 'line';
            this.jQueryElement.chart(this.options);
            this.line = this.jQueryElement.data('line');
            // Setup the events
            this.jQueryElement.on('selected', (_e, args) => this.ngZone.run(() => this.selected.emit(args)));
            this.jQueryElement.on('unselected', (_e, args) => this.ngZone.run(() => this.unselected.emit(args)));
            this.jQueryElement.on('rendered', (...args) => this.ngZone.run(() => this.rendered.emit(args)));
            this.jQueryElement.on('contextmenu', (...args) => this.ngZone.run(() => this.contextmenu?.emit(args)));
            this.jQueryElement.on('dblclick', (_e, args) => this.ngZone.run(() => this.dblclick.emit(args)));
        });
    }
    ngAfterViewChecked() {
        if (this.line && this.updateRequired) {
            this.ngZone.runOutsideAngular(() => this.line?.updated(this.line.settings));
            this.updateRequired = false;
        }
    }
    updated() {
        this.ngZone.runOutsideAngular(() => {
            this.options.type = 'line';
            this.jQueryElement?.chart(this.options);
            this.line = this.jQueryElement?.data('line');
        });
    }
    /** Tear Down */
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.line) {
                this.line.destroy();
                this.line = null;
            }
        });
    }
    setSelected(selected) {
        this.ngZone.runOutsideAngular(() => this.line?.setSelected(selected));
    }
    toggleSelected(selected) {
        this.ngZone.runOutsideAngular(() => this.line?.toggleSelected(selected));
    }
    getSelected() {
        return this.ngZone.runOutsideAngular(() => this.line?.getSelected());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoLineComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoLineComponent, selector: "[soho-line]", inputs: { dataset: "dataset", tooltip: "tooltip", isArea: "isArea", isBubble: "isBubble", showLegend: "showLegend", xAxis: "xAxis", yAxis: "yAxis", hideDots: "hideDots", axisLabels: "axisLabels", animate: "animate", redrawOnResize: "redrawOnResize", dots: "dots", formatterString: "formatterString", emptyMessage: "emptyMessage" }, outputs: { selected: "selected", unselected: "unselected", rendered: "rendered", dblclick: "dblclick", contextmenu: "contextmenu" }, host: { properties: { "class.chart-container": "this.isLine" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoLineComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-line]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isLine: [{
                type: HostBinding,
                args: ['class.chart-container']
            }], dataset: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], isArea: [{
                type: Input
            }], isBubble: [{
                type: Input
            }], showLegend: [{
                type: Input
            }], xAxis: [{
                type: Input
            }], yAxis: [{
                type: Input
            }], hideDots: [{
                type: Input
            }], axisLabels: [{
                type: Input
            }], animate: [{
                type: Input
            }], redrawOnResize: [{
                type: Input
            }], dots: [{
                type: Input
            }], formatterString: [{
                type: Input
            }], emptyMessage: [{
                type: Input
            }], selected: [{
                type: Output
            }], unselected: [{
                type: Output
            }], rendered: [{
                type: Output
            }], dblclick: [{
                type: Output
            }], contextmenu: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
/**
 * Wrapper for the jQuery about control.
 */
export class SohoAboutRef {
    /**
     * Sets the whole options block for this modal dialog.
     *
     * @param options - the options to set.
     */
    options(options) {
        this._options = options || {};
        return this;
    }
    /**
     * Sets the appName on the about dialog
     *
     * @param appName - the application name
     */
    appName(appName) {
        this._options.appName = appName;
        return this;
    }
    /**
     * Sets the additional 'content' that the about dialog displays.
     *
     * @param content - the additional text content
     */
    content(content) {
        this._options.content = content;
        return this;
    }
    /**
     * Sets the copyrightYear of the about dialog.
     */
    copyrightYear(copyrightYear) {
        this._options.copyrightYear = copyrightYear;
        return this;
    }
    /**
     * Sets Whether or not to show the deviceSpecs
     *
     * @param deviceSpecs - if true; the about dialog will show device info
     */
    deviceSpecs(deviceSpecs) {
        this._options.deviceSpecs = deviceSpecs;
        return this;
    }
    /**
     * Sets The Additional productName
     *
     * @param productName - the product name
     */
    productName(productName) {
        this._options.productName = productName;
        return this;
    }
    /**
     * Sets The Additional productName
     *
     * @param productName - the product name
     */
    useDefaultCopyright(useDefaultCopyright) {
        this._options.useDefaultCopyright = useDefaultCopyright;
        return this;
    }
    /**
     * Sets about dialog version
     *
     * @param version - the semantic version no fx 4.0.1
     */
    version(version) {
        this._options.version = version;
        return this;
    }
    /**
     * Add extra attributes like id's to the component
     *
     * @param attributes - the array or object of attributes to add
     */
    attributes(attributes) {
        this._options.attributes = attributes;
        return this;
    }
    /**
     * Constructor.
     *
     * @param placeholder for the about dialog; defaults to the body.
     */
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.eventGuard = {};
        // -------------------------------------------
        // Default options block
        // -------------------------------------------
        /**
         * Cached options.
         */
        this._options = {};
        this._placeholder = $('body');
    }
    /**
     * Displays the about dialog.
     *
     * @return the dialog ref.
     */
    open() {
        // Returns the body!
        this._placeholder.about(this._options);
        // Need a better way of locating the about dialog dialog.
        this.jQueryElement = this._placeholder.find('.about');
        this._about = this.jQueryElement.data('about');
        this.jQueryElement?.off('beforeopen.about').on('beforeopen.about', ((event) => this.ngZone.run(() => this.onBeforeOpen(event))));
        this.jQueryElement?.off('close.about').on('close.about', ((event) => this.ngZone.run(() => this.onClose(event))));
        this.jQueryElement?.off('afterclose.about').on('afterclose.about', ((event) => this.ngZone.run(() => this.onAfterClose(event))));
        return this;
    }
    /**
     * Closes the about dialog, if open.
     *
     * @param dialogResult - optional result - held for the caller.
     */
    close() {
        if (this._about) {
            this._about.close();
        }
        return this;
    }
    /**
     * Registers a before open guard.
     *
     * @param eventFn - the function to call before openning the dialog.
     */
    beforeOpen(eventFn) {
        this.eventGuard.beforeOpen = eventFn;
        return this;
    }
    /**
     * Registers a closed guard.
     *
     * @param eventFn - the function to call before openning the dialog.
     */
    closed(eventFn) {
        this.eventGuard.closed = eventFn;
        return this;
    }
    /**
     * Registers a after close guard.
     *
     * @param eventFn - the function to call before openning the dialog.
     */
    afterClose(eventFn) {
        this.eventGuard.afterClose = eventFn;
        return this;
    }
    /**
     * Handles the 'beforeOpen' event, fired before the modal dialog
     * has been opened.
     *
     * @param event - full event object.
     *
     * @return true if the dialog can be opened; otherwise false if veoted.
     */
    onBeforeOpen(_event) {
        const fn = this.eventGuard?.beforeOpen;
        return fn ? fn.call(this.eventGuard, this) : true;
    }
    /**
     * Handles the 'closed' event, fired before the modal dialog
     * has been opened.
     *
     * @param event - full event object.
     *
     * @return true if the dialog can be opened; otherwise false if veoted.
     */
    onClose(_event) {
        const fn = this.eventGuard?.closed;
        return fn ? fn.call(this.eventGuard, this) : true;
    }
    /**
     * Handles the 'afterClose' event, fired before the modal dialog
     * has been opened.
     *
     * @param event - full event object.
     *
     * @return true if the dialog can be opened; otherwise false if veoted.
     */
    onAfterClose(_event) {
        const fn = this.eventGuard?.afterClose;
        return fn ? fn.call(this.eventGuard, this) : true;
    }
}
//# sourceMappingURL=data:application/json;base64,
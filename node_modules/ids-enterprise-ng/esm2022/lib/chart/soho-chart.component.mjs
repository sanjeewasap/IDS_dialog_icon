import { Component, Input, EventEmitter, Output, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoChartComponent {
    set chartOptions(chartOptions) {
        this._chartOptions = chartOptions;
        if (this.jQueryElement) {
            this.updateRequired = true;
        }
    }
    set selectedIndex(index) {
        this.setSelectRef(index);
        // this.setSelectDataIndex(index);
        //
        // if (this.jQueryElement) {
        //   this.updated();
        // }
    }
    set dataSet(dataset) {
        this._chartOptions.dataset = dataset;
        if (this.jQueryElement) {
            this.updateRequired = true;
        }
    }
    set type(type) {
        this._chartOptions.type = type;
    }
    set axisLabels(axisLabels) {
        this._chartOptions.axisLabels = axisLabels;
    }
    set showLegend(showLegend) {
        this._chartOptions.showLegend = showLegend;
    }
    set hideLabels(hideLabels) {
        if (this._chartOptions.labels) {
            this._chartOptions.labels.hideLabels = !hideLabels;
        }
        else {
            this._chartOptions['labels'] = { hideLabels: !hideLabels };
        }
    }
    set formatterString(formatterString) {
        this._chartOptions.formatterString = formatterString;
    }
    set legendFormatter(legendFormatter) {
        this._chartOptions.legendFormatter = legendFormatter;
    }
    set chartLabel(chartLabel) {
        this._chartOptions.chartLabel = chartLabel;
    }
    set chartredrawOnResizeLabel(redrawOnResize) {
        this._chartOptions.redrawOnResize = redrawOnResize;
    }
    set chartAnimate(animate) {
        this._chartOptions.animate = animate;
    }
    constructor(elementRef, ngZone) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        // ------------------------------------------------------------------------
        // @Outputs
        // ------------------------------------------------------------------------
        this.selected = new EventEmitter();
        this.unselected = new EventEmitter();
        this.rendered = new EventEmitter();
        /**
         * @todo replace override of native attribute
         */
        // eslint-disable-next-line @angular-eslint/no-output-rename, @angular-eslint/no-output-native
        this.contextmenu = new EventEmitter();
        // An internal chartOptions object that gets updated by using
        // the component's Inputs()
        this._chartOptions = { animate: true };
        this.updateRequired = false;
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // Wrap for later.
            this.jQueryElement = jQuery(this.elementRef.nativeElement);
            this.jQueryElement.chart(this._chartOptions);
            this.chart = this.jQueryElement.data('chart');
            // bind to jquery events and emit as angular events
            this.jQueryElement.on('selected', (event, ui, data) => this.ngZone.run(() => this.selected.emit({ event, ui, data })));
            this.jQueryElement.on('unselected', (event, ui, data) => this.ngZone.run(() => this.unselected.emit({ event, ui, data })));
            this.jQueryElement.on('rendered', (event, ui, data) => this.ngZone.run(() => this.rendered.emit({ event, ui, data })));
            this.jQueryElement.on('contextmenu', (event, ui, data) => this.ngZone.run(() => this.contextmenu?.emit({ event, ui, data })));
        });
    }
    ngAfterViewChecked() {
        if (this.updateRequired) {
            this.updated();
            this.updateRequired = false;
        }
    }
    ngOnDestroy() {
    }
    getChartOptions() {
        return this._chartOptions;
    }
    updated() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement?.chart(this._chartOptions);
            this.chart = this.jQueryElement?.data('chart');
        });
    }
    getSelected() {
        if (this.jQueryElement) {
            return this.ngZone.runOutsideAngular(() => this.chart?.getSelected());
        }
        return undefined;
    }
    setSelectRef(ref) {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                let selectOptions;
                if (this._chartOptions.type?.indexOf('grouped') >= 0 || this._chartOptions.type === 'column') {
                    selectOptions = { groupName: 'ref', groupValue: ref };
                }
                else {
                    selectOptions = { fieldName: 'ref', fieldValue: ref };
                }
                this.chart?.setSelected(selectOptions);
            }
        });
    }
    setSelectDataIndex(selectIndex) {
        if (this.jQueryElement) {
            const dataArray = this._chartOptions.dataset || [];
            if (this._chartOptions.type === 'pie' || this._chartOptions.type === 'donut') {
                // eslint-disable-next-line @typescript-eslint/prefer-for-of
                for (let i = 0; i < dataArray.length; i++) {
                    const dataNode = dataArray[i];
                    for (let j = 0; j < dataNode.data.length; j++) {
                        const data = dataNode.data[j];
                        if (selectIndex === j) {
                            data.selected = true;
                        }
                        else {
                            delete data.selected;
                        }
                    }
                }
            }
            else {
                for (let i = 0; i < dataArray.length; i++) {
                    const data = dataArray[i];
                    if (selectIndex === i) {
                        data.selected = true;
                    }
                    else {
                        delete data.selected;
                    }
                }
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoChartComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoChartComponent, selector: "div[soho-chart]", inputs: { chartOptions: "chartOptions", selectedIndex: "selectedIndex", dataSet: "dataSet", type: "type", axisLabels: "axisLabels", showLegend: "showLegend", hideLabels: "hideLabels", formatterString: "formatterString", legendFormatter: "legendFormatter", chartLabel: "chartLabel", chartredrawOnResizeLabel: "chartredrawOnResizeLabel", chartAnimate: "chartAnimate" }, outputs: { selected: "selected", unselected: "unselected", rendered: "rendered", contextmenu: "contextmenu" }, ngImport: i0, template: ' ', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoChartComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'div[soho-chart]',
                    template: ' '
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { chartOptions: [{
                type: Input
            }], selectedIndex: [{
                type: Input
            }], dataSet: [{
                type: Input
            }], type: [{
                type: Input
            }], axisLabels: [{
                type: Input
            }], showLegend: [{
                type: Input
            }], hideLabels: [{
                type: Input
            }], formatterString: [{
                type: Input
            }], legendFormatter: [{
                type: Input
            }], chartLabel: [{
                type: Input
            }], chartredrawOnResizeLabel: [{
                type: Input
            }], chartAnimate: [{
                type: Input
            }], selected: [{
                type: Output
            }], unselected: [{
                type: Output
            }], rendered: [{
                type: Output
            }], contextmenu: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoSparklineComponent {
    get isSparkline() {
        return true;
    }
    /** Defines the data to use, must be specified for this component. */
    set dataset(dataset) {
        this.options.dataset = dataset;
        if (this.sparkline) {
            this.sparkline.settings.dataset = dataset;
            this.updateRequired = true;
        }
    }
    /** Chart Type */
    set type(value) {
        this.options.type = value;
        if (this.sparkline) {
            this.sparkline.settings.type = value;
            this.updateRequired = true;
        }
    }
    /** An array of color sequences in hex format fx #1D5F8A, defaulting to the correct standard colors. */
    set colors(value) {
        this.options.colors = value;
        if (this.sparkline) {
            this.sparkline.settings.colors = value;
            this.updateRequired = true;
        }
    }
    /** Shows dots on the data points. */
    set isDots(value) {
        this.options.isDots = value;
        if (this.sparkline) {
            this.sparkline.settings.isDots = value;
            this.updateRequired = true;
        }
    }
    /** Highlights the top value as peak with a special dot. */
    set isPeakDot(value) {
        this.options.isPeakDot = value;
        if (this.sparkline) {
            this.sparkline.settings.isPeakDot = value;
            this.updateRequired = true;
        }
    }
    /** Shows a continuous shading to highlight the min and max values. */
    set isMinMax(value) {
        this.options.isMinMax = value;
        if (this.sparkline) {
            this.sparkline.settings.isMinMax = value;
            this.updateRequired = true;
        }
    }
    /** Adds a median range display. */
    set isMedianRange(value) {
        this.options.isMedianRange = value;
        if (this.sparkline) {
            this.sparkline.settings.isMedianRange = value;
            this.updateRequired = true;
        }
    }
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        /** Options. */
        this.options = {};
        /* Events*/
        this.rendered = new EventEmitter();
        /**
         * @todo remove override of native element
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.contextmenu = new EventEmitter();
        this.updateRequired = false;
    }
    /** Setup */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.chart(this.options);
            this.sparkline = this.jQueryElement.data('sparkline');
            // Setup the events
            this.jQueryElement.on('rendered', (...args) => this.ngZone.run(() => this.rendered.emit(args)));
            this.jQueryElement.on('contextmenu', (...args) => this.ngZone.run(() => this.contextmenu?.emit(args)));
        });
    }
    ngAfterViewChecked() {
        if (this.sparkline && this.updateRequired) {
            this.ngZone.runOutsideAngular(() => this.sparkline?.updated(this.sparkline.settings));
            this.updateRequired = false;
        }
    }
    /** Tear Down */
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.sparkline) {
                this.sparkline.destroy();
                this.sparkline = null;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSparklineComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoSparklineComponent, selector: "[soho-sparkline]", inputs: { dataset: "dataset", type: "type", colors: "colors", isDots: "isDots", isPeakDot: "isPeakDot", isMinMax: "isMinMax", isMedianRange: "isMedianRange" }, outputs: { rendered: "rendered", contextmenu: "contextmenu" }, host: { properties: { "class.sparkline": "this.isSparkline" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSparklineComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-sparkline]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isSparkline: [{
                type: HostBinding,
                args: ['class.sparkline']
            }], dataset: [{
                type: Input
            }], type: [{
                type: Input
            }], colors: [{
                type: Input
            }], isDots: [{
                type: Input
            }], isPeakDot: [{
                type: Input
            }], isMinMax: [{
                type: Input
            }], isMedianRange: [{
                type: Input
            }], rendered: [{
                type: Output
            }], contextmenu: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
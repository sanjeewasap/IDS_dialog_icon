import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../icon/soho-icon.component";
export class SohoMenuButtonComponent {
    get isBtnMenu() {
        return true;
    }
    get buttonType() {
        return 'button';
    }
    set autoFocus(value) {
        this.options.autoFocus = value;
        if (this.menuButton) {
            this.menuButton.settings.autoFocus = value;
            this.markForRefresh();
        }
    }
    set mouseFocus(value) {
        this.options.mouseFocus = value;
        if (this.menuButton) {
            this.menuButton.settings.mouseFocus = value;
            this.markForRefresh();
        }
    }
    set showArrow(value) {
        this.options.showArrow = value;
        if (this.menuButton) {
            this.menuButton.settings.showArrow = value;
            this.markForRefresh();
        }
    }
    set returnFocus(value) {
        this.options.returnFocus = value;
        if (this.menuButton) {
            this.menuButton.settings.returnFocus = value;
            this.markForRefresh();
        }
    }
    get returnFocus() {
        return this.options.returnFocus || false;
    }
    set trigger(trigger) {
        this.options.trigger = trigger;
        if (this.menuButton) {
            this.menuButton.settings.trigger = trigger;
            this.markForRefresh();
        }
    }
    set menu(menu) {
        this.options.menu = menu;
        if (this.menuButton) {
            this.menuButton.settings.menu = menu;
            this.markForRefresh();
        }
    }
    set ajaxBeforeOpenFunction(fn) {
        this.options.beforeOpen = fn;
        if (this.menuButton) {
            this.menuButton.settings.beforeOpen = fn;
            // No update required.
        }
    }
    set hideMenuArrow(value) {
        this.buttonOptions.hideMenuArrow = value;
        if (this.button) {
            this.button.settings.hideMenuArrow = value;
            this.markForRefresh();
            // todo: menubutton.js updated() function doesn't seem to tear down the control and rebuild with new settings
        }
    }
    get hideMenuArrow() {
        return this.buttonOptions.hideMenuArrow;
    }
    set offset(value) {
        this.options.offset = value;
        if (this.menuButton) {
            this.menuButton.settings.offset = value;
            this.markForRefresh();
        }
    }
    get offset() {
        return this.menuButton?.settings?.offset || this.options.offset;
    }
    set attachToBody(value) {
        this.options.attachToBody = value;
        if (this.menuButton) {
            this.menuButton.settings.attachToBody = value;
            this.markForRefresh();
        }
    }
    get attachToBody() {
        return this.options.attachToBody;
    }
    set removeOnDestroy(value) {
        this.options.removeOnDestroy = value;
        if (this.menuButton) {
            this.menuButton.settings.removeOnDestroy = value;
            this.markForRefresh();
        }
    }
    get removeOnDestroy() {
        return this.options.removeOnDestroy;
    }
    set ripple(value) {
        this.buttonOptions.ripple = value;
        if (this.button) {
            this.button.settings.ripple = value;
            this.markForRefresh();
        }
    }
    get ripple() {
        return this.button?.settings?.ripple || this.buttonOptions.ripple;
    }
    constructor(element, ref, ngZone) {
        this.element = element;
        this.ref = ref;
        this.ngZone = ngZone;
        // -------------------------------------------
        // Default options block
        // -------------------------------------------
        this.options = {};
        this.buttonOptions = {};
        // -------------------------------------------
        // Component Output
        // -------------------------------------------
        this.selected = new EventEmitter();
        this.beforeopen = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-rename
        /**
         * @todo remove override of native element
         */
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.open$ = new EventEmitter();
        /**
         * @todo remove override of native element
         */
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.close$ = new EventEmitter();
    }
    ngAfterViewInit() {
        // call outside the angular zone so change detection
        // isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            // Wrap the element in a jQuery selector.
            this.jQueryElement = jQuery(this.element.nativeElement);
            // Initialise the soho-button widget.
            this.jQueryElement.button(this.buttonOptions);
            // Retrieve the soho button api.
            this.button = this.jQueryElement.data('button');
            // Initialise the SohoXi Control
            this.jQueryElement.popupmenu(this.options);
            // Retrieve the enterprise api
            this.menuButton = this.jQueryElement.data('popupmenu');
            // Initialize title attribute as a soho tooltip
            if (this.jQueryElement.has('[title]')) {
                this.jQueryElement.tooltip();
            }
            // Add listeners to emit events
            this.jQueryElement
                .on('selected', (e, args) => this.onSelected(e, args))
                .on('beforeopen', (e, args) => this.onBeforeOpen(e, args))
                .on('close', (e, args) => this.onClose(e, args))
                .on('open', (e, args) => this.onOpen(e, args));
        });
    }
    ngAfterViewChecked() {
        if (this.runUpdatedOnCheck) {
            this.ngZone.runOutsideAngular(() => {
                this.menuButton?.updated(this.options);
                this.button?.updated(this.buttonOptions);
                this.runUpdatedOnCheck = false;
            });
        }
    }
    onSelected(e, args) {
        this.ngZone.run(() => {
            this.selected.emit({ e, args });
        });
    }
    onBeforeOpen(e, args) {
        this.ngZone.run(() => {
            this.beforeopen.emit({ e, args });
        });
    }
    onClose(e, args) {
        this.ngZone.run(() => {
            this.close$.emit({ e, args });
        });
    }
    onOpen(e, args) {
        this.ngZone.run(() => {
            this.open$.emit({ e, args });
        });
    }
    updated(menuSettings, buttonSettings) {
        this.ngZone.runOutsideAngular(() => {
            this.menuButton?.updated(menuSettings);
            this.button?.updated(buttonSettings);
        });
    }
    teardown() {
        this.ngZone.runOutsideAngular(() => {
            this.menuButton?.teardown();
        });
    }
    close() {
        this.ngZone.runOutsideAngular(() => {
            this.menuButton?.close();
        });
    }
    open(event, ajaxReturn, useDelay) {
        this.ngZone.runOutsideAngular(() => {
            this.menuButton?.open(event, ajaxReturn, useDelay);
        });
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                // remove the event listeners on this element.
                this.jQueryElement.off();
                const tooltipApi = this.jQueryElement.data('tooltip');
                tooltipApi?.destroy?.();
                const popupmenuApi = this.jQueryElement.data('popupmenu');
                popupmenuApi?.destroy?.();
                this.jQueryElement = undefined;
            }
            // Destroy any widget resources.
            if (this.menuButton) {
                // @todo raise an issue on this failing on removeData!
                this.menuButton.destroy();
                this.menuButton = null;
            }
            if (this.button) {
                this.button.destroy();
                this.button = null;
            }
        });
    }
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh() {
        // Run updated on the next updated check.
        this.runUpdatedOnCheck = true;
        // ... make sure the change detector kicks in, otherwise if the inputs
        // were change programmatially the component may not be eligible for
        // updating.
        this.ref.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoMenuButtonComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoMenuButtonComponent, selector: "[soho-menu-button]", inputs: { icon: "icon", autoFocus: "autoFocus", mouseFocus: "mouseFocus", showArrow: "showArrow", returnFocus: "returnFocus", trigger: "trigger", menu: "menu", ajaxBeforeOpenFunction: "ajaxBeforeOpenFunction", hideMenuArrow: "hideMenuArrow", offset: "offset", attachToBody: "attachToBody", removeOnDestroy: "removeOnDestroy", ripple: "ripple" }, outputs: { selected: "selected", beforeopen: "beforeopen", open$: "open", close$: "close" }, host: { properties: { "class.btn-menu": "this.isBtnMenu", "attr.type": "this.buttonType" } }, ngImport: i0, template: "<svg soho-icon *ngIf=\"icon\" [icon]=\"icon\"></svg>\n<ng-content></ng-content>\n<svg *ngIf=\"!hideMenuArrow\" soho-icon [icon]=\"'dropdown'\"></svg>\n", styles: [":host ::ng-deep .icon.icon-dropdown:not([soho-icon]){display:none}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.SohoIconComponent, selector: "svg[soho-icon]", inputs: ["isEmptyState", "extraIconClass", "alert", "icon"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoMenuButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: '[soho-menu-button]', changeDetection: ChangeDetectionStrategy.OnPush, template: "<svg soho-icon *ngIf=\"icon\" [icon]=\"icon\"></svg>\n<ng-content></ng-content>\n<svg *ngIf=\"!hideMenuArrow\" soho-icon [icon]=\"'dropdown'\"></svg>\n", styles: [":host ::ng-deep .icon.icon-dropdown:not([soho-icon]){display:none}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, propDecorators: { isBtnMenu: [{
                type: HostBinding,
                args: ['class.btn-menu']
            }], buttonType: [{
                type: HostBinding,
                args: ['attr.type']
            }], selected: [{
                type: Output
            }], beforeopen: [{
                type: Output
            }], open$: [{
                type: Output,
                args: ['open']
            }], close$: [{
                type: Output,
                args: ['close']
            }], icon: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], mouseFocus: [{
                type: Input
            }], showArrow: [{
                type: Input
            }], returnFocus: [{
                type: Input
            }], trigger: [{
                type: Input
            }], menu: [{
                type: Input
            }], ajaxBeforeOpenFunction: [{
                type: Input
            }], hideMenuArrow: [{
                type: Input
            }], offset: [{
                type: Input
            }], attachToBody: [{
                type: Input
            }], removeOnDestroy: [{
                type: Input
            }], ripple: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
// tslint:disable-next-line:no-unused-variable
import { ChangeDetectionStrategy, Component, Input, } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the Soho Module Nav control.
 * This Component attaches to an element annotated with the `soho-module-nav` attribute,
 */
export class SohoModuleNavComponent {
    /** Constructor. */
    constructor(elementRef, ngZone) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        /** Stored settings */
        this._options = {
            accordionSettings: {},
            displayMode: false,
            initChildren: true,
            filterable: false,
            pinSections: false,
            showDetailView: false,
        };
        /** Internal use flags */
        this._updateRequired = false;
    }
    // -------------------------------------------
    // Inputs
    // -------------------------------------------
    set accordionSettings(val) {
        this._options.accordionSettings = val;
        this.updated({ accordionSettings: this._options.accordionSettings });
    }
    get accordionSettings() {
        return this.modulenav?.settings.accordionSettings || this._options.accordionSettings;
    }
    set displayMode(val) {
        this._options.displayMode = val;
        this.updated({ displayMode: this._options.displayMode });
    }
    get displayMode() {
        return this.modulenav?.settings.displayMode || this._options.displayMode;
    }
    set filterable(val) {
        this._options.filterable = val;
        this.updated({ filterable: this._options.filterable });
    }
    get filterable() {
        return this.modulenav?.settings.filterable || this._options.filterable || false;
    }
    set initChildren(val) {
        this._options.initChildren = val;
        this.updated({ initChildren: this._options.initChildren });
    }
    get initChildren() {
        return this.modulenav?.settings.initChildren || this._options.initChildren || false;
    }
    set pinSections(val) {
        this._options.pinSections = val;
        this.updated({ pinSections: this._options.pinSections });
    }
    get pinSections() {
        return this.modulenav?.settings.pinSections || this._options.pinSections || false;
    }
    set showDetailView(val) {
        this._options.showDetailView = val;
        this.updated({ showDetailView: this._options.showDetailView });
    }
    get showDetailView() {
        return this.modulenav?.settings.showDetailView || this._options.showDetailView || false;
    }
    // -------------------------------------------
    // Public API
    // -------------------------------------------
    accordionAPI() {
        return this.modulenav?.accordionAPI;
    }
    containerEl() {
        return this.modulenav?.containerEl;
    }
    switcherAPI() {
        return this.modulenav?.switcherAPI;
    }
    searchAPI() {
        return this.modulenav?.searchAPI;
    }
    settingsAPI() {
        return this.modulenav?.switcherAPI;
    }
    init() {
        this.modulenav?.init();
    }
    /** Triggers a UI Resync. */
    updated(val) {
        if (val) {
            this._options = jQuery.extend({}, this._options, val);
            if (this.modulenav) {
                this.ngZone.runOutsideAngular(() => {
                    this.modulenav?.updated(this._options);
                });
            }
        }
    }
    teardown() {
        this.modulenav?.teardown();
    }
    /**
     * Updates the accordion and expands the target header
     * @param sohoModuleNavComponent
     * @param target
     */
    updateLazy(sohoModuleNavComponent, target) {
        const $applicationMenu = jQuery(sohoModuleNavComponent.elementRef.nativeElement).data('modulenav');
        this.ngZone.runOutsideAngular(() => {
            setTimeout(() => {
                $applicationMenu.accordionAPI.updated();
                const header = jQuery(target).closest('.accordion-header');
                $applicationMenu.accordionAPI.expand(header);
            }, 1);
        });
    }
    // ------------------------------------------
    // Lifecycle Events
    // ------------------------------------------
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // Initialize/store instance
            this.jQueryElement = jQuery(this.elementRef.nativeElement);
            this.jQueryElement.modulenav(this._options);
            this.modulenav = this.jQueryElement.data('modulenav');
        });
    }
    ngAfterViewChecked() {
        if (this.modulenav && this._updateRequired) {
            this.ngZone.runOutsideAngular(() => this.modulenav?.updated(this._options));
            this._updateRequired = false;
        }
    }
    ngOnDestroy() {
        // call outside the angular zone so change detection
        // isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.modulenav) {
                this.modulenav.destroy();
                this.modulenav = null;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoModuleNavComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoModuleNavComponent, selector: "soho-module-nav, [soho-module-nav]", inputs: { accordionSettings: "accordionSettings", displayMode: "displayMode", filterable: "filterable", initChildren: "initChildren", pinSections: "pinSections", showDetailView: "showDetailView" }, ngImport: i0, template: "<ng-content id=\"nav\" [ngClass]=\"{ 'module-nav': true }\"></ng-content>\n", styles: ["soho-module-nav{display:contents}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoModuleNavComponent, decorators: [{
            type: Component,
            args: [{ selector: 'soho-module-nav, [soho-module-nav]', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-content id=\"nav\" [ngClass]=\"{ 'module-nav': true }\"></ng-content>\n", styles: ["soho-module-nav{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { accordionSettings: [{
                type: Input
            }], displayMode: [{
                type: Input
            }], filterable: [{
                type: Input
            }], initChildren: [{
                type: Input
            }], pinSections: [{
                type: Input
            }], showDetailView: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
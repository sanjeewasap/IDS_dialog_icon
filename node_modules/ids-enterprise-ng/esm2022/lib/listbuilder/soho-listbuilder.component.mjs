import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, ViewChild } from "@angular/core";
import * as i0 from "@angular/core";
import * as i1 from "../button/soho-button.component";
import * as i2 from "../toolbar/soho-toolbar.component";
export class SohoListBuilderComponent {
    get isListbuilder() {
        return true;
    }
    /**
     * Constructor.
     */
    constructor(ngZone) {
        this.ngZone = ngZone;
        this.options = {};
        /** Calls events after a top button action */
        this.afteradd = new EventEmitter();
        this.aftergoup = new EventEmitter();
        this.aftergodown = new EventEmitter();
        this.afterdelete = new EventEmitter();
        /** Calls events before a top button action */
        this.beforeedit = new EventEmitter();
        this.beforeadd = new EventEmitter();
        this.beforegoup = new EventEmitter();
        this.beforegodown = new EventEmitter();
        this.beforedelete = new EventEmitter();
        /** Update event on arranging items (drag and drop item) */
        this.arrangeupdate = new EventEmitter();
        /** Calls events for edit item */
        this.entereditmode = new EventEmitter();
        this.exiteditmode = new EventEmitter();
    }
    get listClass() {
        let classes = 'listbuilder';
        if (this.class) {
            classes += ` ${this.class}`;
        }
        return classes;
    }
    /**
     * Array of data
     */
    set dataset(value) {
        this.options.dataset = value;
        if (this.jQueryElement && this.listbuilder) {
            this.listbuilder.settings.dataset = value;
            this.updateRequired = true;
        }
    }
    get dataset() {
        return this.options.dataset;
    }
    /** The CSS Class of the handle element */
    set handle(value) {
        this.options.handle = value;
        if (this.jQueryElement && this.listbuilder) {
            this.listbuilder.settings.handle = value;
            this.updateRequired = true;
        }
    }
    /** "Add" action button (takes a string representing a "data-action" attribute */
    set btnAdd(value) {
        this.options.btnAdd = value;
        if (this.jQueryElement && this.listbuilder) {
            this.listbuilder.settings.btnAdd = value;
            this.updateRequired = true;
        }
    }
    /** "Edit" action button (takes a string representing a "data-action" attribute */
    set btnEdit(value) {
        this.options.btnEdit = value;
        if (this.jQueryElement && this.listbuilder) {
            this.listbuilder.settings.btnEdit = value;
            this.updateRequired = true;
        }
    }
    /** "Delete" action button (takes a string representing a "data-action" attribute */
    set btnDelete(value) {
        this.options.btnDelete = value;
        if (this.jQueryElement && this.listbuilder) {
            this.listbuilder.settings.btnDelete = value;
            this.updateRequired = true;
        }
    }
    /** "GoUp" action button (takes a string representing a "data-action" attribute */
    set btnGoUp(value) {
        this.options.btnGoUp = value;
        if (this.jQueryElement && this.listbuilder) {
            this.listbuilder.settings.btnGoUp = value;
            this.updateRequired = true;
        }
    }
    /** "GoDown" action button (takes a string representing a "data-action" attribute */
    set btnGoDown(value) {
        this.options.btnGoDown = value;
        if (this.jQueryElement && this.listbuilder) {
            this.listbuilder.settings.btnGoDown = value;
            this.updateRequired = true;
        }
    }
    /** Add extra attributes like id's to the chart elements. For example `attributes: { name: 'id', value: 'my-unique-id' } */
    set attributes(attributes) {
        this.options.attributes = attributes;
        if (this.jQueryElement && this.listbuilder) {
            this.listbuilder.settings.attributes = attributes;
            this.updateRequired = true;
        }
    }
    /** Html Template String of list. */
    set template(value) {
        this.options.template = value;
        if (this.jQueryElement && this.listbuilder) {
            this.listbuilder.settings.template = value;
            this.updateRequired = true;
        }
    }
    /** Html Template String of list item. */
    set templateNewItem(value) {
        this.options.templateNewItem = value;
        if (this.jQueryElement && this.listbuilder) {
            this.listbuilder.settings.templateNewItem = value;
            this.updateRequired = true;
        }
    }
    /** Html Template String of list item inner content. */
    set templateItemContent(value) {
        this.options.templateItemContent = value;
        if (this.jQueryElement && this.listbuilder) {
            this.listbuilder.settings.templateItemContent = value;
            this.updateRequired = true;
        }
    }
    ngAfterViewInit() {
        if (!this.listBuilderRef) {
            throw Error('Unable to find listbuilder reference...');
        }
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.listBuilderRef?.nativeElement);
            this.jQueryElement.listbuilder(this.options);
            this.listbuilder = this.jQueryElement.data('listbuilder');
            this.jQueryElement.on('afteradd', (...args) => this.ngZone.run(() => this.afteradd.emit(args)));
            this.jQueryElement.on('aftergoup', (...args) => this.ngZone.run(() => this.aftergoup.emit(args)));
            this.jQueryElement.on('aftergodown', (...args) => this.ngZone.run(() => this.aftergodown.emit(args)));
            this.jQueryElement.on('afterdelete', (...args) => this.ngZone.run(() => this.afterdelete.emit(args)));
            this.jQueryElement.on('beforeadd', (...args) => this.ngZone.run(() => this.beforeadd.emit(args)));
            this.jQueryElement.on('beforegoup', (...args) => this.ngZone.run(() => this.beforegoup.emit(args)));
            this.jQueryElement.on('beforegodown', (...args) => this.ngZone.run(() => this.beforegodown.emit(args)));
            this.jQueryElement.on('beforedelete', (...args) => this.ngZone.run(() => this.beforedelete.emit(args)));
            this.jQueryElement.on('entereditmode', (...args) => this.ngZone.run(() => this.entereditmode.emit(args)));
            this.jQueryElement.on('exiteditmode', (...args) => this.ngZone.run(() => this.exiteditmode.emit(args)));
            this.jQueryElement.on('arrangeupdate', (...args) => this.ngZone.run(() => this.arrangeupdate.emit(args)));
        });
    }
    ngAfterViewChecked() {
        if (this.updateRequired) {
            this.ngZone.runOutsideAngular(() => this.listbuilder?.updated());
            this.updateRequired = false;
        }
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.listbuilder) {
                this.listbuilder.destroy();
                this.listbuilder = null;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoListBuilderComponent, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoListBuilderComponent, selector: "[soho-listbuilder]", inputs: { sohoListBuilderElementId: "sohoListBuilderElementId", class: "class", dataset: "dataset", handle: "handle", btnAdd: "btnAdd", btnEdit: "btnEdit", btnDelete: "btnDelete", btnGoUp: "btnGoUp", btnGoDown: "btnGoDown", attributes: "attributes", template: "template", templateNewItem: "templateNewItem", templateItemContent: "templateItemContent" }, outputs: { afteradd: "afteradd", aftergoup: "aftergoup", aftergodown: "aftergodown", afterdelete: "afterdelete", beforeedit: "beforeedit", beforeadd: "beforeadd", beforegoup: "beforegoup", beforegodown: "beforegodown", beforedelete: "beforedelete", arrangeupdate: "arrangeupdate", entereditmode: "entereditmode", exiteditmode: "exiteditmode" }, host: { properties: { "class.listbuilder": "this.isListbuilder" } }, viewQueries: [{ propertyName: "listBuilderRef", first: true, predicate: ["listbuilder"], descendants: true, static: true }], ngImport: i0, template: "<div #listbuilder [class]=\"listClass\" [attr.id]=\"sohoListBuilderElementId\" >\n    <soho-toolbar class=\"formatter-toolbar\">\n        <soho-toolbar-button-set>\n            <button soho-button=\"secondary\" icon=\"add\" data-action=\"add\" title=\"Add New\">Add</button>\n            <div class=\"separator\"></div>\n            <button soho-button=\"secondary\" icon=\"up-arrow\" data-action=\"goup\" title=\"Go Up\">Go Up</button>\n            <button soho-button=\"secondary\" icon=\"down-arrow\" data-action=\"godown\" title=\"Go Down\">Go Down</button>\n            <div class=\"separator\"></div>\n            <button soho-button=\"secondary\" icon=\"edit\" data-action=\"edit\" title=\"Edit\">Edit</button>\n            <button soho-button=\"secondary\" icon=\"delete\" data-action=\"delete\" title=\"Delete\">Delete</button>\n        </soho-toolbar-button-set>\n    </soho-toolbar>\n    <div class=\"listbuilder-content\">\n        <div class=\"listview\">\n            <ul>\n                <ng-content select=\"li[soho-listview-item]\"></ng-content>\n            </ul>\n            <ng-content select=\"[soho-emptymessage]\"></ng-content>\n        </div>\n    </div>\n</div>", dependencies: [{ kind: "component", type: i1.SohoButtonComponent, selector: "button[soho-button]", inputs: ["soho-button", "buttonOptions", "toggleOnIcon", "toggleOffIcon", "replaceText", "hideMenuArrow", "hitbox", "notificationBadge", "notificationBadgeOptions", "extraIconClass", "isToggle", "isTogglePressed", "icon", "iconAlign", "isSubmit", "ripple", "state", "toggle", "expandableExpander", "moveToLeft", "moveToRight", "moveToSelected"] }, { kind: "component", type: i2.SohoToolbarComponent, selector: "soho-toolbar, div[soho-toolbar]", inputs: ["noActionsButton", "hasMoreButton", "maxVisibleButtons", "rightAligned", "rightAlign", "resizeContainers", "favorButtonset", "moreMenuSettings", "attributes"], outputs: ["beforeActivated", "activated", "afterActivated", "selected", "menuItemMouseOver"] }, { kind: "component", type: i2.SohoToolbarButtonSetComponent, selector: "soho-toolbar-button-set" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoListBuilderComponent, decorators: [{
            type: Component,
            args: [{ selector: '[soho-listbuilder]', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div #listbuilder [class]=\"listClass\" [attr.id]=\"sohoListBuilderElementId\" >\n    <soho-toolbar class=\"formatter-toolbar\">\n        <soho-toolbar-button-set>\n            <button soho-button=\"secondary\" icon=\"add\" data-action=\"add\" title=\"Add New\">Add</button>\n            <div class=\"separator\"></div>\n            <button soho-button=\"secondary\" icon=\"up-arrow\" data-action=\"goup\" title=\"Go Up\">Go Up</button>\n            <button soho-button=\"secondary\" icon=\"down-arrow\" data-action=\"godown\" title=\"Go Down\">Go Down</button>\n            <div class=\"separator\"></div>\n            <button soho-button=\"secondary\" icon=\"edit\" data-action=\"edit\" title=\"Edit\">Edit</button>\n            <button soho-button=\"secondary\" icon=\"delete\" data-action=\"delete\" title=\"Delete\">Delete</button>\n        </soho-toolbar-button-set>\n    </soho-toolbar>\n    <div class=\"listbuilder-content\">\n        <div class=\"listview\">\n            <ul>\n                <ng-content select=\"li[soho-listview-item]\"></ng-content>\n            </ul>\n            <ng-content select=\"[soho-emptymessage]\"></ng-content>\n        </div>\n    </div>\n</div>" }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; }, propDecorators: { isListbuilder: [{
                type: HostBinding,
                args: ['class.listbuilder']
            }], listBuilderRef: [{
                type: ViewChild,
                args: ['listbuilder', { static: true }]
            }], sohoListBuilderElementId: [{
                type: Input
            }], class: [{
                type: Input
            }], dataset: [{
                type: Input
            }], handle: [{
                type: Input
            }], btnAdd: [{
                type: Input
            }], btnEdit: [{
                type: Input
            }], btnDelete: [{
                type: Input
            }], btnGoUp: [{
                type: Input
            }], btnGoDown: [{
                type: Input
            }], attributes: [{
                type: Input
            }], template: [{
                type: Input
            }], templateNewItem: [{
                type: Input
            }], templateItemContent: [{
                type: Input
            }], afteradd: [{
                type: Output
            }], aftergoup: [{
                type: Output
            }], aftergodown: [{
                type: Output
            }], afterdelete: [{
                type: Output
            }], beforeedit: [{
                type: Output
            }], beforeadd: [{
                type: Output
            }], beforegoup: [{
                type: Output
            }], beforegodown: [{
                type: Output
            }], beforedelete: [{
                type: Output
            }], arrangeupdate: [{
                type: Output
            }], entereditmode: [{
                type: Output
            }], exiteditmode: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby1saXN0YnVpbGRlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZHMtZW50ZXJwcmlzZS1uZy9zcmMvbGliL2xpc3RidWlsZGVyL3NvaG8tbGlzdGJ1aWxkZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWRzLWVudGVycHJpc2Utbmcvc3JjL2xpYi9saXN0YnVpbGRlci9zb2hvLWxpc3RidWlsZGVyLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBbUMsdUJBQXVCLEVBQUUsU0FBUyxFQUErQixZQUFZLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFhLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQVNwTixNQUFNLE9BQU8sd0JBQXdCO0lBQ25DLElBQXNDLGFBQWE7UUFDakQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBY0Q7O09BRUc7SUFDSCxZQUNVLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBWGhCLFlBQU8sR0FBMkIsRUFBRSxDQUFDO1FBeUk3Qyw2Q0FBNkM7UUFDbkMsYUFBUSxHQUEyQixJQUFJLFlBQVksRUFBWSxDQUFDO1FBRWhFLGNBQVMsR0FBMkIsSUFBSSxZQUFZLEVBQVksQ0FBQztRQUVqRSxnQkFBVyxHQUEyQixJQUFJLFlBQVksRUFBWSxDQUFDO1FBRW5FLGdCQUFXLEdBQTJCLElBQUksWUFBWSxFQUFZLENBQUM7UUFFN0UsOENBQThDO1FBQ3BDLGVBQVUsR0FBMkIsSUFBSSxZQUFZLEVBQVksQ0FBQztRQUVsRSxjQUFTLEdBQTJCLElBQUksWUFBWSxFQUFZLENBQUM7UUFFakUsZUFBVSxHQUEyQixJQUFJLFlBQVksRUFBWSxDQUFDO1FBRWxFLGlCQUFZLEdBQTJCLElBQUksWUFBWSxFQUFZLENBQUM7UUFFcEUsaUJBQVksR0FBMkIsSUFBSSxZ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LGFBQWEsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsRyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3RHLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDdEcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsV0FBVyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNsRyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BHLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4RyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsQ0FBQyxHQUFHLElBQUksRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFHLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLGNBQWMsRUFBRSxDQUFDLEdBQUcsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsZUFBZSxFQUFFLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM1RyxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBQ2pFLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1NBQzdCO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNqQyxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7Z0JBQ3RCLElBQUksQ0FBQyxhQUFhLENBQUMsR0FBRyxFQUFFLENBQUM7Z0JBQ3pCLElBQUksQ0FBQyxhQUFhLEdBQUcsU0FBUyxDQUFDO2FBQ2hDO1lBRUQsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO2dCQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQzthQUN6QjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs4R0ExTlUsd0JBQXdCO2tHQUF4Qix3QkFBd0IsdTdCQ1RyQyxzcUNBb0JNOzsyRkRYTyx3QkFBd0I7a0JBTnBDLFNBQVM7K0JBRUUsb0JBQW9CLG1CQUViLHVCQUF1QixDQUFDLE1BQU07NkZBR1QsYUFBYTtzQkFBbEQsV0FBVzt1QkFBQyxtQkFBbUI7Z0JBd0JZLGNBQWM7c0JBQXpELFNBQVM7dUJBQUMsYUFBYSxFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFFakMsd0JBQXdCO3NCQUFoQyxLQUFLO2dCQUtHLEtBQUs7c0JBQWIsS0FBSztnQkFhTyxPQUFPO3NCQUFuQixLQUFLO2dCQWFPLE1BQU07c0JBQWxCLEtBQUs7Z0JBU08sTUFBTTtzQkFBbEIsS0FBSztnQkFTTyxPQUFPO3NCQUFuQixLQUFLO2dCQVNPLFNBQVM7c0JBQXJCLEtBQUs7Z0JBU08sT0FBTztzQkFBbkIsS0FBSztnQkFTTyxTQUFTO3NCQUFyQixLQUFLO2dCQVNPLFVBQVU7c0JBQXRCLEtBQUs7Z0JBU08sUUFBUTtzQkFBcEIsS0FBSztnQkFTTyxlQUFlO3NCQUEzQixLQUFLO2dCQVNPLG1CQUFtQjtzQkFBL0IsS0FBSztnQkFTSSxRQUFRO3NCQUFqQixNQUFNO2dCQUVHLFNBQVM7c0JBQWxCLE1BQU07Z0JBRUcsV0FBVztzQkFBcEIsTUFBTTtnQkFFRyxXQUFXO3NCQUFwQixNQUFNO2dCQUdHLFVBQVU7c0JBQW5CLE1BQU07Z0JBRUcsU0FBUztzQkFBbEIsTUFBTTtnQkFFRyxVQUFVO3NCQUFuQixNQUFNO2dCQUVHLFlBQVk7c0JBQXJCLE1BQU07Z0JBRUcsWUFBWTtzQkFBckIsTUFBTTtnQkFHRyxhQUFhO3NCQUF0QixNQUFNO2dCQUdHLGFBQWE7c0JBQXRCLE1BQU07Z0JBRUcsWUFBWTtzQkFBckIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0NoZWNrZWQsIEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDb21wb25lbnQsIENvbnRlbnRDaGlsZHJlbiwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBIb3N0QmluZGluZywgSW5wdXQsIE5nWm9uZSwgT25EZXN0cm95LCBPdXRwdXQsIFF1ZXJ5TGlzdCwgVmlld0NoaWxkIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcbmltcG9ydCB7IFNvaG9MaXN0Vmlld0l0ZW1Db21wb25lbnQgfSBmcm9tIFwiLi4vbGlzdHZpZXdcIjtcblxuQENvbXBvbmVudCh7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvY29tcG9uZW50LXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnW3NvaG8tbGlzdGJ1aWxkZXJdJyxcbiAgdGVtcGxhdGVVcmw6ICdzb2hvLWxpc3RidWlsZGVyLmNvbXBvbmVudC5odG1sJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgU29ob0xpc3RCdWlsZGVyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBBZnRlclZpZXdDaGVja2VkIHtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5saXN0YnVpbGRlcicpIGdldCBpc0xpc3RidWlsZGVyKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIExvY2FsIHZhcmlhYmxlc1xuICAgKi9cbiAgcHJpdmF0ZSBqUXVlcnlFbGVtZW50PzogSlF1ZXJ5O1xuICBwcml2YXRlIGxpc3RidWlsZGVyPzogU29ob0xpc3RCdWlsZGVyU3RhdGljIHwgbnVsbDtcbiAgcHJpdmF0ZSBvcHRpb25zOiBTb2hvTGlzdEJ1aWxkZXJPcHRpb25zID0ge307XG5cbiAgLyoqXG4gICogRm9yY2UgYSB1cGRhdGUgdG8gZmlyZSBuZXh0IHZpZXdDaGVja2VkLlxuICAqL1xuICBwdWJsaWMgdXBkYXRlUmVxdWlyZWQ/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBDb25zdHJ1Y3Rvci5cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmVcbiAgKSB7IH1cblxuICAvLyBVc2VkIHRvIGxvY2F0ZSB0aGUgbGlzdEJ1aWxkZXJSZWZlcmVuY2UgaW4gdGhlIEhUTUwgdG8gaW5pdCB0aGUgY29tcG9uZW50IHRocm91Z2ggalF1ZXJ5XG4gIEBWaWV3Q2hpbGQoJ2xpc3RidWlsZGVyJywgeyBzdGF0aWM6IHRydWUgfSkgbGlzdEJ1aWxkZXJSZWY6IEVsZW1lbnRSZWYgfCB1bmRlZmluZWQ7XG5cbiAgQElucHV0KCkgc29ob0xpc3RCdWlsZGVyRWxlbWVudElkPzogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBTdHJpbmcgb2YgY2xhc3NlcyB0byBhcHBlbmQgdG8gdGhlIGNsYXNzIGZvciB0aGUgbGlzdC12aWV3IGRpdiBlbGVtZW50XG4gICAqL1xuICBASW5wdXQoKSBjbGFzcz86IHN0cmluZztcblxuICBnZXQgbGlzdENsYXNzKCkge1xuICAgIGxldCBjbGFzc2VzID0gJ2xpc3RidWlsZGVyJztcbiAgICBpZiAodGhpcy5jbGFzcykge1xuICAgICAgY2xhc3NlcyArPSBgICR7dGhpcy5jbGFzc31gO1xuICAgIH1cbiAgICByZXR1cm4gY2xhc3NlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBcnJheSBvZiBkYXRhXG4gICAqL1xuICBASW5wdXQoKSBzZXQgZGF0YXNldCh2YWx1ZTogT2JqZWN0W10gfCB1bmRlZmluZWQpIHtcbiAgICB0aGlzLm9wdGlvbnMuZGF0YXNldCA9IHZhbHVlO1xuICAgIGlmICh0aGlzLmpRdWVyeUVsZW1lbnQgJiYgdGhpcy5saXN0YnVpbGRlcikge1xuICAgICAgdGhpcy5saXN0YnVpbGRlci5zZXR0aW5ncy5kYXRhc2V0ID0gdmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZVJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBnZXQgZGF0YXNldCgpOiBPYmplY3RbXSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy5kYXRhc2V0O1xuICB9XG5cbiAgLyoqIFRoZSBDU1MgQ2xhc3Mgb2YgdGhlIGhhbmRsZSBlbGVtZW50ICovXG4gIEBJbnB1dCgpIHNldCBoYW5kbGUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMub3B0aW9ucy5oYW5kbGUgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy5qUXVlcnlFbGVtZW50ICYmIHRoaXMubGlzdGJ1aWxkZXIpIHtcbiAgICAgIHRoaXMubGlzdGJ1aWxkZXIuc2V0dGluZ3MuaGFuZGxlID0gdmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZVJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKiogXCJBZGRcIiBhY3Rpb24gYnV0dG9uICh0YWtlcyBhIHN0cmluZyByZXByZXNlbnRpbmcgYSBcImRhdGEtYWN0aW9uXCIgYXR0cmlidXRlICovXG4gIEBJbnB1dCgpIHNldCBidG5BZGQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMub3B0aW9ucy5idG5BZGQgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy5qUXVlcnlFbGVtZW50ICYmIHRoaXMubGlzdGJ1aWxkZXIpIHtcbiAgICAgIHRoaXMubGlzdGJ1aWxkZXIuc2V0dGluZ3MuYnRuQWRkID0gdmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZVJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKiogXCJFZGl0XCIgYWN0aW9uIGJ1dHRvbiAodGFrZXMgYSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgXCJkYXRhLWFjdGlvblwiIGF0dHJpYnV0ZSAqL1xuICBASW5wdXQoKSBzZXQgYnRuRWRpdCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5vcHRpb25zLmJ0bkVkaXQgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy5qUXVlcnlFbGVtZW50ICYmIHRoaXMubGlzdGJ1aWxkZXIpIHtcbiAgICAgIHRoaXMubGlzdGJ1aWxkZXIuc2V0dGluZ3MuYnRuRWRpdCA9IHZhbHVlO1xuICAgICAgdGhpcy51cGRhdGVSZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqIFwiRGVsZXRlXCIgYWN0aW9uIGJ1dHRvbiAodGFrZXMgYSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgXCJkYXRhLWFjdGlvblwiIGF0dHJpYnV0ZSAqL1xuICBASW5wdXQoKSBzZXQgYnRuRGVsZXRlKHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLm9wdGlvbnMuYnRuRGVsZXRlID0gdmFsdWU7XG4gICAgaWYgKHRoaXMualF1ZXJ5RWxlbWVudCAmJiB0aGlzLmxpc3RidWlsZGVyKSB7XG4gICAgICB0aGlzLmxpc3RidWlsZGVyLnNldHRpbmdzLmJ0bkRlbGV0ZSA9IHZhbHVlO1xuICAgICAgdGhpcy51cGRhdGVSZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqIFwiR29VcFwiIGFjdGlvbiBidXR0b24gKHRha2VzIGEgc3RyaW5nIHJlcHJlc2VudGluZyBhIFwiZGF0YS1hY3Rpb25cIiBhdHRyaWJ1dGUgKi9cbiAgQElucHV0KCkgc2V0IGJ0bkdvVXAodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMub3B0aW9ucy5idG5Hb1VwID0gdmFsdWU7XG4gICAgaWYgKHRoaXMualF1ZXJ5RWxlbWVudCAmJiB0aGlzLmxpc3RidWlsZGVyKSB7XG4gICAgICB0aGlzLmxpc3RidWlsZGVyLnNldHRpbmdzLmJ0bkdvVXAgPSB2YWx1ZTtcbiAgICAgIHRoaXMudXBkYXRlUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBcIkdvRG93blwiIGFjdGlvbiBidXR0b24gKHRha2VzIGEgc3RyaW5nIHJlcHJlc2VudGluZyBhIFwiZGF0YS1hY3Rpb25cIiBhdHRyaWJ1dGUgKi9cbiAgQElucHV0KCkgc2V0IGJ0bkdvRG93bih2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5vcHRpb25zLmJ0bkdvRG93biA9IHZhbHVlO1xuICAgIGlmICh0aGlzLmpRdWVyeUVsZW1lbnQgJiYgdGhpcy5saXN0YnVpbGRlcikge1xuICAgICAgdGhpcy5saXN0YnVpbGRlci5zZXR0aW5ncy5idG5Hb0Rvd24gPSB2YWx1ZTtcbiAgICAgIHRoaXMudXBkYXRlUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBBZGQgZXh0cmEgYXR0cmlidXRlcyBsaWtlIGlkJ3MgdG8gdGhlIGNoYXJ0IGVsZW1lbnRzLiBGb3IgZXhhbXBsZSBgYXR0cmlidXRlczogeyBuYW1lOiAnaWQnLCB2YWx1ZTogJ215LXVuaXF1ZS1pZCcgfSAqL1xuICBASW5wdXQoKSBzZXQgYXR0cmlidXRlcyhhdHRyaWJ1dGVzOiBBcnJheTxPYmplY3Q+IHwgT2JqZWN0IHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5vcHRpb25zLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICAgIGlmICh0aGlzLmpRdWVyeUVsZW1lbnQgJiYgdGhpcy5saXN0YnVpbGRlcikge1xuICAgICAgdGhpcy5saXN0YnVpbGRlci5zZXR0aW5ncy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgICAgIHRoaXMudXBkYXRlUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBIdG1sIFRlbXBsYXRlIFN0cmluZyBvZiBsaXN0LiAqL1xuICBASW5wdXQoKSBzZXQgdGVtcGxhdGUodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMub3B0aW9ucy50ZW1wbGF0ZSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLmpRdWVyeUVsZW1lbnQgJiYgdGhpcy5saXN0YnVpbGRlcikge1xuICAgICAgdGhpcy5saXN0YnVpbGRlci5zZXR0aW5ncy50ZW1wbGF0ZSA9IHZhbHVlO1xuICAgICAgdGhpcy51cGRhdGVSZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqIEh0bWwgVGVtcGxhdGUgU3RyaW5nIG9mIGxpc3QgaXRlbS4gKi9cbiAgQElucHV0KCkgc2V0IHRlbXBsYXRlTmV3SXRlbSh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5vcHRpb25zLnRlbXBsYXRlTmV3SXRlbSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLmpRdWVyeUVsZW1lbnQgJiYgdGhpcy5saXN0YnVpbGRlcikge1xuICAgICAgdGhpcy5saXN0YnVpbGRlci5zZXR0aW5ncy50ZW1wbGF0ZU5ld0l0ZW0gPSB2YWx1ZTtcbiAgICAgIHRoaXMudXBkYXRlUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBIdG1sIFRlbXBsYXRlIFN0cmluZyBvZiBsaXN0IGl0ZW0gaW5uZXIgY29udGVudC4gKi9cbiAgQElucHV0KCkgc2V0IHRlbXBsYXRlSXRlbUNvbnRlbnQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMub3B0aW9ucy50ZW1wbGF0ZUl0ZW1Db250ZW50ID0gdmFsdWU7XG4gICAgaWYgKHRoaXMualF1ZXJ5RWxlbWVudCAmJiB0aGlzLmxpc3RidWlsZGVyKSB7XG4gICAgICB0aGlzLmxpc3RidWlsZGVyLnNldHRpbmdzLnRlbXBsYXRlSXRlbUNvbnRlbnQgPSB2YWx1ZTtcbiAgICAgIHRoaXMudXBkYXRlUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBDYWxscyBldmVudHMgYWZ0ZXIgYSB0b3AgYnV0dG9uIGFjdGlvbiAqL1xuICBAT3V0cHV0KCkgYWZ0ZXJhZGQ6IEV2ZW50RW1pdHRlcjxPYmplY3RbXT4gPSBuZXcgRXZlbnRFbWl0dGVyPE9iamVjdFtdPigpO1xuXG4gIEBPdXRwdXQoKSBhZnRlcmdvdXA6IEV2ZW50RW1pdHRlcjxPYmplY3RbXT4gPSBuZXcgRXZlbnRFbWl0dGVyPE9iamVjdFtdPigpO1xuXG4gIEBPdXRwdXQoKSBhZnRlcmdvZG93bjogRXZlbnRFbWl0dGVyPE9iamVjdFtdPiA9IG5ldyBFdmVudEVtaXR0ZXI8T2JqZWN0W10+KCk7XG5cbiAgQE91dHB1dCgpIGFmdGVyZGVsZXRlOiBFdmVudEVtaXR0ZXI8T2JqZWN0W10+ID0gbmV3IEV2ZW50RW1pdHRlcjxPYmplY3RbXT4oKTtcblxuICAvKiogQ2FsbHMgZXZlbnRzIGJlZm9yZSBhIHRvcCBidXR0b24gYWN0aW9uICovXG4gIEBPdXRwdXQoKSBiZWZvcmVlZGl0OiBFdmVudEVtaXR0ZXI8T2JqZWN0W10+ID0gbmV3IEV2ZW50RW1pdHRlcjxPYmplY3RbXT4oKTtcblxuICBAT3V0cHV0KCkgYmVmb3JlYWRkOiBFdmVudEVtaXR0ZXI8T2JqZWN0W10+ID0gbmV3IEV2ZW50RW1pdHRlcjxPYmplY3RbXT4oKTtcblxuICBAT3V0cHV0KCkgYmVmb3JlZ291cDogRXZlbnRFbWl0dGVyPE9iamVjdFtdPiA9IG5ldyBFdmVudEVtaXR0ZXI8T2JqZWN0W10+KCk7XG5cbiAgQE91dHB1dCgpIGJlZm9yZWdvZG93bjogRXZlbnRFbWl0dGVyPE9iamVjdFtdPiA9IG5ldyBFdmVudEVtaXR0ZXI8T2JqZWN0W10+KCk7XG5cbiAgQE91dHB1dCgpIGJlZm9yZWRlbGV0ZTogRXZlbnRFbWl0dGVyPE9iamVjdFtdPiA9IG5ldyBFdmVudEVtaXR0ZXI8T2JqZWN0W10+KCk7XG5cbiAgLyoqIFVwZGF0ZSBldmVudCBvbiBhcnJhbmdpbmcgaXRlbXMgKGRyYWcgYW5kIGRyb3AgaXRlbSkgKi9cbiAgQE91dHB1dCgpIGFycmFuZ2V1cGRhdGU6IEV2ZW50RW1pdHRlcjxPYmplY3RbXT4gPSBuZXcgRXZlbnRFbWl0dGVyPE9iamVjdFtdPigpO1xuXG4gIC8qKiBDYWxscyBldmVudHMgZm9yIGVkaXQgaXRlbSAqL1xuICBAT3V0cHV0KCkgZW50ZXJlZGl0bW9kZTogRXZlbnRFbWl0dGVyPE9iamVjdFtdPiA9IG5ldyBFdmVudEVtaXR0ZXI8T2JqZWN0W10+KCk7XG5cbiAgQE91dHB1dCgpIGV4aXRlZGl0bW9kZTogRXZlbnRFbWl0dGVyPE9iamVjdFtdPiA9IG5ldyBFdmVudEVtaXR0ZXI8T2JqZWN0W10+KCk7XG5cbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgIGlmICghdGhpcy5saXN0QnVpbGRlclJlZikge1xuICAgICAgdGhyb3cgRXJyb3IoJ1VuYWJsZSB0byBmaW5kIGxpc3RidWlsZGVyIHJlZmVyZW5jZS4uLicpO1xuICAgIH1cblxuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudCA9IGpRdWVyeSh0aGlzLmxpc3RCdWlsZGVyUmVmPy5uYXRpdmVFbGVtZW50KTtcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5saXN0YnVpbGRlcih0aGlzLm9wdGlvbnMpO1xuICAgICAgdGhpcy5saXN0YnVpbGRlciA9IHRoaXMualF1ZXJ5RWxlbWVudC5kYXRhKCdsaXN0YnVpbGRlcicpO1xuXG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQub24oJ2FmdGVyYWRkJywgKC4uLmFyZ3MpID0+IHRoaXMubmdab25lLnJ1bigoKSA9PiB0aGlzLmFmdGVyYWRkLmVtaXQoYXJncykpKTtcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5vbignYWZ0ZXJnb3VwJywgKC4uLmFyZ3MpID0+IHRoaXMubmdab25lLnJ1bigoKSA9PiB0aGlzLmFmdGVyZ291cC5lbWl0KGFyZ3MpKSk7XG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQub24oJ2FmdGVyZ29kb3duJywgKC4uLmFyZ3MpID0+IHRoaXMubmdab25lLnJ1bigoKSA9PiB0aGlzLmFmdGVyZ29kb3duLmVtaXQoYXJncykpKTtcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5vbignYWZ0ZXJkZWxldGUnLCAoLi4uYXJncykgPT4gdGhpcy5uZ1pvbmUucnVuKCgpID0+IHRoaXMuYWZ0ZXJkZWxldGUuZW1pdChhcmdzKSkpO1xuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50Lm9uKCdiZWZvcmVhZGQnLCAoLi4uYXJncykgPT4gdGhpcy5uZ1pvbmUucnVuKCgpID0+IHRoaXMuYmVmb3JlYWRkLmVtaXQoYXJncykpKTtcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5vbignYmVmb3JlZ291cCcsICguLi5hcmdzKSA9PiB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5iZWZvcmVnb3VwLmVtaXQoYXJncykpKTtcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5vbignYmVmb3JlZ29kb3duJywgKC4uLmFyZ3MpID0+IHRoaXMubmdab25lLnJ1bigoKSA9PiB0aGlzLmJlZm9yZWdvZG93bi5lbWl0KGFyZ3MpKSk7XG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQub24oJ2JlZm9yZWRlbGV0ZScsICguLi5hcmdzKSA9PiB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5iZWZvcmVkZWxldGUuZW1pdChhcmdzKSkpO1xuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50Lm9uKCdlbnRlcmVkaXRtb2RlJywgKC4uLmFyZ3MpID0+IHRoaXMubmdab25lLnJ1bigoKSA9PiB0aGlzLmVudGVyZWRpdG1vZGUuZW1pdChhcmdzKSkpO1xuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50Lm9uKCdleGl0ZWRpdG1vZGUnLCAoLi4uYXJncykgPT4gdGhpcy5uZ1pvbmUucnVuKCgpID0+IHRoaXMuZXhpdGVkaXRtb2RlLmVtaXQoYXJncykpKTtcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5vbignYXJyYW5nZXVwZGF0ZScsICguLi5hcmdzKSA9PiB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5hcnJhbmdldXBkYXRlLmVtaXQoYXJncykpKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpIHtcbiAgICBpZiAodGhpcy51cGRhdGVSZXF1aXJlZCkge1xuICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gdGhpcy5saXN0YnVpbGRlcj8udXBkYXRlZCgpKTtcbiAgICAgIHRoaXMudXBkYXRlUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBpZiAodGhpcy5qUXVlcnlFbGVtZW50KSB7XG4gICAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5vZmYoKTtcbiAgICAgICAgdGhpcy5qUXVlcnlFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5saXN0YnVpbGRlcikge1xuICAgICAgICB0aGlzLmxpc3RidWlsZGVyLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5saXN0YnVpbGRlciA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiIsIjxkaXYgI2xpc3RidWlsZGVyIFtjbGFzc109XCJsaXN0Q2xhc3NcIiBbYXR0ci5pZF09XCJzb2hvTGlzdEJ1aWxkZXJFbGVtZW50SWRcIiA+XG4gICAgPHNvaG8tdG9vbGJhciBjbGFzcz1cImZvcm1hdHRlci10b29sYmFyXCI+XG4gICAgICAgIDxzb2hvLXRvb2xiYXItYnV0dG9uLXNldD5cbiAgICAgICAgICAgIDxidXR0b24gc29oby1idXR0b249XCJzZWNvbmRhcnlcIiBpY29uPVwiYWRkXCIgZGF0YS1hY3Rpb249XCJhZGRcIiB0aXRsZT1cIkFkZCBOZXdcIj5BZGQ8L2J1dHRvbj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJzZXBhcmF0b3JcIj48L2Rpdj5cbiAgICAgICAgICAgIDxidXR0b24gc29oby1idXR0b249XCJzZWNvbmRhcnlcIiBpY29uPVwidXAtYXJyb3dcIiBkYXRhLWFjdGlvbj1cImdvdXBcIiB0aXRsZT1cIkdvIFVwXCI+R28gVXA8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gc29oby1idXR0b249XCJzZWNvbmRhcnlcIiBpY29uPVwiZG93bi1hcnJvd1wiIGRhdGEtYWN0aW9uPVwiZ29kb3duXCIgdGl0bGU9XCJHbyBEb3duXCI+R28gRG93bjwvYnV0dG9uPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInNlcGFyYXRvclwiPjwvZGl2PlxuICAgICAgICAgICAgPGJ1dHRvbiBzb2hvLWJ1dHRvbj1cInNlY29uZGFyeVwiIGljb249XCJlZGl0XCIgZGF0YS1hY3Rpb249XCJlZGl0XCIgdGl0bGU9XCJFZGl0XCI+RWRpdDwvYnV0dG9uPlxuICAgICAgICAgICAgPGJ1dHRvbiBzb2hvLWJ1dHRvbj1cInNlY29uZGFyeVwiIGljb249XCJkZWxldGVcIiBkYXRhLWFjdGlvbj1cImRlbGV0ZVwiIHRpdGxlPVwiRGVsZXRlXCI+RGVsZXRlPC9idXR0b24+XG4gICAgICAgIDwvc29oby10b29sYmFyLWJ1dHRvbi1zZXQ+XG4gICAgPC9zb2hvLXRvb2xiYXI+XG4gICAgPGRpdiBjbGFzcz1cImxpc3RidWlsZGVyLWNvbnRlbnRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImxpc3R2aWV3XCI+XG4gICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgPG5nLWNvbnRlbnQgc2VsZWN0PVwibGlbc29oby1saXN0dmlldy1pdGVtXVwiPjwvbmctY29udGVudD5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8bmctY29udGVudCBzZWxlY3Q9XCJbc29oby1lbXB0eW1lc3NhZ2VdXCI+PC9uZy1jb250ZW50PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PiJdfQ==
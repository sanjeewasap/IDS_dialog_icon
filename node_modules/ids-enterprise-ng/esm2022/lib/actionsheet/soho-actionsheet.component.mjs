import { ChangeDetectionStrategy, Component, HostBinding, Input, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoActionsheetComponent {
    /**
     * Constructor
     *
     * @param elementRef - the element matching the component's selector.
     * @param ngZone - the angular zone for this component.
     */
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        this.display = 'inline-block';
        this._options = {
            breakpoint: 'phone-to-tablet',
            displayAsActionSheet: 'responsive',
            autoFocus: true,
            overlayOpacity: 0.7,
            tray: false,
            trayOpts: {
                backgroundColor: 'slate'
            },
            showCancelButton: true
        };
    }
    set actions(actions) {
        this._options.actions = actions;
        this.updated();
        if (this.actionsheet) {
            this.actionsheet.settings.actions = actions;
        }
    }
    get actions() {
        if (!this.actionsheet) {
            return this._options.actions;
        }
        return this.actionsheet.settings.actions;
    }
    set showCancelButton(showCancelButton) {
        this._options.showCancelButton = showCancelButton;
        this.updated();
        if (this.actionsheet) {
            this.actionsheet.settings.showCancelButton = showCancelButton;
        }
    }
    get showCancelButton() {
        if (!this.actionsheet) {
            return this._options.showCancelButton;
        }
        return this.actionsheet.settings.showCancelButton;
    }
    set autoFocus(autoFocus) {
        this._options.autoFocus = autoFocus;
        this.updated();
        if (this.actionsheet) {
            this.actionsheet.settings.autoFocus = autoFocus;
        }
    }
    get autoFocus() {
        if (!this.actionsheet) {
            return this._options.autoFocus;
        }
        return this.actionsheet.settings.autoFocus;
    }
    set breakpoint(breakpoint) {
        this._options.breakpoint = breakpoint;
        this.updated();
        if (this.actionsheet) {
            this.actionsheet.settings.breakpoint = breakpoint;
        }
    }
    get breakpoint() {
        if (!this.actionsheet) {
            return this._options.breakpoint;
        }
        return this.actionsheet.settings.breakpoint;
    }
    set displayAsActionSheet(displayAsActionSheet) {
        this._options.displayAsActionSheet = displayAsActionSheet;
        this.updated();
        if (this.actionsheet) {
            this.actionsheet.settings.displayAsActionSheet = displayAsActionSheet;
        }
    }
    get displayAsActionSheet() {
        if (!this.actionsheet) {
            return this._options.displayAsActionSheet;
        }
        return this.actionsheet.settings.displayAsActionSheet;
    }
    set overlayOpacity(overlayOpacity) {
        this._options.overlayOpacity = overlayOpacity;
        this.updated();
        if (this.actionsheet) {
            this.actionsheet.settings.overlayOpacity = overlayOpacity;
        }
    }
    get overlayOpacity() {
        if (!this.actionsheet) {
            return this._options.overlayOpacity;
        }
        return this.actionsheet.settings.overlayOpacity;
    }
    set onSelect(onSelect) {
        this._options.onSelect = onSelect;
        this.updated();
        if (this.actionsheet) {
            this.actionsheet.settings.onSelect = onSelect;
        }
    }
    get onSelect() {
        if (!this.actionsheet) {
            return this._options.onSelect;
        }
        return this.actionsheet.settings.onSelect;
    }
    set onCancel(onCancel) {
        this._options.onCancel = onCancel;
        this.updated();
        if (this.actionsheet) {
            this.actionsheet.settings.onCancel = onCancel;
        }
    }
    get onCancel() {
        if (!this.actionsheet) {
            return this._options.onCancel;
        }
        return this.actionsheet.settings.onCancel;
    }
    set tray(tray) {
        this._options.tray = tray;
        this.updated();
        if (this.actionsheet) {
            this.actionsheet.settings.tray = tray;
        }
    }
    get tray() {
        if (!this.actionsheet) {
            return this._options.tray;
        }
        return this.actionsheet.settings.tray;
    }
    set trayOpts(trayOpts) {
        this._options.trayOpts = trayOpts;
        this.updated();
        if (this.actionsheet) {
            this.actionsheet.settings.trayOpts = trayOpts;
        }
    }
    get trayOpts() {
        if (!this.actionsheet) {
            return this._options.trayOpts;
        }
        return this.actionsheet.settings.trayOpts;
    }
    set attributes(attributes) {
        this._options.attributes = attributes;
        this.updated();
        if (this.actionsheet) {
            this.actionsheet.settings.attributes = attributes;
        }
    }
    get attributes() {
        if (!this.actionsheet) {
            return this._options.attributes;
        }
        return this.actionsheet.settings.attributes;
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // Wrap the element in a jQuery selector.
            this.jQueryElement = jQuery(this.element.nativeElement);
            // Initialize the Soho Control.
            this.jQueryElement.actionsheet(this._options);
            // Add classes for styling of the actionsheet trigger
            this.jQueryElement.find('button').addClass('btn-actions vertical');
        });
    }
    /** Tears down and removes any added markup and events. */
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.actionsheet) {
                this.actionsheet.destroy();
                this.actionsheet = null;
            }
        });
    }
    /**
     * Triggers a UI Resync.
     */
    updated(settings) {
        if (settings) {
            this._options = settings;
        }
        if (!this.actionsheet) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.actionsheet?.updated(this._options);
        });
    }
    /**
     * Tears down and removes any added markup and events.
     */
    destroy() {
        if (!this.actionsheet) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.actionsheet?.destroy();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoActionsheetComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoActionsheetComponent, selector: "div[soho-actionsheet]", inputs: { actions: "actions", showCancelButton: "showCancelButton", autoFocus: "autoFocus", breakpoint: "breakpoint", displayAsActionSheet: "displayAsActionSheet", overlayOpacity: "overlayOpacity", onSelect: "onSelect", onCancel: "onCancel", tray: "tray", trayOpts: "trayOpts", attributes: "attributes" }, host: { properties: { "style.display": "this.display" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoActionsheetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'div[soho-actionsheet]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { display: [{
                type: HostBinding,
                args: ['style.display']
            }], actions: [{
                type: Input
            }], showCancelButton: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], breakpoint: [{
                type: Input
            }], displayAsActionSheet: [{
                type: Input
            }], overlayOpacity: [{
                type: Input
            }], onSelect: [{
                type: Input
            }], onCancel: [{
                type: Input
            }], tray: [{
                type: Input
            }], trayOpts: [{
                type: Input
            }], attributes: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
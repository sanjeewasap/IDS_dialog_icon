import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoMonthViewComponent {
    set monthviewOptions(monthviewOptions) {
        this._monthviewOptions = monthviewOptions;
        if (this.jQueryElement) {
            this.markForRefresh();
        }
    }
    get monthviewOptions() {
        if (this.monthview) {
            return this.monthview.settings;
        }
        return this._monthviewOptions;
    }
    /**
     * The name of the locale to use for this instance. If not set the current locale will be used.
     */
    set locale(locale) {
        this._monthviewOptions.locale = locale;
        if (this.monthview) {
            this.monthview.settings.locale = locale;
            this.markForRefresh();
        }
    }
    get locale() {
        if (this.monthview) {
            return this.monthview.settings.locale;
        }
        return this._monthviewOptions.locale;
    }
    /**
     * Initial month to show.
     */
    set month(month) {
        this._monthviewOptions.month = month;
        if (this.monthview) {
            this.monthview.settings.month = month;
            this.markForRefresh();
        }
    }
    get month() {
        if (this.monthview) {
            return this.monthview.settings.month;
        }
        return this._monthviewOptions.month;
    }
    /**
     * Initial year to show.
     */
    set year(year) {
        this._monthviewOptions.year = year;
        if (this.monthview) {
            this.monthview.settings.year = year;
            this.markForRefresh();
        }
    }
    get year() {
        if (this.monthview) {
            return this.monthview.settings.year;
        }
        return this._monthviewOptions.year;
    }
    /**
     * The initial selected day to show.
     */
    set day(day) {
        this._monthviewOptions.day = day;
        if (this.monthview) {
            this.monthview.settings.day = day;
            this.markForRefresh();
        }
    }
    get day() {
        if (this.monthview) {
            return this.monthview.settings.day;
        }
        return this._monthviewOptions.day;
    }
    /**
     * The date to highlight as selected/today.
     */
    set activeDate(activeDate) {
        this._monthviewOptions.activeDate = activeDate;
        if (this.monthview) {
            this.monthview.settings.activeDate = activeDate;
            this.markForRefresh();
        }
    }
    get activeDate() {
        if (this.monthview) {
            return this.monthview.settings.activeDate;
        }
        return this._monthviewOptions.activeDate;
    }
    /**
     * The date to highlight as selected/today (as an array for islamic)
     */
    set activeDateIslamic(activeDateIslamic) {
        this._monthviewOptions.activeDateIslamic = activeDateIslamic;
        if (this.monthview) {
            this.monthview.settings.activeDateIslamic = activeDateIslamic;
            this.markForRefresh();
        }
    }
    get activeDateIslamic() {
        if (this.monthview) {
            return this.monthview.settings.activeDateIslamic;
        }
        return this._monthviewOptions.activeDateIslamic;
    }
    /**
     * Is it in a popup (datepicker using it)
     */
    set isPopup(isPopup) {
        this._monthviewOptions.isPopup = isPopup;
        if (this.monthview) {
            this.monthview.settings.isPopup = isPopup;
            this.markForRefresh();
        }
    }
    get isPopup() {
        if (this.monthview) {
            return this.monthview.settings.isPopup;
        }
        return this._monthviewOptions.isPopup;
    }
    /**
     * If true, will set it as inPage month view.
     */
    set inPage(inPage) {
        this._monthviewOptions.inPage = inPage;
        if (this.monthview) {
            this.monthview.settings.inPage = inPage;
            this.markForRefresh();
        }
    }
    get inPage() {
        if (this.monthview) {
            return this.monthview.settings.inPage;
        }
        return this._monthviewOptions.inPage;
    }
    /**
     * If true, will set the month-year title as button for inPage.
     */
    set inPageTitleAsButton(inPageTitleAsButton) {
        this._monthviewOptions.inPageTitleAsButton = inPageTitleAsButton;
        if (this.monthview) {
            this.monthview.settings.inPageTitleAsButton = inPageTitleAsButton;
            this.markForRefresh();
        }
    }
    get inPageTitleAsButton() {
        if (this.monthview) {
            return this.monthview.settings.inPageTitleAsButton;
        }
        return this._monthviewOptions.inPageTitleAsButton;
    }
    /**
     * If true, will set to be toggleable.
     */
    set inPageToggleable(inPageToggleable) {
        this._monthviewOptions.inPageToggleable = inPageToggleable;
        if (this.monthview) {
            this.monthview.settings.inPageToggleable = inPageToggleable;
            this.markForRefresh();
        }
    }
    get inPageToggleable() {
        if (this.monthview) {
            return this.monthview.settings.inPageToggleable;
        }
        return this._monthviewOptions.inPageToggleable;
    }
    /**
     * If true, will init as expanded
     */
    set inPageExpanded(inPageExpanded) {
        this._monthviewOptions.inPageExpanded = inPageExpanded;
        if (this.monthview) {
            this.monthview.settings.inPageExpanded = inPageExpanded;
            this.markForRefresh();
        }
    }
    get inPageExpanded() {
        if (this.monthview) {
            return this.monthview.settings.inPageExpanded;
        }
        return this._monthviewOptions.inPageExpanded;
    }
    /**
     * Set first day of the week. '1' would be Monday.
     */
    set firstDayOfWeek(firstDayOfWeek) {
        this._monthviewOptions.settingsfirstDayOfWeek = firstDayOfWeek;
        if (this.monthview) {
            this.monthview.settings.firstDayOfWeek = firstDayOfWeek;
            this.markForRefresh();
        }
    }
    get firstDayOfWeek() {
        if (this.monthview) {
            return this.monthview.settings.firstDayOfWeek;
        }
        return this._monthviewOptions.settings.firstDayOfWeek;
    }
    /**
     * If true the today button is shown on the header.
     */
    set showToday(showToday) {
        this._monthviewOptions.showToday = showToday;
        if (this.monthview) {
            this.monthview.settings.showToday = showToday;
            this.markForRefresh();
        }
    }
    get showToday() {
        if (this.monthview) {
            return this.monthview.settings.showToday;
        }
        return this._monthviewOptions.showToday;
    }
    /**
     * Indicates this is a month picker on the month and week view.
     * Has some slight different behavior.
     */
    set isMonthPicker(isMonthPicker) {
        this._monthviewOptions.isMonthPicker = isMonthPicker;
        if (this.monthview) {
            this.monthview.settings.isMonthPicker = isMonthPicker;
            this.markForRefresh();
        }
    }
    get isMonthPicker() {
        if (this.monthview) {
            return this.monthview.settings.isMonthPicker;
        }
        return this._monthviewOptions.isMonthPicker;
    }
    /**
     * If false the year and month switcher will be disabled.
     */
    set showMonthYearPicker(showMonthYearPicker) {
        this._monthviewOptions.showMonthYearPicker = showMonthYearPicker;
        if (this.monthview) {
            this.monthview.settings.showMonthYearPicker = showMonthYearPicker;
            this.markForRefresh();
        }
    }
    get showMonthYearPicker() {
        if (this.monthview) {
            return this.monthview.settings.showMonthYearPicker;
        }
        return this._monthviewOptions.showMonthYearPicker;
    }
    /**
     * Shows the legend below the table.
     */
    set showLegend(showLegend) {
        this._monthviewOptions.showLegend = showLegend;
        if (this.monthview) {
            this.monthview.settings.showLegend = showLegend;
            this.markForRefresh();
        }
    }
    get showLegend() {
        if (this.monthview) {
            return this.monthview.settings.showLegend;
        }
        return this._monthviewOptions.showLegend;
    }
    /**
     * Legend Build up.
     */
    set legend(legend) {
        this._monthviewOptions.legend = legend;
        if (this.monthview) {
            this.monthview.settings.legend = legend;
            this.updateLegend = true;
            this.ref.markForCheck();
        }
    }
    get legend() {
        if (this.monthview) {
            return this.monthview.settings.legend;
        }
        return this._monthviewOptions.legend;
    }
    /**
     * If true the days portion of the calendar will be hidden.
     * Usefull for Month/Year only formats.
     */
    set hideDays(hideDays) {
        this._monthviewOptions.hideDays = hideDays;
        if (this.monthview) {
            this.monthview.settings.hideDays = hideDays;
            this.markForRefresh();
        }
    }
    get hideDays() {
        if (this.monthview) {
            return this.monthview.settings.hideDays;
        }
        return this._monthviewOptions.hideDays;
    }
    /**
     * Disable dates in various ways.
     * For example `{minDate: 'M/d/yyyy', maxDate: 'M/d/yyyy'}`.
     * Dates should be in format M/d/yyyy
     */
    set disable(disable) {
        this._monthviewOptions.settings.disable = disable;
        if (this.jQueryElement) {
            this.markForRefresh();
        }
    }
    get disable() {
        if (this.monthview) {
            return this.monthview.settings.disable;
        }
        return this.disable;
    }
    /**
     * The number of years ahead to show in the month/year picker should total 9 with yearsBack.
     */
    set yearsBack(yearsBack) {
        this._monthviewOptions.yearsBack = yearsBack;
        if (this.monthview) {
            this.monthview.settings.yearsBack = yearsBack;
            this.markForRefresh();
        }
    }
    get yearsBack() {
        if (this.monthview) {
            return this.monthview.settings.yearsBack;
        }
        return this._monthviewOptions.yearsBack;
    }
    /**
     * The number of years back to show in the month/year picker should total 9 with yearsAhead.
     */
    set yearsAhead(yearsAhead) {
        this._monthviewOptions.yearsAhead = yearsAhead;
        if (this.monthview) {
            this.monthview.settings.yearsAhead = yearsAhead;
            this.markForRefresh();
        }
    }
    get yearsAhead() {
        if (this.monthview) {
            return this.monthview.settings.yearsAhead;
        }
        return this._monthviewOptions.yearsAhead;
    }
    /**
     * Range between two dates with various options.
     */
    set range(range) {
        this._monthviewOptions.range = range;
        if (this.monthview) {
            this.monthview.settings.range = range;
            this.markForRefresh();
        }
    }
    get range() {
        if (this.monthview) {
            return this.monthview.settings.range;
        }
        return this._monthviewOptions.range;
    }
    /**
     * If true the month days can be clicked to select
     */
    set selectable(selectable) {
        this._monthviewOptions.selectable = selectable;
        if (this.monthview) {
            this.monthview.settings.selectable = selectable;
            this.markForRefresh();
        }
    }
    get selectable() {
        if (this.monthview) {
            return this.monthview.settings.selectable;
        }
        return this._monthviewOptions.selectable;
    }
    /**
     * Callback that fires when a month day is clicked.
     */
    set onSelected(onSelected) {
        this._monthviewOptions.onSelected = onSelected;
        if (this.monthview) {
            this.monthview.settings.onSelected = onSelected;
            this.markForRefresh();
        }
    }
    get onSelected() {
        if (this.monthview) {
            return this.monthview.settings.onSelected;
        }
        return this._monthviewOptions.onSelected;
    }
    /**
     * Callback that fires when a key is pressed down.
     */
    set onKeyDown(onKeyDown) {
        this._monthviewOptions.onKeyDown = onKeyDown;
        if (this.monthview) {
            this.monthview.settings.onKeyDown = onKeyDown;
            this.markForRefresh();
        }
    }
    get onKeyDown() {
        if (this.monthview) {
            return this.monthview.settings.onKeyDown;
        }
        return this._monthviewOptions.onKeyDown;
    }
    /**
     * If true the Next Previous buttons will shown on the header.
     */
    set showNextPrevious(showNextPrevious) {
        this._monthviewOptions.showNextPrevious = showNextPrevious;
        if (this.monthview) {
            this.monthview.settings.showNextPrevious = showNextPrevious;
            this.markForRefresh();
        }
    }
    get showNextPrevious() {
        if (this.monthview) {
            return this.monthview.settings.showNextPrevious;
        }
        return this._monthviewOptions.showNextPrevious;
    }
    /**
     * Call back for when the view changer is changed.
     */
    set changeViewCallback(changeViewCallback) {
        this._monthviewOptions.onChangeView = changeViewCallback;
        if (this.monthview) {
            this.monthview.settings.onChangeView = changeViewCallback;
            this.markForRefresh();
        }
    }
    get changeViewCallback() {
        if (this.monthview) {
            return this.monthview.settings.onChangeView;
        }
        return this._monthviewOptions.onChangeView;
    }
    set attributes(attributes) {
        this.monthview.settings.attributes = attributes;
        if (this.jQueryElement) {
            this.markForRefresh();
        }
    }
    get attributes() {
        if (this.monthview) {
            return this.monthview.settings.attributes;
        }
        return this.attributes;
    }
    constructor(element, ngZone, ref) {
        this.element = element;
        this.ngZone = ngZone;
        this.ref = ref;
        this.isMonthView = true;
        this.dataInit = false;
        // -------------------------------------
        // Component Output
        // -------------------------------------
        this.monthRendered = new EventEmitter();
        this.selected = new EventEmitter();
        this._monthviewOptions = {};
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // Wrap the element in a jQuery selector.
            this.jQueryElement = jQuery(this.element.nativeElement);
            // Add listeners to emit events
            this.jQueryElement
                .on('monthrendered', (_e, args) => this.onMonthViewRenderedEvent(args))
                .on('selected', (_e, event) => this.onMonthViewSelectedEvent(event));
            // Initialize the Soho control.
            this.jQueryElement.monthview(this._monthviewOptions);
            this.monthview = this.jQueryElement.data('monthview');
        });
    }
    ngAfterViewChecked() {
        if (!this.monthview || !this.jQueryElement) {
            return;
        }
        if (this.updateLegend) {
            this.monthview.loadLegend(this.legend);
            this.updateLegend = false;
        }
        if (this.updateRequired) {
            this.updated();
            this.updateRequired = false;
        }
    }
    onMonthViewRenderedEvent(event) {
        this.ngZone.runOutsideAngular(() => this.monthRendered.emit(event));
    }
    onMonthViewSelectedEvent(event) {
        this.ngZone.runOutsideAngular(() => this.selected.emit(event));
    }
    /**
     * Handle updated settings and values.
     */
    updated() {
        this.ngZone.runOutsideAngular(() => this.monthview.updated());
    }
    /**
     * Mark the components as requiring a rebuild after the next update.
     */
    markForRefresh() {
        this.updateRequired = true;
        this.ref.markForCheck();
    }
    /**
     * Tear down the markup for the monthview
     */
    teardown() {
        if (this.monthview) {
            this.ngZone.runOutsideAngular(() => this.monthview.teardown());
        }
    }
    /**
     * Destroy the markup and any other resources.
     */
    destroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.monthview) {
                this.monthview.destroy();
                this.monthview = null;
            }
        });
    }
    /**
     * Shows the given month and year.
     */
    showMonth(month, year) {
        if (this.monthview) {
            this.monthview.showMonth(month, year);
        }
    }
    /**
     * Cleanup just before Angular destroys the component.
     * Unsubscribe observables, detach event handlers and remove other resources to avoid memory leaks.
     */
    ngOnDestroy() {
        this.destroy();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoMonthViewComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoMonthViewComponent, selector: "[soho-monthview]", inputs: { monthviewOptions: "monthviewOptions", locale: "locale", month: "month", year: "year", day: "day", activeDate: "activeDate", activeDateIslamic: "activeDateIslamic", isPopup: "isPopup", inPage: "inPage", inPageTitleAsButton: "inPageTitleAsButton", inPageToggleable: "inPageToggleable", inPageExpanded: "inPageExpanded", firstDayOfWeek: "firstDayOfWeek", showToday: "showToday", isMonthPicker: "isMonthPicker", showMonthYearPicker: "showMonthYearPicker", showLegend: "showLegend", legend: "legend", hideDays: "hideDays", disable: "disable", yearsBack: "yearsBack", yearsAhead: "yearsAhead", range: "range", selectable: "selectable", onSelected: "onSelected", onKeyDown: "onKeyDown", showNextPrevious: "showNextPrevious", changeViewCallback: "changeViewCallback", attributes: "attributes" }, outputs: { monthRendered: "monthRendered", selected: "selected" }, host: { properties: { "class.monthview": "this.isMonthView", "attr.data-init": "this.dataInit" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoMonthViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-monthview]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { isMonthView: [{
                type: HostBinding,
                args: ['class.monthview']
            }], dataInit: [{
                type: HostBinding,
                args: ['attr.data-init']
            }], monthviewOptions: [{
                type: Input
            }], locale: [{
                type: Input
            }], month: [{
                type: Input
            }], year: [{
                type: Input
            }], day: [{
                type: Input
            }], activeDate: [{
                type: Input
            }], activeDateIslamic: [{
                type: Input
            }], isPopup: [{
                type: Input
            }], inPage: [{
                type: Input
            }], inPageTitleAsButton: [{
                type: Input
            }], inPageToggleable: [{
                type: Input
            }], inPageExpanded: [{
                type: Input
            }], firstDayOfWeek: [{
                type: Input
            }], showToday: [{
                type: Input
            }], isMonthPicker: [{
                type: Input
            }], showMonthYearPicker: [{
                type: Input
            }], showLegend: [{
                type: Input
            }], legend: [{
                type: Input
            }], hideDays: [{
                type: Input
            }], disable: [{
                type: Input
            }], yearsBack: [{
                type: Input
            }], yearsAhead: [{
                type: Input
            }], range: [{
                type: Input
            }], selectable: [{
                type: Input
            }], onSelected: [{
                type: Input
            }], onKeyDown: [{
                type: Input
            }], showNextPrevious: [{
                type: Input
            }], changeViewCallback: [{
                type: Input
            }], attributes: [{
                type: Input
            }], monthRendered: [{
                type: Output
            }], selected: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoRadarComponent {
    get isRadar() {
        return true;
    }
    /** Defines the data to use, must be specified for this component. */
    set dataset(dataset) {
        this.options.dataset = dataset;
        if (this.radar) {
            this.radar.settings.dataset = dataset;
            this.updateRequired = true;
        }
    }
    /** If false, the component will not resize when resizing the page. */
    set redrawOnResize(value) {
        this.options.redrawOnResize = value;
        if (this.radar) {
            this.radar.settings.redrawOnResize = value;
            this.updateRequired = true;
        }
    }
    /** Makes it possible to adjust the top margins */
    set margin(value) {
        this.options.margin = value;
        if (this.radar) {
            this.radar.settings.margin = value;
            this.updateRequired = true;
        }
    }
    /** How many levels or inner circles should there be drawn. */
    set levels(value) {
        this.options.levels = value;
        if (this.radar) {
            this.radar.settings.levels = value;
            this.updateRequired = true;
        }
    }
    /** What is the value that the biggest circle will represent */
    set maxValue(value) {
        this.options.maxValue = value;
        if (this.radar) {
            this.radar.settings.maxValue = value;
            this.updateRequired = true;
        }
    }
    /** How far out than the outer circle should the labels be placed,
     * this may be useful to adjust for some charts. */
    set labelFactor(value) {
        this.options.labelFactor = value;
        if (this.radar) {
            this.radar.settings.labelFactor = value;
            this.updateRequired = true;
        }
    }
    /**  The number of pixels after which a label needs to be
     * given a new line. You may want to change this based on label data. */
    set wrapWidth(value) {
        this.options.wrapWidth = value;
        if (this.radar) {
            this.radar.settings.wrapWidth = value;
            this.updateRequired = true;
        }
    }
    /**  The opacity value of the blobs. */
    set opacityArea(value) {
        this.options.opacityArea = value;
        if (this.radar) {
            this.radar.settings.opacityArea = value;
            this.updateRequired = true;
        }
    }
    /**  The size of the colored circles of each blog. Set to zero to remove dots. */
    set dotRadius(value) {
        this.options.dotRadius = value;
        if (this.radar) {
            this.radar.settings.dotRadius = value;
            this.updateRequired = true;
        }
    }
    /**  The opacity of the circles of each blob 0 or .1 are good values. */
    set opacityCircles(value) {
        this.options.opacityCircles = value;
        if (this.radar) {
            this.radar.settings.opacityCircles = value;
            this.updateRequired = true;
        }
    }
    /** The width of the stroke around each blob. */
    set strokeWidth(value) {
        this.options.strokeWidth = value;
        if (this.radar) {
            this.radar.settings.strokeWidth = value;
            this.updateRequired = true;
        }
    }
    /** If true the area and stroke will follow a round path (cardinal-closed). */
    set roundStrokes(value) {
        this.options.roundStrokes = value;
        if (this.radar) {
            this.radar.settings.roundStrokes = value;
            this.updateRequired = true;
        }
    }
    /** If false the axis lines will not be shown in the diagonals. */
    set showCrosslines(value) {
        this.options.showCrosslines = value;
        if (this.radar) {
            this.radar.settings.showCrosslines = value;
            this.updateRequired = true;
        }
    }
    /** If false the axis labels will not be shown. */
    set showAxisLabels(value) {
        this.options.showAxisLabels = value;
        if (this.radar) {
            this.radar.settings.showAxisLabels = value;
            this.updateRequired = true;
        }
    }
    /** An array of colors to use for each blob */
    set colors(value) {
        this.options.colors = value;
        if (this.radar) {
            this.radar.settings.colors = value;
            this.updateRequired = true;
        }
    }
    /** If false no tooltips will be shown. */
    set showTooltips(value) {
        this.options.showTooltips = value;
        if (this.radar) {
            this.radar.settings.showTooltips = value;
            this.updateRequired = true;
        }
    }
    /** A setting that controls the tooltip values and format. */
    set tooltip(value) {
        this.options.tooltip = value;
        if (this.radar) {
            this.radar.settings.tooltip = value;
            this.updateRequired = true;
        }
    }
    /** d3 formatter to use on the axis labels */
    set axisFormatter(value) {
        this.options.axisFormatter = value;
        if (this.radar) {
            this.radar.settings.axisFormatter = value;
            this.updateRequired = true;
        }
    }
    /**  If false the legend will not be shown. */
    set showLegend(value) {
        this.options.showLegend = value;
        if (this.radar) {
            this.radar.settings.showLegend = value;
            this.updateRequired = true;
        }
    }
    /** Where to locate the legend. This can be bottom or right at the moment. */
    set legendPlacement(value) {
        this.options.legendPlacement = value;
        if (this.radar) {
            this.radar.settings.legendPlacement = value;
            this.updateRequired = true;
        }
    }
    /**  An empty message will be displayed when there is no chart data. */
    set emptyMessage(value) {
        this.options.emptyMessage = value;
        if (this.radar) {
            this.radar.settings.emptyMessage = value;
            this.updateRequired = true;
        }
    }
    /** Add extra attributes like id's to the component **/
    set attributes(value) {
        this.options.attributes = value;
        if (this.radar) {
            this.radar.settings.attributes = value;
            this.updateRequired = true;
        }
    }
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        /** Options. */
        this.options = {};
        /* Events*/
        this.selected = new EventEmitter();
        this.unselected = new EventEmitter();
        this.rendered = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.dblclick = new EventEmitter();
        /**
         * @todo remove override of native elements
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.contextmenu = new EventEmitter();
        this.updateRequired = false;
    }
    /** Setup */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.options.type = 'radar';
            this.jQueryElement.chart(this.options);
            this.radar = this.jQueryElement.data('radar');
            // Setup the events
            this.jQueryElement.on('selected', (_e, args) => this.ngZone.run(() => this.selected.emit(args)));
            this.jQueryElement.on('unselected', (_e, args) => this.ngZone.run(() => this.unselected.emit(args)));
            this.jQueryElement.on('rendered', (...args) => this.ngZone.run(() => this.rendered.emit(args)));
            this.jQueryElement.on('contextmenu', (...args) => this.ngZone.run(() => this.contextmenu?.emit(args)));
            this.jQueryElement.on('dblclick', (_e, args) => this.ngZone.run(() => this.dblclick.emit(args)));
        });
    }
    ngAfterViewChecked() {
        if (this.radar && this.updateRequired) {
            this.ngZone.runOutsideAngular(() => this.radar?.updated(this.radar.settings));
            this.updateRequired = false;
        }
    }
    /** Tear Down */
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.radar) {
                this.radar.destroy();
                this.radar = null;
            }
        });
    }
    setSelected(selected) {
        this.ngZone.runOutsideAngular(() => this.radar?.setSelected(selected));
    }
    toggleSelected(selected) {
        this.ngZone.runOutsideAngular(() => this.radar?.toggleSelected(selected));
    }
    getSelected() {
        return this.ngZone.runOutsideAngular(() => this.radar?.getSelected());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoRadarComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoRadarComponent, selector: "[soho-radar]", inputs: { dataset: "dataset", redrawOnResize: "redrawOnResize", margin: "margin", levels: "levels", maxValue: "maxValue", labelFactor: "labelFactor", wrapWidth: "wrapWidth", opacityArea: "opacityArea", dotRadius: "dotRadius", opacityCircles: "opacityCircles", strokeWidth: "strokeWidth", roundStrokes: "roundStrokes", showCrosslines: "showCrosslines", showAxisLabels: "showAxisLabels", colors: "colors", showTooltips: "showTooltips", tooltip: "tooltip", axisFormatter: "axisFormatter", showLegend: "showLegend", legendPlacement: "legendPlacement", emptyMessage: "emptyMessage", attributes: "attributes" }, outputs: { selected: "selected", unselected: "unselected", rendered: "rendered", dblclick: "dblclick", contextmenu: "contextmenu" }, host: { properties: { "class.chart-container": "this.isRadar" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoRadarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-radar]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isRadar: [{
                type: HostBinding,
                args: ['class.chart-container']
            }], dataset: [{
                type: Input
            }], redrawOnResize: [{
                type: Input
            }], margin: [{
                type: Input
            }], levels: [{
                type: Input
            }], maxValue: [{
                type: Input
            }], labelFactor: [{
                type: Input
            }], wrapWidth: [{
                type: Input
            }], opacityArea: [{
                type: Input
            }], dotRadius: [{
                type: Input
            }], opacityCircles: [{
                type: Input
            }], strokeWidth: [{
                type: Input
            }], roundStrokes: [{
                type: Input
            }], showCrosslines: [{
                type: Input
            }], showAxisLabels: [{
                type: Input
            }], colors: [{
                type: Input
            }], showTooltips: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], axisFormatter: [{
                type: Input
            }], showLegend: [{
                type: Input
            }], legendPlacement: [{
                type: Input
            }], emptyMessage: [{
                type: Input
            }], attributes: [{
                type: Input
            }], selected: [{
                type: Output
            }], unselected: [{
                type: Output
            }], rendered: [{
                type: Output
            }], dblclick: [{
                type: Output
            }], contextmenu: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
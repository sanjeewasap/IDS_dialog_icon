import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
/********************************************************************
 * Calendar Week View Element
 *******************************************************************/
// @ts-ignore
export class SohoCalendarWeekViewComponent {
    constructor() {
        this.isCalendarWeekView = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCalendarWeekViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoCalendarWeekViewComponent, selector: "div[soho-calendar-week-view]", host: { properties: { "class.calendar-weekview": "this.isCalendarWeekView" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCalendarWeekViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'div[soho-calendar-week-view]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], propDecorators: { isCalendarWeekView: [{
                type: HostBinding,
                args: ['class.calendar-weekview']
            }] } });
/********************************************************************
 * Calendar Month View Element
 *******************************************************************/
// @ts-ignore
export class SohoCalendarMonthViewComponent {
    constructor() {
        this.isCalendarMonthView = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCalendarMonthViewComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoCalendarMonthViewComponent, selector: "div[soho-calendar-monthview]", host: { properties: { "class.calendar-monthview": "this.isCalendarMonthView" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCalendarMonthViewComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'div[soho-calendar-monthview]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], propDecorators: { isCalendarMonthView: [{
                type: HostBinding,
                args: ['class.calendar-monthview']
            }] } });
/********************************************************************
 * Main Calendar component
 *******************************************************************/
export class SohoCalendarComponent {
    set calendarOptions(calendarOptions) {
        this._calendarOptions = calendarOptions;
        if (this.jQueryElement) {
            // No need to set the 'settings' as the Rebuild will create
            // a new control with the _gridOptions.
            this.markForRefresh();
        }
    }
    get calendarOptions() {
        if (this.calendar) {
            return this.calendar.settings;
        }
        return this._calendarOptions;
    }
    set calendarWeekOptions(calendarWeekOptions) {
        this._calendarWeekOptions = calendarWeekOptions;
        if (this.jQueryElement) {
            // No need to set the 'settings' as the Rebuild will create
            // a new control with the _gridOptions.
            this.markForRefresh();
        }
    }
    get calendarWeekOptions() {
        if (this.calendar) {
            return this.calendar.settings.weekOptions;
        }
        return this._calendarWeekOptions;
    }
    set disable(disable) {
        this._calendarOptions.disable = disable;
        if (this.calendar) {
            this.calendar.settings.disable = disable;
            this.markForRefresh();
        }
    }
    get disable() {
        if (this.calendar) {
            return this.calendar.settings.disable;
        }
        return this.disable;
    }
    set dayLegend(dayLegend) {
        this._calendarOptions.dayLegend = dayLegend;
        if (this.calendar) {
            this.calendar.settings.dayLegend = dayLegend;
            this.markForRefresh();
        }
    }
    get dayLegend() {
        if (this.calendar) {
            return this.calendar.settings.dayLegend;
        }
        return this.dayLegend;
    }
    set attributes(attributes) {
        this._calendarOptions.attributes = attributes;
        if (this.calendar) {
            this.calendar.settings.attributes = attributes;
            this.markForRefresh();
        }
    }
    get attributes() {
        if (this.calendar) {
            return this.calendar.settings.attributes;
        }
        return this.attributes;
    }
    /**
     * An array of objects with data for the event types.
     */
    set eventTypes(eventTypes) {
        this._calendarOptions.eventTypes = eventTypes;
        if (this.calendar) {
            this.calendar.settings.eventTypes = eventTypes;
            this.markForRefresh();
        }
    }
    get eventTypes() {
        if (this.calendar) {
            return this.calendar.settings.eventTypes;
        }
        return this._calendarOptions.eventTypes;
    }
    /**
     * An array of objects with data for the events.
     */
    set events(events) {
        this._calendarOptions.events = events;
        if (this.calendar) {
            this.calendar.settings.events = events;
            this.markForRefresh();
        }
    }
    get events() {
        if (this.calendar) {
            return this.calendar.settings.events;
        }
        return this._calendarOptions.events;
    }
    /**
     * The name of the locale to use for this instance. If not set the current locale will be used.
     */
    set locale(locale) {
        this._calendarOptions.locale = locale;
        if (this.calendar) {
            this.calendar.settings.locale = locale;
            this.markForRefresh();
        }
    }
    get locale() {
        if (this.calendar) {
            return this.calendar.settings.locale;
        }
        return this._calendarOptions.locale;
    }
    /**
     * Initial month to show.
     */
    set month(month) {
        this._calendarOptions.month = month;
        if (this.calendar) {
            this.calendar.settings.month = month;
            this.markForRefresh();
        }
    }
    get month() {
        if (this.calendar) {
            return this.calendar.settings.month;
        }
        return this._calendarOptions.month;
    }
    /**
     * Initial year to show.
     */
    set year(year) {
        this._calendarOptions.year = year;
        if (this.calendar) {
            this.calendar.settings.year = year;
            this.markForRefresh();
        }
    }
    get year() {
        if (this.calendar) {
            return this.calendar.settings.year;
        }
        return this._calendarOptions.year;
    }
    /**
     * If false the dropdown to change views will not be shown.
     */
    set showViewChanger(showViewChanger) {
        this._calendarOptions.showViewChanger = showViewChanger;
        if (this.calendar) {
            this.calendar.settings.showViewChanger = showViewChanger;
            this.markForRefresh();
        }
    }
    get showViewChanger() {
        if (this.calendar) {
            return this.calendar.settings.showViewChanger;
        }
        return this._calendarOptions.showViewChanger;
    }
    /**
     * If false the legend will not show below.
     */
    set showEventLegend(showEventLegend) {
        this._calendarOptions.showEventLegend = showEventLegend;
        if (this.calendar) {
            this.calendar.settings.showEventLegend = showEventLegend;
            this.markForRefresh();
        }
    }
    get showEventLegend() {
        if (this.calendar) {
            return this.calendar.settings.showEventLegend;
        }
        return this._calendarOptions.showEventLegend;
    }
    /**
     * If false the mouseover text or day event will not be shown.
     */
    set eventTooltip(eventTooltip) {
        this._calendarOptions.eventTooltip = eventTooltip;
        if (this.calendar) {
            this.calendar.settings.eventTooltip = eventTooltip;
            this.markForRefresh();
        }
    }
    get eventTooltip() {
        if (this.calendar) {
            return this.calendar.settings.eventTooltip;
        }
        return this._calendarOptions.eventTooltip;
    }
    /**
     * If false the mouseover text for event icon will not be shown.
     */
    set iconTooltip(iconTooltip) {
        this._calendarOptions.iconTooltip = iconTooltip;
        if (this.calendar) {
            this.calendar.settings.iconTooltip = iconTooltip;
            this.markForRefresh();
        }
    }
    get iconTooltip() {
        if (this.calendar) {
            return this.calendar.settings.iconTooltip;
        }
        return this._calendarOptions.iconTooltip;
    }
    /**
     * Fires when a month is rendered, allowing you to pass back events or event types to show.
     */
    set renderMonthCallback(renderMonthCallback) {
        this._calendarOptions.onRenderMonth = renderMonthCallback;
        if (this.calendar) {
            this.calendar.settings.onRenderMonth = renderMonthCallback;
            this.markForRefresh();
        }
    }
    get renderMonthCallback() {
        if (this.calendar) {
            return this.calendar.settings.onRenderMonth;
        }
        return this._calendarOptions.onRenderMonth;
    }
    /**
     * Fires when a month day is clicked. Allowing you to do something.
     */
    set selectedCallback(selectedCallback) {
        this._calendarOptions.onSelected = selectedCallback;
        if (this.calendar) {
            this.calendar.settings.onSelected = selectedCallback;
            this.markForRefresh();
        }
    }
    get selectedCallback() {
        if (this.calendar) {
            return this.calendar.settings.onSelected;
        }
        return this._calendarOptions.onSelected;
    }
    /**
     * The ID of the template used for the events.
     */
    set template(template) {
        this._calendarOptions.template = template;
        if (this.calendar) {
            this.calendar.settings.template = template;
            this.markForRefresh();
        }
    }
    get template() {
        if (this.calendar) {
            return this.calendar.settings.template;
        }
        return this._calendarOptions.template;
    }
    /**
     * How many days in advance should we show in the upcoming events pane.
     */
    set upcomingEventDays(upcomingEventDays) {
        this._calendarOptions.upcomingEventDays = upcomingEventDays;
        if (this.calendar) {
            this.calendar.settings.upcomingEventDays = upcomingEventDays;
            this.markForRefresh();
        }
    }
    get upcomingEventDays() {
        if (this.calendar) {
            return this.calendar.settings.upcomingEventDays;
        }
        return this._calendarOptions.upcomingEventDays;
    }
    /**
     * The ID of the template used for the modal dialog on events.
     */
    set modalTemplate(modalTemplate) {
        this._calendarOptions.modalTemplate = modalTemplate;
        if (this.calendar) {
            this.calendar.settings.modalTemplate = modalTemplate;
            this.markForRefresh();
        }
    }
    get modalTemplate() {
        if (this.calendar) {
            return this.calendar.settings.modalTemplate;
        }
        return this._calendarOptions.modalTemplate;
    }
    /**
     * ID of the menu to use for an event right click context menu
     */
    set menuId(menuId) {
        this._calendarOptions.menuId = menuId;
        if (this.calendar) {
            this.calendar.settings.menuId = menuId;
            this.markForRefresh();
        }
    }
    get menuId() {
        if (this.calendar) {
            return this.calendar.settings.menuId;
        }
        return this._calendarOptions.menuId;
    }
    /**
     * Callback for the  right click context menu
     */
    set menuSelected(menuSelected) {
        this._calendarOptions.menuSelected = menuSelected;
        if (this.calendar) {
            this.calendar.settings.menuSelected = menuSelected;
            this.markForRefresh();
        }
    }
    get menuSelected() {
        if (this.calendar) {
            return this.calendar.settings.menuSelected;
        }
        return this._calendarOptions.menuSelected;
    }
    /**
     * Initial event properties for the new events dialog.
     */
    set newEventDefaults(newEventDefaults) {
        this._calendarOptions.newEventDefaults = newEventDefaults;
        if (this.calendar) {
            this.calendar.settings.newEventDefaults = newEventDefaults;
            this.markForRefresh();
        }
    }
    get newEventDefaults() {
        if (this.calendar) {
            return this.calendar.settings.newEventDefaults;
        }
        return this._calendarOptions.newEventDefaults;
    }
    /**
     * Call back for when the view changer is changed
     */
    set changeViewCallback(changeViewCallback) {
        this._calendarOptions.onChangeView = changeViewCallback;
        if (this.calendar) {
            this.calendar.settings.onChangeView = changeViewCallback;
            this.markForRefresh();
        }
    }
    get changeViewCallback() {
        if (this.calendar) {
            return this.calendar.settings.onChangeView;
        }
        return this._calendarOptions.onChangeView;
    }
    /**
     * Deterimines if the today button should be shown.
     */
    set showToday(showToday) {
        this._calendarOptions.showToday = showToday;
        if (this.calendar) {
            this.calendar.settings.showToday = showToday;
            this.markForRefresh();
        }
    }
    get showToday() {
        if (this.calendar) {
            return this.calendar.settings.showToday;
        }
        return this._calendarOptions.showToday;
    }
    /**
     * Configure date range for calendar
     */
    set displayRange(displayRange) {
        this._calendarOptions.displayRange = displayRange;
        if (this.calendar) {
            this.calendar.settings.displayRange = displayRange;
            this.markForRefresh();
        }
    }
    get displayRange() {
        if (this.calendar) {
            return this.calendar.settings.displayRange;
        }
        return this._calendarOptions.displayRange;
    }
    /**
     * Configure day of week setting
     */
    set firstDayOfWeek(day) {
        this._calendarOptions.firstDayOfWeek = day;
        if (this.calendar) {
            this.calendar.settings.firstDayOfWeek = day;
            this.markForRefresh();
        }
    }
    get firstDayOfWeek() {
        if (this.calendar) {
            return this.calendar.settings.firstDayOfWeek;
        }
        return this.firstDayOfWeek;
    }
    constructor(element, ngZone, ref) {
        this.element = element;
        this.ngZone = ngZone;
        this.ref = ref;
        this.isCalendar = true;
        // -------------------------------------------
        // Component Output
        // -------------------------------------------
        this.selected = new EventEmitter();
        this.monthRendered = new EventEmitter();
        this.eventClick = new EventEmitter();
        this.eventDblClick = new EventEmitter();
        this.eventContextMenu = new EventEmitter();
        this._calendarOptions = {};
        this._calendarWeekOptions = {};
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // Wrap the element in a jQuery selector.
            this.jQueryElement = jQuery(this.element.nativeElement);
            // Add listeners to emit events
            this.jQueryElement
                .on('selected', (_e, event) => this.onSelectedEvent(event))
                .on('monthrendered', (_e, args) => this.onMonthRenderedEvent(args))
                .on('eventclick', (_e, args) => this.onEventClick(args))
                .on('eventdblclick', (_e, args) => this.onEventDblClick(args))
                .on('contextmenu', (_e, args) => this.onEventContextMenu(args));
            // Initialise the Soho control.
            this.jQueryElement.calendar(this._calendarOptions);
            // Once the control is initialised, extract the control
            // plug-in from the element.  The element name is defined
            // by the plug-in, but in this case is 'calendar'.
            this.calendar = this.jQueryElement.data('calendar');
        });
    }
    ngAfterViewChecked() {
        if (!this.calendar || !this.jQueryElement) {
            return;
        }
        if (this.updateRequired) {
            // call outside the angular zone so change detection isn't triggered by the soho component.
            this.updated();
            this.updateRequired = false;
        }
    }
    onSelectedEvent(event) {
        this.ngZone.run(() => this.selected.emit(event));
    }
    onMonthRenderedEvent(event) {
        this.ngZone.run(() => this.monthRendered.emit(event));
    }
    onEventClick(event) {
        this.ngZone.run(() => this.eventClick.emit(event));
    }
    onEventDblClick(event) {
        this.ngZone.run(() => this.eventDblClick.emit(event));
    }
    onEventContextMenu(event) {
        this.ngZone.run(() => this.eventContextMenu.emit(event));
    }
    /**
     * Get the current selected date on the calendar.
     *
     * @returns the currently selected date on the control.
     */
    currentDate() {
        return this.ngZone.runOutsideAngular(() => this.calendar.currentDate());
    }
    /**
     * Get the events and date for the currently selected calendar day.
     *
     * @param date The date to find the events for.
     * @returns dayEvents An object with all the events and the event date.
     */
    getDayEvents(date) {
        return this.ngZone.runOutsideAngular(() => this.calendar.getDayEvents(date));
    }
    /**
     * Add a new event via the event object and show it if it should be visible in the calendar.
     *
     * @param event The event object with common event properties.
     */
    addEvent(event) {
        this.ngZone.runOutsideAngular(() => this.calendar.addEvent(event));
    }
    /**
     * Update an event via the event object and show it if it should be visible in the calendar.
     * It uses the event id to do this.
     *
     * @param event The event object with common event properties.
     */
    updateEvent(event) {
        this.ngZone.runOutsideAngular(() => this.calendar.updateEvent(event));
    }
    /**
     * Remove an event from the dataset and page. It uses the id property.
     *
     * @param event The event object with common event properties.
     */
    deleteEvent(event) {
        this.ngZone.runOutsideAngular(() => this.calendar.deleteEvent(event));
    }
    /**
     * Show a modal used to add/edit events. This uses the modalTemplate setting for the modal contents.
     *
     * @param event The event object with common event properties for defaulting fields in the template.
     * @param done The callback for when the modal closes.
     */
    showEventModal(event, done) {
        this.ngZone.runOutsideAngular(() => this.calendar.showEventModal(event, done));
    }
    /**
     * @returns whether or not this Modal is currently being displayed
     */
    modalVisible() {
        return this.ngZone.runOutsideAngular(() => this.calendar.modalVisible());
    }
    /**
     * Remove all events from the calendar
     */
    clearEvents() {
        this.ngZone.runOutsideAngular(() => this.calendar.clearEvents());
    }
    /**
     * Handle updated settings and values.
     */
    updated(settings) {
        this.ngZone.runOutsideAngular(() => this.calendar.updated(settings));
    }
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh() {
        // Run updated on the next updated check.
        this.updateRequired = true;
        // ... make sure the change detector kicks in, otherwise if the inputs
        // were change programmatically the component may not be eligible for
        // updating.
        this.ref.markForCheck();
    }
    /**
     * Destructor.
     */
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.calendar) {
                this.calendar.destroy();
                this.calendar = null;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCalendarComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoCalendarComponent, selector: "[soho-calendar]", inputs: { calendarOptions: "calendarOptions", calendarWeekOptions: "calendarWeekOptions", disable: "disable", dayLegend: "dayLegend", attributes: "attributes", eventTypes: "eventTypes", events: "events", locale: "locale", month: "month", year: "year", showViewChanger: "showViewChanger", showEventLegend: "showEventLegend", eventTooltip: "eventTooltip", iconTooltip: "iconTooltip", renderMonthCallback: "renderMonthCallback", selectedCallback: "selectedCallback", template: "template", upcomingEventDays: "upcomingEventDays", modalTemplate: "modalTemplate", menuId: "menuId", menuSelected: "menuSelected", newEventDefaults: "newEventDefaults", changeViewCallback: "changeViewCallback", showToday: "showToday", displayRange: "displayRange", firstDayOfWeek: "firstDayOfWeek" }, outputs: { selected: "selected", monthRendered: "monthRendered", eventClick: "eventClick", eventDblClick: "eventDblClick", eventContextMenu: "eventContextMenu" }, host: { properties: { "class.calendar": "this.isCalendar" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCalendarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-calendar]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { isCalendar: [{
                type: HostBinding,
                args: ['class.calendar']
            }], calendarOptions: [{
                type: Input
            }], calendarWeekOptions: [{
                type: Input
            }], disable: [{
                type: Input
            }], dayLegend: [{
                type: Input
            }], attributes: [{
                type: Input
            }], eventTypes: [{
                type: Input
            }], events: [{
                type: Input
            }], locale: [{
                type: Input
            }], month: [{
                type: Input
            }], year: [{
                type: Input
            }], showViewChanger: [{
                type: Input
            }], showEventLegend: [{
                type: Input
            }], eventTooltip: [{
                type: Input
            }], iconTooltip: [{
                type: Input
            }], renderMonthCallback: [{
                type: Input
            }], selectedCallback: [{
                type: Input
            }], template: [{
                type: Input
            }], upcomingEventDays: [{
                type: Input
            }], modalTemplate: [{
                type: Input
            }], menuId: [{
                type: Input
            }], menuSelected: [{
                type: Input
            }], newEventDefaults: [{
                type: Input
            }], changeViewCallback: [{
                type: Input
            }], showToday: [{
                type: Input
            }], displayRange: [{
                type: Input
            }], firstDayOfWeek: [{
                type: Input
            }], selected: [{
                type: Output
            }], monthRendered: [{
                type: Output
            }], eventClick: [{
                type: Output
            }], eventDblClick: [{
                type: Output
            }], eventContextMenu: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby1jYWxlbmRhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZHMtZW50ZXJwcmlzZS1uZy9zcmMvbGliL2NhbGVuZGFyL3NvaG8tY2FsZW5kYXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFJTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUVULFlBQVksRUFDWixXQUFXLEVBQ1gsS0FBSyxFQUdMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQzs7QUFFdkI7O3FFQUVxRTtBQUNyRSxhQUFhO0FBTWIsTUFBTSxPQUFPLDZCQUE2QjtJQUwxQztRQU0wQyx1QkFBa0IsR0FBRyxJQUFJLENBQUM7S0FDbkU7OEdBRlksNkJBQTZCO2tHQUE3Qiw2QkFBNkIsb0pBSDlCLDJCQUEyQjs7MkZBRzFCLDZCQUE2QjtrQkFMekMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsOEJBQThCO29CQUN4QyxRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7OEJBRXlDLGtCQUFrQjtzQkFBekQsV0FBVzt1QkFBQyx5QkFBeUI7O0FBR3hDOztxRUFFcUU7QUFDckUsYUFBYTtBQU1iLE1BQU0sT0FBTyw4QkFBOEI7SUFMM0M7UUFNMkMsd0JBQW1CLEdBQUcsSUFBSSxDQUFDO0tBQ3JFOzhHQUZZLDhCQUE4QjtrR0FBOUIsOEJBQThCLHNKQUgvQiwyQkFBMkI7OzJGQUcxQiw4QkFBOEI7a0JBTDFDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLDhCQUE4QjtvQkFDeEMsUUFBUSxFQUFFLDJCQUEyQjtvQkFDckMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2hEOzhCQUUwQyxtQkFBbUI7c0JBQTNELFdBQVc7dUJBQUMsMEJBQTBCOztBQUd6Qzs7cUVBRXFFO0FBTXJFLE1BQU0sT0FBTyxxQkFBcUI7SUFJ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QUFZO3NCQUF4QixLQUFLO2dCQWtCTyxjQUFjO3NCQUExQixLQUFLO2dCQW1CSSxRQUFRO3NCQUFqQixNQUFNO2dCQUNHLGFBQWE7c0JBQXRCLE1BQU07Z0JBQ0csVUFBVTtzQkFBbkIsTUFBTTtnQkFDRyxhQUFhO3NCQUF0QixNQUFNO2dCQUNHLGdCQUFnQjtzQkFBekIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0NoZWNrZWQsXG4gIEFmdGVyVmlld0luaXQsXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgTmdab25lLFxuICBPbkRlc3Ryb3ksXG4gIE91dHB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxuICogQ2FsZW5kYXIgV2VlayBWaWV3IEVsZW1lbnRcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLy8gQHRzLWlnbm9yZVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZGl2W3NvaG8tY2FsZW5kYXItd2Vlay12aWV3XScsIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgU29ob0NhbGVuZGFyV2Vla1ZpZXdDb21wb25lbnQge1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNhbGVuZGFyLXdlZWt2aWV3JykgaXNDYWxlbmRhcldlZWtWaWV3ID0gdHJ1ZTtcbn1cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBDYWxlbmRhciBNb250aCBWaWV3IEVsZW1lbnRcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLy8gQHRzLWlnbm9yZVxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZGl2W3NvaG8tY2FsZW5kYXItbW9udGh2aWV3XScsIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgdGVtcGxhdGU6IGA8bmctY29udGVudD48L25nLWNvbnRlbnQ+YCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgU29ob0NhbGVuZGFyTW9udGhWaWV3Q29tcG9uZW50IHtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jYWxlbmRhci1tb250aHZpZXcnKSBpc0NhbGVuZGFyTW9udGhWaWV3ID0gdHJ1ZTtcbn1cblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXG4gKiBNYWluIENhbGVuZGFyIGNvbXBvbmVudFxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdbc29oby1jYWxlbmRhcl0nLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFNvaG9DYWxlbmRhckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0NoZWNrZWQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jYWxlbmRhcicpIGlzQ2FsZW5kYXIgPSB0cnVlO1xuXG4gIEBJbnB1dCgpIHNldCBjYWxlbmRhck9wdGlvbnMoY2FsZW5kYXJPcHRpb25zOiBTb2hvQ2FsZW5kYXJPcHRpb25zIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5fY2FsZW5kYXJPcHRpb25zID0gY2FsZW5kYXJPcHRpb25zO1xuXG4gICAgaWYgKHRoaXMualF1ZXJ5RWxlbWVudCkge1xuICAgICAgLy8gTm8gbmVlZCB0byBzZXQgdGhlICdzZXR0aW5ncycgYXMgdGhlIFJlYnVpbGQgd2lsbCBjcmVhdGVcbiAgICAgIC8vIGEgbmV3IGNvbnRyb2wgd2l0aCB0aGUgX2dyaWRPcHRpb25zLlxuICAgICAgdGhpcy5tYXJrRm9yUmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuICBnZXQgY2FsZW5kYXJPcHRpb25zKCk6IFNvaG9DYWxlbmRhck9wdGlvbnMgfCB1bmRlZmluZWQge1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxlbmRhci5zZXR0aW5ncztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fY2FsZW5kYXJPcHRpb25zO1xuICB9XG5cbiAgQElucHV0KCkgc2V0IGNhbGVuZGFyV2Vla09wdGlvbnMoY2FsZW5kYXJXZWVrT3B0aW9uczogU29ob0NhbGVuZGFyV2Vla09wdGlvbnMgfCB1bmRlZmluZWQpIHtcbiAgICB0aGlzLl9jYWxlbmRhcldlZWtPcHRpb25zID0gY2FsZW5kYXJXZWVrT3B0aW9ucztcblxuICAgIGlmICh0aGlzLmpRdWVyeUVsZW1lbnQpIHtcbiAgICAgIC8vIE5vIG5lZWQgdG8gc2V0IHRoZSAnc2V0dGluZ3MnIGFzIHRoZSBSZWJ1aWxkIHdpbGwgY3JlYXRlXG4gICAgICAvLyBhIG5ldyBjb250cm9sIHdpdGggdGhlIF9ncmlkT3B0aW9ucy5cbiAgICAgIHRoaXMubWFya0ZvclJlZnJlc2goKTtcbiAgICB9XG4gIH1cbiAgZ2V0IGNhbGVuZGFyV2Vla09wdGlvbnMoKTogU29ob0NhbGVuZGFyV2Vla09wdGlvbnMgfCB1bmRlZmluZWQge1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxlbmRhci5zZXR0aW5ncy53ZWVrT3B0aW9ucztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fY2FsZW5kYXJXZWVrT3B0aW9ucztcbiAgfVxuXG4gIEBJbnB1dCgpIHNldCBkaXNhYmxlKGRpc2FibGU6IFNvaG9EYXRlUGlja2VyRGlzYWJsZSkge1xuICAgICh0aGlzLl9jYWxlbmRhck9wdGlvbnMgYXMgYW55KS5kaXNhYmxlID0gZGlzYWJsZTtcblxuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLmRpc2FibGUgPSBkaXNhYmxlO1xuICAgICAgdGhpcy5tYXJrRm9yUmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuICBnZXQgZGlzYWJsZSgpOiBTb2hvRGF0ZVBpY2tlckRpc2FibGUge1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICByZXR1cm4gKHRoaXMuY2FsZW5kYXIgYXMgYW55KS5zZXR0aW5ncy5kaXNhYmxlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmRpc2FibGU7XG4gIH1cblxuICBASW5wdXQoKSBzZXQgZGF5TGVnZW5kKGRheUxlZ2VuZDogQXJyYXk8U29ob0RhdGVQaWNrZXJMZWdlbmQ+KSB7XG4gICAgKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLmRheUxlZ2VuZCA9IGRheUxlZ2VuZDtcblxuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLmRheUxlZ2VuZCA9IGRheUxlZ2VuZDtcbiAgICAgIHRoaXMubWFya0ZvclJlZnJlc2goKTtcbiAgICB9XG4gIH1cbiAgZ2V0IGRheUxlZ2VuZCgpOiBBcnJheTxTb2hvRGF0ZVBpY2tlckxlZ2VuZD4ge1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICByZXR1cm4gKHRoaXMuY2FsZW5kYXIgYXMgYW55KS5zZXR0aW5ncy5kYXlMZWdlbmQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZGF5TGVnZW5kO1xuICB9XG5cbiAgQElucHV0KCkgc2V0IGF0dHJpYnV0ZXMoYXR0cmlidXRlczogQXJyYXk8T2JqZWN0PiB8IE9iamVjdCB8IHVuZGVmaW5lZCkge1xuICAgICh0aGlzLl9jYWxlbmRhck9wdGlvbnMgYXMgYW55KS5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcblxuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICAgICAgdGhpcy5tYXJrRm9yUmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuICBnZXQgYXR0cmlidXRlcygpOiBBcnJheTxPYmplY3Q+IHwgT2JqZWN0IHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodGhpcy5jYWxlbmRhcikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXIuc2V0dGluZ3MuYXR0cmlidXRlcztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFuIGFycmF5IG9mIG9iamVjdHMgd2l0aCBkYXRhIGZvciB0aGUgZXZlbnQgdHlwZXMuXG4gICAqL1xuICBASW5wdXQoKSBzZXQgZXZlbnRUeXBlcyhldmVudFR5cGVzOiBTb2hvQ2FsZW5kYXJFdmVudFR5cGVbXSB8IHVuZGVmaW5lZCkge1xuICAgICh0aGlzLl9jYWxlbmRhck9wdGlvbnMgYXMgYW55KS5ldmVudFR5cGVzID0gZXZlbnRUeXBlcztcbiAgICBpZiAodGhpcy5jYWxlbmRhcikge1xuICAgICAgdGhpcy5jYWxlbmRhci5zZXR0aW5ncy5ldmVudFR5cGVzID0gZXZlbnRUeXBlcztcbiAgICAgIHRoaXMubWFya0ZvclJlZnJlc2goKTtcbiAgICB9XG4gIH1cbiAgZ2V0IGV2ZW50VHlwZXMoKTogU29ob0NhbGVuZGFyRXZlbnRUeXBlW10gfCB1bmRlZmluZWQge1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxlbmRhci5zZXR0aW5ncy5ldmVudFR5cGVzO1xuICAgIH1cblxuICAgIHJldHVybiAodGhpcy5fY2FsZW5kYXJPcHRpb25zIGFzIGFueSkuZXZlbnRUeXBlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBBbiBhcnJheSBvZiBvYmplY3RzIHdpdGggZGF0YSBmb3IgdGhlIGV2ZW50cy5cbiAgICovXG4gIEBJbnB1dCgpIHNldCBldmVudHMoZXZlbnRzOiBTb2hvQ2FsZW5kYXJFdmVudFtdKSB7XG4gICAgKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLmV2ZW50cyA9IGV2ZW50cztcbiAgICBpZiAodGhpcy5jYWxlbmRhcikge1xuICAgICAgdGhpcy5jYWxlbmRhci5zZXR0aW5ncy5ldmVudHMgPSBldmVudHM7XG4gICAgICB0aGlzLm1hcmtGb3JSZWZyZXNoKCk7XG4gICAgfVxuICB9XG4gIGdldCBldmVudHMoKTogU29ob0NhbGVuZGFyRXZlbnRbXSB7XG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHJldHVybiAodGhpcy5jYWxlbmRhciBhcyBhbnkpLnNldHRpbmdzLmV2ZW50cztcbiAgICB9XG5cbiAgICByZXR1cm4gKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLmV2ZW50cztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbmFtZSBvZiB0aGUgbG9jYWxlIHRvIHVzZSBmb3IgdGhpcyBpbnN0YW5jZS4gSWYgbm90IHNldCB0aGUgY3VycmVudCBsb2NhbGUgd2lsbCBiZSB1c2VkLlxuICAgKi9cbiAgQElucHV0KCkgc2V0IGxvY2FsZShsb2NhbGU6IHN0cmluZykge1xuICAgICh0aGlzLl9jYWxlbmRhck9wdGlvbnMgYXMgYW55KS5sb2NhbGUgPSBsb2NhbGU7XG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHRoaXMuY2FsZW5kYXIuc2V0dGluZ3MubG9jYWxlID0gbG9jYWxlO1xuICAgICAgdGhpcy5tYXJrRm9yUmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuICBnZXQgbG9jYWxlKCk6IHN0cmluZyB7XG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHJldHVybiAodGhpcy5jYWxlbmRhciBhcyBhbnkpLnNldHRpbmdzLmxvY2FsZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLmxvY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsIG1vbnRoIHRvIHNob3cuXG4gICAqL1xuICBASW5wdXQoKSBzZXQgbW9udGgobW9udGg6IG51bWJlciB8IHVuZGVmaW5lZCkge1xuICAgICh0aGlzLl9jYWxlbmRhck9wdGlvbnMgYXMgYW55KS5tb250aCA9IG1vbnRoO1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLm1vbnRoID0gbW9udGg7XG4gICAgICB0aGlzLm1hcmtGb3JSZWZyZXNoKCk7XG4gICAgfVxuICB9XG4gIGdldCBtb250aCgpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxlbmRhci5zZXR0aW5ncy5tb250aDtcbiAgICB9XG5cbiAgICByZXR1cm4gKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLm1vbnRoO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWwgeWVhciB0byBzaG93LlxuICAgKi9cbiAgQElucHV0KCkgc2V0IHllYXIoeWVhcjogbnVtYmVyIHwgdW5kZWZpbmVkKSB7XG4gICAgKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLnllYXIgPSB5ZWFyO1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLnllYXIgPSB5ZWFyO1xuICAgICAgdGhpcy5tYXJrRm9yUmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuICBnZXQgeWVhcigpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxlbmRhci5zZXR0aW5ncy55ZWFyO1xuICAgIH1cblxuICAgIHJldHVybiAodGhpcy5fY2FsZW5kYXJPcHRpb25zIGFzIGFueSkueWVhcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiBmYWxzZSB0aGUgZHJvcGRvd24gdG8gY2hhbmdlIHZpZXdzIHdpbGwgbm90IGJlIHNob3duLlxuICAgKi9cbiAgQElucHV0KCkgc2V0IHNob3dWaWV3Q2hhbmdlcihzaG93Vmlld0NoYW5nZXI6IGJvb2xlYW4gfCB1bmRlZmluZWQpIHtcbiAgICAodGhpcy5fY2FsZW5kYXJPcHRpb25zIGFzIGFueSkuc2hvd1ZpZXdDaGFuZ2VyID0gc2hvd1ZpZXdDaGFuZ2VyO1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLnNob3dWaWV3Q2hhbmdlciA9IHNob3dWaWV3Q2hhbmdlcjtcbiAgICAgIHRoaXMubWFya0ZvclJlZnJlc2goKTtcbiAgICB9XG4gIH1cbiAgZ2V0IHNob3dWaWV3Q2hhbmdlcigpOiBib29sZWFuIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodGhpcy5jYWxlbmRhcikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXIuc2V0dGluZ3Muc2hvd1ZpZXdDaGFuZ2VyO1xuICAgIH1cblxuICAgIHJldHVybiAodGhpcy5fY2FsZW5kYXJPcHRpb25zIGFzIGFueSkuc2hvd1ZpZXdDaGFuZ2VyO1xuICB9XG5cbiAgLyoqXG4gICAqIElmIGZhbHNlIHRoZSBsZWdlbmQgd2lsbCBub3Qgc2hvdyBiZWxvdy5cbiAgICovXG4gIEBJbnB1dCgpIHNldCBzaG93RXZlbnRMZWdlbmQoc2hvd0V2ZW50TGVnZW5kOiBib29sZWFuIHwgdW5kZWZpbmVkKSB7XG4gICAgKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLnNob3dFdmVudExlZ2VuZCA9IHNob3dFdmVudExlZ2VuZDtcbiAgICBpZiAodGhpcy5jYWxlbmRhcikge1xuICAgICAgdGhpcy5jYWxlbmRhci5zZXR0aW5ncy5zaG93RXZlbnRMZWdlbmQgPSBzaG93RXZlbnRMZWdlbmQ7XG4gICAgICB0aGlzLm1hcmtGb3JSZWZyZXNoKCk7XG4gICAgfVxuICB9XG4gIGdldCBzaG93RXZlbnRMZWdlbmQoKTogYm9vbGVhbiB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLnNob3dFdmVudExlZ2VuZDtcbiAgICB9XG5cbiAgICByZXR1cm4gKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLnNob3dFdmVudExlZ2VuZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiBmYWxzZSB0aGUgbW91c2VvdmVyIHRleHQgb3IgZGF5IGV2ZW50IHdpbGwgbm90IGJlIHNob3duLlxuICAgKi9cbiAgQElucHV0KCkgc2V0IGV2ZW50VG9vbHRpcChldmVudFRvb2x0aXA6IHN0cmluZyB8IFNvaG9DYWxlbmRhclRvb2x0aXBGdW5jdGlvbikge1xuICAgICh0aGlzLl9jYWxlbmRhck9wdGlvbnMgYXMgYW55KS5ldmVudFRvb2x0aXAgPSBldmVudFRvb2x0aXA7XG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHRoaXMuY2FsZW5kYXIuc2V0dGluZ3MuZXZlbnRUb29sdGlwID0gZXZlbnRUb29sdGlwO1xuICAgICAgdGhpcy5tYXJrRm9yUmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuICBnZXQgZXZlbnRUb29sdGlwKCk6IHN0cmluZyB8IFNvaG9DYWxlbmRhclRvb2x0aXBGdW5jdGlvbiB7XG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHJldHVybiAodGhpcy5jYWxlbmRhci5zZXR0aW5ncyBhcyBhbnkpLmV2ZW50VG9vbHRpcDtcbiAgICB9XG5cbiAgICByZXR1cm4gKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLmV2ZW50VG9vbHRpcDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJZiBmYWxzZSB0aGUgbW91c2VvdmVyIHRleHQgZm9yIGV2ZW50IGljb24gd2lsbCBub3QgYmUgc2hvd24uXG4gICAqL1xuICBASW5wdXQoKSBzZXQgaWNvblRvb2x0aXAoaWNvblRvb2x0aXA6IHN0cmluZyB8IFNvaG9DYWxlbmRhclRvb2x0aXBGdW5jdGlvbikge1xuICAgICh0aGlzLl9jYWxlbmRhck9wdGlvbnMgYXMgYW55KS5pY29uVG9vbHRpcCA9IGljb25Ub29sdGlwO1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICAodGhpcy5jYWxlbmRhci5zZXR0aW5ncyBhcyBhbnkpLmljb25Ub29sdGlwID0gaWNvblRvb2x0aXA7XG4gICAgICB0aGlzLm1hcmtGb3JSZWZyZXNoKCk7XG4gICAgfVxuICB9XG4gIGdldCBpY29uVG9vbHRpcCgpOiBzdHJpbmcgfCBTb2hvQ2FsZW5kYXJUb29sdGlwRnVuY3Rpb24ge1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICByZXR1cm4gKHRoaXMuY2FsZW5kYXIuc2V0dGluZ3MgYXMgYW55KS5pY29uVG9vbHRpcDtcbiAgICB9XG5cbiAgICByZXR1cm4gKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLmljb25Ub29sdGlwO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHdoZW4gYSBtb250aCBpcyByZW5kZXJlZCwgYWxsb3dpbmcgeW91IHRvIHBhc3MgYmFjayBldmVudHMgb3IgZXZlbnQgdHlwZXMgdG8gc2hvdy5cbiAgICovXG4gIEBJbnB1dCgpIHNldCByZW5kZXJNb250aENhbGxiYWNrKHJlbmRlck1vbnRoQ2FsbGJhY2s6IEZ1bmN0aW9uKSB7XG4gICAgKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLm9uUmVuZGVyTW9udGggPSByZW5kZXJNb250aENhbGxiYWNrO1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLm9uUmVuZGVyTW9udGggPSByZW5kZXJNb250aENhbGxiYWNrO1xuICAgICAgdGhpcy5tYXJrRm9yUmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuICBnZXQgcmVuZGVyTW9udGhDYWxsYmFjaygpOiBGdW5jdGlvbiB7XG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHJldHVybiAodGhpcy5jYWxlbmRhci5zZXR0aW5ncyBhcyBhbnkpLm9uUmVuZGVyTW9udGg7XG4gICAgfVxuXG4gICAgcmV0dXJuICh0aGlzLl9jYWxlbmRhck9wdGlvbnMgYXMgYW55KS5vblJlbmRlck1vbnRoO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmVzIHdoZW4gYSBtb250aCBkYXkgaXMgY2xpY2tlZC4gQWxsb3dpbmcgeW91IHRvIGRvIHNvbWV0aGluZy5cbiAgICovXG4gIEBJbnB1dCgpIHNldCBzZWxlY3RlZENhbGxiYWNrKHNlbGVjdGVkQ2FsbGJhY2s6IEZ1bmN0aW9uIHwgdW5kZWZpbmVkKSB7XG4gICAgKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLm9uU2VsZWN0ZWQgPSBzZWxlY3RlZENhbGxiYWNrO1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLm9uU2VsZWN0ZWQgPSBzZWxlY3RlZENhbGxiYWNrO1xuICAgICAgdGhpcy5tYXJrRm9yUmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuICBnZXQgc2VsZWN0ZWRDYWxsYmFjaygpOiBGdW5jdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLm9uU2VsZWN0ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuICh0aGlzLl9jYWxlbmRhck9wdGlvbnMgYXMgYW55KS5vblNlbGVjdGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBJRCBvZiB0aGUgdGVtcGxhdGUgdXNlZCBmb3IgdGhlIGV2ZW50cy5cbiAgICovXG4gIEBJbnB1dCgpIHNldCB0ZW1wbGF0ZSh0ZW1wbGF0ZTogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHRoaXMuY2FsZW5kYXIuc2V0dGluZ3MudGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICAgIHRoaXMubWFya0ZvclJlZnJlc2goKTtcbiAgICB9XG4gIH1cbiAgZ2V0IHRlbXBsYXRlKCk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLnRlbXBsYXRlO1xuICAgIH1cblxuICAgIHJldHVybiAodGhpcy5fY2FsZW5kYXJPcHRpb25zIGFzIGFueSkudGVtcGxhdGU7XG4gIH1cblxuICAvKipcbiAgICogSG93IG1hbnkgZGF5cyBpbiBhZHZhbmNlIHNob3VsZCB3ZSBzaG93IGluIHRoZSB1cGNvbWluZyBldmVudHMgcGFuZS5cbiAgICovXG4gIEBJbnB1dCgpIHNldCB1cGNvbWluZ0V2ZW50RGF5cyh1cGNvbWluZ0V2ZW50RGF5czogbnVtYmVyIHwgdW5kZWZpbmVkKSB7XG4gICAgKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLnVwY29taW5nRXZlbnREYXlzID0gdXBjb21pbmdFdmVudERheXM7XG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHRoaXMuY2FsZW5kYXIuc2V0dGluZ3MudXBjb21pbmdFdmVudERheXMgPSB1cGNvbWluZ0V2ZW50RGF5cztcbiAgICAgIHRoaXMubWFya0ZvclJlZnJlc2goKTtcbiAgICB9XG4gIH1cbiAgZ2V0IHVwY29taW5nRXZlbnREYXlzKCk6IG51bWJlciB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLnVwY29taW5nRXZlbnREYXlzO1xuICAgIH1cblxuICAgIHJldHVybiAodGhpcy5fY2FsZW5kYXJPcHRpb25zIGFzIGFueSkudXBjb21pbmdFdmVudERheXM7XG4gIH1cblxuICAvKipcbiAgICogVGhlIElEIG9mIHRoZSB0ZW1wbGF0ZSB1c2VkIGZvciB0aGUgbW9kYWwgZGlhbG9nIG9uIGV2ZW50cy5cbiAgICovXG4gIEBJbnB1dCgpIHNldCBtb2RhbFRlbXBsYXRlKG1vZGFsVGVtcGxhdGU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgICh0aGlzLl9jYWxlbmRhck9wdGlvbnMgYXMgYW55KS5tb2RhbFRlbXBsYXRlID0gbW9kYWxUZW1wbGF0ZTtcbiAgICBpZiAodGhpcy5jYWxlbmRhcikge1xuICAgICAgdGhpcy5jYWxlbmRhci5zZXR0aW5ncy5tb2RhbFRlbXBsYXRlID0gbW9kYWxUZW1wbGF0ZTtcbiAgICAgIHRoaXMubWFya0ZvclJlZnJlc2goKTtcbiAgICB9XG4gIH1cbiAgZ2V0IG1vZGFsVGVtcGxhdGUoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodGhpcy5jYWxlbmRhcikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXIuc2V0dGluZ3MubW9kYWxUZW1wbGF0ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLm1vZGFsVGVtcGxhdGU7XG4gIH1cblxuICAvKipcbiAgICogSUQgb2YgdGhlIG1lbnUgdG8gdXNlIGZvciBhbiBldmVudCByaWdodCBjbGljayBjb250ZXh0IG1lbnVcbiAgICovXG4gIEBJbnB1dCgpIHNldCBtZW51SWQobWVudUlkOiBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICAodGhpcy5fY2FsZW5kYXJPcHRpb25zIGFzIGFueSkubWVudUlkID0gbWVudUlkO1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLm1lbnVJZCA9IG1lbnVJZDtcbiAgICAgIHRoaXMubWFya0ZvclJlZnJlc2goKTtcbiAgICB9XG4gIH1cbiAgZ2V0IG1lbnVJZCgpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jYWxlbmRhci5zZXR0aW5ncy5tZW51SWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuICh0aGlzLl9jYWxlbmRhck9wdGlvbnMgYXMgYW55KS5tZW51SWQ7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGJhY2sgZm9yIHRoZSAgcmlnaHQgY2xpY2sgY29udGV4dCBtZW51XG4gICAqL1xuICBASW5wdXQoKSBzZXQgbWVudVNlbGVjdGVkKG1lbnVTZWxlY3RlZDogRnVuY3Rpb24gfCB1bmRlZmluZWQpIHtcbiAgICAodGhpcy5fY2FsZW5kYXJPcHRpb25zIGFzIGFueSkubWVudVNlbGVjdGVkID0gbWVudVNlbGVjdGVkO1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLm1lbnVTZWxlY3RlZCA9IG1lbnVTZWxlY3RlZDtcbiAgICAgIHRoaXMubWFya0ZvclJlZnJlc2goKTtcbiAgICB9XG4gIH1cbiAgZ2V0IG1lbnVTZWxlY3RlZCgpOiBGdW5jdGlvbiB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLm1lbnVTZWxlY3RlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLm1lbnVTZWxlY3RlZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsIGV2ZW50IHByb3BlcnRpZXMgZm9yIHRoZSBuZXcgZXZlbnRzIGRpYWxvZy5cbiAgICovXG4gIEBJbnB1dCgpIHNldCBuZXdFdmVudERlZmF1bHRzKG5ld0V2ZW50RGVmYXVsdHM6IFNvaG9DYWxlbmRhckV2ZW50IHwgdW5kZWZpbmVkKSB7XG4gICAgKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLm5ld0V2ZW50RGVmYXVsdHMgPSBuZXdFdmVudERlZmF1bHRzO1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLm5ld0V2ZW50RGVmYXVsdHMgPSBuZXdFdmVudERlZmF1bHRzO1xuICAgICAgdGhpcy5tYXJrRm9yUmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuICBnZXQgbmV3RXZlbnREZWZhdWx0cygpOiBTb2hvQ2FsZW5kYXJFdmVudCB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLm5ld0V2ZW50RGVmYXVsdHM7XG4gICAgfVxuXG4gICAgcmV0dXJuICh0aGlzLl9jYWxlbmRhck9wdGlvbnMgYXMgYW55KS5uZXdFdmVudERlZmF1bHRzO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGwgYmFjayBmb3Igd2hlbiB0aGUgdmlldyBjaGFuZ2VyIGlzIGNoYW5nZWRcbiAgICovXG4gIEBJbnB1dCgpIHNldCBjaGFuZ2VWaWV3Q2FsbGJhY2soY2hhbmdlVmlld0NhbGxiYWNrOiBGdW5jdGlvbiB8IHVuZGVmaW5lZCkge1xuICAgICh0aGlzLl9jYWxlbmRhck9wdGlvbnMgYXMgYW55KS5vbkNoYW5nZVZpZXcgPSBjaGFuZ2VWaWV3Q2FsbGJhY2s7XG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHRoaXMuY2FsZW5kYXIuc2V0dGluZ3Mub25DaGFuZ2VWaWV3ID0gY2hhbmdlVmlld0NhbGxiYWNrO1xuICAgICAgdGhpcy5tYXJrRm9yUmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuICBnZXQgY2hhbmdlVmlld0NhbGxiYWNrKCk6IEZ1bmN0aW9uIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodGhpcy5jYWxlbmRhcikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXIuc2V0dGluZ3Mub25DaGFuZ2VWaWV3O1xuICAgIH1cblxuICAgIHJldHVybiAodGhpcy5fY2FsZW5kYXJPcHRpb25zIGFzIGFueSkub25DaGFuZ2VWaWV3O1xuICB9XG5cbiAgLyoqXG4gICAqIERldGVyaW1pbmVzIGlmIHRoZSB0b2RheSBidXR0b24gc2hvdWxkIGJlIHNob3duLlxuICAgKi9cbiAgQElucHV0KCkgc2V0IHNob3dUb2RheShzaG93VG9kYXk6IGJvb2xlYW4gfCB1bmRlZmluZWQpIHtcbiAgICAodGhpcy5fY2FsZW5kYXJPcHRpb25zIGFzIGFueSkuc2hvd1RvZGF5ID0gc2hvd1RvZGF5O1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLnNob3dUb2RheSA9IHNob3dUb2RheTtcbiAgICAgIHRoaXMubWFya0ZvclJlZnJlc2goKTtcbiAgICB9XG4gIH1cbiAgZ2V0IHNob3dUb2RheSgpOiBib29sZWFuIHwgdW5kZWZpbmVkIHtcbiAgICBpZiAodGhpcy5jYWxlbmRhcikge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXIuc2V0dGluZ3Muc2hvd1RvZGF5O1xuICAgIH1cblxuICAgIHJldHVybiAodGhpcy5fY2FsZW5kYXJPcHRpb25zIGFzIGFueSkuc2hvd1RvZGF5O1xuICB9XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZSBkYXRlIHJhbmdlIGZvciBjYWxlbmRhclxuICAgKi9cbiAgQElucHV0KCkgc2V0IGRpc3BsYXlSYW5nZShkaXNwbGF5UmFuZ2U6IE9iamVjdCB8IHVuZGVmaW5lZCkge1xuICAgICh0aGlzLl9jYWxlbmRhck9wdGlvbnMgYXMgYW55KS5kaXNwbGF5UmFuZ2UgPSBkaXNwbGF5UmFuZ2U7XG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHRoaXMuY2FsZW5kYXIuc2V0dGluZ3MuZGlzcGxheVJhbmdlID0gZGlzcGxheVJhbmdlO1xuICAgICAgdGhpcy5tYXJrRm9yUmVmcmVzaCgpO1xuICAgIH1cbiAgfVxuICBnZXQgZGlzcGxheVJhbmdlKCk6IE9iamVjdCB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyLnNldHRpbmdzLmRpc3BsYXlSYW5nZTtcbiAgICB9XG5cbiAgICByZXR1cm4gKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLmRpc3BsYXlSYW5nZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb25maWd1cmUgZGF5IG9mIHdlZWsgc2V0dGluZ1xuICAgKi9cbiAgQElucHV0KCkgc2V0IGZpcnN0RGF5T2ZXZWVrKGRheTogbnVtYmVyKSB7XG4gICAgKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyBhcyBhbnkpLmZpcnN0RGF5T2ZXZWVrID0gZGF5O1xuXG4gICAgaWYgKHRoaXMuY2FsZW5kYXIpIHtcbiAgICAgIHRoaXMuY2FsZW5kYXIuc2V0dGluZ3MuZmlyc3REYXlPZldlZWsgPSBkYXk7XG4gICAgICB0aGlzLm1hcmtGb3JSZWZyZXNoKCk7XG4gICAgfVxuICB9XG4gIGdldCBmaXJzdERheU9mV2VlaygpOiBudW1iZXIge1xuICAgIGlmICh0aGlzLmNhbGVuZGFyKSB7XG4gICAgICByZXR1cm4gKHRoaXMuY2FsZW5kYXIgYXMgYW55KS5zZXR0aW5ncy5maXJzdERheU9mV2VlaztcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5maXJzdERheU9mV2VlaztcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gQ29tcG9uZW50IE91dHB1dFxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIEBPdXRwdXQoKSBzZWxlY3RlZCA9IG5ldyBFdmVudEVtaXR0ZXI8U29ob0NhbGVuZGFyRGF0ZVNlbGVjdGVkRXZlbnQ+KCk7XG4gIEBPdXRwdXQoKSBtb250aFJlbmRlcmVkID0gbmV3IEV2ZW50RW1pdHRlcjxTb2hvQ2FsZW5kYXJSZW5kZXJNb250aEV2ZW50PigpO1xuICBAT3V0cHV0KCkgZXZlbnRDbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8U29ob0NhbGVuZGFyRXZlbnRDbGlja0V2ZW50PigpO1xuICBAT3V0cHV0KCkgZXZlbnREYmxDbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8U29ob0NhbGVuZGFyRXZlbnRDbGlja0V2ZW50PigpO1xuICBAT3V0cHV0KCkgZXZlbnRDb250ZXh0TWVudSA9IG5ldyBFdmVudEVtaXR0ZXI8U29ob0NhbGVuZGFyRXZlbnRDbGlja0V2ZW50PigpO1xuXG4gIC8qKlxuICAgKiBMb2NhbCB2YXJpYWJsZXNcbiAgICovXG4gIHByaXZhdGUgalF1ZXJ5RWxlbWVudD86IEpRdWVyeTtcbiAgcHJpdmF0ZSBjYWxlbmRhcj86IFNvaG9DYWxlbmRhciB8IG51bGw7XG4gIHByaXZhdGUgX2NhbGVuZGFyT3B0aW9ucz86IFNvaG9DYWxlbmRhck9wdGlvbnMgPSB7fTtcbiAgcHJpdmF0ZSBfY2FsZW5kYXJXZWVrT3B0aW9ucz86IFNvaG9DYWxlbmRhcldlZWtPcHRpb25zID0ge307XG4gIHByaXZhdGUgdXBkYXRlUmVxdWlyZWQ/OiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgIHB1YmxpYyByZWY6IENoYW5nZURldGVjdG9yUmVmXG4gICkgeyB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIC8vIFdyYXAgdGhlIGVsZW1lbnQgaW4gYSBqUXVlcnkgc2VsZWN0b3IuXG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQgPSBqUXVlcnkodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQpO1xuXG4gICAgICAvLyBBZGQgbGlzdGVuZXJzIHRvIGVtaXQgZXZlbnRzXG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnRcbiAgICAgICAgLm9uKCdzZWxlY3RlZCcsIChfZTogYW55LCBldmVudDogU29ob0NhbGVuZGFyRGF0ZVNlbGVjdGVkRXZlbnQpID0+IHRoaXMub25TZWxlY3RlZEV2ZW50KGV2ZW50KSlcbiAgICAgICAgLm9uKCdtb250aHJlbmRlcmVkJywgKF9lOiBhbnksIGFyZ3M6IFNvaG9DYWxlbmRhclJlbmRlck1vbnRoRXZlbnQpID0+IHRoaXMub25Nb250aFJlbmRlcmVkRXZlbnQoYXJncykpXG4gICAgICAgIC5vbignZXZlbnRjbGljaycsIChfZTogYW55LCBhcmdzOiBTb2hvQ2FsZW5kYXJFdmVudENsaWNrRXZlbnQpID0+IHRoaXMub25FdmVudENsaWNrKGFyZ3MpKVxuICAgICAgICAub24oJ2V2ZW50ZGJsY2xpY2snLCAoX2U6IGFueSwgYXJnczogU29ob0NhbGVuZGFyRXZlbnRDbGlja0V2ZW50KSA9PiB0aGlzLm9uRXZlbnREYmxDbGljayhhcmdzKSlcbiAgICAgICAgLm9uKCdjb250ZXh0bWVudScsIChfZTogYW55LCBhcmdzOiBTb2hvQ2FsZW5kYXJFdmVudENsaWNrRXZlbnQpID0+IHRoaXMub25FdmVudENvbnRleHRNZW51KGFyZ3MpKTtcblxuICAgICAgLy8gSW5pdGlhbGlzZSB0aGUgU29obyBjb250cm9sLlxuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50LmNhbGVuZGFyKHRoaXMuX2NhbGVuZGFyT3B0aW9ucyk7XG5cbiAgICAgIC8vIE9uY2UgdGhlIGNvbnRyb2wgaXMgaW5pdGlhbGlzZWQsIGV4dHJhY3QgdGhlIGNvbnRyb2xcbiAgICAgIC8vIHBsdWctaW4gZnJvbSB0aGUgZWxlbWVudC4gIFRoZSBlbGVtZW50IG5hbWUgaXMgZGVmaW5lZFxuICAgICAgLy8gYnkgdGhlIHBsdWctaW4sIGJ1dCBpbiB0aGlzIGNhc2UgaXMgJ2NhbGVuZGFyJy5cbiAgICAgIHRoaXMuY2FsZW5kYXIgPSB0aGlzLmpRdWVyeUVsZW1lbnQuZGF0YSgnY2FsZW5kYXInKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpIHtcbiAgICBpZiAoIXRoaXMuY2FsZW5kYXIgfHwgIXRoaXMualF1ZXJ5RWxlbWVudCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnVwZGF0ZVJlcXVpcmVkKSB7XG4gICAgICAvLyBjYWxsIG91dHNpZGUgdGhlIGFuZ3VsYXIgem9uZSBzbyBjaGFuZ2UgZGV0ZWN0aW9uIGlzbid0IHRyaWdnZXJlZCBieSB0aGUgc29obyBjb21wb25lbnQuXG4gICAgICB0aGlzLnVwZGF0ZWQoKTtcbiAgICAgIHRoaXMudXBkYXRlUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBvblNlbGVjdGVkRXZlbnQoZXZlbnQ6IFNvaG9DYWxlbmRhckRhdGVTZWxlY3RlZEV2ZW50KSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHRoaXMuc2VsZWN0ZWQuZW1pdChldmVudCkpO1xuICB9XG5cbiAgb25Nb250aFJlbmRlcmVkRXZlbnQoZXZlbnQ6IFNvaG9DYWxlbmRhclJlbmRlck1vbnRoRXZlbnQpIHtcbiAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5tb250aFJlbmRlcmVkLmVtaXQoZXZlbnQpKTtcbiAgfVxuXG4gIG9uRXZlbnRDbGljayhldmVudDogU29ob0NhbGVuZGFyRXZlbnRDbGlja0V2ZW50KSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHRoaXMuZXZlbnRDbGljay5lbWl0KGV2ZW50KSk7XG4gIH1cblxuICBvbkV2ZW50RGJsQ2xpY2soZXZlbnQ6IFNvaG9DYWxlbmRhckV2ZW50Q2xpY2tFdmVudCkge1xuICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB0aGlzLmV2ZW50RGJsQ2xpY2suZW1pdChldmVudCkpO1xuICB9XG5cbiAgb25FdmVudENvbnRleHRNZW51KGV2ZW50OiBTb2hvQ2FsZW5kYXJFdmVudENsaWNrRXZlbnQpIHtcbiAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5ldmVudENvbnRleHRNZW51LmVtaXQoZXZlbnQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgc2VsZWN0ZWQgZGF0ZSBvbiB0aGUgY2FsZW5kYXIuXG4gICAqXG4gICAqIEByZXR1cm5zIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgZGF0ZSBvbiB0aGUgY29udHJvbC5cbiAgICovXG4gIGN1cnJlbnREYXRlKCk6IERhdGUge1xuICAgIHJldHVybiB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiAodGhpcy5jYWxlbmRhciBhcyBhbnkpLmN1cnJlbnREYXRlKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZXZlbnRzIGFuZCBkYXRlIGZvciB0aGUgY3VycmVudGx5IHNlbGVjdGVkIGNhbGVuZGFyIGRheS5cbiAgICpcbiAgICogQHBhcmFtIGRhdGUgVGhlIGRhdGUgdG8gZmluZCB0aGUgZXZlbnRzIGZvci5cbiAgICogQHJldHVybnMgZGF5RXZlbnRzIEFuIG9iamVjdCB3aXRoIGFsbCB0aGUgZXZlbnRzIGFuZCB0aGUgZXZlbnQgZGF0ZS5cbiAgICovXG4gIGdldERheUV2ZW50cyhkYXRlOiBEYXRlKTogU29ob0NhbGVuZGFyRGF5RXZlbnRzIHtcbiAgICByZXR1cm4gdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gKHRoaXMuY2FsZW5kYXIgYXMgYW55KS5nZXREYXlFdmVudHMoZGF0ZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIG5ldyBldmVudCB2aWEgdGhlIGV2ZW50IG9iamVjdCBhbmQgc2hvdyBpdCBpZiBpdCBzaG91bGQgYmUgdmlzaWJsZSBpbiB0aGUgY2FsZW5kYXIuXG4gICAqXG4gICAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgb2JqZWN0IHdpdGggY29tbW9uIGV2ZW50IHByb3BlcnRpZXMuXG4gICAqL1xuICBhZGRFdmVudChldmVudDogU29ob0NhbGVuZGFyRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiAodGhpcy5jYWxlbmRhciBhcyBhbnkpLmFkZEV2ZW50KGV2ZW50KSk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIGFuIGV2ZW50IHZpYSB0aGUgZXZlbnQgb2JqZWN0IGFuZCBzaG93IGl0IGlmIGl0IHNob3VsZCBiZSB2aXNpYmxlIGluIHRoZSBjYWxlbmRhci5cbiAgICogSXQgdXNlcyB0aGUgZXZlbnQgaWQgdG8gZG8gdGhpcy5cbiAgICpcbiAgICogQHBhcmFtIGV2ZW50IFRoZSBldmVudCBvYmplY3Qgd2l0aCBjb21tb24gZXZlbnQgcHJvcGVydGllcy5cbiAgICovXG4gIHVwZGF0ZUV2ZW50KGV2ZW50OiBTb2hvQ2FsZW5kYXJFdmVudCk6IHZvaWQge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+ICh0aGlzLmNhbGVuZGFyIGFzIGFueSkudXBkYXRlRXZlbnQoZXZlbnQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYW4gZXZlbnQgZnJvbSB0aGUgZGF0YXNldCBhbmQgcGFnZS4gSXQgdXNlcyB0aGUgaWQgcHJvcGVydHkuXG4gICAqXG4gICAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQgb2JqZWN0IHdpdGggY29tbW9uIGV2ZW50IHByb3BlcnRpZXMuXG4gICAqL1xuICBkZWxldGVFdmVudChldmVudDogU29ob0NhbGVuZGFyRXZlbnQpOiB2b2lkIHtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiAodGhpcy5jYWxlbmRhciBhcyBhbnkpLmRlbGV0ZUV2ZW50KGV2ZW50KSk7XG4gIH1cblxuICAvKipcbiAgICogU2hvdyBhIG1vZGFsIHVzZWQgdG8gYWRkL2VkaXQgZXZlbnRzLiBUaGlzIHVzZXMgdGhlIG1vZGFsVGVtcGxhdGUgc2V0dGluZyBmb3IgdGhlIG1vZGFsIGNvbnRlbnRzLlxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnQgVGhlIGV2ZW50IG9iamVjdCB3aXRoIGNvbW1vbiBldmVudCBwcm9wZXJ0aWVzIGZvciBkZWZhdWx0aW5nIGZpZWxkcyBpbiB0aGUgdGVtcGxhdGUuXG4gICAqIEBwYXJhbSBkb25lIFRoZSBjYWxsYmFjayBmb3Igd2hlbiB0aGUgbW9kYWwgY2xvc2VzLlxuICAgKi9cbiAgc2hvd0V2ZW50TW9kYWwoZXZlbnQ6IFNvaG9DYWxlbmRhckV2ZW50W10sIGRvbmU6IEZ1bmN0aW9uKTogdm9pZCB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gKHRoaXMuY2FsZW5kYXIgYXMgYW55KS5zaG93RXZlbnRNb2RhbChldmVudCwgZG9uZSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEByZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoaXMgTW9kYWwgaXMgY3VycmVudGx5IGJlaW5nIGRpc3BsYXllZFxuICAgKi9cbiAgbW9kYWxWaXNpYmxlKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiAodGhpcy5jYWxlbmRhciBhcyBhbnkpLm1vZGFsVmlzaWJsZSgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYWxsIGV2ZW50cyBmcm9tIHRoZSBjYWxlbmRhclxuICAgKi9cbiAgY2xlYXJFdmVudHMoKSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gKHRoaXMuY2FsZW5kYXIgYXMgYW55KS5jbGVhckV2ZW50cygpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgdXBkYXRlZCBzZXR0aW5ncyBhbmQgdmFsdWVzLlxuICAgKi9cbiAgdXBkYXRlZChzZXR0aW5ncz86IFNvaG9DYWxlbmRhck9wdGlvbnMpIHtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiAodGhpcy5jYWxlbmRhciBhcyBhbnkpLnVwZGF0ZWQoc2V0dGluZ3MpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXJrcyB0aGUgY29tcG9uZW50cyBhcyByZXF1aXJpbmcgYSByZWJ1aWxkIGFmdGVyIHRoZSBuZXh0IHVwZGF0ZS5cbiAgICovXG4gIG1hcmtGb3JSZWZyZXNoKCkge1xuICAgIC8vIFJ1biB1cGRhdGVkIG9uIHRoZSBuZXh0IHVwZGF0ZWQgY2hlY2suXG4gICAgdGhpcy51cGRhdGVSZXF1aXJlZCA9IHRydWU7XG5cbiAgICAvLyAuLi4gbWFrZSBzdXJlIHRoZSBjaGFuZ2UgZGV0ZWN0b3Iga2lja3MgaW4sIG90aGVyd2lzZSBpZiB0aGUgaW5wdXRzXG4gICAgLy8gd2VyZSBjaGFuZ2UgcHJvZ3JhbW1hdGljYWxseSB0aGUgY29tcG9uZW50IG1heSBub3QgYmUgZWxpZ2libGUgZm9yXG4gICAgLy8gdXBkYXRpbmcuXG4gICAgdGhpcy5yZWYubWFya0ZvckNoZWNrKCk7XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJ1Y3Rvci5cbiAgICovXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmpRdWVyeUVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5qUXVlcnlFbGVtZW50Lm9mZigpO1xuICAgICAgICB0aGlzLmpRdWVyeUVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jYWxlbmRhcikge1xuICAgICAgICB0aGlzLmNhbGVuZGFyLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5jYWxlbmRhciA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==
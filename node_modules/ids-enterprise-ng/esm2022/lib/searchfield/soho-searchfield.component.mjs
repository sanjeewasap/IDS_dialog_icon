import { Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoSearchFieldWrapperComponent {
    get isSearchfieldWrapper() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSearchFieldWrapperComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoSearchFieldWrapperComponent, selector: "[soho-searchfield-wrapper]", host: { properties: { "class.searchfield-wrapper": "this.isSearchfieldWrapper" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSearchFieldWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-searchfield-wrapper]',
                    template: `<ng-content></ng-content>`
                }]
        }], propDecorators: { isSearchfieldWrapper: [{
                type: HostBinding,
                args: ['class.searchfield-wrapper']
            }] } });
export class SohoSearchFieldComponent {
    set allResultsCallback(value) {
        this.options.allResultsCallback = value;
    }
    /** Displays a dropdown containing categories that can be used to filter results. */
    set categories(value) {
        this.options.categories = value;
    }
    /** If true, creates a multiselectable Categories list. */
    set categoryMultiselect(value) {
        this.options.categoryMultiselect = value;
    }
    /** Has an X to clear. */
    set clearable(value) {
        this.options.clearable = value;
    }
    set showAllResults(value) {
        this.options.showAllResults = value;
    }
    /** Show any available categories that are selected to teh left of the Dropdown field. */
    set showCategoryText(value) {
        this.options.showCategoryText = value;
    }
    /** Extra button available to show. */
    set button(value) {
        this.options.button = value;
    }
    /** AutoComplete : Source Function/Data/Url/Array */
    set source(value) {
        this.options.source = value;
    }
    /** Template that can be passed */
    set template(value) {
        this.options.template = value;
    }
    /** Number representing a size that will be used when a collapsible Searchfield becomes collapsed. */
    set collapseSize(value) {
        this.options.collapseSize = value;
    }
    /** Set the input to tabbable */
    set tabbable(value) {
        this.options.tabbable = value;
    }
    get isSearchField() {
        return true;
    }
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        /** Options. */
        this.options = {};
        // ------------------------------------------------------------
        this.selected = new EventEmitter();
        this.cleared = new EventEmitter();
    }
    ngAfterViewInit() {
        // TODO: Figure out what element to send to jQuery to init the component
        this.jQueryElement = jQuery(this.element.nativeElement);
        this.jQueryElement.searchfield(this.options);
        /**
         * Bind to jQueryElement's events
         */
        this.jQueryElement.on('selected', (...args) => this.selected.emit(args));
        this.jQueryElement.on('cleared', (...args) => this.ngZone.run(() => this.cleared.emit(args)));
        this.searchfield = this.jQueryElement.data('searchfield');
    }
    ngOnDestroy() {
        // Necessary clean up step (add additional here)
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                // clean up attached events.
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.searchfield) {
                this.searchfield.destroy();
                this.searchfield = null;
            }
        });
    }
    clear() {
        this.ngZone.runOutsideAngular(() => this.searchfield?.clear());
    }
    /**  Gets a complete list of categories in jQuery-collection form. */
    getCategories() {
        return this.ngZone.runOutsideAngular(() => {
            return this.searchfield?.getCategories();
        });
    }
    /** Gets the categories as data. Passing true will return only the selected category data.*/
    getCategoryData(onlySelected) {
        return this.ngZone.runOutsideAngular(() => {
            return this.searchfield?.getCategoryData(onlySelected);
        });
    }
    /**  Gets a complete list of categories in jQuery-collection form. */
    getSelectedCategories() {
        return this.ngZone.runOutsideAngular(() => {
            return this.searchfield?.getSelectedCategories();
        });
    }
    /** Gets the currently selected list of categories in jQuery-collection form. */
    setCategoryButtonText(textContent) {
        this.ngZone.runOutsideAngular(() => this.searchfield?.setCategoryButtonText());
    }
    updated(settings) {
        this.ngZone.runOutsideAngular(() => this.searchfield?.updated(settings));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSearchFieldComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoSearchFieldComponent, selector: "input[soho-searchfield]", inputs: { options: "options", allResultsCallback: "allResultsCallback", categories: "categories", categoryMultiselect: "categoryMultiselect", clearable: "clearable", showAllResults: "showAllResults", showCategoryText: "showCategoryText", button: "button", source: "source", template: "template", collapseSize: "collapseSize", tabbable: "tabbable" }, outputs: { selected: "selected", cleared: "cleared" }, host: { properties: { "class.searchfield": "this.isSearchField" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSearchFieldComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[soho-searchfield]',
                    template: '<ng-content></ng-content>'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { options: [{
                type: Input
            }], allResultsCallback: [{
                type: Input
            }], categories: [{
                type: Input
            }], categoryMultiselect: [{
                type: Input
            }], clearable: [{
                type: Input
            }], showAllResults: [{
                type: Input
            }], showCategoryText: [{
                type: Input
            }], button: [{
                type: Input
            }], source: [{
                type: Input
            }], template: [{
                type: Input
            }], collapseSize: [{
                type: Input
            }], tabbable: [{
                type: Input
            }], selected: [{
                type: Output
            }], cleared: [{
                type: Output
            }], isSearchField: [{
                type: HostBinding,
                args: ['class.searchfield']
            }] } });
//# sourceMappingURL=data:application/json;base64,
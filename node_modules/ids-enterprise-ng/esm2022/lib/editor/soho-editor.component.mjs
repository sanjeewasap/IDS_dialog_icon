import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { BaseControlValueAccessor, provideControlValueAccessor } from '../utils/base-control-value-accessor';
import * as i0 from "@angular/core";
export class SohoEditorComponent extends BaseControlValueAccessor {
    get isEditor() {
        return true;
    }
    // -------------------------------------------
    // Component Input
    // -------------------------------------------
    /**
     * Enables or disables the control
     */
    set disabled(value) {
        // Avoid setting the value if not required,
        // this causes issue on component initialisation
        // as enable() is called by both disabled()
        // and readonly().
        if (this.editor == null) {
            this.isDisabled = value;
            return;
        }
        // Set the status locally (for refreshing)
        this.isDisabled = value;
        if (value) {
            this.ngZone.runOutsideAngular(() => {
                this.editor?.disable();
            });
        }
        else {
            this.ngZone.runOutsideAngular(() => {
                this.editor?.enable();
                this.isReadOnly = false;
            });
        }
    }
    get disabled() {
        return this.isDisabled;
    }
    /**
     * Sets the control to readonly
     */
    set readonly(value) {
        // Avoid setting the value if not required,
        // this causes issue on component initialisation
        // as enable() is called by both disabled()
        // and readonly().
        if (this.editor == null) {
            this.isReadOnly = value;
            return;
        }
        // Set the status locally (for refreshing)
        this.isReadOnly = value;
        if (value) {
            this.ngZone.runOutsideAngular(() => this.editor?.readonly());
        }
        else {
            this.ngZone.runOutsideAngular(() => {
                this.editor?.enable();
                this.isDisabled = false;
            });
        }
    }
    get readonly() {
        return this.isReadOnly;
    }
    set delay(delay) {
        this.options.delay = delay;
    }
    set firstHeader(firstHeader) {
        this.options.firstHeader = firstHeader;
    }
    set secondHeader(secondHeader) {
        this.options.secondHeader = secondHeader;
        if (this.editor) {
            this.editor.settings.secondHeader = secondHeader;
            this.markForRefresh();
        }
    }
    set placeholder(placeholder) {
        this.options.placeholder = placeholder;
        if (this.editor) {
            this.editor.settings.placeholder = placeholder;
            this.markForRefresh();
        }
    }
    set anchor(anchor) {
        this.options.anchor = anchor;
        if (this.editor) {
            this.editor.settings.anchor = anchor;
            this.markForRefresh();
        }
    }
    set image(image) {
        this.options.image = image;
        this.markForRefresh();
        if (this.editor) {
            this.editor.settings.image = image;
        }
    }
    set buttons(buttons) {
        this.options.buttons = buttons;
        if (this.editor) {
            this.editor.settings.buttons = buttons;
            this.markForRefresh();
        }
    }
    /**
     * onLinkClick Callback for Editor clicks
     */
    set onLinkClick(value) {
        this.options.onLinkClick = value;
        if (this.editor) {
            this.editor.settings.onLinkClick = value;
            this.markForRefresh();
        }
    }
    set showHtmlView(showHtmlView) {
        this.options.showHtmlView = showHtmlView;
        if (this.editor) {
            this.editor.settings.showHtmlView = showHtmlView;
            this.markForRefresh();
        }
    }
    set preview(preview) {
        this.options.preview = preview;
        if (this.editor) {
            this.editor.settings.preview = preview;
            this.markForRefresh();
        }
    }
    set rows(rows) {
        this.options.rows = rows;
        if (this.editor) {
            this.editor.settings.rows = rows;
            this.markForRefresh();
        }
    }
    set attributes(attributes) {
        this.options.attributes = attributes;
        if (this.editor) {
            this.editor.settings.attributes = attributes;
            this.markForRefresh();
        }
    }
    /**
     * Creates an instance of SohoEditorComponent.
     *
     * @param element the element this component encapsulates.
     * @param ngZone the angualar zone for this component.
     * @param ref reference to the change detector
     */
    constructor(element, ngZone, ref) {
        super();
        this.element = element;
        this.ngZone = ngZone;
        this.ref = ref;
        // -------------------------------------------
        // Options Block
        // -------------------------------------------
        this.options = {};
        this.isDisabled = undefined;
        this.isReadOnly = undefined;
        // -------------------------------------------
        // Component Output
        // -------------------------------------------
        /**
         * Called when the editor value changes
         *
         * @todo replace override of native attribute
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.change = new EventEmitter();
        /**
         * Called when the editor updates in some way
         */
        this.updated = new EventEmitter();
    }
    ngAfterViewInit() {
        // call outside the angular zone so change detection
        // isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            // Wrap the element in a jQuery selector.
            this.jQueryElement = jQuery(this.element.nativeElement);
            // Initialise the SohoXi Control
            this.jQueryElement.editor(this.options);
            this.editor = this.jQueryElement.data('editor');
            // Bind to jQueryElement's events
            this.jQueryElement
                .on('change', (_e, args) => this.onChange(args))
                .on('updated', (_e, args) => this.onUpdated(args));
            if (this.internalValue) {
                this.jQueryElement.html(this.internalValue);
            }
        });
    }
    ngAfterViewChecked() {
        if (this.runUpdatedOnCheck) {
            // Ensure the enabled/disabled flags are set.
            if (this.isDisabled !== null) {
                this.disabled = this.isDisabled;
            }
            if (this.isReadOnly !== null) {
                this.readonly = this.isReadOnly;
            }
            this.ngZone.runOutsideAngular(() => {
                // We need to update the control AFTER the model
                // has been updated (assuming there is one), so
                // execute updated after angular has generated
                // the model and the view markup.
                if (this.editor) {
                    this.editor.updated();
                }
                this.runUpdatedOnCheck = false;
            });
        }
    }
    /**
     * Handle the control being changed.
     */
    onChange(_event) {
        this.internalValue = this.jQueryElement?.html();
        super.writeValue(this.internalValue);
        this.ngZone.run(() => {
            this.change.emit(this.internalValue);
        });
    }
    onUpdated(event) {
        this.ngZone.run(() => {
            this.updated.next(event);
        });
    }
    /**
     *
     * @param value Handle model updates.
     */
    writeValue(value) {
        if (this.jQueryElement && this.internalValue !== value) {
            this.jQueryElement.html(value);
        }
        super.writeValue(value);
    }
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                // remove the event listeners on this element.
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            // Destroy any widget resources.
            if (this.editor) {
                this.editor.destroy();
                this.editor = null;
            }
        });
    }
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh() {
        // Run updated on the next updated check.
        this.runUpdatedOnCheck = true;
        // ... make sure the change detector kicks in, otherwise if the inputs
        // were change programmatially the component may not be eligible for
        // updating.
        this.ref.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoEditorComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoEditorComponent, selector: "[soho-editor]", inputs: { disabled: "disabled", readonly: "readonly", delay: "delay", firstHeader: "firstHeader", secondHeader: "secondHeader", placeholder: "placeholder", anchor: "anchor", image: "image", buttons: "buttons", onLinkClick: "onLinkClick", showHtmlView: "showHtmlView", preview: "preview", rows: "rows", attributes: "attributes" }, outputs: { change: "change", updated: "updated" }, host: { properties: { "class.editor": "this.isEditor" } }, providers: [provideControlValueAccessor(SohoEditorComponent)], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoEditorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-editor]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [provideControlValueAccessor(SohoEditorComponent)]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { isEditor: [{
                type: HostBinding,
                args: ['class.editor']
            }], disabled: [{
                type: Input
            }], readonly: [{
                type: Input
            }], delay: [{
                type: Input
            }], firstHeader: [{
                type: Input
            }], secondHeader: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], anchor: [{
                type: Input
            }], image: [{
                type: Input
            }], buttons: [{
                type: Input
            }], onLinkClick: [{
                type: Input
            }], showHtmlView: [{
                type: Input
            }], preview: [{
                type: Input
            }], rows: [{
                type: Input
            }], attributes: [{
                type: Input
            }], change: [{
                type: Output
            }], updated: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { Directive, EventEmitter, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the enterprise personalise widget.
 *
 * This component searches for an element with the attribute
 * 'soho-personalize'.
 */
export class SohoPersonalizeDirective {
    /** The starting color. */
    set colors(colors) {
        this.options.colors = colors;
        if (this.personalize) {
            this.ngZone.runOutsideAngular(() => {
                this.personalize?.setColors(colors);
            });
        }
    }
    /** The starting theme. */
    set theme(theme) {
        this.options.theme = theme;
        if (this.personalize) {
            this.ngZone.runOutsideAngular(() => {
                this.personalize?.setTheme(theme);
            });
        }
    }
    /**
     * Constructor.
     */
    constructor(ngZone) {
        this.ngZone = ngZone;
        /** Options. */
        this.options = {};
        this.changetheme = new EventEmitter();
        this.changecolors = new EventEmitter();
    }
    /**
     * After the control has been initialised, and the view is ready,
     * get the SoHoXi controls to apply any renderings.
     */
    ngAfterViewInit() {
        // call outside the angular zone so change detection
        // isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            // assign element to local variable - not this must attach to a root
            // element in this case 'body'
            this.jQueryElement = jQuery('html');
            // Check the element has attached to the body.
            if (this.jQueryElement.length === 0) {
                throw Error('No html tag found');
            }
            this.jQueryElement
                .on('themechanged', (ev, theme) => {
                this.onChangeTheme(ev, theme);
            })
                .on('colorschanged', (ev, colors) => {
                this.onChangeColors(ev, colors);
            });
            /**
             * Bind to jQueryElement's events
             */
            this.jQueryElement.personalize(this.options);
            // extract the api
            this.personalize = this.jQueryElement.data('personalize');
        });
    }
    /**
     * The theme currently set
     */
    get currentTheme() {
        return Soho.theme.currentTheme;
    }
    /**
     * Return a list of all the available themes.
     *
     * @returns The list of themes.
     */
    themes() {
        return Soho.theme.themes();
    }
    /**
     * Return the colors used in the current theme that are recommended for personalization.
     *
     * @returns An object full of the colors with id, name, and hex value.
     */
    personalizationColors() {
        return Soho.theme.personalizationColors();
    }
    onChangeTheme(e, theme) {
        this.ngZone.run(() => {
            const event = e;
            event.theme = theme;
            // Set the legacy property
            event.data = theme;
            this.changetheme.emit(event);
        });
    }
    onChangeColors(e, colors) {
        this.ngZone.run(() => {
            const event = e;
            event.colors = colors;
            // Set the legacy property
            event.data = colors;
            this.changecolors.emit(event);
        });
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.personalize) {
                this.personalize?.destroy();
                this.personalize = null;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPersonalizeDirective, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: SohoPersonalizeDirective, selector: "[soho-personalize]", inputs: { options: "options", colors: "colors", theme: "theme" }, outputs: { changetheme: "changetheme", changecolors: "changecolors" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPersonalizeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[soho-personalize]',
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; }, propDecorators: { options: [{
                type: Input
            }], colors: [{
                type: Input
            }], theme: [{
                type: Input
            }], changetheme: [{
                type: Output
            }], changecolors: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoPieComponent {
    get isPie() {
        return true;
    }
    /** Defines the data to use, must be specified for this component. */
    set dataset(dataset) {
        this.options.dataset = dataset;
        if (this.pie) {
            this.pie.settings.dataset = dataset;
            this.updateRequired = true;
        }
    }
    /** If true it renders as a donut chart. */
    set isDonut(value) {
        this.options.isDonut = value;
        if (this.pie) {
            this.pie.settings.isDonut = value;
            this.updateRequired = true;
        }
    }
    /** Controls the animation speed. */
    set animationSpeed(value) {
        this.options.animationSpeed = value;
        if (this.pie) {
            this.pie.settings.animationSpeed = value;
            this.updateRequired = true;
        }
    }
    /** true|false - will do or not do the animation and 'initial' will do only first time the animation. */
    set animate(value) {
        this.options.animate = value;
        if (this.pie) {
            this.pie.settings.animate = value;
            this.updateRequired = true;
        }
    }
    /** If true, the component will not resize when resizing the page. There is tooltip values provided.
     * It will not be shown. If you still want lines at the lower breakpoint you can set this to true */
    set redrawOnResize(value) {
        this.options.redrawOnResize = value;
        if (this.pie) {
            this.pie.settings.redrawOnResize = value;
            this.updateRequired = true;
        }
    }
    /** If false the center label will not be shown. */
    set hideCenterLabel(value) {
        this.options.hideCenterLabel = value;
        if (this.pie) {
            this.pie.settings.hideCenterLabel = value;
            this.updateRequired = true;
        }
    }
    /** If false connector lines wont be shown. */
    set showLines(value) {
        this.options.showLines = value;
        if (this.pie) {
            this.pie.settings.showLines = value;
            this.updateRequired = true;
        }
    }
    /** This defaults to false, when false and under 450px the lines. */
    set showLinesMobile(value) {
        this.options.showLinesMobile = value;
        if (this.pie) {
            this.pie.settings.showLinesMobile = value;
            this.updateRequired = true;
        }
    }
    /** A setting that controls the line values and format. */
    set lines(value) {
        this.options.lines = value;
        if (this.pie) {
            this.pie.settings.lines = value;
            this.updateRequired = true;
        }
    }
    /** If false the legend will not be shown. */
    set showLegend(value) {
        this.options.showLegend = value;
        if (this.pie) {
            this.pie.settings.showLegend = value;
            this.updateRequired = true;
        }
    }
    /** Where to locate the legend. This can be bottom or right at the moment. */
    set legendPlacement(value) {
        this.options.legendPlacement = value;
        if (this.pie) {
            this.pie.settings.legendPlacement = value;
            this.updateRequired = true;
        }
    }
    /** Where to locate the legend. This can be bottom or right at the moment. */
    set forceLegendPopup(value) {
        this.options.forceLegendPopup = value;
        if (this.pie) {
            this.pie.settings.forceLegendPopup = value;
            this.updateRequired = true;
        }
    }
    /** A setting that controls the legend values and format. */
    set legend(value) {
        this.options.legend = value;
        if (this.pie) {
            this.pie.settings.legend = value;
            this.updateRequired = true;
        }
    }
    /** If false now tooltips will be shown */
    set showTooltips(value) {
        this.options.showTooltips = value;
        if (this.pie) {
            this.pie.settings.showTooltips = value;
            this.updateRequired = true;
        }
    }
    /** A setting that controls the tooltip values and format. */
    set tooltip(value) {
        this.options.tooltip = value;
        if (this.pie) {
            this.pie.settings.tooltip = value;
            this.updateRequired = true;
        }
    }
    /** If true center tooltip will be shown */
    set showCenterTooltip(value) {
        this.options.showCenterTooltip = value;
        if (this.pie) {
            this.pie.settings.showCenterTooltip = value;
            this.updateRequired = true;
        }
    }
    /** If true chart height will fit in parent available height. */
    set fitHeight(value) {
        this.options.fitHeight = value;
        if (this.pie) {
            this.pie.settings.fitHeight = value;
            this.updateRequired = true;
        }
    }
    /** An empty message will be displayed when there is no chart data. */
    set emptyMessage(value) {
        this.options.emptyMessage = value;
        if (this.pie) {
            this.pie.settings.emptyMessage = value;
            this.updateRequired = true;
        }
    }
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        /** Options. */
        this.options = {};
        /** Events */
        this.selected = new EventEmitter();
        this.unselected = new EventEmitter();
        this.rendered = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.dblclick = new EventEmitter();
        /**
         * @todo remove override of native element
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.contextmenu = new EventEmitter();
        this.updateRequired = false;
    }
    /** Setup */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.options.type = 'pie';
            this.jQueryElement.chart(this.options);
            this.pie = this.jQueryElement.data('pie');
            // Setup the events
            this.jQueryElement.on('selected', (_e, args) => this.ngZone.run(() => this.selected.emit(args)));
            this.jQueryElement.on('unselected', (_e, args) => this.ngZone.run(() => this.unselected.emit(args)));
            this.jQueryElement.on('rendered', (...args) => this.ngZone.run(() => this.rendered.emit(args)));
            this.jQueryElement.on('contextmenu', (...args) => this.ngZone.run(() => this.contextmenu?.emit(args)));
            this.jQueryElement.on('dblclick', (_e, args) => this.ngZone.run(() => this.dblclick.emit(args)));
        });
    }
    ngAfterViewChecked() {
        if (this.pie && this.updateRequired) {
            this.ngZone.runOutsideAngular(() => this.pie?.updated(this.pie.settings));
            this.updateRequired = false;
        }
    }
    updated() {
        this.ngZone.runOutsideAngular(() => {
            this.options.type = 'pie';
            this.jQueryElement?.chart(this.options);
            this.pie = this.jQueryElement?.data('pie');
        });
    }
    /** Tear Down */
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.pie) {
                this.pie.destroy();
                this.pie = null;
            }
        });
    }
    setSelected(selected) {
        this.ngZone.runOutsideAngular(() => this.pie?.setSelected(selected));
    }
    toggleSelected(selected) {
        this.ngZone.runOutsideAngular(() => this.pie?.toggleSelected(selected));
    }
    getSelected() {
        return this.ngZone.runOutsideAngular(() => this.pie?.getSelected());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPieComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoPieComponent, selector: "[soho-pie]", inputs: { dataset: "dataset", isDonut: "isDonut", animationSpeed: "animationSpeed", animate: "animate", redrawOnResize: "redrawOnResize", hideCenterLabel: "hideCenterLabel", showLines: "showLines", showLinesMobile: "showLinesMobile", lines: "lines", showLegend: "showLegend", legendPlacement: "legendPlacement", forceLegendPopup: "forceLegendPopup", legend: "legend", showTooltips: "showTooltips", tooltip: "tooltip", showCenterTooltip: "showCenterTooltip", fitHeight: "fitHeight", emptyMessage: "emptyMessage" }, outputs: { selected: "selected", unselected: "unselected", rendered: "rendered", dblclick: "dblclick", contextmenu: "contextmenu" }, host: { properties: { "class.chart-container": "this.isPie" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPieComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-pie]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isPie: [{
                type: HostBinding,
                args: ['class.chart-container']
            }], dataset: [{
                type: Input
            }], isDonut: [{
                type: Input
            }], animationSpeed: [{
                type: Input
            }], animate: [{
                type: Input
            }], redrawOnResize: [{
                type: Input
            }], hideCenterLabel: [{
                type: Input
            }], showLines: [{
                type: Input
            }], showLinesMobile: [{
                type: Input
            }], lines: [{
                type: Input
            }], showLegend: [{
                type: Input
            }], legendPlacement: [{
                type: Input
            }], forceLegendPopup: [{
                type: Input
            }], legend: [{
                type: Input
            }], showTooltips: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], showCenterTooltip: [{
                type: Input
            }], fitHeight: [{
                type: Input
            }], emptyMessage: [{
                type: Input
            }], selected: [{
                type: Output
            }], unselected: [{
                type: Output
            }], rendered: [{
                type: Output
            }], dblclick: [{
                type: Output
            }], contextmenu: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
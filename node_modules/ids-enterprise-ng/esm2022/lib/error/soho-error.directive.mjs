import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the SoHo Error Directive.
 *
 * @deprecated - use SohoAlert instead
 */
export class SohoErrorDirective {
    constructor(el) {
        this.el = el;
        this._options = {}; // eslint:disable-line
    }
    /**
     *  message for the error.
     *
     * @deprecated - use SohoAlert instead
     */
    set message(message) {
        this._options.message = message;
        if (this.jQueryElement) {
            if (message) {
                this.jQueryElement.addError(this._options);
            }
            else {
                this.jQueryElement.removeError(this._options);
            }
        }
    }
    /**
     *  set error in tooltip.
     *
     * @deprecated - use SohoAlert instead
     */
    set showTooltip(showTooltip) {
        this._options.showTooltip = showTooltip;
    }
    /**
     * set error to be inline.
     *
     * @deprecated - use SohoAlert instead
     */
    set inline(inline) {
        this._options.inline = inline;
    }
    /**
     * Returns the data object data-errormessage
     *
     * @deprecated - use SohoAlert instead
     */
    get errorMessage() {
        return this.jQueryElement?.getErrorMessage(this._options);
    }
    /**
     * add inline error
     *
     * @deprecated - use SohoAlert instead
     */
    addInlineError(message) {
        this.showTooltip = false; // eslint-disable-line
        this.inline = true; // eslint-disable-line
        this.message = message; // eslint-disable-line
    }
    /**
     * add tooltip error
     *
     * @deprecated - use SohoAlert instead
     */
    addTooltipError(message) {
        this.showTooltip = true; // eslint-disable-line
        this.inline = false; // eslint-disable-line
        this.message = message; // eslint-disable-line
    }
    /**
     * remove inline/tooltip error
     *
     * @deprecated - use SohoAlert instead
     */
    removeError() {
        this.message = ''; // eslint-disable-line
    }
    /**
     * Scrolls the element into the visible area of the browser window
     *
     * @deprecated - use SohoAlert instead
     * @param alignToTop (boolean) optional - true (default) element will be aligned to the top of the visible area of the scrollable ancestor
     */
    scrollIntoView(alignToTop) {
        this.jQueryElement?.scrollIntoView(alignToTop, this._options);
    }
    /**
     * After the control has been initialised and the view is ready,
     * get the SoHoXi controls to activate any validations.
     */
    ngAfterViewInit() {
        this.jQueryElement = jQuery(this.el.nativeElement);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoErrorDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: SohoErrorDirective, selector: "[soho-error]", inputs: { message: "message", showTooltip: "showTooltip", inline: "inline" }, exportAs: ["soho-error"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoErrorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[soho-error]',
                    exportAs: 'soho-error'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { message: [{
                type: Input
            }], showTooltip: [{
                type: Input
            }], inline: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby1lcnJvci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZHMtZW50ZXJwcmlzZS1uZy9zcmMvbGliL2Vycm9yL3NvaG8tZXJyb3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxTQUFTLEVBRVQsS0FBSyxFQUNOLE1BQU0sZUFBZSxDQUFDOztBQUV2Qjs7OztHQUlHO0FBS0gsTUFBTSxPQUFPLGtCQUFrQjtJQUs3QixZQUFvQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUgxQixhQUFRLEdBQXFCLEVBQUUsQ0FBQyxDQUFDLHNCQUFzQjtJQUkvRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQ1csT0FBTyxDQUFDLE9BQWU7UUFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1FBQ2hDLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUN0QixJQUFJLE9BQU8sRUFBRTtnQkFDWCxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDNUM7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQy9DO1NBQ0Y7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQ1csV0FBVyxDQUFDLFdBQW9CO1FBQ3pDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztJQUMxQyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILElBQ1csTUFBTSxDQUFDLE1BQWU7UUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0lBQ2hDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxFQUFFLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDNUQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSCxjQUFjLENBQUMsT0FBZTtRQUM1QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxDQUFDLHNCQUFzQjtRQUNoRCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxDQUFDLHNCQUFzQjtRQUMxQyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQyxDQUFDLHNCQUFzQjtJQUNoRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILGVBQWUsQ0FBQyxPQUFlO1FBQzdCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLENBQUMsc0JBQXNCO1FBQy9DLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLENBQUMsc0JBQXNCO1FBQzNDLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLENBQUMsc0JBQXNCO0lBQ2hELENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsV0FBVztRQUNULElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUMsc0JBQXNCO0lBQzNDLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILGNBQWMsQ0FBQyxVQUFvQjtRQUNqQyxJQUFJLENBQUMsYUFBYSxFQUFFLGNBQWMsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hFLENBQUM7SUFFRDs7O09BR0c7SUFDSCxlQUFlO1FBQ2IsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUNyRCxDQUFDOzhHQXJHVSxrQkFBa0I7a0dBQWxCLGtCQUFrQjs7MkZBQWxCLGtCQUFrQjtrQkFKOUIsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsY0FBYztvQkFDeEIsUUFBUSxFQUFFLFlBQVk7aUJBQ3ZCO2lHQWVZLE9BQU87c0JBRGpCLEtBQUs7Z0JBa0JLLFdBQVc7c0JBRHJCLEtBQUs7Z0JBV0ssTUFBTTtzQkFEaEIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIERpcmVjdGl2ZSxcbiAgRWxlbWVudFJlZixcbiAgSW5wdXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbi8qKlxuICogQW5ndWxhciBXcmFwcGVyIGZvciB0aGUgU29IbyBFcnJvciBEaXJlY3RpdmUuXG4gKlxuICogQGRlcHJlY2F0ZWQgLSB1c2UgU29ob0FsZXJ0IGluc3RlYWRcbiAqL1xuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW3NvaG8tZXJyb3JdJywgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBleHBvcnRBczogJ3NvaG8tZXJyb3InXG59KVxuZXhwb3J0IGNsYXNzIFNvaG9FcnJvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQge1xuXG4gIHByaXZhdGUgX29wdGlvbnM6IFNvaG9FcnJvck9wdGlvbnMgPSB7fTsgLy8gZXNsaW50OmRpc2FibGUtbGluZVxuICBwcml2YXRlIGpRdWVyeUVsZW1lbnQ/OiBKUXVlcnk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikge1xuICB9XG5cbiAgLyoqXG4gICAqICBtZXNzYWdlIGZvciB0aGUgZXJyb3IuXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIC0gdXNlIFNvaG9BbGVydCBpbnN0ZWFkXG4gICAqL1xuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IG1lc3NhZ2UobWVzc2FnZTogc3RyaW5nKSB7XG4gICAgdGhpcy5fb3B0aW9ucy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICBpZiAodGhpcy5qUXVlcnlFbGVtZW50KSB7XG4gICAgICBpZiAobWVzc2FnZSkge1xuICAgICAgICB0aGlzLmpRdWVyeUVsZW1lbnQuYWRkRXJyb3IodGhpcy5fb3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmpRdWVyeUVsZW1lbnQucmVtb3ZlRXJyb3IodGhpcy5fb3B0aW9ucyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqICBzZXQgZXJyb3IgaW4gdG9vbHRpcC5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgLSB1c2UgU29ob0FsZXJ0IGluc3RlYWRcbiAgICovXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgc2hvd1Rvb2x0aXAoc2hvd1Rvb2x0aXA6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9vcHRpb25zLnNob3dUb29sdGlwID0gc2hvd1Rvb2x0aXA7XG4gIH1cblxuICAvKipcbiAgICogc2V0IGVycm9yIHRvIGJlIGlubGluZS5cbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgLSB1c2UgU29ob0FsZXJ0IGluc3RlYWRcbiAgICovXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgaW5saW5lKGlubGluZTogYm9vbGVhbikge1xuICAgIHRoaXMuX29wdGlvbnMuaW5saW5lID0gaW5saW5lO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRhdGEgb2JqZWN0IGRhdGEtZXJyb3JtZXNzYWdlXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIC0gdXNlIFNvaG9BbGVydCBpbnN0ZWFkXG4gICAqL1xuICBnZXQgZXJyb3JNZXNzYWdlKCkge1xuICAgIHJldHVybiB0aGlzLmpRdWVyeUVsZW1lbnQ/LmdldEVycm9yTWVzc2FnZSh0aGlzLl9vcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBhZGQgaW5saW5lIGVycm9yXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIC0gdXNlIFNvaG9BbGVydCBpbnN0ZWFkXG4gICAqL1xuICBhZGRJbmxpbmVFcnJvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNob3dUb29sdGlwID0gZmFsc2U7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB0aGlzLmlubGluZSA9IHRydWU7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIH1cblxuICAvKipcbiAgICogYWRkIHRvb2x0aXAgZXJyb3JcbiAgICpcbiAgICogQGRlcHJlY2F0ZWQgLSB1c2UgU29ob0FsZXJ0IGluc3RlYWRcbiAgICovXG4gIGFkZFRvb2x0aXBFcnJvcihtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICB0aGlzLnNob3dUb29sdGlwID0gdHJ1ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICAgIHRoaXMuaW5saW5lID0gZmFsc2U7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIH1cblxuICAvKipcbiAgICogcmVtb3ZlIGlubGluZS90b29sdGlwIGVycm9yXG4gICAqXG4gICAqIEBkZXByZWNhdGVkIC0gdXNlIFNvaG9BbGVydCBpbnN0ZWFkXG4gICAqL1xuICByZW1vdmVFcnJvcigpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSAnJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB9XG5cbiAgLyoqXG4gICAqIFNjcm9sbHMgdGhlIGVsZW1lbnQgaW50byB0aGUgdmlzaWJsZSBhcmVhIG9mIHRoZSBicm93c2VyIHdpbmRvd1xuICAgKlxuICAgKiBAZGVwcmVjYXRlZCAtIHVzZSBTb2hvQWxlcnQgaW5zdGVhZFxuICAgKiBAcGFyYW0gYWxpZ25Ub1RvcCAoYm9vbGVhbikgb3B0aW9uYWwgLSB0cnVlIChkZWZhdWx0KSBlbGVtZW50IHdpbGwgYmUgYWxpZ25lZCB0byB0aGUgdG9wIG9mIHRoZSB2aXNpYmxlIGFyZWEgb2YgdGhlIHNjcm9sbGFibGUgYW5jZXN0b3JcbiAgICovXG4gIHNjcm9sbEludG9WaWV3KGFsaWduVG9Ub3A/OiBib29sZWFuKSB7XG4gICAgdGhpcy5qUXVlcnlFbGVtZW50Py5zY3JvbGxJbnRvVmlldyhhbGlnblRvVG9wLCB0aGlzLl9vcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZnRlciB0aGUgY29udHJvbCBoYXMgYmVlbiBpbml0aWFsaXNlZCBhbmQgdGhlIHZpZXcgaXMgcmVhZHksXG4gICAqIGdldCB0aGUgU29Ib1hpIGNvbnRyb2xzIHRvIGFjdGl2YXRlIGFueSB2YWxpZGF0aW9ucy5cbiAgICovXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLmpRdWVyeUVsZW1lbnQgPSBqUXVlcnkodGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcbiAgfVxufVxuIl19
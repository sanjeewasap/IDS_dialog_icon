import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoCardsComponent {
    get isCards() {
        return true;
    }
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        this.options = {};
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.cards({
                selectable: this.selectable,
            });
            this.cards = this.jQueryElement.data('cards');
        });
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.cards) {
                this.cards?.destroy();
                this.cards = undefined;
            }
        });
    }
    /** Defines the data to use, must be specified for this component */
    set dataset(dataset) {
        this.options.dataset = dataset;
        if (this.card) {
            this.card.settings.dataset = dataset;
            this.updated(this.card.settings);
        }
    }
    get dataset() {
        if (!this.card) {
            return this.options.dataset;
        }
        return this.card.settings.dataset;
    }
    /** Defines the selection type of cards */
    set selectable(selectable) {
        this.options.selectable = selectable;
        if (this.card) {
            this.card.settings.selectable = selectable;
            this.updated(this.card.settings);
        }
    }
    get selectable() {
        if (!this.card) {
            return this.options.selectable;
        }
        return this.card.settings.selectable;
    }
    updated(settings) {
        this.ngZone.runOutsideAngular(() => this.card?.updated(settings));
        return this;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCardsComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoCardsComponent, selector: "[soho-cards]", inputs: { dataset: "dataset", selectable: "selectable" }, host: { properties: { "class.cards": "this.isCards" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCardsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-cards]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isCards: [{
                type: HostBinding,
                args: ['class.cards']
            }], dataset: [{
                type: Input
            }], selectable: [{
                type: Input
            }] } });
export class SohoCardActionableComponent {
    get isCardActionable() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCardActionableComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoCardActionableComponent, selector: "soho-card-actionable", host: { properties: { "class.card-actionable": "this.isCardActionable" } }, ngImport: i0, template: `
    <ng-content></ng-content>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCardActionableComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'soho-card-actionable',
                    template: `
    <ng-content></ng-content>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isCardActionable: [{
                type: HostBinding,
                args: ['class.card-actionable']
            }] } });
export class SohoCardHeaderComponent {
    constructor() {
        this.flex = 'flex';
    }
    get isCardHeader() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCardHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoCardHeaderComponent, selector: "soho-card-header", host: { properties: { "class.card-header": "this.isCardHeader", "style.display": "this.flex" } }, ngImport: i0, template: `
    <ng-content></ng-content>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCardHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'soho-card-header',
                    template: `
    <ng-content></ng-content>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isCardHeader: [{
                type: HostBinding,
                args: ['class.card-header']
            }], flex: [{
                type: HostBinding,
                args: ['style.display']
            }] } });
export class SohoCardPaneComponent {
    constructor() {
        this.none = 'none';
    }
    get isCardPane() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCardPaneComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoCardPaneComponent, selector: "soho-card-pane", host: { properties: { "class.card-pane": "this.isCardPane", "style.display": "this.none" } }, ngImport: i0, template: `
    <ng-content></ng-content>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCardPaneComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'soho-card-pane',
                    template: `
    <ng-content></ng-content>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { isCardPane: [{
                type: HostBinding,
                args: ['class.card-pane']
            }], none: [{
                type: HostBinding,
                args: ['style.display']
            }] } });
export class SohoCardComponent {
    get isCard() {
        return true;
    }
    get isExpandableHeader() {
        return this.expandableHeader;
    }
    get isAutoHeight() {
        return this.autoHeight;
    }
    set bordered(value) {
        this.options.bordered = value;
        if (this.cards) {
            this.options.bordered = value;
        }
    }
    set noHeader(value) {
        this.options.noHeader = value;
        if (this.cards) {
            this.options.noHeader = value;
        }
    }
    set contentPaddingX(value) {
        this.options.contentPaddingX = value;
        if (this.cards) {
            this.options.contentPaddingX = value;
        }
    }
    set contentPaddingY(value) {
        this.options.contentPaddingY = value;
        if (this.cards) {
            this.options.contentPaddingY = value;
        }
    }
    set noShadow(value) {
        this.options.noShadow = value;
        if (this.cards) {
            this.options.noShadow = value;
        }
    }
    set detailRefId(value) {
        this.options.detailRefId = value;
        if (this.cards) {
            this.options.detailRefId = value;
        }
    }
    set closed(value) {
        this._closed = value;
        if (value && this.jQueryElement) {
            this.close();
        }
    }
    /**
     * Closed the state of the component
     */
    get closed() {
        return this._closed;
    }
    set attributes(value) {
        this.options.attributes = value;
        if (this.cards) {
            this.options.attributes = value;
            this.updated(this.cards.settings);
        }
    }
    get attributes() {
        return this.options.attributes;
    }
    /** Html template string */
    set template(template) {
        this.options.template = template;
        if (this.jQueryElement && this.cards) {
            this.cards.settings.template = template;
            this.updated(this.cards.settings);
        }
    }
    updated(settings) {
        this.ngZone.runOutsideAngular(() => this.cards?.updated(settings));
        return this;
    }
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        this.block = 'block';
        // Add events for Angular elements to listen to
        this.beforeexpand = new EventEmitter();
        this.beforecollapse = new EventEmitter();
        this.expand = new EventEmitter();
        this.collapse = new EventEmitter();
        this.afterexpand = new EventEmitter();
        this.aftercollapse = new EventEmitter();
        this.options = {};
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            if (typeof (this.options.bordered) === 'string' && this.options.bordered !== null) {
                // Convert the string value to a boolean
                this.bordered = this.options.bordered.toLowerCase() === 'true';
            }
        });
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.cards(this.options);
            // Add listeners to emit events
            // Initiate the element via jQuery
            this.jQueryElement.cards({
                id: this.id,
                expandableHeader: this.expandableHeader,
                expanded: !this.closed,
                verticalButtonAction: this.verticalButtonAction,
                attributes: this.options.attributes,
                bordered: this.bordered,
                noHeader: this.noHeader,
                contentPaddingX: this.contentPaddingX,
                contentPaddingY: this.contentPaddingY,
                noShadow: this.noShadow,
                detailRefId: this.detailRefId,
            });
            if (this.toggle) {
                this.toggle.subscribe(value => this.toggleOpen(value));
            }
            // Add listeners to emit events
            this.jQueryElement.on('beforeexpand', (event) => this.onBeforeExpand(event));
            this.jQueryElement.on('beforecollapse', (event) => this.onBeforeCollapse(event));
            this.jQueryElement.on('expand', (event) => this.onExpand(event));
            this.jQueryElement.on('collapse', (event) => this.onCollapse(event));
            this.jQueryElement.on('afterexpand', (event) => this.onAfterExpand(event));
            this.jQueryElement.on('aftercollapse', (event) => this.onAfterCollapse(event));
            this.cards = this.jQueryElement.data('cards');
            if (this.closed) {
                this.toggleOpen(false);
            }
            else if (typeof this.closed !== 'undefined') {
                this.toggleOpen(true);
            }
        });
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            // this.toggle = undefined;
            this.element.nativeElement = undefined;
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.cards) {
                this.cards?.destroy();
                this.cards = undefined;
            }
        });
    }
    /**
     * Toggles the state of the expandable card based on the passed param.
     */
    toggleOpen(open) {
        this.ngZone.runOutsideAngular(() => {
            this._closed = !open;
            if (open) {
                this.cards?.open();
            }
            else {
                this.cards?.close();
            }
        });
    }
    close() {
        this.ngZone.runOutsideAngular(() => this.cards?.close());
    }
    open() {
        this.ngZone.runOutsideAngular(() => this.cards?.open());
    }
    onBeforeExpand(event) {
        // ensure we are back in the angular zone
        this.ngZone.run(() => this.beforeexpand.emit(event));
    }
    onBeforeCollapse(event) {
        this.ngZone.run(() => this.beforecollapse.emit(event));
    }
    onExpand(event) {
        this.ngZone.run(() => this.expand.emit(event));
    }
    onCollapse(event) {
        this.ngZone.run(() => this.collapse.emit(event));
    }
    onAfterExpand(event) {
        this.ngZone.run(() => this.afterexpand.emit(event));
    }
    onAfterCollapse(event) {
        this.ngZone.run(() => this.aftercollapse.emit(event));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCardComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoCardComponent, selector: "soho-card", inputs: { id: ["soho-card", "id"], expandableHeader: "expandableHeader", verticalButtonAction: "verticalButtonAction", autoHeight: "autoHeight", bordered: "bordered", noHeader: "noHeader", contentPaddingX: "contentPaddingX", contentPaddingY: "contentPaddingY", noShadow: "noShadow", detailRefId: "detailRefId", closed: "closed", attributes: "attributes", template: "template", toggle: "toggle" }, outputs: { beforeexpand: "beforeexpand", beforecollapse: "beforecollapse", expand: "expand", collapse: "collapse", afterexpand: "afterexpand", aftercollapse: "aftercollapse" }, host: { properties: { "style.display": "this.block", "class.card": "this.isCard", "class.expandable-card": "this.isExpandableHeader", "class.auto-height": "this.isAutoHeight" } }, ngImport: i0, template: `
    <ng-content></ng-content>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'soho-card',
                    template: `
    <ng-content></ng-content>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { id: [{
                type: Input,
                args: ['soho-card']
            }], expandableHeader: [{
                type: Input
            }], verticalButtonAction: [{
                type: Input
            }], autoHeight: [{
                type: Input
            }], block: [{
                type: HostBinding,
                args: ['style.display']
            }], isCard: [{
                type: HostBinding,
                args: ['class.card']
            }], isExpandableHeader: [{
                type: HostBinding,
                args: ['class.expandable-card']
            }], isAutoHeight: [{
                type: HostBinding,
                args: ['class.auto-height']
            }], bordered: [{
                type: Input
            }], noHeader: [{
                type: Input
            }], contentPaddingX: [{
                type: Input
            }], contentPaddingY: [{
                type: Input
            }], noShadow: [{
                type: Input
            }], detailRefId: [{
                type: Input
            }], closed: [{
                type: Input
            }], attributes: [{
                type: Input
            }], template: [{
                type: Input
            }], toggle: [{
                type: Input
            }], beforeexpand: [{
                type: Output
            }], beforecollapse: [{
                type: Output
            }], expand: [{
                type: Output
            }], collapse: [{
                type: Output
            }], afterexpand: [{
                type: Output
            }], aftercollapse: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby1jYXJkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lkcy1lbnRlcnByaXNlLW5nL3NyYy9saWIvY2FyZC9zb2hvLWNhcmQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUVULFlBQVksRUFDWixXQUFXLEVBQ1gsS0FBSyxFQUlMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQzs7QUFTdkIsTUFBTSxPQUFPLGtCQUFrQjtJQUM3QixJQUFnQyxPQUFPO1FBQ3JDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUtELFlBQ1UsT0FBbUIsRUFDbkIsTUFBYztRQURkLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFDbkIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQTZCaEIsWUFBTyxHQUFvQixFQUFFLENBQUM7SUE1QmxDLENBQUM7SUFFTCxlQUFlO1FBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDakMsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUV4RCxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztnQkFDdkIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO2FBQzVCLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDaEQsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUNULElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFO1lBQ2pDLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtnQkFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsQ0FB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LFlBQVk7c0JBQWpELFdBQVc7dUJBQUMsbUJBQW1CO2dCQUluQixRQUFRO3NCQUFwQixLQUFLO2dCQU9PLFFBQVE7c0JBQXBCLEtBQUs7Z0JBT08sZUFBZTtzQkFBM0IsS0FBSztnQkFPTyxlQUFlO3NCQUEzQixLQUFLO2dCQU9PLFFBQVE7c0JBQXBCLEtBQUs7Z0JBT08sV0FBVztzQkFBdkIsS0FBSztnQkFPTyxNQUFNO3NCQUFsQixLQUFLO2dCQWVLLFVBQVU7c0JBRHBCLEtBQUs7Z0JBY08sUUFBUTtzQkFBcEIsS0FBSztnQkFlRyxNQUFNO3NCQUFkLEtBQUs7Z0JBR0ksWUFBWTtzQkFBckIsTUFBTTtnQkFDRyxjQUFjO3NCQUF2QixNQUFNO2dCQUNHLE1BQU07c0JBQWYsTUFBTTtnQkFDRyxRQUFRO3NCQUFqQixNQUFNO2dCQUNHLFdBQVc7c0JBQXBCLE1BQU07Z0JBQ0csYUFBYTtzQkFBdEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBOZ1pvbmUsXG4gIE9uSW5pdCxcbiAgT25EZXN0cm95LFxuICBPdXRwdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ1tzb2hvLWNhcmRzXScsIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFNvaG9DYXJkc0NvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG4gIEBIb3N0QmluZGluZygnY2xhc3MuY2FyZHMnKSBnZXQgaXNDYXJkcygpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKiBSZWZlcmVuY2UgdG8gdGhlIFNvaG8gY29udHJvbCBhcGkuICovXG4gIHByaXZhdGUgY2FyZHM/OiBTb2hvQ2FyZFN0YXRpYyB8IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmVcbiAgKSB7IH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50ID0galF1ZXJ5KHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50KTtcblxuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50LmNhcmRzKHtcbiAgICAgICAgc2VsZWN0YWJsZTogdGhpcy5zZWxlY3RhYmxlLFxuICAgICAgfSk7XG5cbiAgICAgIHRoaXMuY2FyZHMgPSB0aGlzLmpRdWVyeUVsZW1lbnQuZGF0YSgnY2FyZHMnKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmpRdWVyeUVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5qUXVlcnlFbGVtZW50Lm9mZigpO1xuICAgICAgICB0aGlzLmpRdWVyeUVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jYXJkcykge1xuICAgICAgICB0aGlzLmNhcmRzPy5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuY2FyZHMgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGpRdWVyeUVsZW1lbnQ/OiBKUXVlcnk7XG4gIHByaXZhdGUgb3B0aW9uczogU29ob0NhcmRPcHRpb25zID0ge307XG4gIHByaXZhdGUgY2FyZD86IFNvaG9DYXJkU3RhdGljIHwgbnVsbDtcblxuICAvKiogRGVmaW5lcyB0aGUgZGF0YSB0byB1c2UsIG11c3QgYmUgc3BlY2lmaWVkIGZvciB0aGlzIGNvbXBvbmVudCAqL1xuICBASW5wdXQoKVxuICBwdWJsaWMgc2V0IGRhdGFzZXQoZGF0YXNldDogQXJyYXk8YW55PiB8IHVuZGVmaW5lZCkge1xuICAgIHRoaXMub3B0aW9ucy5kYXRhc2V0ID0gZGF0YXNldDtcblxuICAgIGlmICh0aGlzLmNhcmQpIHtcbiAgICAgIHRoaXMuY2FyZC5zZXR0aW5ncy5kYXRhc2V0ID0gZGF0YXNldDtcbiAgICAgIHRoaXMudXBkYXRlZCh0aGlzLmNhcmQuc2V0dGluZ3MpO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgZ2V0IGRhdGFzZXQoKTogQXJyYXk8YW55PiB8IHVuZGVmaW5lZCB7XG4gICAgaWYgKCF0aGlzLmNhcmQpIHtcbiAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZGF0YXNldDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY2FyZC5zZXR0aW5ncy5kYXRhc2V0O1xuICB9XG5cbiAgLyoqIERlZmluZXMgdGhlIHNlbGVjdGlvbiB0eXBlIG9mIGNhcmRzICovXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgc2VsZWN0YWJsZShzZWxlY3RhYmxlOiBTb2hvQ2FyZHNTZWxlY3RhYmxlKSB7XG4gICAgdGhpcy5vcHRpb25zLnNlbGVjdGFibGUgPSBzZWxlY3RhYmxlO1xuXG4gICAgaWYgKHRoaXMuY2FyZCkge1xuICAgICAgdGhpcy5jYXJkLnNldHRpbmdzLnNlbGVjdGFibGUgPSBzZWxlY3RhYmxlO1xuICAgICAgdGhpcy51cGRhdGVkKHRoaXMuY2FyZC5zZXR0aW5ncyk7XG4gICAgfVxuICB9XG4gIHB1YmxpYyBnZXQgc2VsZWN0YWJsZSgpOiBTb2hvQ2FyZHNTZWxlY3RhYmxlIHtcbiAgICBpZiAoIXRoaXMuY2FyZCkge1xuICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5zZWxlY3RhYmxlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jYXJkLnNldHRpbmdzLnNlbGVjdGFibGU7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlZChzZXR0aW5nczogYW55KTogU29ob0NhcmRzQ29tcG9uZW50IHtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB0aGlzLmNhcmQ/LnVwZGF0ZWQoc2V0dGluZ3MpKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzb2hvLWNhcmQtYWN0aW9uYWJsZScsXG4gIHRlbXBsYXRlOiBgXG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICBgLFxuICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgU29ob0NhcmRBY3Rpb25hYmxlQ29tcG9uZW50IHtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5jYXJkLWFjdGlvbmFibGUnKSBnZXQgaXNDYXJkQWN0aW9uYWJsZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdzb2hvLWNhcmQtaGVhZGVyJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gIGAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBTb2hvQ2FyZEhlYWRlckNvbXBvbmVudCB7XG4gIEBIb3N0QmluZGluZygnY2xhc3MuY2FyZC1oZWFkZXInKSBnZXQgaXNDYXJkSGVhZGVyKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIEBIb3N0QmluZGluZygnc3R5bGUuZGlzcGxheScpIGZsZXggPSAnZmxleCc7XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3NvaG8tY2FyZC1wYW5lJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gIGAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBTb2hvQ2FyZFBhbmVDb21wb25lbnQge1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNhcmQtcGFuZScpIGdldCBpc0NhcmRQYW5lKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIEBIb3N0QmluZGluZygnc3R5bGUuZGlzcGxheScpIG5vbmUgPSAnbm9uZSc7XG59XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3NvaG8tY2FyZCcsIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgdGVtcGxhdGU6IGBcbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG4gIGAsXG4gIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIFNvaG9DYXJkQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBPbkluaXQge1xuICBASW5wdXQoJ3NvaG8tY2FyZCcpIGlkOiBzdHJpbmcgfCB1bmRlZmluZWQ7IC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgQElucHV0KCkgZXhwYW5kYWJsZUhlYWRlcjogYm9vbGVhbiB8IHVuZGVmaW5lZDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBASW5wdXQoKSB2ZXJ0aWNhbEJ1dHRvbkFjdGlvbjogYm9vbGVhbiB8IHVuZGVmaW5lZDsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICBASW5wdXQoKSBhdXRvSGVpZ2h0OiBib29sZWFuIHwgdW5kZWZpbmVkOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG5cbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS5kaXNwbGF5JykgYmxvY2sgPSAnYmxvY2snO1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNhcmQnKSBnZXQgaXNDYXJkKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIEBIb3N0QmluZGluZygnY2xhc3MuZXhwYW5kYWJsZS1jYXJkJykgZ2V0IGlzRXhwYW5kYWJsZUhlYWRlcigpIHtcbiAgICByZXR1cm4gdGhpcy5leHBhbmRhYmxlSGVhZGVyO1xuICB9XG4gIEBIb3N0QmluZGluZygnY2xhc3MuYXV0by1oZWlnaHQnKSBnZXQgaXNBdXRvSGVpZ2h0KCkge1xuICAgIHJldHVybiB0aGlzLmF1dG9IZWlnaHQ7XG4gIH1cblxuICBASW5wdXQoKSBzZXQgYm9yZGVyZWQodmFsdWU6IGJvb2xlYW4gfCBzdHJpbmcgfCB1bmRlZmluZWQpIHtcbiAgICAodGhpcy5vcHRpb25zIGFzIGFueSkuYm9yZGVyZWQgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy5jYXJkcykge1xuICAgICAgdGhpcy5vcHRpb25zLmJvcmRlcmVkID0gdmFsdWU7XG4gICAgfVxuICB9XG5cbiAgQElucHV0KCkgc2V0IG5vSGVhZGVyKHZhbHVlOiBib29sZWFuIHwgdW5kZWZpbmVkKSB7XG4gICAgKHRoaXMub3B0aW9ucyBhcyBhbnkpLm5vSGVhZGVyID0gdmFsdWU7XG4gICAgaWYgKHRoaXMuY2FyZHMpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5ub0hlYWRlciA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpIHNldCBjb250ZW50UGFkZGluZ1godmFsdWU6IG51bWJlciB8IHVuZGVmaW5lZCkge1xuICAgICh0aGlzLm9wdGlvbnMgYXMgYW55KS5jb250ZW50UGFkZGluZ1ggPSB2YWx1ZTtcbiAgICBpZiAodGhpcy5jYXJkcykge1xuICAgICAgdGhpcy5vcHRpb25zLmNvbnRlbnRQYWRkaW5nWCA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpIHNldCBjb250ZW50UGFkZGluZ1kodmFsdWU6IG51bWJlciB8IHVuZGVmaW5lZCkge1xuICAgICh0aGlzLm9wdGlvbnMgYXMgYW55KS5jb250ZW50UGFkZGluZ1kgPSB2YWx1ZTtcbiAgICBpZiAodGhpcy5jYXJkcykge1xuICAgICAgdGhpcy5vcHRpb25zLmNvbnRlbnRQYWRkaW5nWSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIEBJbnB1dCgpIHNldCBub1NoYWRvdyh2YWx1ZTogYm9vbGVhbikge1xuICAgICh0aGlzLm9wdGlvbnMgYXMgYW55KS5ub1NoYWRvdyA9IHZhbHVlO1xuICAgIGlmICh0aGlzLmNhcmRzKSB7XG4gICAgICB0aGlzLm9wdGlvbnMubm9TaGFkb3cgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBASW5wdXQoKSBzZXQgZGV0YWlsUmVmSWQodmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkge1xuICAgICh0aGlzLm9wdGlvbnMgYXMgYW55KS5kZXRhaWxSZWZJZCA9IHZhbHVlO1xuICAgIGlmICh0aGlzLmNhcmRzKSB7XG4gICAgICB0aGlzLm9wdGlvbnMuZGV0YWlsUmVmSWQgPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICBASW5wdXQoKSBzZXQgY2xvc2VkKHZhbHVlOiBib29sZWFuIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5fY2xvc2VkID0gdmFsdWU7XG4gICAgaWYgKHZhbHVlICYmIHRoaXMualF1ZXJ5RWxlbWVudCkge1xuICAgICAgdGhpcy5jbG9zZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZWQgdGhlIHN0YXRlIG9mIHRoZSBjb21wb25lbnRcbiAgICovXG4gIGdldCBjbG9zZWQoKTogYm9vbGVhbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX2Nsb3NlZDtcbiAgfVxuXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBzZXQgYXR0cmlidXRlcyh2YWx1ZTogQXJyYXk8T2JqZWN0PiB8IE9iamVjdCB8IHVuZGVmaW5lZCkge1xuICAgICh0aGlzLm9wdGlvbnMgYXMgYW55KS5hdHRyaWJ1dGVzID0gdmFsdWU7XG4gICAgaWYgKHRoaXMuY2FyZHMpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5hdHRyaWJ1dGVzID0gdmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZWQodGhpcy5jYXJkcy5zZXR0aW5ncyk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldCBhdHRyaWJ1dGVzKCk6IEFycmF5PE9iamVjdD4gfCBPYmplY3QgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLm9wdGlvbnMuYXR0cmlidXRlcztcbiAgfVxuXG4gIC8qKiBIdG1sIHRlbXBsYXRlIHN0cmluZyAqL1xuICBASW5wdXQoKSBzZXQgdGVtcGxhdGUodGVtcGxhdGU6IHN0cmluZykge1xuICAgIHRoaXMub3B0aW9ucy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgIGlmICh0aGlzLmpRdWVyeUVsZW1lbnQgJiYgdGhpcy5jYXJkcykge1xuICAgICAgdGhpcy5jYXJkcy5zZXR0aW5ncy50ZW1wbGF0ZSA9IHRlbXBsYXRlO1xuICAgICAgdGhpcy51cGRhdGVkKHRoaXMuY2FyZHMuc2V0dGluZ3MpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVkKHNldHRpbmdzOiBhbnkpOiBTb2hvQ2FyZENvbXBvbmVudCB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gdGhpcy5jYXJkcz8udXBkYXRlZChzZXR0aW5ncykpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gRXhwb3NlIG1ldGhvZHMgaW4gY2FzZSBBbmd1bGFyIG5lZWRzIHRvIGNvbnRyb2wgdGhlIERPTVxuICAvLyB1c2luZyBPYnNlcnZhYmxlXG4gIEBJbnB1dCgpIHRvZ2dsZT86IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbiAgLy8gQWRkIGV2ZW50cyBmb3IgQW5ndWxhciBlbGVtZW50cyB0byBsaXN0ZW4gdG9cbiAgQE91dHB1dCgpIGJlZm9yZWV4cGFuZDogRXZlbnRFbWl0dGVyPE9iamVjdD4gPSBuZXcgRXZlbnRFbWl0dGVyPE9iamVjdD4oKTtcbiAgQE91dHB1dCgpIGJlZm9yZWNvbGxhcHNlOiBFdmVudEVtaXR0ZXI8T2JqZWN0PiA9IG5ldyBFdmVudEVtaXR0ZXI8T2JqZWN0PigpO1xuICBAT3V0cHV0KCkgZXhwYW5kOiBFdmVudEVtaXR0ZXI8T2JqZWN0PiA9IG5ldyBFdmVudEVtaXR0ZXI8T2JqZWN0PigpO1xuICBAT3V0cHV0KCkgY29sbGFwc2U6IEV2ZW50RW1pdHRlcjxPYmplY3Q+ID0gbmV3IEV2ZW50RW1pdHRlcjxPYmplY3Q+KCk7XG4gIEBPdXRwdXQoKSBhZnRlcmV4cGFuZDogRXZlbnRFbWl0dGVyPE9iamVjdD4gPSBuZXcgRXZlbnRFbWl0dGVyPE9iamVjdD4oKTtcbiAgQE91dHB1dCgpIGFmdGVyY29sbGFwc2U6IEV2ZW50RW1pdHRlcjxPYmplY3Q+ID0gbmV3IEV2ZW50RW1pdHRlcjxPYmplY3Q+KCk7XG5cbiAgcHJpdmF0ZSBqUXVlcnlFbGVtZW50PzogSlF1ZXJ5O1xuICBwcml2YXRlIG9wdGlvbnM6IFNvaG9DYXJkT3B0aW9ucyA9IHt9O1xuICBwcml2YXRlIGNhcmRzPzogU29ob0NhcmRTdGF0aWMgfCBudWxsO1xuICBwcml2YXRlIF9jbG9zZWQ/OiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lXG4gICkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50ID0galF1ZXJ5KHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50KTtcblxuICAgICAgaWYgKHR5cGVvZiAodGhpcy5vcHRpb25zLmJvcmRlcmVkKSA9PT0gJ3N0cmluZycgJiYgdGhpcy5vcHRpb25zLmJvcmRlcmVkICE9PSBudWxsKSB7XG4gICAgICAgIC8vIENvbnZlcnQgdGhlIHN0cmluZyB2YWx1ZSB0byBhIGJvb2xlYW5cbiAgICAgICAgdGhpcy5ib3JkZXJlZCA9IHRoaXMub3B0aW9ucy5ib3JkZXJlZC50b0xvd2VyQ2FzZSgpID09PSAndHJ1ZSc7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudCA9IGpRdWVyeSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCk7XG5cbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5jYXJkcyh0aGlzLm9wdGlvbnMpO1xuXG4gICAgICAvLyBBZGQgbGlzdGVuZXJzIHRvIGVtaXQgZXZlbnRzXG4gICAgICAvLyBJbml0aWF0ZSB0aGUgZWxlbWVudCB2aWEgalF1ZXJ5XG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQuY2FyZHMoe1xuICAgICAgICBpZDogdGhpcy5pZCxcbiAgICAgICAgZXhwYW5kYWJsZUhlYWRlcjogdGhpcy5leHBhbmRhYmxlSGVhZGVyLFxuICAgICAgICBleHBhbmRlZDogIXRoaXMuY2xvc2VkLFxuICAgICAgICB2ZXJ0aWNhbEJ1dHRvbkFjdGlvbjogdGhpcy52ZXJ0aWNhbEJ1dHRvbkFjdGlvbixcbiAgICAgICAgYXR0cmlidXRlczogdGhpcy5vcHRpb25zLmF0dHJpYnV0ZXMsXG4gICAgICAgIGJvcmRlcmVkOiB0aGlzLmJvcmRlcmVkLFxuICAgICAgICBub0hlYWRlcjogdGhpcy5ub0hlYWRlcixcbiAgICAgICAgY29udGVudFBhZGRpbmdYOiB0aGlzLmNvbnRlbnRQYWRkaW5nWCxcbiAgICAgICAgY29udGVudFBhZGRpbmdZOiB0aGlzLmNvbnRlbnRQYWRkaW5nWSxcbiAgICAgICAgbm9TaGFkb3c6IHRoaXMubm9TaGFkb3csXG4gICAgICAgIGRldGFpbFJlZklkOiB0aGlzLmRldGFpbFJlZklkLFxuICAgICAgfSk7XG5cbiAgICAgIGlmICh0aGlzLnRvZ2dsZSkge1xuICAgICAgICB0aGlzLnRvZ2dsZS5zdWJzY3JpYmUodmFsdWUgPT4gdGhpcy50b2dnbGVPcGVuKHZhbHVlKSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEFkZCBsaXN0ZW5lcnMgdG8gZW1pdCBldmVudHNcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5vbignYmVmb3JlZXhwYW5kJywgKGV2ZW50OiBTb2hvQ2FyZEV2ZW50KSA9PiB0aGlzLm9uQmVmb3JlRXhwYW5kKGV2ZW50KSk7XG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQub24oJ2JlZm9yZWNvbGxhcHNlJywgKGV2ZW50OiBTb2hvQ2FyZEV2ZW50KSA9PiB0aGlzLm9uQmVmb3JlQ29sbGFwc2UoZXZlbnQpKTtcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5vbignZXhwYW5kJywgKGV2ZW50OiBTb2hvQ2FyZEV2ZW50KSA9PiB0aGlzLm9uRXhwYW5kKGV2ZW50KSk7XG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQub24oJ2NvbGxhcHNlJywgKGV2ZW50OiBTb2hvQ2FyZEV2ZW50KSA9PiB0aGlzLm9uQ29sbGFwc2UoZXZlbnQpKTtcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5vbignYWZ0ZXJleHBhbmQnLCAoZXZlbnQ6IFNvaG9DYXJkRXZlbnQpID0+IHRoaXMub25BZnRlckV4cGFuZChldmVudCkpO1xuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50Lm9uKCdhZnRlcmNvbGxhcHNlJywgKGV2ZW50OiBTb2hvQ2FyZEV2ZW50KSA9PiB0aGlzLm9uQWZ0ZXJDb2xsYXBzZShldmVudCkpO1xuXG4gICAgICB0aGlzLmNhcmRzID0gdGhpcy5qUXVlcnlFbGVtZW50LmRhdGEoJ2NhcmRzJyk7XG5cbiAgICAgIGlmICh0aGlzLmNsb3NlZCkge1xuICAgICAgICB0aGlzLnRvZ2dsZU9wZW4oZmFsc2UpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdGhpcy5jbG9zZWQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHRoaXMudG9nZ2xlT3Blbih0cnVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIC8vIHRoaXMudG9nZ2xlID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICBpZiAodGhpcy5qUXVlcnlFbGVtZW50KSB7XG4gICAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5vZmYoKTtcbiAgICAgICAgdGhpcy5qUXVlcnlFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY2FyZHMpIHtcbiAgICAgICAgdGhpcy5jYXJkcz8uZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmNhcmRzID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRvZ2dsZXMgdGhlIHN0YXRlIG9mIHRoZSBleHBhbmRhYmxlIGNhcmQgYmFzZWQgb24gdGhlIHBhc3NlZCBwYXJhbS5cbiAgICovXG4gIHRvZ2dsZU9wZW4ob3BlbjogYm9vbGVhbikge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMuX2Nsb3NlZCA9ICFvcGVuO1xuICAgICAgaWYgKG9wZW4pIHtcbiAgICAgICAgdGhpcy5jYXJkcz8ub3BlbigpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jYXJkcz8uY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGNsb3NlKCk6IHZvaWQge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMuY2FyZHM/LmNsb3NlKCkpO1xuICB9XG5cbiAgb3BlbigpOiB2b2lkIHtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB0aGlzLmNhcmRzPy5vcGVuKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBvbkJlZm9yZUV4cGFuZChldmVudDogU29ob0NhcmRFdmVudCkge1xuICAgIC8vIGVuc3VyZSB3ZSBhcmUgYmFjayBpbiB0aGUgYW5ndWxhciB6b25lXG4gICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHRoaXMuYmVmb3JlZXhwYW5kLmVtaXQoZXZlbnQpKTtcbiAgfVxuXG4gIHByaXZhdGUgb25CZWZvcmVDb2xsYXBzZShldmVudDogU29ob0NhcmRFdmVudCkge1xuICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB0aGlzLmJlZm9yZWNvbGxhcHNlLmVtaXQoZXZlbnQpKTtcbiAgfVxuXG4gIHByaXZhdGUgb25FeHBhbmQoZXZlbnQ6IFNvaG9DYXJkRXZlbnQpIHtcbiAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5leHBhbmQuZW1pdChldmVudCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBvbkNvbGxhcHNlKGV2ZW50OiBTb2hvQ2FyZEV2ZW50KSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHRoaXMuY29sbGFwc2UuZW1pdChldmVudCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBvbkFmdGVyRXhwYW5kKGV2ZW50OiBTb2hvQ2FyZEV2ZW50KSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHRoaXMuYWZ0ZXJleHBhbmQuZW1pdChldmVudCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBvbkFmdGVyQ29sbGFwc2UoZXZlbnQ6IFNvaG9DYXJkRXZlbnQpIHtcbiAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5hZnRlcmNvbGxhcHNlLmVtaXQoZXZlbnQpKTtcbiAgfVxufVxuIl19
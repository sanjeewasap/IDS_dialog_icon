import { ChangeDetectionStrategy, Component, Input, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoButtonsetComponent {
    /**
     * Constructor.
     *
     * @param element - the element matching the component's selector.
     * @param ref - change detector reference for the component.
     * @param ngZone - angular zone.
     */
    constructor(element, ref, ngZone) {
        this.element = element;
        this.ref = ref;
        this.ngZone = ngZone;
        /** Settings (options) */
        this.settings = {};
    }
    // ------------------------------------------
    // Inputs
    // ------------------------------------------
    /**
     * The list of buttons definitions.
     *
     * @params buttons - list of modal button definitions to use.
     */
    set buttons(buttons) {
        this.settings.buttons = buttons;
        if (this.buttonset) {
            this.markForRefresh();
        }
    }
    get buttons() {
        if (this.buttonset) {
            return this.buttonset.settings.buttons;
        }
        else {
            return this.settings.buttons;
        }
    }
    /**
     * Detect existing buttons in the markup rather than generating
     * new button markup.
     */
    set detectHTMLButtons(value) {
        this.settings.detectHTMLButtons = value;
        if (this.buttonset) {
            this.markForRefresh();
        }
    }
    get detectHTMLButtons() {
        if (this.buttonset) {
            return this.buttonset.settings.detectHTMLButtons;
        }
        else {
            return this.settings.detectHTMLButtons;
        }
    }
    /**
     * Styles to add to any generated button markup.
     */
    set style(style) {
        this.settings.style = style;
        if (this.buttonset) {
            this.markForRefresh();
        }
    }
    get style() {
        if (this.buttonset) {
            return this.buttonset.settings.style;
        }
        else {
            return this.settings.style;
        }
    }
    get buttonAPIs() {
        return this.buttonset.buttons;
    }
    /**
     * Disable all the buttons on the buttonset.
     *
     * @param val whether or not the Buttonset is disabled.
     */
    set disabled(val) {
        if (this.buttonset) {
            this.ngZone.runOutsideAngular(() => {
                this.buttonset.disabled = val;
            });
        }
    }
    /**
     * Adds a new button to the Buttonset.
     *
     * @param button button definition.
     * @param [doAddDOM=false] if true, appends the new element to the Buttonset container after creation/update.
     */
    add(button, doAddDOM) {
        if (this.buttonset) {
            this.ngZone.runOutsideAngular(() => {
                this.buttonset.add(button, doAddDOM);
            });
        }
        else {
            throw Error('buttonset not initialised');
        }
    }
    /**
     * Removes a button from the buttonset, based on the API, HTML Element or element id.
     *
     * @param buttonAPI a button, an html element, or button id.
     * @param [doRemoveDOM=false] if true, removes the button's HTML from the page.
     */
    remove(buttonAPI, doRemoveDOM) {
        if (this.buttonset) {
            this.ngZone.runOutsideAngular(() => {
                this.buttonset.remove(buttonAPI, doRemoveDOM);
            });
        }
        else {
            throw Error('buttonset not initialised');
        }
    }
    /**
     * Removes ALL buttons from the buttonset
     *
     * @param [doRemoveDOM=false] if true, removes the button's HTML from the page.
     */
    removeAll(doRemoveDOM) {
        if (this.buttonset) {
            this.ngZone.runOutsideAngular(() => {
                this.buttonset.removeAll(doRemoveDOM);
            });
        }
        else {
            throw Error('buttonset not initialised');
        }
    }
    /**
     * Returns a ButtonSet API in a specified place in the buttons array.
     *
     * @param idx index to target
     * @returns the Button API at the given index
     */
    at(idx) {
        if (this.buttonset) {
            return this.ngZone.runOutsideAngular(() => {
                return this.buttonset.at(idx);
            });
        }
        else {
            throw Error('buttonset not initialised');
        }
    }
    /**
     * Provides a JSON-compatible data representation of this button component for use with
     * higher-level components.
     *
     * @param addContextElement if true, adds a reference to this button element to the return data (NOT JSON-compatible).
     * @returns JSON-compatible representation of this button's configuration.
     */
    toData(addContextElement) {
        if (this.buttonset) {
            return this.ngZone.runOutsideAngular(() => {
                return this.buttonset.toData(addContextElement);
            });
        }
        else {
            throw Error('buttonset not initialised');
        }
    }
    /**
     * Update the component with new settings.
     *
     * @param settings The settings you would like to modify.
     * @returns This component's API.
     */
    updated(settings) {
        // Merge the settings.
        if (settings) {
            this.settings = Soho.utils.mergeSettings(this.element[0], settings, this.settings);
        }
        if (this.buttonset) {
            this.ngZone.runOutsideAngular(() => {
                this.buttonset?.updated(this.settings);
            });
            return this.buttonset;
        }
        else {
            throw Error('buttonset not initialised');
        }
    }
    /**
     * Teardown and remove any added markup and events.
     */
    destroy() {
        if (this.buttonset) {
            this.ngZone.runOutsideAngular(() => {
                this.buttonset?.destroy();
            });
            this.buttonset = null;
        }
        else {
            throw Error('buttonset not initialised');
        }
    }
    // ------------------------------------------
    // Lifecycle Events
    // ------------------------------------------
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // Wrap the element in a jQuery selector.
            this.jQueryElement = jQuery(this.element.nativeElement);
            // Initialise the Soho control.
            this.jQueryElement.buttonset(this.settings);
            // Once the control is initialised, extract the control
            // plug-in from the element.s  The element name is defined
            // by the plug-in, but in this case is 'button'.
            this.buttonset = this.jQueryElement.data('buttonset');
        });
        // There are no 'extra' event handlers for buttonset.
    }
    ngAfterViewChecked() {
        if (this.runUpdatedOnCheck) {
            this.ngZone.runOutsideAngular(() => {
                this.updated(this.settings);
                this.runUpdatedOnCheck = false;
            });
        }
    }
    /**
     * Destructor.
     */
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.buttonset) {
                this.buttonset.destroy();
                this.buttonset = null;
            }
        });
    }
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh() {
        // Run updated on the next updated check.
        this.runUpdatedOnCheck = true;
        // ... make sure the change detector kicks in, otherwise if the inputs
        // were change programmatially the component may not be eligible for
        // updating.
        this.ref.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoButtonsetComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoButtonsetComponent, selector: "div[soho-buttonset]", inputs: { buttons: "buttons", detectHTMLButtons: "detectHTMLButtons", style: "style", disabled: "disabled" }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoButtonsetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'div[soho-buttonset]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, propDecorators: { buttons: [{
                type: Input
            }], detectHTMLButtons: [{
                type: Input
            }], style: [{
                type: Input
            }], disabled: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
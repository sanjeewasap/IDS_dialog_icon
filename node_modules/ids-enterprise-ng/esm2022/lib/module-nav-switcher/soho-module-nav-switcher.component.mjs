// tslint:disable-next-line:no-unused-variable
import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * Angular Wrapper for the Soho Module Nav Switcher element.
 * This Component attaches to an element annotated with the `soho-module-nav-switcher` attribute,
 */
export class SohoModuleNavSwitcherComponent {
    /** Constructor. */
    constructor(elementRef, ngZone) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        /** Stored settings */
        this._options = {
            displayMode: false,
            generate: false,
            icon: undefined,
            moduleButtonText: undefined,
            roleDropdownLabel: undefined,
            roles: []
        };
        /** Internal use flags */
        this._updateRequired = false;
        // -------------------------------------------
        // Outputs
        // -------------------------------------------
        this.rolechange = new EventEmitter();
        this.modulebuttonclick = new EventEmitter();
    }
    // -------------------------------------------
    // Inputs
    // -------------------------------------------
    set displayMode(val) {
        this._options.displayMode = val;
        this.updated({ displayMode: this._options.displayMode });
    }
    get displayMode() {
        return this.modulenavswitcher?.settings.displayMode || this._options.displayMode;
    }
    set generate(val) {
        this._options.generate = val;
        this.updated({ generate: this._options.generate });
    }
    get generate() {
        return this.modulenavswitcher?.settings.generate || this._options.generate;
    }
    set icon(val) {
        this._options.icon = val;
        this.updated({ icon: this._options.icon });
    }
    get icon() {
        return this.modulenavswitcher?.settings.icon || this._options.icon;
    }
    set moduleButtonText(val) {
        this._options.moduleButtonText = val;
        this.updated({ moduleButtonText: this._options.moduleButtonText });
    }
    get moduleButtonText() {
        return this.modulenavswitcher?.settings.moduleButtonText || this._options.moduleButtonText;
    }
    set roleDropdownLabel(val) {
        this._options.roleDropdownLabel = val;
        this.updated({ roleDropdownLabel: this._options.roleDropdownLabel });
    }
    get roleDropdownLabel() {
        return this.modulenavswitcher?.settings.roleDropdownLabel || this._options.roleDropdownLabel;
    }
    set roles(val) {
        this._options.roles = val;
        this.updated({ roles: this._options.roles });
    }
    get roles() {
        return this.modulenavswitcher?.settings.roles || this._options.roles;
    }
    // -------------------------------------------
    // Public API
    // -------------------------------------------
    accordionAPI() {
        return this.modulenavswitcher?.accordionAPI;
    }
    accordionEl() {
        return this.modulenavswitcher?.accordionEl;
    }
    moduleButtonAPI() {
        return this.modulenavswitcher?.moduleButtonAPI;
    }
    roleDropdownAPI() {
        return this.modulenavswitcher?.roleDropdownAPI;
    }
    init() {
        this.modulenavswitcher?.init();
    }
    toggleModuleButtonFocus(doFocus) {
        this.modulenavswitcher?.toggleModuleButtonFocus(doFocus);
    }
    /** Triggers a UI Resync. */
    updated(val) {
        if (val) {
            this._options = jQuery.extend({}, this._options, val);
            if (this.modulenavswitcher) {
                this.ngZone.runOutsideAngular(() => {
                    this.modulenavswitcher?.updated(this._options);
                });
            }
        }
    }
    teardown() {
        this.modulenavswitcher?.teardown();
    }
    /** Sets the roles array programmatically */
    setRoles(val) {
        this.roles = val;
    }
    /** Triggered by a Module Button click */
    onModuleButtonClick(event) {
        this.modulebuttonclick.emit(event);
    }
    /** Triggered by a Role Dropdown change */
    onRoleChange(event) {
        this.rolechange.emit(event);
    }
    // ------------------------------------------
    // Lifecycle Events
    // ------------------------------------------
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // Initialize/store instance
            this.jQueryElement = jQuery(this.elementRef.nativeElement);
            this.jQueryElement.modulenavswitcher(this._options);
            this.modulenavswitcher = this.jQueryElement.data('modulenavswitcher');
            // @todo - add event binding control so we don't bind if not required.
            this.jQueryElement
                .on('change', (event) => this.onRoleChange(event));
        });
    }
    ngAfterViewChecked() {
        if (this.modulenavswitcher && this._updateRequired) {
            this.ngZone.runOutsideAngular(() => this.modulenavswitcher?.updated(this._options));
            this._updateRequired = false;
        }
    }
    ngOnDestroy() {
        // call outside the angular zone so change detection
        // isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.modulenavswitcher) {
                this.modulenavswitcher.destroy();
                this.modulenavswitcher = null;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoModuleNavSwitcherComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoModuleNavSwitcherComponent, selector: "soho-module-nav-switcher, [soho-module-nav-switcher]", inputs: { displayMode: "displayMode", generate: "generate", icon: "icon", moduleButtonText: "moduleButtonText", roleDropdownLabel: "roleDropdownLabel", roles: "roles" }, outputs: { rolechange: "rolechange", modulebuttonclick: "modulebuttonclick" }, ngImport: i0, template: "<div class=\"module-nav-section module-btn\">\n  <button\n    id=\"module-nav-homepage-btn\"\n    class=\"btn-icon\"\n    (click)=\"onModuleButtonClick($event)\">\n    <span class=\"audible\">{{moduleButtonText}}</span>\n  </button>\n</div>\n<div class=\"module-nav-section role-dropdown\">\n  <label for=\"module-nav-role-switcher\" class=\"label audible\">{{roleDropdownLabel}}</label>\n  <select soho-dropdown\n    id=\"module-nav-role-switcher\"\n    name=\"module-nav-role-switcher\"\n    class=\"dropdown\"\n    data-automation-id=\"custom-automation-dropdown-id\"\n    (change)=\"onRoleChange($event)\">\n    <option *ngFor=\"let role of roles\" [value]=\"role.value\">{{role.label}}</option>\n  </select>\n</div>\n", styles: ["soho-module-nav-switcher{display:contents}\n"], dependencies: [{ kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoModuleNavSwitcherComponent, decorators: [{
            type: Component,
            args: [{ selector: 'soho-module-nav-switcher, [soho-module-nav-switcher]', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"module-nav-section module-btn\">\n  <button\n    id=\"module-nav-homepage-btn\"\n    class=\"btn-icon\"\n    (click)=\"onModuleButtonClick($event)\">\n    <span class=\"audible\">{{moduleButtonText}}</span>\n  </button>\n</div>\n<div class=\"module-nav-section role-dropdown\">\n  <label for=\"module-nav-role-switcher\" class=\"label audible\">{{roleDropdownLabel}}</label>\n  <select soho-dropdown\n    id=\"module-nav-role-switcher\"\n    name=\"module-nav-role-switcher\"\n    class=\"dropdown\"\n    data-automation-id=\"custom-automation-dropdown-id\"\n    (change)=\"onRoleChange($event)\">\n    <option *ngFor=\"let role of roles\" [value]=\"role.value\">{{role.label}}</option>\n  </select>\n</div>\n", styles: ["soho-module-nav-switcher{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { displayMode: [{
                type: Input
            }], generate: [{
                type: Input
            }], icon: [{
                type: Input
            }], moduleButtonText: [{
                type: Input
            }], roleDropdownLabel: [{
                type: Input
            }], roles: [{
                type: Input
            }], rolechange: [{
                type: Output
            }], modulebuttonclick: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { ChangeDetectionStrategy, Component, HostBinding, Input, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoCirclepagerComponent {
    get isCirclePager() {
        return true;
    }
    /** The number of slides to show in one view / pane. */
    set slidesToShow(value) {
        this.settings.slidesToShow = value;
        if (this.circlepager) {
            this.circlepager.settings.slidesToShow = value;
            // todo: does this setting require an updated call to circlepager.js?
        }
    }
    /** First showing slide/group, an 0-based integer */
    set startingSlide(value) {
        this.settings.startingSlide = value;
        if (this.circlepager) {
            this.circlepager.settings.startingSlide = value;
            this.updateRequired = true;
        }
    }
    /** Setting loop: true will loop back after next/previous reached to end */
    set loop(value) {
        this.settings.loop = value;
        if (this.circlepager) {
            this.circlepager.settings.loop = value;
            this.updateRequired = true;
        }
    }
    /** Add extra attributes like id's to the component **/
    set attributes(attributes) {
        this.settings.attributes = attributes;
        if (this.circlepager) {
            this.circlepager.settings.attributes = attributes;
            this.updateRequired = true;
        }
    }
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        /** Options. */
        this.settings = {};
        this.updateRequired = false;
    }
    /** Setup */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.circlepager(this.settings);
            this.circlepager = this.jQueryElement.data('circlepager');
        });
    }
    ngAfterViewChecked() {
        if (this.circlepager && this.updateRequired) {
            this.ngZone.runOutsideAngular(() => this.circlepager?.updated(this.circlepager.settings));
            this.updateRequired = false;
        }
    }
    /** Tear Down */
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.circlepager) {
                try {
                    this.circlepager.destroy();
                }
                catch (e) {
                    console.error(e);
                }
                this.circlepager = null;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCirclepagerComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoCirclepagerComponent, selector: "[soho-circlepager]", inputs: { slidesToShow: "slidesToShow", startingSlide: "startingSlide", loop: "loop", attributes: "attributes" }, host: { properties: { "class.circlepager": "this.isCirclePager" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoCirclepagerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-circlepager]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isCirclePager: [{
                type: HostBinding,
                args: ['class.circlepager']
            }], slidesToShow: [{
                type: Input
            }], startingSlide: [{
                type: Input
            }], loop: [{
                type: Input
            }], attributes: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby1jaXJjbGVwYWdlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZHMtZW50ZXJwcmlzZS1uZy9zcmMvbGliL2NpcmNsZXBhZ2VyL3NvaG8tY2lyY2xlcGFnZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFHTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUVULFdBQVcsRUFFWCxLQUFLLEdBRU4sTUFBTSxlQUFlLENBQUM7O0FBUXZCLE1BQU0sT0FBTyx3QkFBd0I7SUFJbkMsSUFBc0MsYUFBYTtRQUNqRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFFRCx1REFBdUQ7SUFDdkQsSUFBYSxZQUFZLENBQUMsS0FBYTtRQUNyQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7UUFFbkMsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUM7WUFDL0MscUVBQXFFO1NBQ3RFO0lBQ0gsQ0FBQztJQUVELG9EQUFvRDtJQUNwRCxJQUFhLGFBQWEsQ0FBQyxLQUFhO1FBQ3RDLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztRQUVwQyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztZQUNoRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztTQUM1QjtJQUNILENBQUM7SUFFRCwyRUFBMkU7SUFDM0UsSUFBYSxJQUFJLENBQUMsS0FBYztRQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFFM0IsSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7WUFDdkMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBS0QsdURBQXVEO0lBQ3ZELElBQWEsVUFBVSxDQUFDLFVBQWtDO1FBQ3hELElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUV0QyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztZQUNsRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztTQUM1QjtJQUNILENBQUM7SUFJRCxZQUNVLE9BQW1CLEVBQ25CLE1BQWM7UUFEZCxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQ25CLFdBQU0sR0FBTixNQUFNLENBQVE7UUF0RHhCLGVBQWU7UUFDUCxhQUFRLEdBQTJCLEVBQUUsQ0FBQztRQWlEdEMsbUJBQWMsR0FBRyxLQUFLLENBQUM7SUFLM0IsQ0FBQztJQUVMLFlBQVk7SUFDWixlQUFlO1FBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDakMsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN4RCxJQUFJLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDOUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUM1RCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxrQkFBa0I7UUFDaEIsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDM0MsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDMUYsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUM7U0FDN0I7SUFDSCxDQUFDO0lBRUQsZ0JBQWdCO0lBQ2hCLFdBQVc7UUFDVCwyRkFBMkY7UUFDM0YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDakMsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO2dCQUN0QixJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDO2dCQUN6QixJQUFJLENBQUMsYUFBYSxHQUFHLFNBQVMsQ0FBQzthQUNoQztZQUNELElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtnQkFDcEIsSUFBSTtvQkFDRixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sRUFBRSxDQUFDO2lCQUM1QjtnQkFBQyxPQUFPLENBQUMsRUFBRTtvQkFDVixPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNsQjtnQkFDRCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQzthQUN6QjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs4R0EzRlUsd0JBQXdCO2tHQUF4Qix3QkFBd0IsaVBBSnpCLDJCQUEyQjs7MkZBSTFCLHdCQUF3QjtrQkFOcEMsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsb0JBQW9CO29CQUM5QixRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7c0hBTXVDLGFBQWE7c0JBQWxELFdBQVc7dUJBQUMsbUJBQW1CO2dCQUtuQixZQUFZO3NCQUF4QixLQUFLO2dCQVVPLGFBQWE7c0JBQXpCLEtBQUs7Z0JBVU8sSUFBSTtzQkFBaEIsS0FBSztnQkFhTyxVQUFVO3NCQUF0QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3Q2hlY2tlZCxcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSG9zdEJpbmRpbmcsXG4gIE5nWm9uZSxcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ1tzb2hvLWNpcmNsZXBhZ2VyXScsIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5cbmV4cG9ydCBjbGFzcyBTb2hvQ2lyY2xlcGFnZXJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBBZnRlclZpZXdDaGVja2VkLCBPbkRlc3Ryb3kge1xuICAvKiogT3B0aW9ucy4gKi9cbiAgcHJpdmF0ZSBzZXR0aW5nczogU29ob0NpcmNsZXBhZ2VyT3B0aW9ucyA9IHt9O1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuY2lyY2xlcGFnZXInKSBnZXQgaXNDaXJjbGVQYWdlcigpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKiBUaGUgbnVtYmVyIG9mIHNsaWRlcyB0byBzaG93IGluIG9uZSB2aWV3IC8gcGFuZS4gKi9cbiAgQElucHV0KCkgc2V0IHNsaWRlc1RvU2hvdyh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5zZXR0aW5ncy5zbGlkZXNUb1Nob3cgPSB2YWx1ZTtcblxuICAgIGlmICh0aGlzLmNpcmNsZXBhZ2VyKSB7XG4gICAgICB0aGlzLmNpcmNsZXBhZ2VyLnNldHRpbmdzLnNsaWRlc1RvU2hvdyA9IHZhbHVlO1xuICAgICAgLy8gdG9kbzogZG9lcyB0aGlzIHNldHRpbmcgcmVxdWlyZSBhbiB1cGRhdGVkIGNhbGwgdG8gY2lyY2xlcGFnZXIuanM/XG4gICAgfVxuICB9XG5cbiAgLyoqIEZpcnN0IHNob3dpbmcgc2xpZGUvZ3JvdXAsIGFuIDAtYmFzZWQgaW50ZWdlciAqL1xuICBASW5wdXQoKSBzZXQgc3RhcnRpbmdTbGlkZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgdGhpcy5zZXR0aW5ncy5zdGFydGluZ1NsaWRlID0gdmFsdWU7XG5cbiAgICBpZiAodGhpcy5jaXJjbGVwYWdlcikge1xuICAgICAgdGhpcy5jaXJjbGVwYWdlci5zZXR0aW5ncy5zdGFydGluZ1NsaWRlID0gdmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZVJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKiogU2V0dGluZyBsb29wOiB0cnVlIHdpbGwgbG9vcCBiYWNrIGFmdGVyIG5leHQvcHJldmlvdXMgcmVhY2hlZCB0byBlbmQgKi9cbiAgQElucHV0KCkgc2V0IGxvb3AodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLnNldHRpbmdzLmxvb3AgPSB2YWx1ZTtcblxuICAgIGlmICh0aGlzLmNpcmNsZXBhZ2VyKSB7XG4gICAgICB0aGlzLmNpcmNsZXBhZ2VyLnNldHRpbmdzLmxvb3AgPSB2YWx1ZTtcbiAgICAgIHRoaXMudXBkYXRlUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgalF1ZXJ5RWxlbWVudD86IEpRdWVyeTtcbiAgcHJpdmF0ZSBjaXJjbGVwYWdlcj86IFNvaG9DaXJjbGVwYWdlciB8IG51bGw7XG5cbiAgLyoqIEFkZCBleHRyYSBhdHRyaWJ1dGVzIGxpa2UgaWQncyB0byB0aGUgY29tcG9uZW50ICoqL1xuICBASW5wdXQoKSBzZXQgYXR0cmlidXRlcyhhdHRyaWJ1dGVzOiBBcnJheTxPYmplY3Q+IHwgT2JqZWN0KSB7XG4gICAgdGhpcy5zZXR0aW5ncy5hdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcblxuICAgIGlmICh0aGlzLmNpcmNsZXBhZ2VyKSB7XG4gICAgICB0aGlzLmNpcmNsZXBhZ2VyLnNldHRpbmdzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICAgICAgdGhpcy51cGRhdGVSZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVSZXF1aXJlZCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICApIHsgfVxuXG4gIC8qKiBTZXR1cCAqL1xuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50ID0galF1ZXJ5KHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50KTtcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5jaXJjbGVwYWdlcih0aGlzLnNldHRpbmdzKTtcbiAgICAgIHRoaXMuY2lyY2xlcGFnZXIgPSB0aGlzLmpRdWVyeUVsZW1lbnQuZGF0YSgnY2lyY2xlcGFnZXInKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpIHtcbiAgICBpZiAodGhpcy5jaXJjbGVwYWdlciAmJiB0aGlzLnVwZGF0ZVJlcXVpcmVkKSB7XG4gICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB0aGlzLmNpcmNsZXBhZ2VyPy51cGRhdGVkKHRoaXMuY2lyY2xlcGFnZXIuc2V0dGluZ3MpKTtcbiAgICAgIHRoaXMudXBkYXRlUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvKiogVGVhciBEb3duICovXG4gIG5nT25EZXN0cm95KCkge1xuICAgIC8vIGNhbGwgb3V0c2lkZSB0aGUgYW5ndWxhciB6b25lIHNvIGNoYW5nZSBkZXRlY3Rpb24gaXNuJ3QgdHJpZ2dlcmVkIGJ5IHRoZSBzb2hvIGNvbXBvbmVudC5cbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICBpZiAodGhpcy5qUXVlcnlFbGVtZW50KSB7XG4gICAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5vZmYoKTtcbiAgICAgICAgdGhpcy5qUXVlcnlFbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuY2lyY2xlcGFnZXIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0aGlzLmNpcmNsZXBhZ2VyLmRlc3Ryb3koKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaXJjbGVwYWdlciA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==
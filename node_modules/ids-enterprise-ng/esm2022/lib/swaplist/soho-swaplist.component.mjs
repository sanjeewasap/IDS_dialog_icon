import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Optional, Output, ContentChild } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./soho-swaplist.service";
import * as i3 from "../button/soho-button.component";
/**************************************************************
 * SWAP LIST CARD
 **************************************************************/
export class SohoSwapListCardComponent {
    get isSwapList() {
        return true;
    }
    set type(value) {
        this.cardtype = value;
    }
    set showSearchable(value) {
        this.showsearchable = value;
    }
    get showSearchable() {
        return this.showsearchable;
    }
    set searchTitle(value) {
        this.searchtitle = value;
    }
    get searchTitle() {
        return this.searchtitle;
    }
    /**
     * Return the class to use for the card.
     */
    get cardClass() {
        return `card${this.cardtype ? ` ${this.cardtype}` : ''}`;
    }
    /**
     * Return the card type to use for the card.
     */
    get cardType() {
        return this.cardtype || '';
    }
    /**
     * Title of the card, e.g. 'Available'.
     */
    set title(value) {
        this.cardtitle = value;
    }
    get title() {
        return this.cardtitle;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSwapListCardComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoSwapListCardComponent, selector: "soho-swaplist-card", inputs: { type: "type", showSearchable: "showSearchable", searchTitle: "searchTitle", title: "title" }, host: { properties: { "class.swaplist": "this.isSwapList" } }, ngImport: i0, template: `
      <div [class]="cardClass">
        <div class="card-header">
          <h2 class="card-title">{{title}}</h2>
          <div class="buttons">
            <ng-content></ng-content>
          </div>
        </div>
        <div class="card-content">
          <div class="listview-search" *ngIf="showSearchable">
            <label class="audible" for="searchfield-{{cardType}}">{{searchTitle}}</label>
            <input class="searchfield" placeholder="{{searchTitle}}" name="searchfield-{{cardType}}"
             id="searchfield-{{cardType}}" data-init="false">
          </div>
          <div class="listview"></div>
        </div>
      </div>`, isInline: true, dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSwapListCardComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'soho-swaplist-card',
                    template: `
      <div [class]="cardClass">
        <div class="card-header">
          <h2 class="card-title">{{title}}</h2>
          <div class="buttons">
            <ng-content></ng-content>
          </div>
        </div>
        <div class="card-content">
          <div class="listview-search" *ngIf="showSearchable">
            <label class="audible" for="searchfield-{{cardType}}">{{searchTitle}}</label>
            <input class="searchfield" placeholder="{{searchTitle}}" name="searchfield-{{cardType}}"
             id="searchfield-{{cardType}}" data-init="false">
          </div>
          <div class="listview"></div>
        </div>
      </div>`,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], propDecorators: { isSwapList: [{
                type: HostBinding,
                args: ['class.swaplist']
            }], type: [{
                type: Input
            }], showSearchable: [{
                type: Input
            }], searchTitle: [{
                type: Input
            }], title: [{
                type: Input
            }] } });
/**************************************************************
 * SWAP LIST
 **************************************************************/
export class SohoSwapListComponent {
    /** Used to provide unnamed controls with a unique id. */
    static { this.counter = 0; }
    /**
     * Assign the id for the control
     * (maps to the name to use on a label's 'for' attribute)
     */
    get id() {
        return this.name;
    }
    /** Adds the 'swaplist' class required by the SoHoXi control. */
    get isSwapList() {
        return true;
    }
    /** Adds the 'one-third' class required when full access is set. */
    get isOneThird() {
        return this.showFullAccessCard;
    }
    /**
     * Set searchable option for SohoSwapList.
     *
     * @param value option.
     */
    set searchable(value) {
        this._options.searchable = value;
    }
    get searchable() {
        return this._options.searchable;
    }
    /** Add extra attributes like id's to the component **/
    set attributes(value) {
        this._options.attributes = value;
    }
    get attributes() {
        return this._options.attributes;
    }
    /**
     * Set available card items.
     * @param value item data.
     */
    set availableItems(value) {
        this._options.available = value;
        if (this.swaplist) {
            this.swaplist.settings.available = value;
            this.swaplist.updated();
        }
    }
    get availableItems() {
        return this.ConvertToModel(this.swaplist.getAvailable());
    }
    /** Disable dragging (all true by default) **/
    set draggable(value) {
        this._options.draggable = value;
        if (this.swaplist) {
            this.swaplist.settings.draggable = value;
            this.swaplist.updated();
        }
    }
    get draggable() {
        return this.draggable;
    }
    /** Keep items in the section when moving (all false by default) **/
    set keepInList(value) {
        this._options.keepInList = value;
        if (this.swaplist) {
            this.swaplist.settings.keepInList = value;
            this.swaplist.updated();
        }
    }
    get keepInList() {
        return this.keepInList;
    }
    /**
     * Set selected card items.
     *
     * @param value item data.
     */
    set selectedItems(value) {
        this._options.selected = value;
        if (this.swaplist) {
            this.swaplist.settings.selected = value;
            this.swaplist.updated();
        }
    }
    /**
     * Return the dataset currently selected card items.
     *
     * @return an array of SohoSwapListItem.
     */
    get selectedItems() {
        return this.ConvertToModel(this.swaplist.getSelected());
    }
    /**
     * Set additional card items.
     *
     * @param value item data.
     */
    set additionalItems(value) {
        this._options.additional = value;
        if (this.swaplist) {
            this.swaplist.settings.additional = value;
            this.swaplist.updated();
        }
    }
    /**
     * Return the dataset currently additional card items.
     *
     * @return an array of SohoSwapListItem.
     */
    get additionalItems() {
        return this.ConvertToModel(this.swaplist.getAdditional());
    }
    /**
     * Set flag to display third card full access card or not.
     *
     * @param value the value to show full access card.
     */
    set showFullAccessCard(value) {
        this._showFullAccessCard = value === null || value === 'true';
    }
    /**
     * Return the value whether full access card displayed.
     *
     * @return boolean value.
     */
    get showFullAccessCard() {
        return this._showFullAccessCard;
    }
    // ------------------------------------------------------------------------
    // Constructor
    // ------------------------------------------------------------------------
    constructor(element, ngZone, swaplistService) {
        this.element = element;
        this.ngZone = ngZone;
        this.swaplistService = swaplistService;
        /** Block of options, use the accessors to modify. */
        this._options = {};
        /** Flag controlling the display of the full access (additional) items. */
        this._showFullAccessCard = false;
        /** The component used to represent the available items. */
        this._availableCard = undefined;
        /** The component used to represent the selected items. */
        this._selectedCard = undefined;
        /** The component used to represent the full access (additional) items. */
        this._additionalCard = undefined;
        // ------------------------------------------------------------------------
        // @Inputs
        // ------------------------------------------------------------------------
        /** Name for the swaplist control. Necessary for ngModel to function. */
        this.name = `soho-swaplist-${SohoSwapListComponent.counter++}`;
        /** Default title for available items card. */
        this.availableCardTitle = Soho.Locale.translate('Available');
        /** Default title for selected items card. */
        this.selectedCardTitle = Soho.Locale.translate('Selected');
        /** Default title for additional items card. */
        this.fullAccessCardTitle = Soho.Locale.translate('AdditionalItems');
        /** Default search title for available items card. */
        this.availableCardSearchTitle = Soho.Locale.translate('SearchAvailable');
        /** Default search title for selected items card. */
        this.selectedCardSearchTitle = Soho.Locale.translate('SearchSelected');
        /** Default search title for additional items card. */
        this.fullAccessCardSearchTitle = Soho.Locale.translate('SearchAdditionalItems');
        /** Default button text for select. */
        this.btnMoveToSelect = Soho.Locale.translate('Select');
        /** Default button text for move to left. */
        this.btnMoveToLeft = Soho.Locale.translate('MoveToLeft');
        /** Default button text for  move to right. */
        this.btnMoveToRight = Soho.Locale.translate('MoveToRight');
        /**
         * Called before swap item/s.
         */
        // eslint-disable-next-line @angular-eslint/no-output-rename
        this.beforeSwapEvent = new EventEmitter();
        /**
         * Called when the swap list updates in some way.
         */
        // eslint-disable-next-line @angular-eslint/no-output-rename
        this.updateEvent = new EventEmitter();
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.find('.searchfield').searchfield({ clearable: true });
            this.jQueryElement.swaplist(this._options);
            this.jQueryElement
                .on('beforeswap', (event, moved) => this.onBeforeSwap(event, moved))
                .on('swapupdate', (event, moved) => this.onSwapUpdate(event, moved));
            this.swaplist = this.jQueryElement.data('swaplist');
            if (this.swaplistService) {
                this.swaplistService.getData().subscribe((d) => {
                    this.updateDataset(d);
                });
            }
        });
    }
    /**
     * Destroys any resources created by the control.
     */
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.swaplist) {
                this.swaplist.destroy();
                this.swaplist = null;
                this.jQueryElement?.off();
            }
        });
    }
    /**
     * In case the list data is being bound asynchronously or modified on the fly,
     * you will need to trigger updated on so it updates the list(s).
     */
    updated() {
        if (this.swaplist) {
            this.ngZone.runOutsideAngular(() => this.swaplist?.updated());
        }
    }
    /**
     * Updates the dataset used by the swaplist, dynamically refesing the
     * control's view.
     *
     * @param dataset the dataset to assign.
     */
    updateDataset(dataset) {
        this._options.available = dataset.available;
        this._options.selected = dataset.selected;
        this._options.additional = dataset.additional;
        if (this.swaplist) {
            this.swaplist.updateDataset(this._options);
        }
    }
    /**
     * Converts the list of items into a list of swaplist items.
     *
     * @param items data to convert to item model.
     *
     * @todo remove any
     */
    ConvertToModel(items) {
        const results = [];
        for (const item of items) {
            results.push({ id: item.id, value: item.value, text: item.text });
        }
        return results;
    }
    onBeforeSwap(event, moved) {
        event.moved = moved;
        this.beforeSwapEvent.emit(event);
    }
    onSwapUpdate(event, moved) {
        event.moved = moved;
        this.updateEvent.emit(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSwapListComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i2.SohoSwapListService, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoSwapListComponent, selector: "soho-swaplist", inputs: { name: "name", availableCardTitle: "availableCardTitle", selectedCardTitle: "selectedCardTitle", fullAccessCardTitle: "fullAccessCardTitle", availableCardSearchTitle: "availableCardSearchTitle", selectedCardSearchTitle: "selectedCardSearchTitle", fullAccessCardSearchTitle: "fullAccessCardSearchTitle", btnMoveToSelect: "btnMoveToSelect", btnMoveToLeft: "btnMoveToLeft", btnMoveToRight: "btnMoveToRight", searchable: "searchable", attributes: "attributes", availableItems: "availableItems", draggable: "draggable", keepInList: "keepInList", selectedItems: "selectedItems", additionalItems: "additionalItems", showFullAccessCard: "showFullAccessCard" }, outputs: { beforeSwapEvent: "beforeswap", updateEvent: "updated" }, host: { properties: { "id": "this.id", "class.swaplist": "this.isSwapList", "class.one-third": "this.isOneThird" } }, queries: [{ propertyName: "_availableCard", first: true, predicate: ["available"], descendants: true, static: true }, { propertyName: "_selectedCard", first: true, predicate: ["selected"], descendants: true, static: true }, { propertyName: "_additionalCard", first: true, predicate: ["additional"], descendants: true, static: true }], ngImport: i0, template: "<div>\n  <soho-swaplist-card type=\"available\" title=\"{{availableCardTitle}}\" searchTitle=\"{{availableCardSearchTitle}}\" showSearchable=\"{{searchable}}\">\n    <button soho-button=\"btn\" icon=\"right-arrow\" moveToSelected=\"true\" title=\"{{btnMoveToSelect}}\"></button>\n  </soho-swaplist-card>\n  <soho-swaplist-card type=\"selected\" title=\"{{selectedCardTitle}}\" searchTitle=\"{{selectedCardSearchTitle}}\" showSearchable=\"{{searchable}}\">\n    <button soho-button=\"btn\" icon=\"left-arrow\" moveToLeft=\"true\" title=\"{{btnMoveToLeft}}\"></button>\n    <button *ngIf=\"showFullAccessCard\" soho-button=\"btn\" icon=\"right-arrow\" moveToRight=\"true\" title=\"{{btnMoveToRight}}\">\n    </button>\n  </soho-swaplist-card>\n  <soho-swaplist-card *ngIf=\"showFullAccessCard\" type=\"full-access\" title=\"{{fullAccessCardTitle}}\" searchTitle=\"{{fullAccessCardSearchTitle}}\" showSearchable=\"{{searchable}}\">\n     <button soho-button=\"btn\" icon=\"left-arrow\" moveToSelected=\"true\" title=\"{{btnMoveToLeft}}\"></button>\n  </soho-swaplist-card>\n</div>\n", dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.SohoButtonComponent, selector: "button[soho-button]", inputs: ["soho-button", "buttonOptions", "toggleOnIcon", "toggleOffIcon", "replaceText", "hideMenuArrow", "hitbox", "notificationBadge", "notificationBadgeOptions", "extraIconClass", "isToggle", "isTogglePressed", "icon", "iconAlign", "isSubmit", "ripple", "state", "toggle", "expandableExpander", "moveToLeft", "moveToRight", "moveToSelected"] }, { kind: "component", type: SohoSwapListCardComponent, selector: "soho-swaplist-card", inputs: ["type", "showSearchable", "searchTitle", "title"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSwapListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'soho-swaplist', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div>\n  <soho-swaplist-card type=\"available\" title=\"{{availableCardTitle}}\" searchTitle=\"{{availableCardSearchTitle}}\" showSearchable=\"{{searchable}}\">\n    <button soho-button=\"btn\" icon=\"right-arrow\" moveToSelected=\"true\" title=\"{{btnMoveToSelect}}\"></button>\n  </soho-swaplist-card>\n  <soho-swaplist-card type=\"selected\" title=\"{{selectedCardTitle}}\" searchTitle=\"{{selectedCardSearchTitle}}\" showSearchable=\"{{searchable}}\">\n    <button soho-button=\"btn\" icon=\"left-arrow\" moveToLeft=\"true\" title=\"{{btnMoveToLeft}}\"></button>\n    <button *ngIf=\"showFullAccessCard\" soho-button=\"btn\" icon=\"right-arrow\" moveToRight=\"true\" title=\"{{btnMoveToRight}}\">\n    </button>\n  </soho-swaplist-card>\n  <soho-swaplist-card *ngIf=\"showFullAccessCard\" type=\"full-access\" title=\"{{fullAccessCardTitle}}\" searchTitle=\"{{fullAccessCardSearchTitle}}\" showSearchable=\"{{searchable}}\">\n     <button soho-button=\"btn\" icon=\"left-arrow\" moveToSelected=\"true\" title=\"{{btnMoveToLeft}}\"></button>\n  </soho-swaplist-card>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i2.SohoSwapListService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { id: [{
                type: HostBinding,
                args: ['id']
            }], isSwapList: [{
                type: HostBinding,
                args: ['class.swaplist']
            }], isOneThird: [{
                type: HostBinding,
                args: ['class.one-third']
            }], _availableCard: [{
                type: ContentChild,
                args: ['available', { static: true }]
            }], _selectedCard: [{
                type: ContentChild,
                args: ['selected', { static: true }]
            }], _additionalCard: [{
                type: ContentChild,
                args: ['additional', { static: true }]
            }], name: [{
                type: Input
            }], availableCardTitle: [{
                type: Input
            }], selectedCardTitle: [{
                type: Input
            }], fullAccessCardTitle: [{
                type: Input
            }], availableCardSearchTitle: [{
                type: Input
            }], selectedCardSearchTitle: [{
                type: Input
            }], fullAccessCardSearchTitle: [{
                type: Input
            }], btnMoveToSelect: [{
                type: Input
            }], btnMoveToLeft: [{
                type: Input
            }], btnMoveToRight: [{
                type: Input
            }], searchable: [{
                type: Input
            }], attributes: [{
                type: Input
            }], availableItems: [{
                type: Input
            }], draggable: [{
                type: Input
            }], keepInList: [{
                type: Input
            }], selectedItems: [{
                type: Input
            }], additionalItems: [{
                type: Input
            }], showFullAccessCard: [{
                type: Input
            }], beforeSwapEvent: [{
                type: Output,
                args: ['beforeswap']
            }], updateEvent: [{
                type: Output,
                args: ['updated']
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { Component, ChangeDetectionStrategy, Output, HostBinding, Input } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoProgressComponent {
    /*
     *  @param value
     */
    set progressValue(value) {
        this.value = value;
        if (this.progress) {
            this.progress.update(this.value);
        }
    }
    get progressValue() {
        return this.value;
    }
    get dispType() {
        return 'block';
    }
    constructor(element) {
        this.element = element;
        // Set the progress-bar class.
        this.progressClass = true;
        this.options = {};
    }
    ngAfterViewInit() {
        this.jQueryElement = jQuery(this.element.nativeElement.children[0]);
        this.jQueryElement.progress(this.options);
        /**
         * Bind to jQueryElement's events
         */
        this.jQueryElement.on('change', (event) => this.change?.emit(event));
        this.progress = this.jQueryElement.data('progress');
    }
    ngOnDestroy() {
        if (this.progress) {
            this.progress.destroy();
            this.progress = null;
        }
    }
    update(value) {
        if (this.progress) {
            this.progress.update(value);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoProgressComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoProgressComponent, selector: "soho-progress", inputs: { progressValue: "progressValue" }, outputs: { change: "change" }, host: { properties: { "class.progress": "this.progressClass", "style.display": "this.dispType" } }, ngImport: i0, template: `<div [class.progress-bar]="true" [attr.data-value]="value"></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoProgressComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'soho-progress',
                    template: `<div [class.progress-bar]="true" [attr.data-value]="value"></div>`,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { progressValue: [{
                type: Input
            }], change: [{
                type: Output
            }], progressClass: [{
                type: HostBinding,
                args: ['class.progress']
            }], dispType: [{
                type: HostBinding,
                args: ['style.display']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby1wcm9ncmVzcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZHMtZW50ZXJwcmlzZS1uZy9zcmMvbGliL3Byb2dyZXNzL3NvaG8tcHJvZ3Jlc3MuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxTQUFTLEVBQ1QsdUJBQXVCLEVBRXZCLE1BQU0sRUFFTixXQUFXLEVBQ1gsS0FBSyxFQUVOLE1BQU0sZUFBZSxDQUFDOztBQU92QixNQUFNLE9BQU8scUJBQXFCO0lBRWhDOztPQUVHO0lBQ0gsSUFBYSxhQUFhLENBQUMsS0FBeUI7UUFDbEQsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7UUFDbkIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFFLElBQUksQ0FBQyxLQUFhLENBQUMsQ0FBQztTQUMzQztJQUNILENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDZixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7SUFDcEIsQ0FBQztJQWVELElBQWtDLFFBQVE7UUFDeEMsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQU1ELFlBQW9CLE9BQW1CO1FBQW5CLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFYdkMsOEJBQThCO1FBQ0Msa0JBQWEsR0FBRyxJQUFJLENBQUM7UUFNNUMsWUFBTyxHQUF3QixFQUFFLENBQUM7SUFJQyxDQUFDO0lBRTVDLGVBQWU7UUFDYixJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNwRSxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFMUM7O1dBRUc7UUFDSCxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxLQUF3QixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3hGLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLEVBQUUsQ0FBQztZQUN4QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztTQUN0QjtJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsS0FBYTtRQUNsQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDN0I7SUFDSCxDQUFDOzhHQTdEVSxxQkFBcUI7a0dBQXJCLHFCQUFxQixvT0FIdEIsbUVBQW1FOzsyRkFHbEUscUJBQXFCO2tCQUxqQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO29CQUN6QixRQUFRLEVBQUUsbUVBQW1FO29CQUM3RSxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDaEQ7aUdBTWMsYUFBYTtzQkFBekIsS0FBSztnQkFtQkksTUFBTTtzQkFBZixNQUFNO2dCQUd3QixhQUFhO3NCQUEzQyxXQUFXO3VCQUFDLGdCQUFnQjtnQkFFSyxRQUFRO3NCQUF6QyxXQUFXO3VCQUFDLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDb21wb25lbnQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBFbGVtZW50UmVmLFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBPbkRlc3Ryb3lcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3NvaG8tcHJvZ3Jlc3MnLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIHRlbXBsYXRlOiBgPGRpdiBbY2xhc3MucHJvZ3Jlc3MtYmFyXT1cInRydWVcIiBbYXR0ci5kYXRhLXZhbHVlXT1cInZhbHVlXCI+PC9kaXY+YCxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgU29ob1Byb2dyZXNzQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgcHVibGljIHZhbHVlPzogbnVtYmVyO1xuICAvKlxuICAgKiAgQHBhcmFtIHZhbHVlXG4gICAqL1xuICBASW5wdXQoKSBzZXQgcHJvZ3Jlc3NWYWx1ZSh2YWx1ZTogbnVtYmVyIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLnByb2dyZXNzKSB7XG4gICAgICB0aGlzLnByb2dyZXNzLnVwZGF0ZSgodGhpcy52YWx1ZSBhcyBhbnkpKTtcbiAgICB9XG4gIH1cblxuICBnZXQgcHJvZ3Jlc3NWYWx1ZSgpOiBudW1iZXIgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLnZhbHVlO1xuICB9XG5cbiAgLypcbiAgICogIENhbGxpbmcgd2hlbiB0aGUgcHJvZ3Jlc3MtYmFyIHZhbHVlIGNoYW5nZXNcbiAgICpcbiAgICogRmlyZWQgd2hlbiB0aGUgZHJvcGRvd24gbGlzdCBpcyBvcGVuZWQuXG4gICAqXG4gICAqIEB0b2RvIHJlcGxhY2Ugb3ZlcnJpZGUgb2YgbmF0aXZlIGF0dHJpYnV0ZVxuICAgKi9cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9uby1vdXRwdXQtcmVuYW1lLCBAYW5ndWxhci1lc2xpbnQvbm8tb3V0cHV0LW5hdGl2ZVxuICBAT3V0cHV0KCkgY2hhbmdlPzogRXZlbnRFbWl0dGVyPE9iamVjdD47XG5cbiAgLy8gU2V0IHRoZSBwcm9ncmVzcy1iYXIgY2xhc3MuXG4gIEBIb3N0QmluZGluZygnY2xhc3MucHJvZ3Jlc3MnKSBwcm9ncmVzc0NsYXNzID0gdHJ1ZTtcblxuICBASG9zdEJpbmRpbmcoJ3N0eWxlLmRpc3BsYXknKSBnZXQgZGlzcFR5cGUoKSB7XG4gICAgcmV0dXJuICdibG9jayc7XG4gIH1cblxuICBwcml2YXRlIG9wdGlvbnM6IFNvaG9Qcm9ncmVzc09wdGlvbnMgPSB7fTtcbiAgcHJpdmF0ZSBqUXVlcnlFbGVtZW50PzogSlF1ZXJ5O1xuICBwcml2YXRlIHByb2dyZXNzPzogU29ob1Byb2dyZXNzU3RhdGljIHwgbnVsbDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHsgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLmpRdWVyeUVsZW1lbnQgPSBqUXVlcnkodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2hpbGRyZW5bMF0pO1xuICAgIHRoaXMualF1ZXJ5RWxlbWVudC5wcm9ncmVzcyh0aGlzLm9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogQmluZCB0byBqUXVlcnlFbGVtZW50J3MgZXZlbnRzXG4gICAgICovXG4gICAgdGhpcy5qUXVlcnlFbGVtZW50Lm9uKCdjaGFuZ2UnLCAoZXZlbnQ6IFNvaG9Qcm9ncmVzc0V2ZW50KSA9PiB0aGlzLmNoYW5nZT8uZW1pdChldmVudCkpO1xuICAgIHRoaXMucHJvZ3Jlc3MgPSB0aGlzLmpRdWVyeUVsZW1lbnQuZGF0YSgncHJvZ3Jlc3MnKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLnByb2dyZXNzKSB7XG4gICAgICB0aGlzLnByb2dyZXNzLmRlc3Ryb3koKTtcbiAgICAgIHRoaXMucHJvZ3Jlc3MgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMucHJvZ3Jlc3MpIHtcbiAgICAgIHRoaXMucHJvZ3Jlc3MudXBkYXRlKHZhbHVlKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
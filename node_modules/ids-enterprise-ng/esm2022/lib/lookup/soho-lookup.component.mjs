import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, HostListener, Input, Output } from '@angular/core';
import { BaseControlValueAccessor, provideControlValueAccessor } from '../utils';
import * as i0 from "@angular/core";
export class SohoLookupComponent extends BaseControlValueAccessor {
    /**
     * Changes the dataset being used
     */
    set dataset(data) {
        if (!data) {
            return;
        }
        this._dataset = data;
        if (data && this.jQueryElement && this.lookup?.settings?.options) {
            this.lookup.settings.options.dataset = data;
            this.markForUpdate();
        }
    }
    get dataset() {
        return this._dataset;
    }
    /** Custom click event; can be used with a modal dialog and custom list component */
    set click(value) {
        this.settings.click = value;
        if (this.lookup) {
            this.lookup.settings.click = this.settings.click;
            this.markForUpdate();
        }
    }
    get click() {
        return this.settings.click;
    }
    /** If a click method is defined, this flexible object can be passed in. */
    set clickArguments(value) {
        this.settings.clickArguments = value;
        if (this.lookup) {
            this.lookup.settings.clickArguments = this.settings.clickArguments;
            this.markForUpdate();
        }
    }
    get clickArguments() {
        return this.settings.clickArguments;
    }
    /** Custom clear event; can be used with a modal dialog and custom list component */
    set clear(value) {
        this.settings.clear = value;
        if (this.lookup) {
            this.lookup.settings.clear = this.settings.clear;
            this.markForUpdate();
        }
    }
    get clear() {
        return this.settings.clear;
    }
    /** If a clear method is defined, this flexible object can be passed in. */
    set clearArguments(value) {
        this.settings.clearArguments = value;
        if (this.lookup) {
            this.lookup.settings.clearArguments = this.settings.clearArguments;
            this.markForUpdate();
        }
    }
    get clearArguments() {
        return this.settings.clearArguments;
    }
    /** Field to return from the array or can be a function. */
    set field(value) {
        this.settings.field = value;
        if (this.lookup) {
            this.lookup.settings.field = this.settings.field;
            this.markForUpdate();
        }
    }
    get field() {
        return this.settings.field;
    }
    /** Dialog title or takes the label + Lookup. */
    set title(value) {
        this.settings.title = value;
        if (this.lookup) {
            this.lookup.settings.title = this.settings.title;
            this.markForUpdate();
        }
    }
    get title() {
        return this.settings.title;
    }
    /** Swap out the lookup id for any other icon in the icon set by name */
    set icon(value) {
        this.settings.icon = value;
        if (this.lookup) {
            this.lookup.settings.icon = this.settings.icon;
            this.markForUpdate();
        }
    }
    get icon() {
        return this.settings.icon;
    }
    /** Pass dialog buttons or Cancel / Apply. */
    set buttons(value) {
        this.settings.buttons = value;
        if (this.lookup) {
            this.lookup.settings.buttons = this.settings.buttons;
            this.markForUpdate();
        }
    }
    get buttons() {
        return this.settings.buttons;
    }
    /** Options to pass to the underlying data grid. */
    set options(value) {
        this.settings.options = value;
        if (this.lookup) {
            this.lookup.settings.options = this.settings.options;
            this.markForUpdate();
        }
    }
    get options() {
        return this.settings.options;
    }
    /**
     * Used to manage data prior to showing the lookup.
     *
     * For example:
     *  - When the button is clicked, show a loading dialog and make the request for
     *    lookup grid data.
     *  - Upon receiving grid data, set lookup.settings.options for the columns and dataset.
     *  - Then call grid() to build the grid and complete the lookup call.
     */
    set beforeShow(value) {
        this.settings.beforeShow = value;
        if (this.lookup) {
            this.lookup.settings.beforeShow = this.settings.beforeShow;
            this.markForUpdate();
        }
    }
    get beforeShow() {
        return this.settings.beforeShow;
    }
    /** Custom modal content. */
    set modalContent(value) {
        this.settings.modalContent = value;
        if (this.lookup) {
            this.lookup.settings.modalContent = this.settings.modalContent;
            this.markForUpdate();
        }
    }
    get modalContent() {
        return this.settings.modalContent;
    }
    /** Can the user type random text into the field. */
    set editable(value) {
        this.settings.editable = value;
        if (this.lookup) {
            this.lookup.settings.editable = this.settings.editable;
            this.markForUpdate();
        }
    }
    get editable() {
        return this.settings.editable;
    }
    /** If set to false the dialog wont apply the value on clicking a value. */
    set autoApply(value) {
        this.settings.autoApply = value;
        if (this.lookup) {
            this.lookup.settings.autoApply = this.settings.autoApply;
            this.markForUpdate();
        }
    }
    get autoApply() {
        return this.settings.autoApply;
    }
    /** Function used to match the search term to the data. */
    set match(value) {
        this.settings.match = value;
        if (this.lookup) {
            this.lookup.settings.match = this.settings.match;
            this.markForUpdate();
        }
    }
    get match() {
        return this.settings.match;
    }
    /** A function that fires to let you validate form items on open and select. */
    set validator(value) {
        this.settings.validator = value;
        if (this.lookup) {
            this.lookup.settings.validator = this.settings.validator;
            this.markForUpdate();
        }
    }
    get validator() {
        return this.settings.validator;
    }
    /** Set the width of the input to the width of the selection */
    set autoWidth(value) {
        this.settings.autoWidth = value;
        if (this.lookup) {
            this.lookup.settings.autoWidth = this.settings.autoWidth;
            this.markForUpdate();
        }
    }
    get autoWidth() {
        return this.settings.autoWidth;
    }
    /** The character  used to separate data strings */
    set delimiter(value) {
        this.settings.delimiter = value;
        if (this.lookup) {
            this.lookup.settings.delimiter = this.settings.delimiter;
            this.markForUpdate();
        }
    }
    get delimiter() {
        return this.settings.delimiter;
    }
    /** Apply a minimum width to the lookup*/
    set minWidth(value) {
        this.settings.minWidth = value;
        if (this.lookup) {
            this.lookup.settings.minWidth = this.settings.minWidth;
            this.markForUpdate();
        }
    }
    get minWidth() {
        return this.settings.minWidth;
    }
    /**  Add an ability to clear the lookup field with an x */
    set clearable(value) {
        this.settings.clearable = value;
        if (this.lookup) {
            this.lookup.settings.clearable = this.settings.clearable;
            this.markForUpdate();
        }
    }
    get clearable() {
        return this.settings.clearable;
    }
    /**  Add extra attributes like id's to the component */
    set attributes(attributes) {
        this.settings.attributes = attributes;
        if (this.lookup) {
            this.lookup.settings.attributes = this.settings.attributes;
            this.markForUpdate();
        }
    }
    get attributes() {
        return this.settings.attributes;
    }
    /**  Set the input to tabbable */
    set tabbable(tabbable) {
        this.settings.tabbable = tabbable;
        if (this.lookup) {
            this.lookup.settings.tabbable = this.settings.tabbable;
            this.markForUpdate();
        }
    }
    get tabbable() {
        return this.settings.tabbable;
    }
    /**  Set the input to allow duplicates */
    set allowDuplicates(allowDuplicates) {
        this.settings.allowDuplicates = allowDuplicates;
        if (this.lookup) {
            this.lookup.settings.allowDuplicates = this.settings.allowDuplicates;
            this.markForUpdate();
        }
    }
    get allowDuplicates() {
        return this.settings.allowDuplicates;
    }
    /**
     * Bind attributes to the host input element
     */
    get isLookup() {
        return true;
    }
    /**
     * Accessor for _disabled.
     */
    get isDisabled() {
        return this._disabled;
    }
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set isDisabled(disabled) {
        if (this._disabled !== disabled) {
            this._disabled = disabled;
            // Ensure the widget is updated.
            if (this._disabled) {
                this.ngZone.runOutsideAngular(() => this.lookup?.disable());
            }
            else {
                this.ngZone.runOutsideAngular(() => this.lookup?.enable());
            }
        }
    }
    /**
     * Add class binding.
     */
    get disabledClass() {
        return this._disabled;
    }
    /**
     * Constructor.
     *
     * @param element associated element
     * @param ngZone angular zone
     */
    constructor(element, ngZone) {
        super();
        this.element = element;
        this.ngZone = ngZone;
        /**
         * Available Soho Template control settings as Inputs
         * Should match the Soho properties for the component
         */
        this.asobject = false; // set to false for backwards compatibility
        this.multiselect = false;
        /**
         * Available Soho Template events as Output (EventEmitters passing the event)
         * Should match the Soho event names for the component
         */
        this.afteropen = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.start = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.complete = new EventEmitter();
        this.beforeopen = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.change = new EventEmitter();
        this.inputEvt = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.open = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.close = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.selected = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.afterpaging = new EventEmitter();
        /**
         * Is the lookup control disabled?
         */
        this._disabled = undefined;
        /**
         * Is the lookup control readonly?
         */
        this._readonly = undefined;
        this.settings = {};
    }
    onKeyUp(_event) {
        // This is required, otherwise the form binding does not see updates.
        this.internalValue = this.jQueryElement?.val();
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            const dataSet = this._dataset ? this._dataset : [];
            // The default options for the data grid, which will
            // be overriden by the options provided by the caller
            // on a field by field basis.
            const datagridConfig = {
                cellNavigation: false,
                columns: this.columns,
                dataset: dataSet,
                selectable: this.isMultiselect() ? 'multiple' : 'single',
                toolbar: Object.assign({
                    actions: true,
                    advancedFilter: false,
                    dateFilter: false,
                    fullWidth: true,
                    keywordFilter: true,
                    results: true,
                    rowHeight: true,
                    views: false,
                }, this.toolbar),
                source: this.source
            };
            this.settings.options = Object.assign(datagridConfig, this.options);
            this.jQueryElement.lookup(this.settings);
            // setup autocomplete
            if (this.autoCompleteSettings) {
                const acDataset = dataSet.map((data) => {
                    return this.autoCompleteSettings ? {
                        id: data[this.autoCompleteSettings.id],
                        value: data[this.autoCompleteSettings.value],
                        label: data[this.autoCompleteSettings.label]
                    } : data;
                });
                const acSettings = { source: acDataset };
                if (this.autoCompleteSettings.template) {
                    acSettings.template = this.autoCompleteSettings.template;
                }
                this.jQueryElement.autocomplete(acSettings);
                this.autocomplete = this.jQueryElement.data('autocomplete');
                this.jQueryElement
                    .on('selected.autocomplete', (...args) => this.onAutocompleteSelected(args))
                    .on('change.autocomplete', (_e, args) => this.onAutocompleteChange(args))
                    .on('beforeopen.autocomplete', (_e, args) => this.onAutocompleteBeforeOpen(args));
            }
            /**
             * Bind to jQueryElement's events
             */
            this.jQueryElement.on('afteropen', (...args) => this.modalOpened(args));
            this.jQueryElement.on('beforeopen', () => this.ngZone.run(() => this.beforeopen.emit(undefined)));
            this.jQueryElement.on('open', () => this.ngZone.run(() => this.open.emit(undefined)));
            this.jQueryElement.on('change.lookup', (_e, args) => this.onChange(args));
            this.jQueryElement.on('blur', (_e) => this.ngZone.run(() => this.touched()));
            this.jQueryElement.on('start', () => this.ngZone.run(() => this.start.emit(undefined)));
            this.jQueryElement.on('complete', () => this.ngZone.run(() => this.complete.emit(undefined)));
            this.jQueryElement.on('input', () => this.ngZone.run(() => this.inputEvt.emit(undefined)));
            this.jQueryElement.on('close', () => this.ngZone.run(() => this.close.emit(undefined)));
            this.jQueryElement.on('selected', (_e, selectedRows, op, rowData, lookup) => this.ngZone.run(() => this.selected.emit({ selectedRows, op, rowData, lookup })));
            this.jQueryElement.on('afterpaging', (_e, pagingInfo, lookup) => this.ngZone.run(() => this.afterpaging.emit({ pagingInfo, lookup })));
            this.lookup = this.jQueryElement.data('lookup');
            // Pick up the internal value from the form control.
            if (this.internalValue) {
                this.lookup?.element.val(this.internalValue);
            }
        });
    }
    /**
     * Update the selected rows
     */
    updateSelectedRows(rows) {
        if (this.lookup && Array.isArray(rows)) {
            this.ngZone.runOutsideAngular(() => (this.lookup.updateSelectedRows(rows)));
            this.markForUpdate();
        }
    }
    /**
     * Find the row and select it based on select value / function / field value
     */
    selectRowByValue(field, value) {
        if (this.lookup) {
            this.ngZone.runOutsideAngular(() => this.lookup?.selectRowByValue(field, value));
        }
    }
    /** Get the selected rows and return them to the UI **/
    insertRows() {
        if (this.lookup) {
            this.ngZone.runOutsideAngular(() => this.lookup?.insertRows());
        }
    }
    /** Returns the rows currently selected **/
    selectedRows() {
        return this.ngZone.runOutsideAngular(() => {
            return (this.lookup.selectedRows || []).slice();
        });
    }
    /** Enable the input. **/
    enable() {
        this._disabled = false;
        this._readonly = false;
        this.ngZone.runOutsideAngular(() => this.lookup?.enable());
        this.markForUpdate();
    }
    /** Disable the input. **/
    disable() {
        this._disabled = true;
        this.ngZone.runOutsideAngular(() => this.lookup?.disable());
        this.markForUpdate();
    }
    /** Make the input readonly. **/
    readonly() {
        this._readonly = true;
        this.ngZone.runOutsideAngular(() => this.lookup?.readonly());
        this.markForUpdate();
    }
    /**  Send in a new data set to display in the datagrid in the lookup. **/
    updateDataset(dataset, pagerInfo) {
        if (this.lookup) {
            this.ngZone.runOutsideAngular(() => this.lookup?.updateDataset(dataset, pagerInfo));
        }
    }
    /**
     * Call to notify the lookup about any dom/settings changes
     */
    updated(settings) {
        if (settings) {
            this.settings = Soho.utils.mergeSettings(this.element[0], settings, this.settings);
        }
        if (this.lookup) {
            this.ngZone.runOutsideAngular(() => this.lookup?.updated(this.settings));
        }
    }
    /**
     * Destroys the modal lookup.
     */
    destroy() {
        if (this.lookup) {
            this.ngZone.runOutsideAngular(() => this.lookup?.destroy());
        }
    }
    ngAfterViewChecked() {
        if (this.updateRequired) {
            this.updated();
            this.updateRequired = false;
        }
    }
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.lookup) {
                this.lookup.destroy();
                this.lookup = null;
            }
            if (this.autocomplete) {
                this.autocomplete.destroy();
                this.autocomplete = null;
            }
        });
    }
    isMultiselect() {
        return this.multiselect !== false || (this.options && this.options.selectable === 'multiple');
    }
    modalOpened(args) {
        this.ngZone.run(() => {
            this.modal = this.lookup?.modal;
            /**
             * Temporary fix for inability for grid to async call data and resize modal on returned
             * values (only necessary when the page size is large enough to make the datagrid larger
             * than the current modal content window height):
             * jira/browse/SOHO-4347
             */
            if (args[1] && args[2]) {
                const datagrid = args[1];
                const modal = args[2];
                if (datagrid.pagerAPI) {
                    datagrid.pagerAPI.element.on('afterpaging', () => {
                        modal.resize();
                    });
                }
            }
            this.afteropen.emit(args);
        });
    }
    /**
     * Handle the control being changed.
     */
    onChange(event) {
        this.ngZone.run(() => {
            this.parseValue(event);
            if (!event) {
                // prevent undefined exception when event is undefined.
                return;
            }
            // todo: why is this here, value is not defined anywhere, not sure where it's used so reluctant to remove it.
            event.values = this.internalValue;
            this.change.emit(event);
        });
    }
    onAutocompleteChange(event) {
        if (this.autoCompleteSettings && this.autoCompleteSettings.change) {
            this.autoCompleteSettings?.change(event);
        }
    }
    onAutocompleteSelected(event) {
        if (this.autoCompleteSettings && this.autoCompleteSettings.selected) {
            this.autoCompleteSettings?.selected(event);
        }
    }
    onAutocompleteBeforeOpen(event) {
        if (this.autoCompleteSettings && this.autoCompleteSettings.beforeopen) {
            this.autoCompleteSettings?.beforeopen(event);
        }
    }
    setDisabledState(isDisabled) {
        // Update the jQuery widget with the requested disabled state.
        this.isDisabled = isDisabled;
    }
    /**
     * Needed to extract this function from the 'insertRows' function within the
     * Soho Lookup control object.
     * TODO: Expose this in the Sohoxi library @tim @ed.coyle
     *
     * @todo raise SOHO jira issue
     */
    processValue(value) {
        if (!value || !this.lookup) {
            return '';
        }
        let val = '';
        let toProcess = value;
        if (!Array.isArray(toProcess)) {
            toProcess = [toProcess];
        }
        // mimics functionality in sohoxi lookup insertRows()
        for (let i = 0; i < toProcess.length; i++) {
            let current = '';
            if (typeof toProcess[i] === 'object') {
                if (typeof this.settings.field === 'function') {
                    current = this.settings.field(toProcess[i], this.lookup.element, this.lookup.grid);
                }
                else {
                    current = toProcess[i][this.settings.field];
                }
            }
            else {
                current = toProcess[i];
            }
            val += (i !== 0 ? ',' : '') + current;
        }
        return val;
    }
    /**
     * Set lookup value to allow the lookup element to be updated correctly.
     * Used when the click property is set on the sohoxi control.
     *
     * @param event - selected row
     * TODO: Expose this in the Sohoxi library @tim @ed.coyle
     *
     * @todo raise SOHO jira issue
     */
    setValue(event) {
        if (this.lookup) {
            this.parseValue(event);
            // mimics functionality in sohoxi lookup insertRows()
            this.lookup.element.val(this.internalValue).trigger('change', [event]);
            this.lookup.element.trigger('focus');
        }
    }
    /**
     * Override writeValue to allow the lookup
     * element to be updated correctly.
     *
     * @param value - the new value
     */
    writeValue(value) {
        super.writeValue(value);
        if (this.lookup) {
            // The processing is required to ensure we use the correct format
            // in the control.
            this.lookup.element.val(this.processValue(value));
        }
    }
    // private methods
    /**
     * Evaluate the event param and parse the value
     */
    parseValue(event) {
        if (!event) {
            // sometimes the event is not available
            this.internalValue = this.lookup?.element.val();
            return;
        }
        if (event.length && event.length === 1 && !this.isMultiselect()) {
            this.internalValue = this.asobject ? event[0].data : this.processValue(event[0].data);
        }
        else {
            this.internalValue = event.map(val => this.asobject ? val.data : this.processValue(val.data));
        }
    }
    markForUpdate() {
        this.updateRequired = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoLookupComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoLookupComponent, selector: "input[soho-lookup]", inputs: { asobject: "asobject", columns: "columns", dataset: "dataset", click: "click", clickArguments: "clickArguments", clear: "clear", clearArguments: "clearArguments", field: "field", title: "title", icon: "icon", buttons: "buttons", options: "options", beforeShow: "beforeShow", modalContent: "modalContent", editable: "editable", autoApply: "autoApply", match: "match", validator: "validator", autoWidth: "autoWidth", delimiter: "delimiter", minWidth: "minWidth", clearable: "clearable", attributes: "attributes", tabbable: "tabbable", allowDuplicates: "allowDuplicates", multiselect: "multiselect", name: "name", source: "source", toolbar: "toolbar", autoCompleteSettings: "autoCompleteSettings", isDisabled: ["disabled", "isDisabled"], _readonly: ["readonly", "_readonly"] }, outputs: { afteropen: "afteropen", start: "start", complete: "complete", beforeopen: "beforeopen", change: "change", inputEvt: "inputEvt", open: "open", close: "close", selected: "selected", afterpaging: "afterpaging" }, host: { listeners: { "keyup": "onKeyUp($event)" }, properties: { "class.lookup": "this.isLookup", "disabled": "this._disabled", "class.is-disabled": "this.disabledClass", "readonly": "this._readonly" } }, providers: [provideControlValueAccessor(SohoLookupComponent)], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoLookupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[soho-lookup]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [provideControlValueAccessor(SohoLookupComponent)]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { asobject: [{
                type: Input
            }], columns: [{
                type: Input
            }], dataset: [{
                type: Input
            }], click: [{
                type: Input
            }], clickArguments: [{
                type: Input
            }], clear: [{
                type: Input
            }], clearArguments: [{
                type: Input
            }], field: [{
                type: Input
            }], title: [{
                type: Input
            }], icon: [{
                type: Input
            }], buttons: [{
                type: Input
            }], options: [{
                type: Input
            }], beforeShow: [{
                type: Input
            }], modalContent: [{
                type: Input
            }], editable: [{
                type: Input
            }], autoApply: [{
                type: Input
            }], match: [{
                type: Input
            }], validator: [{
                type: Input
            }], autoWidth: [{
                type: Input
            }], delimiter: [{
                type: Input
            }], minWidth: [{
                type: Input
            }], clearable: [{
                type: Input
            }], attributes: [{
                type: Input
            }], tabbable: [{
                type: Input
            }], allowDuplicates: [{
                type: Input
            }], multiselect: [{
                type: Input
            }], name: [{
                type: Input
            }], source: [{
                type: Input
            }], toolbar: [{
                type: Input
            }], autoCompleteSettings: [{
                type: Input
            }], afteropen: [{
                type: Output
            }], start: [{
                type: Output
            }], complete: [{
                type: Output
            }], beforeopen: [{
                type: Output
            }], change: [{
                type: Output
            }], inputEvt: [{
                type: Output
            }], open: [{
                type: Output
            }], close: [{
                type: Output
            }], selected: [{
                type: Output
            }], afterpaging: [{
                type: Output
            }], isLookup: [{
                type: HostBinding,
                args: ['class.lookup']
            }], _disabled: [{
                type: HostBinding,
                args: ['disabled']
            }], isDisabled: [{
                type: Input,
                args: ["disabled"]
            }], disabledClass: [{
                type: HostBinding,
                args: ['class.is-disabled']
            }], _readonly: [{
                type: HostBinding,
                args: ['readonly']
            }, {
                type: Input,
                args: ['readonly']
            }], onKeyUp: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { Component, Input, HostBinding, Output, EventEmitter, ChangeDetectionStrategy } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoTagListComponent {
    get isTagList() {
        return true;
    }
    /**
     * Creates an instance of SohoTagListComponent.
     *
     * @param element wrapped element.
     * @param ngZone angular zone.
     *
     */
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        /**
         * Fired before a tag item is removed.
         */
        this.beforeRemove = new EventEmitter();
        /**
         * Fired after a tag item is removed.
         */
        this.afterRemove = new EventEmitter();
    }
    ngAfterViewInit() {
        // Call outside the angular zone so change detection
        // isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            // Add event handlers for the outer tag list.
            this.jQueryElement
                .on('aftertagremove', (e, tag) => this.onAfterTagRemove(e, tag));
            this.jQueryElement
                .on('beforetagremove', (e, tag) => this.onBeforeTagRemove(e, tag));
        });
    }
    onAfterTagRemove(e, tag) {
        this.ngZone.run(() => {
            e.tag = tag;
            this.afterRemove.next(e);
        });
    }
    onBeforeTagRemove(e, tag) {
        this.ngZone.run(() => {
            e.tag = tag;
            this.beforeRemove.next(e);
        });
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                // remove the event listeners on this element.
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTagListComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoTagListComponent, selector: "[soho-tag-list]", outputs: { beforeRemove: "beforeRemove", afterRemove: "afterRemove" }, host: { properties: { "class.tag-list": "this.isTagList" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTagListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-tag-list]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isTagList: [{
                type: HostBinding,
                args: ['class.tag-list']
            }], beforeRemove: [{
                type: Output
            }], afterRemove: [{
                type: Output
            }] } });
/**
 * Angular Support for elements styled as SohoXi tags.  The styling can be
 * controlled using the additional tag type, specified on element.
 *
 * They can be mixed in with other elements like lists, grids and search fields.
 *
 *<pre>
 * {@code
 * <span soho-tag='error'>#Error</span>
 * }
 *</pre>
 *
 * @export
 *
 *
 *
 */
export class SohoTagComponent {
    // -------------------------------------------
    // Supported tag types.
    // -------------------------------------------
    static { this.ALERT = 'alert'; }
    static { this.GOOD = 'good'; }
    static { this.SECONDARY = 'secondary'; }
    static { this.ERROR = 'error'; }
    static { this.INFO = 'info'; }
    static { this.DEFAULT = undefined; }
    get isTag() {
        return true;
    }
    get alert() {
        return this.tagType === SohoTagComponent.ALERT;
    }
    get good() {
        return this.tagType === SohoTagComponent.GOOD;
    }
    get secondary() {
        return this.tagType === SohoTagComponent.SECONDARY;
    }
    get error() {
        return this.tagType === SohoTagComponent.ERROR;
    }
    get info() {
        return this.tagType === SohoTagComponent.INFO;
    }
    /**
     * Allow override of element name, to match the component name.
     */
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set sohoTag(type) {
        if (!type) {
            type = SohoTagComponent.DEFAULT;
        }
        this.tagType = type;
        this.options.style = type;
        this.updated();
    }
    /**
     * Creates an instance of SohoTagComponent.
     */
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        // -------------------------------------------
        // Component Output
        // -------------------------------------------
        /**
         * Fired before a tag item is removed.
         */
        this.beforeTagRemove = new EventEmitter();
        /**
         * Fired after a tag item is removed.
         *
         * @todo remove usage of native element
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.click = new EventEmitter();
        /** Options. */
        this.options = {};
    }
    ngAfterViewInit() {
        // call outside the angular zone so change detection
        // isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            // assign element to local variable
            this.jQueryElement = jQuery(this.element.nativeElement);
            // initialise the tag control
            this.jQueryElement.tag(this.options);
            // extract the api
            this.tag = this.jQueryElement.data('tag');
            // @todo - add event binding control so we don't bind if not required.
            // this.jQueryElement
            const tagElem = this.tag?.element;
            const parent = tagElem ? jQuery(tagElem).parent() : null;
            this.jQueryElement
                .on('click', (e) => this.onClick(e));
            if (parent) {
                parent.on('beforetagremove', (e, tag) => this.onBeforeTagRemove(e, tag));
            }
        });
    }
    onBeforeTagRemove(event, tag) {
        this.ngZone.run(() => {
            event.tag = tag;
            this.beforeTagRemove.next(event);
        });
    }
    onClick(event) {
        this.ngZone.run(() => this.click.next(event));
    }
    /**
     * The settings have been updated.
     */
    updated() {
        if (this.tag) {
            this.ngZone.runOutsideAngular(() => this.tag?.updated(this.options));
        }
    }
    /**
     * Destroys the component.
     *
     *
     */
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                // remove the event listeners on this element.
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            // Destroy any widget resources.
            if (this.tag) {
                this.tag.destroy();
                this.tag = null;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTagComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoTagComponent, selector: "[soho-tag]", inputs: { isClickable: "isClickable", isDismissible: "isDismissible", sohoTag: ["soho-tag", "sohoTag"] }, outputs: { beforeTagRemove: "beforeTagRemove", click: "click" }, host: { properties: { "class.tag": "this.isTag", "class.alert": "this.alert", "class.good": "this.good", "class.secondary": "this.secondary", "class.error": "this.error", "class.info": "this.info", "class.is-linkable": "this.isClickable", "class.is-dismissible": "this.isDismissible" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTagComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-tag]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { beforeTagRemove: [{
                type: Output
            }], click: [{
                type: Output
            }], isTag: [{
                type: HostBinding,
                args: ['class.tag']
            }], alert: [{
                type: HostBinding,
                args: ['class.alert']
            }], good: [{
                type: HostBinding,
                args: ['class.good']
            }], secondary: [{
                type: HostBinding,
                args: ['class.secondary']
            }], error: [{
                type: HostBinding,
                args: ['class.error']
            }], info: [{
                type: HostBinding,
                args: ['class.info']
            }], isClickable: [{
                type: HostBinding,
                args: ['class.is-linkable']
            }, {
                type: Input
            }], isDismissible: [{
                type: HostBinding,
                args: ['class.is-dismissible']
            }, {
                type: Input
            }], sohoTag: [{
                type: Input,
                args: ['soho-tag']
            }] } });
//# sourceMappingURL=data:application/json;base64,
// tslint:disable-next-line:no-unused-variable
import { ChangeDetectionStrategy, Component, ContentChildren, EventEmitter, Input, Output, forwardRef, } from '@angular/core';
import { SohoAccordionHeaderComponent } from './soho-accordion-header.component';
import { SohoAccordionPaneComponent } from './soho-accordion-pane.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * Angular Wrapper for the Soho Accordion control.
 *
 * This component searches for an element, annotated with the `soho-accordion` attribute,
 * and then matches this component to it.
 * <br>
 * The characteristics of the component can be controlled using the set of inputs.
 *
 * The Accordion is a grouped set of collapsible panels used to navigate sections of
 * related content. Each panel consists of two levels: the top level identifies the
 * category or section header, and the second level provides the associated options.
 */
export class SohoAccordionComponent {
    // -------------------------------------------
    // Component Inputs
    // -------------------------------------------
    /**
     * If an Accordion pane is open, and that pane contains sub-headers, only one
     * of the pane's sub-headers can be open at a time.
     *
     * Defaults to true.
     *
     * If set to true, allows only one pane of the accordion to be open at a time.
     */
    set allowOnePane(allowOnePane) {
        this.options.allowOnePane = typeof (allowOnePane) === 'boolean' && allowOnePane;
        if (this.accordion) {
            this.accordion.settings.allowOnePane = this.options.allowOnePane;
            this.markForUpdate();
        }
    }
    get allowOnePane() {
        return this.options.allowOnePane;
    }
    /**
     * Displays a "Chevron" icon that sits off to the right-most side of a top-level accordion header.
     * Used in place of an Expander (+/-) if enabled.
     *
     *
     */
    set displayChevron(displayChevron) {
        this.options.displayChevron = typeof (displayChevron) === 'boolean' && displayChevron;
        if (this.accordion) {
            this.accordion.settings.displayChevron = this.options.displayChevron;
            this.markForUpdate();
        }
    }
    get displayChevron() {
        return this.options.displayChevron;
    }
    /**
     * Changes the iconography used in accordion header expander buttons.
     */
    set expanderDisplay(expanderDisplay) {
        this.options.expanderDisplay = expanderDisplay;
        if (this.accordion) {
            this.accordion.settings.expanderDisplay = this.options.expanderDisplay;
            this.markForUpdate();
        }
    }
    get expanderDisplay() {
        return this.options.expanderDisplay;
    }
    /**
     * Can be set to false if routing is externally handled, otherwise
     * links are handled normally.
     */
    set rerouteOnLinkClick(rerouteOnLinkClick) {
        this.options.rerouteOnLinkClick = typeof (rerouteOnLinkClick) === 'boolean' && rerouteOnLinkClick;
        if (this.accordion) {
            this.accordion.settings.rerouteOnLinkClick = this.options.rerouteOnLinkClick;
            this.markForUpdate();
        }
    }
    get rerouteOnLinkClick() {
        return this.options.rerouteOnLinkClick;
    }
    /**
     * Add a alert badge to the accordion header (used for App menu)
     */
    set notificationBadge(notificationBadge) {
        this.options.notificationBadge = typeof (notificationBadge) === 'boolean' && notificationBadge;
        if (this.accordion) {
            this.accordion.settings.notificationBadge = this.options.notificationBadge;
            this.markForUpdate();
        }
    }
    get notificationBadge() {
        return this.options.notificationBadge;
    }
    /**
     * A callback function that when implemented provided a call back for "ajax loading" of tab contents on open.
     */
    set source(source) {
        this.options.source = source;
        if (this.accordion) {
            this.accordion.settings.source = this.options.source;
            this.markForUpdate();
        }
    }
    get source() {
        return this.options.source;
    }
    /**
     * Display accordion with panels
     */
    set hasPanels(hasPanels) {
        this.options.hasPanels = hasPanels;
        if (this.accordion) {
            this.accordion.settings.hasPanels = this.options.hasPanels;
            this.markForUpdate();
        }
    }
    get hasPanels() {
        return this.options.hasPanels;
    }
    /**
     * Set the color scheme to inverse
     */
    set inverse(inverse) {
        this.options.inverse = inverse;
        if (this.accordion) {
            this.accordion.settings.inverse = this.options.inverse;
            this.markForUpdate();
        }
    }
    get inverse() {
        return this.options.inverse;
    }
    /**
     * Set the color scheme to alternate
     */
    set alternate(bool) {
        this.options.alternate = bool;
        if (this.accordion) {
            this.accordion.settings.alternate = this.options.alternate;
            this.markForUpdate();
        }
    }
    get alternate() {
        return this.options.alternate;
    }
    /**
     * Enables tooltips for longer text that is handled with ellipsis
     */
    set enableTooltips(enableTooltips) {
        this.options.enableTooltips = enableTooltips;
        if (this.accordion) {
            this.accordion.settings.enableTooltips = this.options.enableTooltips;
            this.markForUpdate();
        }
    }
    get enableTooltips() {
        return this.options.enableTooltips;
    }
    /**
     * Constructor.
     *
     * @param elementRef - the element matching the component's selector.
     * @param ngZone - zone access.
     */
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        // -------------------------------------------
        // Options Block
        // -------------------------------------------
        this.options = {};
        // -------------------------------------------
        // Component Output
        // -------------------------------------------
        /* eslint-disable @angular-eslint/no-output-rename */
        this.beforeexpandEvent = new EventEmitter();
        this.beforecollapseEvent = new EventEmitter();
        this.beforeselectEvent = new EventEmitter();
        this.selectedEvent = new EventEmitter();
        this.followlinkEvent = new EventEmitter();
        this.expandEvent = new EventEmitter();
        this.afterexpandEvent = new EventEmitter();
        this.collapseEvent = new EventEmitter();
        this.aftercollapseEvent = new EventEmitter();
    }
    // -------------------------------------------
    // Public API
    // -------------------------------------------
    /**
     * Makes provided accordion headers appear "selected"
     */
    select(header) {
        if (this.accordion) {
            this.ngZone.runOutsideAngular(() => {
                return this.accordion.select(typeof header === 'string' ? header : header['jQueryElement']);
            });
        }
    }
    /**
     * Makes provided accordion headers appear "deselected"
     */
    deselect(header) {
        if (this.accordion) {
            this.ngZone.runOutsideAngular(() => {
                return this.accordion.deselect(typeof header === 'string' ? header : header['jQueryElement']);
            });
        }
    }
    /**
     * Makes all accordion headers appear "deselected"
     */
    deselectAll() {
        if (this.accordion) {
            this.ngZone.runOutsideAngular(() => {
                return this.accordion.deselectAll();
            });
        }
    }
    /**
     * Get's the nth header from the accordion.
     *
     * @todo - how best to access the headers?
     *
     * @param index - the index of the accordion header.
     * @return the header at the given index.
     */
    getHeader(index) {
        if (!this.headers) {
            return undefined;
        }
        return this.headers.toArray()[index];
    }
    /**
     * Expand the given Panel on the Accordion.
     *
     * @param header &nbsp;-&nbsp; the header component
     */
    expand(header) {
        if (this.accordion) {
            this.ngZone.runOutsideAngular(() => {
                return this.accordion.expand(typeof header === 'string' ? header : header['jQueryElement']);
            });
        }
    }
    /**
     * Collapse the given Panel on the Accordion.
     *
     * @param header &nbsp;-&nbsp; the jquery header element
     */
    collapse(header) {
        if (this.accordion) {
            this.ngZone.runOutsideAngular(() => {
                return this.accordion.collapse(typeof header === 'string' ? header : header['jQueryElement']);
            });
        }
    }
    /**
     * Expands all accordion headers, if possible.
     */
    expandAll() {
        if (this.accordion) {
            this.ngZone.runOutsideAngular(() => this.accordion.expandAll());
        }
    }
    /**
     * Collapses all the expanded panels.
     *
     *
     */
    collapseAll() {
        if (this.accordion) {
            this.ngZone.runOutsideAngular(() => this.accordion.collapseAll());
        }
    }
    /**
     * Disables the control.
     */
    disable() {
        if (this.accordion) {
            this.ngZone.runOutsideAngular(() => this.accordion.disable());
        }
    }
    /**
     * Enables the control.
     */
    enable() {
        if (this.accordion) {
            this.ngZone.runOutsideAngular(() => this.accordion.enable());
        }
    }
    /**
     * Returns true if the given header is currently disabled or the whole accordion
     * is disabled; otherwise false.
     *
     * @param header the accordion header panel to check.
     */
    isDisabled(header) {
        if (this.accordion) {
            return this.ngZone.runOutsideAngular(() => this.accordion.isDisabled(header.jQueryElement));
        }
        return false;
    }
    /**
     * Returns true if the given header is currently expanded; otherwise
     * false.
     *
     * @param header the accordion header panel to check.
     */
    isExpanded(header) {
        if (this.accordion) {
            return this.ngZone.runOutsideAngular(() => this.accordion.isExpanded(header.jQueryElement));
        }
        return false;
    }
    /**
     * Toggle the given Panel on the Accordion between expanded and collapsed
     *
     * @param header &nbsp;-&nbsp; the jquery header element
     */
    toggle(header) {
        if (this.accordion) {
            this.ngZone.runOutsideAngular(() => this.accordion.toggle(header.jQueryElement));
        }
    }
    /**
     * Call to notify the accordion about any dom changes
     */
    updated(headers, settings) {
        if (settings) {
            this.options = Soho.utils.mergeSettings(this.element[0], settings, this.options);
        }
        if (this.accordion) {
            this.ngZone.runOutsideAngular(() => this.accordion.updated(headers, this.options));
        }
    }
    // ------------------------------------------
    // Lifecycle Events
    // ------------------------------------------
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // Wrap the element in a jQuery selector.
            this.jQueryElement = jQuery(this.element.nativeElement.childNodes[0]);
            // Initialise the event handlers.
            this.jQueryElement
                .on('beforeexpand', (event, anchor) => this.ngZone.run(() => {
                event.anchor = anchor;
                this.beforeexpandEvent.emit(event);
            }))
                .on('beforecollapse', (event, anchor) => this.ngZone.run(() => {
                event.anchor = anchor;
                this.beforecollapseEvent.emit(event);
            }))
                .on('beforeselect', (event, anchor) => this.ngZone.run(() => {
                event.anchor = anchor;
                this.beforeselectEvent.emit(event);
            }))
                .on('selected', (event, anchor) => this.ngZone.run(() => {
                event.anchor = anchor;
                this.selectedEvent.emit(event);
            }))
                .on('followlink', (event, anchor) => this.ngZone.run(() => {
                event.anchor = anchor;
                this.followlinkEvent.emit(event);
            }))
                .on('expand', (event, anchor) => this.ngZone.run(() => {
                event.anchor = anchor;
                this.expandEvent.emit(event);
            }))
                .on('afterexpand', (event, anchor) => this.ngZone.run(() => {
                event.anchor = anchor;
                this.afterexpandEvent.emit(event);
            }))
                .on('collapse', (event, anchor) => this.ngZone.run(() => {
                event.anchor = anchor;
                this.collapseEvent.emit(event);
            }))
                .on('aftercollapse', (event, anchor) => this.ngZone.run(() => {
                event.anchor = anchor;
                this.aftercollapseEvent.emit(event);
            }));
            // Initialise the SohoXi Control
            this.jQueryElement.accordion(this.options);
            // Once the control is initialised, extract the control
            // plug-in from the element.  The element name is
            // defined by the plug-in, but in this case it is 'accordion'.
            this.accordion = this.jQueryElement.data('accordion');
        });
    }
    ngAfterViewChecked() {
        if (this.updateRequired) {
            this.updated();
            this.updateRequired = false;
        }
    }
    /**
     * Destructor.
     */
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.accordion) {
                this.accordion?.destroy();
            }
        });
    }
    markForUpdate() {
        this.updateRequired = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoAccordionComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoAccordionComponent, selector: "soho-accordion, [soho-accordion]", inputs: { allowOnePane: "allowOnePane", displayChevron: "displayChevron", expanderDisplay: "expanderDisplay", rerouteOnLinkClick: "rerouteOnLinkClick", notificationBadge: "notificationBadge", source: "source", hasPanels: "hasPanels", inverse: "inverse", alternate: "alternate", enableTooltips: "enableTooltips", hasSubheaderSeparators: "hasSubheaderSeparators", moduleNav: "moduleNav" }, outputs: { beforeexpandEvent: "beforeexpand", beforecollapseEvent: "beforecollapse", beforeselectEvent: "beforeselect", selectedEvent: "selected", followlinkEvent: "followlink", expandEvent: "expand", afterexpandEvent: "afterexpand", collapseEvent: "collapse", aftercollapseEvent: "aftercollapse" }, queries: [{ propertyName: "headers", predicate: i0.forwardRef(function () { return SohoAccordionHeaderComponent; }) }, { propertyName: "panes", predicate: i0.forwardRef(function () { return SohoAccordionPaneComponent; }) }], ngImport: i0, template: "<div [ngClass]=\"{\n  'accordion': true,\n  'panel': hasPanels,\n  'alternate': alternate,\n  'inverse': inverse,\n  'has-subheader-separators': hasSubheaderSeparators,\n  'module-nav-accordion': moduleNav }\">\n  <ng-content></ng-content>\n</div>\n", styles: [":host{display:contents}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoAccordionComponent, decorators: [{
            type: Component,
            args: [{ selector: 'soho-accordion, [soho-accordion]', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div [ngClass]=\"{\n  'accordion': true,\n  'panel': hasPanels,\n  'alternate': alternate,\n  'inverse': inverse,\n  'has-subheader-separators': hasSubheaderSeparators,\n  'module-nav-accordion': moduleNav }\">\n  <ng-content></ng-content>\n</div>\n", styles: [":host{display:contents}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { headers: [{
                type: ContentChildren,
                args: [forwardRef(() => SohoAccordionHeaderComponent)]
            }], panes: [{
                type: ContentChildren,
                args: [forwardRef(() => SohoAccordionPaneComponent)]
            }], beforeexpandEvent: [{
                type: Output,
                args: ['beforeexpand']
            }], beforecollapseEvent: [{
                type: Output,
                args: ['beforecollapse']
            }], beforeselectEvent: [{
                type: Output,
                args: ['beforeselect']
            }], selectedEvent: [{
                type: Output,
                args: ['selected']
            }], followlinkEvent: [{
                type: Output,
                args: ['followlink']
            }], expandEvent: [{
                type: Output,
                args: ['expand']
            }], afterexpandEvent: [{
                type: Output,
                args: ['afterexpand']
            }], collapseEvent: [{
                type: Output,
                args: ['collapse']
            }], aftercollapseEvent: [{
                type: Output,
                args: ['aftercollapse']
            }], allowOnePane: [{
                type: Input
            }], displayChevron: [{
                type: Input
            }], expanderDisplay: [{
                type: Input
            }], rerouteOnLinkClick: [{
                type: Input
            }], notificationBadge: [{
                type: Input
            }], source: [{
                type: Input
            }], hasPanels: [{
                type: Input
            }], inverse: [{
                type: Input
            }], alternate: [{
                type: Input
            }], enableTooltips: [{
                type: Input
            }], hasSubheaderSeparators: [{
                type: Input
            }], moduleNav: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
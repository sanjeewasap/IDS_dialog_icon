import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the Soho Application Menu Component.
 *
 * This component searches for a nav element with the attribute
 * 'soho-applcation-menu' in the parent's DOM tree, initialising those found with
 * the Soho application menu control.
 */
export class SohoApplicationMenuComponent {
    /** Sets Open on resize */
    set openOnLarge(openOnLarge) {
        this._openOnLarge = openOnLarge;
        if (this.applicationmenu) {
            this.applicationmenu.settings.openOnLarge = this._openOnLarge;
            this.updateRequired = true;
        }
    }
    get openOnLarge() {
        if (this.applicationmenu) {
            return this.applicationmenu.settings.openOnLarge;
        }
        // If called before the component has completed
        // initialisation, return the current value from the
        // options.
        return this._openOnLarge;
    }
    /** Allows the menu to become closed after an actionable header has been selected */
    set dismissOnClickMobile(dismissOnClickMobile) {
        this._dismissOnClickMobile = dismissOnClickMobile;
        if (this.applicationmenu) {
            this.applicationmenu.settings.dismissOnClickMobile = this._dismissOnClickMobile;
            this.updateRequired = true;
        }
    }
    get dismissOnClickMobile() {
        if (this.applicationmenu) {
            return this.applicationmenu.settings.dismissOnClickMobile;
        }
        // If called before the component has completed
        // initialisation, return the current value from the
        // options.
        return this._dismissOnClickMobile;
    }
    /** A list of jQuery elements which trigger the openning and closing application menu. */
    set triggers(triggers) {
        if (triggers) {
            let i = triggers.length;
            while (i--) {
                this._triggers.push(jQuery(triggers[i]));
            }
            if (this.applicationmenu) {
                this.applicationmenu.settings.triggers = this._triggers;
                this.updateRequired = true;
            }
        }
    }
    /**
     * Is the application menu resizable?
     */
    set resizable(resizable) {
        this._resizable = resizable;
        if (this.applicationmenu) {
            this.applicationmenu.settings.resizable = this._resizable;
        }
    }
    get resizable() {
        if (this.applicationmenu) {
            return this.applicationmenu.settings.resizable;
        }
        return this._resizable;
    }
    /**
     * Resizeable Save Position Settings
     */
    set savePosition(savePosition) {
        this._savePosition = savePosition;
        if (this.applicationmenu) {
            this.applicationmenu.settings.resizable = this._savePosition;
        }
    }
    get savePosition() {
        if (this.applicationmenu) {
            return this.applicationmenu.settings.savePosition;
        }
        return this._savePosition;
    }
    /**
     *
     * @param expandSwitcher
     * Menu switcher expand setting to provide callback
     */
    set onExpandSwitcher(expandSwitcher) {
        this._onExpandSwitcher = expandSwitcher;
        if (this.applicationmenu) {
            this.applicationmenu.settings.onExpandSwitcher = this._onExpandSwitcher;
            this.updateRequired = true;
        }
    }
    /**
     *
     * @param collapseSwitcher
     * Menu switcher collapse setting to provide callback
     */
    set onCollapseSwitcher(collapseSwitcher) {
        this._onCollapseSwitcher = collapseSwitcher;
        if (this.applicationmenu) {
            this.applicationmenu.settings.onCollapseSwitcher = this._onCollapseSwitcher;
            this.updateRequired = true;
        }
    }
    /**
     * This will let the Soho controls bind the application menu trigger naturally
     */
    get menuId() {
        return 'application-menu';
    }
    // Constructor.
    constructor(elementRef, ngZone) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        // -------------------------------------------
        // Host Bindings
        // -------------------------------------------
        this.appMenu = true;
        this.isPersonalizable = false;
        /** List of jQuery triggers. */
        this._triggers = [];
        /**
         * This event is fired when the visibility of the application menu is changed,
         * is it also called when the item is changed programmatically.
         *
         * @deprecated use accordionExpand and accordionCollapse events instead
         */
        this.visibility = new EventEmitter();
        /**
         * This event is fired when a menu accordion is expamded
         * The event include the anchor element.
         */
        this.accordionExpand = new EventEmitter();
        /**
         * This event is fired when a menu accordion is collapsed
         */
        this.accordionCollapse = new EventEmitter();
        /** This event is fired when the visibility of the application menu is changed */
        this.menuVisibility = new EventEmitter();
        /** This event is fired when the application menu is filtered. */
        this.filtered = new EventEmitter();
        /** flag the need to update the soho/ep control in ngAfterViewChecked. */
        this.updateRequired = false;
    }
    // -------------------------------------------
    // Public API
    // -------------------------------------------
    /**
     * Close the menu.
     */
    closeMenu() {
        this.ngZone.runOutsideAngular(() => this.applicationmenu?.closeMenu());
    }
    /** Open the menu. */
    openMenu(noFocus, userOpened, openedByClass) {
        this.ngZone.runOutsideAngular(() => this.applicationmenu?.openMenu(noFocus, userOpened, openedByClass));
    }
    /**
     * Returns true if the menu is open, otherwise false.
     */
    isOpen() {
        return this.ngZone.runOutsideAngular(() => this.applicationmenu?.isOpen());
    }
    /**
     * Notifies application menu that it has been updated
     */
    updated() {
        this.ngZone.runOutsideAngular(() => this.applicationmenu?.updated());
    }
    /**
     * Closes the panel area controlled by switcher
     */
    closeSwitcherPanel() {
        this.ngZone.runOutsideAngular(() => this.applicationmenu?.closeSwitcherPanel());
    }
    /*
     * Updates Accordion when menus have been lazily loaded
     * TODO: Ed or Tim, there doesn't appear to be a public function for something like this
     * from applicationmenu.js. This is my current work arround (Kris Holleneck)
     */
    updateLazy(applicationMenu, target) {
        const $applicationMenu = jQuery(applicationMenu.elementRef.nativeElement).data('applicationmenu');
        const $accordion = $applicationMenu.accordion;
        const accordion = $accordion.data('accordion');
        this.ngZone.runOutsideAngular(() => {
            setTimeout(() => {
                accordion.updated();
                const header = jQuery(target).closest('.accordion-header');
                accordion.expand(header);
            }, 1);
        });
    }
    /*
     * Toggle and select a specific header
     */
    toggleAndSelectHeader(applicationMenu, header) {
        const $applicationMenu = jQuery(applicationMenu.elementRef.nativeElement).data('applicationmenu');
        const $accordion = $applicationMenu.accordion;
        const accordion = $accordion.data('accordion');
        accordion.headers = $accordion.find('.accordion-header');
        this.ngZone.runOutsideAngular(() => {
            accordion.updated();
            accordion.toggle(jQuery(header));
            accordion.select(jQuery(header));
        });
    }
    // ------------------------------------------
    // Lifecycle Events
    // ------------------------------------------
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // Wrap for later.
            this.jQueryElement = jQuery(this.elementRef.nativeElement);
            const options = {
                breakpoint: this.breakpoint,
                dismissOnClickMobile: this._dismissOnClickMobile,
                openOnLarge: this._openOnLarge,
                triggers: this._triggers,
                filterable: this.filterable,
                resizable: this._resizable,
                savePosition: this._savePosition,
                onExpandSwitcher: this._onExpandSwitcher,
                onCollapseSwitcher: this._onCollapseSwitcher
            };
            // Initialise the SoHoXi control.
            this.jQueryElement.applicationmenu(options);
            // Once the control is initialised, extract the control
            // plug-in from the element.  The element name is
            // defined by the plug-in, but in this case is 'expandablearea'.
            this.applicationmenu = this.jQueryElement.data('applicationmenu');
            // Initialise any event handlers.
            this.jQueryElement
                .on('expand', (_e, results) => this.ngZone.run(() => this.accordionExpand.next(results)))
                .on('collapse', () => this.ngZone.run(() => this.accordionCollapse.next(true)))
                .on('expand', () => this.ngZone.run(() => this.visibility.next(true)))
                .on('collapse', () => this.ngZone.run(() => this.visibility.next(false)))
                .on('filtered', (_e, results) => this.ngZone.run(() => this.filtered.next(results)))
                .on('applicationmenuopen', () => this.ngZone.run(() => this.menuVisibility.next(true)))
                .on('applicationmenuclose', () => this.ngZone.run(() => this.menuVisibility.next(false)));
        });
    }
    ngAfterViewChecked() {
        if (this.applicationmenu && this.updateRequired) {
            this.ngZone.runOutsideAngular(() => this.applicationmenu?.updated());
            this.updateRequired = false;
        }
    }
    /**
     * Destructor.
     */
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.applicationmenu) {
                this.applicationmenu.destroy();
                this.applicationmenu = null;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoApplicationMenuComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoApplicationMenuComponent, selector: "nav[soho-application-menu]", inputs: { breakpoint: "breakpoint", openOnLarge: "openOnLarge", dismissOnClickMobile: "dismissOnClickMobile", triggers: "triggers", filterable: "filterable", resizable: "resizable", savePosition: "savePosition", onExpandSwitcher: "onExpandSwitcher", onCollapseSwitcher: "onCollapseSwitcher", isPersonalizable: "isPersonalizable" }, outputs: { visibility: "visibility", accordionExpand: "accordionExpand", accordionCollapse: "accordionCollapse", menuVisibility: "menuVisibility", filtered: "filtered" }, host: { properties: { "class.application-menu": "this.appMenu", "class.is-personalizable": "this.isPersonalizable", "id": "this.menuId" } }, ngImport: i0, template: "<ng-content></ng-content>\n", changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoApplicationMenuComponent, decorators: [{
            type: Component,
            args: [{ selector: 'nav[soho-application-menu]', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-content></ng-content>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { breakpoint: [{
                type: Input
            }], openOnLarge: [{
                type: Input
            }], dismissOnClickMobile: [{
                type: Input
            }], triggers: [{
                type: Input
            }], filterable: [{
                type: Input
            }], resizable: [{
                type: Input
            }], savePosition: [{
                type: Input
            }], onExpandSwitcher: [{
                type: Input
            }], onCollapseSwitcher: [{
                type: Input
            }], appMenu: [{
                type: HostBinding,
                args: ['class.application-menu']
            }], isPersonalizable: [{
                type: HostBinding,
                args: ['class.is-personalizable']
            }, {
                type: Input
            }], menuId: [{
                type: HostBinding,
                args: ['id']
            }], visibility: [{
                type: Output
            }], accordionExpand: [{
                type: Output
            }], accordionCollapse: [{
                type: Output
            }], menuVisibility: [{
                type: Output
            }], filtered: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
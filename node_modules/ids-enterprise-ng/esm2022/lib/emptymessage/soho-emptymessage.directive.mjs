import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the SohoEmptyMessage Control.
 */
export class SohoEmptyMessageDirective {
    /**
     * The `emptyMessage` option.
     */
    set emptyMessageOptions(options) {
        /** Check for undefined/null and reset to the default message */
        options = options || {
            title: (Soho.Locale ? Soho.Locale.translate('NoData') : 'No Data Available'),
            info: '',
            icon: 'icon-empty-no-data'
        };
        this._emptyMessageOptions = options;
        if (this.jQueryElement) {
            this.emptymessage.settings = options;
            this.markForCheck();
        }
    }
    get emptyMessageOptions() {
        if (this.emptymessage) {
            return this.emptymessage.settings;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._emptyMessageOptions;
    }
    set title(title) {
        this._emptyMessageOptions.title = title;
        if (this.emptymessage) {
            this.emptymessage.settings.title = title;
            this.markForCheck();
        }
    }
    get title() {
        if (this.emptymessage) {
            return this.emptymessage.settings.title;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._emptyMessageOptions.title;
    }
    set info(info) {
        this._emptyMessageOptions.info = info;
        if (this.emptymessage) {
            this.emptymessage.settings.info = info;
            this.markForCheck();
        }
    }
    get info() {
        if (this.emptymessage) {
            return this.emptymessage.settings.info;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._emptyMessageOptions.info;
    }
    set icon(icon) {
        this._emptyMessageOptions.icon = icon;
        if (this.emptymessage) {
            this.emptymessage.settings.icon = icon;
            this.markForCheck();
        }
    }
    get icon() {
        if (this.emptymessage) {
            return this.emptymessage.settings.icon;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._emptyMessageOptions.icon;
    }
    set height(height) {
        this._emptyMessageOptions.height = height;
        if (this.emptymessage) {
            this.emptymessage.settings.height = height;
            this.markForCheck();
        }
    }
    get height() {
        if (this.emptymessage) {
            return this.emptymessage.settings.height;
        }
        return this._emptyMessageOptions.height;
    }
    set button(button) {
        this._emptyMessageOptions.button = button;
        if (this.emptymessage) {
            this.emptymessage.settings.button = button;
            this.markForCheck();
        }
    }
    get button() {
        if (this.emptymessage) {
            return this.emptymessage.settings.button;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._emptyMessageOptions.button;
    }
    set color(color) {
        this._emptyMessageOptions.color = color;
        if (this.emptymessage) {
            this.emptymessage.settings.color = color;
            this.markForCheck();
        }
    }
    get color() {
        if (this.emptymessage) {
            return this.emptymessage.settings.color;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._emptyMessageOptions.color;
    }
    set attributes(attributes) {
        this._emptyMessageOptions.attributes = attributes;
        if (this.emptymessage) {
            this.emptymessage.settings.attributes = attributes;
            this.markForCheck();
        }
    }
    get attributes() {
        if (this.emptymessage) {
            return this.emptymessage.settings.attributes;
        }
        return this._emptyMessageOptions.attributes;
    }
    constructor(changeDetector, element) {
        this.changeDetector = changeDetector;
        this.element = element;
        this._emptyMessageOptions = {};
        this.updateComponent = false;
    }
    /**
     * After the control has been initialised and the view is ready,
     * construct the empty message sohoxi component.
     */
    ngAfterViewInit() {
        this.jQueryElement = jQuery(this.element.nativeElement);
        this.jQueryElement.emptymessage(this.emptyMessageOptions);
        this.emptymessage = this.jQueryElement.data('emptymessage');
    }
    /**
     *
     */
    ngAfterViewChecked() {
        if (this.updateComponent) {
            this.emptymessage?.updated();
            this.updateComponent = false;
        }
    }
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForCheck() {
        this.updateComponent = true;
        // ... make sure the change detector kicks in, otherwise if the inputs
        // were change programmatially the component may not be eligible for
        // updating.
        this.changeDetector.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoEmptyMessageDirective, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: SohoEmptyMessageDirective, selector: "[soho-emptymessage]", inputs: { emptyMessageOptions: "emptyMessageOptions", title: "title", info: "info", icon: "icon", height: "height", button: "button", color: "color", attributes: "attributes" }, exportAs: ["soho-emptymessage"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoEmptyMessageDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[soho-emptymessage]',
                    exportAs: 'soho-emptymessage'
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { emptyMessageOptions: [{
                type: Input
            }], title: [{
                type: Input
            }], info: [{
                type: Input
            }], icon: [{
                type: Input
            }], height: [{
                type: Input
            }], button: [{
                type: Input
            }], color: [{
                type: Input
            }], attributes: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
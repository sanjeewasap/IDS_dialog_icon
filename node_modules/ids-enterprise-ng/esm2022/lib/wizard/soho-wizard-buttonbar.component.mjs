import { Component, ChangeDetectionStrategy, HostBinding, Input, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./soho-wizard.component";
import * as i2 from "@angular/common";
import * as i3 from "../button/soho-button.component";
/**
 * Angular wrapper for the soho wizard buttonbar.
 *
 * Looks for a `div` annotated with `soho-wizard-buttonbar`, this
 * simply adds a component used to handle the button selection.
 */
export class SohoWizardButtonbarComponent {
    constructor(wizard, changeDetectorRef) {
        this.wizard = wizard;
        this.changeDetectorRef = changeDetectorRef;
        // @todo need types for these button, these seem to be different from SohoButtonOptions
        this.buttons = [
            {
                id: 'previous',
                text: Soho.Locale.translate('Previous'),
                click: () => this.wizard.previous(),
                disabled: () => !this.wizard.hasPrevious(),
                position: 'middle'
            },
            {
                id: 'next',
                text: Soho.Locale.translate('Next'),
                click: () => {
                    this.wizard.next();
                },
                disabled: () => !this.wizard.hasNext(),
                isDefault: true,
                position: 'middle'
            },
            {
                id: 'finish',
                text: 'Finish',
                click: () => {
                    this.wizard.finish();
                },
                disabled: () => this.wizard.hasFinished(),
                position: 'right'
            }
        ];
        this.isButtonBar = false;
        // Ensures all the button are redrawn, keeping track of their enabled state.
        this.wizard.afteractivated.subscribe(() => {
            this.changeDetectorRef.markForCheck();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoWizardButtonbarComponent, deps: [{ token: i1.SohoWizardComponent }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoWizardButtonbarComponent, selector: "div[soho-wizard-buttonbar]", inputs: { buttons: "buttons" }, host: { properties: { "class.buttonset": "this.isButtonBar" } }, ngImport: i0, template: `
    <hr class="fieldset-hr">
    <div class="buttonbar">
      <div class="left">
        <ng-container *ngFor="let button of buttons" >
          <button *ngIf="button.position==='left'"
            [soho-button]="button?.type" [icon]="button?.icon" [id]='button?.id' [disabled]="button?.disabled()"
            (click)='button?.click()'>{{button?.text}}</button>
        </ng-container>
      </div>
      <div class="middle">
      <ng-container *ngFor="let button of buttons" >
        <button *ngIf="button.position==='middle'"
          [soho-button]="button?.type" [icon]="button?.icon" [id]='button?.id' [disabled]="button?.disabled()"
          (click)='button?.click()'>{{button?.text}}</button>
      </ng-container>
      </div>
      <div class="right">
        <ng-container *ngFor="let button of buttons" >
          <button *ngIf="button.position==='right'"
            [soho-button]="button?.type" [icon]="button?.icon" [id]='button?.id' [disabled]="button?.disabled()"
            (click)='button?.click()'>{{button?.text}}</button>
        </ng-container>
        <ng-content></ng-content>
      </div>
    </div>
  `, isInline: true, styles: [":host{flex:0}\n", ".buttonbar{display:flex}\n", ".left{flex:1;display:flex;justify-content:flex-start;align-items:center}\n", ".middle{flex:1;display:flex;justify-content:center;align-items:center}\n", ".right{flex:1;display:flex;justify-content:flex-end;align-items:center}\n"], dependencies: [{ kind: "directive", type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i3.SohoButtonComponent, selector: "button[soho-button]", inputs: ["soho-button", "buttonOptions", "toggleOnIcon", "toggleOffIcon", "replaceText", "hideMenuArrow", "hitbox", "notificationBadge", "notificationBadgeOptions", "extraIconClass", "isToggle", "isTogglePressed", "icon", "iconAlign", "isSubmit", "ripple", "state", "toggle", "expandableExpander", "moveToLeft", "moveToRight", "moveToSelected"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoWizardButtonbarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'div[soho-wizard-buttonbar]', template: `
    <hr class="fieldset-hr">
    <div class="buttonbar">
      <div class="left">
        <ng-container *ngFor="let button of buttons" >
          <button *ngIf="button.position==='left'"
            [soho-button]="button?.type" [icon]="button?.icon" [id]='button?.id' [disabled]="button?.disabled()"
            (click)='button?.click()'>{{button?.text}}</button>
        </ng-container>
      </div>
      <div class="middle">
      <ng-container *ngFor="let button of buttons" >
        <button *ngIf="button.position==='middle'"
          [soho-button]="button?.type" [icon]="button?.icon" [id]='button?.id' [disabled]="button?.disabled()"
          (click)='button?.click()'>{{button?.text}}</button>
      </ng-container>
      </div>
      <div class="right">
        <ng-container *ngFor="let button of buttons" >
          <button *ngIf="button.position==='right'"
            [soho-button]="button?.type" [icon]="button?.icon" [id]='button?.id' [disabled]="button?.disabled()"
            (click)='button?.click()'>{{button?.text}}</button>
        </ng-container>
        <ng-content></ng-content>
      </div>
    </div>
  `, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{flex:0}\n", ".buttonbar{display:flex}\n", ".left{flex:1;display:flex;justify-content:flex-start;align-items:center}\n", ".middle{flex:1;display:flex;justify-content:center;align-items:center}\n", ".right{flex:1;display:flex;justify-content:flex-end;align-items:center}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.SohoWizardComponent }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { buttons: [{
                type: Input
            }], isButtonBar: [{
                type: HostBinding,
                args: ['class.buttonset']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby13aXphcmQtYnV0dG9uYmFyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lkcy1lbnRlcnByaXNlLW5nL3NyYy9saWIvd2l6YXJkL3NvaG8td2l6YXJkLWJ1dHRvbmJhci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFNBQVMsRUFFVCx1QkFBdUIsRUFDdkIsV0FBVyxFQUNYLEtBQUssR0FDTixNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFJdkI7Ozs7O0dBS0c7QUEwREgsTUFBTSxPQUFPLDRCQUE0QjtJQWtDdkMsWUFBb0IsTUFBMkIsRUFBVSxpQkFBb0M7UUFBekUsV0FBTSxHQUFOLE1BQU0sQ0FBcUI7UUFBVSxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO1FBaEM3Rix1RkFBdUY7UUFFaEYsWUFBTyxHQUFVO1lBQ3RCO2dCQUNFLEVBQUUsRUFBRSxVQUFVO2dCQUNkLElBQUksRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7Z0JBQ3ZDLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRTtnQkFDbkMsUUFBUSxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUU7Z0JBQzFDLFFBQVEsRUFBRSxRQUFRO2FBQ25CO1lBQ0Q7Z0JBQ0UsRUFBRSxFQUFFLE1BQU07Z0JBQ1YsSUFBSSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztnQkFDbkMsS0FBSyxFQUFFLEdBQUcsRUFBRTtvQkFDVixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNyQixDQUFDO2dCQUNELFFBQVEsRUFBRSxHQUFHLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFO2dCQUN0QyxTQUFTLEVBQUUsSUFBSTtnQkFDZixRQUFRLEVBQUUsUUFBUTthQUNuQjtZQUNEO2dCQUNFLEVBQUUsRUFBRSxRQUFRO2dCQUNaLElBQUksRUFBRSxRQUFRO2dCQUNkLEtBQUssRUFBRSxHQUFHLEVBQUU7b0JBQ1YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDdkIsQ0FBQztnQkFDRCxRQUFRLEVBQUUsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLEVBQUU7Z0JBQ3pDLFFBQVEsRUFBRSxPQUFPO2FBQ2xCO1NBQUMsQ0FBQztRQUUyQixnQkFBVyxHQUFHLEtBQUssQ0FBQztRQUdsRCw0RUFBNEU7UUFDNUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRTtZQUN4QyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDeEMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDOzhHQXZDVSw0QkFBNEI7a0dBQTVCLDRCQUE0QixtS0F2RDdCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTBCVDs7MkZBNkJVLDRCQUE0QjtrQkF6RHhDLFNBQVM7K0JBQ0UsNEJBQTRCLFlBQzVCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTBCVCxtQkEyQmdCLHVCQUF1QixDQUFDLE1BQU07MElBTXhDLE9BQU87c0JBRGIsS0FBSztnQkE2QjBCLFdBQVc7c0JBQTFDLFdBQVc7dUJBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFNvaG9XaXphcmRDb21wb25lbnQgfSBmcm9tICcuL3NvaG8td2l6YXJkLmNvbXBvbmVudCc7XG5cbi8qKlxuICogQW5ndWxhciB3cmFwcGVyIGZvciB0aGUgc29obyB3aXphcmQgYnV0dG9uYmFyLlxuICpcbiAqIExvb2tzIGZvciBhIGBkaXZgIGFubm90YXRlZCB3aXRoIGBzb2hvLXdpemFyZC1idXR0b25iYXJgLCB0aGlzXG4gKiBzaW1wbHkgYWRkcyBhIGNvbXBvbmVudCB1c2VkIHRvIGhhbmRsZSB0aGUgYnV0dG9uIHNlbGVjdGlvbi5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZGl2W3NvaG8td2l6YXJkLWJ1dHRvbmJhcl0nLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIHRlbXBsYXRlOiBgXG4gICAgPGhyIGNsYXNzPVwiZmllbGRzZXQtaHJcIj5cbiAgICA8ZGl2IGNsYXNzPVwiYnV0dG9uYmFyXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwibGVmdFwiPlxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBidXR0b24gb2YgYnV0dG9uc1wiID5cbiAgICAgICAgICA8YnV0dG9uICpuZ0lmPVwiYnV0dG9uLnBvc2l0aW9uPT09J2xlZnQnXCJcbiAgICAgICAgICAgIFtzb2hvLWJ1dHRvbl09XCJidXR0b24/LnR5cGVcIiBbaWNvbl09XCJidXR0b24/Lmljb25cIiBbaWRdPSdidXR0b24/LmlkJyBbZGlzYWJsZWRdPVwiYnV0dG9uPy5kaXNhYmxlZCgpXCJcbiAgICAgICAgICAgIChjbGljayk9J2J1dHRvbj8uY2xpY2soKSc+e3tidXR0b24/LnRleHR9fTwvYnV0dG9uPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGRpdiBjbGFzcz1cIm1pZGRsZVwiPlxuICAgICAgPG5nLWNvbnRhaW5lciAqbmdGb3I9XCJsZXQgYnV0dG9uIG9mIGJ1dHRvbnNcIiA+XG4gICAgICAgIDxidXR0b24gKm5nSWY9XCJidXR0b24ucG9zaXRpb249PT0nbWlkZGxlJ1wiXG4gICAgICAgICAgW3NvaG8tYnV0dG9uXT1cImJ1dHRvbj8udHlwZVwiIFtpY29uXT1cImJ1dHRvbj8uaWNvblwiIFtpZF09J2J1dHRvbj8uaWQnIFtkaXNhYmxlZF09XCJidXR0b24/LmRpc2FibGVkKClcIlxuICAgICAgICAgIChjbGljayk9J2J1dHRvbj8uY2xpY2soKSc+e3tidXR0b24/LnRleHR9fTwvYnV0dG9uPlxuICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxkaXYgY2xhc3M9XCJyaWdodFwiPlxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBidXR0b24gb2YgYnV0dG9uc1wiID5cbiAgICAgICAgICA8YnV0dG9uICpuZ0lmPVwiYnV0dG9uLnBvc2l0aW9uPT09J3JpZ2h0J1wiXG4gICAgICAgICAgICBbc29oby1idXR0b25dPVwiYnV0dG9uPy50eXBlXCIgW2ljb25dPVwiYnV0dG9uPy5pY29uXCIgW2lkXT0nYnV0dG9uPy5pZCcgW2Rpc2FibGVkXT1cImJ1dHRvbj8uZGlzYWJsZWQoKVwiXG4gICAgICAgICAgICAoY2xpY2spPSdidXR0b24/LmNsaWNrKCknPnt7YnV0dG9uPy50ZXh0fX08L2J1dHRvbj5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICBgLFxuICBzdHlsZXM6IFtcbiAgICBgOmhvc3Qge1xuICAgICAgZmxleDogMDtcbiAgICB9YCxcbiAgICBgLmJ1dHRvbmJhciB7XG4gICAgICBkaXNwbGF5OmZsZXg7XG4gICAgfWAsXG4gICAgYC5sZWZ0IHtcbiAgICAgIGZsZXg6IDE7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9YCxcbiAgICBgLm1pZGRsZSB7XG4gICAgICBmbGV4OiAxO1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB9YCxcbiAgICBgLnJpZ2h0IHtcbiAgICAgIGZsZXg6IDE7XG4gICAgICBkaXNwbGF5OiBmbGV4O1xuICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgfWBcbiAgXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgU29ob1dpemFyZEJ1dHRvbmJhckNvbXBvbmVudCB7XG5cbiAgLy8gQHRvZG8gbmVlZCB0eXBlcyBmb3IgdGhlc2UgYnV0dG9uLCB0aGVzZSBzZWVtIHRvIGJlIGRpZmZlcmVudCBmcm9tIFNvaG9CdXR0b25PcHRpb25zXG4gIEBJbnB1dCgpXG4gIHB1YmxpYyBidXR0b25zOiBhbnlbXSA9IFtcbiAgICB7XG4gICAgICBpZDogJ3ByZXZpb3VzJyxcbiAgICAgIHRleHQ6IFNvaG8uTG9jYWxlLnRyYW5zbGF0ZSgnUHJldmlvdXMnKSxcbiAgICAgIGNsaWNrOiAoKSA9PiB0aGlzLndpemFyZC5wcmV2aW91cygpLFxuICAgICAgZGlzYWJsZWQ6ICgpID0+ICF0aGlzLndpemFyZC5oYXNQcmV2aW91cygpLFxuICAgICAgcG9zaXRpb246ICdtaWRkbGUnXG4gICAgfSxcbiAgICB7XG4gICAgICBpZDogJ25leHQnLFxuICAgICAgdGV4dDogU29oby5Mb2NhbGUudHJhbnNsYXRlKCdOZXh0JyksXG4gICAgICBjbGljazogKCkgPT4ge1xuICAgICAgICB0aGlzLndpemFyZC5uZXh0KCk7XG4gICAgICB9LFxuICAgICAgZGlzYWJsZWQ6ICgpID0+ICF0aGlzLndpemFyZC5oYXNOZXh0KCksXG4gICAgICBpc0RlZmF1bHQ6IHRydWUsXG4gICAgICBwb3NpdGlvbjogJ21pZGRsZSdcbiAgICB9LFxuICAgIHtcbiAgICAgIGlkOiAnZmluaXNoJyxcbiAgICAgIHRleHQ6ICdGaW5pc2gnLCAvLyBTb2hvLkxvY2FsZS50cmFuc2xhdGUoJ0ZpbmlzaCcpLFxuICAgICAgY2xpY2s6ICgpID0+IHtcbiAgICAgICAgdGhpcy53aXphcmQuZmluaXNoKCk7XG4gICAgICB9LFxuICAgICAgZGlzYWJsZWQ6ICgpID0+IHRoaXMud2l6YXJkLmhhc0ZpbmlzaGVkKCksXG4gICAgICBwb3NpdGlvbjogJ3JpZ2h0J1xuICAgIH1dO1xuXG4gIEBIb3N0QmluZGluZygnY2xhc3MuYnV0dG9uc2V0JykgaXNCdXR0b25CYXIgPSBmYWxzZTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHdpemFyZDogU29ob1dpemFyZENvbXBvbmVudCwgcHJpdmF0ZSBjaGFuZ2VEZXRlY3RvclJlZjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcbiAgICAvLyBFbnN1cmVzIGFsbCB0aGUgYnV0dG9uIGFyZSByZWRyYXduLCBrZWVwaW5nIHRyYWNrIG9mIHRoZWlyIGVuYWJsZWQgc3RhdGUuXG4gICAgdGhpcy53aXphcmQuYWZ0ZXJhY3RpdmF0ZWQuc3Vic2NyaWJlKCgpID0+IHtcbiAgICAgIHRoaXMuY2hhbmdlRGV0ZWN0b3JSZWYubWFya0ZvckNoZWNrKCk7XG4gICAgfSk7XG4gIH1cbn1cbiJdfQ==
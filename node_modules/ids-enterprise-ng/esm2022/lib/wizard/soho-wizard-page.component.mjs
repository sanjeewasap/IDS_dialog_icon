import { HostBinding, Input, Component, ChangeDetectionStrategy, Output, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Angular wrapper for the soho wizard page.
 */
export class SohoWizardPageComponent {
    /**
     * Constructor.
     *
     * @param el owning DOM element
     *
     */
    constructor(el) {
        this.el = el;
        this.isWizardPage = true;
        /**
         * Is this wizard page hidden? Return true by default to avoid
         * displaying all the pages for a moment.  The wizard will
         * ensure only a single page is displayed.
         *
         *
         */
        this.hidden = true; // tslint: ignore-line
        /**
         * Event fired when the page is activated.
         */
        this.activated = new EventEmitter();
    }
    ngAfterViewInit() {
        this.jQueryElement = $(this.el.nativeElement);
    }
    /**
     * Fire the activated event, using the given SohoWizardEvent.
     *
     * I'd have rather done this with an event, but we end up
     * with a circular dependency.
     *
     * @param e - the soho wizard event.
     *
     */
    fireActivated(e) {
        this.activated.next(e);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoWizardPageComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoWizardPageComponent, selector: "div[soho-wizard-page]", inputs: { tickId: "tickId" }, outputs: { activated: "activated" }, host: { properties: { "class.wizard-page": "this.isWizardPage", "class.hidden": "this.hidden" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, styles: [":host{flex:1;display:flex;flex-direction:column;overflow-y:auto}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoWizardPageComponent, decorators: [{
            type: Component,
            args: [{ selector: 'div[soho-wizard-page]', template: `<ng-content></ng-content>`, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{flex:1;display:flex;flex-direction:column;overflow-y:auto}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { isWizardPage: [{
                type: HostBinding,
                args: ['class.wizard-page']
            }], hidden: [{
                type: HostBinding,
                args: ['class.hidden']
            }], tickId: [{
                type: Input
            }], activated: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby13aXphcmQtcGFnZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZHMtZW50ZXJwcmlzZS1uZy9zcmMvbGliL3dpemFyZC9zb2hvLXdpemFyZC1wYWdlLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0wsV0FBVyxFQUNYLEtBQUssRUFDTCxTQUFTLEVBQ1QsdUJBQXVCLEVBR3ZCLE1BQU0sRUFDTixZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7O0FBRXZCOztHQUVHO0FBY0gsTUFBTSxPQUFPLHVCQUF1QjtJQXNCbEM7Ozs7O09BS0c7SUFDSCxZQUFvQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQTFCQSxpQkFBWSxHQUFHLElBQUksQ0FBQztRQUV0RDs7Ozs7O1dBTUc7UUFDMEIsV0FBTSxHQUFHLElBQUksQ0FBQyxDQUFDLHNCQUFzQjtRQU1sRTs7V0FFRztRQUNPLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBbUIsQ0FBQztJQVMxRCxDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxhQUFhLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0gsYUFBYSxDQUFDLENBQWtCO1FBQzlCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pCLENBQUM7OEdBOUNVLHVCQUF1QjtrR0FBdkIsdUJBQXVCLG1PQVh4QiwyQkFBMkI7OzJGQVcxQix1QkFBdUI7a0JBYm5DLFNBQVM7K0JBQ0UsdUJBQXVCLFlBQ3ZCLDJCQUEyQixtQkFTcEIsdUJBQXVCLENBQUMsTUFBTTtpR0FJYixZQUFZO3NCQUE3QyxXQUFXO3VCQUFDLG1CQUFtQjtnQkFTSCxNQUFNO3NCQUFsQyxXQUFXO3VCQUFDLGNBQWM7Z0JBSTNCLE1BQU07c0JBREwsS0FBSztnQkFNSSxTQUFTO3NCQUFsQixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBDb21wb25lbnQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBFbGVtZW50UmVmLFxuICBBZnRlclZpZXdJbml0LFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBBbmd1bGFyIHdyYXBwZXIgZm9yIHRoZSBzb2hvIHdpemFyZCBwYWdlLlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkaXZbc29oby13aXphcmQtcGFnZV0nLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PmAsXG4gIHN0eWxlczogW1xuICAgIGA6aG9zdCB7XG4gICAgICAgIGZsZXg6ICAgICAgICAgICAxO1xuICAgICAgICBkaXNwbGF5OiAgICAgICAgZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICAgICAgb3ZlcmZsb3cteTogICAgIGF1dG87XG4gICAgfWBcbiAgXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgU29ob1dpemFyZFBhZ2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgalF1ZXJ5RWxlbWVudCE6IEpRdWVyeTtcbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy53aXphcmQtcGFnZScpIGlzV2l6YXJkUGFnZSA9IHRydWU7XG5cbiAgLyoqXG4gICAqIElzIHRoaXMgd2l6YXJkIHBhZ2UgaGlkZGVuPyBSZXR1cm4gdHJ1ZSBieSBkZWZhdWx0IHRvIGF2b2lkXG4gICAqIGRpc3BsYXlpbmcgYWxsIHRoZSBwYWdlcyBmb3IgYSBtb21lbnQuICBUaGUgd2l6YXJkIHdpbGxcbiAgICogZW5zdXJlIG9ubHkgYSBzaW5nbGUgcGFnZSBpcyBkaXNwbGF5ZWQuXG4gICAqXG4gICAqXG4gICAqL1xuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmhpZGRlbicpIGhpZGRlbiA9IHRydWU7IC8vIHRzbGludDogaWdub3JlLWxpbmVcblxuICAvKiogVGhpcyBpZCBvZiB0aGUgYXNzb2NpYXRlZCB0aWNrLiAqL1xuICBASW5wdXQoKVxuICB0aWNrSWQhOiBzdHJpbmc7IC8vIHRzbGludDogaWdub3JlLWxpbmVcblxuICAvKipcbiAgICogRXZlbnQgZmlyZWQgd2hlbiB0aGUgcGFnZSBpcyBhY3RpdmF0ZWQuXG4gICAqL1xuICBAT3V0cHV0KCkgYWN0aXZhdGVkID0gbmV3IEV2ZW50RW1pdHRlcjxTb2hvV2l6YXJkRXZlbnQ+KCk7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0gZWwgb3duaW5nIERPTSBlbGVtZW50XG4gICAqXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5qUXVlcnlFbGVtZW50ID0gJCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEZpcmUgdGhlIGFjdGl2YXRlZCBldmVudCwgdXNpbmcgdGhlIGdpdmVuIFNvaG9XaXphcmRFdmVudC5cbiAgICpcbiAgICogSSdkIGhhdmUgcmF0aGVyIGRvbmUgdGhpcyB3aXRoIGFuIGV2ZW50LCBidXQgd2UgZW5kIHVwXG4gICAqIHdpdGggYSBjaXJjdWxhciBkZXBlbmRlbmN5LlxuICAgKlxuICAgKiBAcGFyYW0gZSAtIHRoZSBzb2hvIHdpemFyZCBldmVudC5cbiAgICpcbiAgICovXG4gIGZpcmVBY3RpdmF0ZWQoZTogU29ob1dpemFyZEV2ZW50KSB7XG4gICAgdGhpcy5hY3RpdmF0ZWQubmV4dChlKTtcbiAgfVxufVxuIl19
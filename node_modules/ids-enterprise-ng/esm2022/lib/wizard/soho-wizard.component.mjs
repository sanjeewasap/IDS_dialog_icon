import { ChangeDetectionStrategy, Component, Output, EventEmitter, HostBinding, Input, ContentChild } from '@angular/core';
import { SohoWizardHeaderComponent } from './soho-wizard-header.component';
import { SohoWizardPagesComponent } from './soho-wizard-pages.component';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the Soho Wizard Component.
 *
 * This component searches for a div with the attribute
 * 'soho-wizard' in the DOM, initialising those found with
 * the SoHo Wizard control.
 *
 * TODO:
 * =====
 *
 * - handling of ticks / tick model (based on underlying widget)
 * - model driven
 * - support Builder Panel style (with title?)
 * - support for "modal style" buttons.
 * - extract state machine
 */
export class SohoWizardComponent {
    // -------------------------------------------
    // Inputs
    // -------------------------------------------
    /**
     * Ticks for the settings - this does not really work yet (i think).
     */
    set ticks(ticks) {
        this._options.ticks = ticks;
        if (this.wizard) {
            this.wizard.settings.ticks = this._options.ticks;
            this.wizard.updated();
        }
    }
    get ticks() {
        return this._options.ticks;
    }
    /** Id of the current tick. */
    set currentTickId(tickId) {
        this.pagesContainer?.pages.forEach(p => p.hidden = (p.tickId !== tickId));
        const step = this.header?.steps?.find(s => s.tickId === tickId);
        if (this.wizard && step?.jQueryElement) {
            this.wizard.activate(null, step.jQueryElement);
        }
    }
    get currentTickId() {
        const step = this.currentStep();
        const tickId = step?.tickId;
        return tickId || '';
    }
    /**
     * Constructor.
     *
     * @param elementRef - the element matching this component.
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        /**
         * This event is fired when a tick is activated.
         */
        this.activated = new EventEmitter();
        /**
         * This event is fired after a tick is activated.
         */
        this.afteractivated = new EventEmitter();
        // -------------------------------------------
        // Hostbinding
        // -------------------------------------------
        this.isWizardClass = true;
        /** An internal options object that gets updated by using the component's Inputs(). */
        this._options = {};
        /**
         * Has the wizard finished.
         */
        this.finished = false;
    }
    // -------------------------------------------
    // Public API
    // -------------------------------------------
    /**
     * Returns the currently selected page.
     */
    get currentPage() {
        if (this.pagesContainer && this.pagesContainer?.pages) {
            return this.pagesContainer?.pages.find(p => p.tickId === this.currentTickId);
        }
        return undefined;
    }
    /**
     * Moves to the first state if possible.
     */
    first() {
        if (this.wizard && !this.finished && this.stepCount() > 0) {
            const step = this.stepAt(0);
            if (step && step.jQueryElement) {
                this.wizard.activate(null, step.jQueryElement);
            }
        }
    }
    /**
     * Attempts to move to the next step, if allowed.
     *
     *
     */
    next() {
        // This is a bit grim ... but we need to rely on ticks for the state.
        let currentIndex = this.currentIndex();
        // @todo handle disabled states.
        if (!this.finished && ++currentIndex < this.stepCount()) {
            const step = this.stepAt(currentIndex);
            if (step && step.jQueryElement) {
                this.wizard?.activate(null, step.jQueryElement);
            }
        }
    }
    /**
     * Attempts to move to the previous step, if allowed.
     *
     *
     */
    previous() {
        let currentIndex = this.currentIndex();
        if (!this.finished && --currentIndex >= 0) {
            const step = this.stepAt(currentIndex);
            if (step && step.jQueryElement) {
                this.wizard?.activate(null, step.jQueryElement);
            }
        }
    }
    /**
     * Attempts to move to the last step, if allowed.
     *
     *
     */
    last() {
        const step = this.stepAt(this.stepCount() - 1);
        if (step && step.jQueryElement) {
            this.wizard?.activate(null, step.jQueryElement);
        }
    }
    /**
     * Attempts to move to the last step, and finish the wizard.
     *
     *
     */
    finish() {
        // Mark the wizard as finished.
        this.finished = true;
        // Disabled all ticks.
        this.header?.steps?.forEach(p => p.disabled = this.finished);
        // Move to the last tick.
        this.last();
    }
    /**
     * Is there another step after the current step?
     *
     * @return  true if there is another step; otherwise false.
     *
     */
    hasNext() {
        return !this.finished && this.currentIndex() < this.stepCount() - 1;
    }
    /**
     * Is there previous step.
     */
    hasPrevious() {
        return !this.finished && this.currentIndex() > 0;
    }
    /**
     * Returns true if the process has finished,
     * otherwise false.
     */
    hasFinished() {
        return this.finished;
    }
    /**
     * Resets the state machine, moving to the first page
     * and clearing finished flag.
     */
    reset() {
        this.finished = false;
        this.first();
    }
    // ------------------------------------------
    // Lifecycle Events
    // ------------------------------------------
    ngAfterViewInit() {
        // Wrap the "unordered list" element in a jQuery selector.
        this.jQueryElement = jQuery(this.elementRef.nativeElement);
        // Initialise the Soho control.
        this.jQueryElement.wizard(this._options);
        // Once the control is initialised, extract the control
        // plug-in from the element.  The element name is
        // defined by the plug-in, but in this case it is 'wizard'.
        this.wizard = this.jQueryElement.data('wizard');
        // Initialize any event handlers.
        this.jQueryElement
            .on('beforeactivate', (_e, tick) => this.onBeforeActivate(tick))
            .on('activated', (_e, tick) => this.onActivated(tick))
            .on('afteractivated', (_e, tick) => this.afteractivated.next({ tick }));
        // Reset the cached steps if the list of steps changes.
        if (this.header) {
            this.header.steps?.changes.subscribe(() => {
                this._steps = [];
            });
        }
    }
    ngAfterContentInit() {
        // Added delay otherwise the component is not complete
        // causing the active page to not be displayed.
        setTimeout(() => {
            if (this.header) {
                const step = this.header.steps?.find(s => s.isCurrentTick());
                this.pagesContainer?.pages.forEach(p => p.hidden = (!step || step.tickId !== p.tickId));
            }
        });
    }
    /**
     * Handle component destruction by clearing down the SoHo
     * wizard component.
     *
     *
     */
    ngOnDestroy() {
        if (this.wizard) {
            this.wizard.destroy();
            this.wizard = undefined;
        }
    }
    onActivated(tick) {
        // When activated - make sure the rest of the component is
        // updated ...
        if (tick) {
            // ... find the id of the tick activated ...
            const tickId = tick.attr('tickId');
            // ... if we have one (to avoid errors) ...
            if (tickId) {
                // hide all the inactive pages and show the active page.
                this.pagesContainer?.pages.forEach((p) => {
                    if (tickId === p.tickId) {
                        // fire an event on the page.
                        p.fireActivated({ tick });
                        // ... show it.
                        p.hidden = false;
                    }
                    else {
                        // hide it.
                        p.hidden = true;
                    }
                });
                // ... publish.
                this.activated.next({ tick });
            }
        }
    }
    onBeforeActivate(tick) {
        // Check for vetoing.
        return this.beforeActivate != null ? this.beforeActivate.call(tick) : true;
    }
    stepCount() {
        return this.header?.steps?.length || 0;
    }
    steps() {
        if (!this._steps && this.header) {
            this._steps = this.header?.steps?.toArray();
        }
        return this._steps;
    }
    stepAt(index) {
        const steps = this.steps();
        return steps ? steps[index] : undefined;
    }
    currentIndex() {
        const steps = this.steps();
        const currentStep = this.currentStep();
        return steps && currentStep ? steps.indexOf(currentStep) : -1;
    }
    currentStep() {
        const steps = this.steps();
        return steps ? steps.find(s => s.isCurrentTick()) : undefined;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoWizardComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoWizardComponent, selector: "div[soho-wizard]", inputs: { ticks: "ticks", currentTickId: "currentTickId", beforeActivate: "beforeActivate" }, outputs: { activated: "activated", afteractivated: "afteractivated" }, host: { properties: { "class.wizard": "this.isWizardClass" } }, queries: [{ propertyName: "pagesContainer", first: true, predicate: SohoWizardPagesComponent, descendants: true, static: true }, { propertyName: "header", first: true, predicate: SohoWizardHeaderComponent, descendants: true, static: true }], ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, styles: [":host{display:flex;flex:1;flex-direction:column}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoWizardComponent, decorators: [{
            type: Component,
            args: [{ selector: 'div[soho-wizard]', template: `<ng-content></ng-content>`, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{display:flex;flex:1;flex-direction:column}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { pagesContainer: [{
                type: ContentChild,
                args: [SohoWizardPagesComponent, { static: true }]
            }], header: [{
                type: ContentChild,
                args: [SohoWizardHeaderComponent, { static: true }]
            }], ticks: [{
                type: Input
            }], currentTickId: [{
                type: Input
            }], beforeActivate: [{
                type: Input
            }], activated: [{
                type: Output
            }], afteractivated: [{
                type: Output
            }], isWizardClass: [{
                type: HostBinding,
                args: ['class.wizard']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby13aXphcmQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWRzLWVudGVycHJpc2Utbmcvc3JjL2xpYi93aXphcmQvc29oby13aXphcmQuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUVULE1BQU0sRUFDTixZQUFZLEVBQ1osV0FBVyxFQUNYLEtBQUssRUFHTCxZQUFZLEVBQ2IsTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDM0UsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sK0JBQStCLENBQUM7O0FBR3pFOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQWFILE1BQU0sT0FBTyxtQkFBbUI7SUFpQjlCLDhDQUE4QztJQUM5QyxTQUFTO0lBQ1QsOENBQThDO0lBRTlDOztPQUVHO0lBQ0gsSUFDSSxLQUFLLENBQUMsS0FBdUI7UUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRTVCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUNqRCxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ3ZCO0lBQ0gsQ0FBQztJQUVELElBQUksS0FBSztRQUNQLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFZLENBQUM7SUFDcEMsQ0FBQztJQUVELDhCQUE4QjtJQUM5QixJQUNJLGFBQWEsQ0FBQyxNQUFjO1FBQzlCLElBQUksQ0FBQyxjQUFjLEVBQUUsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDMUUsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsQ0FBQztRQUVoRSxJQUFJLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxFQUFFLGFBQWEsRUFBRTtZQUN0QyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1NBQ2hEO0lBQ0gsQ0FBQztJQUVELElBQUksYUFBYTtRQUNmLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNoQyxNQUFNLE1BQU0sR0FBRyxJQUFJLEVBQUUsTUFBTSxDQUFDO1FBQzVCLE9BQU8sTUFBTSxJQUFJLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBd0REOzs7O09BSUc7SUFDSCxZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBbEQxQzs7V0FFRztRQUVJLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBbUIsQ0FBQztRQUV2RDs7V0FFRztRQUVJLG1CQUFjLEdBQUcsSUFBSSxZQUFZLEVBQW1CLENBQUM7UUFFNUQsOENBQThDO1FBQzlDLGNBQWM7UUFDZCw4Q0FBOEM7UUFFakIsa0JBQWEsR0FBRyxJQUFJLENBQUM7UUFZbEQsc0ZBQXNGO1FBQzlFLGFBQVEsR0FBc0IsRUFBRSxDQUFDO1FBV3pDOztXQUVHO1FBQ0ssYUFBUSxHQUFHLEtBQUssQ0FBQztJQVF6QixDQUFDO0lBRUQsOENBQThDO0lBQzlDLGFBQWE7SUFDYiw4Q0FBOEM7SUFFOUM7O09BRUc7SUFDSCxJQUFXLFdBQVc7UUFDcEIsSUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUUsS0FBSyxFQUFFO1lBQ3JELE9BQU8sSUFBSSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDOUU7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQ7O09BRUc7SUFDSSxLQUFLO1FBQ1YsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQyxFQUFFO1lBQ3pELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDNUIsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtnQkFDOUIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUNoRDtTQUNGO0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxJQUFJO1FBQ1QscUVBQXFFO1FBQ3JFLElBQUksWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUV2QyxnQ0FBZ0M7UUFDaEMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksRUFBRSxZQUFZLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxFQUFFO1lBQ3ZELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkMsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtnQkFDOUIsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUNqRDtTQUNGO0lBQ0gsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxRQUFRO1FBQ2IsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLEVBQUUsWUFBWSxJQUFJLENBQUMsRUFBRTtZQUN6QyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3ZDLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7Z0JBQzlCLElBQUksQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7YUFDakQ7U0FDRjtJQUNILENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksSUFBSTtRQUNULE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQy9DLElBQUksSUFBSSxJQUFJLElBQUksQ0FBQyxhQUFhLEVBQUU7WUFDOUIsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztTQUNqRDtJQUNILENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTTtRQUNYLCtCQUErQjtRQUMvQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUVyQixzQkFBc0I7UUFDdEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFN0QseUJBQXlCO1FBQ3pCLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE9BQU87UUFDWixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQ7O09BRUc7SUFDSSxXQUFXO1FBQ2hCLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVEOzs7T0FHRztJQUNJLFdBQVc7UUFDaEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3ZCLENBQUM7SUFFRDs7O09BR0c7SUFDSSxLQUFLO1FBQ1YsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7UUFDdEIsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ2YsQ0FBQztJQUVELDZDQUE2QztJQUM3QyxtQkFBbUI7SUFDbkIsNkNBQTZDO0lBRTdDLGVBQWU7UUFDYiwwREFBMEQ7UUFDMUQsSUFBSSxDQUFDLGFBQWEsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUUzRCwrQkFBK0I7UUFDL0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXpDLHVEQUF1RDtRQUN2RCxpREFBaUQ7UUFDakQsMkRBQTJEO1FBQzNELElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFFaEQsaUNBQWlDO1FBQ2pDLElBQUksQ0FBQyxhQUFhO2FBQ2YsRUFBRSxDQUFDLGdCQUFnQixFQUFFLENBQUMsRUFBeUIsRUFBRSxJQUFvQixFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDdEcsRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDLEVBQXlCLEVBQUUsSUFBWSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3BGLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLEVBQXlCLEVBQUUsSUFBWSxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztRQUV6Ryx1REFBdUQ7UUFDdkQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUU7Z0JBQ3hDLElBQUksQ0FBQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1lBQ25CLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLHNEQUFzRDtRQUN0RCwrQ0FBK0M7UUFDL0MsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDZixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxFQUFFLENBQUMsQ0FBQztnQkFDN0QsSUFBSSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDekY7UUFDSCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNILFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxNQUFNLEdBQUcsU0FBUyxDQUFDO1NBQ3pCO0lBQ0gsQ0FBQztJQUVPLFdBQVcsQ0FBQyxJQUFZO1FBQzlCLDBEQUEwRDtRQUMxRCxjQUFjO1FBQ2QsSUFBSSxJQUFJLEVBQUU7WUFDUiw0Q0FBNEM7WUFDNUMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUVuQywyQ0FBMkM7WUFDM0MsSUFBSSxNQUFNLEVBQUU7Z0JBQ1Ysd0RBQXdEO2dCQUN4RCxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQ2hDLENBQUMsQ0FBQyxFQUFFLEVBQUU7b0JBQ0osSUFBSSxNQUFNLEtBQUssQ0FBQyxDQUFDLE1BQU0sRUFBRTt3QkFDdkIsNkJBQTZCO3dCQUM3QixDQUFDLENBQUMsYUFBYSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQzt3QkFFMUIsZUFBZTt3QkFDZixDQUFDLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztxQkFDbEI7eUJBQU07d0JBRUwsV0FBVzt3QkFDWCxDQUFDLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztxQkFDakI7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7Z0JBRUwsZUFBZTtnQkFDZixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7YUFDL0I7U0FDRjtJQUNILENBQUM7SUFFTyxnQkFBZ0IsQ0FBQyxJQUFvQjtRQUMzQyxxQkFBcUI7UUFDckIsT0FBTyxJQUFJLENBQUMsY0FBYyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztJQUM3RSxDQUFDO0lBRU8sU0FBUztRQUNmLE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRU8sS0FBSztRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsQ0FBQztTQUM3QztRQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztJQUNyQixDQUFDO0lBQ08sTUFBTSxDQUFDLEtBQWE7UUFDMUIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNCLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUMxQyxDQUFDO0lBRU8sWUFBWTtRQUNsQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDM0IsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3ZDLE9BQU8sS0FBSyxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVPLFdBQVc7UUFDakIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzNCLE9BQU8sS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUNoRSxDQUFDOzhHQWhXVSxtQkFBbUI7a0dBQW5CLG1CQUFtQix5VUFPaEIsd0JBQXdCLHVGQVF4Qix5QkFBeUIsOERBekI3QiwyQkFBMkI7OzJGQVUxQixtQkFBbUI7a0JBWi9CLFNBQVM7K0JBQ0Usa0JBQWtCLFlBQ2xCLDJCQUEyQixtQkFRcEIsdUJBQXVCLENBQUMsTUFBTTtpR0FTVyxjQUFjO3NCQUF2RSxZQUFZO3VCQUFDLHdCQUF3QixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFRRyxNQUFNO3NCQUFoRSxZQUFZO3VCQUFDLHlCQUF5QixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFVckQsS0FBSztzQkFEUixLQUFLO2dCQWdCRixhQUFhO3NCQURoQixLQUFLO2dCQXVCRSxjQUFjO3NCQURyQixLQUFLO2dCQU9DLFNBQVM7c0JBRGYsTUFBTTtnQkFPQSxjQUFjO3NCQURwQixNQUFNO2dCQU9zQixhQUFhO3NCQUF6QyxXQUFXO3VCQUFDLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBBZnRlclZpZXdJbml0LFxuICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBPdXRwdXQsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBPbkRlc3Ryb3ksXG4gIEFmdGVyQ29udGVudEluaXQsXG4gIENvbnRlbnRDaGlsZFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU29ob1dpemFyZFRpY2tDb21wb25lbnQgfSBmcm9tICcuL3NvaG8td2l6YXJkLXRpY2suY29tcG9uZW50JztcbmltcG9ydCB7IFNvaG9XaXphcmRIZWFkZXJDb21wb25lbnQgfSBmcm9tICcuL3NvaG8td2l6YXJkLWhlYWRlci5jb21wb25lbnQnO1xuaW1wb3J0IHsgU29ob1dpemFyZFBhZ2VzQ29tcG9uZW50IH0gZnJvbSAnLi9zb2hvLXdpemFyZC1wYWdlcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgU29ob1dpemFyZFBhZ2VDb21wb25lbnQgfSBmcm9tICcuL3NvaG8td2l6YXJkLXBhZ2UuY29tcG9uZW50JztcblxuLyoqXG4gKiBBbmd1bGFyIFdyYXBwZXIgZm9yIHRoZSBTb2hvIFdpemFyZCBDb21wb25lbnQuXG4gKlxuICogVGhpcyBjb21wb25lbnQgc2VhcmNoZXMgZm9yIGEgZGl2IHdpdGggdGhlIGF0dHJpYnV0ZVxuICogJ3NvaG8td2l6YXJkJyBpbiB0aGUgRE9NLCBpbml0aWFsaXNpbmcgdGhvc2UgZm91bmQgd2l0aFxuICogdGhlIFNvSG8gV2l6YXJkIGNvbnRyb2wuXG4gKlxuICogVE9ETzpcbiAqID09PT09XG4gKlxuICogLSBoYW5kbGluZyBvZiB0aWNrcyAvIHRpY2sgbW9kZWwgKGJhc2VkIG9uIHVuZGVybHlpbmcgd2lkZ2V0KVxuICogLSBtb2RlbCBkcml2ZW5cbiAqIC0gc3VwcG9ydCBCdWlsZGVyIFBhbmVsIHN0eWxlICh3aXRoIHRpdGxlPylcbiAqIC0gc3VwcG9ydCBmb3IgXCJtb2RhbCBzdHlsZVwiIGJ1dHRvbnMuXG4gKiAtIGV4dHJhY3Qgc3RhdGUgbWFjaGluZVxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdkaXZbc29oby13aXphcmRdJywgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB0ZW1wbGF0ZTogYDxuZy1jb250ZW50PjwvbmctY29udGVudD5gLFxuICBzdHlsZXM6IFtcbiAgICBgOmhvc3Qge1xuICAgICAgICBkaXNwbGF5OiAgICAgICAgZmxleDtcbiAgICAgICAgZmxleDogICAgICAgICAgIDE7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgfWBcbiAgXSxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgU29ob1dpemFyZENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gIC8qKlxuICAgKiBSZWZlcmVuY2UgdG8gdGhlIHVuZGVybHlpbmcgY29udGFpbmVyIGZvciB0aGUgcGFnZXMuXG4gICAqXG4gICAqXG4gICAqXG4gICAqL1xuICBAQ29udGVudENoaWxkKFNvaG9XaXphcmRQYWdlc0NvbXBvbmVudCwgeyBzdGF0aWM6IHRydWUgfSkgcGFnZXNDb250YWluZXI/OiBTb2hvV2l6YXJkUGFnZXNDb21wb25lbnQ7XG5cbiAgLyoqXG4gICAqIFJlZmVyZW5jZSB0byB0aGUgaGVhZGVyLCBjb250YWluZXIgZm9yIHRoZSB0aWNrcy5cbiAgICpcbiAgICpcbiAgICpcbiAgICovXG4gIEBDb250ZW50Q2hpbGQoU29ob1dpemFyZEhlYWRlckNvbXBvbmVudCwgeyBzdGF0aWM6IHRydWUgfSkgaGVhZGVyPzogU29ob1dpemFyZEhlYWRlckNvbXBvbmVudDtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIElucHV0c1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqXG4gICAqIFRpY2tzIGZvciB0aGUgc2V0dGluZ3MgLSB0aGlzIGRvZXMgbm90IHJlYWxseSB3b3JrIHlldCAoaSB0aGluaykuXG4gICAqL1xuICBASW5wdXQoKVxuICBzZXQgdGlja3ModGlja3M6IFNvaG9XaXphcmRUaWNrW10pIHtcbiAgICB0aGlzLl9vcHRpb25zLnRpY2tzID0gdGlja3M7XG5cbiAgICBpZiAodGhpcy53aXphcmQpIHtcbiAgICAgIHRoaXMud2l6YXJkLnNldHRpbmdzLnRpY2tzID0gdGhpcy5fb3B0aW9ucy50aWNrcztcbiAgICAgIHRoaXMud2l6YXJkLnVwZGF0ZWQoKTtcbiAgICB9XG4gIH1cblxuICBnZXQgdGlja3MoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29wdGlvbnMudGlja3MgYXMgYW55O1xuICB9XG5cbiAgLyoqIElkIG9mIHRoZSBjdXJyZW50IHRpY2suICovXG4gIEBJbnB1dCgpXG4gIHNldCBjdXJyZW50VGlja0lkKHRpY2tJZDogc3RyaW5nKSB7XG4gICAgdGhpcy5wYWdlc0NvbnRhaW5lcj8ucGFnZXMuZm9yRWFjaChwID0+IHAuaGlkZGVuID0gKHAudGlja0lkICE9PSB0aWNrSWQpKTtcbiAgICBjb25zdCBzdGVwID0gdGhpcy5oZWFkZXI/LnN0ZXBzPy5maW5kKHMgPT4gcy50aWNrSWQgPT09IHRpY2tJZCk7XG5cbiAgICBpZiAodGhpcy53aXphcmQgJiYgc3RlcD8ualF1ZXJ5RWxlbWVudCkge1xuICAgICAgdGhpcy53aXphcmQuYWN0aXZhdGUobnVsbCwgc3RlcC5qUXVlcnlFbGVtZW50KTtcbiAgICB9XG4gIH1cblxuICBnZXQgY3VycmVudFRpY2tJZCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IHN0ZXAgPSB0aGlzLmN1cnJlbnRTdGVwKCk7XG4gICAgY29uc3QgdGlja0lkID0gc3RlcD8udGlja0lkO1xuICAgIHJldHVybiB0aWNrSWQgfHwgJyc7XG4gIH1cblxuICAvKipcbiAgICogUHJvdmlkZXMgYSBgYmVmb3JlQWN0aXZhdGVgIHZldG9hYmxlIGhhbmRsZXIsIHdoaWNoXG4gICAqIGFsbG93cyB0aGUgY2FsbGVyIHRvIHByZXZlbnQgYWN0aXZhdGlvbiBvZiBhIGxpbmsuXG4gICAqXG4gICAqIEB0b2RvIG5lZWRzIGxpbmtpbmcgd2l0aCBhbnkgYnV0dG9ucyFcbiAgICovXG4gIEBJbnB1dCgpXG4gIHByaXZhdGUgYmVmb3JlQWN0aXZhdGU/OiAodGljaz86IFNvaG9XaXphcmRUaWNrKSA9PiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUaGlzIGV2ZW50IGlzIGZpcmVkIHdoZW4gYSB0aWNrIGlzIGFjdGl2YXRlZC5cbiAgICovXG4gIEBPdXRwdXQoKVxuICBwdWJsaWMgYWN0aXZhdGVkID0gbmV3IEV2ZW50RW1pdHRlcjxTb2hvV2l6YXJkRXZlbnQ+KCk7XG5cbiAgLyoqXG4gICAqIFRoaXMgZXZlbnQgaXMgZmlyZWQgYWZ0ZXIgYSB0aWNrIGlzIGFjdGl2YXRlZC5cbiAgICovXG4gIEBPdXRwdXQoKVxuICBwdWJsaWMgYWZ0ZXJhY3RpdmF0ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPFNvaG9XaXphcmRFdmVudD4oKTtcblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIEhvc3RiaW5kaW5nXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLndpemFyZCcpIGlzV2l6YXJkQ2xhc3MgPSB0cnVlO1xuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgLy8gUHJpdmF0ZSBNZW1iZXIgRGF0YVxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbiAgLyoqIFJlZmVyZW5jZSB0byB0aGUgalF1ZXJ5IGNvbnRyb2wuICovXG4gIHByaXZhdGUgalF1ZXJ5RWxlbWVudD86IEpRdWVyeTtcblxuICAvKiogUmVmZXJlbmNlIHRvIHRoZSBTb0hvIHdpemFyZCBjb250cm9sIGFwaS4gKi9cbiAgcHJpdmF0ZSB3aXphcmQ/OiBTb2hvV2l6YXJkU3RhdGljIHwgdW5kZWZpbmVkO1xuXG4gIC8qKiBBbiBpbnRlcm5hbCBvcHRpb25zIG9iamVjdCB0aGF0IGdldHMgdXBkYXRlZCBieSB1c2luZyB0aGUgY29tcG9uZW50J3MgSW5wdXRzKCkuICovXG4gIHByaXZhdGUgX29wdGlvbnM6IFNvaG9XaXphcmRPcHRpb25zID0ge307XG5cbiAgLyoqXG4gICAqIE9yZGVyZWQgbGlzdCBvZiBzdGVwcy5cbiAgICpcbiAgICpcbiAgICpcbiAgICpcbiAgICovXG4gIHByaXZhdGUgX3N0ZXBzPzogU29ob1dpemFyZFRpY2tDb21wb25lbnRbXTtcblxuICAvKipcbiAgICogSGFzIHRoZSB3aXphcmQgZmluaXNoZWQuXG4gICAqL1xuICBwcml2YXRlIGZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdG9yLlxuICAgKlxuICAgKiBAcGFyYW0gZWxlbWVudFJlZiAtIHRoZSBlbGVtZW50IG1hdGNoaW5nIHRoaXMgY29tcG9uZW50LlxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50UmVmOiBFbGVtZW50UmVmKSB7XG4gIH1cblxuICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gIC8vIFB1YmxpYyBBUElcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50bHkgc2VsZWN0ZWQgcGFnZS5cbiAgICovXG4gIHB1YmxpYyBnZXQgY3VycmVudFBhZ2UoKTogU29ob1dpemFyZFBhZ2VDb21wb25lbnQgfCB1bmRlZmluZWQge1xuICAgIGlmICh0aGlzLnBhZ2VzQ29udGFpbmVyICYmIHRoaXMucGFnZXNDb250YWluZXI/LnBhZ2VzKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYWdlc0NvbnRhaW5lcj8ucGFnZXMuZmluZChwID0+IHAudGlja0lkID09PSB0aGlzLmN1cnJlbnRUaWNrSWQpO1xuICAgIH1cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgLyoqXG4gICAqIE1vdmVzIHRvIHRoZSBmaXJzdCBzdGF0ZSBpZiBwb3NzaWJsZS5cbiAgICovXG4gIHB1YmxpYyBmaXJzdCgpIHtcbiAgICBpZiAodGhpcy53aXphcmQgJiYgIXRoaXMuZmluaXNoZWQgJiYgdGhpcy5zdGVwQ291bnQoKSA+IDApIHtcbiAgICAgIGNvbnN0IHN0ZXAgPSB0aGlzLnN0ZXBBdCgwKTtcbiAgICAgIGlmIChzdGVwICYmIHN0ZXAualF1ZXJ5RWxlbWVudCkge1xuICAgICAgICB0aGlzLndpemFyZC5hY3RpdmF0ZShudWxsLCBzdGVwLmpRdWVyeUVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRlbXB0cyB0byBtb3ZlIHRvIHRoZSBuZXh0IHN0ZXAsIGlmIGFsbG93ZWQuXG4gICAqXG4gICAqXG4gICAqL1xuICBwdWJsaWMgbmV4dCgpIHtcbiAgICAvLyBUaGlzIGlzIGEgYml0IGdyaW0gLi4uIGJ1dCB3ZSBuZWVkIHRvIHJlbHkgb24gdGlja3MgZm9yIHRoZSBzdGF0ZS5cbiAgICBsZXQgY3VycmVudEluZGV4ID0gdGhpcy5jdXJyZW50SW5kZXgoKTtcblxuICAgIC8vIEB0b2RvIGhhbmRsZSBkaXNhYmxlZCBzdGF0ZXMuXG4gICAgaWYgKCF0aGlzLmZpbmlzaGVkICYmICsrY3VycmVudEluZGV4IDwgdGhpcy5zdGVwQ291bnQoKSkge1xuICAgICAgY29uc3Qgc3RlcCA9IHRoaXMuc3RlcEF0KGN1cnJlbnRJbmRleCk7XG4gICAgICBpZiAoc3RlcCAmJiBzdGVwLmpRdWVyeUVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy53aXphcmQ/LmFjdGl2YXRlKG51bGwsIHN0ZXAualF1ZXJ5RWxlbWVudCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEF0dGVtcHRzIHRvIG1vdmUgdG8gdGhlIHByZXZpb3VzIHN0ZXAsIGlmIGFsbG93ZWQuXG4gICAqXG4gICAqXG4gICAqL1xuICBwdWJsaWMgcHJldmlvdXMoKSB7XG4gICAgbGV0IGN1cnJlbnRJbmRleCA9IHRoaXMuY3VycmVudEluZGV4KCk7XG4gICAgaWYgKCF0aGlzLmZpbmlzaGVkICYmIC0tY3VycmVudEluZGV4ID49IDApIHtcbiAgICAgIGNvbnN0IHN0ZXAgPSB0aGlzLnN0ZXBBdChjdXJyZW50SW5kZXgpO1xuICAgICAgaWYgKHN0ZXAgJiYgc3RlcC5qUXVlcnlFbGVtZW50KSB7XG4gICAgICAgIHRoaXMud2l6YXJkPy5hY3RpdmF0ZShudWxsLCBzdGVwLmpRdWVyeUVsZW1lbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBdHRlbXB0cyB0byBtb3ZlIHRvIHRoZSBsYXN0IHN0ZXAsIGlmIGFsbG93ZWQuXG4gICAqXG4gICAqXG4gICAqL1xuICBwdWJsaWMgbGFzdCgpIHtcbiAgICBjb25zdCBzdGVwID0gdGhpcy5zdGVwQXQodGhpcy5zdGVwQ291bnQoKSAtIDEpO1xuICAgIGlmIChzdGVwICYmIHN0ZXAualF1ZXJ5RWxlbWVudCkge1xuICAgICAgdGhpcy53aXphcmQ/LmFjdGl2YXRlKG51bGwsIHN0ZXAualF1ZXJ5RWxlbWVudCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEF0dGVtcHRzIHRvIG1vdmUgdG8gdGhlIGxhc3Qgc3RlcCwgYW5kIGZpbmlzaCB0aGUgd2l6YXJkLlxuICAgKlxuICAgKlxuICAgKi9cbiAgcHVibGljIGZpbmlzaCgpIHtcbiAgICAvLyBNYXJrIHRoZSB3aXphcmQgYXMgZmluaXNoZWQuXG4gICAgdGhpcy5maW5pc2hlZCA9IHRydWU7XG5cbiAgICAvLyBEaXNhYmxlZCBhbGwgdGlja3MuXG4gICAgdGhpcy5oZWFkZXI/LnN0ZXBzPy5mb3JFYWNoKHAgPT4gcC5kaXNhYmxlZCA9IHRoaXMuZmluaXNoZWQpO1xuXG4gICAgLy8gTW92ZSB0byB0aGUgbGFzdCB0aWNrLlxuICAgIHRoaXMubGFzdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIElzIHRoZXJlIGFub3RoZXIgc3RlcCBhZnRlciB0aGUgY3VycmVudCBzdGVwP1xuICAgKlxuICAgKiBAcmV0dXJuICB0cnVlIGlmIHRoZXJlIGlzIGFub3RoZXIgc3RlcDsgb3RoZXJ3aXNlIGZhbHNlLlxuICAgKlxuICAgKi9cbiAgcHVibGljIGhhc05leHQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLmZpbmlzaGVkICYmIHRoaXMuY3VycmVudEluZGV4KCkgPCB0aGlzLnN0ZXBDb3VudCgpIC0gMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJcyB0aGVyZSBwcmV2aW91cyBzdGVwLlxuICAgKi9cbiAgcHVibGljIGhhc1ByZXZpb3VzKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAhdGhpcy5maW5pc2hlZCAmJiB0aGlzLmN1cnJlbnRJbmRleCgpID4gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIHByb2Nlc3MgaGFzIGZpbmlzaGVkLFxuICAgKiBvdGhlcndpc2UgZmFsc2UuXG4gICAqL1xuICBwdWJsaWMgaGFzRmluaXNoZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZmluaXNoZWQ7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBzdGF0ZSBtYWNoaW5lLCBtb3ZpbmcgdG8gdGhlIGZpcnN0IHBhZ2VcbiAgICogYW5kIGNsZWFyaW5nIGZpbmlzaGVkIGZsYWcuXG4gICAqL1xuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XG4gICAgdGhpcy5maW5pc2hlZCA9IGZhbHNlO1xuICAgIHRoaXMuZmlyc3QoKTtcbiAgfVxuXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAvLyBMaWZlY3ljbGUgRXZlbnRzXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAvLyBXcmFwIHRoZSBcInVub3JkZXJlZCBsaXN0XCIgZWxlbWVudCBpbiBhIGpRdWVyeSBzZWxlY3Rvci5cbiAgICB0aGlzLmpRdWVyeUVsZW1lbnQgPSBqUXVlcnkodGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQpO1xuXG4gICAgLy8gSW5pdGlhbGlzZSB0aGUgU29obyBjb250cm9sLlxuICAgIHRoaXMualF1ZXJ5RWxlbWVudC53aXphcmQodGhpcy5fb3B0aW9ucyk7XG5cbiAgICAvLyBPbmNlIHRoZSBjb250cm9sIGlzIGluaXRpYWxpc2VkLCBleHRyYWN0IHRoZSBjb250cm9sXG4gICAgLy8gcGx1Zy1pbiBmcm9tIHRoZSBlbGVtZW50LiAgVGhlIGVsZW1lbnQgbmFtZSBpc1xuICAgIC8vIGRlZmluZWQgYnkgdGhlIHBsdWctaW4sIGJ1dCBpbiB0aGlzIGNhc2UgaXQgaXMgJ3dpemFyZCcuXG4gICAgdGhpcy53aXphcmQgPSB0aGlzLmpRdWVyeUVsZW1lbnQuZGF0YSgnd2l6YXJkJyk7XG5cbiAgICAvLyBJbml0aWFsaXplIGFueSBldmVudCBoYW5kbGVycy5cbiAgICB0aGlzLmpRdWVyeUVsZW1lbnRcbiAgICAgIC5vbignYmVmb3JlYWN0aXZhdGUnLCAoX2U6IEpRdWVyeS5UcmlnZ2VyZWRFdmVudCwgdGljazogU29ob1dpemFyZFRpY2spID0+IHRoaXMub25CZWZvcmVBY3RpdmF0ZSh0aWNrKSlcbiAgICAgIC5vbignYWN0aXZhdGVkJywgKF9lOiBKUXVlcnkuVHJpZ2dlcmVkRXZlbnQsIHRpY2s6IEpRdWVyeSkgPT4gdGhpcy5vbkFjdGl2YXRlZCh0aWNrKSlcbiAgICAgIC5vbignYWZ0ZXJhY3RpdmF0ZWQnLCAoX2U6IEpRdWVyeS5UcmlnZ2VyZWRFdmVudCwgdGljazogSlF1ZXJ5KSA9PiB0aGlzLmFmdGVyYWN0aXZhdGVkLm5leHQoeyB0aWNrIH0pKTtcblxuICAgIC8vIFJlc2V0IHRoZSBjYWNoZWQgc3RlcHMgaWYgdGhlIGxpc3Qgb2Ygc3RlcHMgY2hhbmdlcy5cbiAgICBpZiAodGhpcy5oZWFkZXIpIHtcbiAgICAgIHRoaXMuaGVhZGVyLnN0ZXBzPy5jaGFuZ2VzLnN1YnNjcmliZSgoKSA9PiB7XG4gICAgICAgIHRoaXMuX3N0ZXBzID0gW107XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgLy8gQWRkZWQgZGVsYXkgb3RoZXJ3aXNlIHRoZSBjb21wb25lbnQgaXMgbm90IGNvbXBsZXRlXG4gICAgLy8gY2F1c2luZyB0aGUgYWN0aXZlIHBhZ2UgdG8gbm90IGJlIGRpc3BsYXllZC5cbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmhlYWRlcikge1xuICAgICAgICBjb25zdCBzdGVwID0gdGhpcy5oZWFkZXIuc3RlcHM/LmZpbmQocyA9PiBzLmlzQ3VycmVudFRpY2soKSk7XG4gICAgICAgIHRoaXMucGFnZXNDb250YWluZXI/LnBhZ2VzLmZvckVhY2gocCA9PiBwLmhpZGRlbiA9ICghc3RlcCB8fCBzdGVwLnRpY2tJZCAhPT0gcC50aWNrSWQpKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIYW5kbGUgY29tcG9uZW50IGRlc3RydWN0aW9uIGJ5IGNsZWFyaW5nIGRvd24gdGhlIFNvSG9cbiAgICogd2l6YXJkIGNvbXBvbmVudC5cbiAgICpcbiAgICpcbiAgICovXG4gIG5nT25EZXN0cm95KCkge1xuICAgIGlmICh0aGlzLndpemFyZCkge1xuICAgICAgdGhpcy53aXphcmQuZGVzdHJveSgpO1xuICAgICAgdGhpcy53aXphcmQgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBvbkFjdGl2YXRlZCh0aWNrOiBKUXVlcnkpOiB2b2lkIHtcbiAgICAvLyBXaGVuIGFjdGl2YXRlZCAtIG1ha2Ugc3VyZSB0aGUgcmVzdCBvZiB0aGUgY29tcG9uZW50IGlzXG4gICAgLy8gdXBkYXRlZCAuLi5cbiAgICBpZiAodGljaykge1xuICAgICAgLy8gLi4uIGZpbmQgdGhlIGlkIG9mIHRoZSB0aWNrIGFjdGl2YXRlZCAuLi5cbiAgICAgIGNvbnN0IHRpY2tJZCA9IHRpY2suYXR0cigndGlja0lkJyk7XG5cbiAgICAgIC8vIC4uLiBpZiB3ZSBoYXZlIG9uZSAodG8gYXZvaWQgZXJyb3JzKSAuLi5cbiAgICAgIGlmICh0aWNrSWQpIHtcbiAgICAgICAgLy8gaGlkZSBhbGwgdGhlIGluYWN0aXZlIHBhZ2VzIGFuZCBzaG93IHRoZSBhY3RpdmUgcGFnZS5cbiAgICAgICAgdGhpcy5wYWdlc0NvbnRhaW5lcj8ucGFnZXMuZm9yRWFjaChcbiAgICAgICAgICAocCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRpY2tJZCA9PT0gcC50aWNrSWQpIHtcbiAgICAgICAgICAgICAgLy8gZmlyZSBhbiBldmVudCBvbiB0aGUgcGFnZS5cbiAgICAgICAgICAgICAgcC5maXJlQWN0aXZhdGVkKHsgdGljayB9KTtcblxuICAgICAgICAgICAgICAvLyAuLi4gc2hvdyBpdC5cbiAgICAgICAgICAgICAgcC5oaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG5cbiAgICAgICAgICAgICAgLy8gaGlkZSBpdC5cbiAgICAgICAgICAgICAgcC5oaWRkZW4gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIC4uLiBwdWJsaXNoLlxuICAgICAgICB0aGlzLmFjdGl2YXRlZC5uZXh0KHsgdGljayB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG9uQmVmb3JlQWN0aXZhdGUodGljazogU29ob1dpemFyZFRpY2spOiBib29sZWFuIHtcbiAgICAvLyBDaGVjayBmb3IgdmV0b2luZy5cbiAgICByZXR1cm4gdGhpcy5iZWZvcmVBY3RpdmF0ZSAhPSBudWxsID8gdGhpcy5iZWZvcmVBY3RpdmF0ZS5jYWxsKHRpY2spIDogdHJ1ZTtcbiAgfVxuXG4gIHByaXZhdGUgc3RlcENvdW50KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuaGVhZGVyPy5zdGVwcz8ubGVuZ3RoIHx8IDA7XG4gIH1cblxuICBwcml2YXRlIHN0ZXBzKCk6IFNvaG9XaXphcmRUaWNrQ29tcG9uZW50W10gfCB1bmRlZmluZWQge1xuICAgIGlmICghdGhpcy5fc3RlcHMgJiYgdGhpcy5oZWFkZXIpIHtcbiAgICAgIHRoaXMuX3N0ZXBzID0gdGhpcy5oZWFkZXI/LnN0ZXBzPy50b0FycmF5KCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9zdGVwcztcbiAgfVxuICBwcml2YXRlIHN0ZXBBdChpbmRleDogbnVtYmVyKTogU29ob1dpemFyZFRpY2tDb21wb25lbnQgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IHN0ZXBzID0gdGhpcy5zdGVwcygpO1xuICAgIHJldHVybiBzdGVwcyA/IHN0ZXBzW2luZGV4XSA6IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHByaXZhdGUgY3VycmVudEluZGV4KCk6IG51bWJlciB7XG4gICAgY29uc3Qgc3RlcHMgPSB0aGlzLnN0ZXBzKCk7XG4gICAgY29uc3QgY3VycmVudFN0ZXAgPSB0aGlzLmN1cnJlbnRTdGVwKCk7XG4gICAgcmV0dXJuIHN0ZXBzICYmIGN1cnJlbnRTdGVwID8gc3RlcHMuaW5kZXhPZihjdXJyZW50U3RlcCkgOiAtMTtcbiAgfVxuXG4gIHByaXZhdGUgY3VycmVudFN0ZXAoKTogU29ob1dpemFyZFRpY2tDb21wb25lbnQgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IHN0ZXBzID0gdGhpcy5zdGVwcygpO1xuICAgIHJldHVybiBzdGVwcyA/IHN0ZXBzLmZpbmQocyA9PiBzLmlzQ3VycmVudFRpY2soKSkgOiB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdfQ==
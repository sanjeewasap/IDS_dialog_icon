import { ChangeDetectionStrategy, Component, Output, EventEmitter, HostBinding, Input, Optional, Injector } from '@angular/core';
import { ArgumentHelper } from '../utils/argument.helper';
import * as i0 from "@angular/core";
import * as i1 from "./soho-datagrid.service";
export class SohoAngularEditorAdapter {
    constructor(component, args) {
        this.component = component;
        this.args = args;
        // Use the direct value from the dataset vs the formatted value
        this.useValue = true;
    }
    init(componentRef) {
        // Store the component.
        this.componentRef = componentRef;
        // The Soho datagrid wants an input control, otherwise it wont accept the editor
        // as a component.
        // @todo talk to Tim about removing this requirement.
        this.input = $(this.componentRef.location.nativeElement).find('input:first');
        this.className = this.componentRef.instance
            && this.componentRef.instance.className
            ? this.componentRef.instance.className : '.editor';
    }
    val(value) {
        return this.componentRef?.instance.val(value);
    }
    focus() {
        this.componentRef?.instance.focus();
    }
    destroy() {
        if (this.componentRef) {
            setTimeout(() => {
                this.componentRef?.destroy();
                this.componentRef = null;
            });
        }
    }
}
/**
 * Internal refresh hints used to determine what type of "refresh" is
 * required after the change detection process has completed and the
 * AfterViewChecked method is called.
 *
 * @todo resolve no-shadow
 */
// eslint-disable-next-line no-shadow
var RefreshHintFlags;
(function (RefreshHintFlags) {
    // No refresh required.
    RefreshHintFlags[RefreshHintFlags["None"] = 0] = "None";
    // The rows needs to be re-rendered.
    RefreshHintFlags[RefreshHintFlags["RenderRows"] = 1] = "RenderRows";
    // The header needs to be re-renendered.
    RefreshHintFlags[RefreshHintFlags["RenderHeader"] = 2] = "RenderHeader";
    // A full rebuild is required.
    RefreshHintFlags[RefreshHintFlags["Rebuild"] = 4] = "Rebuild";
})(RefreshHintFlags || (RefreshHintFlags = {}));
/**
 * Angular Wrapper for the Soho Data Grid Component.
 *
 * This component searches for an element with the attribute
 * 'soho-datagrid' in the parent's DOM tree, initialising it with
 * the Soho datagrid control.
 *
 * The data is provided either by a component input or an implementation
 * of the DataGridService interface, by specifying an implementation
 * on the hosting component, i.e.
 *
 * providers: [ provide: DataGridService, useClass: DataGridDemoService} ]
 */
export class SohoDataGridComponent {
    // -------------------------------------------
    // Soho Data Grid Types
    // -------------------------------------------
    // "auto" where columns and rows are obtained from the injected service
    // (if defined) or via the Inputs, otherwise.
    static { this.AUTO = 'auto'; }
    // 'content-only' where table elements are used to define the
    // columns and rows.
    static { this.CONTENT_ONLY = 'content-only'; }
    // -------------------------------------------
    // Component Inputs
    // -------------------------------------------
    /**
     * Sets the grid options for the data grid, marking this components
     * as requiring a full rebuild at the end of the change lifecycle.
     *
     * @param gridOptions - not null grid options.
     */
    set gridOptions(gridOptions) {
        ArgumentHelper.checkNotNull('gridOptions', gridOptions);
        this._gridOptions = gridOptions;
        this.checkForComponentEditors();
        this.checkForSummaryRowSettings();
        if (this.jQueryElement) {
            // No need to set the 'settings' as the Rebuild will create
            // a new control with the _gridOptions.
            this.markForRefresh('gridOptions', RefreshHintFlags.Rebuild);
        }
    }
    get gridOptions() {
        if (this.datagrid) {
            return this.datagrid.settings;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions;
    }
    /**
     * Defines which property in the data rows is to be used as the id of each
     * row of the data.
     *
     * @param idProperty string id
     */
    set idProperty(idProperty) {
        this._gridOptions.idProperty = idProperty;
        if (this.datagrid) {
            this.datagrid.settings.idProperty = idProperty;
            this.markForRefresh('idProperty', RefreshHintFlags.Rebuild);
        }
    }
    get idProperty() {
        if (this.datagrid) {
            return this.datagrid.settings.idProperty;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.idProperty;
    }
    /**
     * The value of the frozenColumns option - returns the requested
     * value if the control has not been created yet.
     */
    get frozenColumns() {
        if (this.datagrid) {
            return this.datagrid.settings.frozenColumns;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.frozenColumns;
    }
    /**
     * Sets the frozenColumns settings - will force a grid rebuild if the component has already been
     * created.
     *
     * @param frozenColumns - the frozenColumns settings.
     */
    set frozenColumns(frozenColumns) {
        this._gridOptions.frozenColumns = frozenColumns;
        if (this.datagrid) {
            this.datagrid.settings.frozenColumns = frozenColumns;
            // Force all a full rebuild of the control.
            this.markForRefresh('frozenColumns', RefreshHintFlags.Rebuild);
        }
    }
    /**
     * If true allows
     */
    set cellNavigation(cellNavigation) {
        this._gridOptions.cellNavigation = cellNavigation;
        if (this.jQueryElement) {
            this.datagrid.settings.cellNavigation = cellNavigation;
            this.markForRefresh('cellNavigation', RefreshHintFlags.RenderRows);
        }
    }
    get cellNavigation() {
        if (this.datagrid) {
            return this.datagrid.settings.cellNavigation;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.cellNavigation;
    }
    get isVerticalScrollToEnd() {
        if (this.datagrid) {
            return this.datagrid.isVerticalScrollToEnd;
        }
        return false;
    }
    /**
     * Changes the row navigation setting of the data grid. If rowNavigation
     * is "false” then a border is not displayed around the row.
     *
     * Defaults to true.
     *
     * @param rowlNavigation i "false” then grid will NOT show a border around the row.
     */
    set rowNavigation(rowNavigation) {
        this._gridOptions.rowNavigation = rowNavigation;
        if (this.jQueryElement) {
            this.datagrid.settings.rowNavigation = rowNavigation;
            this.markForRefresh('rowNavigation', RefreshHintFlags.RenderRows);
        }
    }
    get rowNavigation() {
        if (this.datagrid) {
            return this.datagrid.settings.rowNavigation;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.rowNavigation;
    }
    /**
     * If true, displays the rows in the grid using alternate shading, otherwise
     * all the rows use the same shading.
     */
    set alternateRowShading(alternateRowShading) {
        this._gridOptions.alternateRowShading = alternateRowShading;
        if (this.jQueryElement) {
            this.datagrid.settings.alternateRowShading = alternateRowShading;
            this.markForRefresh('alternateRowShading', RefreshHintFlags.RenderRows);
        }
    }
    get alternateRowShading() {
        if (this.datagrid) {
            return this.datagrid.settings.rowNavigation;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.alternateRowShading;
    }
    /**
     * The data to be displayed provided as an array
     * of json objects compatible with the column meta
     * data provided.
     *
     * @param dataset - array of json objects
     */
    set dataset(dataset) {
        this._gridOptions.dataset = dataset;
        if (this.jQueryElement) {
            const pagerInfo = {};
            this.datagrid.settings.dataset = dataset;
            this.ngZone.runOutsideAngular(() => {
                // @todo do we need hints as this may be bundled up with other changes.
                this.datagrid.updateDataset(dataset, pagerInfo);
            });
        }
    }
    /**
     * Return the dataset currently displayed by the datagrid.
     *
     * @return an array of objects.
     */
    get dataset() {
        // If the Soho control has been created, then the dataset
        // in the settings object will contain the rows currently
        // on display.
        if (this.datagrid) {
            return this.datagrid.settings.dataset;
        }
        // ... we've been called before the component has completed
        // initialisation, so no data has been set (or potentially
        // retrieved from a service), so the only option is the
        // Input dataset, which may be undefined.
        return this._gridOptions.dataset || [];
    }
    /**
     * If true the columns can be reorders; otherwise if false they are fixed.
     */
    set columnReorder(columnReorder) {
        this._gridOptions.columnReorder = columnReorder;
        if (this.datagrid) {
            this.datagrid.settings.columnReorder = columnReorder;
            this.markForRefresh('columnReorder', RefreshHintFlags.RenderHeader);
        }
    }
    get columnReorder() {
        if (this.datagrid) {
            return this.datagrid.settings.columnReorder;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.columnReorder;
    }
    set disableClientSort(disableClientSort) {
        this._gridOptions.disableClientSort = disableClientSort;
        if (this.datagrid) {
            this.datagrid.settings.disableClientSort = disableClientSort;
        }
    }
    get disableClientSort() {
        if (this.datagrid) {
            return this.datagrid.settings.disableClientSort;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.disableClientSort;
    }
    set disableClientFilter(disableClientFilter) {
        this._gridOptions.disableClientFilter = disableClientFilter;
        if (this.datagrid) {
            this.datagrid.settings.disableClientFilter = disableClientFilter;
        }
    }
    get disableClientFilter() {
        if (this.datagrid) {
            return this.datagrid.settings.disableClientFilter;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.disableClientFilter;
    }
    set resultsText(resultsText) {
        this._gridOptions.resultsText = resultsText;
        if (this.jQueryElement && this.datagrid) {
            this.datagrid.settings.resultsText = resultsText;
        }
    }
    set showFilterTotal(showFilterTotal) {
        this._gridOptions.showFilterTotal = showFilterTotal;
        if (this.datagrid) {
            this.datagrid.settings.showFilterTotal = showFilterTotal;
        }
    }
    get showFilterTotal() {
        if (this.datagrid) {
            return this.datagrid.settings.showFilterTotal;
        }
        return this._gridOptions.showFilterTotal;
    }
    /**
     * If true, the grid allows edits, otherwise if false edits are disabled.
     */
    set editable(editable) {
        this._gridOptions.editable = editable;
        if (this.datagrid) {
            this.datagrid.settings.editable = editable;
            this.markForRefresh('editable', RefreshHintFlags.Rebuild);
        }
    }
    get editable() {
        if (this.datagrid) {
            return this.datagrid.settings.editable;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.editable;
    }
    /**
     * Input that defines a function which is used to determine if a row is disabled, or not.
     */
    set isRowDisabled(isRowDisabled) {
        this._gridOptions.isRowDisabled = isRowDisabled;
        if (this.datagrid) {
            this.datagrid.settings.isRowDisabled = isRowDisabled;
            this.markForRefresh('isRowDisabled', RefreshHintFlags.RenderRows);
        }
    }
    get isRowDisabled() {
        if (this.datagrid) {
            return this.datagrid.settings.isRowDisabled;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.isRowDisabled;
    }
    set allowOneExpandedRow(allowOneExpandedRow) {
        this._gridOptions.allowOneExpandedRow = allowOneExpandedRow;
        if (this.datagrid) {
            this.datagrid.settings.allowOneExpandedRow = allowOneExpandedRow;
        }
    }
    get allowOneExpandedRow() {
        if (this.datagrid) {
            return this.datagrid.settings.allowOneExpandedRow;
        }
        return this._gridOptions.allowOneExpandedRow;
    }
    set rowTemplate(rowTemplate) {
        this._gridOptions.rowTemplate = rowTemplate;
        if (this.datagrid) {
            this.datagrid.settings.rowTemplate = rowTemplate;
        }
    }
    get rowTemplate() {
        if (this.datagrid) {
            return this.datagrid.settings.rowTemplate;
        }
        return this._gridOptions.rowTemplate;
    }
    set rowTemplateComponent(rowTemplateComponent) {
        this._gridOptions.rowTemplateComponent = rowTemplateComponent;
        if (this.datagrid) {
            this.datagrid.settings.rowTemplateComponent = rowTemplateComponent;
        }
    }
    get rowTemplateComponent() {
        if (this.datagrid) {
            return this.datagrid.settings.rowTemplateComponent;
        }
        return this._gridOptions.rowTemplateComponent;
    }
    set rowTemplateComponentInputs(rowTemplateComponentInputs) {
        this._gridOptions.rowTemplateComponentInputs = rowTemplateComponentInputs;
        if (this.datagrid) {
            this.datagrid.settings.rowTemplateComponentInputs = rowTemplateComponentInputs;
        }
    }
    get rowTemplateComponentInputs() {
        if (this.datagrid) {
            return this.datagrid.settings.rowTemplateComponentInputs;
        }
        return this._gridOptions.rowTemplateComponentInputs;
    }
    set rowTemplateField(rowTemplateField) {
        this._gridOptions.rowTemplateField = rowTemplateField;
        if (this.datagrid) {
            this.datagrid.settings.rowTemplateField = rowTemplateField;
        }
    }
    get rowTemplateField() {
        if (this.datagrid) {
            return this.datagrid.settings.rowTemplateField;
        }
        return this._gridOptions.rowTemplateField;
    }
    /**
     * If true, will select the cell text soon as entering edit mode
     */
    set selectOnEdit(selectOnEdit) {
        this._gridOptions.selectOnEdit = selectOnEdit;
        if (this.datagrid) {
            this.datagrid.settings.selectOnEdit = selectOnEdit;
            this.markForRefresh('editable', RefreshHintFlags.Rebuild);
        }
    }
    get selectOnEdit() {
        if (this.datagrid) {
            return this.datagrid.settings.selectOnEdit;
        }
        return this._gridOptions.selectOnEdit;
    }
    set isList(isList) {
        this._gridOptions.isList = isList;
        if (this.jQueryElement) {
            this.datagrid.settings.isList = isList;
            // calling rebuild as a brute force way of udpating the view.
            this.markForRefresh('isList', RefreshHintFlags.Rebuild);
        }
    }
    get isList() {
        if (this.datagrid) {
            return this.datagrid.settings.isList;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.isList;
    }
    set menuId(menuId) {
        this._gridOptions.menuId = menuId;
        if (this.jQueryElement) {
            this.datagrid.settings.menuId = menuId;
            this.markForRefresh('menuId', RefreshHintFlags.Rebuild);
        }
    }
    /** beforeOpen - ajax callback for open event */
    set menuBeforeOpen(menuBeforeOpen) {
        this._gridOptions.menuBeforeOpen = menuBeforeOpen;
        if (this.jQueryElement) {
            this.datagrid.settings.menuBeforeOpen = menuBeforeOpen;
            this.markForRefresh('menuBeforeOpen', RefreshHintFlags.Rebuild);
        }
    }
    get menuBeforeOpen() {
        return this._gridOptions.settings.menuBeforeOpen;
    }
    /**
     * Sets the row height for the grid, to be one of the supported options.
     *
     * @param rowHeight - 'extra-small' | 'small' | 'medium' | 'large'
     */
    set rowHeight(rowHeight) {
        this._gridOptions.rowHeight = rowHeight;
        if (this.jQueryElement) {
            this.datagrid.settings.rowHeight = rowHeight;
            this.ngZone.runOutsideAngular(() => {
                this.datagrid.rowHeight(rowHeight);
            });
        }
    }
    /**
     * Sets the height of the row to something other then the three built in rowHeights.
     *
     * @param fixedRowHeight Any integer
     */
    set fixedRowHeight(fixedRowHeight) {
        this._gridOptions.fixedRowHeight = fixedRowHeight;
        if (this.jQueryElement) {
            this.datagrid.settings.fixedRowHeight = fixedRowHeight;
            this.markForRefresh('fixedRowHeight', RefreshHintFlags.Rebuild);
        }
    }
    /**
     * Whether selection is enabled.
     *
     * @param selectable valid values are: 'multiple', 'single', 'mixed', 'siblings' and false.
     */
    set selectable(selectable) {
        this._gridOptions.selectable = selectable;
        if (this.jQueryElement) {
            // Just changing the datagrid.settings.selectable updates the datagrid view.
            this.datagrid.settings.selectable = selectable;
            this.markForRefresh('selectable', RefreshHintFlags.RenderRows);
        }
    }
    get selectable() {
        if (this.datagrid) {
            return this.datagrid.settings.selectable;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.selectable;
    }
    set showSelectAllCheckBox(showSelectAllCheckBox) {
        this._gridOptions.showSelectAllCheckBox = showSelectAllCheckBox;
        if (this.jQueryElement) {
            // Just changing the datagrid.settings.selectable updates the datagrid view.
            this.datagrid.settings.showSelectAllCheckBox = showSelectAllCheckBox;
            this.markForRefresh('showSelectAllCheckBox', RefreshHintFlags.Rebuild);
        }
    }
    get showSelectAllCheckBox() {
        return this._gridOptions.showSelectAllCheckBox;
    }
    set clickToSelect(clickToSelect) {
        this._gridOptions.clickToSelect = clickToSelect;
        if (this.jQueryElement) {
            this.datagrid.settings.clickToSelect = clickToSelect;
            this.markForRefresh('clickToSelect', RefreshHintFlags.RenderRows);
        }
    }
    get clickToSelect() {
        if (this.datagrid) {
            return this.datagrid.settings.clickToSelect;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.clickToSelect;
    }
    set toolbar(toolbar) {
        this._gridOptions.toolbar = toolbar;
        if (this.jQueryElement) {
            this.datagrid.settings.toolbar = toolbar;
            this.markForRefresh('toolbar', RefreshHintFlags.Rebuild);
        }
    }
    set initializeToolbar(initializeToolbar) {
        this._gridOptions.initializeToolbar = initializeToolbar;
        if (this.jQueryElement && this.datagrid) {
            this.datagrid.settings.initializeToolbar = initializeToolbar;
        }
    }
    get initializeToolbar() {
        if (this.datagrid) {
            return this.datagrid.settings.initializeToolbar;
        }
        return this._gridOptions.initializeToolbar;
    }
    set saveUserSettings(settingsForSave) {
        this._gridOptions.saveUserSettings = settingsForSave;
        if (this.jQueryElement) {
            this.datagrid.settings.saveUserSettings = settingsForSave;
        }
    }
    set paging(paging) {
        this._gridOptions.paging = paging;
        if (this.jQueryElement) {
            this.datagrid.settings.paging = paging;
            // todo: update soho data grids view - this.updatePagingInfo()?
            this.markForRefresh('paging', RefreshHintFlags.Rebuild);
        }
    }
    get paging() {
        if (this.datagrid) {
            return this.datagrid.settings.paging;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.paging;
    }
    set pagesize(pagesize) {
        this._gridOptions.pagesize = pagesize;
        if (this.jQueryElement) {
            this.datagrid.settings.pagesize = pagesize;
            this.markForRefresh('pagesize', RefreshHintFlags.Rebuild);
        }
    }
    set pagesizes(pagesizes) {
        this._gridOptions.pagesizes = pagesizes;
        if (this.jQueryElement) {
            this.datagrid.settings.pagesizes = pagesizes;
            this.markForRefresh('pagesizes', RefreshHintFlags.Rebuild);
        }
    }
    set indeterminate(indeterminate) {
        this._gridOptions.indeterminate = indeterminate;
        if (this.jQueryElement) {
            this.datagrid.settings.indeterminate = indeterminate;
            this.markForRefresh('indeterminate', RefreshHintFlags.Rebuild);
        }
    }
    set actionableMode(actionableMode) {
        this._gridOptions.actionableMode = actionableMode;
        if (this.jQueryElement) {
            this.datagrid.settings.actionableMode = actionableMode;
            this.markForRefresh('actionableMode', RefreshHintFlags.Rebuild);
        }
    }
    get actionableMode() {
        if (this.datagrid) {
            return this.datagrid.settings.actionableMode;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.actionableMode;
    }
    set saveColumns(saveColumns) {
        this._gridOptions.saveColumns = saveColumns;
        if (this.jQueryElement) {
            this.datagrid.settings.saveColumns = saveColumns;
            this.markForRefresh('saveColumns', RefreshHintFlags.Rebuild);
        }
    }
    /**
     * Input for the source function.
     *
     * @param source the dataset's source function.
     */
    set source(source) {
        this.updateSource(source);
        if (this.jQueryElement) {
            this.datagrid.settings.source = source;
            this.markForRefresh('source', RefreshHintFlags.Rebuild);
        }
    }
    /**
     * Enables or disables the filter bar on the grid.
     *
     * @param filterable if true, the filter bar is displayed; otherwise no filter bar is displayed.
     */
    set filterable(filterable) {
        this._gridOptions.filterable = filterable;
        if (this.jQueryElement) {
            this.datagrid.settings.filterable = filterable;
            this.markForRefresh('filterable', RefreshHintFlags.Rebuild);
        }
    }
    get filterable() {
        if (this.datagrid) {
            return this.datagrid.settings.filterable;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.filterable;
    }
    set filterWhenTyping(filterWhenTyping) {
        this._gridOptions.filterWhenTyping = filterWhenTyping;
        if (this.jQueryElement && this.datagrid) {
            this.datagrid.settings.filterWhenTyping = filterWhenTyping;
        }
    }
    get filterWhenTyping() {
        if (this.datagrid) {
            return this.datagrid.settings.filterWhenTyping;
        }
        return this._gridOptions.filterWhenTyping;
    }
    /**
     * If true the datagrid is displayed as a tree, otherwise
     * the grid is displayed as flat rows.
     *
     * This field is dynamic, and will cause the grid to be rebuilt
     * if changed.
     *
     * @param treeGrid - boolean flag indicating if the data is hierarchical.
     */
    set treeGrid(treeGrid) {
        if (treeGrid !== this._gridOptions.treeGrid) {
            this._gridOptions.treeGrid = treeGrid;
            // If the jQuery control has been initialised, update it.
            if (this.jQueryElement) {
                this.datagrid.settings.treeGrid = treeGrid;
                this.markForRefresh('treeGrid', RefreshHintFlags.Rebuild);
            }
        }
    }
    get treeGrid() {
        if (this.datagrid) {
            return this.datagrid.settings.treeGrid;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.treeGrid;
    }
    /**
     * Returns the unqiue identifier; which may be undefined.
     */
    get uniqueId() {
        if (this.datagrid) {
            return this.datagrid.settings.uniqueId;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.uniqueId;
    }
    /**
     * Sets the unqiueId - will force a grid rebuild if the component has already been
     * created.
     *
     * @param unqiueId - the new id.
     */
    set uniqueId(uniqueId) {
        this._gridOptions.uniqueId = uniqueId;
        if (this.datagrid) {
            this.datagrid.settings.uniqueId = uniqueId;
            // Force all a full rebuild of the control.
            this.markForRefresh('uniqueId', RefreshHintFlags.Rebuild);
        }
    }
    /**
     * The value of the rowReorder flag - returns the requested value if the control has not been created yet.
     */
    get rowReorder() {
        if (this.datagrid) {
            return this.datagrid.settings.rowReorder;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.rowReorder;
    }
    /**
     * Sets the rowReorder flag - will force a grid rebuild if the component has already been
     * created.
     *
     * @param rowReorder - if true the rows will be reorderable; otherwise they will not.
     */
    set rowReorder(value) {
        this._gridOptions.rowReorder = value;
        if (this.datagrid) {
            this.datagrid.settings.rowReorder = value;
            // Force all a full rebuild of the control.
            this.markForRefresh('rowReorder', RefreshHintFlags.Rebuild);
        }
    }
    /**
     * The value of the showDirty flag - returns the requested value if the control has not been created yet.
     */
    get showDirty() {
        if (this.datagrid) {
            return this.datagrid.settings.showDirty;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.showDirty;
    }
    /**
     * Sets the showDirty flag - will force a grid rebuild if the component has already been
     * created.
     *
     * @param showDirty - if true then dirty rows will be highlighted; otherwise they will not.
     */
    set showDirty(value) {
        this._gridOptions.showDirty = value;
        if (this.datagrid) {
            this.datagrid.settings.showDirty = value;
            // Force all a full rebuild of the control.
            this.markForRefresh('showDirty', RefreshHintFlags.Rebuild);
        }
    }
    /**
     * Sets the resizeMode option to changes the column resize behavior.
     *
     * @param resizeMode - if true then dirty rows will be highlighted; otherwise they will not.
     */
    set resizeMode(value) {
        this._gridOptions.resizeMode = value;
        if (this.datagrid) {
            this.datagrid.settings.resizeMode = value;
            this.markForRefresh('resizeMode', RefreshHintFlags.None);
        }
    }
    /**
     * Sets the datagrid header background color, either dark or light.
     * @param headerBackgroundColor - default value is 'dark'
     */
    set headerBackgroundColor(value) {
        this._gridOptions.headerBackgroundColor = value;
        if (this.datagrid) {
            this.datagrid.settings.headerBackgroundColor = value;
        }
    }
    set headerMenuId(value) {
        this._gridOptions.headerMenuId = value;
        if (this.datagrid) {
            this.datagrid.settings.headerMenuId = value;
        }
    }
    get headerMenuId() {
        if (this.datagrid) {
            return this.datagrid.settings.headerMenuId;
        }
        return this._gridOptions.headerMenuId;
    }
    set headerMenuSelected(headerMenuSelected) {
        this._gridOptions.headerMenuSelected = headerMenuSelected;
        if (this.jQueryElement && this.datagrid) {
            this.datagrid.settings.headerMenuSelected = headerMenuSelected;
        }
    }
    set headerMenuBeforeOpen(headerMenuBeforeOpen) {
        this._gridOptions.headerMenuBeforeOpen = headerMenuBeforeOpen;
        if (this.jQueryElement && this.datagrid) {
            this.datagrid.settings.headerMenuBeforeOpen = headerMenuBeforeOpen;
        }
    }
    get disableRowDeactivation() {
        if (this.datagrid) {
            return this.datagrid.settings.disableRowDeactivation;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.disableRowDeactivation;
    }
    set disableRowDeactivation(value) {
        this._gridOptions.disableRowDeactivation = value;
        if (this.datagrid) {
            this.datagrid.settings.disableRowDeactivation = value;
        }
    }
    get disableRowDeselection() {
        if (this.datagrid) {
            return this.datagrid.settings.disableRowDeselection;
        }
        return this._gridOptions.disableRowDeselection;
    }
    set disableRowDeselection(value) {
        this._gridOptions.disableRowDeselection = value;
        if (this.datagrid) {
            this.datagrid.settings.disableRowDeselection = value;
        }
    }
    /**
     * Used to hold an object that can be referenced in formatters
     * and editors or anywhere else a datagrid reference is available
     */
    set userObject(userObject) {
        this._gridOptions.userObject = userObject;
        if (this.datagrid) {
            this.datagrid.settings.userObject = userObject;
        }
    }
    get userObject() {
        if (this.datagrid) {
            return this.datagrid.settings.userObject;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.userObject;
    }
    /**
     * The value of the groupable option - returns the requested
     * value if the control has not been created yet.
     */
    get groupable() {
        if (this.datagrid) {
            return this.datagrid.settings.groupable;
        }
        // ... we've been called before the component has completed
        // initialisation, so return the current value from the
        // options.
        return this._gridOptions.groupable;
    }
    /**
     * Sets the groupable settings - will force a grid rebuild if the component has already been
     * created.
     *
     * @param groupable - the groupable settings.
     */
    set groupable(value) {
        this._gridOptions.groupable = value;
        if (this.datagrid) {
            this.datagrid.settings.groupable = value;
            // Force all a full rebuild of the control.
            this.markForRefresh('groupable', RefreshHintFlags.Rebuild);
        }
    }
    /**
     * The array of data to display in the grid.
     *
     * @param an array of objects matching the column definition.
     *
     * As this method can be called before the control is
     * initialised, stash the data for later, and only
     * call loadData on the control api if ready.
     */
    set data(data) {
        this.gridData = data;
        if (data && this.jQueryElement) {
            this.ngZone.runOutsideAngular(() => {
                // @todo add hints for this too, as other changes may force a rebuild?
                this.datagrid?.loadData(data);
            });
        }
    }
    /**
     * The array of columns to display in the grid.
     *
     * As this method can be called before the control is
     * initialised, stash the data for later, and only
     * call loadData on the control api if ready.
     */
    set columns(columns) {
        this._gridOptions.columns = columns || [];
        this.checkForComponentEditors();
        if (columns && this.jQueryElement) {
            this.ngZone.runOutsideAngular(() => {
                this.datagrid?.updateColumns(this._gridOptions.columns, this._gridOptions.columnGroups);
                this.datagrid.setOriginalColumns();
            });
        }
    }
    /**
     *
     * Summary row columns settingss
     */
    set summaryRowColumns(summaryRowColumns) {
        this._gridOptions.summaryRowColumns = summaryRowColumns;
        this.checkForSummaryRowSettings();
        if (this._gridOptions.columns && this.jQueryElement) {
            this.ngZone.runOutsideAngular(() => this.datagrid?.updateColumns(this._gridOptions.columns, this._gridOptions.columnGroups));
        }
    }
    /**
     * If true an extra column will be added to the end that fills the space.
     * This allows columns to not stretch to fill so they are a constant size.
     * This setting cannot be used with percent columns.
     */
    set spacerColumn(spacerColumn) {
        this._gridOptions.spacerColumn = spacerColumn;
        if (this.jQueryElement) {
            this.datagrid.settings.spacerColumn = spacerColumn;
            this.markForRefresh('spacerColumn', RefreshHintFlags.Rebuild);
        }
    }
    /**
     * If true an extra column is currently added to the end that fills the space.
     */
    get spacerColumn() {
        return this._gridOptions?.spacerColumn;
    }
    set sizeColumnsEqually(sizeColumnsEqually) {
        this._gridOptions.sizeColumnsEqually = sizeColumnsEqually;
        if (this.jQueryElement && this.datagrid) {
            this.datagrid.settings.sizeColumnsEqually = sizeColumnsEqually;
        }
    }
    get sizeColumnsEqually() {
        if (this.datagrid) {
            return this.datagrid.settings.sizeColumnsEqually;
        }
        return this._gridOptions.sizeColumnsEqually;
    }
    set expandableRow(expandableRow) {
        this._gridOptions.expandableRow = expandableRow;
        if (this.jQueryElement && this.datagrid) {
            this.datagrid.settings.expandableRow = expandableRow;
        }
    }
    get expandableRow() {
        if (this.datagrid) {
            return this.datagrid.settings.expandableRow;
        }
        return this._gridOptions.expandableRow;
    }
    set redrawOnResize(redrawOnResize) {
        this._gridOptions.redrawOnResize = redrawOnResize;
        if (this.jQueryElement && this.datagrid) {
            this.datagrid.settings.redrawOnResize = redrawOnResize;
        }
    }
    get redrawOnResize() {
        if (this.datagrid) {
            return this.datagrid.settings.redrawOnResize;
        }
        return this._gridOptions.redrawOnResize;
    }
    set exportConvertNegative(exportConvertNegative) {
        this._gridOptions.exportConvertNegative = exportConvertNegative;
        if (this.jQueryElement && this.datagrid) {
            this.datagrid.settings.exportConvertNegative = exportConvertNegative;
        }
    }
    get exportConvertNegative() {
        if (this.datagrid) {
            return this.datagrid.settings.exportConvertNegative;
        }
        return this._gridOptions.exportConvertNegative;
    }
    /* Experimental Feature to stick on the top of the page. This feature has numerous limitations. */
    set stickyHeader(stickyHeader) {
        this._gridOptions.stickyHeader = stickyHeader;
        if (this.jQueryElement) {
            this.datagrid.settings.stickyHeader = stickyHeader;
            this.markForRefresh('stickyHeader', RefreshHintFlags.Rebuild);
        }
    }
    /* Experimental Feature to stick on the top of the page. This feature has numerous limitations. */
    set attributes(attributes) {
        this._gridOptions.attributes = attributes;
        if (this.jQueryElement) {
            this.datagrid.settings.attributes = attributes;
            this.markForRefresh('attributes', RefreshHintFlags.Rebuild);
        }
    }
    /**
     * Determines the sizing method for the auto sizing columns.
     */
    set columnSizing(columnSizing) {
        this._gridOptions.columnSizing = columnSizing;
        if (this.jQueryElement) {
            this.datagrid.settings.columnSizing = columnSizing;
            this.markForRefresh('columnSizing', RefreshHintFlags.Rebuild);
        }
    }
    /**
     * Determines the sizing method for the auto sizing columns.
     */
    get columnSizing() {
        return this._gridOptions.columnSizing;
    }
    /**
     * The name of the column stretched to fill the width of the datagrid,
     * or 'last' where the last column will be stretched to fill the
     * remaining space.
     *
     * @param stretchColumn - the name of the column to stretch; or 'last',
     */
    set stretchColumn(stretchColumn) {
        this._gridOptions.stretchColumn = stretchColumn;
        if (this.jQueryElement) {
            this.datagrid.settings.stretchColumn = stretchColumn;
            this.markForRefresh('stretchColumn', RefreshHintFlags.Rebuild);
        }
    }
    /**
     * The name of the column to stretch, or 'last' if the
     * last column is stretched.
     */
    get stretchColumn() {
        return this._gridOptions.stretchColumn;
    }
    /**
     * If true, column will recalculate its width and stretch if required on column change.
     *
     * @param stretchColumnOnChange - If false stretch logic wont run on column change.
     */
    set stretchColumnOnChange(stretchColumnOnChange) {
        this._gridOptions.stretchColumnOnChange = stretchColumnOnChange;
        if (this.jQueryElement) {
            this.datagrid.settings.stretchColumnOnChange = stretchColumnOnChange;
            this.markForRefresh('stretchColumnOnChange', RefreshHintFlags.Rebuild);
        }
    }
    /**
     * The current value of stretchColumnOnChange.
     */
    get stretchColumnOnChange() {
        return this._gridOptions.stretchColumnOnChange;
    }
    /**
     * Whether to show the page size selector or not.
     */
    set showPageSizeSelector(showPageSizeSelector) {
        this._gridOptions.showPageSizeSelector = showPageSizeSelector;
        if (this.jQueryElement) {
            this.datagrid.settings.showPageSizeSelector = showPageSizeSelector;
            // todo: need a function in datagrid.js that allows toggling of the page size selector. for now I have to rebuild the datagrid.
            this.markForRefresh('showPageSizeSelector', RefreshHintFlags.Rebuild);
        }
    }
    /**
     * If true, hides the pager if there's only one page worth of results.
     */
    set hidePagerOnOnePage(hidePagerOnOnePage) {
        this._gridOptions.hidePagerOnOnePage = hidePagerOnOnePage;
        if (this.jQueryElement) {
            this.datagrid.settings.hidePagerOnOnePage = hidePagerOnOnePage;
            this.markForRefresh('hidePagerOnOnePage', RefreshHintFlags.Rebuild);
        }
    }
    /**
     * The column groups
     *
     * As this method can be called before the control is
     * initialised, stash the data for later, and only
     * call loadData on the control api if ready.
     */
    set columnGroup(columnGroups) {
        this._gridOptions.columnGroups = columnGroups || [];
        if (columnGroups && this._gridOptions.columns && this.jQueryElement) {
            // @todo add hints for this too, as other changes may force a rebuild?
            this.datagrid.updateColumns(this._gridOptions.columns, columnGroups);
        }
    }
    get columnGroup() {
        if (this.datagrid) {
            return this.datagrid.settings.columnGroups || [];
        }
        return this._gridOptions.columnGroups || [];
    }
    /**
     * The `emptyMessage` data grid option.
     * Use null or undefined to remove any empty message.
     */
    set emptyMessage(emptyMessage) {
        // Check for undefined/null and reset to the default message
        if (!emptyMessage) {
            // soho only takes a null here so making it so any !emptyMessage gets set to null
            emptyMessage = null;
        }
        this._gridOptions.emptyMessage = emptyMessage;
        if (this.jQueryElement) {
            this.datagrid.settings.emptyMessage = emptyMessage;
            this.ngZone.runOutsideAngular(() => {
                this.datagrid?.setEmptyMessage(emptyMessage);
            });
        }
    }
    get emptyMessage() {
        return this._gridOptions.emptyMessage;
    }
    /**
     * Enable toolips on the cell values, at a cost of performance.
     */
    set enableTooltips(value) {
        this._gridOptions.enableTooltips = value;
        if (this.jQueryElement) {
            this.datagrid.settings.enableTooltips = value;
            this.markForRefresh('enableTooltips', RefreshHintFlags.Rebuild);
        }
    }
    get enableTooltips() {
        return this._gridOptions.enableTooltips;
    }
    set selectChildren(selectChildren) {
        this._gridOptions.selectChildren = selectChildren;
        if (this.jQueryElement) {
            this.datagrid.settings.selectChildren = selectChildren;
            this.markForRefresh('selectChildren', RefreshHintFlags.RenderRows);
        }
    }
    get selectChildren() {
        if (this.datagrid) {
            return this.datagrid.settings.selectChildren;
        }
        return this._gridOptions.selectChildren;
    }
    set allowChildExpandOnMatch(allowChildExpandOnMatch) {
        this._gridOptions.allowChildExpandOnMatch = allowChildExpandOnMatch;
        if (this.jQueryElement && this.datagrid) {
            this.datagrid.settings.allowChildExpandOnMatch = allowChildExpandOnMatch;
        }
    }
    get allowChildExpandOnMatch() {
        if (this.datagrid) {
            return this.datagrid.settings.allowChildExpandOnMatch;
        }
        return this._gridOptions.allowChildExpandOnMatch;
    }
    /**
     * Defines the source type of the grid, either:
     *
     * - "content-only" where table elements are provided in the body.
     * - "auto" where columns and rows are obtained for an
     *   injected service (if defined) or via the Inputs if not.
     *
     * Allow the input to be overriden, to match the component selector.
     */
    // eslint-disable-next-line @angular-eslint/no-input-rename
    set sohoDatagrid(datagridType) {
        this.datagridType = datagridType && datagridType.toString() != '' ? datagridType : SohoDataGridComponent.AUTO;
    }
    /**
     * Sets the role for the grid.
     */
    get datagridRole() {
        if (this._gridOptions.treeGrid) {
            return 'treegrid';
        }
        else {
            return 'datagrid';
        }
    }
    /**
     * Constructor.
     *
     * @param ngZone - the angular zone for this component.
     * @param elementRef - the element matching the component's selector.
     * @param changeDetector - the component's change detector.
     * @param resolver - component factory resolver (for editors/formatters).
     * @param injector - dynamic component injector (for editors/formatters).
     * @param datagridService - service for obtaining data (optional)
     */
    constructor(ngZone, elementRef, changeDetector, resolver, injector, app, datagridService) {
        this.ngZone = ngZone;
        this.elementRef = elementRef;
        this.changeDetector = changeDetector;
        this.resolver = resolver;
        this.injector = injector;
        this.app = app;
        this.datagridService = datagridService;
        // -------------------------------------------
        // Component Output
        // -------------------------------------------
        // This event is fired when a row (or rows) are selected.
        this.selected = new EventEmitter();
        // This event is fired when a cell is changed.
        this.cellchange = new EventEmitter();
        // This event is fired when a row is removed.
        this.rowRemove = new EventEmitter();
        // This event is fired when a row is added.
        this.rowAdd = new EventEmitter();
        // This event is fired when the grid is filtered.
        this.filtered = new EventEmitter();
        // This event is fired when a row in the grid is expanded.
        this.expandrow = new EventEmitter();
        /**
         * This event is fired when a key is pressed
         *
         * @todo remove override of native attribute
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.keydown = new EventEmitter();
        // This event is fired when edit mode is exited.
        this.exiteditmode = new EventEmitter();
        // This event is fired before edit mode is started.
        this.beforeentereditmode = new EventEmitter();
        /**
         * This event is fired when edit mode is entered.
         */
        this.entereditmode = new EventEmitter();
        // This event is fired when a row in the grid is collapsed.
        this.collapserow = new EventEmitter();
        this.sorted = new EventEmitter();
        this.nextPage = new EventEmitter();
        this.previousPage = new EventEmitter();
        this.firstPage = new EventEmitter();
        this.lastPage = new EventEmitter();
        this.pageSizeChange = new EventEmitter();
        this.beforePaging = new EventEmitter();
        this.afterPaging = new EventEmitter();
        this.beforeRowActivated = new EventEmitter();
        this.rowActivated = new EventEmitter();
        this.rowDeactivated = new EventEmitter();
        this.rowClicked = new EventEmitter();
        this.rowDoubleClicked = new EventEmitter();
        this.contextMenu = new EventEmitter();
        this.rowReordered = new EventEmitter();
        this.openFilterRow = new EventEmitter();
        this.closeFilterRow = new EventEmitter();
        this.settingsChanged = new EventEmitter();
        this.rendered = new EventEmitter();
        this.afterRender = new EventEmitter();
        this.verticalScroll = new EventEmitter();
        this.filteroperatorchanged = new EventEmitter();
        // -------------------------------------------
        // Host Bindings
        // -------------------------------------------
        // Set the enable / disabled class (not working)
        this.isDisabled = false;
        // An internal gridOptions object that gets updated by using
        // the component's Inputs()
        this._gridOptions = {
            stretchColumn: 'last',
            enableTooltips: false
        };
        // Provides hints to the component after the next refresh.
        this.refreshHint = RefreshHintFlags.None;
        // List of option names changed (for debugging).
        this.changedOptions = [];
        // List of dynamic formatter components - keyed by the original args.
        this.cellComponents = [];
        // List of dynamic rowtemplate components - keyed by the original args.
        this.rowTemplateComponents = [];
    }
    // -------------------------------------------
    // Public API
    // -------------------------------------------
    getColumnGroup(idx) {
        return this.datagrid.getColumnGroup(idx);
    }
    getColumnById(idx) {
        return this.datagrid.getColumnGroup(idx);
    }
    /**
     * Overrides the sort function used by the datagrid,
     * can only be used once the grid has been created.
     *
     * @todo this should made lazy.
     */
    setSortFunction(sortFunction) {
        if (this.datagrid) {
            this.datagrid.sortFunction = sortFunction;
        }
        else {
            throw new Error('datagrid not initialized.');
        }
    }
    /**
     * Sets the column and direction to sort the dataset on.
     *
     * Can only be used once the grid has been initialised, otherwise
     * an error is thrown.
     *
     * @param columnId the id of the column to sort on; must be non-null.
     * @param ascending if true sort ascending, otherwise descending.  If not supplied the setting is toggled.
     */
    setSortColumn(columnId, ascending) {
        if (this.datagrid) {
            this.ngZone.runOutsideAngular(() => {
                this.datagrid.setSortColumn(columnId, ascending);
            });
        }
        else {
            throw new Error('datagrid not initialized');
        }
    }
    /**
     * Used to set the sort indicator on a column when disableClientSort is set to true.
     */
    setSortIndicator(columnId, ascending) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid.setSortIndicator(columnId, ascending);
        });
    }
    pageSize() {
        return this.datagrid?.pagerAPI.settings.pagesize;
    }
    updatePagingInfo(pageInfo) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.pagerAPI.updatePagingInfo(pageInfo);
        });
    }
    enable() {
        this.isDisabled = false;
    }
    disable() {
        this.isDisabled = true;
    }
    updateRow(idx, row) {
        ArgumentHelper.checkNotNull('row', row);
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.updateRow(idx, row);
        });
    }
    hideColumn(id) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.hideColumn(id);
        });
    }
    showColumn(id) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.showColumn(id);
        });
    }
    columnById(id) {
        return this.datagrid.columnById(id);
    }
    getColumns() {
        return this.datagrid.settings.columns;
    }
    getColumnGroups() {
        return this.datagrid.settings.columnGroups;
    }
    /** Get the column index from the col's id */
    columnIdxById(columnId) {
        return this.datagrid.columnIdxById(columnId);
    }
    getHeaderRowColumn(fld) {
        return this.datagrid.getHeaderRowColumn(fld);
    }
    /**
     * Adds a row of data to the datagrid at the given optional location.
     *
     * @param data the row of data to add.
     * @param location the optional location, 'top' or 'bottom' or a number.
     */
    addRow(data, location) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid.addRow(data, location);
        });
    }
    /**
     * Adds multiple rows of data to the datagrid at the given optional location.
     * @param data Array of data to add.
     * @param location the optional location, 'top' or 'bottom' or a number.
     */
    addRows(data, location) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid.addRows(data, location);
        });
    }
    /**
     * Removes a row matching the rowIndex passed in from the data and grid.
     *
     * @param rowIndex the index of the row to remove.
     */
    removeRow(rowIndex, noSync, noTrigger) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.removeRow(rowIndex, noSync, noTrigger);
        });
    }
    /**
     * Returns an array of the dirty rows in the grid.
     *
     * @return an array of the dirty rows in the grid.
     */
    dirtyRows() {
        return this.ngZone.runOutsideAngular(() => {
            return this.datagrid.dirtyRows();
        });
    }
    /**
     * Returns an array of the dirty cells in the grid.
     *
     * @return an array of the dirty cells in the grid.
     */
    dirtyCells() {
        return this.ngZone.runOutsideAngular(() => {
            return this.datagrid.dirtyCells();
        });
    }
    /**
     * Clear all dirty cells.
     */
    clearDirty() {
        return this.ngZone.runOutsideAngular(() => {
            this.datagrid?.clearDirty();
        });
    }
    /**
     * Commit the cell that's currently in edit mode.
     */
    commitCellEdit() {
        return this.ngZone.runOutsideAngular(() => {
            this.datagrid?.commitCellEdit();
        });
    }
    /**
     * Clear all dirty cells in given row.
     *
     * @param row - the row number (idx) of the row.
     */
    clearDirtyRow(row) {
        return this.ngZone.runOutsideAngular(() => {
            this.datagrid?.clearDirtyRow(row);
        });
    }
    /**
     * Clear dirty on given cell.
     *
     * @param row - the row number (idx) of the row
     * @param cell - the cell number (idx) of the cell
     */
    clearDirtyCell(row, cell) {
        return this.ngZone.runOutsideAngular(() => {
            this.datagrid?.clearDirtyCell(row, cell);
        });
    }
    /**
     * Clear all error for a given cell in a row
     *
     * @param row The row index.
     * @param cell The cell index.
     */
    clearAllCellError(row, cell) {
        this.ngZone.runOutsideAngular(() => this.datagrid?.clearAllCellError(row, cell));
    }
    /**
     * Clear a cell with an error of a given type
     *
     * @param row The row index.
     * @param cell The cell index.
     * @param type of error.
     */
    clearCellError(row, cell, type) {
        this.ngZone.runOutsideAngular(() => this.datagrid?.clearCellError(row, cell, type));
    }
    /**
     * Clear a row level all errors, alerts, info messages
     *
     * @param row The row index.
     */
    clearRowError(row) {
        this.ngZone.runOutsideAngular(() => this.datagrid?.clearRowError(row));
    }
    /**
     * Clear all errors, alerts and info messages in entire datagrid.
     */
    clearAllErrors() {
        this.ngZone.runOutsideAngular(() => this.datagrid?.clearAllErrors());
    }
    /** Validate all rows and cells in the entire grid if they have validation on the column */
    showRowError(row, message, type) {
        this.ngZone.runOutsideAngular(() => this.datagrid?.showRowError(row, message, type));
    }
    /** Validate all cells in a specific row */
    validateRow(row) {
        this.ngZone.runOutsideAngular(() => this.datagrid?.validateRow(row));
    }
    /**
     * Set and show a message/error on the given row.
     */
    validateAll() {
        this.ngZone.runOutsideAngular(() => this.datagrid?.validateAll());
    }
    /**
     * Sets the status of a given row in the grid.
     *
     * @param idx - the row number (idx) of the row
     * @param status - status class name e.g. 'error'
     * @param tooltip - string value for tooltip message e.g. 'Error'
     */
    rowStatus(idx, status, tooltip) {
        return this.ngZone.runOutsideAngular(() => {
            this.datagrid?.rowStatus(idx, status, tooltip);
        });
    }
    /**
     * Return an array containing all of the currently modified rows, the type of modification
     * and the cells that are dirty and the data.
     *
     * @returns An keyed object showing the dirty row info.
     */
    getModifiedRows() {
        return this.ngZone.runOutsideAngular(() => {
            return this.datagrid.getModifiedRows();
        });
    }
    /**
     * Set a cell to dirty and add the dirty icon visually.
     *
     * @param row The row index
     * @param cell The cell index
     * @param toggle True to set it and false to remove it
     * @param data Adds dirty data to the internal tracker
     */
    setDirtyIndicator(row, cell, toggle, data) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.setDirtyIndicator(row, cell, toggle, data);
        });
    }
    /**
     * Removes all selected rows
     */
    removeSelected() {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.removeSelected();
        });
    }
    /**
     * Toggles the display of the filter row.
     */
    toggleFilterRow() {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.toggleFilterRow();
        });
    }
    /**
     * Accept conditions from outside or pull from filter row
     */
    applyFilter(conditions) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.applyFilter(conditions);
        });
    }
    /**
     * Set the filter row from passed data / settings
     */
    setFilterConditions(conditions) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.setFilterConditions(conditions);
        });
    }
    /**
     * Get filter conditions in array form from the UI
     */
    filterConditions() {
        return this.ngZone.runOutsideAngular(() => {
            return this.datagrid.filterConditions();
        });
    }
    /**
     * Clears any filter defined, for this datagrid.
     */
    clearFilter() {
        this.ngZone.runOutsideAngular(() => {
            if (this.datagrid) {
                this.datagrid.clearFilter();
            }
        });
    }
    /**
     * Returns the rows currently selected on the data grid.
     *
     * @return an array of SohoDataGridSelectedRow instances.
     * @deprecated use selectedRows instead.
     */
    getSelectedRows() {
        return this.ngZone.runOutsideAngular(() => this.selectedRows());
    }
    /**
     * Returns the rows currently selected on the data grid.
     *
     * @return an array of SohoDataGridSelectedRow instances.
     */
    selectedRows() {
        return this.ngZone.runOutsideAngular(() => {
            return this.datagrid.selectedRows();
        });
    }
    /**
     * Selects all the rows in the grid.
     */
    selectAllRows() {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.selectAllRows();
        });
    }
    /**
     * Unselects all the rows in the grid.
     */
    unSelectAllRows() {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.unSelectAllRows();
        });
    }
    /**
     * Sets the selected status of the specified row in the data grid.
     *
     * @param idx - the row number (idx) of the row to select.
     * @deprecated - use selectRows instead.
     */
    selectRow(idx) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.selectRow(idx);
        });
    }
    /**
     * Deselects the specified row in the data grid.
     *
     * @param idx - the row number (idx) of the row to deselect.
     */
    unselectRow(idx) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.unselectRow(idx);
        });
    }
    /**
     * Selects a range of rows based on the provided row indexes.
     *
     * @param start - the start index
     * @param end - then end index
     */
    selectRange(start, end) {
        const range = [start, end];
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.selectRowsBetweenIndexes(range);
        });
    }
    /**
     * Set the selected rows by passing the row index or an array of row indexes
     */
    selectRows(row) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.selectRows(row);
        });
    }
    /**
     * Set the status of the checkbox on the header.
     *
     * @param state 'all', 'partial' or 'all'.
     */
    setHeaderCheckboxState(state) {
        const headerCheckbox = this.jQueryElement?.find('.datagrid-header').find('.datagrid-checkbox');
        if (headerCheckbox) {
            if (state === 'partial') {
                headerCheckbox.data('selected', 'partial')
                    .addClass('is-checked is-partial');
            }
            if (state === 'all') {
                headerCheckbox.data('selected', 'all')
                    .addClass('is-checked').removeClass('is-partial');
            }
            if (state === 'none') {
                headerCheckbox.data('selected', 'none')
                    .removeClass('is-checked is-partial');
            }
        }
    }
    /**
     * Activate the row of the passed-in idx.
     * NOTE: valid only when selection mode is 'mixed'
     */
    activateRow(idx) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.activateRow(idx);
        });
    }
    /**
     * Deactivate the currently activated row.
     *
     * NOTE: valid only when selection mode is 'mixed'
     */
    deactivateRow() {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.deactivateRow();
        });
    }
    /**
     * Get the currently activated row.
     * NOTE: valid only when selection mode is 'mixed'
     */
    activatedRow() {
        return this.ngZone.runOutsideAngular(() => {
            return this.datagrid.activatedRow();
        });
    }
    /**
     * Sets the active cell.
     *
     * @param idx The index of the row of the cell to set active.
     * @param idx2 The index of the cell to set active.
     */
    setActiveCell(idx, idx2) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.setActiveCell(idx, idx2);
        });
    }
    /**
     * Gets the active cell info
     */
    getActiveCell() {
        return this.ngZone.runOutsideAngular(() => {
            return this.datagrid?.activeCell;
        });
    }
    /**
     * Scrolls the row at <b>idx</b> into view in the view port.
     *
     * @param idx The index of the row to scroll into view.
     */
    scrollRowIntoView(idx) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.setActiveCell(idx, 0);
        });
    }
    /**
     * Returns an array of row numbers for the rows containing the value for the specified field.
     *
     * @param fieldName The field name to search.
     * @param value The value to use in search.
     */
    findRowsByValue(fieldName, value) {
        return this.ngZone.runOutsideAngular(() => {
            return this.datagrid.findRowsByValue(fieldName, value);
        });
    }
    /**
     * Programmatically trigger a call to the datagrid.settings.source
     * function with the given pagerType.
     *
     * @param pagerType - a valid pager type.
     */
    triggerSource(pagerType, callback) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.triggerSource(pagerType, callback);
        });
    }
    /**
     * Trigger export of grid data to Excel.
     *
     * @param fileName The prefix name to be used for the exported file.
     * @param worksheetName The name to be used for the worksheet.
     * @param customDs A datasource to override the default (deprecated)
     */
    exportToExcel(fileName, worksheetName, customDs) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.exportToExcel(fileName, worksheetName, customDs);
        });
    }
    /**
     * Trigger export of grid data to CSV formatted file.
     *
     * @param fileName The prefix name to be used for the exported file.
     * @param customDs A datasource to override the default.
     * @param separator The separator to use in the cvs file, defaults to 'sep=,'
     * @param format if true, date and number values will be formatted based on the locale
     */
    exportToCsv(fileName, customDs, separator = 'sep=,', format) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.exportToCsv(fileName, customDs, separator, format);
        });
    }
    /**
     * Updates the columns and columnGroups displayed on the grid.
     *
     * @param columns The datagrid columns to update.
     * @param columnGroups The column groups to update.
     */
    updateColumns(columns, columnGroups) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.updateColumns(columns, columnGroups);
        });
    }
    /**
     * Parse a JSON array with columns and return the column object.
     *
     * @param columnStr The json represntation of the column object.
     * @return  The array of columns.
     */
    columnsFromString(columns) {
        return this.ngZone.runOutsideAngular(() => {
            return this.datagrid.columnsFromString(columns);
        });
    }
    /**
     * Reset columns to their defaults (used on restore menu item).
     */
    resetColumns() {
        return this.ngZone.runOutsideAngular(() => {
            this.datagrid?.resetColumns();
        });
    }
    /**
     * Open the personalize dialog.
     */
    personalizeColumns() {
        return this.ngZone.runOutsideAngular(() => {
            this.datagrid?.personalizeColumns();
        });
    }
    /**
     * Restore the user settings from local Storage or as passed in.
     *
     * @param settings The object containing the settings to use.
     */
    restoreUserSettings(settings) {
        this.ngZone.runOutsideAngular(() => {
            this.datagrid?.restoreUserSettings(settings);
        });
    }
    // -------------------------------------------
    // Event Handlers
    // -------------------------------------------
    /**
     * Handle a request to load the data for the grid from the service.
     *
     * @todo paging - not yet fully implemented?
     */
    onDataRequest(request, response) {
        // The request for data is made by the datagrid, so jump back into the angular zone ...
        this.ngZone.run(() => 
        // ... request the data from the service ...
        this.datagridService.getData(request)
            .subscribe((results) => {
            // .. on receipt, pass the data back to the datagrid but
            // outside the angular zone.
            this.ngZone.runOutsideAngular(() => response(results, request));
        }));
    }
    /**
     * Event fired after a child row has been expanded.
     */
    onExpandRowHandler(args) {
        const event = { grid: this, ...args };
        if (this.gridOptions.rowTemplateComponent) {
            this.buildRowTemplateComponent(event);
        }
        this.ngZone.run(() => {
            this.expandrow.next(event);
        });
    }
    /**
     * Build component for rowTemplate
     */
    buildRowTemplateComponent(event) {
        if (!this.gridOptions.rowTemplateComponent) {
            return;
        }
        const componentFactory = this.resolver.resolveComponentFactory(this.gridOptions.rowTemplateComponent);
        // Remove component if it exists
        const idx = this.rowTemplateComponents.findIndex((c) => event.row === c.row);
        if (idx > -1) {
            this.rowTemplateComponents[idx].component.destroy();
            this.rowTemplateComponents.splice(idx, 1);
        }
        const containerParent = event.detail[0].querySelector('.datagrid-row-detail-padding');
        containerParent.innerHTML = '<div class="datagrid-cell-layout"></div>';
        const container = containerParent.querySelector('.datagrid-cell-layout');
        container.innerHTML = '';
        let dataComponent;
        if (event.item.hasOwnProperty(this.gridOptions.rowTemplateField)) {
            dataComponent = event.item[this.gridOptions.rowTemplateField];
        }
        else {
            dataComponent = undefined;
        }
        const injector = Injector.create({
            providers: [
                {
                    provide: 'args',
                    useValue: { inputsData: this.gridOptions.rowTemplateComponentInputs, data: dataComponent, ...event },
                }
            ],
            parent: this.injector,
        });
        // Create the component, in the container.
        const component = componentFactory.create(injector, [], container);
        event['rowTemplateComponent'] = component;
        // ... attach to the app ...
        this.app.attachView(component.hostView);
        // ... update for changes ...
        component.changeDetectorRef.detectChanges();
        // ... finally store the created component for later, we'll delete it when
        // requested, or when the grid is destroyed.
        this.rowTemplateComponents.push({ row: event.row, component });
    }
    /**
     * Event fired after a context menu is opened
     */
    onKeyDownHandler(e, args, response) {
        const event = { e, args, response };
        this.ngZone.run(() => {
            this.keydown.next(event);
        });
        if (e.key === 'F10' && e.shiftKey) {
            $(e.currentTarget).trigger('contextmenu');
        }
    }
    /**
     * Event fired after a child row has been expanded.
     *
     * @param idProperty string id
     */
    set onBeforeSelect(beforeSelectFunction) {
        this._gridOptions.onBeforeSelect = beforeSelectFunction;
        if (this.datagrid) {
            this.datagrid.settings.onBeforeSelect = beforeSelectFunction;
            this.markForRefresh('onBeforeSelect', RefreshHintFlags.Rebuild);
        }
    }
    get onBeforeSelect() {
        if (this.datagrid) {
            return this.datagrid.settings.onBeforeSelect;
        }
        return this._gridOptions.onBeforeSelect;
    }
    /**
     *  Makes it possible to save selections when changing pages on server side paging.
     *  You may want to also use showSelectAllCheckBox: false
     */
    set allowSelectAcrossPages(allowSelectAcrossPages) {
        this._gridOptions.allowSelectAcrossPages = allowSelectAcrossPages;
        if (this.datagrid) {
            this.datagrid.settings.allowSelectAcrossPages = allowSelectAcrossPages;
            this.markForRefresh('allowSelectAcrossPages', RefreshHintFlags.None);
        }
    }
    get allowSelectAcrossPages() {
        if (this.datagrid) {
            return this.datagrid.settings.allowSelectAcrossPages;
        }
        return this._gridOptions.allowSelectAcrossPages;
    }
    /**
     *  Select all will effect only on current page and its for client side paging only.
     */
    set selectAllCurrentPage(selectAllCurrentPage) {
        this._gridOptions.selectAllCurrentPage = selectAllCurrentPage;
        if (this.datagrid) {
            this.datagrid.settings.selectAllCurrentPage = selectAllCurrentPage;
            this.markForRefresh('selectAllCurrentPage', RefreshHintFlags.None);
        }
    }
    get selectAllCurrentPage() {
        if (this.datagrid) {
            return this.datagrid.settings.selectAllCurrentPage;
        }
        return this._gridOptions.selectAllCurrentPage;
    }
    /**
     * An array of column IDs used to define aria descriptors for selection checkboxes.
     */
    set columnIds(columnIds) {
        this._gridOptions.columnIds = columnIds;
        if (this.datagrid) {
            this.datagrid.settings.columnIds = columnIds;
            this.markForRefresh('columnIds', RefreshHintFlags.None);
        }
    }
    get columnIds() {
        if (this.datagrid) {
            return this.datagrid.settings.columnIds;
        }
        return this._gridOptions.columnIds;
    }
    /**
     *If true, the new row indicator will display after adding a row
     *
     * @param showNewRowIndicator boolean show new indicator setting
     */
    set showNewRowIndicator(showNewRowIndicator) {
        this._gridOptions.showNewRowIndicator = showNewRowIndicator;
        if (this.datagrid) {
            this.datagrid.settings.showNewRowIndicator = showNewRowIndicator;
            this.markForRefresh('showNewRowIndicator', RefreshHintFlags.None);
        }
    }
    get showNewRowIndicator() {
        if (this.datagrid) {
            return this.datagrid.settings.showNewRowIndicator;
        }
        return this._gridOptions.showNewRowIndicator;
    }
    set onExpandChildren(expandChildrenFunction) {
        this._gridOptions.onExpandChildren = expandChildrenFunction;
        if (this.datagrid) {
            this.datagrid.settings.onExpandChildren = expandChildrenFunction;
            this.markForRefresh('onExpandChildren', RefreshHintFlags.Rebuild);
        }
    }
    get onExpandChildren() {
        if (this.datagrid) {
            return this.datagrid.settings.onExpandChildren;
        }
        return this._gridOptions.onExpandChildren;
    }
    set onCollapseChildren(collapseChildrenFunction) {
        this._gridOptions.onCollapseChildren = collapseChildrenFunction;
        if (this.datagrid) {
            this.datagrid.settings.onCollapseChildren = collapseChildrenFunction;
            this.markForRefresh('onCollapseChildren', RefreshHintFlags.Rebuild);
        }
    }
    get onCollapseChildren() {
        if (this.datagrid) {
            return this.datagrid.settings.onCollapseChildren;
        }
        return this._gridOptions.onCollapseChildren;
    }
    set onPostRenderCell(onPostRenderCell) {
        const postRenderCell = (e, args) => {
            this.onPostRenderCellHandler(e, args);
            onPostRenderCell(e, args);
        };
        this._gridOptions.onPostRenderCell = postRenderCell;
        if (this.datagrid) {
            this.datagrid.settings.onPostRenderCell = postRenderCell;
        }
    }
    set onDestroyCell(onDestroyCell) {
        const destroyCell = (e, args) => {
            this.onDestroyCellHandler(args);
            onDestroyCell(e, args);
        };
        this._gridOptions.onDestroyCell = destroyCell;
        if (this.datagrid) {
            this.datagrid.settings.onDestroyCell = destroyCell;
        }
    }
    set onEditCell(onEditCell) {
        const editCell = (editor) => {
            this.onEditCellHandler(editor);
            onEditCell(editor);
        };
        this._gridOptions.onEditCell = editCell;
        if (this.datagrid) {
            this.datagrid.settings.onEditCell = editCell;
        }
    }
    set onKeyDown(onKeyDown) {
        const keyDown = (e, args, response) => {
            this.onKeyDownHandler(e, args, response);
            onKeyDown(e, args, response);
        };
        this._gridOptions.onKeyDown = keyDown;
        if (this.datagrid) {
            this.datagrid.settings.onKeyDown = keyDown;
        }
    }
    set onExpandRow(onExpandRow) {
        this._gridOptions.onExpandRow = onExpandRow;
        if (this.datagrid) {
            this.datagrid.settings.onExpandRow = onExpandRow;
        }
    }
    /* Icon name for fallbacks if the image does not load */
    set fallbackImage(fallbackImage) {
        this._gridOptions.fallbackImage = fallbackImage;
        if (this.datagrid) {
            this.datagrid.settings.fallbackImage = fallbackImage;
            this.markForRefresh('fallbackImage', RefreshHintFlags.Rebuild);
        }
    }
    get fallbackImage() {
        if (this.datagrid) {
            return this.datagrid.settings.fallbackImage;
        }
        return this._gridOptions.fallbackImage;
    }
    /* Tooltip to show if it the fallback appears */
    set fallbackTooltip(fallbackTooltip) {
        this._gridOptions.fallbackTooltip = fallbackTooltip;
        if (this.datagrid) {
            this.datagrid.settings.fallbackTooltip = fallbackTooltip;
            this.markForRefresh('fallbackTooltip', RefreshHintFlags.Rebuild);
        }
    }
    get fallbackTooltip() {
        if (this.datagrid) {
            return this.datagrid.settings.fallbackTooltip;
        }
        return this._gridOptions.fallbackTooltip;
    }
    /**
     * Event fired after edit mode is activated on an editor.
     *
     * @param args the event arguments
     */
    onExitEditMode(args) {
        const event = { grid: this, ...args };
        this.ngZone.run(() => {
            this.exiteditmode.next(event);
        });
    }
    /**
     * Event fired before edit mode is activated on an editor.
     *
     * @param args the event arguments
     */
    onBeforeEnterEditMode(args) {
        const event = { grid: this, ...args };
        this.ngZone.run(() => {
            this.beforeentereditmode.next(event);
        });
    }
    /**
     * Event fired when edit mode is activated on an editor.
     *
     * @param args the event arguments
     */
    onEnterEditMode(args) {
        const event = { grid: this, ...args };
        this.ngZone.run(() => {
            this.entereditmode.next(event);
        });
    }
    /**
     * Event fired after a child row has been collapsed.
     */
    onCollapseRow(args) {
        const event = { grid: this, ...args };
        this.ngZone.run(() => {
            this.collapserow.next(event);
        });
    }
    /**
     * Event fired when a row has been added.
     */
    onRowAdd(args) {
        this.ngZone.run(() => {
            this.rowAdd.next(args);
        });
    }
    /**
     * Event fired when a cell has changed.
     */
    onCellChange(args) {
        this.ngZone.run(() => {
            this.cellchange.next(args);
        });
    }
    /**
     * Event fired when a row has been clicked.
     */
    onRowClicked(args) {
        this.ngZone.run(() => {
            this.rowClicked.next(args);
        });
    }
    /**
     * Event fired when the filter row is closed.
     */
    onCloseFilterRow(args) {
        this.ngZone.run(() => {
            this.closeFilterRow.next(args);
        });
    }
    /**
     * Event fired when a context menu is is clicked.
     */
    onContextMenu(args) {
        this.ngZone.run(() => {
            this.contextMenu?.next(args);
        });
    }
    /**
     * Event fired when a context menu is is clicked.
     */
    onDoubleClick(args) {
        this.ngZone.run(() => {
            this.rowDoubleClicked.next(args);
        });
    }
    /**
     * Event fired when the data is filtered.
     */
    onFiltered(args) {
        this.ngZone.run(() => {
            this.filtered.next(args);
        });
    }
    /**
     * Event fired when filter row opened.
     */
    onOpenFilterRow(args) {
        this.ngZone.run(() => {
            this.openFilterRow.next(args);
        });
    }
    /**
     * Event fired when a row is removed.
     */
    onRowRemove(args) {
        this.ngZone.run(() => {
            this.rowRemove.next(args);
        });
    }
    /**
     * Event fired when the data is rendered
     */
    onRendered(args) {
        this.ngZone.run(() => {
            this.rendered.next(args);
        });
    }
    /**
     * Event fired when the data is filtered.
     */
    onAfterRender(args) {
        this.ngZone.run(() => {
            this.afterRender.next(args);
        });
    }
    /**
     * Event fired before a row is activated.
     */
    onBeforeRowActivated(args) {
        this.ngZone.run(() => {
            this.beforeRowActivated.next(args);
        });
    }
    /**
     * Event fired when a row is activated.
     */
    onRowActivated(args) {
        this.ngZone.run(() => {
            this.rowActivated.next(args);
        });
    }
    /**
     * Event fired when a row is deactivated.
     */
    onRowDeactivated(args) {
        this.ngZone.run(() => {
            this.rowDeactivated.next(args);
        });
    }
    /**
     * Event fired when a row is reordered.
     */
    onRowReordered(args) {
        this.ngZone.run(() => {
            this.rowReordered.next(args);
        });
    }
    /**
     * Event fired when a row is selected or deselected.
     */
    onSelected(args) {
        this.ngZone.run(() => {
            this.selected.next(args);
        });
    }
    /**
     * Event fired when settings are changed on the grid.
     */
    onSettingsChanged(args) {
        this.ngZone.run(() => {
            this.settingsChanged.next(args);
        });
    }
    /**
     * Event fired when the data is sorted.
     */
    onSorted(args) {
        this.ngZone.run(() => {
            this.sorted.next(args);
        });
    }
    /**
     * Event fired when using built-in pager to next page.
     */
    onNextPage(args) {
        this.ngZone.run(() => {
            this.nextPage.next(args);
        });
    }
    /**
       * Event fired when using built-in pager to previous page.
       */
    onPreviousPage(args) {
        this.ngZone.run(() => {
            this.previousPage.next(args);
        });
    }
    /**
       * Event fired when using built-in pager to first page.
       */
    onFirstPage(args) {
        this.ngZone.run(() => {
            this.firstPage.next(args);
        });
    }
    /**
       * Event fired when using built-in pager to last page.
       */
    onLastPage(args) {
        this.ngZone.run(() => {
            this.lastPage.next(args);
        });
    }
    /**
     * Event fired on paging size change
     */
    onPageSizeChange(args) {
        this.ngZone.run(() => {
            this.pageSizeChange.next(args);
        });
    }
    /**
     * Event fired before paging
     */
    onBeforePaging(args) {
        this.ngZone.run(() => {
            this.beforePaging.next(args);
        });
    }
    /**
     * Event fired after paging
     */
    onAfterPaging(args) {
        this.ngZone.run(() => {
            this.afterPaging.next(args);
        });
    }
    /**
     * Event fired after vertical scroll
     */
    onVerticalScroll(args) {
        this.ngZone.run(() => {
            this.verticalScroll.next(args);
        });
    }
    /**
     * Event fired after vertical scroll
     */
    onFilterOperatorChanged(args) {
        this.ngZone.run(() => {
            this.filteroperatorchanged.next(args);
        });
    }
    /**
     * Returns the row dom jQuery node.
     *
     * @param  row The row index.
     * @param  includeGroups If true groups are taken into account.
     * @return The dom jQuery node
     */
    rowNode(row, includeGroups) {
        return this.ngZone.runOutsideAngular(() => {
            return this.datagrid?.rowNode(row, includeGroups);
        });
    }
    /**
     * Returns the cell dom node.
     *
     * @param  row The row index.
     * @param  cell The cell index.
     * @param  includeGroups If true groups are taken into account.
     * @return The dom node
     */
    cellNode(row, cell, includeGroups) {
        return this.ngZone.runOutsideAngular(() => {
            return this.datagrid?.cellNode(row, cell, includeGroups);
        });
    }
    /**
     * Expand Detail Row Or Tree Row
     * @param {number} dataRowIndex The row to toggle
     */
    toggleRowDetail(dataRowIndex) {
        return this.ngZone.runOutsideAngular(() => {
            return this.datagrid?.toggleRowDetail(dataRowIndex);
        });
    }
    // ------------------------------------------
    // Lifecycle Events
    // ------------------------------------------
    /**
     * Initialize the component after Angular initializes the data-bound input properties.
     */
    ngOnInit() {
        this.updateSource(this._gridOptions.source);
    }
    /**
     * Called after Angular projects external content into its view.
     */
    ngAfterViewInit() {
        // Once the view is created and ready, initiaise the data grid component.
        this.buildDataGrid();
    }
    /**
     *
     */
    ngAfterViewChecked() {
        if (this.refreshHint !== RefreshHintFlags.None) {
            this.updated(this._gridOptions);
        }
    }
    /**
     * Cleanup just before Angular destroys the component.
     *
     * Unsubscribe observables, detach event handlers and remove other resources to avoid memory leaks.
     */
    ngOnDestroy() {
        this.destroyDataGrid();
    }
    // -------------------------------------------
    // Private Members
    // -------------------------------------------
    /**
     * Destroys the jQuery control (and any other resources)
     * associated with this component.
     */
    destroyDataGrid() {
        // Remove any remaining dynamic components.
        this.cellComponents.forEach((c) => {
            c.component.destroy();
        });
        // Clear the cache.
        this.cellComponents = [];
        // Remove rowTemplate dynamic components.
        if (this.rowTemplateComponents && this.rowTemplateComponents.length > 0) {
            this.rowTemplateComponents.forEach((c) => {
                c.component.destroy();
            });
            this.rowTemplateComponents = [];
        }
        // Now destroy the grid.
        if (this.datagrid) {
            if (this.datagrid.destroy) {
                this.ngZone.runOutsideAngular(() => {
                    this.datagrid?.destroy();
                });
            }
            this.datagrid = null;
        }
    }
    /**
     * Handles the 'postCellRender' event.
     *
     * @param container the container to host the element.
     * @param args the formatter arguments.
     */
    onPostRenderCellHandler(container, args) {
        // Pre-conditions
        if (!args.col.component) {
            return; // throw Error(`Missing 'component' in column ${args.col.id}`);
        }
        // Get the factory for the component specified on the column.
        const factory = this.resolver.resolveComponentFactory(args.col.component);
        // Create an injector that will provide the arguments for the
        // component.
        // const injector = ReflectiveInjector.resolveAndCreate([{ provide: 'args', useValue: args }], this.injector);
        const injector = Injector.create({ providers: [{ provide: 'args', useValue: args }], parent: this.injector });
        // Create the component, in the container.
        const component = factory.create(injector, [], container);
        // Copy into it any column level Inputs, these are optional but allow
        // column specific overrides to be defined.
        Object.assign(component.instance, args.col.componentInputs);
        // ... attach to the app ...
        this.app.attachView(component.hostView);
        // ... update for changes ...
        component.changeDetectorRef.detectChanges();
        // Do this at the end?
        // ... finally store the created component for later, we'll delete it when
        // requested, or when the grid is destroyed.
        this.cellComponents.push({ row: args.row, cell: args.cell, component });
    }
    /**
     * Handles the 'destroyCell' event.
     *
     * @param container the container.
     * @param args the args
     */
    onDestroyCellHandler(args) {
        const idx = this.cellComponents.findIndex((c) => args.row === c.row && args.cell === c.cell);
        if (idx > -1) {
            this.cellComponents[idx].component.destroy();
            this.cellComponents.splice(idx, 1);
        }
    }
    onEditCellHandler(editor) {
        // Pre-conditions
        if (!editor.component) {
            return; // throw Error(`Missing 'component' in column ${args.col.id}`);
        }
        // Get the factory for the component specified on the column.
        const factory = this.resolver.resolveComponentFactory(editor.component);
        // Create an injector that will provide the arguments for the
        // component.
        // const i = ReflectiveInjector.resolveAndCreate([{ provide: 'args', useValue: editor.args }], this.injector);
        const i = Injector.create({
            providers: [{ provide: 'args', useValue: editor.args }],
            parent: this.injector
        });
        // Warning!! the dynamic component is not added inside the container,
        // but as a sibling, so when it's destroyed it takes any siblings  with
        // it.  It is not clear why this - so to work around this issue, add
        // a single child to the cell container.
        const transientContainer = $('<div></div>').appendTo(editor.args.container);
        // Create the component, in the container.
        const componentRef = factory.create(i, [], transientContainer[0]);
        // Copy into it any column level Inputs, these are optional but allow
        // column specific overrides to be defined.
        Object.assign(componentRef.instance, editor.args.col.editorComponentInputs);
        // ... attach to the app ...
        this.app.attachView(componentRef.hostView);
        // ... update for changes ...
        componentRef.changeDetectorRef.detectChanges();
        // Give the component to the editor.
        editor.init(componentRef);
    }
    buildDataGrid() {
        // call outside the angular zone so change detection
        // isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            // Wrap the element in a jQuery selector.
            this.jQueryElement = jQuery(this.elementRef.nativeElement);
            // Add the onPostCellRenderer
            if (!this._gridOptions.onPostRenderCell) {
                this._gridOptions.onPostRenderCell = (c, args) => {
                    this.onPostRenderCellHandler(c, args);
                };
            }
            // Add the destroy cell callback.
            if (!this._gridOptions.onDestroyCell) {
                this._gridOptions.onDestroyCell = (_, args) => {
                    this.onDestroyCellHandler(args);
                };
            }
            // Add the edit cell callback.
            if (!this._gridOptions.onEditCell) {
                this._gridOptions.onEditCell = (editor) => {
                    this.onEditCellHandler(editor);
                };
            }
            // Add the keydown callback.
            if (!this._gridOptions.onKeyDown) {
                this._gridOptions.onKeyDown = (e, args, response) => {
                    this.onKeyDownHandler(e, args, response);
                };
            }
            // Initialise any event handlers.
            this.jQueryElement
                .on('addrow', (_e, args) => this.onRowAdd(args))
                .on('cellchange', (_e, args) => this.onCellChange(args))
                .on('click', (_e, args) => this.onRowClicked(args))
                .on('closefilterrow', (_e, args) => this.onCloseFilterRow(args))
                .on('collapserow', (_e, args) => this.onCollapseRow(args))
                .on('contextmenu', (_e, args) => this.onContextMenu(args))
                .on('dblclick', (_e, args) => this.onDoubleClick(args))
                .on('beforeentereditmode', (_e, args) => this.onBeforeEnterEditMode(args))
                .on('exiteditmode', (_e, args) => this.onExitEditMode(args))
                .on('entereditmode', (_e, args) => this.onEnterEditMode(args))
                .on('expandrow', (_e, args) => this.onExpandRowHandler(args))
                .on('filtered', (_e, args) => this.onFiltered(args))
                .on('openfilterrow', (_e, args) => this.onOpenFilterRow(args))
                .on('rowremove', (_e, args) => this.onRowRemove(args))
                .on('rendered', (_e, args) => this.onRendered(args))
                .on('afterrender', (_e, args) => this.onAfterRender(args))
                .on('beforerowactivated', (_e, args) => this.onBeforeRowActivated(args))
                .on('rowactivated', (_e, args) => this.onRowActivated(args))
                .on('rowdeactivated', (_e, args) => this.onRowDeactivated(args))
                .on('rowreorder', (_e, args) => this.onRowReordered(args))
                .on('selected', (e, args, type, rowData) => this.onSelected({ e, rows: args, type, rowData }))
                .on('settingschanged', (_e, args) => this.onSettingsChanged(args))
                .on('sorted', (_e, args) => this.onSorted(args))
                .on('beforepaging', (_e, args) => this.onBeforePaging(args))
                .on('afterpaging', (_e, args) => this.onAfterPaging(args))
                .on('scroll', (_e, args) => this.onVerticalScroll(args))
                .on('filteroperatorchanged', (_e, args) => this.onFilterOperatorChanged(args))
                .on('nextpage', (_e, args) => this.onNextPage(args))
                .on('previouspage', (_e, args) => this.onPreviousPage(args))
                .on('firstpage', (_e, args) => this.onFirstPage(args))
                .on('lastpage', (_e, args) => this.onLastPage(args))
                .on('pagesizechange', (_e, args) => this.onPageSizeChange(args));
        });
        // Initialise the SohoXi control.
        this.jQueryElement?.datagrid(this._gridOptions);
        this.jQueryElement?.removeAttr('role');
        // Once the control is initialised, extract the control
        // plug-in from the element.  The element name is
        // defined by the plug-in, but in this case is 'datagrid'.
        this.datagrid = this.jQueryElement?.data('datagrid');
        // If "auto" and there's a service, get the columns from it.
        // (may want to check if columns have already been set? Error?)
        if (this.datagridType === SohoDataGridComponent.AUTO && this.datagridService) {
            // Bootstrap from service, note this is not async.
            this.columns = this.datagridService.getColumns();
            // Once the columns are set, request the data (paging?)
            this.datagridService.getData(null)
                .subscribe((data) => {
                this.ngZone.runOutsideAngular(() => {
                    this.datagrid?.loadData(data);
                });
            });
        }
        else if (this.gridData) {
            // Not using a service, so use the pre-loaded data.
            this.ngZone.runOutsideAngular(() => {
                this.datagrid?.loadData(this.gridData);
            });
        }
    }
    /**
     * Marks the components as requiring a rebuild after the next update.
     *
     * @todo possible add hints? Rebuild, Update, SetOption
     *
     * @param optionName - the option that was updated, (allowing specific handling)
     * @param hint - the type of refresh required, update?.
     */
    markForRefresh(optionName, hint) {
        // Merge in the hint.
        this.refreshHint |= hint; // eslint-disable-line
        // ... so we can use it later
        this.changedOptions.push(optionName);
        // ... make sure the change detector kicks in, otherwise if the inputs
        // were change programmatially the component may not be eligible for
        // updating.
        this.changeDetector.markForCheck();
    }
    /**
     * Stop gap method to update the current datagrid and rebuild it again.
     *
     * This is required whilst there is no method found that can update the view
     * for a particular input.
     */
    updated(settings) {
        if (settings) {
            this._gridOptions = Soho.utils.mergeSettings(this.elementRef[0], settings, this._gridOptions);
        }
        this.ngZone.runOutsideAngular(() => {
            if (!this.refreshHint) {
                this.datagrid?.updated(this._gridOptions);
            }
            else if (settings && this.refreshHint & RefreshHintFlags.Rebuild) {
                this.datagrid?.updated(this._gridOptions);
            }
            else if (this.refreshHint & RefreshHintFlags.Rebuild) {
                this.datagrid?.renderHeader();
                this.datagrid?.renderRows();
            }
            else if (this.refreshHint & RefreshHintFlags.RenderHeader) { // eslint-disable-line
                this.datagrid?.renderHeader();
            }
            else if (this.refreshHint & RefreshHintFlags.RenderRows) { // eslint-disable-line
                this.datagrid?.renderRows();
            }
        });
        // Reset the flags.
        this.refreshHint = RefreshHintFlags.None;
        this.changedOptions = [];
    }
    /**
     * Updates the source setting/function to use source input if set.
     * Otherwise use dataGridService if that is set.
     *
     * @param source the function
     */
    updateSource(source) {
        // If a source property has not been defined, and a service has
        // use the data service to load the data dynamically for paging.
        if (!source && this.datagridService) {
            this._gridOptions.source = (request, response) => {
                this.onDataRequest(request, response);
            };
        }
        else if (source && typeof source === 'function') {
            this._gridOptions.source = (request, response) => {
                this.ngZone.run(() => source(request, response));
            };
        }
    }
    checkForComponentEditors() {
        // Add an adapter for all the columns using an component as an editor.
        this._gridOptions.columns.forEach((c) => {
            if (c.editorComponent) {
                // Use a `function expression` rather than an `arrow function` as the editor is used
                // as constructor.
                // teslint-disable-next-line max-len
                c.editor = function (row, cell, value, container, col, e, api, item) {
                    // @ts-ignore
                    return new SohoAngularEditorAdapter(c.editorComponent, { row, cell, value, container: container[0], col, e, api, item });
                };
            }
        });
    }
    checkForSummaryRowSettings() {
        if (!this._gridOptions.summaryRowColumns || this._gridOptions.summaryRowColumns.length === 0) {
            this._gridOptions.columns.forEach((c) => {
                c.summaryRowFormatter = undefined;
                c.summaryText = undefined;
                c.aggregator = undefined;
                c.summaryTextPlacement = undefined;
            });
        }
        else {
            this._gridOptions.summaryRowColumns.forEach((sc) => {
                const column = this._gridOptions.columns.find((c) => c.field === sc.field);
                column.summaryRowFormatter = sc.summaryRowFormatter;
                column.summaryText = sc.summaryText;
                column.aggregator = sc.aggregator;
                column.summaryTextPlacement = sc.summaryTextPlacement;
            });
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoDataGridComponent, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.ComponentFactoryResolver }, { token: i0.Injector }, { token: i0.ApplicationRef }, { token: i1.SohoDataGridService, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoDataGridComponent, selector: "[soho-datagrid]", inputs: { gridOptions: "gridOptions", idProperty: "idProperty", frozenColumns: "frozenColumns", cellNavigation: "cellNavigation", rowNavigation: "rowNavigation", alternateRowShading: "alternateRowShading", dataset: "dataset", columnReorder: "columnReorder", disableClientSort: "disableClientSort", disableClientFilter: "disableClientFilter", resultsText: "resultsText", showFilterTotal: "showFilterTotal", editable: "editable", isRowDisabled: "isRowDisabled", allowOneExpandedRow: "allowOneExpandedRow", rowTemplate: "rowTemplate", rowTemplateComponent: "rowTemplateComponent", rowTemplateComponentInputs: "rowTemplateComponentInputs", rowTemplateField: "rowTemplateField", selectOnEdit: "selectOnEdit", isList: "isList", menuId: "menuId", menuBeforeOpen: "menuBeforeOpen", rowHeight: "rowHeight", fixedRowHeight: "fixedRowHeight", selectable: "selectable", showSelectAllCheckBox: "showSelectAllCheckBox", clickToSelect: "clickToSelect", toolbar: "toolbar", initializeToolbar: "initializeToolbar", saveUserSettings: "saveUserSettings", paging: "paging", pagesize: "pagesize", pagesizes: "pagesizes", indeterminate: "indeterminate", actionableMode: "actionableMode", saveColumns: "saveColumns", source: "source", filterable: "filterable", filterWhenTyping: "filterWhenTyping", treeGrid: "treeGrid", uniqueId: "uniqueId", rowReorder: "rowReorder", showDirty: "showDirty", resizeMode: "resizeMode", headerBackgroundColor: "headerBackgroundColor", headerMenuId: "headerMenuId", headerMenuSelected: "headerMenuSelected", headerMenuBeforeOpen: "headerMenuBeforeOpen", disableRowDeactivation: "disableRowDeactivation", disableRowDeselection: "disableRowDeselection", userObject: "userObject", groupable: "groupable", data: "data", columns: "columns", summaryRowColumns: "summaryRowColumns", spacerColumn: "spacerColumn", sizeColumnsEqually: "sizeColumnsEqually", expandableRow: "expandableRow", redrawOnResize: "redrawOnResize", exportConvertNegative: "exportConvertNegative", stickyHeader: "stickyHeader", attributes: "attributes", columnSizing: "columnSizing", stretchColumn: "stretchColumn", stretchColumnOnChange: "stretchColumnOnChange", showPageSizeSelector: "showPageSizeSelector", hidePagerOnOnePage: "hidePagerOnOnePage", columnGroup: "columnGroup", emptyMessage: "emptyMessage", enableTooltips: "enableTooltips", selectChildren: "selectChildren", allowChildExpandOnMatch: "allowChildExpandOnMatch", sohoDatagrid: ["soho-datagrid", "sohoDatagrid"], onBeforeSelect: "onBeforeSelect", allowSelectAcrossPages: "allowSelectAcrossPages", selectAllCurrentPage: "selectAllCurrentPage", columnIds: "columnIds", showNewRowIndicator: "showNewRowIndicator", onExpandChildren: "onExpandChildren", onCollapseChildren: "onCollapseChildren", onPostRenderCell: "onPostRenderCell", onDestroyCell: "onDestroyCell", onEditCell: "onEditCell", onKeyDown: "onKeyDown", onExpandRow: "onExpandRow", fallbackImage: "fallbackImage", fallbackTooltip: "fallbackTooltip" }, outputs: { selected: "selected", cellchange: "cellchange", rowRemove: "rowRemove", rowAdd: "rowAdd", filtered: "filtered", expandrow: "expandrow", keydown: "keydown", exiteditmode: "exiteditmode", beforeentereditmode: "beforeentereditmode", entereditmode: "entereditmode", collapserow: "collapserow", sorted: "sorted", nextPage: "nextPage", previousPage: "previousPage", firstPage: "firstPage", lastPage: "lastPage", pageSizeChange: "pageSizeChange", beforePaging: "beforePaging", afterPaging: "afterPaging", beforeRowActivated: "beforeRowActivated", rowActivated: "rowActivated", rowDeactivated: "rowDeactivated", rowClicked: "rowClicked", rowDoubleClicked: "rowDoubleClicked", contextMenu: "contextMenu", rowReordered: "rowReordered", openFilterRow: "openFilterRow", closeFilterRow: "closeFilterRow", settingsChanged: "settingsChanged", rendered: "rendered", afterRender: "afterRender", verticalScroll: "verticalScroll", filteroperatorchanged: "filteroperatorchanged" }, host: { properties: { "class.is-disabled": "this.isDisabled", "attr.role": "this.datagridRole" } }, ngImport: i0, template: ' <ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoDataGridComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-datagrid]',
                    template: ' <ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.ComponentFactoryResolver }, { type: i0.Injector }, { type: i0.ApplicationRef }, { type: i1.SohoDataGridService, decorators: [{
                    type: Optional
                }] }]; }, propDecorators: { gridOptions: [{
                type: Input
            }], idProperty: [{
                type: Input
            }], frozenColumns: [{
                type: Input
            }], cellNavigation: [{
                type: Input
            }], rowNavigation: [{
                type: Input
            }], alternateRowShading: [{
                type: Input
            }], dataset: [{
                type: Input
            }], columnReorder: [{
                type: Input
            }], disableClientSort: [{
                type: Input
            }], disableClientFilter: [{
                type: Input
            }], resultsText: [{
                type: Input
            }], showFilterTotal: [{
                type: Input
            }], editable: [{
                type: Input
            }], isRowDisabled: [{
                type: Input
            }], allowOneExpandedRow: [{
                type: Input
            }], rowTemplate: [{
                type: Input
            }], rowTemplateComponent: [{
                type: Input
            }], rowTemplateComponentInputs: [{
                type: Input
            }], rowTemplateField: [{
                type: Input
            }], selectOnEdit: [{
                type: Input
            }], isList: [{
                type: Input
            }], menuId: [{
                type: Input
            }], menuBeforeOpen: [{
                type: Input
            }], rowHeight: [{
                type: Input
            }], fixedRowHeight: [{
                type: Input
            }], selectable: [{
                type: Input
            }], showSelectAllCheckBox: [{
                type: Input
            }], clickToSelect: [{
                type: Input
            }], toolbar: [{
                type: Input
            }], initializeToolbar: [{
                type: Input
            }], saveUserSettings: [{
                type: Input
            }], paging: [{
                type: Input
            }], pagesize: [{
                type: Input
            }], pagesizes: [{
                type: Input
            }], indeterminate: [{
                type: Input
            }], actionableMode: [{
                type: Input
            }], saveColumns: [{
                type: Input
            }], source: [{
                type: Input
            }], filterable: [{
                type: Input
            }], filterWhenTyping: [{
                type: Input
            }], treeGrid: [{
                type: Input
            }], uniqueId: [{
                type: Input
            }], rowReorder: [{
                type: Input
            }], showDirty: [{
                type: Input
            }], resizeMode: [{
                type: Input
            }], headerBackgroundColor: [{
                type: Input
            }], headerMenuId: [{
                type: Input
            }], headerMenuSelected: [{
                type: Input
            }], headerMenuBeforeOpen: [{
                type: Input
            }], disableRowDeactivation: [{
                type: Input
            }], disableRowDeselection: [{
                type: Input
            }], userObject: [{
                type: Input
            }], groupable: [{
                type: Input
            }], data: [{
                type: Input
            }], columns: [{
                type: Input
            }], summaryRowColumns: [{
                type: Input
            }], spacerColumn: [{
                type: Input
            }], sizeColumnsEqually: [{
                type: Input
            }], expandableRow: [{
                type: Input
            }], redrawOnResize: [{
                type: Input
            }], exportConvertNegative: [{
                type: Input
            }], stickyHeader: [{
                type: Input
            }], attributes: [{
                type: Input
            }], columnSizing: [{
                type: Input
            }], stretchColumn: [{
                type: Input
            }], stretchColumnOnChange: [{
                type: Input
            }], showPageSizeSelector: [{
                type: Input
            }], hidePagerOnOnePage: [{
                type: Input
            }], columnGroup: [{
                type: Input
            }], emptyMessage: [{
                type: Input
            }], enableTooltips: [{
                type: Input
            }], selectChildren: [{
                type: Input
            }], allowChildExpandOnMatch: [{
                type: Input
            }], sohoDatagrid: [{
                type: Input,
                args: ['soho-datagrid']
            }], selected: [{
                type: Output
            }], cellchange: [{
                type: Output
            }], rowRemove: [{
                type: Output
            }], rowAdd: [{
                type: Output
            }], filtered: [{
                type: Output
            }], expandrow: [{
                type: Output
            }], keydown: [{
                type: Output
            }], exiteditmode: [{
                type: Output
            }], beforeentereditmode: [{
                type: Output
            }], entereditmode: [{
                type: Output
            }], collapserow: [{
                type: Output
            }], sorted: [{
                type: Output
            }], nextPage: [{
                type: Output
            }], previousPage: [{
                type: Output
            }], firstPage: [{
                type: Output
            }], lastPage: [{
                type: Output
            }], pageSizeChange: [{
                type: Output
            }], beforePaging: [{
                type: Output
            }], afterPaging: [{
                type: Output
            }], beforeRowActivated: [{
                type: Output
            }], rowActivated: [{
                type: Output
            }], rowDeactivated: [{
                type: Output
            }], rowClicked: [{
                type: Output
            }], rowDoubleClicked: [{
                type: Output
            }], contextMenu: [{
                type: Output
            }], rowReordered: [{
                type: Output
            }], openFilterRow: [{
                type: Output
            }], closeFilterRow: [{
                type: Output
            }], settingsChanged: [{
                type: Output
            }], rendered: [{
                type: Output
            }], afterRender: [{
                type: Output
            }], verticalScroll: [{
                type: Output
            }], filteroperatorchanged: [{
                type: Output
            }], isDisabled: [{
                type: HostBinding,
                args: ['class.is-disabled']
            }], datagridRole: [{
                type: HostBinding,
                args: ['attr.role']
            }], onBeforeSelect: [{
                type: Input
            }], allowSelectAcrossPages: [{
                type: Input
            }], selectAllCurrentPage: [{
                type: Input
            }], columnIds: [{
                type: Input
            }], showNewRowIndicator: [{
                type: Input
            }], onExpandChildren: [{
                type: Input
            }], onCollapseChildren: [{
                type: Input
            }], onPostRenderCell: [{
                type: Input
            }], onDestroyCell: [{
                type: Input
            }], onEditCell: [{
                type: Input
            }], onKeyDown: [{
                type: Input
            }], onExpandRow: [{
                type: Input
            }], fallbackImage: [{
                type: Input
            }], fallbackTooltip: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
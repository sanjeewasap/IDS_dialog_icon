import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
// @ts-ignore
export class SohoStandalonePagerComponent {
    set dataset(dataset) {
        this.options.dataset = dataset;
        this.updateRequired = !!this.pager;
    }
    set pageSize(pageSize) {
        this.options.pagesize = pageSize;
        this.updateRequired = !!this.pager;
    }
    set pageSizes(pageSizes) {
        this.options.pagesizes = pageSizes;
        this.updateRequired = !!this.pager;
    }
    set showFirstButton(showFirstButton) {
        this.options.showFirstButton = showFirstButton;
        if (this.pager) {
            this.pager.showButton('first', showFirstButton);
        }
    }
    set showLastButton(showLastButton) {
        this.options.showLastButton = showLastButton;
        if (this.pager) {
            this.pager.showButton('last', showLastButton);
        }
    }
    set showNextButton(showNextButton) {
        this.options.showNextButton = showNextButton;
        if (this.pager) {
            this.pager.showButton('next', showNextButton);
        }
    }
    set showPreviousButton(showPreviousButton) {
        this.options.showPreviousButton = showPreviousButton;
        if (this.pager) {
            this.pager.showButton('previous', showPreviousButton);
        }
    }
    set showPageSizeSelector(showPageSizeSelector) {
        this.options.showPageSizeSelector = showPageSizeSelector;
        if (this.pager) {
            this.pager.showPageSizeSelector(showPageSizeSelector);
        }
        this.updateRequired = !!this.pager;
    }
    set showPageSelectorInput(showPageSelectorInput) {
        this.options.showPageSelectorInput = showPageSelectorInput;
        this.updateRequired = !!this.pager;
    }
    set enableFirstButton(enableFirstButton) {
        this.options.enableFirstButton = enableFirstButton;
        if (this.pager) {
            this.pager.enableButton('first', enableFirstButton);
        }
    }
    set enableLastButton(enableLastButton) {
        this.options.enableLastButton = enableLastButton;
        if (this.pager) {
            this.pager.enableButton('last', enableLastButton);
        }
    }
    set enablePreviousButton(enablePreviousButton) {
        this.options.enablePreviousButton = enablePreviousButton;
        if (this.pager) {
            this.pager.enableButton('previous', enablePreviousButton);
        }
    }
    set enableNextButton(enableNextButton) {
        this.options.enableNextButton = enableNextButton;
        if (this.pager) {
            this.pager.enableButton('next', enableNextButton);
        }
    }
    set previousPageTooltip(previousPageTooltip) {
        this.options.previousPageTooltip = previousPageTooltip;
        this.updateRequired = !!this.pager;
    }
    set firstPageTooltip(firstPageTooltip) {
        this.options.firstPageTooltip = firstPageTooltip;
        this.updateRequired = !!this.pager;
    }
    set nextPageTooltip(nextPageTooltip) {
        this.options.nextPageTooltip = nextPageTooltip;
        this.updateRequired = !!this.pager;
    }
    set lastPageTooltip(lastPageTooltip) {
        this.options.lastPageTooltip = lastPageTooltip;
        this.updateRequired = !!this.pager;
    }
    set attachPageSizeMenuToBody(attachPageSizeMenuToBody) {
        this.options.attachPageSizeMenuToBody = attachPageSizeMenuToBody;
        this.updateRequired = !!this.pager;
    }
    set smallPageSizeSelector(smallPageSizeSelector) {
        this.options.smallPageSizeSelector = smallPageSizeSelector;
        this.updateRequired = !!this.pager;
    }
    set pageSizeMenuSettings(options) {
        this.options.pageSizeMenuSettings = options;
        this.updateRequired = !!this.pager;
    }
    set attributes(attributes) {
        this.options.attributes = attributes;
        this.updateRequired = !!this.pager;
    }
    constructor(elementRef, ngZone) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.firstPage = new EventEmitter();
        this.lastPage = new EventEmitter();
        this.previousPage = new EventEmitter();
        this.nextPage = new EventEmitter();
        this.pageSizeChange = new EventEmitter();
        this.page = new EventEmitter();
        this.options = {};
        this.updateRequired = false;
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.elementRef.nativeElement);
            // -----------------------------------------------------------------------------------
            // Workaround for pagesizeevent not being fired unless the onPageSizeChange property
            // is set. Once that is fixed in soho/ep then this can be removed.
            // -----------------------------------------------------------------------------------
            this.options.onPageSizeChange = () => { };
            // -----------------------------------------------------------------------------------
            this.options.type = 'standalone';
            this.jQueryElement.pager(this.options);
            this.pager = this.jQueryElement.data('pager');
            // Setup the events
            this.jQueryElement.on('firstpage', (...args) => this.ngZone.run(() => this.firstPage.emit(args)));
            this.jQueryElement.on('lastpage', (...args) => this.ngZone.run(() => this.lastPage.emit(args)));
            this.jQueryElement.on('previouspage', (...args) => this.ngZone.run(() => this.previousPage.emit(args)));
            this.jQueryElement.on('nextpage', (...args) => this.ngZone.run(() => this.nextPage.emit(args)));
            this.jQueryElement.on('pagesizechange', (...args) => this.ngZone.run(() => this.pageSizeChange.emit(args)));
            this.jQueryElement.on('page', (...args) => this.ngZone.run(() => this.page.emit(args)));
        });
    }
    ngAfterViewChecked() {
        if (this.pager && this.updateRequired) {
            this.pager.updated(this.options);
            this.updateRequired = false;
        }
    }
    /** Tear Down */
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.pager) {
                this.pager.destroy();
                this.pager = null;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoStandalonePagerComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoStandalonePagerComponent, selector: "div[soho-standalone-pager]", inputs: { dataset: "dataset", pageSize: "pageSize", pageSizes: "pageSizes", showFirstButton: "showFirstButton", showLastButton: "showLastButton", showNextButton: "showNextButton", showPreviousButton: "showPreviousButton", showPageSizeSelector: "showPageSizeSelector", showPageSelectorInput: "showPageSelectorInput", enableFirstButton: "enableFirstButton", enableLastButton: "enableLastButton", enablePreviousButton: "enablePreviousButton", enableNextButton: "enableNextButton", previousPageTooltip: "previousPageTooltip", firstPageTooltip: "firstPageTooltip", nextPageTooltip: "nextPageTooltip", lastPageTooltip: "lastPageTooltip", attachPageSizeMenuToBody: "attachPageSizeMenuToBody", smallPageSizeSelector: "smallPageSizeSelector", pageSizeMenuSettings: "pageSizeMenuSettings", attributes: "attributes" }, outputs: { firstPage: "firstPage", lastPage: "lastPage", previousPage: "previousPage", nextPage: "nextPage", pageSizeChange: "pageSizeChange", page: "page" }, ngImport: i0, template: `<div class="pager-container"></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoStandalonePagerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'div[soho-standalone-pager]',
                    template: `<div class="pager-container"></div>`,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { dataset: [{
                type: Input
            }], pageSize: [{
                type: Input
            }], pageSizes: [{
                type: Input
            }], showFirstButton: [{
                type: Input
            }], showLastButton: [{
                type: Input
            }], showNextButton: [{
                type: Input
            }], showPreviousButton: [{
                type: Input
            }], showPageSizeSelector: [{
                type: Input
            }], showPageSelectorInput: [{
                type: Input
            }], enableFirstButton: [{
                type: Input
            }], enableLastButton: [{
                type: Input
            }], enablePreviousButton: [{
                type: Input
            }], enableNextButton: [{
                type: Input
            }], previousPageTooltip: [{
                type: Input
            }], firstPageTooltip: [{
                type: Input
            }], nextPageTooltip: [{
                type: Input
            }], lastPageTooltip: [{
                type: Input
            }], attachPageSizeMenuToBody: [{
                type: Input
            }], smallPageSizeSelector: [{
                type: Input
            }], pageSizeMenuSettings: [{
                type: Input
            }], attributes: [{
                type: Input
            }], firstPage: [{
                type: Output
            }], lastPage: [{
                type: Output
            }], previousPage: [{
                type: Output
            }], nextPage: [{
                type: Output
            }], pageSizeChange: [{
                type: Output
            }], page: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
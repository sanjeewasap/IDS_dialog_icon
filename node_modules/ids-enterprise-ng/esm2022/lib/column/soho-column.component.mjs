import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoColumnComponent {
    get isColumn() {
        return true;
    }
    /** Defines the data to use, must be specified for this component. */
    set dataset(dataset) {
        this.options.dataset = dataset;
        if (this.column) {
            this.column.settings.dataset = dataset;
            this.updateRequired = true;
        }
    }
    /** Chart Type */
    set type(value) {
        this.options.type = value;
        if (this.column) {
            this.column.settings.type = value;
            this.updateRequired = true;
        }
    }
    /** Default is a single or stacked chart. */
    set isStacked(value) {
        this.options.isStacked = value;
        if (this.column) {
            this.column.settings.isStacked = value;
            this.updateRequired = true;
        }
    }
    /** If false the legend will not be shown. */
    set showLegend(value) {
        this.options.showLegend = value;
        if (this.column) {
            this.column.settings.showLegend = value;
            this.updateRequired = true;
        }
    }
    /** true|false - will do or not do the animation, 'initial' will do only first time the animation. */
    set animate(value) {
        this.options.animate = value;
        if (this.column) {
            this.column.settings.animate = value;
            this.updateRequired = true;
        }
    }
    /** If true, the component will not resize when resizing the page. */
    set redrawOnResize(value) {
        this.options.redrawOnResize = value;
        if (this.column) {
            this.column.settings.redrawOnResize = value;
            this.updateRequired = true;
        }
    }
    /** The d3 axis format. */
    set format(value) {
        this.options.format = value;
        if (this.column) {
            this.column.settings.format = value;
            this.updateRequired = true;
        }
    }
    set formatterString(value) {
        this.options.formatterString = value;
        if (this.column) {
            this.column.settings.formatterString = value;
            this.updateRequired = true;
        }
    }
    /** Settings for the chart ticks. Can set ticks: {format: d3Format, number: n} */
    set ticks(value) {
        this.options.ticks = value;
        if (this.column) {
            this.column.settings.ticks = value;
            this.updateRequired = true;
        }
    }
    /** An empty message will be displayed when there is no chart data. */
    set emptyMessage(value) {
        this.options.emptyMessage = value;
        if (this.column) {
            this.column.settings.emptyMessage = value;
            this.updateRequired = true;
        }
    }
    /** Settings for the chart xAxis. */
    set xAxis(value) {
        this.options.xAxis = value;
        if (this.column) {
            this.column.settings.xAxis = value;
            this.updateRequired = true;
        }
    }
    /** Settings for the chart yAxis. */
    set yAxis(value) {
        this.options.yAxis = value;
        if (this.column) {
            this.column.settings.yAxis = value;
            this.updateRequired = true;
        }
    }
    /** Settings for the chart tooltip. */
    set tooltip(tooltip) {
        this.options.tooltip = tooltip;
        if (this.column) {
            this.column.settings.tooltip = tooltip;
            this.updateRequired = true;
        }
    }
    /**
     * Add extra attributes like id's to the component
     */
    set attributes(attributes) {
        this.options.attributes = attributes;
        if (this.column) {
            this.column.settings.attributes = attributes;
            this.updateRequired = true;
        }
    }
    /**
     * Add extra options to control axisLabels
     */
    set axisLabels(value) {
        this.options.axisLabels = value;
        if (this.column) {
            this.column.settings.axisLabels = value;
            this.updateRequired = true;
        }
    }
    /**
     * Adds the ability to use line chart if set to true. This will need a target value to the dataset.
     */
    set hideDots(value) {
        this.options.hideDots = value;
        if (this.column) {
            this.column.settings.hideDots = value;
            this.updateRequired = true;
        }
    }
    set useLine(value) {
        this.options.useLine = value;
        if (this.column) {
            this.column.settings.useLine = value;
            this.updateRequired = true;
        }
    }
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        /** Options. */
        this.options = {};
        /** Events */
        this.selected = new EventEmitter();
        this.unselected = new EventEmitter();
        this.rendered = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.dblclick = new EventEmitter();
        /**
         * @todo replace override of native attribute
         */
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.contextmenu = new EventEmitter();
        this.updateRequired = false;
    }
    /** Setup */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.chart(this.options);
            this.column = this.jQueryElement.data('column');
            // Setup the events
            this.jQueryElement.on('selected', (_e, args) => this.ngZone.run(() => this.selected.emit(args)));
            this.jQueryElement.on('unselected', (_e, args) => this.ngZone.run(() => this.unselected.emit(args)));
            this.jQueryElement.on('rendered', (...args) => this.ngZone.run(() => this.rendered.emit(args)));
            this.jQueryElement.on('contextmenu', (...args) => this.ngZone.run(() => this.contextmenu?.emit(args)));
            this.jQueryElement.on('dblclick', (_e, args) => this.ngZone.run(() => this.dblclick.emit(args)));
        });
    }
    ngAfterViewChecked() {
        if (this.column && this.updateRequired) {
            this.ngZone.runOutsideAngular(() => this.column?.updated(this.column.settings));
            this.updateRequired = false;
        }
    }
    updated() {
        this.ngZone.runOutsideAngular(() => {
            this.options.type = 'column';
            this.jQueryElement?.chart(this.options);
            this.column = this.jQueryElement?.data('column');
        });
    }
    /** Tear Down */
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.column) {
                this.column.destroy();
                this.column = null;
            }
        });
    }
    setSelected(selected) {
        this.ngZone.runOutsideAngular(() => this.column?.setSelected(selected));
    }
    toggleSelected(selected) {
        this.ngZone.runOutsideAngular(() => this.column?.toggleSelected(selected));
    }
    getSelected() {
        return this.ngZone.runOutsideAngular(() => this.column?.getSelected());
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoColumnComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoColumnComponent, selector: "[soho-column]", inputs: { dataset: "dataset", type: "type", isStacked: "isStacked", showLegend: "showLegend", animate: "animate", redrawOnResize: "redrawOnResize", format: "format", formatterString: "formatterString", ticks: "ticks", emptyMessage: "emptyMessage", xAxis: "xAxis", yAxis: "yAxis", tooltip: "tooltip", attributes: "attributes", axisLabels: "axisLabels", hideDots: "hideDots", useLine: "useLine" }, outputs: { selected: "selected", unselected: "unselected", rendered: "rendered", dblclick: "dblclick", contextmenu: "contextmenu" }, host: { properties: { "class.chart-container": "this.isColumn" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoColumnComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-column]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isColumn: [{
                type: HostBinding,
                args: ['class.chart-container']
            }], dataset: [{
                type: Input
            }], type: [{
                type: Input
            }], isStacked: [{
                type: Input
            }], showLegend: [{
                type: Input
            }], animate: [{
                type: Input
            }], redrawOnResize: [{
                type: Input
            }], format: [{
                type: Input
            }], formatterString: [{
                type: Input
            }], ticks: [{
                type: Input
            }], emptyMessage: [{
                type: Input
            }], xAxis: [{
                type: Input
            }], yAxis: [{
                type: Input
            }], tooltip: [{
                type: Input
            }], attributes: [{
                type: Input
            }], axisLabels: [{
                type: Input
            }], hideDots: [{
                type: Input
            }], useLine: [{
                type: Input
            }], selected: [{
                type: Output
            }], unselected: [{
                type: Output
            }], rendered: [{
                type: Output
            }], dblclick: [{
                type: Output
            }], contextmenu: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby1jb2x1bW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWRzLWVudGVycHJpc2Utbmcvc3JjL2xpYi9jb2x1bW4vc29oby1jb2x1bW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFHTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUVULFlBQVksRUFDWixXQUFXLEVBQ1gsS0FBSyxFQUdMLE1BQU0sR0FDUCxNQUFNLGVBQWUsQ0FBQzs7QUFRdkIsTUFBTSxPQUFPLG1CQUFtQjtJQUk5QixJQUEwQyxRQUFRO1FBQ2hELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVELHFFQUFxRTtJQUNyRSxJQUFhLE9BQU8sQ0FBQyxPQUFtQjtRQUN0QyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFFL0IsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztZQUN2QyxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQztTQUM1QjtJQUNILENBQUM7SUFFRCxpQkFBaUI7SUFDakIsSUFBYSxJQUFJLENBQUMsS0FBcUI7UUFDckMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBRTFCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNmLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7WUFDbEMsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBRUQsNENBQTRDO0lBQzVDLElBQWEsU0FBUyxDQUFDLEtBQWM7UUFDbkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBRS9CLElBQUksSUFBSSxDQUFDLE1B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LEtBQUs7Z0JBVU8sVUFBVTtzQkFBdEIsS0FBSztnQkFVTyxPQUFPO3NCQUFuQixLQUFLO2dCQVVPLGNBQWM7c0JBQTFCLEtBQUs7Z0JBVU8sTUFBTTtzQkFBbEIsS0FBSztnQkFTTyxlQUFlO3NCQUEzQixLQUFLO2dCQVVPLEtBQUs7c0JBQWpCLEtBQUs7Z0JBVU8sWUFBWTtzQkFBeEIsS0FBSztnQkFVTyxLQUFLO3NCQUFqQixLQUFLO2dCQVVPLEtBQUs7c0JBQWpCLEtBQUs7Z0JBVU8sT0FBTztzQkFBbkIsS0FBSztnQkFZTyxVQUFVO3NCQUF0QixLQUFLO2dCQVlPLFVBQVU7c0JBQXRCLEtBQUs7Z0JBWU8sUUFBUTtzQkFBcEIsS0FBSztnQkFTTyxPQUFPO3NCQUFuQixLQUFLO2dCQVdJLFFBQVE7c0JBQWpCLE1BQU07Z0JBQ0csVUFBVTtzQkFBbkIsTUFBTTtnQkFDRyxRQUFRO3NCQUFqQixNQUFNO2dCQUVHLFFBQVE7c0JBQWpCLE1BQU07Z0JBTUcsV0FBVztzQkFBcEIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0NoZWNrZWQsXG4gIEFmdGVyVmlld0luaXQsXG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSG9zdEJpbmRpbmcsXG4gIElucHV0LFxuICBOZ1pvbmUsXG4gIE9uRGVzdHJveSxcbiAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnW3NvaG8tY29sdW1uXScsIC8vIGVzbGludC1kaXNhYmxlLWxpbmVcbiAgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5cbmV4cG9ydCBjbGFzcyBTb2hvQ29sdW1uQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJWaWV3Q2hlY2tlZCwgT25EZXN0cm95IHtcbiAgLyoqIE9wdGlvbnMuICovXG4gIHByaXZhdGUgb3B0aW9uczogU29ob0NvbHVtbk9wdGlvbnMgPSB7fTtcblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNoYXJ0LWNvbnRhaW5lcicpIGdldCBpc0NvbHVtbigpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIC8qKiBEZWZpbmVzIHRoZSBkYXRhIHRvIHVzZSwgbXVzdCBiZSBzcGVjaWZpZWQgZm9yIHRoaXMgY29tcG9uZW50LiAqL1xuICBASW5wdXQoKSBzZXQgZGF0YXNldChkYXRhc2V0OiBBcnJheTxhbnk+KSB7XG4gICAgdGhpcy5vcHRpb25zLmRhdGFzZXQgPSBkYXRhc2V0O1xuXG4gICAgaWYgKHRoaXMuY29sdW1uKSB7XG4gICAgICB0aGlzLmNvbHVtbi5zZXR0aW5ncy5kYXRhc2V0ID0gZGF0YXNldDtcbiAgICAgIHRoaXMudXBkYXRlUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBDaGFydCBUeXBlICovXG4gIEBJbnB1dCgpIHNldCB0eXBlKHZhbHVlOiBTb2hvQ29sdW1uVHlwZSkge1xuICAgIHRoaXMub3B0aW9ucy50eXBlID0gdmFsdWU7XG5cbiAgICBpZiAodGhpcy5jb2x1bW4pIHtcbiAgICAgIHRoaXMuY29sdW1uLnNldHRpbmdzLnR5cGUgPSB2YWx1ZTtcbiAgICAgIHRoaXMudXBkYXRlUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBEZWZhdWx0IGlzIGEgc2luZ2xlIG9yIHN0YWNrZWQgY2hhcnQuICovXG4gIEBJbnB1dCgpIHNldCBpc1N0YWNrZWQodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLm9wdGlvbnMuaXNTdGFja2VkID0gdmFsdWU7XG5cbiAgICBpZiAodGhpcy5jb2x1bW4pIHtcbiAgICAgIHRoaXMuY29sdW1uLnNldHRpbmdzLmlzU3RhY2tlZCA9IHZhbHVlO1xuICAgICAgdGhpcy51cGRhdGVSZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqIElmIGZhbHNlIHRoZSBsZWdlbmQgd2lsbCBub3QgYmUgc2hvd24uICovXG4gIEBJbnB1dCgpIHNldCBzaG93TGVnZW5kKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5vcHRpb25zLnNob3dMZWdlbmQgPSB2YWx1ZTtcblxuICAgIGlmICh0aGlzLmNvbHVtbikge1xuICAgICAgdGhpcy5jb2x1bW4uc2V0dGluZ3Muc2hvd0xlZ2VuZCA9IHZhbHVlO1xuICAgICAgdGhpcy51cGRhdGVSZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqIHRydWV8ZmFsc2UgLSB3aWxsIGRvIG9yIG5vdCBkbyB0aGUgYW5pbWF0aW9uLCAnaW5pdGlhbCcgd2lsbCBkbyBvbmx5IGZpcnN0IHRpbWUgdGhlIGFuaW1hdGlvbi4gKi9cbiAgQElucHV0KCkgc2V0IGFuaW1hdGUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLm9wdGlvbnMuYW5pbWF0ZSA9IHZhbHVlO1xuXG4gICAgaWYgKHRoaXMuY29sdW1uKSB7XG4gICAgICB0aGlzLmNvbHVtbi5zZXR0aW5ncy5hbmltYXRlID0gdmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZVJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKiogSWYgdHJ1ZSwgdGhlIGNvbXBvbmVudCB3aWxsIG5vdCByZXNpemUgd2hlbiByZXNpemluZyB0aGUgcGFnZS4gKi9cbiAgQElucHV0KCkgc2V0IHJlZHJhd09uUmVzaXplKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5vcHRpb25zLnJlZHJhd09uUmVzaXplID0gdmFsdWU7XG5cbiAgICBpZiAodGhpcy5jb2x1bW4pIHtcbiAgICAgIHRoaXMuY29sdW1uLnNldHRpbmdzLnJlZHJhd09uUmVzaXplID0gdmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZVJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKiogVGhlIGQzIGF4aXMgZm9ybWF0LiAqL1xuICBASW5wdXQoKSBzZXQgZm9ybWF0KHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLm9wdGlvbnMuZm9ybWF0ID0gdmFsdWU7XG5cbiAgICBpZiAodGhpcy5jb2x1bW4pIHtcbiAgICAgIHRoaXMuY29sdW1uLnNldHRpbmdzLmZvcm1hdCA9IHZhbHVlO1xuICAgICAgdGhpcy51cGRhdGVSZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgQElucHV0KCkgc2V0IGZvcm1hdHRlclN0cmluZyh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5vcHRpb25zLmZvcm1hdHRlclN0cmluZyA9IHZhbHVlO1xuXG4gICAgaWYgKHRoaXMuY29sdW1uKSB7XG4gICAgICB0aGlzLmNvbHVtbi5zZXR0aW5ncy5mb3JtYXR0ZXJTdHJpbmcgPSB2YWx1ZTtcbiAgICAgIHRoaXMudXBkYXRlUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBTZXR0aW5ncyBmb3IgdGhlIGNoYXJ0IHRpY2tzLiBDYW4gc2V0IHRpY2tzOiB7Zm9ybWF0OiBkM0Zvcm1hdCwgbnVtYmVyOiBufSAqL1xuICBASW5wdXQoKSBzZXQgdGlja3ModmFsdWU6IG9iamVjdCkge1xuICAgIHRoaXMub3B0aW9ucy50aWNrcyA9IHZhbHVlO1xuXG4gICAgaWYgKHRoaXMuY29sdW1uKSB7XG4gICAgICB0aGlzLmNvbHVtbi5zZXR0aW5ncy50aWNrcyA9IHZhbHVlO1xuICAgICAgdGhpcy51cGRhdGVSZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqIEFuIGVtcHR5IG1lc3NhZ2Ugd2lsbCBiZSBkaXNwbGF5ZWQgd2hlbiB0aGVyZSBpcyBubyBjaGFydCBkYXRhLiAqL1xuICBASW5wdXQoKSBzZXQgZW1wdHlNZXNzYWdlKHZhbHVlOiBTb2hvRW1wdHlNZXNzYWdlT3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucy5lbXB0eU1lc3NhZ2UgPSB2YWx1ZTtcblxuICAgIGlmICh0aGlzLmNvbHVtbikge1xuICAgICAgdGhpcy5jb2x1bW4uc2V0dGluZ3MuZW1wdHlNZXNzYWdlID0gdmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZVJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKiogU2V0dGluZ3MgZm9yIHRoZSBjaGFydCB4QXhpcy4gKi9cbiAgQElucHV0KCkgc2V0IHhBeGlzKHZhbHVlOiBvYmplY3QpIHtcbiAgICB0aGlzLm9wdGlvbnMueEF4aXMgPSB2YWx1ZTtcblxuICAgIGlmICh0aGlzLmNvbHVtbikge1xuICAgICAgdGhpcy5jb2x1bW4uc2V0dGluZ3MueEF4aXMgPSB2YWx1ZTtcbiAgICAgIHRoaXMudXBkYXRlUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKiBTZXR0aW5ncyBmb3IgdGhlIGNoYXJ0IHlBeGlzLiAqL1xuICBASW5wdXQoKSBzZXQgeUF4aXModmFsdWU6IG9iamVjdCkge1xuICAgIHRoaXMub3B0aW9ucy55QXhpcyA9IHZhbHVlO1xuXG4gICAgaWYgKHRoaXMuY29sdW1uKSB7XG4gICAgICB0aGlzLmNvbHVtbi5zZXR0aW5ncy55QXhpcyA9IHZhbHVlO1xuICAgICAgdGhpcy51cGRhdGVSZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqIFNldHRpbmdzIGZvciB0aGUgY2hhcnQgdG9vbHRpcC4gKi9cbiAgQElucHV0KCkgc2V0IHRvb2x0aXAodG9vbHRpcDogc3RyaW5nIHwgU29ob0NvbHVtblRvb2x0aXBGdW5jdGlvbikge1xuICAgIHRoaXMub3B0aW9ucy50b29sdGlwID0gdG9vbHRpcDtcblxuICAgIGlmICh0aGlzLmNvbHVtbikge1xuICAgICAgdGhpcy5jb2x1bW4uc2V0dGluZ3MudG9vbHRpcCA9IHRvb2x0aXA7XG4gICAgICB0aGlzLnVwZGF0ZVJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkIGV4dHJhIGF0dHJpYnV0ZXMgbGlrZSBpZCdzIHRvIHRoZSBjb21wb25lbnRcbiAgICovXG4gIEBJbnB1dCgpIHNldCBhdHRyaWJ1dGVzKGF0dHJpYnV0ZXM6IEFycmF5PE9iamVjdD4gfCBPYmplY3QpIHtcbiAgICB0aGlzLm9wdGlvbnMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG5cbiAgICBpZiAodGhpcy5jb2x1bW4pIHtcbiAgICAgIHRoaXMuY29sdW1uLnNldHRpbmdzLmF0dHJpYnV0ZXMgPSBhdHRyaWJ1dGVzO1xuICAgICAgdGhpcy51cGRhdGVSZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBleHRyYSBvcHRpb25zIHRvIGNvbnRyb2wgYXhpc0xhYmVsc1xuICAgKi9cbiAgQElucHV0KCkgc2V0IGF4aXNMYWJlbHModmFsdWU6IGFueSkge1xuICAgIHRoaXMub3B0aW9ucy5heGlzTGFiZWxzID0gdmFsdWU7XG5cbiAgICBpZiAodGhpcy5jb2x1bW4pIHtcbiAgICAgIHRoaXMuY29sdW1uLnNldHRpbmdzLmF4aXNMYWJlbHMgPSB2YWx1ZTtcbiAgICAgIHRoaXMudXBkYXRlUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIHRoZSBhYmlsaXR5IHRvIHVzZSBsaW5lIGNoYXJ0IGlmIHNldCB0byB0cnVlLiBUaGlzIHdpbGwgbmVlZCBhIHRhcmdldCB2YWx1ZSB0byB0aGUgZGF0YXNldC5cbiAgICovXG4gIEBJbnB1dCgpIHNldCBoaWRlRG90cyh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMub3B0aW9ucy5oaWRlRG90cyA9IHZhbHVlO1xuXG4gICAgaWYgKHRoaXMuY29sdW1uKSB7XG4gICAgICB0aGlzLmNvbHVtbi5zZXR0aW5ncy5oaWRlRG90cyA9IHZhbHVlO1xuICAgICAgdGhpcy51cGRhdGVSZXF1aXJlZCA9IHRydWU7XG4gICAgfVxuICB9XG5cbiAgQElucHV0KCkgc2V0IHVzZUxpbmUodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLm9wdGlvbnMudXNlTGluZSA9IHZhbHVlO1xuXG4gICAgaWYgKHRoaXMuY29sdW1uKSB7XG4gICAgICB0aGlzLmNvbHVtbi5zZXR0aW5ncy51c2VMaW5lID0gdmFsdWU7XG4gICAgICB0aGlzLnVwZGF0ZVJlcXVpcmVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuXG4gIC8qKiBFdmVudHMgKi9cbiAgQE91dHB1dCgpIHNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8U29ob0NvbHVtblNlbGVjdEV2ZW50PiA9IG5ldyBFdmVudEVtaXR0ZXI8U29ob0NvbHVtblNlbGVjdEV2ZW50PigpO1xuICBAT3V0cHV0KCkgdW5zZWxlY3RlZDogRXZlbnRFbWl0dGVyPFNvaG9Db2x1bW5TZWxlY3RFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPFNvaG9Db2x1bW5TZWxlY3RFdmVudD4oKTtcbiAgQE91dHB1dCgpIHJlbmRlcmVkOiBFdmVudEVtaXR0ZXI8T2JqZWN0PiA9IG5ldyBFdmVudEVtaXR0ZXI8T2JqZWN0PigpO1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L25vLW91dHB1dC1uYXRpdmUsIEBhbmd1bGFyLWVzbGludC9uby1vdXRwdXQtcmVuYW1lXG4gIEBPdXRwdXQoKSBkYmxjbGljazogRXZlbnRFbWl0dGVyPE9iamVjdD4gPSBuZXcgRXZlbnRFbWl0dGVyPE9iamVjdD4oKTtcblxuICAvKipcbiAgICogQHRvZG8gcmVwbGFjZSBvdmVycmlkZSBvZiBuYXRpdmUgYXR0cmlidXRlXG4gICAqL1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L25vLW91dHB1dC1uYXRpdmUsIEBhbmd1bGFyLWVzbGludC9uby1vdXRwdXQtcmVuYW1lXG4gIEBPdXRwdXQoKSBjb250ZXh0bWVudTogRXZlbnRFbWl0dGVyPE9iamVjdD4gPSBuZXcgRXZlbnRFbWl0dGVyPE9iamVjdD4oKTtcblxuICBwcml2YXRlIGpRdWVyeUVsZW1lbnQ/OiBKUXVlcnk7XG4gIHB1YmxpYyBjb2x1bW4/OiBTb2hvQ29sdW1uIHwgbnVsbDtcbiAgcHJpdmF0ZSB1cGRhdGVSZXF1aXJlZCA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgZWxlbWVudDogRWxlbWVudFJlZixcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICApIHsgfVxuXG4gIC8qKiBTZXR1cCAqL1xuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50ID0galF1ZXJ5KHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50KTtcblxuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50LmNoYXJ0KHRoaXMub3B0aW9ucyk7XG4gICAgICB0aGlzLmNvbHVtbiA9IHRoaXMualF1ZXJ5RWxlbWVudC5kYXRhKCdjb2x1bW4nKTtcblxuICAgICAgLy8gU2V0dXAgdGhlIGV2ZW50c1xuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50Lm9uKCdzZWxlY3RlZCcsIChfZTogYW55LCBhcmdzOiBTb2hvQ29sdW1uU2VsZWN0RXZlbnQpID0+XG4gICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB0aGlzLnNlbGVjdGVkLmVtaXQoYXJncykpKTtcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudC5vbigndW5zZWxlY3RlZCcsIChfZTogYW55LCBhcmdzOiBTb2hvQ29sdW1uU2VsZWN0RXZlbnQpID0+XG4gICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB0aGlzLnVuc2VsZWN0ZWQuZW1pdChhcmdzKSkpO1xuICAgICAgdGhpcy5qUXVlcnlFbGVtZW50Lm9uKCdyZW5kZXJlZCcsICguLi5hcmdzKSA9PlxuICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5yZW5kZXJlZC5lbWl0KGFyZ3MpKSk7XG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQub24oJ2NvbnRleHRtZW51JywgKC4uLmFyZ3MpID0+XG4gICAgICAgIHRoaXMubmdab25lLnJ1bigoKSA9PiB0aGlzLmNvbnRleHRtZW51Py5lbWl0KGFyZ3MpKSk7XG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQub24oJ2RibGNsaWNrJywgKF9lOiBhbnksIGFyZ3M6IE9iamVjdCkgPT5cbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHRoaXMuZGJsY2xpY2suZW1pdChhcmdzKSkpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdDaGVja2VkKCkge1xuICAgIGlmICh0aGlzLmNvbHVtbiAmJiB0aGlzLnVwZGF0ZVJlcXVpcmVkKSB7XG4gICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB0aGlzLmNvbHVtbj8udXBkYXRlZCh0aGlzLmNvbHVtbi5zZXR0aW5ncykpO1xuICAgICAgdGhpcy51cGRhdGVSZXF1aXJlZCA9IGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZWQoKSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy5vcHRpb25zLnR5cGUgPSAnY29sdW1uJztcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudD8uY2hhcnQodGhpcy5vcHRpb25zKTtcbiAgICAgIHRoaXMuY29sdW1uID0gdGhpcy5qUXVlcnlFbGVtZW50Py5kYXRhKCdjb2x1bW4nKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKiBUZWFyIERvd24gKi9cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgLy8gY2FsbCBvdXRzaWRlIHRoZSBhbmd1bGFyIHpvbmUgc28gY2hhbmdlIGRldGVjdGlvbiBpc24ndCB0cmlnZ2VyZWQgYnkgdGhlIHNvaG8gY29tcG9uZW50LlxuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmpRdWVyeUVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5qUXVlcnlFbGVtZW50Lm9mZigpO1xuICAgICAgICB0aGlzLmpRdWVyeUVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jb2x1bW4pIHtcbiAgICAgICAgdGhpcy5jb2x1bW4uZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmNvbHVtbiA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwdWJsaWMgc2V0U2VsZWN0ZWQoc2VsZWN0ZWQ6IFNvaG9Db2x1bW5TZWxlY3RlZCkge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMuY29sdW1uPy5zZXRTZWxlY3RlZChzZWxlY3RlZCkpO1xuICB9XG5cbiAgcHVibGljIHRvZ2dsZVNlbGVjdGVkKHNlbGVjdGVkOiBTb2hvQ29sdW1uU2VsZWN0ZWQpIHtcbiAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB0aGlzLmNvbHVtbj8udG9nZ2xlU2VsZWN0ZWQoc2VsZWN0ZWQpKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRTZWxlY3RlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gdGhpcy5jb2x1bW4/LmdldFNlbGVjdGVkKCkpO1xuICB9XG59XG4iXX0=
import { Directive, EventEmitter, HostBinding, Output } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoTrackDirtyDirective {
    get trackDirtyAttr() {
        return true;
    }
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        /**
         * Called when element value is different from original value
         */
        this.dirty = new EventEmitter();
        /**
         * Called when element value is same as original value
         */
        this.pristine = new EventEmitter();
        /**
         * Called when the element has its original value reset to the current value
         */
        this.afterResetDirty = new EventEmitter();
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            // no options available for control
            this.jQueryElement.trackdirty();
            /**
             * Bind to jQueryElement's events
             */
            this.jQueryElement.on('dirty', (event) => this.ngZone.run(() => this.dirty.emit(event)));
            this.jQueryElement.on('pristine', (event) => this.ngZone.run(() => this.pristine.emit(event)));
            this.jQueryElement.on('afterresetdirty', (event) => this.ngZone.run(() => this.afterResetDirty.emit(event)));
            // returns a boolean, not an object
            this.trackDirty = this.jQueryElement.data('trackdirty');
        });
    }
    ngOnDestroy() {
        if (this.trackDirty) {
            this.ngZone.runOutsideAngular(() => this.trackDirty?.destroy());
            this.trackDirty = null;
        }
    }
    changeDirty() {
        if (this.trackDirty) {
            this.ngZone.runOutsideAngular(() => this.jQueryElement?.trigger('change.dirty'));
        }
    }
    resetDirty() {
        if (this.trackDirty) {
            this.ngZone.runOutsideAngular(() => this.jQueryElement?.trigger('resetdirty.dirty'));
        }
    }
    updated() {
        if (this.trackDirty) {
            this.ngZone.runOutsideAngular(() => this.trackDirty?.updated());
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTrackDirtyDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: SohoTrackDirtyDirective, selector: "[soho-trackdirty]", outputs: { dirty: "dirty", pristine: "pristine", afterResetDirty: "afterResetDirty" }, host: { properties: { "attr.data-trackdirty": "this.trackDirtyAttr" } }, exportAs: ["soho-trackdirty"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTrackDirtyDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[soho-trackdirty]',
                    exportAs: 'soho-trackdirty'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { trackDirtyAttr: [{
                type: HostBinding,
                args: ['attr.data-trackdirty']
            }], dirty: [{
                type: Output
            }], pristine: [{
                type: Output
            }], afterResetDirty: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby10cmFja2RpcnR5LmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lkcy1lbnRlcnByaXNlLW5nL3NyYy9saWIvdHJhY2tkaXJ0eS9zb2hvLXRyYWNrZGlydHkuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFFTCxTQUFTLEVBRVQsWUFBWSxFQUNaLFdBQVcsRUFHWCxNQUFNLEVBQ1AsTUFBTSxlQUFlLENBQUM7O0FBT3ZCLE1BQU0sT0FBTyx1QkFBdUI7SUFFbEMsSUFBeUMsY0FBYztRQUN4RCxPQUFPLElBQUksQ0FBQztJQUNiLENBQUM7SUFxQkMsWUFDVSxPQUFtQixFQUNuQixNQUFjO1FBRGQsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQUNuQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBckJ4Qjs7V0FFRztRQUNPLFVBQUssR0FBc0MsSUFBSSxZQUFZLEVBQXVCLENBQUM7UUFDN0Y7O1dBRUc7UUFDTyxhQUFRLEdBQXNDLElBQUksWUFBWSxFQUF1QixDQUFDO1FBQ2hHOztXQUVHO1FBQ08sb0JBQWUsR0FBc0MsSUFBSSxZQUFZLEVBQXVCLENBQUM7SUFXbkcsQ0FBQztJQUVMLGVBQWU7UUFDYixJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRTtZQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRXhELG1DQUFtQztZQUNuQyxJQUFJLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBRWhDOztlQUVHO1lBQ0gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUMsS0FBMEIsRUFBRSxFQUFFLENBQzVELElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUVqRCxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxLQUEwQixFQUFFLEVBQUUsQ0FDL0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBRXBELElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRSxDQUFDLGlCQUFpQixFQUFFLENBQUMsS0FBMEIsRUFBRSxFQUFFLENBQ3RFLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUUzRCxtQ0FBbUM7WUFDbkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUMxRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxXQUFXO1FBQ1QsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ25CLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDO1lBQ2hFLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1NBQ3hCO0lBQ0gsQ0FBQztJQUVELFdBQVc7UUFDVCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1NBQ2xGO0lBQ0gsQ0FBQztJQUVELFVBQVU7UUFDUixJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDbkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUM7U0FDdEY7SUFDSCxDQUFDO0lBRUQsT0FBTztRQUNMLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNuQixJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztTQUNqRTtJQUNILENBQUM7OEdBN0VVLHVCQUF1QjtrR0FBdkIsdUJBQXVCOzsyRkFBdkIsdUJBQXVCO2tCQUxuQyxTQUFTO21CQUFDO29CQUNULDhEQUE4RDtvQkFDOUQsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsUUFBUSxFQUFFLGlCQUFpQjtpQkFDNUI7c0hBRzBDLGNBQWM7c0JBQXRELFdBQVc7dUJBQUMsc0JBQXNCO2dCQU96QixLQUFLO3NCQUFkLE1BQU07Z0JBSUcsUUFBUTtzQkFBakIsTUFBTTtnQkFJRyxlQUFlO3NCQUF4QixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgRGlyZWN0aXZlLFxuICBFbGVtZW50UmVmLFxuICBFdmVudEVtaXR0ZXIsXG4gIEhvc3RCaW5kaW5nLFxuICBOZ1pvbmUsXG4gIE9uRGVzdHJveSxcbiAgT3V0cHV0XG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9kaXJlY3RpdmUtc2VsZWN0b3JcbiAgc2VsZWN0b3I6ICdbc29oby10cmFja2RpcnR5XScsXG4gIGV4cG9ydEFzOiAnc29oby10cmFja2RpcnR5J1xufSlcbmV4cG9ydCBjbGFzcyBTb2hvVHJhY2tEaXJ0eURpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XG5cbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtdHJhY2tkaXJ0eScpIGdldCB0cmFja0RpcnR5QXR0cigpIHtcbiByZXR1cm4gdHJ1ZTtcbn1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gZWxlbWVudCB2YWx1ZSBpcyBkaWZmZXJlbnQgZnJvbSBvcmlnaW5hbCB2YWx1ZVxuICAgKi9cbiAgQE91dHB1dCgpIGRpcnR5OiBFdmVudEVtaXR0ZXI8U29ob1RyYWNrRGlydHlFdmVudD4gPSBuZXcgRXZlbnRFbWl0dGVyPFNvaG9UcmFja0RpcnR5RXZlbnQ+KCk7XG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBlbGVtZW50IHZhbHVlIGlzIHNhbWUgYXMgb3JpZ2luYWwgdmFsdWVcbiAgICovXG4gIEBPdXRwdXQoKSBwcmlzdGluZTogRXZlbnRFbWl0dGVyPFNvaG9UcmFja0RpcnR5RXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxTb2hvVHJhY2tEaXJ0eUV2ZW50PigpO1xuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIGVsZW1lbnQgaGFzIGl0cyBvcmlnaW5hbCB2YWx1ZSByZXNldCB0byB0aGUgY3VycmVudCB2YWx1ZVxuICAgKi9cbiAgQE91dHB1dCgpIGFmdGVyUmVzZXREaXJ0eTogRXZlbnRFbWl0dGVyPFNvaG9UcmFja0RpcnR5RXZlbnQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxTb2hvVHJhY2tEaXJ0eUV2ZW50PigpO1xuXG4gIC8qKlxuICAgKiBMb2NhbCB2YXJpYWJsZXNcbiAgICovXG4gIHByaXZhdGUgalF1ZXJ5RWxlbWVudD86IEpRdWVyeTtcbiAgcHJpdmF0ZSB0cmFja0RpcnR5PzogVHJhY2tEaXJ0eVN0YXRpYyB8IG51bGw7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXG4gICkgeyB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcbiAgICAgIHRoaXMualF1ZXJ5RWxlbWVudCA9IGpRdWVyeSh0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCk7XG5cbiAgICAgIC8vIG5vIG9wdGlvbnMgYXZhaWxhYmxlIGZvciBjb250cm9sXG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQudHJhY2tkaXJ0eSgpO1xuXG4gICAgICAvKipcbiAgICAgICAqIEJpbmQgdG8galF1ZXJ5RWxlbWVudCdzIGV2ZW50c1xuICAgICAgICovXG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQub24oJ2RpcnR5JywgKGV2ZW50OiBTb2hvVHJhY2tEaXJ0eUV2ZW50KSA9PlxuICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5kaXJ0eS5lbWl0KGV2ZW50KSkpO1xuXG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQub24oJ3ByaXN0aW5lJywgKGV2ZW50OiBTb2hvVHJhY2tEaXJ0eUV2ZW50KSA9PlxuICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4gdGhpcy5wcmlzdGluZS5lbWl0KGV2ZW50KSkpO1xuXG4gICAgICB0aGlzLmpRdWVyeUVsZW1lbnQub24oJ2FmdGVycmVzZXRkaXJ0eScsIChldmVudDogU29ob1RyYWNrRGlydHlFdmVudCkgPT5cbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHRoaXMuYWZ0ZXJSZXNldERpcnR5LmVtaXQoZXZlbnQpKSk7XG5cbiAgICAgIC8vIHJldHVybnMgYSBib29sZWFuLCBub3QgYW4gb2JqZWN0XG4gICAgICB0aGlzLnRyYWNrRGlydHkgPSB0aGlzLmpRdWVyeUVsZW1lbnQuZGF0YSgndHJhY2tkaXJ0eScpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMudHJhY2tEaXJ0eSkge1xuICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4gdGhpcy50cmFja0RpcnR5Py5kZXN0cm95KCkpO1xuICAgICAgdGhpcy50cmFja0RpcnR5ID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBjaGFuZ2VEaXJ0eSgpIHtcbiAgICBpZiAodGhpcy50cmFja0RpcnR5KSB7XG4gICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB0aGlzLmpRdWVyeUVsZW1lbnQ/LnRyaWdnZXIoJ2NoYW5nZS5kaXJ0eScpKTtcbiAgICB9XG4gIH1cblxuICByZXNldERpcnR5KCkge1xuICAgIGlmICh0aGlzLnRyYWNrRGlydHkpIHtcbiAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMualF1ZXJ5RWxlbWVudD8udHJpZ2dlcigncmVzZXRkaXJ0eS5kaXJ0eScpKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVkKCkge1xuICAgIGlmICh0aGlzLnRyYWNrRGlydHkpIHtcbiAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHRoaXMudHJhY2tEaXJ0eT8udXBkYXRlZCgpKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==
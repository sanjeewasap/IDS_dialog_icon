// tslint:disable-next-line:no-unused-variable
import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, EventEmitter, HostBinding, Input, Output, ViewChild, forwardRef } from '@angular/core';
import { ArgumentHelper } from '../utils/argument.helper';
import { SohoSearchFieldComponent } from '../searchfield/soho-searchfield.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "../searchfield/soho-searchfield.component";
/**
 * This component will allow the developer to modify any DOM element
 * by exposing it (if desired)
 */
export class SohoListViewSearchComponent {
    constructor() {
        /**
         * Use this flag if you are projecting a soho-searchfield into this component
         * from another component and do not want this component to build another
         * searchfield
         */
        this.buildSearch = true;
    }
    get isListviewSearch() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoListViewSearchComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoListViewSearchComponent, selector: "[soho-listview-search]", inputs: { buildSearch: "buildSearch" }, host: { properties: { "class.listview-search": "this.isListviewSearch" } }, ngImport: i0, template: `
    <input soho-searchfield *ngIf="buildSearch">
    <ng-content select="span[soho-searchfield-wrapper]"></ng-content>
    <ng-content select="input[soho-searchfield]"></ng-content>
    <ng-content></ng-content>
  `, isInline: true, dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: i2.SohoSearchFieldComponent, selector: "input[soho-searchfield]", inputs: ["options", "allResultsCallback", "categories", "categoryMultiselect", "clearable", "showAllResults", "showCategoryText", "button", "source", "template", "collapseSize", "tabbable"], outputs: ["selected", "cleared"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoListViewSearchComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: '[soho-listview-search]',
                    template: `
    <input soho-searchfield *ngIf="buildSearch">
    <ng-content select="span[soho-searchfield-wrapper]"></ng-content>
    <ng-content select="input[soho-searchfield]"></ng-content>
    <ng-content></ng-content>
  `,
                }]
        }], propDecorators: { buildSearch: [{
                type: Input
            }], isListviewSearch: [{
                type: HostBinding,
                args: ['class.listview-search']
            }] } });
export class SohoListViewItemComponent {
    /**
     * Constructor.
     *
     * @param element - the element.
     */
    constructor(element) {
        this.element = element;
        /** Sets the item as disabled.  */
        this.disabled = false;
        /** Sets the item as selected.  */
        this.selected = false;
    }
    /**
     * The index of the list view item in it's parent.
     */
    get index() {
        return this.selector?.index();
    }
    get selector() {
        return this.listItem;
    }
    ngAfterViewInit() {
        this.listItem = jQuery(this.element.nativeElement);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoListViewItemComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoListViewItemComponent, selector: "[soho-listview-item]", inputs: { disabled: "disabled", selected: "selected" }, host: { properties: { "class.is-disabled": "this.disabled", "class.is-selected": "this.selected" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoListViewItemComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: '[soho-listview-item]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { disabled: [{
                type: HostBinding,
                args: ['class.is-disabled']
            }, {
                type: Input
            }], selected: [{
                type: HostBinding,
                args: ['class.is-selected']
            }, {
                type: Input
            }] } });
export class SohoListViewHeaderComponent {
    get isHeading() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoListViewHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoListViewHeaderComponent, selector: "[soho-listview-header]", host: { properties: { "class.listview-heading": "this.isHeading" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoListViewHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: '[soho-listview-header]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], propDecorators: { isHeading: [{
                type: HostBinding,
                args: ['class.listview-heading']
            }] } });
export class SohoListViewSubHeaderComponent {
    get isSubHeading() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoListViewSubHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoListViewSubHeaderComponent, selector: "[soho-listview-subheader]", host: { properties: { "class.listview-subheading": "this.isSubHeading" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoListViewSubHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: '[soho-listview-subheader]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], propDecorators: { isSubHeading: [{
                type: HostBinding,
                args: ['class.listview-subheading']
            }] } });
export class SohoListViewMicroComponent {
    get isMicro() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoListViewMicroComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoListViewMicroComponent, selector: "[soho-listview-micro]", host: { properties: { "class.listview-micro": "this.isMicro" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoListViewMicroComponent, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: '[soho-listview-micro]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], propDecorators: { isMicro: [{
                type: HostBinding,
                args: ['class.listview-micro']
            }] } });
export class SohoListViewComponent {
    /**
     * Array of data
     */
    set dataset(value) {
        this.options.dataset = value;
        if (this.jQueryElement && this.listview) {
            this.listview.settings.dataset = value;
            this.updateRequired = true;
        }
    }
    get dateset() {
        return this.options.dataset;
    }
    /** Audible Label (or use parent title). */
    set description(value) {
        this.options.description = value;
        if (this.jQueryElement && this.listview) {
            this.listview.settings.description = value;
            this.updateRequired = true;
        }
    }
    /** If paging is activated, sets the number of listview items available per page. */
    set pagesize(value) {
        this.options.pagesize = value;
        if (this.jQueryElement && this.listview) {
            this.listview.settings.pagesize = value;
            this.updateRequired = true;
        }
    }
    /** If true, activates paging. */
    set paging(value) {
        this.options.paging = value;
        if (this.jQueryElement && this.listview) {
            this.listview.settings.paging = value;
            this.updateRequired = true;
        }
    }
    /** If true, associates itself with a Searchfield/Autocomplete and allows itself to be filtered.  */
    set searchable(value) {
        this.options.searchable = value;
        if (this.jQueryElement && this.listview) {
            this.listview.settings.searchable = value;
            this.updateRequired = true;
        }
    }
    get searchable() {
        return this.options.searchable;
    }
    /** false, 'single', or 'multiple'. */
    set selectable(value) {
        this.options.selectable = value;
        if (this.jQueryElement && this.listview) {
            this.listview.settings.selectable = value;
            this.updateRequired = true;
        }
    }
    /** Select on focus change?true or false. */
    set selectOnFocus(value) {
        this.options.selectOnFocus = value;
        if (this.jQueryElement && this.listview) {
            this.listview.settings.selectOnFocus = value;
            this.updateRequired = true;
        }
    }
    /** External function that can be used to provide an empty  message when no data is available. */
    set emptyMessage(value) {
        this.options.emptyMessage = value;
        if (this.jQueryElement && this.listview) {
            this.listview.settings.emptyMessage = value;
            this.updateRequired = true;
        }
    }
    /** External function that can be used to provide a datasource, or a URL. */
    set source(value) {
        this.options.source = value;
        if (this.jQueryElement && this.listview) {
            this.listview.settings.source = value;
            this.updateRequired = true;
        }
    }
    /** Html Template String. */
    set template(value) {
        this.options.template = value;
        if (this.jQueryElement && this.listview) {
            this.listview.settings.template = value;
            this.updateRequired = true;
        }
    }
    set disableItemDeactivation(value) {
        this.options.disableItemDeactivation = value;
        if (this.jQueryElement && this.listview) {
            this.listview.settings.disableItemDeactivation = value;
            this.updateRequired = true;
        }
    }
    get disableItemDeactivation() {
        return this.options.disableItemDeactivation;
    }
    set attributes(attributes) {
        this.options.attributes = attributes;
        if (this.jQueryElement && this.listview) {
            this.listview.settings.attributes = attributes;
            this.updateRequired = true;
        }
    }
    get attributes() {
        return this.options.attributes;
    }
    /**
     * Set the list of selected items either by their indices or via the
     * jQuery selector for the li element.
     *
     * @param selectedItems the list of selected items.
     * @throws Error if any of the indicies are out of bounds.
     */
    set selectedItems(selectedItems) {
        this.select(selectedItems);
    }
    /**
     * Selected List Items.
     *
     * Note currenty this returns the index of the selected item.
     *
     * @return the indexes of the selected list items.
     */
    get getSelectedItems() {
        // Map the selected items as indexes
        // @todo could map to the SohoListViewItemComponent?
        return this.listview?.selectedItems.map((element) => element.index());
    }
    /**
     * Constructor.
     */
    constructor(ngZone) {
        this.ngZone = ngZone;
        /**
         * Called after the listview is rendered, passes the dataset
         */
        this.rendered = new EventEmitter();
        /**
         * Called once an item is selected. Returns an object containing the event and the
         * current selected items.
         */
        this.selected = new EventEmitter();
        /**
         * Called once an item is deselected. Returns an object containing the event and the
         * current selected items.
         */
        this.unselected = new EventEmitter();
        /**
         * Called once an item is deselected. Returns an object containing the event and the
         * current selected items.
         */
        this.deselected = new EventEmitter();
        /**
         * Called once an item is activated. Returns an object containing the event
         * and additional info about the activated item.
         */
        this.itemactivated = new EventEmitter();
        /**
         * Called once an item is deactivated.  Returns an object containing the event
         * and additional info about the deactivated item.
         */
        this.itemdeactivated = new EventEmitter();
        /**
         * Called once an item is clicked. You may also prefer need activated / deactived here.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.click = new EventEmitter();
        /**
         * Called once an item is double clicked. This isnt used that often.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.dblclick = new EventEmitter();
        /**
         * Called during right click to enable context menus on list items.
         * Use popupmenu during this event.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.contextmenu = new EventEmitter();
        /**
         * Called after the list has been sorted for any reason
         */
        this.sorted = new EventEmitter();
        this.searchfieldRef = undefined;
        this.options = {};
    }
    ngAfterViewInit() {
        if (!this.listViewRef) {
            throw Error('Unable to find listview reference...');
        }
        this.ngZone.runOutsideAngular(() => {
            // Found a searchfield in the template, set searchable to true
            if (this.searchfieldRef) {
                this.options.searchable = true;
            }
            this.jQueryElement = jQuery(this.listViewRef?.nativeElement);
            this.jQueryElement.listview(this.options);
            this.listview = this.jQueryElement.data('listview');
            /**
             * Bind to jQueryElement's events
             */
            this.jQueryElement.on('rendered', (...args) => this.ngZone.run(() => this.rendered.emit(args)));
            this.jQueryElement.on('selected', (...args) => this.ngZone.run(() => this.selected.emit(args)));
            this.jQueryElement.on('unselected', (...args) => this.ngZone.run(() => this.unselected.emit(args)));
            this.jQueryElement.on('deselected', (...args) => this.ngZone.run(() => this.deselected.emit(args)));
            this.jQueryElement.on('itemactivated', (...args) => this.ngZone.run(() => this.itemactivated.emit(args)));
            this.jQueryElement.on('itemdeactivated', (...args) => this.ngZone.run(() => this.itemdeactivated.emit(args)));
            this.jQueryElement.on('click', (...args) => this.ngZone.run(() => this.click.emit(args)));
            this.jQueryElement.on('dblclick', (...args) => this.ngZone.run(() => this.dblclick.emit(args)));
            this.jQueryElement.on('contextmenu', (...args) => this.ngZone.run(() => this.contextmenu?.emit(args)));
            this.jQueryElement.on('sorted', (...args) => this.ngZone.run(() => this.sorted.emit(args)));
        });
        this.items?.changes.subscribe(() => {
            this.updateRequired = true;
        });
    }
    ngAfterViewChecked() {
        if (this.updateRequired) {
            this.ngZone.runOutsideAngular(() => this.listview?.updated());
            this.updateRequired = false;
        }
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.listview) {
                this.listview.destroy();
                this.listview = null;
            }
        });
    }
    get listClass() {
        let classes = 'listview';
        if (this.class) {
            classes += ` ${this.class}`;
        }
        return classes;
    }
    /**
     * Clear all the currently selected listview items that are selected.
     */
    clearAllSelected() {
        if (this.listview) {
            this.ngZone.runOutsideAngular(() => this.listview?.clearAllSelected());
        }
    }
    /**
     * Toggle the selected listview items between all and none.
     */
    toggleAll() {
        if (this.listview) {
            this.ngZone.runOutsideAngular(() => this.listview?.toggleAll());
        }
    }
    /**
     * Removes the list item (or list items) identified by their index or jQuery element.
     *
     * @param index - the index (or list of indices) of the items to be removed.
     * @throws Error if the argument is null, or contains out of range indices then any error is thrown.
     */
    remove(index) {
        this.apply({ fn: (e) => this.ngZone.runOutsideAngular(() => this.listview?.remove(e)), index });
    }
    /**
     * Unselects the list item (or list items) identified by their index or jQuery element.
     *
     * @param index - the index (or list of indices) of the items to be unselected.
     * @throws Error if the argument is null, or contains out of range indices then any error is thrown.
     */
    unselect(index) {
        this.apply({ fn: (e) => this.ngZone.runOutsideAngular(() => this.listview?.deselect(e)), index });
    }
    /**
     * Selects the list item (or list items) identified by their index or jQuery element.
     *
     * If the argument is null, or contains out of range indices then any error is thrown.
     *
     * @param index the index (or list of indices) of the items to be deselected.
     * @throws Error if the argument is null, or contains out of range indices then any error is thrown.
     */
    select(index) {
        this.apply({ fn: (e) => this.ngZone.runOutsideAngular(() => this.listview?.select(e)), index });
    }
    /**
     * Activate the given list item.
     */
    activateItem(item) {
        this.apply({ fn: (e) => this.ngZone.runOutsideAngular(() => this.listview?.activateItem(e)), index: item });
    }
    /**
     * Return an object containing info about the currently activated item.
     */
    activatedItem() {
        return this.ngZone.runOutsideAngular(() => this.listview?.activatedItem());
    }
    /**
     * De-activate the given list item. If no item is specified the currently
     * activated item will be deactivated.
     */
    deactivateItem(item) {
        this.ngZone.runOutsideAngular(() => this.listview?.deactivateItem(item));
    }
    /**
     * Toggle Activation on the given list item.
     */
    toggleItemActivation(item) {
        this.apply({ fn: (e) => this.ngZone.runOutsideAngular(() => this.listview?.toggleItemActivation(e)), index: item });
    }
    /**
     * Apply the given function to the list view item(s).
     *
     * @param fn the function to apply - must take a SohoListViewReference.
     * @param index the index of list view item(s).
     */
    apply({ fn, index }) {
        ArgumentHelper.checkNotNull('index', index);
        if (this.listview) {
            this.boundsCheck(index);
            if (index instanceof Array) {
                index.forEach(element => fn(element));
            }
            else {
                fn(index);
            }
        }
        else {
            throw Error('Component not initialised.');
        }
    }
    /**
     * Verifies the given item reference is within allowable ranges.
     */
    boundsCheck(index) {
        if (typeof index === 'number') {
            const indexNumber = index;
            if (indexNumber < 0 || indexNumber >= this.itemCount) {
                throw Error(`The item index '${index}' is out of bounds.`);
            }
        }
        else if (index instanceof Array) {
            index.forEach(element => this.boundsCheck(element));
        }
    }
    /**
     * The number of items in the list.
     */
    get itemCount() {
        return this.items?.length;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoListViewComponent, deps: [{ token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoListViewComponent, selector: "soho-listview", inputs: { class: "class", sohoListviewElementId: "sohoListviewElementId", dataset: "dataset", description: "description", pagesize: "pagesize", paging: "paging", searchable: "searchable", selectable: "selectable", selectOnFocus: "selectOnFocus", emptyMessage: "emptyMessage", source: "source", template: "template", disableItemDeactivation: "disableItemDeactivation", attributes: "attributes", selectedItems: "selectedItems" }, outputs: { rendered: "rendered", selected: "selected", unselected: "unselected", deselected: "deselected", itemactivated: "itemactivated", itemdeactivated: "itemdeactivated", click: "click", dblclick: "dblclick", contextmenu: "contextmenu", sorted: "sorted" }, queries: [{ propertyName: "searchfieldRef", first: true, predicate: i0.forwardRef(function () { return SohoSearchFieldComponent; }), descendants: true, static: true }, { propertyName: "items", predicate: SohoListViewItemComponent }], viewQueries: [{ propertyName: "listViewRef", first: true, predicate: ["listview"], descendants: true, static: true }], ngImport: i0, template: "<div soho-listview-search *ngIf=\"searchable && !searchfieldRef\"></div>\n<div soho-listview-search *ngIf=\"searchable && searchfieldRef\" [buildSearch]=\"false\">\n  <ng-content select=\"input[soho-searchfield]\"></ng-content>\n</div>\n<ng-content select=\"div.[soho-listview-search]\"></ng-content>\n<ng-content select=\"soho-toolbar.contextual-toolbar,div.[soho-toolbar].contextual-toolbar\"></ng-content>\n<div #listview [class]=\"listClass\" [attr.id]=\"sohoListviewElementId\" >\n  <ul>\n    <ng-content select=\"li[soho-listview-item]\"></ng-content>\n  </ul>\n  <ng-content select=\"[soho-emptymessage]\"></ng-content>\n</div>\n", styles: [".smaller{width:50%}\n"], dependencies: [{ kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: SohoListViewSearchComponent, selector: "[soho-listview-search]", inputs: ["buildSearch"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoListViewComponent, decorators: [{
            type: Component,
            args: [{ selector: 'soho-listview', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div soho-listview-search *ngIf=\"searchable && !searchfieldRef\"></div>\n<div soho-listview-search *ngIf=\"searchable && searchfieldRef\" [buildSearch]=\"false\">\n  <ng-content select=\"input[soho-searchfield]\"></ng-content>\n</div>\n<ng-content select=\"div.[soho-listview-search]\"></ng-content>\n<ng-content select=\"soho-toolbar.contextual-toolbar,div.[soho-toolbar].contextual-toolbar\"></ng-content>\n<div #listview [class]=\"listClass\" [attr.id]=\"sohoListviewElementId\" >\n  <ul>\n    <ng-content select=\"li[soho-listview-item]\"></ng-content>\n  </ul>\n  <ng-content select=\"[soho-emptymessage]\"></ng-content>\n</div>\n", styles: [".smaller{width:50%}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.NgZone }]; }, propDecorators: { items: [{
                type: ContentChildren,
                args: [SohoListViewItemComponent]
            }], class: [{
                type: Input
            }], sohoListviewElementId: [{
                type: Input
            }], dataset: [{
                type: Input
            }], description: [{
                type: Input
            }], pagesize: [{
                type: Input
            }], paging: [{
                type: Input
            }], searchable: [{
                type: Input
            }], selectable: [{
                type: Input
            }], selectOnFocus: [{
                type: Input
            }], emptyMessage: [{
                type: Input
            }], source: [{
                type: Input
            }], template: [{
                type: Input
            }], disableItemDeactivation: [{
                type: Input
            }], attributes: [{
                type: Input
            }], selectedItems: [{
                type: Input
            }], rendered: [{
                type: Output
            }], selected: [{
                type: Output
            }], unselected: [{
                type: Output
            }], deselected: [{
                type: Output
            }], itemactivated: [{
                type: Output
            }], itemdeactivated: [{
                type: Output
            }], click: [{
                type: Output
            }], dblclick: [{
                type: Output
            }], contextmenu: [{
                type: Output
            }], sorted: [{
                type: Output
            }], listViewRef: [{
                type: ViewChild,
                args: ['listview', { static: true }]
            }], searchfieldRef: [{
                type: ContentChild,
                args: [forwardRef(() => SohoSearchFieldComponent), { static: true }]
            }] } });
//# sourceMappingURL=data:application/json;base64,
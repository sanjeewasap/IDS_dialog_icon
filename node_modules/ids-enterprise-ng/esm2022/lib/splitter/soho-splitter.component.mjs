import { Component, EventEmitter, HostBinding, Input, Output, ChangeDetectionStrategy } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the Soho  Splitter Control.
 *
 * This component searches for an element with the name
 * 'soho-splitter' in the parent's DOM tree, initialising it with
 * the Soho Splitter control.
 */
export class SohoSplitterComponent {
    // -------------------------------------------
    // Component Inputs
    // -------------------------------------------
    // The orientation of the splitter, either x (for vertical) or y (for horizontal)
    set axis(axis) {
        this.options.axis = axis;
        if (this.splitter) {
            this.splitter.settings.axis = axis;
            this.splitter.updated();
        }
    }
    // Controls when the panels are redrawn whilst the splitter is dragged, either
    // continuously (immediate) or when the drag is finished (end).
    set resize(resize) {
        this.options.resize = resize;
        if (this.splitter) {
            this.splitter.settings.resize = resize;
            this.splitter.updated();
        }
    }
    // Constrains the splitter within the bounds of the specified element or region.
    set containment(containment) {
        this.options.containment = containment;
        if (this.splitter) {
            this.splitter.settings.containment = containment;
            this.splitter.updated();
        }
    }
    // Adds/Remove the collapse button.
    set collapseButton(collapseButton) {
        this.options.collapseButton = collapseButton;
        if (this.splitter) {
            this.splitter.settings.collapseButton = collapseButton;
            this.splitter.updated();
        }
    }
    /** Add extra attributes like id's to the component **/
    set attributes(attributes) {
        this.options.attributes = attributes;
        if (this.splitter) {
            this.splitter.settings.attributes = attributes;
            this.splitter.updated();
        }
    }
    /** Ability to stop dragging at a max left or right size. **/
    set maxWidth(maxWidth) {
        this.options.maxWidth = maxWidth;
        if (this.splitter) {
            this.splitter.settings.maxWidth = maxWidth;
            this.splitter.updated();
        }
    }
    // Determines if the split percentage should be saved to local storage
    set save(save) {
        this.options.save = save;
        if (this.splitter) {
            this.splitter.settings.save = save;
            this.splitter.updated();
        }
    }
    /**
     * Constructor.
     *
     * @parm element - the element representing the splitter on the page.
     */
    constructor(element) {
        this.element = element;
        // -------------------------------------------
        // Options Block
        // -------------------------------------------
        this.options = {};
        // -------------------------------------------
        // Component Output
        // -------------------------------------------
        this.split = new EventEmitter();
        // -------------------------------------------
        // Host Bindings
        // -------------------------------------------
        // Set the splitter class.
        this.isSplitter = true;
    }
    // ------------------------------------------
    // Lifecycle Events
    // ------------------------------------------
    ngAfterViewInit() {
        // Wrap the element in a jQuery selector.
        this.jQueryElement = jQuery(this.element.nativeElement);
        // Initialise the SohoXi Control
        this.jQueryElement.splitter(this.options);
        // Once the control is initialised, extract the control
        // plug-in from the element.  The element name is
        // defined by the plug-in, but in this case it is 'splitter'.
        this.splitter = this.jQueryElement.data('splitter');
        // Initialise any event handlers.
        this.jQueryElement
            // Propogate the split event via the event emitter.  The data passed
            // is a reference to the jQuery control.
            .on('split', (...args) => this.split.next(args));
    }
    /**
     * Destructor.
     */
    ngOnDestroy() {
        if (this.splitter) {
            this.splitter.destroy();
            this.splitter = null;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSplitterComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoSplitterComponent, selector: "soho-splitter", inputs: { axis: "axis", resize: "resize", containment: "containment", collapseButton: "collapseButton", attributes: "attributes", maxWidth: "maxWidth", save: "save", isSplitterRight: "isSplitterRight" }, outputs: { split: "split" }, host: { properties: { "class.splitter": "this.isSplitter", "class.splitter-right": "this.isSplitterRight" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSplitterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'soho-splitter',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { axis: [{
                type: Input
            }], resize: [{
                type: Input
            }], containment: [{
                type: Input
            }], collapseButton: [{
                type: Input
            }], attributes: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], save: [{
                type: Input
            }], split: [{
                type: Output
            }], isSplitter: [{
                type: HostBinding,
                args: ['class.splitter']
            }], isSplitterRight: [{
                type: HostBinding,
                args: ['class.splitter-right']
            }, {
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
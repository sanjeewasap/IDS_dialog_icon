import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoBulletComponent {
    get isBullet() {
        return true;
    }
    /** Defines the data to use, must be specified for this component. */
    set dataset(dataset) {
        this.options.dataset = dataset;
        if (this.bullet) {
            this.bullet.settings.dataset = dataset;
            this.updateRequired = true;
        }
    }
    /** true|false - will do or not do the animation and 'initial' will do only first time the animation. */
    set animate(value) {
        this.options.animate = value;
        if (this.bullet) {
            this.bullet.settings.animate = value;
            this.updateRequired = true;
        }
    }
    /** If true, the component will not resize when resizing the page. There is tooltip values provided.
     * It will not be shown. If you still want lines at the lower breakpoint you can set this to true */
    set redrawOnResize(value) {
        this.options.redrawOnResize = value;
        if (this.bullet) {
            this.bullet.settings.redrawOnResize = value;
            this.updateRequired = true;
        }
    }
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        /** Options. */
        this.options = {};
        this.selected = new EventEmitter();
        this.rendered = new EventEmitter();
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.dblclick = new EventEmitter();
        /**
         * @todo replace override of native attribute
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.contextmenu = new EventEmitter();
        this.updateRequired = false;
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.options.type = 'bullet';
            this.jQueryElement.chart(this.options);
            this.bullet = this.jQueryElement.data('bullet');
            // Setup the events
            this.jQueryElement.on('selected', (_e, args) => this.ngZone.run(() => this.selected.emit(args)));
            this.jQueryElement.on('rendered', (...args) => this.ngZone.run(() => this.rendered.emit(args)));
            this.jQueryElement.on('contextmenu', (...args) => this.ngZone.run(() => this.contextmenu?.emit(args)));
            this.jQueryElement.on('dblclick', (_e, args) => this.ngZone.run(() => this.dblclick.emit(args)));
        });
    }
    ngAfterViewChecked() {
        if (this.bullet && this.updateRequired) {
            this.ngZone.runOutsideAngular(() => this.bullet?.updated(this.bullet?.settings));
            this.updateRequired = false;
        }
    }
    updated() {
        this.ngZone.runOutsideAngular(() => {
            this.options.type = 'bullet';
            this.jQueryElement?.chart(this.options);
            this.bullet = this.jQueryElement?.data('bullet');
        });
    }
    /** Tear Down */
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.bullet) {
                this.bullet.destroy();
                this.bullet = null;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoBulletComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoBulletComponent, selector: "[soho-bullet]", inputs: { dataset: "dataset", animate: "animate", redrawOnResize: "redrawOnResize" }, outputs: { selected: "selected", rendered: "rendered", dblclick: "dblclick", contextmenu: "contextmenu" }, host: { properties: { "class.chart-container": "this.isBullet" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoBulletComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-bullet]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isBullet: [{
                type: HostBinding,
                args: ['class.chart-container']
            }], dataset: [{
                type: Input
            }], animate: [{
                type: Input
            }], redrawOnResize: [{
                type: Input
            }], selected: [{
                type: Output
            }], rendered: [{
                type: Output
            }], dblclick: [{
                type: Output
            }], contextmenu: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
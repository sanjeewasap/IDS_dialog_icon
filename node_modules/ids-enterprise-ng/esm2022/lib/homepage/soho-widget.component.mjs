import { Component, HostBinding, Input, Output, EventEmitter, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoWidgetComponent {
    get classList() {
        let tmp = '';
        if (this.widgetWidth && this.widgetWidth !== 'single') {
            tmp += this.widgetWidth + '-width';
        }
        if (this.widgetHeight && this.widgetHeight !== 'single') {
            tmp += tmp ? ' ' : '';
            tmp += this.widgetHeight + '-height';
        }
        if (this.removable != null && this.removable !== true) {
            tmp += tmp ? ' ' : '';
            tmp += 'no-remove';
        }
        return tmp;
    }
    get isNoHeader() {
        return this.noHeader;
    }
    get isNoShadow() {
        return this.noShadow;
    }
    set contentPaddingX(value) {
        this.options.contentPaddingX = value;
        if (this.cards) {
            this.options.contentPaddingX = value;
        }
    }
    set bordered(value) {
        this.options.bordered = value;
        if (this.cards) {
            this.options.bordered = value;
        }
    }
    set contentPaddingY(value) {
        this.options.contentPaddingY = value;
        if (this.cards) {
            this.options.contentPaddingY = value;
        }
    }
    set detailRefId(value) {
        this.options.detailRefId = value;
        if (this.cards) {
            this.options.detailRefId = value;
        }
    }
    constructor(elementRef, ngZone) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.isWidget = true;
        this.resizecard = new EventEmitter();
        this.reordercard = new EventEmitter();
        this.removecard = new EventEmitter();
        this.options = {};
    }
    ngOnInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.elementRef.nativeElement);
            if (typeof (this.options.bordered) === 'string' && this.options.bordered !== null) {
                this.bordered = this.options.bordered.toLocaleLowerCase() === 'true';
            }
        });
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.elementRef.nativeElement);
            this.jQueryElement.cards(this.options);
            this.jQueryElement.cards({
                bordered: this.bordered,
                noHeader: this.noHeader,
                contentPaddingX: this.contentPaddingX,
                contentPaddingY: this.contentPaddingY,
                noShadow: this.noShadow,
                detailRefId: this.detailRefId,
            });
            this.jQueryElement
                .on('resizecard', (_e, card, metadata) => this.onResizeCard(card, metadata))
                .on('reordercard', (_e, card, metadata) => this.onReorderCard(card, metadata))
                .on('removecard', (_e, card, metadata) => this.onRemoveCard(card, metadata));
        });
    }
    onResizeCard(card, metadata) {
        const event = { widget: this, card, metadata };
        this.ngZone.run(() => {
            this.resizecard.emit(event);
        });
    }
    onReorderCard(card, metadata) {
        const event = { widget: this, card, metadata };
        this.ngZone.run(() => {
            this.reordercard.emit(event);
        });
    }
    onRemoveCard(card, metadata) {
        const event = { widget: this, card, metadata };
        this.ngZone.run(() => {
            this.removecard.emit(event);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoWidgetComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoWidgetComponent, selector: "div[soho-widget]", inputs: { widgetWidth: "widgetWidth", widgetHeight: "widgetHeight", removable: "removable", noHeader: "noHeader", noShadow: "noShadow", contentPaddingX: "contentPaddingX", bordered: "bordered", contentPaddingY: "contentPaddingY", detailRefId: "detailRefId" }, outputs: { resizecard: "resizecard", reordercard: "reordercard", removecard: "removecard" }, host: { properties: { "class": "this.classList", "class.widget": "this.isWidget", "class.no-header": "this.isNoHeader", "class.no-shadow": "this.isNoShadow" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoWidgetComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'div[soho-widget]',
                    template: `<ng-content></ng-content>`,
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { classList: [{
                type: HostBinding,
                args: ['class']
            }], isWidget: [{
                type: HostBinding,
                args: ['class.widget']
            }], isNoHeader: [{
                type: HostBinding,
                args: ['class.no-header']
            }], isNoShadow: [{
                type: HostBinding,
                args: ['class.no-shadow']
            }], widgetWidth: [{
                type: Input
            }], widgetHeight: [{
                type: Input
            }], removable: [{
                type: Input
            }], noHeader: [{
                type: Input
            }], noShadow: [{
                type: Input
            }], contentPaddingX: [{
                type: Input
            }], bordered: [{
                type: Input
            }], contentPaddingY: [{
                type: Input
            }], detailRefId: [{
                type: Input
            }], resizecard: [{
                type: Output
            }], reordercard: [{
                type: Output
            }], removecard: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
import { ChangeDetectionStrategy, Component, HostBinding, Input, Output, EventEmitter, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoHomePageComponent {
    set homePageOptions(homePageOptions) {
        this._homePageOptions = homePageOptions;
    }
    get homePageOptions() {
        return this._homePageOptions;
    }
    /**
     * Whether to animate widget placement
     */
    set animate(animate) {
        this._homePageOptions.animate = animate;
        if (this.homepage) {
            this.homepage.settings.animate = animate;
        }
    }
    get animate() {
        return this._homePageOptions.animate;
    }
    /**
     * Sets the maximum number of widget columns
     */
    set columns(columns) {
        this._homePageOptions.columns = columns;
        if (this.homepage) {
            this.homepage.settings.columns = columns;
        }
    }
    get columns() {
        return this._homePageOptions.columns;
    }
    /**
     * Set edit for rearranging/reordering cards.
     */
    set editing(editing) {
        this._homePageOptions.editing = editing;
        if (this.homepage) {
            this.homepage.setEdit(editing);
        }
    }
    get editing() {
        return this._homePageOptions.editing;
    }
    /**
     * Specify the speed at which an animation progresses at different points within the animation.
     */
    set easing(easing) {
        this._homePageOptions.easing = easing;
        if (this.homepage) {
            this.homepage.settings.easing = easing;
        }
    }
    get easing() {
        return this._homePageOptions.easing;
    }
    /**
     * Sets gutter size in between widgets
     */
    set gutterSize(gutterSize) {
        this._homePageOptions.gutterSize = gutterSize;
        if (this.homepage) {
            this.homepage.settings.gutterSize = gutterSize;
        }
    }
    get gutterSize() {
        return this._homePageOptions.gutterSize;
    }
    /**
     * Sets the default widget width in pixels
     */
    set widgetWidth(widgetWidth) {
        this._homePageOptions.widgetWidth = widgetWidth;
        if (this.homepage) {
            this.homepage.settings.widgetWidth = widgetWidth;
        }
    }
    get widgetWidth() {
        return this._homePageOptions.widgetWidth;
    }
    /**
     * Sets the default widget height in pixels
     */
    set widgetHeight(widgetHeight) {
        this._homePageOptions.widgetHeight = widgetHeight;
        if (this.homepage) {
            this.homepage.settings.widgetHeight = widgetHeight;
        }
    }
    get widgetHeight() {
        return this._homePageOptions.widgetHeight;
    }
    /**
     * Sets the widgets to smaller size
     */
    set useSmall(useSmall) {
        this._homePageOptions.useSmall = useSmall;
        if (this.homepage) {
            this.homepage.settings.useSmall = useSmall;
        }
    }
    get useSmall() {
        return this._homePageOptions.useSmall;
    }
    /**
     * this ...
     */
    set timeout(timeout) {
        this._homePageOptions.timeout = timeout;
        if (this.homepage) {
            this.homepage.settings.timeout = timeout;
        }
    }
    get timeout() {
        return this._homePageOptions.timeout;
    }
    /**
     * Event fired before a card is removed
     *
     * @param beforeSelectFunction Function callback
     */
    set onBeforeRemoveCard(beforeSelectFunction) {
        this._homePageOptions.onBeforeRemoveCard = beforeSelectFunction;
        if (this.homepage) {
            this.homepage.settings.onBeforeRemoveCard = beforeSelectFunction;
        }
    }
    get onBeforeRemoveCard() {
        if (this.homepage) {
            return this.homepage.settings.onBeforeRemoveCard;
        }
        return this._homePageOptions.onBeforeRemoveCard;
    }
    constructor(elementRef, ngZone) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        /**
         * @todo replace override of native attribute
         */
        // eslint-disable-next-line @angular-eslint/no-output-rename, @angular-eslint/no-output-native
        this.resize = new EventEmitter();
        this.resizecard = new EventEmitter();
        this.reordercard = new EventEmitter();
        this.removecard = new EventEmitter();
        this.isHomepage = true;
        this._homePageOptions = {};
    }
    /**
     * Reset columns to their defaults (used on restore menu item).
     */
    refresh(animate) {
        return this.ngZone.runOutsideAngular(() => {
            this.homepage?.refresh(animate);
        });
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // Wrap for later.
            this.jQueryElement = jQuery(this.elementRef.nativeElement);
            // Initialise the SoHoXi control.
            this.jQueryElement.homepage(this._homePageOptions);
            // Once the control is initialised, extract the control
            // plug-in from the element.  The element name is
            // defined by the plug-in, but in this case is 'homepage'.
            this.homepage = this.jQueryElement.data('homepage');
            this.jQueryElement
                .on('resize', (_e, columns, metadata) => this.onResize(columns, metadata))
                .on('resizecard', (_e, card, metadata) => this.onResizeCard(card, metadata))
                .on('reordercard', (_e, card, metadata) => this.onReorderCard(card, metadata))
                .on('removecard', (_e, card, metadata) => this.onRemoveCard(card, metadata));
        });
    }
    onResize(columns, metadata) {
        const event = { columns: undefined, metadata: undefined };
        event.columns = columns;
        event.metadata = metadata;
        this.ngZone.run(() => {
            this.resize.emit(event);
        });
    }
    onResizeCard(card, metadata) {
        const event = { homepage: this, card, metadata };
        this.ngZone.run(() => {
            this.resizecard.emit(event);
        });
    }
    onReorderCard(card, metadata) {
        const event = { homepage: this, card, metadata };
        this.ngZone.run(() => {
            this.reordercard.emit(event);
        });
    }
    onRemoveCard(card, metadata) {
        const event = { homepage: this, card, metadata };
        this.ngZone.run(() => {
            this.removecard.emit(event);
        });
    }
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.homepage) {
                this.homepage.destroy();
                this.homepage = null;
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoHomePageComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoHomePageComponent, selector: "div[soho-homepage]", inputs: { homePageOptions: "homePageOptions", animate: "animate", columns: "columns", editing: "editing", easing: "easing", gutterSize: "gutterSize", widgetWidth: "widgetWidth", widgetHeight: "widgetHeight", useSmall: "useSmall", timeout: "timeout", onBeforeRemoveCard: "onBeforeRemoveCard" }, outputs: { resize: "resize", resizecard: "resizecard", reordercard: "reordercard", removecard: "removecard" }, host: { properties: { "class.homepage": "this.isHomepage" } }, ngImport: i0, template: `<div class="content"><ng-content></ng-content></div>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoHomePageComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'div[soho-homepage]',
                    template: `<div class="content"><ng-content></ng-content></div>`,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { resize: [{
                type: Output
            }], resizecard: [{
                type: Output
            }], reordercard: [{
                type: Output
            }], removecard: [{
                type: Output
            }], homePageOptions: [{
                type: Input
            }], animate: [{
                type: Input
            }], columns: [{
                type: Input
            }], editing: [{
                type: Input
            }], easing: [{
                type: Input
            }], gutterSize: [{
                type: Input
            }], widgetWidth: [{
                type: Input
            }], widgetHeight: [{
                type: Input
            }], useSmall: [{
                type: Input
            }], timeout: [{
                type: Input
            }], onBeforeRemoveCard: [{
                type: Input
            }], isHomepage: [{
                type: HostBinding,
                args: ['class.homepage']
            }] } });
//# sourceMappingURL=data:application/json;base64,
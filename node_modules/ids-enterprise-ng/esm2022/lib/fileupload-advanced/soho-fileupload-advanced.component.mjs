import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, HostBinding, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoFileUploadAdvancedComponent {
    // -------------------------------------------
    // Component Input
    // -------------------------------------------
    /**
     * Set the disabled state of the control.
     */
    set disabled(value) {
        this.isDisabled = value;
        if (this.fileuploadadvanced) {
            if (value) {
                this.ngZone.runOutsideAngular(() => {
                    this.fileuploadadvanced?.disable();
                });
                this.isDisabled = true;
            }
            else {
                this.ngZone.runOutsideAngular(() => {
                    this.fileuploadadvanced?.enable();
                });
                this.isDisabled = false;
            }
        }
    }
    get disabled() {
        return this.isDisabled;
    }
    /**
     * On page(true) -or- on modal (false) , this is used for some visual style only.
     *
     * @param isStandalone true for onPage otherwise false.
     */
    set isStandalone(isStandaline) {
        this.options.isStandalone = isStandaline;
        if (this.fileuploadadvanced) {
            this.fileuploadadvanced.settings.isStandalone = isStandaline;
            this.markForRefresh();
        }
    }
    get isStandalone() {
        return this.options.isStandalone;
    }
    /**
     * Restrict file types(ie. 'jpg|png|gif') ['*' all types]
     *
     * @param allowedTypes - the allowed types.
     */
    set allowedTypes(allowedTypes) {
        this.options.allowedTypes = allowedTypes;
        if (this.fileuploadadvanced) {
            this.fileuploadadvanced.settings.allowedTypes = allowedTypes;
            this.markForRefresh();
        }
    }
    get allowedTypes() {
        return this.options.allowedTypes;
    }
    /**
     * Defines the send method used to upload the files.
     *
     * The send function takes the FormData containing the file, and a
     * status interface to provide fedback to the control whilst uploading.
     *
     * @param sendFn - the callback function responsible to uploading the file.
     */
    set send(sendFn) {
        this.options.send = sendFn;
        if (this.fileuploadadvanced) {
            this.fileuploadadvanced.settings.send = sendFn;
            this.markForRefresh();
        }
    }
    get send() {
        return this.options.send;
    }
    /**
     * Restricts the number of files that can be retrieved in total.
     *
     * @param maxFiles - max files cab be upload.
     */
    set maxFiles(maxFiles) {
        this.options.maxFiles = maxFiles;
        if (this.fileuploadadvanced) {
            this.fileuploadadvanced.settings.maxFiles = maxFiles;
            this.markForRefresh();
        }
    }
    get maxFiles() {
        return this.options.maxFiles;
    }
    /**
     * Restricts the number of files that can be retrieved while in process.
     *
     * @param maxFilesInProcess - the callback function responsible to uploading the file.
     */
    set maxFilesInProcess(maxFilesInProcess) {
        this.options.maxFilesInProcess = maxFilesInProcess;
        if (this.fileuploadadvanced) {
            this.fileuploadadvanced.settings.maxFilesInProcess = maxFilesInProcess;
            this.markForRefresh();
        }
    }
    get maxFilesInProcess() {
        return this.options.maxFilesInProcess;
    }
    /**
     * Max file size in bytes, -1 for unlimited.
     *
     * @param maxFileSize - Max file size in bytes, -1 for unlimited.
     */
    set maxFileSize(maxFileSize) {
        this.options.maxFileSize = maxFileSize;
        if (this.fileuploadadvanced) {
            this.fileuploadadvanced.settings.maxFileSize = maxFileSize;
            this.markForRefresh();
        }
    }
    get maxFileSize() {
        return this.options.maxFileSize;
    }
    /**
     * Variable name to read from server.
     *
     * @param fileName - Variable name to read from server..
     */
    set fileName(fileName) {
        this.options.fileName = fileName;
        if (this.fileuploadadvanced) {
            this.fileuploadadvanced.settings.fileName = fileName;
            this.markForRefresh();
        }
    }
    get fileName() {
        return this.options.fileName;
    }
    /**
     * Add way to browse files to upload
     *
     * @param showBrowseButton - if true, displays the browse button; otherwise do not.
     */
    set showBrowseButton(showBrowseButton) {
        this.options.showBrowseButton = showBrowseButton;
        if (this.fileuploadadvanced) {
            this.fileuploadadvanced.settings.showBrowseButton = showBrowseButton;
            this.markForRefresh();
        }
    }
    get showBrowseButton() {
        return this.options.showBrowseButton;
    }
    /**
     * Text to show in drop area.
     *
     * @param textDropArea - Text to show in drop area.
     */
    set textDropArea(textDropArea) {
        this.options.textDropArea = textDropArea;
        if (this.fileuploadadvanced) {
            this.fileuploadadvanced.settings.textDropArea = textDropArea;
            this.markForRefresh();
        }
    }
    get textDropArea() {
        return this.options.textDropArea;
    }
    /**
     * Text to show in drop area when browse option true.
     *
     * @param textDropAreaWithBrowse - Text to show in drop area when browse option true.
     */
    set textDropAreaWithBrowse(textDropAreaWithBrowse) {
        this.options.textDropAreaWithBrowse = textDropAreaWithBrowse;
        if (this.fileuploadadvanced) {
            this.fileuploadadvanced.settings.textDropAreaWithBrowse = textDropAreaWithBrowse;
            this.markForRefresh();
        }
    }
    get textDropAreaWithBrowse() {
        return this.options.textDropAreaWithBrowse;
    }
    /**
     * Hidden text for cancel button.
     *
     * @param textBtnCancel - Hidden text for cancel button.
     */
    set textBtnCancel(textBtnCancel) {
        this.options.textBtnCancel = textBtnCancel;
        if (this.fileuploadadvanced) {
            this.fileuploadadvanced.settings.textBtnCancel = textBtnCancel;
            this.markForRefresh();
        }
    }
    get textBtnCancel() {
        return this.options.textBtnCancel;
    }
    /**
     * Hidden text for error close button
     *
     * @param textBtnCloseError - Hidden text for error close button.
     */
    set textBtnCloseError(textBtnCloseError) {
        this.options.textBtnCloseError = textBtnCloseError;
        if (this.fileuploadadvanced) {
            this.fileuploadadvanced.settings.textBtnCloseError = textBtnCloseError;
            this.markForRefresh();
        }
    }
    get textBtnCloseError() {
        return this.options.textBtnCloseError;
    }
    /**
     * Hidden text for remove button.
     *
     * @param textBtnRemove - Hidden text for remove button.
     */
    set textBtnRemove(textBtnRemove) {
        this.options.textBtnRemove = textBtnRemove;
        if (this.fileuploadadvanced) {
            this.fileuploadadvanced.settings.textBtnRemove = textBtnRemove;
            this.markForRefresh();
        }
    }
    get textBtnRemove() {
        return this.options.textBtnRemove;
    }
    /**
     *
     */
    set errorMaxFiles(errorMaxFiles) {
        this.options.errorMaxFiles = errorMaxFiles;
        if (this.fileuploadadvanced) {
            this.fileuploadadvanced.updated(this.fileuploadadvanced.settings);
            this.markForRefresh();
        }
    }
    get errorMaxFiles() {
        return this.options.errorMaxFiles;
    }
    /**
     *
     */
    set errorMaxFilesInProcess(errorMaxFilesInProcess) {
        this.options.errorMaxFilesInProcess = errorMaxFilesInProcess;
        if (this.fileuploadadvanced) {
            this.fileuploadadvanced.updated(this.fileuploadadvanced.settings);
            this.markForRefresh();
        }
    }
    get errorMaxFilesInProcess() {
        return this.options.errorMaxFilesInProcess;
    }
    /**
     *
     */
    set errorMaxFileSize(errorMaxFilesSize) {
        this.options.errorMaxFileSize = errorMaxFilesSize;
        if (this.fileuploadadvanced) {
            this.fileuploadadvanced.settings.errorMaxFileSize = errorMaxFilesSize;
            this.markForRefresh();
        }
    }
    get errorMaxFileSize() {
        return this.options.errorMaxFileSize;
    }
    // -------------------------------------------
    // Public API
    // -------------------------------------------
    /**
     * Updates the control by merging the given settings into
     * the EP widget.
     *
     * @param settings the settings to merge.
     */
    updated(settings) {
        if (this.fileuploadadvanced) {
            this.ngZone.runOutsideAngular(() => {
                this.fileuploadadvanced?.updated(settings);
            });
            this.options = this.fileuploadadvanced.settings;
        }
        else {
            this.options = settings;
        }
    }
    /**
     * Destroys the control.
     */
    destroy() {
        if (this.fileuploadadvanced) {
            this.ngZone.runOutsideAngular(() => {
                this.fileuploadadvanced?.destroy();
            });
            this.fileuploadadvanced = null;
        }
    }
    /**
     * Constructor.
     */
    constructor(element, ref, ngZone) {
        this.element = element;
        this.ref = ref;
        this.ngZone = ngZone;
        /**
         * Add class to host element to ensure correct styling and detection by EP controls.
         */
        this.isFileUploadAdvanced = true;
        // -------------------------------------------
        // Component Output
        // -------------------------------------------
        /**
         * Called when the fileupload value changes
         */
        this.filesdragenter = new EventEmitter();
        this.filesdropped = new EventEmitter();
        this.beforecreatestatus = new EventEmitter();
        this.aftercreatestatus = new EventEmitter();
        this.fileprogress = new EventEmitter();
        this.fileaborted = new EventEmitter();
        this.filecompleteduploading = new EventEmitter();
        this.fileremoved = new EventEmitter();
        // -------------------------------------------
        // Private Member Data
        // -------------------------------------------
        /** Set of options for this control. */
        this.options = {};
    }
    ngAfterViewInit() {
        this.jQueryElement = jQuery(this.element.nativeElement);
        this.jQueryElement.fileuploadadvanced(this.options);
        this.jQueryElement
            .on('filesdragenter', (e) => {
            this.ngZone.run(() => {
                this.filesdragenter.next(e);
            });
        })
            .on('filesdroped', (_args, files) => {
            this.ngZone.run(() => this.filesdropped.next(files));
        })
            .on('beforecreatestatus', (_args, files) => {
            this.ngZone.run(() => this.beforecreatestatus.next(files));
        })
            .on('aftercreatestatus', (_args, files) => {
            this.ngZone.run(() => this.aftercreatestatus.next(files));
        })
            .on('fileprogress', (_args, files) => {
            this.ngZone.run(() => this.fileprogress.next(files));
        })
            .on('fileaborted', (_args, files) => {
            this.ngZone.run(() => this.fileaborted.next(files));
        })
            .on('filecompleteuploading', (_args, files) => {
            this.ngZone.run(() => {
                this.filecompleteduploading.next(files);
            });
        })
            .on('fileremoved', (_args, files) => {
            this.ngZone.run(() => {
                this.fileremoved.next(files);
            });
        });
        this.fileuploadadvanced = this.jQueryElement.data('fileuploadadvanced');
    }
    ngAfterViewChecked() {
        if (this.runUpdatedOnCheck) {
            this.ngZone.runOutsideAngular(() => {
                this.updated(this.options);
                this.runUpdatedOnCheck = false;
            });
        }
    }
    ngOnDestroy() {
        if (this.fileuploadadvanced) {
            this.ngZone.runOutsideAngular(() => {
                this.fileuploadadvanced?.destroy();
            });
            this.fileuploadadvanced = null;
        }
    }
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh() {
        // Run updated on the next updated check.
        this.runUpdatedOnCheck = true;
        // ... make sure the change detector kicks in, otherwise if the inputs
        // were change programmatically the component may not be eligible for
        // updating.
        this.ref.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoFileUploadAdvancedComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoFileUploadAdvancedComponent, selector: "soho-fileupload-advanced,div[soho-fileupload-advanced]", inputs: { disabled: "disabled", isStandalone: "isStandalone", allowedTypes: "allowedTypes", send: "send", maxFiles: "maxFiles", maxFilesInProcess: "maxFilesInProcess", maxFileSize: "maxFileSize", fileName: "fileName", showBrowseButton: "showBrowseButton", textDropArea: "textDropArea", textDropAreaWithBrowse: "textDropAreaWithBrowse", textBtnCancel: "textBtnCancel", textBtnCloseError: "textBtnCloseError", textBtnRemove: "textBtnRemove", errorMaxFiles: "errorMaxFiles", errorMaxFilesInProcess: "errorMaxFilesInProcess", errorMaxFileSize: "errorMaxFileSize" }, outputs: { filesdragenter: "filesdragenter", filesdropped: "filesdropped", beforecreatestatus: "beforecreatestatus", aftercreatestatus: "aftercreatestatus", fileprogress: "fileprogress", fileaborted: "fileaborted", filecompleteduploading: "filecompleteduploading", fileremoved: "fileremoved" }, host: { properties: { "class.fileupload-advanced": "this.isFileUploadAdvanced" } }, ngImport: i0, template: "<ng-content></ng-content>\n", changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoFileUploadAdvancedComponent, decorators: [{
            type: Component,
            args: [{ selector: 'soho-fileupload-advanced,div[soho-fileupload-advanced]', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-content></ng-content>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, propDecorators: { isFileUploadAdvanced: [{
                type: HostBinding,
                args: ['class.fileupload-advanced']
            }], disabled: [{
                type: Input
            }], isStandalone: [{
                type: Input
            }], allowedTypes: [{
                type: Input
            }], send: [{
                type: Input
            }], maxFiles: [{
                type: Input
            }], maxFilesInProcess: [{
                type: Input
            }], maxFileSize: [{
                type: Input
            }], fileName: [{
                type: Input
            }], showBrowseButton: [{
                type: Input
            }], textDropArea: [{
                type: Input
            }], textDropAreaWithBrowse: [{
                type: Input
            }], textBtnCancel: [{
                type: Input
            }], textBtnCloseError: [{
                type: Input
            }], textBtnRemove: [{
                type: Input
            }], errorMaxFiles: [{
                type: Input
            }], errorMaxFilesInProcess: [{
                type: Input
            }], errorMaxFileSize: [{
                type: Input
            }], filesdragenter: [{
                type: Output
            }], filesdropped: [{
                type: Output
            }], beforecreatestatus: [{
                type: Output
            }], aftercreatestatus: [{
                type: Output
            }], fileprogress: [{
                type: Output
            }], fileaborted: [{
                type: Output
            }], filecompleteduploading: [{
                type: Output
            }], fileremoved: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
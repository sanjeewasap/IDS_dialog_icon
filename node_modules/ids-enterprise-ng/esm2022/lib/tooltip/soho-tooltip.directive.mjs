import { Directive, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoTooltipDirective {
    // -------------------------------------------
    // Component Input options
    // -------------------------------------------
    /**
     * @param content the content of the tooltip
     */
    set content(content) {
        this.options.content = content;
        if (this.tooltip) {
            this.tooltip.settings.content = content;
        }
    }
    /**
     * @param offset offset
     */
    set offset(offset) {
        this.options.offset = offset;
    }
    /**
     * @param placement the orientation of the tooltip based on the source component.
     */
    set placement(placement) {
        this.options.placement = placement;
    }
    set trigger(trigger) {
        this.options.trigger = trigger;
    }
    /**
     * @param tooltipTitle the title of the tooltip.
     */
    set title(title) {
        this.options.title = title;
    }
    /**
     * @param beforeShow before show.
     */
    set beforeShow(beforeShow) {
        this.options.beforeShow = beforeShow;
    }
    /**
     * @param popover is this a popover?
     */
    set popover(popover) {
        this.options.popover = popover;
    }
    /**
     * @param closebutton display the close button?
     */
    set closebutton(closebutton) {
        this.options.closebutton = closebutton;
    }
    /**
     * @param isError is this an error tooltip.
     */
    set isError(isError) {
        this.options.isError = isError;
    }
    /**
     * @param isErrorColor use the error color.
     */
    set isErrorColor(isErrorColor) {
        this.options.isErrorColor = isErrorColor;
    }
    /**
     * @param tooltipElement tooptip element
     */
    set tooltipElement(tooltipElement) {
        this.options.tooltipElement = tooltipElement;
    }
    /**
     * @param keepOpen keep the tooltip open?
     */
    set keepOpen(keepOpen) {
        this.options.keepOpen = keepOpen;
    }
    /**
     * @param extraClass additional classes
     */
    set extraClass(extraClass) {
        this.options.extraClass = extraClass;
    }
    /**
     * @param appendTo additional classes
     */
    set appendTo(appendTo) {
        this.options.appendTo = appendTo;
    }
    /**
     * @param maxWidth the maximum width of the tooltip in pixels.
     */
    set maxWidth(maxWidth) {
        this.options.maxWidth = maxWidth;
    }
    /**
     * If the object with the tooltip is tabbed to, will also show the tooltip.
     */
    set showOnKeyboardFocus(showOnKeyboardFocus) {
        this.options.showOnKeyboardFocus = showOnKeyboardFocus;
    }
    /**
     * Call back for hiding.
     */
    set onHidden(onHidden) {
        this.options.onHidden = onHidden;
    }
    /**
     * Placement options pass through
     */
    set placementOpt(placementOpt) {
        this.options.placementOpt = placementOpt;
    }
    /**
     * Init the content in the tooltip.
     */
    set initializeContent(initializeContent) {
        this.options.initializeContent = initializeContent;
    }
    /**
     * If set this color will be used on the header (if a popover).
     */
    set headerClass(headerClass) {
        this.options.headerClass = headerClass;
    }
    /**
     * The delay before showing the tooltip
     */
    set delay(delay) {
        this.options.delay = delay;
    }
    /**
     * The if true (default) the popup is added to the body.
     */
    set attachToBody(attachToBody) {
        this.options.attachToBody = attachToBody;
    }
    /** Add extra attributes like id's to the component **/
    set attributes(attributes) {
        this.options.attributes = attributes;
    }
    constructor(element) {
        this.element = element;
        // -------------------------------------------
        // Options Block
        // -------------------------------------------
        this.options = {};
        // -------------------------------------------
        // Component Output
        // -------------------------------------------
        /**
         * Called when the tooltip value changes
         */
        this.changeEvent = new EventEmitter();
        /**
         * Called when the tooltip updates in some way
         */
        this.updateEvent = new EventEmitter();
    }
    ngAfterViewInit() {
        // Wrap the element in a jQuery selector.
        this.jQueryElement = jQuery(this.element.nativeElement);
        this.createControl();
    }
    createControl() {
        // Initialise the SohoXi Control
        this.jQueryElement?.tooltip(this.options);
        this.tooltip = this.jQueryElement?.data('tooltip');
        /**
         * Bind to jQueryElement's events
         */
        this.jQueryElement?.on('change', (event) => this.changeEvent.emit(event));
        this.jQueryElement?.on('updated', (event) => this.updateEvent.emit(event));
    }
    // -------------------------------------------
    // Public API
    // -------------------------------------------
    /**
     * Shows the tooltip.
     */
    show() {
        if (this.tooltip) {
            this.tooltip.show();
        }
    }
    /**
     * Hides the tooltip.
     */
    hide(force) {
        if (this.tooltip) {
            this.tooltip.hide(force);
        }
    }
    ngOnDestroy() {
        if (this.jQueryElement) {
            this.jQueryElement.off();
            this.jQueryElement = undefined;
            this.element.nativeElement = undefined;
        }
        if (this.tooltip) {
            this.tooltip.destroy();
            this.tooltip = null;
        }
    }
    ngOnChanges() {
        if (this.tooltip) {
            this.tooltip.destroy();
            this.tooltip = null;
            this.createControl();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTooltipDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: SohoTooltipDirective, selector: "[soho-tooltip]", inputs: { content: "content", offset: "offset", placement: "placement", trigger: "trigger", title: "title", beforeShow: "beforeShow", popover: "popover", closebutton: "closebutton", isError: "isError", isErrorColor: "isErrorColor", tooltipElement: "tooltipElement", keepOpen: "keepOpen", extraClass: "extraClass", appendTo: "appendTo", maxWidth: "maxWidth", showOnKeyboardFocus: "showOnKeyboardFocus", onHidden: "onHidden", placementOpt: "placementOpt", initializeContent: "initializeContent", headerClass: "headerClass", delay: "delay", attachToBody: "attachToBody", attributes: "attributes" }, outputs: { changeEvent: "changeEvent", updateEvent: "updateEvent" }, usesOnChanges: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTooltipDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[soho-tooltip]' // eslint-disable-line
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { content: [{
                type: Input
            }], offset: [{
                type: Input
            }], placement: [{
                type: Input
            }], trigger: [{
                type: Input
            }], title: [{
                type: Input
            }], beforeShow: [{
                type: Input
            }], popover: [{
                type: Input
            }], closebutton: [{
                type: Input
            }], isError: [{
                type: Input
            }], isErrorColor: [{
                type: Input
            }], tooltipElement: [{
                type: Input
            }], keepOpen: [{
                type: Input
            }], extraClass: [{
                type: Input
            }], appendTo: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], showOnKeyboardFocus: [{
                type: Input
            }], onHidden: [{
                type: Input
            }], placementOpt: [{
                type: Input
            }], initializeContent: [{
                type: Input
            }], headerClass: [{
                type: Input
            }], delay: [{
                type: Input
            }], attachToBody: [{
                type: Input
            }], attributes: [{
                type: Input
            }], changeEvent: [{
                type: Output
            }], updateEvent: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
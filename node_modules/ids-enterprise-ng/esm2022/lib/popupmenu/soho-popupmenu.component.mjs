import { Component, EventEmitter, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * SUB COMPONENT: SOHO-MENUPOPUPMENU-HEADING
 */
export class SohoPopupMenuHeadingComponent {
    get isHeading() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPopupMenuHeadingComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoPopupMenuHeadingComponent, selector: "li[soho-popupmenu-heading]", host: { properties: { "class.heading": "this.isHeading" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPopupMenuHeadingComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'li[soho-popupmenu-heading]',
                    template: `<ng-content></ng-content>`
                }]
        }], propDecorators: { isHeading: [{
                type: HostBinding,
                args: ['class.heading']
            }] } });
/**
 * SUB COMPONENT: SOHO-POPUPMENU-SHORTCUT-TEXT
 */
export class SohoPopupMenuShortCutTextComponent {
    get isShortCutText() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPopupMenuShortCutTextComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoPopupMenuShortCutTextComponent, selector: "span[soho-popupmenu-shortcut-text]", host: { properties: { "class.shortcut-text": "this.isShortCutText" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPopupMenuShortCutTextComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'span[soho-popupmenu-shortcut-text]',
                    template: `<ng-content></ng-content>`
                }]
        }], propDecorators: { isShortCutText: [{
                type: HostBinding,
                args: ['class.shortcut-text']
            }] } });
/**
 * SUB COMPONENT: SOHO-MENUPOPUPMENU-SEPARATOR
 */
export class SohoPopupMenuSeparatorComponent {
    constructor() {
        this.singleSelectableSection = false;
        this.multiSelectableSection = false;
    }
    get isSeparator() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPopupMenuSeparatorComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoPopupMenuSeparatorComponent, selector: "li[soho-popupmenu-separator]", inputs: { singleSelectableSection: "singleSelectableSection", multiSelectableSection: "multiSelectableSection" }, host: { properties: { "class.separator": "this.isSeparator", "class.single-selectable-section": "this.singleSelectableSection", "class.multi-selectable-section": "this.multiSelectableSection" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPopupMenuSeparatorComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'li[soho-popupmenu-separator]',
                    template: `<ng-content></ng-content>`
                }]
        }], propDecorators: { isSeparator: [{
                type: HostBinding,
                args: ['class.separator']
            }], singleSelectableSection: [{
                type: HostBinding,
                args: ['class.single-selectable-section']
            }, {
                type: Input
            }], multiSelectableSection: [{
                type: HostBinding,
                args: ['class.multi-selectable-section']
            }, {
                type: Input
            }] } });
/**
 * SUB COMPONENT: SOHO-MENUPOPUPMENU-LABEL
 */
export class SohoPopupMenuItemLabelComponent {
    get hrefAttr() {
        if (this.menuId) {
            return '#' + this.menuId;
        }
        if (this.menuUrl) {
            return this.menuUrl;
        }
        return '#';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPopupMenuItemLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoPopupMenuItemLabelComponent, selector: "a[soho-popupmenu-label]", inputs: { menuId: "menuId", menuUrl: "menuUrl" }, host: { properties: { "attr.href": "this.hrefAttr" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPopupMenuItemLabelComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'a[soho-popupmenu-label]',
                    template: `<ng-content></ng-content>`
                }]
        }], propDecorators: { hrefAttr: [{
                type: HostBinding,
                args: ['attr.href']
            }], menuId: [{
                type: Input
            }], menuUrl: [{
                type: Input
            }] } });
/**
 * SUB COMPONENT: SOHO-MENUPOPUPMENU-ITEM
 */
export class SohoPopupMenuItemComponent {
    constructor() {
        this.isSelectable = false;
        this.isDisabled = false;
        this.isIndented = false;
        this.subMenu = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPopupMenuItemComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoPopupMenuItemComponent, selector: "li[soho-popupmenu-item]", inputs: { isChecked: "isChecked", isSelectable: "isSelectable", isDisabled: "isDisabled", isIndented: "isIndented", subMenu: "subMenu" }, host: { properties: { "class.is-checked": "this.isChecked", "class.is-selectable": "this.isSelectable", "class.is-disabled": "this.isDisabled", "class.is-indented": "this.isIndented", "class.submenu": "this.subMenu" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPopupMenuItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'li[soho-popupmenu-item]',
                    template: `<ng-content></ng-content>`
                }]
        }], propDecorators: { isChecked: [{
                type: HostBinding,
                args: ['class.is-checked']
            }, {
                type: Input
            }], isSelectable: [{
                type: HostBinding,
                args: ['class.is-selectable']
            }, {
                type: Input
            }], isDisabled: [{
                type: HostBinding,
                args: ['class.is-disabled']
            }, {
                type: Input
            }], isIndented: [{
                type: HostBinding,
                args: ['class.is-indented']
            }, {
                type: Input
            }], subMenu: [{
                type: HostBinding,
                args: ['class.submenu']
            }, {
                type: Input
            }] } });
/**
 * MAIN COMPONENT: SOHO-MENUPOPUPMENU
 */
export class SohoPopupMenuComponent {
    set popupmenuOptions(_popupMenuOptions) {
        this._popupMenuOptions = _popupMenuOptions;
        if (this.jQueryElement) {
            this.popupmenu.settings = _popupMenuOptions;
        }
    }
    get popupmenuOptions() {
        if (this.popupmenu) {
            return this.popupmenu.settings;
        }
        return this._popupMenuOptions;
    }
    /** id (or jQuery object) of associated drop down list. */
    set menu(menu) {
        this._popupMenuOptions.menu = menu;
        if (this.popupmenu) {
            this.popupmenu.settings.menu = menu;
        }
    }
    get menu() {
        if (this.popupmenu) {
            return this.popupmenu.settings.menu;
        }
        return this._popupMenuOptions.menu;
    }
    /** 'click' | 'rightClick' | 'immediate' */
    set trigger(trigger) {
        this._popupMenuOptions.trigger = trigger;
        if (this.popupmenu) {
            this.popupmenu.settings.trigger = trigger;
        }
    }
    get trigger() {
        if (this.popupmenu) {
            return this.popupmenu.settings.trigger;
        }
        return this._popupMenuOptions.trigger;
    }
    /** Auto Focus */
    set autoFocus(autoFocus) {
        this._popupMenuOptions.autoFocus = autoFocus;
        if (this.popupmenu) {
            this.popupmenu.settings.autoFocus = autoFocus;
        }
    }
    get autoFocus() {
        if (this.popupmenu) {
            return this.popupmenu.settings.autoFocus;
        }
        return this._popupMenuOptions.autoFocus;
    }
    /** Mouse focus. */
    set mouseFocus(mouseFocus) {
        this._popupMenuOptions.mouseFocus = mouseFocus;
        if (this.popupmenu) {
            this.popupmenu.settings.mouseFocus = mouseFocus;
        }
    }
    get mouseFocus() {
        if (this.popupmenu) {
            return this.popupmenu.settings.mouseFocus;
        }
        return this._popupMenuOptions.mouseFocus;
    }
    /** Attach to body. */
    set attachToBody(attachToBody) {
        this._popupMenuOptions.attachToBody = attachToBody;
        if (this.popupmenu) {
            this.popupmenu.settings.attachToBody = attachToBody;
        }
    }
    get attachToBody() {
        if (this.popupmenu) {
            return this.popupmenu.settings.attachToBody;
        }
        return this._popupMenuOptions.attachToBody;
    }
    /** beforeOpen - ajax callback for open event */
    set beforeOpen(beforeOpen) {
        this._popupMenuOptions.beforeOpen = beforeOpen;
        if (this.popupmenu) {
            this.popupmenu.settings.beforeOpen = beforeOpen;
        }
    }
    get beforeOpen() {
        if (this.popupmenu) {
            return this.popupmenu.settings.beforeOpen;
        }
        return this._popupMenuOptions.beforeOpen;
    }
    /** Switches aria to use listbox construct instead of menu construct (internal). */
    set ariaListbox(ariaListbox) {
        this._popupMenuOptions.ariaListbox = ariaListbox;
        if (this.popupmenu) {
            this.popupmenu.settings.ariaListbox = ariaListbox;
        }
    }
    get ariaListbox() {
        if (this.popupmenu) {
            return this.popupmenu.settings.ariaListbox;
        }
        return this._popupMenuOptions.ariaListbox;
    }
    /**
     * By default, menus open up underneath their target element.  Set this to true to
     * use mouse coordinates for positioning a menu inside of its target element.
     */
    set useCoordsForClick(useCoordsForClick) {
        this._popupMenuOptions.useCoordsForClick = useCoordsForClick;
        if (this.popupmenu) {
            this.popupmenu.settings.useCoordsForClick = useCoordsForClick;
        }
    }
    get useCoordsForClick() {
        if (this.popupmenu) {
            return this.popupmenu.settings.useCoordsForClick;
        }
        return this._popupMenuOptions.useCoordsForClick;
    }
    /** Can pass in the event object so you can do a right click with immediate */
    set eventObj(eventObj) {
        this._popupMenuOptions.eventObj = eventObj;
        if (this.popupmenu) {
            this.popupmenu.settings.eventObj = eventObj;
        }
    }
    get eventObj() {
        if (this.popupmenu) {
            return this.popupmenu.settings.eventObj;
        }
        return this._popupMenuOptions.eventObj;
    }
    set placementOpts(placementOpts) {
        this._popupMenuOptions.placementOpts = placementOpts;
        if (this.popupmenu) {
            this.popupmenu.settings.placementOpts = placementOpts;
        }
    }
    get placementOpts() {
        if (this.popupmenu) {
            return this.popupmenu.settings.placementOpts;
        }
        return this._popupMenuOptions.placementOpts;
    }
    set offset(offset) {
        this._popupMenuOptions.offset = offset;
        if (this.popupmenu) {
            this.popupmenu.settings.offset = offset;
        }
    }
    get offset() {
        if (this.popupmenu) {
            return this.popupmenu.settings.offset;
        }
        return this._popupMenuOptions.offset;
    }
    set removeOnDestroy(removeOnDestroy) {
        this._popupMenuOptions.removeOnDestroy = removeOnDestroy;
        if (this.popupmenu) {
            this.popupmenu.settings.removeOnDestroy = removeOnDestroy;
        }
    }
    get removeOnDestroy() {
        if (this.popupmenu) {
            return this.popupmenu.settings.removeOnDestroy;
        }
        return this._popupMenuOptions.removeOnDestroy;
    }
    set attributes(attributes) {
        this._popupMenuOptions.attributes = attributes;
        if (this.popupmenu) {
            this.popupmenu.settings.attributes = attributes;
        }
    }
    get attributes() {
        if (this.popupmenu) {
            return this.popupmenu.settings.attributes;
        }
        return this._popupMenuOptions.attributes;
    }
    constructor(elementRef, ngZone) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        // -------------------------------------------
        // Component Output
        // -------------------------------------------
        this.selected = new EventEmitter();
        this.popupmenuafterplace = new EventEmitter();
        this.beforeopen = new EventEmitter();
        /**
         * @todo remove override of native element
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.open = new EventEmitter();
        this.afteropen = new EventEmitter();
        // using output renaming since close conflicts with the close method
        // in this class.
        this.closeEvent = new EventEmitter(); // eslint-disable-line
        // -------------------------------------------
        // Host Bindings
        // -------------------------------------------
        this.isPopupmenu = true;
        this.isSelectable = false;
        this.isMultiselectable = false;
        this._popupMenuOptions = {};
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // Wrap for later.
            this.jQueryElement = jQuery(this.elementRef.nativeElement);
            // Initialise the SohoXi control.
            this.jQueryElement.popupmenu(this._popupMenuOptions);
            // Once the control is initialised, extract the control plug-in from the element.
            this.popupmenu = this.jQueryElement.data('popupmenu');
            // bind to jquery events and emit as angular events
            this.jQueryElement.on('selected', (e, args) => this.ngZone.run(() => this.selected.emit({ e, args })));
            this.jQueryElement.on('popupmenuafterplace', (e, args) => this.ngZone.run(() => this.popupmenuafterplace.emit({ e, args })));
            this.jQueryElement.on('beforeopen', (e, args) => this.ngZone.run(() => this.beforeopen.emit({ e, args })));
            this.jQueryElement.on('open', (e, args) => this.ngZone.run(() => this.open.emit({ e, args })));
            this.jQueryElement.on('afteropen', (e, args) => this.ngZone.run(() => this.afteropen.emit({ e, args })));
            this.jQueryElement.on('close', (e, args) => this.ngZone.run(() => this.closeEvent.emit({ e, args })));
        });
    }
    /**
     * Returns the selected html element.
     */
    getSelected() {
        if (this.popupmenu) {
            return this.ngZone.runOutsideAngular(() => this.popupmenu?.getSelected());
        }
    }
    /**
     * Updates the control to reflect the settings.
     */
    updated(settings) {
        if (this.popupmenu) {
            this.ngZone.runOutsideAngular(() => this.popupmenu?.updated(settings));
        }
    }
    /**
     * Tear down the markup for the popup menu
     */
    teardown() {
        if (this.popupmenu) {
            this.ngZone.runOutsideAngular(() => this.popupmenu?.teardown());
        }
    }
    /**
     * Closes the popup menu
     */
    close(isCancelled, noFocus) {
        if (this.popupmenu) {
            this.ngZone.runOutsideAngular(() => this.popupmenu?.close(isCancelled, noFocus));
        }
    }
    /**
     * Destroy the markup and any other resources.
     */
    destroy() {
        setTimeout(() => {
            this.ngZone.runOutsideAngular(() => {
                if (this.jQueryElement) {
                    this.jQueryElement.off();
                    this.jQueryElement = undefined;
                }
                if (this.popupmenu) {
                    this.popupmenu.destroy();
                    this.popupmenu = undefined;
                }
            });
        }, 200);
    }
    /**
     * Cleanup just before Angular destroys the component.
     * Unsubscribe observables, detach event handlers and remove other resources to avoid memory leaks.
     */
    ngOnDestroy() {
        this.destroy();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPopupMenuComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoPopupMenuComponent, selector: "ul[soho-popupmenu]", inputs: { popupmenuOptions: "popupmenuOptions", menu: "menu", trigger: "trigger", autoFocus: "autoFocus", mouseFocus: "mouseFocus", attachToBody: "attachToBody", beforeOpen: "beforeOpen", ariaListbox: "ariaListbox", useCoordsForClick: "useCoordsForClick", eventObj: "eventObj", placementOpts: "placementOpts", offset: "offset", removeOnDestroy: "removeOnDestroy", attributes: "attributes", isSelectable: "isSelectable", isMultiselectable: "isMultiselectable" }, outputs: { selected: "selected", popupmenuafterplace: "popupmenuafterplace", beforeopen: "beforeopen", open: "open", afteropen: "afteropen", closeEvent: "close" }, host: { properties: { "class.popupmenu": "this.isPopupmenu", "class.is-selectable": "this.isSelectable", "class.is-multiselectable": "this.isMultiselectable" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoPopupMenuComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ul[soho-popupmenu]',
                    template: `<ng-content></ng-content>`
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { popupmenuOptions: [{
                type: Input
            }], menu: [{
                type: Input
            }], trigger: [{
                type: Input
            }], autoFocus: [{
                type: Input
            }], mouseFocus: [{
                type: Input
            }], attachToBody: [{
                type: Input
            }], beforeOpen: [{
                type: Input
            }], ariaListbox: [{
                type: Input
            }], useCoordsForClick: [{
                type: Input
            }], eventObj: [{
                type: Input
            }], placementOpts: [{
                type: Input
            }], offset: [{
                type: Input
            }], removeOnDestroy: [{
                type: Input
            }], attributes: [{
                type: Input
            }], selected: [{
                type: Output
            }], popupmenuafterplace: [{
                type: Output
            }], beforeopen: [{
                type: Output
            }], open: [{
                type: Output
            }], afteropen: [{
                type: Output
            }], closeEvent: [{
                type: Output,
                args: ['close']
            }], isPopupmenu: [{
                type: HostBinding,
                args: ['class.popupmenu']
            }], isSelectable: [{
                type: HostBinding,
                args: ['class.is-selectable']
            }, {
                type: Input
            }], isMultiselectable: [{
                type: HostBinding,
                args: ['class.is-multiselectable']
            }, {
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
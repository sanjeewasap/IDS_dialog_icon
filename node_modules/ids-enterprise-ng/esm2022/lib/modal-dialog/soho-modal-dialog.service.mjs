import { Injectable, Optional } from '@angular/core';
import { ArgumentHelper } from '../utils/argument.helper';
import { SohoModalDialogRef } from './soho-modal-dialog.ref';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
/**
 * This service is used to create a modal dialog, based on the content
 * of an Angular Componnent on the screen.
 */
export class SohoModalDialogService {
    /**
     * Constructor.
     *
     * @param appRef - application reference; must not be null.
     * @param componentFactoryResolver - used to create component factories for components dynamically.
     * @param injector - the current in scope injector, use as a delegate.
     * @param ngZone - the angular zone; must not be null.
     * @router
     */
    constructor(appRef, componentFactoryResolver, injector, ngZone, router) {
        this.appRef = appRef;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.ngZone = ngZone;
        this.router = router;
    }
    /**
     * Creates a modal dialog defined by the given component, returning a reference to the
     * dialog that can be interacted with.
     *
     * The component has the potential to include the dialog reference when it is
     * instantiated, as a provider.
     *
     * The dialog won't necessarily be open yet, see the dialog ref api for further methods.
     *
     * @param component - The type of the component to instantiate; must not be null.
     * @param parent - The parent container; obsolete but parameter kept for backwards API compatibility. Has no effect.
     * @param options - The control options to use.
     *
     * @return the modal dialog reference.
     */
    modal(component, _parent, options) {
        ArgumentHelper.checkNotNull('component', component);
        options = options || {};
        return new SohoModalDialogRef(this.router, this.appRef, this.componentFactoryResolver, this.injector, this.ngZone, options, component);
    }
    /**
     * Creates a modal dialog (using the content defined in the options), returning a reference to the
     * dialog that can be interacted with.
     *
     * The dialog won't be open.
     *
     * @return the modal dialog reference.
     */
    message(content) {
        const settings = { content };
        // Without a component, there is no destroy callback to ensure
        // the dialog's markup is removed.
        return new SohoModalDialogRef(this.router, this.appRef, this.componentFactoryResolver, this.injector, this.ngZone, settings);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoModalDialogService, deps: [{ token: i0.ApplicationRef }, { token: i0.ComponentFactoryResolver }, { token: i0.Injector }, { token: i0.NgZone }, { token: i1.Router, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoModalDialogService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoModalDialogService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ApplicationRef }, { type: i0.ComponentFactoryResolver }, { type: i0.Injector }, { type: i0.NgZone }, { type: i1.Router, decorators: [{
                    type: Optional
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby1tb2RhbC1kaWFsb2cuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lkcy1lbnRlcnByaXNlLW5nL3NyYy9saWIvbW9kYWwtZGlhbG9nL3NvaG8tbW9kYWwtZGlhbG9nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUVMLFVBQVUsRUFLVixRQUFRLEVBQ1QsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzFELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHlCQUF5QixDQUFDOzs7QUFHN0Q7OztHQUdHO0FBRUgsTUFBTSxPQUFPLHNCQUFzQjtJQUNqQzs7Ozs7Ozs7T0FRRztJQUNILFlBQ21CLE1BQXNCLEVBQ3RCLHdCQUFrRCxFQUNsRCxRQUFrQixFQUNsQixNQUFjLEVBQ0YsTUFBYztRQUoxQixXQUFNLEdBQU4sTUFBTSxDQUFnQjtRQUN0Qiw2QkFBd0IsR0FBeEIsd0JBQXdCLENBQTBCO1FBQ2xELGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNGLFdBQU0sR0FBTixNQUFNLENBQVE7SUFDN0MsQ0FBQztJQUVEOzs7Ozs7Ozs7Ozs7OztPQWNHO0lBQ0ksS0FBSyxDQUFJLFNBQTJCLEVBQUUsT0FBMEIsRUFBRSxPQUEwQjtRQUNqRyxjQUFjLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztRQUVwRCxPQUFPLEdBQUcsT0FBTyxJQUFJLEVBQUUsQ0FBQztRQUV4QixPQUFPLElBQUksa0JBQWtCLENBQzNCLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM3RyxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNJLE9BQU8sQ0FBSSxPQUF3QjtRQUN4QyxNQUFNLFFBQVEsR0FBcUIsRUFBRSxPQUFPLEVBQUUsQ0FBQztRQUUvQyw4REFBOEQ7UUFDOUQsa0NBQWtDO1FBQ2xDLE9BQU8sSUFBSSxrQkFBa0IsQ0FBSSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLHdCQUF3QixFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNsSSxDQUFDOzhHQXhEVSxzQkFBc0I7a0hBQXRCLHNCQUFzQjs7MkZBQXRCLHNCQUFzQjtrQkFEbEMsVUFBVTs7MEJBZ0JOLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gIEluamVjdGFibGUsXG4gIEluamVjdG9yLFxuICBOZ1pvbmUsXG4gIFZpZXdDb250YWluZXJSZWYsXG4gIEFwcGxpY2F0aW9uUmVmLFxuICBPcHRpb25hbFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQXJndW1lbnRIZWxwZXIgfSBmcm9tICcuLi91dGlscy9hcmd1bWVudC5oZWxwZXInO1xuaW1wb3J0IHsgU29ob01vZGFsRGlhbG9nUmVmIH0gZnJvbSAnLi9zb2hvLW1vZGFsLWRpYWxvZy5yZWYnO1xuaW1wb3J0IHsgUm91dGVyIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuLyoqXG4gKiBUaGlzIHNlcnZpY2UgaXMgdXNlZCB0byBjcmVhdGUgYSBtb2RhbCBkaWFsb2csIGJhc2VkIG9uIHRoZSBjb250ZW50XG4gKiBvZiBhbiBBbmd1bGFyIENvbXBvbm5lbnQgb24gdGhlIHNjcmVlbi5cbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFNvaG9Nb2RhbERpYWxvZ1NlcnZpY2Uge1xuICAvKipcbiAgICogQ29uc3RydWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSBhcHBSZWYgLSBhcHBsaWNhdGlvbiByZWZlcmVuY2U7IG11c3Qgbm90IGJlIG51bGwuXG4gICAqIEBwYXJhbSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIgLSB1c2VkIHRvIGNyZWF0ZSBjb21wb25lbnQgZmFjdG9yaWVzIGZvciBjb21wb25lbnRzIGR5bmFtaWNhbGx5LlxuICAgKiBAcGFyYW0gaW5qZWN0b3IgLSB0aGUgY3VycmVudCBpbiBzY29wZSBpbmplY3RvciwgdXNlIGFzIGEgZGVsZWdhdGUuXG4gICAqIEBwYXJhbSBuZ1pvbmUgLSB0aGUgYW5ndWxhciB6b25lOyBtdXN0IG5vdCBiZSBudWxsLlxuICAgKiBAcm91dGVyXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHJlYWRvbmx5IGFwcFJlZjogQXBwbGljYXRpb25SZWYsXG4gICAgcHJpdmF0ZSByZWFkb25seSBjb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IGluamVjdG9yOiBJbmplY3RvcixcbiAgICBwcml2YXRlIHJlYWRvbmx5IG5nWm9uZTogTmdab25lLFxuICAgIEBPcHRpb25hbCgpIHByaXZhdGUgcmVhZG9ubHkgcm91dGVyOiBSb3V0ZXIpIHtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbW9kYWwgZGlhbG9nIGRlZmluZWQgYnkgdGhlIGdpdmVuIGNvbXBvbmVudCwgcmV0dXJuaW5nIGEgcmVmZXJlbmNlIHRvIHRoZVxuICAgKiBkaWFsb2cgdGhhdCBjYW4gYmUgaW50ZXJhY3RlZCB3aXRoLlxuICAgKlxuICAgKiBUaGUgY29tcG9uZW50IGhhcyB0aGUgcG90ZW50aWFsIHRvIGluY2x1ZGUgdGhlIGRpYWxvZyByZWZlcmVuY2Ugd2hlbiBpdCBpc1xuICAgKiBpbnN0YW50aWF0ZWQsIGFzIGEgcHJvdmlkZXIuXG4gICAqXG4gICAqIFRoZSBkaWFsb2cgd29uJ3QgbmVjZXNzYXJpbHkgYmUgb3BlbiB5ZXQsIHNlZSB0aGUgZGlhbG9nIHJlZiBhcGkgZm9yIGZ1cnRoZXIgbWV0aG9kcy5cbiAgICpcbiAgICogQHBhcmFtIGNvbXBvbmVudCAtIFRoZSB0eXBlIG9mIHRoZSBjb21wb25lbnQgdG8gaW5zdGFudGlhdGU7IG11c3Qgbm90IGJlIG51bGwuXG4gICAqIEBwYXJhbSBwYXJlbnQgLSBUaGUgcGFyZW50IGNvbnRhaW5lcjsgb2Jzb2xldGUgYnV0IHBhcmFtZXRlciBrZXB0IGZvciBiYWNrd2FyZHMgQVBJIGNvbXBhdGliaWxpdHkuIEhhcyBubyBlZmZlY3QuXG4gICAqIEBwYXJhbSBvcHRpb25zIC0gVGhlIGNvbnRyb2wgb3B0aW9ucyB0byB1c2UuXG4gICAqXG4gICAqIEByZXR1cm4gdGhlIG1vZGFsIGRpYWxvZyByZWZlcmVuY2UuXG4gICAqL1xuICBwdWJsaWMgbW9kYWw8VD4oY29tcG9uZW50OiBDb21wb25lbnRUeXBlPFQ+LCBfcGFyZW50PzogVmlld0NvbnRhaW5lclJlZiwgb3B0aW9ucz86IFNvaG9Nb2RhbE9wdGlvbnMpOiBTb2hvTW9kYWxEaWFsb2dSZWY8VD4ge1xuICAgIEFyZ3VtZW50SGVscGVyLmNoZWNrTm90TnVsbCgnY29tcG9uZW50JywgY29tcG9uZW50KTtcblxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgcmV0dXJuIG5ldyBTb2hvTW9kYWxEaWFsb2dSZWY8VD4oXG4gICAgICB0aGlzLnJvdXRlciwgdGhpcy5hcHBSZWYsIHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCB0aGlzLmluamVjdG9yLCB0aGlzLm5nWm9uZSwgb3B0aW9ucywgY29tcG9uZW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgbW9kYWwgZGlhbG9nICh1c2luZyB0aGUgY29udGVudCBkZWZpbmVkIGluIHRoZSBvcHRpb25zKSwgcmV0dXJuaW5nIGEgcmVmZXJlbmNlIHRvIHRoZVxuICAgKiBkaWFsb2cgdGhhdCBjYW4gYmUgaW50ZXJhY3RlZCB3aXRoLlxuICAgKlxuICAgKiBUaGUgZGlhbG9nIHdvbid0IGJlIG9wZW4uXG4gICAqXG4gICAqIEByZXR1cm4gdGhlIG1vZGFsIGRpYWxvZyByZWZlcmVuY2UuXG4gICAqL1xuICBwdWJsaWMgbWVzc2FnZTxUPihjb250ZW50OiBzdHJpbmcgfCBKUXVlcnkpOiBTb2hvTW9kYWxEaWFsb2dSZWY8VD4ge1xuICAgIGNvbnN0IHNldHRpbmdzOiBTb2hvTW9kYWxPcHRpb25zID0geyBjb250ZW50IH07XG5cbiAgICAvLyBXaXRob3V0IGEgY29tcG9uZW50LCB0aGVyZSBpcyBubyBkZXN0cm95IGNhbGxiYWNrIHRvIGVuc3VyZVxuICAgIC8vIHRoZSBkaWFsb2cncyBtYXJrdXAgaXMgcmVtb3ZlZC5cbiAgICByZXR1cm4gbmV3IFNvaG9Nb2RhbERpYWxvZ1JlZjxUPih0aGlzLnJvdXRlciwgdGhpcy5hcHBSZWYsIHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCB0aGlzLmluamVjdG9yLCB0aGlzLm5nWm9uZSwgc2V0dGluZ3MpO1xuICB9XG59XG5cbi8qKlxuICogT2JqZWN0IHdpdGggYSBcIm5ld1wiXCIgbWV0aG9kIHJldHVybmluZyB0aGUgdHlwZSBULlxuICovXG5leHBvcnQgdHlwZSBDb21wb25lbnRUeXBlPFQ+ID0gbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gVDtcbiJdfQ==
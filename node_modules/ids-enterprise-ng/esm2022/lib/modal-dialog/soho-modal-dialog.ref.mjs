import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { NavigationEnd } from '@angular/router';
/**
 * Wrapper for the jQuery modal control.
 *
 */
export class SohoModalDialogRef {
    /**
     * The component displayed inside the modal frame, if specified.  This may
     * be null if the dialog is built from an HTML fragment or a jQuery selector.
     *
     * @returns the contained component dialog.
     */
    get componentDialog() {
        if (this.componentRef) {
            return this.componentRef.instance;
        }
        return undefined;
    }
    /**
     * The buttonset API for the modal dialog.
     *
     * @returns the buttonset API for the modal dialog, if initialised.
     */
    get buttonsetAPI() {
        return this.modal ? this.modal.buttonsetAPI : undefined;
    }
    /**
     * Sets the whole options block for this modal dialog.
     *
     * @param options - the options to set.
     */
    options(options) {
        this._options = Object.assign({}, this._options, options);
        // @todo update the dialog if required.
        if (this.modal) {
            this.modal.settings = this._options;
            // @todo - need an api on modal to update settings.
        }
        return this;
    }
    /**
     * Sets the frame height for the dialog.
     *
     * @param frameHeight - the extra frame height to allow.
     */
    frameHeight(frameHeight) {
        this._options.frameHeight = frameHeight;
        if (this.modal) {
            this.modal.settings.frameHeight = frameHeight;
        }
        return this;
    }
    /**
     * Sets the frame width for the dialog.
     *
     * @param frameWidth - the extra frame width to allow.
     */
    frameWidth(frameWidth) {
        this._options.frameWidth = frameWidth;
        if (this.modal) {
            this.modal.settings.frameWidth = frameWidth;
        }
        return this;
    }
    /**
     * A call back function that can be used to return data for the modal. This is the callback form of the before show event.
     *
     * @param beforeShow - The callback function
     */
    beforeShow(beforeShow) {
        this._options.beforeShow = beforeShow;
        if (this.modal) {
            this.modal.settings.beforeShow = beforeShow;
        }
        return this;
    }
    /**
     * If true, show a close icon button on the top right of the modal.
     *
     * @param showCloseBtn - if true the x will be shown.
     */
    showCloseBtn(showCloseBtn) {
        this._options.showCloseBtn = showCloseBtn;
        if (this.modal) {
            this.modal.settings.showCloseBtn = showCloseBtn;
        }
        return this;
    }
    /**
     * Optional max width to add in pixels.
     *
     * @param maxWidth - The width in pixels
     */
    maxWidth(maxWidth) {
        this.modal.settings.maxWidth = maxWidth;
        if (this.modal) {
            this.modal.settings.maxWidth = maxWidth;
        }
        return this;
    }
    /**
     * Sets the title of the modal dialog.
     *
     * @param title - the title of the dialog.
     */
    title(title) {
        this._options.title = title;
        if (this.modal) {
            this.modal.settings.title = title;
            // @todo - need an api on modal to update settings.
        }
        return this;
    }
    /**
     * Sets the buttons to use on the modal dialog.
     *
     * @param buttons - list of buttons to display
     */
    buttons(buttons) {
        this._options.buttons = buttons;
        if (this.modal) {
            this.modal.settings.buttons = buttons;
            // @todo - need an api on modal to update settings.
        }
        return this;
    }
    /**
     * Sets the 'id' that the modal control uses.
     *
     * @param id - the id.
     */
    id(id) {
        this._options.id = id;
        if (this.modal) {
            this.modal.settings.id = id;
            // @todo - need an api on modal to update settings.
        }
        return this;
    }
    /**
     * Sets the 'trigger' that the modal control uses.
     *
     * @param trigger - when to open the dialog.
     */
    trigger(trigger) {
        this._options.trigger = trigger;
        if (this.modal) {
            this.modal.settings.trigger = trigger;
            // @todo - need an api on modal to update settings.
        }
        return this;
    }
    /**
     * Sets the 'isAlert' that the modal control uses.
     *
     * @param isAlert - true if this dialog is to be styled an an alert.
     */
    isAlert(isAlert) {
        this._options.isAlert = isAlert;
        if (this.modal) {
            this.modal.settings.isAlert = isAlert;
            // @todo - need an api on modal to update settings.
        }
        return this;
    }
    /**
     * Sets the fullsize configuration that the modal control uses.
     *
     * @param fullsize - The full size configuration to use.
     */
    fullsize(fullsize) {
        this._options.fullsize = fullsize;
        if (this.modal) {
            this.modal.settings.fullsize = fullsize;
        }
        return this;
    }
    /**
     * Sets the breakpoint configuration that the modal control uses in full size mode(s).
     *
     * @param breakpoint - The full size configuration to use.
     */
    breakpoint(breakpoint) {
        this._options.breakpoint = breakpoint;
        if (this.modal) {
            this.modal.settings.breakpoint = breakpoint;
        }
        return this;
    }
    /**
     * Controls the opacity of the background overlay.
     *
     * @param overlayOpacity - The percent between 0 and 1 of opacity to use.
     */
    overlayOpacity(overlayOpacity) {
        this._options.overlayOpacity = overlayOpacity;
        if (this.modal) {
            this.modal.settings.overlayOpacity = overlayOpacity;
        }
        return this;
    }
    /**
     * Causes this modal instance to become hidden when another modal is displayed over top.
     *
     * @param hideUnderneath - If it should be on top or bottom.
     */
    hideUnderneath(hideUnderneath) {
        this._options.hideUnderneath = hideUnderneath;
        if (this.modal) {
            this.modal.settings.hideUnderneath = hideUnderneath;
        }
        return this;
    }
    /**
     * if true, causes the modal to not exit when the enter key is pressed.
     *
     * @param suppressEnterKey - If it supress enter
     */
    suppressEnterKey(suppressEnterKey) {
        this._options.suppressEnterKey = suppressEnterKey;
        if (this.modal) {
            this.modal.settings.suppressEnterKey = suppressEnterKey;
        }
        return this;
    }
    /**
     * If true, causes the modal's trigger element not to become focused once the modal is closed.
     *
     * @param noRefocus - If true, refocus
     */
    noRefocus(noRefocus) {
        this._options.noRefocus = noRefocus;
        if (this.modal) {
            this.modal.settings.noRefocus = noRefocus;
        }
        return this;
    }
    /**
     * The modal's trigger element to keep refocused once the modal is closed. This can be html or jquery object or query selector as string.
     *
     * @param triggerButton - The element (for example a button) to refocus on close.
     */
    triggerButton(triggerButton) {
        this._options.triggerButton = triggerButton;
        if (this.modal) {
            this.modal.settings.triggerButton = triggerButton;
        }
        return this;
    }
    /**
     * Add extra attributes like id's to the component
     */
    attributes(attributes) {
        this._options.attributes = attributes;
        if (this.modal) {
            this.modal.settings.attributes = attributes;
        }
        return this;
    }
    /**
     * Sets the 'content' that the modal control uses.
     *
     * @param content - a selector or string representing the dialog content.
     */
    content(content) {
        this._options.content = content;
        if (this.modal) {
            this.modal.settings.content = content;
            // @todo - need an api on modal to update content.
        }
        return this;
    }
    /**
     * Sets the 'cssClass' of the modal control.
     */
    cssClass(cssClass) {
        this._options.cssClass = cssClass;
        if (this.modal) {
            this.modal.settings.cssClass = cssClass;
            // @todo - need an api on modal to update settings.
        }
        return this;
    }
    /**
     * Sets the 'autoFocus' of the modal control.
     *
     * @param autoFocus -if true; the dialog will autoFocus.
     */
    autoFocus(autoFocus) {
        this._options.autoFocus = autoFocus;
        if (this.modal) {
            this.modal.settings.autoFocus = autoFocus;
            // @todo - need an api on modal to update settings.
        }
        return this;
    }
    /**
     * Applies a function to the instantiated component,
     * allowing the component to be modified, or initialised.
     *
     * The function is provided with a typed value for the
     * instance.
     *
     * @param component - the instantated instance.
     * @return the dialog ref for onward assignment.
     */
    apply(fn) {
        if (fn && this.componentRef?.instance) {
            fn(this.componentRef.instance);
        }
        return this;
    }
    /**
     * When set to true, this dialog is closed when navigation is detected.
     *
     * @param closeOnNavigation controls the close behaviour when navigating.
     * @return the dialog ref for support a fluent api.
     */
    closeOnNavigation(closeOnNavigation) {
        this._closeOnNavigation = closeOnNavigation;
        return this;
    }
    /**
     * Dialog result property.
     *
     * @param dialogResult - the stored restult of the dialog.
     */
    set dialogResult(dialogResult) {
        this._dialogResult = dialogResult;
    }
    get dialogResult() {
        return this._dialogResult;
    }
    /**
     * Constructor.
     *
     * @paran appRef - application reference used to insert the component.
     */
    constructor(router, appRef, componentFactoryResolver, injector, ngZone, settings, modalComponent) {
        this.appRef = appRef;
        this.injector = injector;
        this.ngZone = ngZone;
        /** Vetoable Event Guard */
        this.eventGuard = {};
        /**
         * Closes the modal dialogs if router navigation is detected, this prevents diaslogs from being
         * left open when navigating.
         */
        this._closeOnNavigation = true;
        /** Event fired when the modal is opened. */
        this.open$ = new Subject();
        /** Event fired when the modal is closed. */
        this.close$ = new Subject();
        /** Event fired after closing the modal. */
        this.afterClose$ = new Subject();
        /** Event fired after openning the modal dialog. */
        this.afterOpen$ = new Subject();
        /** Handle resource tidy up of this class. */
        this.destroyed$ = new Subject();
        // -------------------------------------------
        // Default options block
        // -------------------------------------------
        /**
         * Cached options.
         */
        this._options = {};
        this.options(settings);
        if (modalComponent) {
            // Create component
            this.componentRef = componentFactoryResolver
                .resolveComponentFactory(modalComponent)
                .create(this.injector);
            appRef.attachView(this.componentRef.hostView);
            // Handle angular closing the component by closing the corresponding dialog.
            this.componentRef.onDestroy(() => {
                // Disable the beforeClose veto capability when navigating.
                this.eventGuard.beforeClose = null;
                this.close();
            });
            // Initialise the event guart
            this.eventGuard = this.componentRef.instance || null;
            this._options.content = jQuery(this.componentRef.location.nativeElement);
        }
        // Add a subscription to the router to remove
        // the dialog when the user navigates.
        if (router) {
            router.events
                .pipe(takeUntil(this.destroyed$))
                .subscribe(e => {
                if (this._closeOnNavigation && e instanceof NavigationEnd) {
                    // Disable the beforeClose veto capability when navigating.
                    this.eventGuard.beforeClose = null;
                    if (this.modal) {
                        this.modal.close(true);
                    }
                    if (this.componentRef) {
                        this.componentRef.destroy();
                    }
                }
            });
        }
    }
    /**
     * Opens the dialog.
     *
     * @return the dialog ref.
     */
    open() {
        if (this.modal) {
            this.modal.open();
            return this;
        }
        if (!this.componentRef && !this._options.content) {
            throw Error('componentRef or content must be initialised.');
        }
        this.jQueryElement = this.ngZone.runOutsideAngular(() => {
            const element = jQuery('body');
            element.modal(this._options);
            this.modal = element.data('modal');
            return this.modal?.element;
        });
        // Add listeners to control events
        this.jQueryElement?.off('close').on('close', ((event, isCancelled) => this.ngZone.run(() => this.onClose(event, isCancelled))));
        this.jQueryElement?.off('afterclose').on('afterclose', ((event) => this.ngZone.run(() => this.onAfterClose(event))));
        this.jQueryElement?.off('open').on('open', ((event) => this.ngZone.run(() => this.onOpen(event))));
        this.jQueryElement?.off('afteropen').on('afteropen', ((event) => this.ngZone.run(() => this.onAfterOpen(event))));
        // These are vetoable events.
        this.jQueryElement?.off('beforeopen').on('beforeopen', ((event) => this.ngZone.run(() => this.onBeforeOpen(event))));
        this.jQueryElement?.off('beforeclose').on('beforeclose', ((event) => this.ngZone.run(() => this.onBeforeClose(event))));
        this.jQueryElement?.off('beforedestroy').on('beforedestroy', ((event) => this.ngZone.run(() => this.onBeforeDestroy(event))));
        return this;
    }
    /**
     * Closes the modal dialog, if open.  The dialog is not closed
     * fully until the 'afterClosed' event is fired.
     *
     * @param dialogResult - optional result - passed back to the caller.
     */
    close(dialogResult) {
        this.dialogResult = dialogResult;
        if (this.modal) {
            this.ngZone.runOutsideAngular(() => this.modal?.close(false, false, true));
        }
        return this;
    }
    /**
     * Destroys the modal dialog.
     */
    destroy() {
        this.modal?.destroy();
        return this;
    }
    // ------------------------------------------
    // Events
    // ------------------------------------------
    /**
     * Registers a before open guard.
     *
     * SOHO-4892 - Returning false from beforeOpen or beforeDestroy breaks dialogs
     *
     * @param eventFn - the function to call before openning the dialog.
     */
    beforeOpen(eventFn) {
        this.eventGuard.beforeOpen = eventFn;
        return this;
    }
    /**
     * Opened Event.
     *
     * This event is fired when the dialog is being opened.
     *
     * @param eventFn - the function to invoke when the dialog is to be opened.
     */
    opened(eventFn) {
        this.open$.pipe(takeUntil(this.destroyed$)).subscribe((f) => {
            eventFn(f, this);
        });
        return this;
    }
    /**
     * Opened Event.
     *
     * This event is fired after the dialog has been opened.
     *
     * @param eventFn - the function to invoke when the dialog is to be opened.
     */
    afterOpen(eventFn) {
        this.afterOpen$.pipe(takeUntil(this.destroyed$)).subscribe((f) => {
            eventFn(f, this);
        });
        return this;
    }
    /**
     * Registers a before close guard.
     *
     * @param eventFn - the function to call before closing the dialog.
     */
    beforeClose(eventFn) {
        this.eventGuard.beforeClose = eventFn;
        return this;
    }
    /**
     * Closed Event.
     *
     * This event is fired when the dialog is being closed.
     *
     * @param eventFn - the function to invoke when the dialog is to be closed.
     */
    closed(eventFn) {
        this.close$.pipe(takeUntil(this.destroyed$)).subscribe((f) => {
            eventFn(f, this, this.componentDialog);
        });
        return this;
    }
    /**
     * After Closed Event.
     *
     * This event is fired, with the result of the dialog, when the dialog has been
     * closed and destroyed.
     *
     * @param eventFn - the function to invoke after the dialog has been closed.
     */
    afterClose(eventFn) {
        this.afterClose$.pipe(takeUntil(this.destroyed$)).subscribe((result) => {
            eventFn(result, this, this.componentDialog);
        });
        return this;
    }
    /**
     * Registers a before destroy guard.
     *
     * SOHO-4892 - Returning false from beforeOpen or beforeDestroy breaks dialogs
     *
     * @param eventFn - the function to call before destroying the dialog.
     */
    beforeDestroy(eventFn) {
        this.eventGuard.beforeDestroy = eventFn;
        return this;
    }
    // -------------------------------------------
    // Event Handlers
    // -------------------------------------------
    /**
     * Handles the 'afterOpen' event, fired after the modal dialog
     * has been opened.
     *
     * @param event - full event object.
     */
    onAfterOpen(event) {
        this.afterOpen$.next(event);
    }
    /**
     * Handles the 'beforeOpen' event, fired before the modal dialog
     * has been opened.
     *
     * @param event - full event object.
     *
     * @return true if the dialog can be opened; otherwise false if veoted.
     */
    onBeforeOpen(_event) {
        const fn = this.eventGuard?.beforeOpen;
        return fn ? fn.call(this.eventGuard, this) : true;
    }
    /**
     * Handles the 'beforeClose' event, fired before the modal dialog
     * has been destroyed.
     *
     * @param event - event object.
     * @return true if the dialog can be closed; otherwise false if veoted.
     */
    onBeforeClose(_event) {
        const fn = this.eventGuard.beforeClose;
        this.eventGuard.isCancelled = this.modal?.isCancelled;
        return fn ? fn.call(this.eventGuard, this) : true;
    }
    /**
     * Handles the 'beforeDestroy' event, fired before the modal dialog
     * has been destroyed.
     *
     * @param event - event object.
     * @return true if the dialog can be destroyed; otherwise false if veoted.
     */
    onBeforeDestroy(_) {
        const fn = this.eventGuard?.beforeDestroy;
        const allow = fn ? fn.call(this.eventGuard) : true;
        if (allow) {
            // Remove all events.
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            this.ngZone.run(() => {
                if (this.componentRef) {
                    this.appRef.detachView(this.componentRef.hostView);
                    this.componentRef.destroy();
                    this.componentRef = null;
                }
                // Tidy up all subscriptions.
                this.destroyed$.next(_);
                this.destroyed$.complete();
                // Clean up references
                this.eventGuard = null;
            });
        }
        return allow;
    }
    /**
     * Handles the 'open' event, fired just before
     * the focus is assigned to a modal.
     *
     * @param event - full event object.
     */
    onOpen(event) {
        this.open$.next(event);
    }
    /**
     * Handles the close event.
     *
     * @param event - full event object.
     * @param isCancelled - is true if the cancel button was pressed; otherwise false.
     */
    onClose(_event, isCancelled) {
        this.close$.next(isCancelled);
    }
    /**
     * Handles the 'afterClose' event, fired when the dialog
     * has been closed and tidy up is required.
     *
     * @param event - full event object.
     */
    onAfterClose(_event) {
        // Pass the dialog result back.
        this.afterClose$.next(this.dialogResult);
        this.afterClose$.complete();
        this.ngZone.runOutsideAngular(() => {
            // must destroy before turning off jquery events. modal.destroy relies on
            // the onBeforeDestroy event.
            this.modal?.destroy();
            this.modal = null;
        });
    }
}
//# sourceMappingURL=data:application/json;base64,
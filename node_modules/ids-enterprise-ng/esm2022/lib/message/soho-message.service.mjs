import { Injectable } from '@angular/core';
import { SohoMessageRef } from './soho-message.ref';
import * as i0 from "@angular/core";
/**
 * This service is used to create message dialogs.
 */
export class SohoMessageService {
    /**
     * Constructor.
     */
    constructor() {
    }
    /**
     * Creates a dialog defined by the given message, returning a reference to the
     * associated dialog that can be interacted with.
     *
     * The dialog won't be open until open is called on the returned instance,
     * see the message ref api for further methods.
     *
     * @parent options - a compete set of options; can be null.
     *
     * @return the message reference.
     */
    message(options) {
        return new SohoMessageRef().options(options);
    }
    /**
     * Creates an error message, defined by the given options.
     *
     * The dialog won't be open until open is called on the returned instance,
     * see the message ref api for further methods.
     *
     * @return the message reference.
     */
    error(options) {
        return new SohoMessageRef().options(options).status('error');
    }
    /**
     * Creates an alert message, defined by the given options.
     *
     * The dialog won't be open until open is called on the returned instance,
     * see the message ref api for further methods.
     *
     * @return the message reference.
     */
    alert(options) {
        return new SohoMessageRef().options(options).status('alert');
    }
    /**
     * Creates an confirm (positive) message, defined by the given options.
     *
     * The dialog won't be open until open is called on the returned instance,
     * see the message ref api for further methods.
     *
     * @return the message reference.
     */
    confirm(options) {
        return new SohoMessageRef().options(options).status('confirm');
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoMessageService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoMessageService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoMessageService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby1tZXNzYWdlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZHMtZW50ZXJwcmlzZS1uZy9zcmMvbGliL21lc3NhZ2Uvc29oby1tZXNzYWdlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7O0FBRXBEOztHQUVHO0FBRUgsTUFBTSxPQUFPLGtCQUFrQjtJQUM3Qjs7T0FFRztJQUNIO0lBQ0EsQ0FBQztJQUVEOzs7Ozs7Ozs7O09BVUc7SUFDSCxPQUFPLENBQUMsT0FBNEI7UUFDbEMsT0FBTyxJQUFJLGNBQWMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILEtBQUssQ0FBQyxPQUE0QjtRQUNoQyxPQUFPLElBQUksY0FBYyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILEtBQUssQ0FBQyxPQUE0QjtRQUNoQyxPQUFPLElBQUksY0FBYyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRUQ7Ozs7Ozs7T0FPRztJQUNILE9BQU8sQ0FBQyxPQUE0QjtRQUNsQyxPQUFPLElBQUksY0FBYyxFQUFFLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNqRSxDQUFDOzhHQXhEVSxrQkFBa0I7a0hBQWxCLGtCQUFrQjs7MkZBQWxCLGtCQUFrQjtrQkFEOUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgU29ob01lc3NhZ2VSZWYgfSBmcm9tICcuL3NvaG8tbWVzc2FnZS5yZWYnO1xuXG4vKipcbiAqIFRoaXMgc2VydmljZSBpcyB1c2VkIHRvIGNyZWF0ZSBtZXNzYWdlIGRpYWxvZ3MuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTb2hvTWVzc2FnZVNlcnZpY2Uge1xuICAvKipcbiAgICogQ29uc3RydWN0b3IuXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZGlhbG9nIGRlZmluZWQgYnkgdGhlIGdpdmVuIG1lc3NhZ2UsIHJldHVybmluZyBhIHJlZmVyZW5jZSB0byB0aGVcbiAgICogYXNzb2NpYXRlZCBkaWFsb2cgdGhhdCBjYW4gYmUgaW50ZXJhY3RlZCB3aXRoLlxuICAgKlxuICAgKiBUaGUgZGlhbG9nIHdvbid0IGJlIG9wZW4gdW50aWwgb3BlbiBpcyBjYWxsZWQgb24gdGhlIHJldHVybmVkIGluc3RhbmNlLFxuICAgKiBzZWUgdGhlIG1lc3NhZ2UgcmVmIGFwaSBmb3IgZnVydGhlciBtZXRob2RzLlxuICAgKlxuICAgKiBAcGFyZW50IG9wdGlvbnMgLSBhIGNvbXBldGUgc2V0IG9mIG9wdGlvbnM7IGNhbiBiZSBudWxsLlxuICAgKlxuICAgKiBAcmV0dXJuIHRoZSBtZXNzYWdlIHJlZmVyZW5jZS5cbiAgICovXG4gIG1lc3NhZ2Uob3B0aW9ucz86IFNvaG9NZXNzYWdlT3B0aW9ucyk6IFNvaG9NZXNzYWdlUmVmIHtcbiAgICByZXR1cm4gbmV3IFNvaG9NZXNzYWdlUmVmKCkub3B0aW9ucyhvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGVycm9yIG1lc3NhZ2UsIGRlZmluZWQgYnkgdGhlIGdpdmVuIG9wdGlvbnMuXG4gICAqXG4gICAqIFRoZSBkaWFsb2cgd29uJ3QgYmUgb3BlbiB1bnRpbCBvcGVuIGlzIGNhbGxlZCBvbiB0aGUgcmV0dXJuZWQgaW5zdGFuY2UsXG4gICAqIHNlZSB0aGUgbWVzc2FnZSByZWYgYXBpIGZvciBmdXJ0aGVyIG1ldGhvZHMuXG4gICAqXG4gICAqIEByZXR1cm4gdGhlIG1lc3NhZ2UgcmVmZXJlbmNlLlxuICAgKi9cbiAgZXJyb3Iob3B0aW9ucz86IFNvaG9NZXNzYWdlT3B0aW9ucyk6IFNvaG9NZXNzYWdlUmVmIHtcbiAgICByZXR1cm4gbmV3IFNvaG9NZXNzYWdlUmVmKCkub3B0aW9ucyhvcHRpb25zKS5zdGF0dXMoJ2Vycm9yJyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbiBhbGVydCBtZXNzYWdlLCBkZWZpbmVkIGJ5IHRoZSBnaXZlbiBvcHRpb25zLlxuICAgKlxuICAgKiBUaGUgZGlhbG9nIHdvbid0IGJlIG9wZW4gdW50aWwgb3BlbiBpcyBjYWxsZWQgb24gdGhlIHJldHVybmVkIGluc3RhbmNlLFxuICAgKiBzZWUgdGhlIG1lc3NhZ2UgcmVmIGFwaSBmb3IgZnVydGhlciBtZXRob2RzLlxuICAgKlxuICAgKiBAcmV0dXJuIHRoZSBtZXNzYWdlIHJlZmVyZW5jZS5cbiAgICovXG4gIGFsZXJ0KG9wdGlvbnM/OiBTb2hvTWVzc2FnZU9wdGlvbnMpOiBTb2hvTWVzc2FnZVJlZiB7XG4gICAgcmV0dXJuIG5ldyBTb2hvTWVzc2FnZVJlZigpLm9wdGlvbnMob3B0aW9ucykuc3RhdHVzKCdhbGVydCcpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gY29uZmlybSAocG9zaXRpdmUpIG1lc3NhZ2UsIGRlZmluZWQgYnkgdGhlIGdpdmVuIG9wdGlvbnMuXG4gICAqXG4gICAqIFRoZSBkaWFsb2cgd29uJ3QgYmUgb3BlbiB1bnRpbCBvcGVuIGlzIGNhbGxlZCBvbiB0aGUgcmV0dXJuZWQgaW5zdGFuY2UsXG4gICAqIHNlZSB0aGUgbWVzc2FnZSByZWYgYXBpIGZvciBmdXJ0aGVyIG1ldGhvZHMuXG4gICAqXG4gICAqIEByZXR1cm4gdGhlIG1lc3NhZ2UgcmVmZXJlbmNlLlxuICAgKi9cbiAgY29uZmlybShvcHRpb25zPzogU29ob01lc3NhZ2VPcHRpb25zKTogU29ob01lc3NhZ2VSZWYge1xuICAgIHJldHVybiBuZXcgU29ob01lc3NhZ2VSZWYoKS5vcHRpb25zKG9wdGlvbnMpLnN0YXR1cygnY29uZmlybScpO1xuICB9XG59XG4iXX0=
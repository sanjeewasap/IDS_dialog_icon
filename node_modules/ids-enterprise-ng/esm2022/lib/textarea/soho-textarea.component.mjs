import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, HostListener } from '@angular/core';
import { BaseControlValueAccessor, provideControlValueAccessor } from '../utils/base-control-value-accessor';
import * as i0 from "@angular/core";
export class SohoTextAreaComponent extends BaseControlValueAccessor {
    // -------------------------------------------
    // Component Input
    // -------------------------------------------
    set disabled(value) {
        this.isDisabled = value;
        if (this.textarea) {
            if (value) {
                this.textarea.disable();
                this.isDisabled = true;
            }
            else {
                this.textarea.enable();
                this.isDisabled = false;
                this.isReadOnly = false;
            }
            this.markForRefresh();
        }
    }
    get disabled() {
        return this.isDisabled;
    }
    set readonly(value) {
        this.isReadOnly = value;
        if (this.textarea) {
            if (value) {
                this.textarea.readonly();
                this.isReadOnly = true;
            }
            else {
                this.textarea.enable();
                this.isDisabled = false;
                this.isReadOnly = false;
            }
            this.markForRefresh();
        }
    }
    get readonly() {
        return this.isReadOnly;
    }
    set maxLength(maxLength) {
        this.options.maxLength = maxLength;
        if (this.textStatic) {
            this.textStatic.settings.maxLength = maxLength;
        }
        if (this.textarea) {
            this.markForRefresh();
        }
    }
    get maxLength() {
        return this.options.maxLength;
    }
    set autoGrow(autoGrow) {
        this.options.autoGrow = autoGrow;
        if (this.textStatic) {
            this.textStatic.settings.autoGrow = autoGrow;
        }
        if (this.textarea) {
            this.markForRefresh();
        }
    }
    get autoGrow() {
        return this.options.autoGrow;
    }
    set autoGrowMaxHeight(autoGrowMaxHeight) {
        this.options.autoGrowMaxHeight = autoGrowMaxHeight;
        if (this.textStatic) {
            this.textStatic.settings.autoGrowMaxHeight = autoGrowMaxHeight;
        }
        if (this.textarea) {
            this.markForRefresh();
        }
    }
    get autoGrowMaxHeight() {
        return this.options.autoGrowMaxHeight;
    }
    set attributes(attributes) {
        this.options.attributes = attributes;
        if (this.textStatic) {
            this.textStatic.settings.attributes = attributes;
        }
        if (this.textarea) {
            this.markForRefresh();
        }
    }
    get attributes() {
        return this.options.attributes;
    }
    set characterCounter(characterCounter) {
        this.options.characterCounter = characterCounter;
        if (this.textarea) {
            this.markForRefresh();
        }
    }
    set printable(printable) {
        this.options.printable = printable;
        if (this.textarea) {
            this.markForRefresh();
        }
    }
    set charRemainingText(charRemainingText) {
        this.options.charRemainingText = charRemainingText;
        if (this.textarea) {
            this.markForRefresh();
        }
    }
    set charMaxText(charMaxText) {
        this.options.charMaxText = charMaxText;
        if (this.textarea) {
            this.markForRefresh();
        }
    }
    /**
     * Specific host listener for textarea.
     *
     * @param textarea the HTML element
     */
    oninput(event, textarea) {
        this.internalValue = textarea.value;
        super.writeValue(this.internalValue);
        this.change.emit([event]);
    }
    constructor(element, ref, ngZone) {
        super();
        this.element = element;
        this.ref = ref;
        this.ngZone = ngZone;
        this.options = {};
        this.resizable = undefined;
        // -------------------------------------------
        // Component Output
        // -------------------------------------------
        /**
         * Called when the textarea updates in some way
         */
        this.updated = new EventEmitter();
        /**
         * @todo Change to 'changed'.
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.change = new EventEmitter();
    }
    ngAfterViewInit() {
        // Wrap the element in a jQuery selector.
        this.jQueryElement = jQuery(this.element.nativeElement);
        // Initialise the SohoXi Control
        this.jQueryElement.val(this.internalValue);
        this.jQueryElement.textarea(this.options);
        this.textarea = this.jQueryElement.data('textarea');
        if (this.isReadOnly) {
            this.textarea?.readonly();
        }
        if (this.isDisabled) {
            this.textarea?.disable();
        }
        if (this.internalValue) {
            this.jQueryElement.val(this.internalValue);
        }
        /**
         * Bind to jQueryElement's events
         */
        this.jQueryElement
            .on('change', (_e, args) => this.onChange(args))
            .on('updated', (_e, args) => this.updated.next(args));
        this.runUpdatedOnCheck = true;
    }
    ngAfterViewChecked() {
        if (this.runUpdatedOnCheck) {
            this.ngZone.runOutsideAngular(() => {
                if (this.textarea) {
                    this.textarea?.updated(this.options);
                }
                this.runUpdatedOnCheck = false;
            });
        }
    }
    /**
     * Handle the control being changed.
     */
    onChange(event) {
        if (!event) {
            // sometimes the event is not available
            this.internalValue = this.jQueryElement?.val();
            super.writeValue(this.internalValue);
            return;
        }
        this.change.emit(event);
    }
    /**
     * Override writeValue to allow the input to count correctly
     *
     * @param value - the new value
     */
    writeValue(value) {
        super.writeValue(value);
        if (this.jQueryElement) {
            this.jQueryElement.val(value);
            if (this.textarea) {
                this.textarea.updateCounter();
                this.textarea.autoGrow();
            }
        }
    }
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh() {
        this.runUpdatedOnCheck = true;
        this.ref.markForCheck();
    }
    ngOnDestroy() {
        if (this.textarea) {
            this.textarea.destroy();
            this.textarea = null;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTextAreaComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoTextAreaComponent, selector: "textarea[soho-textarea]", inputs: { disabled: "disabled", readonly: "readonly", resizable: "resizable", maxLength: "maxLength", autoGrow: "autoGrow", autoGrowMaxHeight: "autoGrowMaxHeight", attributes: "attributes", characterCounter: "characterCounter", printable: "printable", charRemainingText: "charRemainingText", charMaxText: "charMaxText" }, outputs: { updated: "updated", change: "change" }, host: { listeners: { "input": "oninput($event,$event.target)" }, properties: { "class.resizable": "this.resizable" } }, providers: [provideControlValueAccessor(SohoTextAreaComponent)], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoTextAreaComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'textarea[soho-textarea]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [provideControlValueAccessor(SohoTextAreaComponent)]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, propDecorators: { disabled: [{
                type: Input
            }], readonly: [{
                type: Input
            }], resizable: [{
                type: HostBinding,
                args: ['class.resizable']
            }, {
                type: Input
            }], maxLength: [{
                type: Input
            }], autoGrow: [{
                type: Input
            }], autoGrowMaxHeight: [{
                type: Input
            }], attributes: [{
                type: Input
            }], characterCounter: [{
                type: Input
            }], printable: [{
                type: Input
            }], charRemainingText: [{
                type: Input
            }], charMaxText: [{
                type: Input
            }], updated: [{
                type: Output
            }], change: [{
                type: Output
            }], oninput: [{
                type: HostListener,
                args: ['input', ['$event', '$event.target']]
            }] } });
//# sourceMappingURL=data:application/json;base64,
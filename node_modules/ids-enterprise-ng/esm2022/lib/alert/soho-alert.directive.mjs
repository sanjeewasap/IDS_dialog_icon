import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the SohoAlert Directive.
 *
 */
export class SohoAlertDirective {
    /** Set or remove the message. */
    set message(message) {
        this._options.message = message;
        if (this.jQueryElement) {
            this.ngZone.runOutsideAngular(() => {
                if (message) {
                    this.jQueryElement?.addMessage(this._options);
                }
                else {
                    this.jQueryElement?.removeMessage(this._options);
                }
            });
        }
    }
    set id(id) {
        this._options.id = id;
    }
    set type(type) {
        this._options.type = type || 'error';
    }
    /** Set message with or without control color */
    set isAlert(isAlert) {
        this._options.isAlert = isAlert || false;
    }
    /** Set message whether to trigger events */
    set triggerEvents(triggerEvents) {
        this._options.triggerEvents = (typeof triggerEvents !== 'boolean') ? true : triggerEvents;
    }
    /** Set message with or without custom icon */
    set icon(icon) {
        this._options.icon = icon;
    }
    /**
     * Returns the data object data-errormessage
     *
     * @deprecated use getMessage() instead
     * @return error
     */
    get errorMessage() {
        return this.getMessage('error');
    }
    constructor(elementRef, ngZone) {
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this._options = {
            inline: true,
            type: 'error'
        };
    }
    /**
     * After the control has been initialised and the view is ready,
     * get the SoHoXi controls to activate any alerts.
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.elementRef.nativeElement);
        });
    }
    // public methods
    /**
     * Adds an inline error message
     *
     * @deprecated use addInlineMessage() instead
     * @param message the error message to add.
     */
    addInlineError(message) {
        this.addInlineMessage(message, 'error');
    }
    /**
     * Adds an inline message of the type specified
     *
     * @param message the message to add.
     * @param type optional - 'error' (default)
     * @param isAlert optional - false (default)
     * @param triggerEvents optional - true (default)
     * @param icon optional
     */
    addInlineMessage(message, type, isAlert, triggerEvents, icon) {
        this.type = type;
        this.isAlert = isAlert;
        this.triggerEvents = triggerEvents;
        this.icon = icon;
        this.message = message;
    }
    /**
     * Gets the message of the type specified
     *
     * @param type optional - 'error' default
     * @return returns the message for the given type.
     */
    getMessage(type) {
        if (this.jQueryElement) {
            this.type = type;
            return this.jQueryElement.getMessage(this._options);
        }
        return '';
    }
    /**
     * Removes the error message
     *
     * @deprecated use removeMessage() instead
     */
    removeError() {
        this.removeMessage('error');
    }
    /**
     * Removes the message of the type specified
     *
     * @param type optional - 'error' (default)
     * @param triggerEvents optional - true (default) triggers events
     */
    removeMessage(type, triggerEvents) {
        this.type = type;
        this.triggerEvents = triggerEvents;
        this.message = '';
    }
    /**
     * Removes the message for all types
     *
     * @param triggerEvents optional - true (default) triggers events
     */
    removeAllMessages(triggerEvents) {
        this.removeMessage('error', triggerEvents);
        this.removeMessage('alert', triggerEvents);
        this.removeMessage('success', triggerEvents);
        this.removeMessage('info', triggerEvents);
        this.removeMessage('icon', triggerEvents);
    }
    /**
     * Scrolls the element into the visible area of the browser window
     *
     * @param alignToTop optional - true (default) element will be aligned to the top of the visible area of the scrollable ancestor
     */
    scrollIntoView(alignToTop) {
        if (this.jQueryElement) {
            this.jQueryElement.scrollIntoView(alignToTop, this._options);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoAlertDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.1.4", type: SohoAlertDirective, selector: "[soho-alert]", inputs: { message: "message", id: "id", type: "type", isAlert: "isAlert", triggerEvents: "triggerEvents", icon: "icon" }, exportAs: ["soho-alert"], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoAlertDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[soho-alert]',
                    exportAs: 'soho-alert'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { message: [{
                type: Input
            }], id: [{
                type: Input
            }], type: [{
                type: Input
            }], isAlert: [{
                type: Input
            }], triggerEvents: [{
                type: Input
            }], icon: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
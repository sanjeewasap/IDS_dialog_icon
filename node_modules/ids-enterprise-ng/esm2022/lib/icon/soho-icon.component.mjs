import { Component, HostBinding, Input, } from '@angular/core';
import * as i0 from "@angular/core";
export class SohoIconUseComponent {
    get href() {
        return '#' + this.icon;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoIconUseComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoIconUseComponent, selector: "use", inputs: { icon: "icon" }, host: { properties: { "attr.href": "this.href" } }, ngImport: i0, template: ``, isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoIconUseComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'use',
                    template: ``
                }]
        }], propDecorators: { href: [{
                type: HostBinding,
                args: ['attr.href']
            }], icon: [{
                type: Input
            }] } });
export class SohoIconComponent {
    /**
     * Extra class that will be placed on the soho-icon element.
     * Useful to set emerald06-color azure10-color to change the icon color.
     */
    set extraIconClass(extraIconClass) {
        this._extraIconClass = extraIconClass;
        this.setExtraIconsClass();
    }
    set alert(alert) {
        this._alert = alert;
        this.setAlertIcon();
    }
    get alert() {
        return this._alert;
    }
    set icon(icon) {
        this._icon = icon ? 'icon-' + icon : '';
        this.setAlertIcon();
    }
    get icon() {
        return this._icon;
    }
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.isIcon = true;
        this.ariaHidden = true;
        this.focusable = false;
        this.role = 'presentation';
        this.isEmptyState = false;
    }
    setAlertIcon() {
        // This allows us to set a dynamic class to the class list
        // w/o overwriting other classes in the class list.
        if (this.alert && this.icon) {
            this.elementRef.nativeElement.classList.add(this.icon);
        }
    }
    setExtraIconsClass() {
        if (this._extraIconClass) {
            this.elementRef.nativeElement.classList.add(this._extraIconClass);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoIconComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoIconComponent, selector: "svg[soho-icon]", inputs: { isEmptyState: "isEmptyState", extraIconClass: "extraIconClass", alert: "alert", icon: "icon" }, host: { properties: { "class.icon": "this.isIcon", "attr.aria-hidden": "this.ariaHidden", "attr.focusable": "this.focusable", "attr.role": "this.role", "class.icon-empty-state": "this.isEmptyState" } }, ngImport: i0, template: `<svg:use [icon]="icon"></svg:use>`, isInline: true, dependencies: [{ kind: "component", type: SohoIconUseComponent, selector: "use", inputs: ["icon"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoIconComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'svg[soho-icon]',
                    template: `<svg:use [icon]="icon"></svg:use>`
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { isIcon: [{
                type: HostBinding,
                args: ['class.icon']
            }], ariaHidden: [{
                type: HostBinding,
                args: ['attr.aria-hidden']
            }], focusable: [{
                type: HostBinding,
                args: ['attr.focusable']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], isEmptyState: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.icon-empty-state']
            }], extraIconClass: [{
                type: Input
            }], alert: [{
                type: Input
            }], icon: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29oby1pY29uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lkcy1lbnRlcnByaXNlLW5nL3NyYy9saWIvaWNvbi9zb2hvLWljb24uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCxTQUFTLEVBRVQsV0FBVyxFQUNYLEtBQUssR0FDTixNQUFNLGVBQWUsQ0FBQzs7QUFNdkIsTUFBTSxPQUFPLG9CQUFvQjtJQUMvQixJQUE4QixJQUFJO1FBQ2hDLE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDekIsQ0FBQzs4R0FIVSxvQkFBb0I7a0dBQXBCLG9CQUFvQix5SEFGckIsRUFBRTs7MkZBRUQsb0JBQW9CO2tCQUpoQyxTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxLQUFLO29CQUNmLFFBQVEsRUFBRSxFQUFFO2lCQUNiOzhCQUUrQixJQUFJO3NCQUFqQyxXQUFXO3VCQUFDLFdBQVc7Z0JBSWYsSUFBSTtzQkFBWixLQUFLOztBQU9SLE1BQU0sT0FBTyxpQkFBaUI7SUFRNUI7OztPQUdHO0lBQ0gsSUFBYSxjQUFjLENBQUMsY0FBc0I7UUFDaEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUM7UUFDdEMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDNUIsQ0FBQztJQUNELElBQWEsS0FBSyxDQUFDLEtBQTBCO1FBQzNDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1FBQ3BCLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBSSxLQUFLO1FBQ1AsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxJQUFhLElBQUksQ0FBQyxJQUF3QjtRQUN4QyxJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3hDLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN0QixDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDO0lBQ3BCLENBQUM7SUFNRCxZQUNVLFVBQXNCO1FBQXRCLGVBQVUsR0FBVixVQUFVLENBQVk7UUFyQ0wsV0FBTSxHQUFHLElBQUksQ0FBQztRQUNSLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFDcEIsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUN2QixTQUFJLEdBQUcsY0FBYyxDQUFDO1FBQ0EsaUJBQVksR0FBRyxLQUFLLENBQUM7SUFrQ2pFLENBQUM7SUFFRyxZQUFZO1FBQ2xCLDBEQUEwRDtRQUMxRCxtREFBbUQ7UUFDbkQsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDM0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDeEQ7SUFDSCxDQUFDO0lBRU8sa0JBQWtCO1FBQ3hCLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUN4QixJQUFJLENBQUMsVUFBVSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUNuRTtJQUNILENBQUM7OEdBdERVLGlCQUFpQjtrR0FBakIsaUJBQWlCLDJXQUZsQixtQ0FBbUMsNERBVmxDLG9CQUFvQjs7MkZBWXBCLGlCQUFpQjtrQkFKN0IsU0FBUzttQkFBQztvQkFDVCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixRQUFRLEVBQUUsbUNBQW1DO2lCQUM5QztpR0FHNEIsTUFBTTtzQkFBaEMsV0FBVzt1QkFBQyxZQUFZO2dCQUNRLFVBQVU7c0JBQTFDLFdBQVc7dUJBQUMsa0JBQWtCO2dCQUNBLFNBQVM7c0JBQXZDLFdBQVc7dUJBQUMsZ0JBQWdCO2dCQUNILElBQUk7c0JBQTdCLFdBQVc7dUJBQUMsV0FBVztnQkFDd0IsWUFBWTtzQkFBM0QsS0FBSzs7c0JBQUksV0FBVzt1QkFBQyx3QkFBd0I7Z0JBTWpDLGNBQWM7c0JBQTFCLEtBQUs7Z0JBSU8sS0FBSztzQkFBakIsS0FBSztnQkFTTyxJQUFJO3NCQUFoQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBFbGVtZW50UmVmLFxuICBIb3N0QmluZGluZyxcbiAgSW5wdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd1c2UnLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gIHRlbXBsYXRlOiBgYFxufSlcbmV4cG9ydCBjbGFzcyBTb2hvSWNvblVzZUNvbXBvbmVudCB7XG4gIEBIb3N0QmluZGluZygnYXR0ci5ocmVmJykgZ2V0IGhyZWYoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gJyMnICsgdGhpcy5pY29uO1xuICB9XG5cbiAgQElucHV0KCkgaWNvbj86IHN0cmluZztcbn1cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnc3ZnW3NvaG8taWNvbl0nLCAgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB0ZW1wbGF0ZTogYDxzdmc6dXNlIFtpY29uXT1cImljb25cIj48L3N2Zzp1c2U+YFxufSlcbmV4cG9ydCBjbGFzcyBTb2hvSWNvbkNvbXBvbmVudCB7XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pY29uJykgaXNJY29uID0gdHJ1ZTtcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLmFyaWEtaGlkZGVuJykgYXJpYUhpZGRlbiA9IHRydWU7XG4gIEBIb3N0QmluZGluZygnYXR0ci5mb2N1c2FibGUnKSBmb2N1c2FibGUgPSBmYWxzZTtcbiAgQEhvc3RCaW5kaW5nKCdhdHRyLnJvbGUnKSByb2xlID0gJ3ByZXNlbnRhdGlvbic7XG4gIEBJbnB1dCgpIEBIb3N0QmluZGluZygnY2xhc3MuaWNvbi1lbXB0eS1zdGF0ZScpIGlzRW1wdHlTdGF0ZSA9IGZhbHNlO1xuXG4gIC8qKlxuICAgKiBFeHRyYSBjbGFzcyB0aGF0IHdpbGwgYmUgcGxhY2VkIG9uIHRoZSBzb2hvLWljb24gZWxlbWVudC5cbiAgICogVXNlZnVsIHRvIHNldCBlbWVyYWxkMDYtY29sb3IgYXp1cmUxMC1jb2xvciB0byBjaGFuZ2UgdGhlIGljb24gY29sb3IuXG4gICAqL1xuICBASW5wdXQoKSBzZXQgZXh0cmFJY29uQ2xhc3MoZXh0cmFJY29uQ2xhc3M6IHN0cmluZykge1xuICAgIHRoaXMuX2V4dHJhSWNvbkNsYXNzID0gZXh0cmFJY29uQ2xhc3M7XG4gICAgdGhpcy5zZXRFeHRyYUljb25zQ2xhc3MoKTtcbiAgfVxuICBASW5wdXQoKSBzZXQgYWxlcnQoYWxlcnQ6IGJvb2xlYW4gfCB1bmRlZmluZWQpIHtcbiAgICB0aGlzLl9hbGVydCA9IGFsZXJ0O1xuICAgIHRoaXMuc2V0QWxlcnRJY29uKCk7XG4gIH1cblxuICBnZXQgYWxlcnQoKTogYm9vbGVhbiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuX2FsZXJ0O1xuICB9XG5cbiAgQElucHV0KCkgc2V0IGljb24oaWNvbjogc3RyaW5nIHwgdW5kZWZpbmVkKSB7XG4gICAgdGhpcy5faWNvbiA9IGljb24gPyAnaWNvbi0nICsgaWNvbiA6ICcnO1xuICAgIHRoaXMuc2V0QWxlcnRJY29uKCk7XG4gIH1cblxuICBnZXQgaWNvbigpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLl9pY29uO1xuICB9XG5cbiAgcHJpdmF0ZSBfYWxlcnQ/OiBib29sZWFuO1xuICBwcml2YXRlIF9pY29uPzogc3RyaW5nO1xuICBwcml2YXRlIF9leHRyYUljb25DbGFzcz86IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsXG4gICkgeyB9XG5cbiAgcHJpdmF0ZSBzZXRBbGVydEljb24oKSB7XG4gICAgLy8gVGhpcyBhbGxvd3MgdXMgdG8gc2V0IGEgZHluYW1pYyBjbGFzcyB0byB0aGUgY2xhc3MgbGlzdFxuICAgIC8vIHcvbyBvdmVyd3JpdGluZyBvdGhlciBjbGFzc2VzIGluIHRoZSBjbGFzcyBsaXN0LlxuICAgIGlmICh0aGlzLmFsZXJ0ICYmIHRoaXMuaWNvbikge1xuICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLmljb24pO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgc2V0RXh0cmFJY29uc0NsYXNzKCkge1xuICAgIGlmICh0aGlzLl9leHRyYUljb25DbGFzcykge1xuICAgICAgdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuY2xhc3NMaXN0LmFkZCh0aGlzLl9leHRyYUljb25DbGFzcyk7XG4gICAgfVxuICB9XG59XG4iXX0=
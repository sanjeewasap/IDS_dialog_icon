import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output, Self, Optional } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
export class SohoColorPickerComponent {
    /**
     * Indicates the color list
     */
    set colors(colors) {
        this.options.colors = colors;
        if (this.colorpicker) {
            this.colorpicker.settings.colors = colors;
            this.markForRefresh();
        }
    }
    /**
     * Enables or disables the control
     */
    set disabled(value) {
        this.isDisabled = value;
        this.options.disabled = value;
        if (this.colorpicker) {
            this.colorpicker.settings.disabled = value;
        }
        if (this.colorpicker) {
            if (value) {
                this.ngZone.runOutsideAngular(() => this.colorpicker.disable());
                this.isDisabled = true;
            }
            else {
                this.ngZone.runOutsideAngular(() => this.colorpicker.enable());
                this.isDisabled = false;
                this.isReadOnly = false;
            }
        }
    }
    get disabled() {
        return this.isDisabled;
    }
    /**
     * Enables or disables editing
     */
    set editable(value) {
        this.isEditable = value;
        this.options.editable = value;
        if (this.colorpicker) {
            this.colorpicker.settings.editable = value;
        }
        if (this.colorpicker) {
            if (value) {
                this.ngZone.runOutsideAngular(() => this.colorpicker.enable());
                this.isEditable = true;
            }
            else {
                this.ngZone.runOutsideAngular(() => this.colorpicker.readonly());
                this.isEditable = false;
            }
        }
    }
    get editable() {
        return this.isEditable;
    }
    /**
     * Enables or disables forces upper case hex.
     */
    set uppercase(value) {
        this.isUppercase = value;
        this.options.uppercase = value;
        if (this.colorpicker) {
            this.colorpicker.settings.uppercase = value;
            this.markForRefresh();
        }
    }
    /**
     * Enables or disables the clear option.
     */
    set clearable(value) {
        this.isClearable = value;
        this.options.clearable = value;
        if (this.colorpicker) {
            this.colorpicker.settings.clearable = value;
            this.markForRefresh();
        }
    }
    /**
     * Enables or disables the clear option.
     */
    set customColors(value) {
        this.hasCustomColor = value;
        this.options.customColors = value;
        if (this.colorpicker) {
            this.colorpicker.settings.customColors = value;
            this.markForRefresh();
        }
    }
    /**
     * Enables or disables the colorOnly option.
     */
    set colorOnly(value) {
        this.isColorOnly = value;
        this.options.colorOnly = value;
        if (this.colorpicker) {
            this.colorpicker.settings.colorOnly = value;
            this.markForRefresh();
        }
    }
    /**
     * Sets the clearableText option.
     */
    set clearableText(value) {
        this.clearableTextString = value;
        this.options.clearableText = value;
        if (this.colorpicker) {
            this.colorpicker.settings.clearableText = value;
            this.markForRefresh();
        }
    }
    /**
     * Add extra attributes like id's to the component
     */
    set attributes(value) {
        this.options.attributes = value;
        if (this.colorpicker) {
            this.colorpicker.settings.attributes = value;
            this.markForRefresh();
        }
    }
    /**
     * Sets the control to readonly
     */
    set readonly(value) {
        this.isReadOnly = value;
        // 4.3.1 did not have this method in time add a safety check it works for future versions
        if (this.colorpicker && this.colorpicker.readonly) {
            if (value) {
                this.ngZone.runOutsideAngular(() => this.colorpicker.readonly());
                this.isReadOnly = true;
            }
            else {
                this.ngZone.runOutsideAngular(() => this.colorpicker.enable());
                this.isDisabled = false;
                this.isReadOnly = false;
            }
        }
    }
    get readonly() {
        return this.isReadOnly;
    }
    /**
     * Sets the control to show color label
     */
    set showLabel(value) {
        this.isShowLabel = value;
        this.options.showLabel = value;
        if (this.colorpicker) {
            this.colorpicker.settings.showLabel = value;
            this.markForRefresh();
        }
    }
    get showLabel() {
        return this.isShowLabel;
    }
    /**
     * Public API
     */
    getLabelValue() {
        return this.colorpicker.getLabelValue();
    }
    getHexValue() {
        return this.colorpicker.getHexValue();
    }
    /**
     * Bind attributes to the host input element
     */
    get isColorpicker() {
        return true;
    }
    /**
     * Creates an instance of SohoColorPickerComponent.
     *
     * @param element the element this component encapsulates.
     * @param ngZone the angualar zone for this component
     * @param ngControl any associated form control (optional)
     *
     */
    constructor(element, ngZone, ngControl, ref) {
        this.element = element;
        this.ngZone = ngZone;
        this.ngControl = ngControl;
        this.ref = ref;
        this.isEditable = undefined;
        this.isUppercase = undefined;
        this.isClearable = undefined;
        this.isDisabled = undefined;
        this.isReadOnly = undefined;
        this.isShowLabel = undefined;
        this.isColorOnly = undefined;
        this.hasCustomColor = undefined;
        this.clearableTextString = '';
        this.options = {
            showLabel: false,
            editable: true,
            uppercase: true,
            colorOnly: false,
            clearable: true,
            customColors: false,
            disabled: false
        };
        /**
         * Called when the colorpicker value changes
         *
         * @todo replace override of native attribute
         */
        // eslint-disable-next-line @angular-eslint/no-output-native, @angular-eslint/no-output-rename
        this.change = new EventEmitter();
        /**
         * Called when the colorpicker updates in some way.
         */
        this.updatedEvent = new EventEmitter();
        // Is the control using a form control and/or ngModel?
        if (this.ngControl) {
            // Wrap the accessor to allow updates to be pushed,
            // but also use the standard accessors provided by angular.
            this.valueAccessor =
                new SohoColorPickerComponentValueAccessorDelegator(// teslint-disable-line
                this.ngControl.valueAccessor, this); // eslint-disable-line
            // ... change the accessor on the control to use ours.
            this.ngControl.valueAccessor = this.valueAccessor;
        }
    }
    ngAfterViewInit() {
        // call outside the angular zone so change detection
        // isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            // assign element to local variable
            this.jQueryElement = jQuery(this.element.nativeElement);
            // initialise the colorpicker control
            this.jQueryElement.colorpicker(this.options);
            // extract the api
            this.colorpicker = this.jQueryElement.data('colorpicker');
            // Add event binding
            this.jQueryElement
                .on('change', (event) => this.onChanged(event));
            this.runUpdatedOnCheck = true;
        });
    }
    ngAfterViewChecked() {
        if (this.runUpdatedOnCheck) {
            this.ngZone.runOutsideAngular(() => {
                // this.disabled = this.isDisabled;
                // We need to update the control AFTER the model
                // has been updated (assuming there is one), so
                // execute updated after angular has generated
                // the model and the view markup.
                setTimeout(() => this.updated());
                this.runUpdatedOnCheck = false;
            });
        }
    }
    /**
     * Event handler for the 'changed' event on the 'colorpicker' component.
     *
     *
     * @param event the standard jQuery event.
     */
    onChanged(event) {
        // Retrieve the value from the 'colorpicker' component.
        const internalValue = this.colorpicker.element.val();
        // Make sure calls to angular are made in the right zone.
        this.ngZone.run(() => {
            // ... update the model (which will fire change
            // detection if required).
            this.colorpicker.setColor(internalValue);
            this.valueAccessor.onChangeFn(internalValue);
            this.change.emit(event);
        });
    }
    /**
     * In case options are being bound asynchronously, you will need to trigger updated on
     * soho colorpicker control so it updates its value labels.
     */
    updated() {
        if (this.colorpicker) {
            // Calling updated when an item is selected, looses the selection!
            this.ngZone.runOutsideAngular(() => this.colorpicker.updated());
        }
        return this;
    }
    onUpdated(event) {
        // Fire the event, in the angular zone.
        this.ngZone.run(() => this.updatedEvent.next(event));
    }
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    ngOnDestroy() {
        if (this.colorpicker) {
            this.colorpicker.destroy();
            this.colorpicker = null;
        }
    }
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh() {
        // Run updated on the next updated check.
        this.runUpdatedOnCheck = true;
        // ... make sure the change detector kicks in, otherwise if the inputs
        // were change programmatially the component may not be eligible for
        // updating.
        this.ref.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoColorPickerComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i1.NgControl, optional: true, self: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoColorPickerComponent, selector: "input[soho-colorpicker]", inputs: { colors: "colors", disabled: "disabled", editable: "editable", uppercase: "uppercase", clearable: "clearable", customColors: "customColors", colorOnly: "colorOnly", clearableText: "clearableText", attributes: "attributes", readonly: "readonly", showLabel: "showLabel" }, outputs: { change: "change", updatedEvent: "updated" }, host: { properties: { "class.colorpicker": "this.isColorpicker" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoColorPickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[soho-colorpicker]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.NgControl, decorators: [{
                    type: Self
                }, {
                    type: Optional
                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { colors: [{
                type: Input
            }], disabled: [{
                type: Input
            }], editable: [{
                type: Input
            }], uppercase: [{
                type: Input
            }], clearable: [{
                type: Input
            }], customColors: [{
                type: Input
            }], colorOnly: [{
                type: Input
            }], clearableText: [{
                type: Input
            }], attributes: [{
                type: Input
            }], readonly: [{
                type: Input
            }], showLabel: [{
                type: Input
            }], change: [{
                type: Output
            }], updatedEvent: [{
                type: Output,
                args: ['updated']
            }], isColorpicker: [{
                type: HostBinding,
                args: ['class.colorpicker']
            }] } });
/**
 * Provides a 'wrapper' around the {ControlValueAccessor} added by
 * angular when handling changing color.s
 *
 * This class allows the {SohoColorPickerComponent} to interoperate with
 * the {ControlValueAccessor}.  Specifically, providing access to the
 * onChange function, which we must call when the value of the colorpicker
 * is modified.
 */
class SohoColorPickerComponentValueAccessorDelegator {
    /**
     * Creates an instance of SohoColorPickerComponentValueAccessorDelegate.
     *
     * @param delegate the value accessor
     * @param colorpicker the colorpicker linked to the accessor
     */
    constructor(delegate, colorpicker) {
        this.delegate = delegate;
        this.colorpicker = colorpicker;
    }
    writeValue(value) {
        // Just pass it on.
        this.delegate.writeValue(value);
        this.colorpicker.markForRefresh();
    }
    registerOnChange(fn) {
        // Keep a reference to the change function, then we an call it.
        this.onChangeFn = fn;
        // Give the delegate a chance to store this too.
        this.delegate.registerOnChange(fn);
    }
    registerOnTouched(fn) {
        this.delegate.registerOnTouched(fn);
    }
    setDisabledState(isDisabled) {
        this.delegate.setDisabledState(isDisabled);
    }
}
//# sourceMappingURL=data:application/json;base64,
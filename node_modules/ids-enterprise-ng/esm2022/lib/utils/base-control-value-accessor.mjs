import { forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export const NOOP = () => { };
/**
 * Base class for new components that need to support NgForms.
 */
export class BaseControlValueAccessor {
    constructor() {
        /** ControlValueAccessor method called when the attached control has changed, */
        this._onChangeCallback = NOOP;
        /** ControlValueAccessor method called when the attached control has touched. */
        this._onTouchedCallback = NOOP;
    }
    /** Gets the value for the control. */
    get internalValue() {
        return this._value;
    }
    /** Sets the value for the control. */
    set internalValue(newValue) {
        if (newValue !== this._value) {
            this._value = newValue;
            this._onChangeCallback(newValue);
        }
    }
    /**
     * When touched.
     */
    touched() {
        this._onTouchedCallback();
    }
    /**
     * -------------------------------------------------
     * ControlValueAccessor implementation
     * -------------------------------------------------
     */
    /**
     * Write a new value to the element.
     */
    writeValue(value) {
        this._value = value;
    }
    /**
     * Set the function to be called when the control receives a change event.
     */
    registerOnChange(fn) {
        this._onChangeCallback = () => {
            fn(this.internalValue);
        };
    }
    /**
     * Set the function to be called when the control receives a touched event.
     */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(_isDisabled) {
    }
}
/**
 * Provider - adds the contol value accessor.
 */
export function provideControlValueAccessor(type) {
    // creates an ngModel accessor to be used in components providers
    return {
        provide: NG_VALUE_ACCESSOR,
        useExisting: forwardRef(() => type),
        multi: true
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jb250cm9sLXZhbHVlLWFjY2Vzc29yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWRzLWVudGVycHJpc2Utbmcvc3JjL2xpYi91dGlscy9iYXNlLWNvbnRyb2wtdmFsdWUtYWNjZXNzb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNMLFVBQVUsRUFDWCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQ0wsaUJBQWlCLEVBRWxCLE1BQU0sZ0JBQWdCLENBQUM7QUFFeEIsTUFBTSxDQUFDLE1BQU0sSUFBSSxHQUFRLEdBQUcsRUFBRSxHQUFFLENBQUMsQ0FBQztBQUVsQzs7R0FFRztBQUNILE1BQU0sT0FBTyx3QkFBd0I7SUFBckM7UUFLRSxnRkFBZ0Y7UUFDdEUsc0JBQWlCLEdBQW1CLElBQUksQ0FBQztRQUVuRCxnRkFBZ0Y7UUFDeEUsdUJBQWtCLEdBQWUsSUFBSSxDQUFDO0lBeURoRCxDQUFDO0lBdkRDLHNDQUFzQztJQUN0QyxJQUFjLGFBQWE7UUFDekIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3JCLENBQUM7SUFFRCxzQ0FBc0M7SUFDdEMsSUFBYyxhQUFhLENBQUMsUUFBdUI7UUFDakQsSUFBSSxRQUFRLEtBQUssSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUM1QixJQUFJLENBQUMsTUFBTSxHQUFHLFFBQVEsQ0FBQztZQUN2QixJQUFJLENBQUMsaUJBQWlCLENBQUUsUUFBZ0IsQ0FBQyxDQUFDO1NBQzNDO0lBQ0gsQ0FBQztJQUVEOztPQUVHO0lBQ08sT0FBTztRQUNmLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRDs7OztPQUlHO0lBRUg7O09BRUc7SUFDSCxVQUFVLENBQUMsS0FBUTtRQUNqQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztJQUN0QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxnQkFBZ0IsQ0FBQyxFQUFrQjtRQUNqQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsR0FBRyxFQUFFO1lBQzVCLEVBQUUsQ0FBRSxJQUFJLENBQUMsYUFBcUIsQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNILGlCQUFpQixDQUFDLEVBQWM7UUFDOUIsSUFBSSxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsZ0JBQWdCLENBQUMsV0FBb0I7SUFDckMsQ0FBQztDQUNGO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsMkJBQTJCLENBQUMsSUFBUztJQUNuRCxpRUFBaUU7SUFDakUsT0FBTztRQUNMLE9BQU8sRUFBRSxpQkFBaUI7UUFDMUIsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUM7UUFDbkMsS0FBSyxFQUFFLElBQUk7S0FDWixDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGZvcndhcmRSZWZcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7XG4gIE5HX1ZBTFVFX0FDQ0VTU09SLFxuICBDb250cm9sVmFsdWVBY2Nlc3NvclxufSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmV4cG9ydCBjb25zdCBOT09QOiBhbnkgPSAoKSA9PiB7fTtcblxuLyoqXG4gKiBCYXNlIGNsYXNzIGZvciBuZXcgY29tcG9uZW50cyB0aGF0IG5lZWQgdG8gc3VwcG9ydCBOZ0Zvcm1zLlxuICovXG5leHBvcnQgY2xhc3MgQmFzZUNvbnRyb2xWYWx1ZUFjY2Vzc29yPFQ+IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuXG4gIC8qKiBDdXJyZW50IHZhbHVlLiAqL1xuICBwcml2YXRlIF92YWx1ZT86IFQ7XG5cbiAgLyoqIENvbnRyb2xWYWx1ZUFjY2Vzc29yIG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgYXR0YWNoZWQgY29udHJvbCBoYXMgY2hhbmdlZCwgKi9cbiAgcHJvdGVjdGVkIF9vbkNoYW5nZUNhbGxiYWNrOiAoXzogVCkgPT4gdm9pZCA9IE5PT1A7XG5cbiAgLyoqIENvbnRyb2xWYWx1ZUFjY2Vzc29yIG1ldGhvZCBjYWxsZWQgd2hlbiB0aGUgYXR0YWNoZWQgY29udHJvbCBoYXMgdG91Y2hlZC4gKi9cbiAgcHJpdmF0ZSBfb25Ub3VjaGVkQ2FsbGJhY2s6ICgpID0+IHZvaWQgPSBOT09QO1xuXG4gIC8qKiBHZXRzIHRoZSB2YWx1ZSBmb3IgdGhlIGNvbnRyb2wuICovXG4gIHByb3RlY3RlZCBnZXQgaW50ZXJuYWxWYWx1ZSgpOiBUIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWU7XG4gIH1cblxuICAvKiogU2V0cyB0aGUgdmFsdWUgZm9yIHRoZSBjb250cm9sLiAqL1xuICBwcm90ZWN0ZWQgc2V0IGludGVybmFsVmFsdWUobmV3VmFsdWU6IFQgfCB1bmRlZmluZWQpIHtcbiAgICBpZiAobmV3VmFsdWUgIT09IHRoaXMuX3ZhbHVlKSB7XG4gICAgICB0aGlzLl92YWx1ZSA9IG5ld1ZhbHVlO1xuICAgICAgdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygobmV3VmFsdWUgYXMgYW55KSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gdG91Y2hlZC5cbiAgICovXG4gIHByb3RlY3RlZCB0b3VjaGVkKCkge1xuICAgIHRoaXMuX29uVG91Y2hlZENhbGxiYWNrKCk7XG4gIH1cblxuICAvKipcbiAgICogLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgKiBDb250cm9sVmFsdWVBY2Nlc3NvciBpbXBsZW1lbnRhdGlvblxuICAgKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAqL1xuXG4gIC8qKlxuICAgKiBXcml0ZSBhIG5ldyB2YWx1ZSB0byB0aGUgZWxlbWVudC5cbiAgICovXG4gIHdyaXRlVmFsdWUodmFsdWU6IFQpIHtcbiAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGNvbnRyb2wgcmVjZWl2ZXMgYSBjaGFuZ2UgZXZlbnQuXG4gICAqL1xuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiAoXzogVCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sgPSAoKSA9PiB7XG4gICAgICBmbigodGhpcy5pbnRlcm5hbFZhbHVlIGFzIGFueSkpO1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBmdW5jdGlvbiB0byBiZSBjYWxsZWQgd2hlbiB0aGUgY29udHJvbCByZWNlaXZlcyBhIHRvdWNoZWQgZXZlbnQuXG4gICAqL1xuICByZWdpc3Rlck9uVG91Y2hlZChmbjogKCkgPT4gdm9pZCk6IHZvaWQge1xuICAgIHRoaXMuX29uVG91Y2hlZENhbGxiYWNrID0gZm47XG4gIH1cblxuICAvKipcbiAgICogVGhpcyBmdW5jdGlvbiBpcyBjYWxsZWQgd2hlbiB0aGUgY29udHJvbCBzdGF0dXMgY2hhbmdlcyB0byBvciBmcm9tIFwiRElTQUJMRURcIi5cbiAgICogRGVwZW5kaW5nIG9uIHRoZSB2YWx1ZSwgaXQgd2lsbCBlbmFibGUgb3IgZGlzYWJsZSB0aGUgYXBwcm9wcmlhdGUgRE9NIGVsZW1lbnQuXG4gICAqL1xuICBzZXREaXNhYmxlZFN0YXRlKF9pc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XG4gIH1cbn1cblxuLyoqXG4gKiBQcm92aWRlciAtIGFkZHMgdGhlIGNvbnRvbCB2YWx1ZSBhY2Nlc3Nvci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3ZpZGVDb250cm9sVmFsdWVBY2Nlc3Nvcih0eXBlOiBhbnkpOiBhbnkge1xuICAvLyBjcmVhdGVzIGFuIG5nTW9kZWwgYWNjZXNzb3IgdG8gYmUgdXNlZCBpbiBjb21wb25lbnRzIHByb3ZpZGVyc1xuICByZXR1cm4ge1xuICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IHR5cGUpLCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgbXVsdGk6IHRydWVcbiAgfTtcbn1cbiJdfQ==
// Static helper class for precondition checking.
export class ArgumentHelper {
    /**
     * Checks the given parameter is not null, throws an exception if not.
     */
    static checkNotNull(parameterName, arg) {
        if (arg === null || arg === undefined) {
            throw new Error(`The parameter/input '${parameterName}' must not be null.`);
        }
    }
    static checkNotEmpty(parameterName, arg) {
        ArgumentHelper.checkNotNull(parameterName, arg);
        if (arg.length === 0) {
            throw new Error(`The parameter/input '${parameterName}' must not be empty.`);
        }
    }
    static checkInputNotNull(parentName, inputName, arg) {
        if (arg === null || arg === undefined) {
            throw new Error(`The @Input('${inputName}') is mandatory on '${parentName}'.`);
        }
    }
    static checkChildNotNull(parentName, childName, arg) {
        if (arg === null || arg === undefined) {
            throw new Error(`The @ViewChild('${childName}') is mandatory on '${parentName}'.`);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJndW1lbnQuaGVscGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWRzLWVudGVycHJpc2Utbmcvc3JjL2xpYi91dGlscy9hcmd1bWVudC5oZWxwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsaURBQWlEO0FBQ2pELE1BQU0sT0FBTyxjQUFjO0lBRXZCOztPQUVHO0lBQ0ksTUFBTSxDQUFDLFlBQVksQ0FBQyxhQUFxQixFQUFFLEdBQVE7UUFDdEQsSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7WUFDbkMsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsYUFBYSxxQkFBcUIsQ0FBQyxDQUFDO1NBQy9FO0lBQ0wsQ0FBQztJQUVNLE1BQU0sQ0FBQyxhQUFhLENBQUMsYUFBcUIsRUFBRSxHQUFXO1FBQzFELGNBQWMsQ0FBQyxZQUFZLENBQUMsYUFBYSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2hELElBQUksR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7WUFDbEIsTUFBTSxJQUFJLEtBQUssQ0FBQyx3QkFBd0IsYUFBYSxzQkFBc0IsQ0FBQyxDQUFDO1NBQ2hGO0lBQ0wsQ0FBQztJQUVNLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxVQUFrQixFQUFFLFNBQWlCLEVBQUUsR0FBUTtRQUMzRSxJQUFJLEdBQUcsS0FBSyxJQUFJLElBQUksR0FBRyxLQUFLLFNBQVMsRUFBRTtZQUNuQyxNQUFNLElBQUksS0FBSyxDQUFDLGVBQWUsU0FBUyx1QkFBdUIsVUFBVSxJQUFJLENBQUMsQ0FBQztTQUNsRjtJQUNMLENBQUM7SUFFTSxNQUFNLENBQUMsaUJBQWlCLENBQUMsVUFBa0IsRUFBRSxTQUFpQixFQUFFLEdBQVE7UUFDM0UsSUFBSSxHQUFHLEtBQUssSUFBSSxJQUFJLEdBQUcsS0FBSyxTQUFTLEVBQUU7WUFDbkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQkFBbUIsU0FBUyx1QkFBdUIsVUFBVSxJQUFJLENBQUMsQ0FBQztTQUN0RjtJQUNMLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFN0YXRpYyBoZWxwZXIgY2xhc3MgZm9yIHByZWNvbmRpdGlvbiBjaGVja2luZy5cbmV4cG9ydCBjbGFzcyBBcmd1bWVudEhlbHBlciAge1xuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHRoZSBnaXZlbiBwYXJhbWV0ZXIgaXMgbm90IG51bGwsIHRocm93cyBhbiBleGNlcHRpb24gaWYgbm90LlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgY2hlY2tOb3ROdWxsKHBhcmFtZXRlck5hbWU6IHN0cmluZywgYXJnOiBhbnkpIHtcbiAgICAgICAgaWYgKGFyZyA9PT0gbnVsbCB8fCBhcmcgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgcGFyYW1ldGVyL2lucHV0ICcke3BhcmFtZXRlck5hbWV9JyBtdXN0IG5vdCBiZSBudWxsLmApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBjaGVja05vdEVtcHR5KHBhcmFtZXRlck5hbWU6IHN0cmluZywgYXJnOiBzdHJpbmcpIHtcbiAgICAgICAgQXJndW1lbnRIZWxwZXIuY2hlY2tOb3ROdWxsKHBhcmFtZXRlck5hbWUsIGFyZyk7XG4gICAgICAgIGlmIChhcmcubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBwYXJhbWV0ZXIvaW5wdXQgJyR7cGFyYW1ldGVyTmFtZX0nIG11c3Qgbm90IGJlIGVtcHR5LmApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBjaGVja0lucHV0Tm90TnVsbChwYXJlbnROYW1lOiBzdHJpbmcsIGlucHV0TmFtZTogc3RyaW5nLCBhcmc6IGFueSkge1xuICAgICAgICBpZiAoYXJnID09PSBudWxsIHx8IGFyZyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBASW5wdXQoJyR7aW5wdXROYW1lfScpIGlzIG1hbmRhdG9yeSBvbiAnJHtwYXJlbnROYW1lfScuYCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGNoZWNrQ2hpbGROb3ROdWxsKHBhcmVudE5hbWU6IHN0cmluZywgY2hpbGROYW1lOiBzdHJpbmcsIGFyZzogYW55KSB7XG4gICAgICAgIGlmIChhcmcgPT09IG51bGwgfHwgYXJnID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIEBWaWV3Q2hpbGQoJyR7Y2hpbGROYW1lfScpIGlzIG1hbmRhdG9yeSBvbiAnJHtwYXJlbnROYW1lfScuYCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=
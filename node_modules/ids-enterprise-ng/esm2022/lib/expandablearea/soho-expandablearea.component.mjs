// tslint:disable-next-line:no-unused-variable
import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, EventEmitter, forwardRef, HostBinding, Input, Output, } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
/**
 * Helper Component for the ExpandableAreaComponent
 */
export class ExpandableHeaderComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: ExpandableHeaderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: ExpandableHeaderComponent, selector: "soho-expandable-header", ngImport: i0, template: `
    <span class="title">
      <ng-content></ng-content>
    </span>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: ExpandableHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'soho-expandable-header',
                    template: `
    <span class="title">
      <ng-content></ng-content>
    </span>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }] });
/**
 * Helper Component for the ExpandableAreaComponent
 */
export class ExpandablePaneComponent {
    constructor() {
        this.fixed = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: ExpandablePaneComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: ExpandablePaneComponent, selector: "soho-expandable-pane", inputs: { fixed: "fixed" }, host: { properties: { "attr.fixed": "this.fixed" } }, ngImport: i0, template: `
    <ng-content></ng-content>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: ExpandablePaneComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'soho-expandable-pane',
                    template: `
    <ng-content></ng-content>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { fixed: [{
                type: HostBinding,
                args: ['attr.fixed']
            }, {
                type: Input
            }] } });
/**
 * Helper Component for the ExpandableAreaComponent
 */
export class ExpandableFooterComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: ExpandableFooterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: ExpandableFooterComponent, selector: "soho-expandable-footer", ngImport: i0, template: `
    <ng-content></ng-content>
  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: ExpandableFooterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'soho-expandable-footer',
                    template: `
    <ng-content></ng-content>
  `,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });
export class ExpandableAreaComponent {
    set disabled(value) {
        this._disabled = value;
        if (this.jQueryElement) {
            if (value) {
                this.disable();
            }
            else {
                this.enable();
            }
        }
    }
    /**
     * Boolean value of the disabled state of the component
     */
    get disabled() {
        return this._disabled;
    }
    set closed(value) {
        this._closed = value;
        if (value && this.jQueryElement) {
            this.close();
        }
    }
    /**
     * Boolean value of the closed state of the component
     */
    get closed() {
        return this._closed;
    }
    constructor(element, changeDetectorRef, ngZone) {
        this.element = element;
        this.changeDetectorRef = changeDetectorRef;
        this.ngZone = ngZone;
        // Get the header DOM element
        this.header = undefined;
        // @ContentChild(forwardRef(() => ExpandablePaneComponent))
        // private _pane: ExpandablePaneComponent = null;
        // Get the pane DOM element
        this.footer = undefined;
        // Add Events for Angular elements to listen to (can only have exposed events)
        this.beforeexpand = new EventEmitter();
        this.beforecollapse = new EventEmitter();
        this.expand = new EventEmitter();
        this.collapse = new EventEmitter();
        this.afterexpand = new EventEmitter();
        this.aftercollapse = new EventEmitter();
        this.hasFixedPane = true;
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            // Assign element to local variable
            this.jQueryElement = jQuery(this.element.nativeElement.children[0]);
            // Attach handler for Open and Close listener
            if (this.toggle) {
                this.toggle.subscribe(value => this.toggleOpen(value));
            }
            // Add listeners to emit events
            this.jQueryElement.on('beforeexpand', (event) => this.onBeforeExpand(event));
            this.jQueryElement.on('beforecollapse', (event) => this.onBeforeCollapse(event));
            this.jQueryElement.on('expand', (event) => this.onExpand(event));
            this.jQueryElement.on('collapse', (event) => this.onCollapse(event));
            this.jQueryElement.on('afterexpand', (event) => this.onAfterExpand(event));
            this.jQueryElement.on('aftercollapse', (event) => this.onAfterCollapse(event));
            // Add listeners to emit events
            // Instantiate the element via jQuery
            this.jQueryElement.expandablearea({
                id: this.id,
                disabled: this.disabled,
                expanded: !this.closed,
            });
            this.expandablearea = this.jQueryElement.data('expandablearea');
            // Check initial values (since constructor doesn't handle it)
            if (this.disabled) {
                this.disable();
            }
            // Be specific so that undefined is not counted
            if (this.closed) {
                this.toggleOpen(false);
            }
            else if (typeof this.closed !== 'undefined') {
                this.toggleOpen(true);
            }
            this.ngZone.run(() => {
                // Ensure we are back in a zone so that the timeout will trigger change detection.
                // This is necessary because hasFixedPane is part of the angular template and
                // hence angular needs to know about it.
                setTimeout(() => {
                    // todo @theo what do you think about this timeout?
                    this.hasFixedPane = this.panes?.filter(pane => pane.fixed).length !== 0;
                    this.changeDetectorRef.markForCheck();
                });
            });
        });
    }
    ngOnDestroy() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.expandablearea) {
                this.expandablearea.destroy();
                this.expandablearea = null;
            }
        });
    }
    /**
     * Calls the expandablearea disable function
     */
    disable() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => this.expandablearea?.disable());
    }
    /**
     * Calls the expandablearea enable function
     */
    enable() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => this.expandablearea?.enable());
    }
    /**
     * Toggles the state of the expandablearea (open or closed) based on the passed
     * parameter.
     */
    toggleOpen(open) {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            this._closed = !open;
            if (open) {
                this.expandablearea?.open();
            }
            else {
                this.expandablearea?.close();
            }
        });
    }
    close() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => this.expandablearea?.close());
    }
    open() {
        // call outside the angular zone so change detection isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => this.expandablearea?.open());
    }
    /**
     * The class setter for the expandable area div element
     */
    get expandableAreaClasses() {
        return 'expandable-area';
    }
    /**
     * The class setter for the header element
     */
    get headerClasses() {
        return 'expandable-header';
    }
    /**
     * The class setter for the pane element
     */
    get paneClasses() {
        return 'expandable-pane';
    }
    /**
     * The class setter for the pane element
     */
    get footerClasses() {
        return 'expandable-footer';
    }
    /**
     * The class setter for the visible pane element
     */
    get visiblePaneClasses() {
        return 'expandable-visible-pane';
    }
    onBeforeExpand(event) {
        // ensure we are back in the angular zone
        this.ngZone.run(() => this.beforeexpand.emit(event));
    }
    onBeforeCollapse(event) {
        // ensure we are back in the angular zone
        this.ngZone.run(() => this.beforecollapse.emit(event));
    }
    onExpand(event) {
        // ensure we are back in the angular zone
        this.ngZone.run(() => this.expand.emit(event));
    }
    onCollapse(event) {
        // ensure we are back in the angular zone
        this.ngZone.run(() => this.collapse.emit(event));
    }
    onAfterExpand(event) {
        // ensure we are back in the angular zone
        this.ngZone.run(() => this.afterexpand.emit(event));
    }
    onAfterCollapse(event) {
        // ensure we are back in the angular zone
        this.ngZone.run(() => this.aftercollapse.emit(event));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: ExpandableAreaComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: ExpandableAreaComponent, selector: "soho-expandable-area", inputs: { id: ["soho-expandable-area", "id"], disabled: "disabled", closed: "closed", toggle: "toggle" }, outputs: { beforeexpand: "beforeexpand", beforecollapse: "beforecollapse", expand: "expand", collapse: "collapse", afterexpand: "afterexpand", aftercollapse: "aftercollapse" }, queries: [{ propertyName: "header", first: true, predicate: i0.forwardRef(function () { return ExpandableHeaderComponent; }), descendants: true, static: true }, { propertyName: "footer", first: true, predicate: i0.forwardRef(function () { return ExpandableFooterComponent; }), descendants: true, static: true }, { propertyName: "panes", predicate: i0.forwardRef(function () { return ExpandablePaneComponent; }) }], ngImport: i0, template: "<div [ngClass]=\"expandableAreaClasses\">\n\n  <div *ngIf=\"header\" [ngClass]=\"headerClasses\">\n    <ng-content select=\"soho-expandable-header\"></ng-content>\n  </div>\n\n  <div *ngIf=\"hasFixedPane\" [ngClass]=\"visiblePaneClasses\">\n    <div class=\"content\">\n      <ng-content select=\"soho-expandable-pane[fixed=true]\"></ng-content>\n    </div>\n  </div>\n\n  <div [ngClass]=\"paneClasses\">\n    <div class=\"content\">\n      <ng-content select=\"soho-expandable-pane\"></ng-content>\n    </div>\n  </div>\n\n  <div *ngIf=\"footer\" [ngClass]=\"footerClasses\">\n    <ng-content select=\"soho-expandable-footer\"></ng-content>\n  </div>\n</div>\n", styles: [""], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: ExpandableAreaComponent, decorators: [{
            type: Component,
            args: [{ selector: 'soho-expandable-area', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div [ngClass]=\"expandableAreaClasses\">\n\n  <div *ngIf=\"header\" [ngClass]=\"headerClasses\">\n    <ng-content select=\"soho-expandable-header\"></ng-content>\n  </div>\n\n  <div *ngIf=\"hasFixedPane\" [ngClass]=\"visiblePaneClasses\">\n    <div class=\"content\">\n      <ng-content select=\"soho-expandable-pane[fixed=true]\"></ng-content>\n    </div>\n  </div>\n\n  <div [ngClass]=\"paneClasses\">\n    <div class=\"content\">\n      <ng-content select=\"soho-expandable-pane\"></ng-content>\n    </div>\n  </div>\n\n  <div *ngIf=\"footer\" [ngClass]=\"footerClasses\">\n    <ng-content select=\"soho-expandable-footer\"></ng-content>\n  </div>\n</div>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }]; }, propDecorators: { id: [{
                type: Input,
                args: ['soho-expandable-area']
            }], disabled: [{
                type: Input
            }], closed: [{
                type: Input
            }], toggle: [{
                type: Input
            }], header: [{
                type: ContentChild,
                args: [forwardRef(() => ExpandableHeaderComponent), { static: true }]
            }], panes: [{
                type: ContentChildren,
                args: [forwardRef(() => ExpandablePaneComponent)]
            }], footer: [{
                type: ContentChild,
                args: [forwardRef(() => ExpandableFooterComponent), { static: true }]
            }], beforeexpand: [{
                type: Output
            }], beforecollapse: [{
                type: Output
            }], expand: [{
                type: Output
            }], collapse: [{
                type: Output
            }], afterexpand: [{
                type: Output
            }], aftercollapse: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,
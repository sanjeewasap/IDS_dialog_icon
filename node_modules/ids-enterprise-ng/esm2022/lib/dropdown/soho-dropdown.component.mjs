import { Component, EventEmitter, HostBinding, Input, Output, Self, Optional, ChangeDetectionStrategy } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
/**
 * Angular wrapper for the `dropdown` widget in the ids-enterprise controls.
 */
export class SohoDropDownComponent {
    /**
     * Used to provide unnamed controls with a unique id.
     */
    static { this.counter = 0; }
    /**
     * Sets the dropdown to close on selecting a value (helpful for multi-select)
     */
    set closeOnSelect(closeOnSelect) {
        this.options.closeOnSelect = closeOnSelect;
        if (this.dropdown) {
            this.dropdown.settings.closeOnSelect = closeOnSelect;
            this.markForRefresh();
        }
    }
    get closeOnSelect() {
        return this.options.closeOnSelect;
    }
    /**
     * Append a css class to the dropdown-list
     */
    set cssClass(cssClass) {
        this.options.cssClass = cssClass;
    }
    get cssClass() {
        return this.options.cssClass;
    }
    /**
     * Typing debounce for search
     */
    set delay(delay) {
        this.options.delay = delay;
    }
    get delay() {
        return this.options.delay;
    }
    /**
     * Sets the icon used as the Dropdown Indicator
     */
    set dropdownIcon(icon) {
        this.options.dropdownIcon = icon;
        if (this.dropdown) {
            this.dropdown.settings.dropdownIcon = icon;
            this.markForRefresh();
        }
    }
    get dropdownIcon() {
        return this.options.dropdownIcon;
    }
    /**
     * Initialize the empty value
     */
    set empty(empty) {
        this.options.empty = empty;
    }
    get empty() {
        return this.options.empty;
    }
    /**
     * Value of the maximum number of selected elements (must have multiple set to true)
     */
    set maxSelected(maxSelected) {
        this.options.maxSelected = maxSelected;
    }
    get maxSelected() {
        return this.options.maxSelected;
    }
    /**
     * Flag to move the selected values to the top of the dropdown
     *
     * @deprecated use moveSelected
     */
    set moveSelectedToTop(moveSelectedToTop) {
        console.warn(`'moveSelectedToTop' has been deprecated, please use 'moveSelected'.`);
        this.options.moveSelectedToTop = moveSelectedToTop; // eslint-disable-line
    }
    get moveSelectedToTop() {
        return this.options.moveSelectedToTop;
    }
    set moveSelected(moveSelected) {
        this.options.moveSelected = moveSelected;
        if (this.dropdown) {
            this.dropdown.settings.moveSelected = moveSelected;
            this.markForRefresh();
        }
    }
    get moveSelected() {
        return this.options.moveSelected;
    }
    set showEmptyGroupHeaders(showEmptyGroupHeaders) {
        this.options.showEmptyGroupHeaders = showEmptyGroupHeaders;
        if (this.dropdown) {
            this.dropdown.settings.showEmptyGroupHeaders = showEmptyGroupHeaders;
            this.markForRefresh();
        }
    }
    get showEmptyGroupHeaders() {
        return this.options.showEmptyGroupHeaders;
    }
    set sourceArguments(sourceArguments) {
        this.options.sourceArguments = sourceArguments;
        if (this.dropdown) {
            this.dropdown.settings.sourceArguments = sourceArguments;
            this.markForRefresh();
        }
    }
    get sourceArguments() {
        return this.options.sourceArguments;
    }
    /**
     * Determines the frequency of reloading data from an external source
     */
    set reload(reload) {
        this.options.reload = reload;
        if (this.dropdown) {
            this.dropdown.settings.reload = reload;
            this.markForRefresh();
        }
    }
    get reload() {
        return this.options.reload;
    }
    /**
     * If set the width of the dropdown is limited to this pixel width.
     * Use 300 for the 300 px size fields. Default is size of the largest data.
     */
    set maxWidth(maxWidth) {
        this.options.maxWidth = maxWidth;
        if (this.dropdown) {
            // @todo this property can not be updated once the control
            // has been initialised.
            this.dropdown.settings.maxWidth = maxWidth;
            this.markForRefresh();
        }
    }
    get maxWidth() {
        return this.options.maxWidth;
    }
    /**
     * Sets the exact width of the open list, by default its the size of the field
     */
    set width(width) {
        this.options.width = width;
        if (this.dropdown) {
            this.dropdown.settings.width = width;
            this.markForRefresh();
        }
    }
    get width() {
        return this.options.width;
    }
    set filterMode(filterMode) {
        this.options.filterMode = filterMode;
        if (this.dropdown) {
            this.dropdown.settings.filterMode = filterMode;
            this.markForRefresh();
        }
    }
    get filterMode() {
        return this.options.filterMode;
    }
    set virtualScroll(virtualScroll) {
        this.options.virtualScroll = virtualScroll;
        if (this.dropdown) {
            this.dropdown.settings.virtualScroll = virtualScroll;
            this.markForRefresh();
        }
    }
    get virtualScroll() {
        return this.options.virtualScroll;
    }
    /**
     * Sets the select element as a multi-select
     */
    set multiple(multiple) {
        this.options.multiple = multiple;
        if (this.dropdown) {
            this.dropdown.settings.multiple = multiple;
            this.markForRefresh();
        }
    }
    get multiple() {
        return this.options.multiple;
    }
    /**
     * Flag to add/remove search functionality from the dropdown
     */
    set noSearch(noSearch) {
        // Assume any value is true to allow the noSearch attribute to be added
        // without a boolean value.
        const value = noSearch !== null && noSearch !== 'false';
        this.options.noSearch = value;
        if (this.dropdown) {
            this.dropdown.settings.noSearch = value;
            this.markForRefresh();
        }
    }
    get noSearch() {
        return this.options.noSearch;
    }
    /**
     * Existent as a helper... should use framework's API to get data and
     * then create and pass to the control to use
     */
    set source(source) {
        this.options.source = source;
    }
    get source() {
        return this.options.source;
    }
    /**
     * Initialize the showSelectAll value for multi-select drop downs
     */
    set showSelectAll(selectAll) {
        this.options.showSelectAll = selectAll;
    }
    get showSelectAll() {
        return this.options.showSelectAll;
    }
    /**
     * Initialize the showTags value for multi-select drop downs
     */
    set showTags(showTags) {
        this.options.showTags = showTags;
    }
    get showTags() {
        return this.options.showTags;
    }
    /**
     * If true, moves the Searchfield in the Dropdown list from directly on top of the pseudo-lement
     * to underneath/above, providing visibility into the currently selected results.
     */
    set showSearchUnderSelected(showSearchUnderSelected) {
        this.options.showSearchUnderSelected = showSearchUnderSelected;
    }
    get showSearchUnderSelected() {
        return this.options.showSearchUnderSelected;
    }
    /**
     * If defined, passes along 'clickHandler' and 'dismissHandler' functions to any Tags
     */
    set tagSettings(tagSettings) {
        this.options.tagSettings = tagSettings;
    }
    get tagSettings() {
        return this.options.tagSettings;
    }
    /**
     * If defined, passes along 'clickHandler' and 'dismissHandler' functions to any Tags
     */
    set allTextString(allTextString) {
        this.options.allTextString = allTextString;
    }
    get allTextString() {
        return this.options.allTextString;
    }
    /**
     * @param appendTo additional classes
     */
    set appendTo(appendTo) {
        this.options.appendTo = appendTo;
    }
    /**Custom text string for `Selected` text header use in MultiSelect */
    set selectedTextString(selectedTextString) {
        this.options.selectedTextString = selectedTextString;
    }
    get selectedTextString() {
        return this.options.tagSettings;
    }
    set attributes(attributes) {
        this.options.attributes = attributes;
    }
    get attributes() {
        return this.options.attributes;
    }
    /**
     * Bind attributes to the host select element
     */
    /**
     * Assign the id for the control
     * (maps to the name to use on a label's 'for' attribute)
     */
    get id() {
        return this.name;
    }
    get isMultiple() {
        return this.options.multiple;
    }
    get isDropdown() {
        return !this.options.multiple;
    }
    get isMultiSelect() {
        return this.options.multiple;
    }
    set readonly(readonly) {
        this.isReadOnly = readonly;
        if (this.dropdown) {
            if (readonly) {
                this.dropdown.readonly();
            }
            else if (readonly === false) {
                this.dropdown.enable();
            }
        }
    }
    get readonly() {
        return this.isReadOnly;
    }
    /**
     * Creates an instance of SohoDropDownComponent.
     *
     * @param element the element this component encapsulates.
     * @param ngZone the angular zone for this component
     * @param ngControl any associated form control (optional)
     * @param ref the change detector reference, must not be null.
     */
    constructor(element, ngZone, ngControl, ref) {
        this.element = element;
        this.ngZone = ngZone;
        this.ngControl = ngControl;
        this.ref = ref;
        /**
         * Default block of options, use the accessors to modify.
         */
        this.options = {
            reload: 'none'
        };
        this.isReadOnly = undefined;
        /**
         * Name for the dropdown control. Necessary for ngModel to function.
         */
        this.name = `soho-dropdown-${SohoDropDownComponent.counter++}`;
        /**
         * Called when the dropdown value changes
         *
         * @todo replace override of native attribute
         */
        // eslint-disable-next-line @angular-eslint/no-output-rename, @angular-eslint/no-output-native
        this.change$ = new EventEmitter();
        /**
         * Called when the dropdown updates in some way.
         */
        // eslint-disable-next-line @angular-eslint/no-output-rename
        this.updated$ = new EventEmitter();
        /**
         * Fired when the dropdown list is closed.
         */
        // eslint-disable-next-line @angular-eslint/no-output-rename
        this.listClosed$ = new EventEmitter();
        /**
         * Fired when the dropdown list is opened.
         */
        // eslint-disable-next-line @angular-eslint/no-output-rename
        this.listOpened$ = new EventEmitter();
        /**
         * This event is fired when a key is pressed
         */
        // eslint-disable-next-line @angular-eslint/no-output-rename, @angular-eslint/no-output-native
        this.keydown$ = new EventEmitter();
        // Is the control using a form control and/or ngModel?
        if (this.ngControl) {
            // Wrap the accessor to allow updates to be pushed,
            // but also use the standard accessors provided by angular.
            this.valueAccessor =
                new SohoDropDownControlValueAccessorDelegator(this.ngControl.valueAccessor, this);
            // ... change the accessor on the control to use ours.
            this.ngControl.valueAccessor = this.valueAccessor;
        }
    }
    ngAfterViewInit() {
        // call outside the angular zone so change detection
        // isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            // assign element to local variable
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.options.onKeyDown = (e) => this.ngZone.run(() => this.keydown$.next(e));
            // initialise the dropdown control
            this.jQueryElement.dropdown(this.options);
            // extract the api
            this.dropdown = this.jQueryElement.data('dropdown');
            // @todo - add event binding control so we don't bind if not required.
            this.jQueryElement
                .on('change', (event) => this.onChanged(event))
                .on('updated', (event) => this.onUpdated(event))
                .on('requestend', (event, searchTerm, data) => this.onRequestEnd(event, searchTerm, data))
                .on('listclosed', (event, action) => this.onListClosed(event, action))
                .on('listopened', (event) => this.onListOpened(event));
            this.runUpdatedOnCheck = true;
        });
    }
    ngAfterViewChecked() {
        if (this.runUpdatedOnCheck) {
            this.ngZone.runOutsideAngular(() => {
                // We need to update the control AFTER the model
                // has been updated (assuming there is one), so
                // execute updated after angular has generated
                // the model and the view markup.
                setTimeout(() => this.updated());
                if (this.readonly) {
                    this.dropdown?.readonly();
                }
                else if (this.readonly === false) {
                    this.dropdown?.enable();
                }
                this.runUpdatedOnCheck = false;
            });
        }
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                // remove the event listeners on this element.
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            // Destroy any widget resources.
            this.dropdown?.destroy();
            this.dropdown = null;
        });
    }
    /**
     * Event handler for the 'requestend' event on the dropdown 'component'.
     *
     *
     * @param event the standard jQuery event.
     * @param data any data passed by the dropdown (todo the type)
     *
     */
    onRequestEnd(_event, _searchTerm, _data) {
        // When the request for data has completed, make sure we
        // update the 'dropdown' control.
        this.ngZone.run(() => {
            this.ref.markForCheck();
        });
    }
    onUpdated(event) {
        // Fire the event, in the angular zone.
        this.ngZone.run(() => this.updated$.next(event));
    }
    /**
     * Event handler for the 'changed' event on the 'dropdown' component.
     *
     *
     * @param event the standard jQuery event.
     *
     */
    onChanged(event) {
        // Retrieve the value from the 'dropdown' component.
        const val = this.jQueryElement?.val();
        this.ngZone.run(() => {
            // This value needs to be converted into an options value, which is
            // generated by the {SelectControlValueAccessor}.
            if (this.valueAccessor) {
                const optionValue = this.valueAccessor.convertToOptionValue(val);
                // Make sure calls to angular are made in the right zone.
                // ... update the model (which will fire change
                // detection if required).
                if (this.valueAccessor && this.valueAccessor.onChangeFn) {
                    this.valueAccessor.onChangeFn(optionValue);
                }
            }
            // @todo - this wants to be the real value, so we may need to look
            // that up.
            event.data = val;
            this.change$.emit(event);
        });
    }
    /**
     * Handles the 'listopened' event triggered by the underlying jQuery control.
     *
     * @param event the fired event.
     */
    onListOpened(event) {
        this.ngZone.run(() => {
            this.listOpened$.emit(event);
        });
    }
    /**
     * Handles the 'listclosed' event triggered by the underlying jQuery control.
     *
     * @param event the fired event.
     */
    onListClosed(event, action) {
        this.ngZone.run(() => {
            // Make sure the event is fixed up for dispatch
            event.action = action;
            this.listClosed$.emit(event);
        });
    }
    /**
     * In case options are being bound asynchronously, you will need to trigger updated on
     * soho dropdown control so it updates its value labels.
     */
    updated() {
        if (this.dropdown) {
            // Calling updated when an item is selected, loses the selection!
            this.ngZone.runOutsideAngular(() => this.dropdown?.updated());
        }
        return this;
    }
    // -------------------------------------------
    // Component Input
    // -------------------------------------------
    set disabled(value) {
        if (this.dropdown) {
            if (value) {
                this.ngZone.runOutsideAngular(() => this.dropdown?.disable());
            }
            else {
                this.ngZone.runOutsideAngular(() => this.dropdown?.enable());
            }
        }
    }
    /**
     * @description
     *
     * Soho-dropdown is not a native element - need this to set focus programmatically.
     * 'name' attribute must be set on the control for this to work correctly.
     */
    setFocus() {
        if (this.jQueryElement) {
            this.ngZone.runOutsideAngular(() => {
                this.jQueryElement?.trigger('activated');
            });
        }
    }
    /**
     * @description
     *
     * Sets the value of the dropdown.
     *
     * @todo this may need to involve mapping from actual value
     * if ngModel is used.
     *
     * This is the model value that is to be set.
     * @param value - the internal value to select
     */
    selectValue(value) {
        if (this.dropdown) {
            this.ngZone.runOutsideAngular(() => {
                this.dropdown?.selectValue(value);
            });
        }
    }
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh() {
        // Run updated on the next updated check.
        this.runUpdatedOnCheck = true;
        // ... make sure the change detector kicks in, otherwise if the inputs
        // were change programmatially the component may not be eligible for
        // updating.
        this.ref.markForCheck();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoDropDownComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i1.NgControl, optional: true, self: true }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoDropDownComponent, selector: "select[soho-dropdown]", inputs: { closeOnSelect: "closeOnSelect", cssClass: "cssClass", delay: "delay", dropdownIcon: "dropdownIcon", empty: "empty", maxSelected: "maxSelected", moveSelectedToTop: "moveSelectedToTop", moveSelected: "moveSelected", showEmptyGroupHeaders: "showEmptyGroupHeaders", sourceArguments: "sourceArguments", reload: "reload", maxWidth: "maxWidth", width: "width", filterMode: "filterMode", virtualScroll: "virtualScroll", multiple: "multiple", name: "name", noSearch: "noSearch", source: "source", showSelectAll: "showSelectAll", showTags: "showTags", showSearchUnderSelected: "showSearchUnderSelected", tagSettings: "tagSettings", allTextString: "allTextString", appendTo: "appendTo", selectedTextString: "selectedTextString", attributes: "attributes", readonly: "readonly", disabled: "disabled" }, outputs: { change$: "change", updated$: "updated", listClosed$: "listclosed", listOpened$: "listopened", keydown$: "keydown" }, host: { properties: { "id": "this.id", "attr.multiple": "this.isMultiple", "class.dropdown": "this.isDropdown", "class.multiselect": "this.isMultiSelect" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoDropDownComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'select[soho-dropdown]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.NgControl, decorators: [{
                    type: Self
                }, {
                    type: Optional
                }] }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { closeOnSelect: [{
                type: Input
            }], cssClass: [{
                type: Input
            }], delay: [{
                type: Input
            }], dropdownIcon: [{
                type: Input
            }], empty: [{
                type: Input
            }], maxSelected: [{
                type: Input
            }], moveSelectedToTop: [{
                type: Input
            }], moveSelected: [{
                type: Input
            }], showEmptyGroupHeaders: [{
                type: Input
            }], sourceArguments: [{
                type: Input
            }], reload: [{
                type: Input
            }], maxWidth: [{
                type: Input
            }], width: [{
                type: Input
            }], filterMode: [{
                type: Input
            }], virtualScroll: [{
                type: Input
            }], multiple: [{
                type: Input
            }], name: [{
                type: Input
            }], noSearch: [{
                type: Input
            }], source: [{
                type: Input
            }], showSelectAll: [{
                type: Input
            }], showTags: [{
                type: Input
            }], showSearchUnderSelected: [{
                type: Input
            }], tagSettings: [{
                type: Input
            }], allTextString: [{
                type: Input
            }], appendTo: [{
                type: Input
            }], selectedTextString: [{
                type: Input
            }], attributes: [{
                type: Input
            }], change$: [{
                type: Output,
                args: ['change']
            }], updated$: [{
                type: Output,
                args: ['updated']
            }], listClosed$: [{
                type: Output,
                args: ['listclosed']
            }], listOpened$: [{
                type: Output,
                args: ['listopened']
            }], keydown$: [{
                type: Output,
                args: ['keydown']
            }], id: [{
                type: HostBinding,
                args: ['id']
            }], isMultiple: [{
                type: HostBinding,
                args: ['attr.multiple']
            }], isDropdown: [{
                type: HostBinding,
                args: ['class.dropdown']
            }], isMultiSelect: [{
                type: HostBinding,
                args: ['class.multiselect']
            }], readonly: [{
                type: Input
            }], disabled: [{
                type: Input
            }] } });
/**
 * Provides a 'wrapper' around the {ControlValueAccessor} added by
 * angular when handling `select` elements.
 *
 * This class allows the {SohoDropDownComponent} to interoperate with
 * the {ControlValueAccessor}.  Specifically, providing access to the
 * onChange function, which we must call when the value of the dropdown
 * is modified.
 *
 * It also exposes the encoding used storing complex objects as
 * values in the 'option' elements.
 *
 * See https://github.com/angular/angular/blob/master/packages/forms/src/directives/select_multiple_control_value_accessor.ts.
 *
 *
 *
 */
class SohoDropDownControlValueAccessorDelegator {
    /**
     * Creates an instance of SohoDropDownControlValueAccessorDelegate.
     *
     * @param delegate the value accessor
     * @param dropdown the dropdown linked to the accessor
     *
     */
    constructor(delegate, dropdown) {
        this.delegate = delegate;
        this.dropdown = dropdown;
    }
    writeValue(value) {
        // Just pass it on.
        this.delegate.writeValue(value);
        // @todo reduce the number of calls to this!
        this.dropdown.markForRefresh();
    }
    registerOnChange(fn) {
        // Keep a reference to the change function, then we an call it.
        this.onChangeFn = fn;
        // Give the delegate a chance to store this too.
        this.delegate.registerOnChange(fn);
    }
    registerOnTouched(fn) {
        this.delegate.registerOnTouched(fn);
    }
    /**
     * Update the jQuery widget with the request disabled state.
     *
     * @param isDisabled true if the control should be disabled; otherwise false.
     *
     */
    setDisabledState(isDisabled) {
        this.dropdown.disabled = isDisabled;
        if (this.delegate.setDisabledState) {
            this.delegate.setDisabledState(isDisabled);
        }
    }
    /**
     * Convert the 'real' value into the corresponding
     * option value.
     *
     *
     * @param value the value of the option; must not be null.
     * @returns the string optipnValue of the otion elemen.
     *
     */
    convertToOptionValue(value) {
        const delegate = this.delegate;
        const id = delegate._getOptionId(value);
        return this.buildValueString(id, value);
    }
    /**
     * Copy of the "valuestring" builder used by the Angular
     * Select and MultiSelect
     *
     * @param id option id (ordinal)
     * @param value the actual value
     */
    buildValueString(id, value) {
        if (id == null) {
            return '' + value;
        }
        if (typeof value === 'string') {
            value = '\'' + value + '\'';
        }
        if (value && typeof value === 'object') {
            value = 'Object';
        }
        return (id + ': ' + value).slice(0, 50);
    }
}
//# sourceMappingURL=data:application/json;base64,
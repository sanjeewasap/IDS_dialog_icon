import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { BaseControlValueAccessor, provideControlValueAccessor } from '../utils/base-control-value-accessor';
import * as i0 from "@angular/core";
export class SohoDatePickerComponent extends BaseControlValueAccessor {
    /**
     * Indicates to display the timepicker; defaults to false.
     */
    set showTime(showTime) {
        this._options.showTime = showTime;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * If true current time will be used for the time portion otherwise 12:00 midnight is used.
     */
    set useCurrentTime(useCurrentTime) {
        this._options.useCurrentTime = useCurrentTime;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Indicates the pattern for the time format.
     */
    set timeFormat(timeFormat) {
        this._options.timeFormat = timeFormat;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * An integer from 1 to 60; multiples of this value are displayed as options in the minutes dropdown.
     */
    set minuteInterval(minuteInterval) {
        this._options.minuteInterval = minuteInterval;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * An integer from 1 to 60; multiples of this value are displayed as options in the seconds dropdown.
     */
    set secondInterval(secondInterval) {
        this._options.secondInterval = secondInterval;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Change the datepickers first day of the week.
     * An integer from 0 - 6 where 0 = Sunday, 1 = Monday, etc...
     */
    set firstDayOfWeek(firstDayOfWeek) {
        this._options.firstDayOfWeek = firstDayOfWeek;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * If true the field will be sized to the width of the date.
     */
    set autoSize(autoSize) {
        this._options.autoSize = autoSize;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Show the today button on the header.
     */
    set showToday(showToday) {
        this._options.showToday = showToday;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /** Add extra attributes like id's to the component **/
    set attributes(attributes) {
        this._options.attributes = attributes;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Indicates mode, either 'standard' or 'range'.
     */
    set mode(mode) {
        this._options.mode = mode;
        if (mode === 'range') {
            if (this._options.range) {
                this._options.range.useRange = true;
            }
            else {
                this._options.range = {};
                this._options.range.useRange = true;
            }
        }
        else {
            if (this._options.range) {
                this._options.range.useRange = false;
            }
        }
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Use range of two dates options.
     */
    set range(range) {
        this._options.range = range;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * If a non-matching minutes value is entered, will round the minutes value to the nearest interval on the blur event.
     */
    set roundToInterval(roundToInterval) {
        this._options.roundToInterval = roundToInterval;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Indicates the pattern for the date format or the value of 'locale'.
     */
    set dateFormat(dateFormat) {
        this._options.dateFormat = dateFormat;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Indicates a placeholder for an empty value; defaults to false.
     */
    set placeholder(placeholder) {
        this._options.placeholder = placeholder;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Indicates an object containing a date or range of dates that are enabled or disabled.
     */
    set disable(disable) {
        this._options.disable = disable;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Indicates a legend is shown to associate dates
     */
    set showLegend(showLegend) {
        this._options.showLegend = showLegend;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Indicates if the month and year will render as dropdowns.
     */
    set showMonthYearPicker(showMonthYearPicker) {
        this._options.showMonthYearPicker = showMonthYearPicker;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Indicates if the month and year will render as dropdowns.
     */
    set showWeekNumber(showWeekNumber) {
        this._options.showWeekNumber = showWeekNumber;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Indicates if the days portion of the calendar will be hidden.
     */
    set hideDays(hideDays) {
        this._options.hideDays = hideDays;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * The number of years ahead to show in the month/year picker should total 9 with yearsBack.
     */
    set yearsAhead(yearsAhead) {
        this._options.yearsAhead = yearsAhead;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * The number of years back to show in the month/year picker should total 9 with yearsAhead.
     */
    set yearsBack(yearsBack) {
        this._options.yearsBack = yearsBack;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Options for how the legend displays
     */
    set legend(legend) {
        this._options.legend = legend;
        if (this.datepicker) {
            this.datepicker.settings.legend = legend;
            this.updateLegend = true;
            this.ref.markForCheck();
        }
    }
    /**
     * The name of the locale to use for this instance. If not set, the current locale will be used.
     */
    set locale(locale) {
        this._options.locale = locale;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Calendar's name. Currently just 'gregorian' or 'islamic-umalqura'
     */
    set calendarName(calendarName) {
        this._options.calendarName = calendarName;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Indicates if the dates will use UTC format
     */
    set useUTC(useUTC) {
        this._options.useUTC = useUTC;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Set the input to tabbable
     */
    set tabbable(tabbable) {
        this._options.tabbable = tabbable;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    /**
     * Set the input to allow increment/decrement using keyboard
     */
    set incrementWithKeyboard(incrementWithKeyboard) {
        this._options.incrementWithKeyboard = incrementWithKeyboard;
        if (this.datepicker) {
            this.datepicker.settings.incrementWithKeyboard = incrementWithKeyboard;
            this.markForRefresh();
        }
    }
    /**
     * Set the input to allow today using keyboard
     */
    set todayWithKeyboard(todayWithKeyboard) {
        this._options.todayWithKeyboard = todayWithKeyboard;
        if (this.datepicker) {
            this.datepicker.settings.todayWithKeyboard = todayWithKeyboard;
            this.markForRefresh();
        }
    }
    /**
     * Sets the options for the date picker
     */
    set options(options) {
        this._options = options;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    set validation(validation) {
        this._validation = validation;
        if (this.datepicker) {
            this.markForRefresh();
        }
    }
    get options() {
        return this._options;
    }
    /**
     * Enables or disables the control
     */
    set disabled(value) {
        // Avoid setting the value if not required,
        // this causes issue on component initialisation
        // as enable() is called by both disabled()
        // and readonly().
        if (this.datepicker == null) {
            this.isDisabled = value;
            return;
        }
        // Set the status locally (for refreshing)
        this.isDisabled = value;
        if (value) {
            this.ngZone.runOutsideAngular(() => {
                this.datepicker?.disable();
            });
        }
        else {
            this.ngZone.runOutsideAngular(() => {
                if (this.readonly === null || this.readonly === undefined) {
                    this.datepicker?.enable();
                    this.isReadOnly = false;
                }
            });
        }
    }
    get disabled() {
        return this.isDisabled;
    }
    /**
     * Sets the control to readonly
     */
    set readonly(value) {
        // Avoid setting the value if not required,
        // this causes issue on component initialisation
        // as enable() is called by both disabled()
        // and readonly().
        if (this.datepicker == null) {
            this.isReadOnly = value;
            return;
        }
        // Set the status locally (for refreshing)
        this.isReadOnly = value;
        if (value) {
            this.ngZone.runOutsideAngular(() => this.datepicker?.readonly());
        }
        else {
            this.ngZone.runOutsideAngular(() => {
                this.datepicker?.enable();
                this.isDisabled = false;
            });
        }
    }
    get readonly() {
        return this.isReadOnly;
    }
    /**
     * Public API
     */
    setValue(value, trigger, isTime) {
        this.datepicker?.setValue(value, trigger, isTime);
    }
    getValue(asDate = false) {
        if (asDate && (typeof this.internalValue === 'string')) {
            const calendar = Soho.Locale.calendar();
            const dateFormat = this._options.dateFormat || calendar.dateFormat.short;
            const timeFormat = this._options.timeFormat || calendar.timeFormat;
            let format = dateFormat;
            if (this._options.showTime) {
                format += 'T' + timeFormat;
            }
            return Soho.Locale.parseDate(this.internalValue || '', format);
        }
        return this.internalValue || '';
    }
    focus() {
        if (this.datepicker) {
            this.datepicker.element.trigger('focus');
        }
    }
    openCalendar() {
        this.datepicker?.openCalendar();
    }
    /**
     * Bind attributes to the host input element
     */
    get isDatepicker() {
        return true;
    }
    get isTimepicker() {
        return !!this._options.showTime;
    }
    /**
     * Creates an instance of SohoDatePickerComponent.
     *
     * @param element the element this component encapsulates.
     * @param ngZone the angular zone for this component.
     * @param ref reference to the change detector
     */
    constructor(element, ngZone, ref) {
        super();
        this.element = element;
        this.ngZone = ngZone;
        this.ref = ref;
        this.isDisabled = undefined;
        this.isReadOnly = undefined;
        this._options = {};
        this.updateLegend = false;
        this._validation = null;
        /**
         * Called when the datepicker value changes
         *
         * @todo replace override of native attribute
         */
        // eslint-disable-next-line @angular-eslint/no-output-rename, @angular-eslint/no-output-native
        this.change = new EventEmitter();
        /**
         * Called when the datepicker is closed.
         */
        this.listclosed = new EventEmitter();
        /**
         * Called when the datepicker is opened.
         */
        this.listopened = new EventEmitter();
        /**
         * Called before a month will be rendered in the datepicker
         */
        this.beforemonthrendered = new EventEmitter();
        /**
         * Called after a month has been rendered in the datepicker
         */
        this.monthrendered = new EventEmitter();
    }
    ngAfterViewInit() {
        // call outside the angular zone so change detection
        // isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            // assign element to local variable
            this.jQueryElement = jQuery(this.element.nativeElement);
            // initialise the colorpicker control
            this.jQueryElement.datepicker(this._options);
            // extract the api
            this.datepicker = this.jQueryElement.data('datepicker');
            /**
             * Bind to jQueryElement's events
             */
            this.jQueryElement
                .on('change', (args) => this.onChange(args))
                .on('listclosed', () => this.onListClosed())
                .on('listopened', () => this.onListOpened())
                .on('beforemonthrendered', () => this.onBeforeMonthRendered())
                .on('monthrendered', (e, args) => this.onMonthRendered(args));
            if (this.internalValue) {
                this.datepicker?.setValue(this.internalValue, false);
            }
            this.runUpdatedOnCheck = true;
        });
    }
    ngAfterViewChecked() {
        if (this.updateLegend && this.datepicker?.isOpen()) {
            this.datepicker.loadLegend(this._options.legend);
            this.updateLegend = false;
        }
        if (this._validation) {
            // @ts-ignore
            Soho.Validation.rules[this._validation.validator.id] = this._validation.validator;
            this.datepicker?.element.attr({ 'data-validate': this._validation.validator.id });
            this.datepicker?.element.attr({ 'data-validation-events': { [this._validation.validator.id]: this._validation.validatorEvents } });
        }
        if (this.runUpdatedOnCheck) {
            // Ensure the enabled/disabled flags are set.
            if (this.isDisabled !== null && this.isDisabled !== undefined) {
                this.disabled = this.isDisabled;
            }
            if (this.isReadOnly !== null && this.isReadOnly !== undefined) {
                this.readonly = this.isReadOnly;
            }
            this.ngZone.runOutsideAngular(() => {
                // We need to update the control AFTER the model
                // has been updated (assuming there is one), so
                // execute updated after angular has generated
                // the model and the view markup.
                if (this.datepicker) {
                    this.datepicker.updated(this._options);
                }
                this.runUpdatedOnCheck = false;
            });
        }
    }
    /**
     * Handle the control being changed.
     */
    onChange(event) {
        this.internalValue = this.datepicker?.element.val();
        // Set the date on the event.
        event.data = this.internalValue;
        // When the request for data has completed, make sure we
        // update the 'dropdown' control.
        this.ngZone.run(() => {
            // Fire the event
            this.change.emit(event);
        });
    }
    /**
     * Override writeValue to allow the date picker
     * element to be updated correctly.
     *
     * @param value - the new value
     */
    writeValue(value) {
        super.writeValue(value);
        if (this.datepicker) {
            // The processing is required to ensure we use the correct format
            // in the control.
            if (typeof value === 'string' && value.length > 0 && this._options.range?.useRange) {
                const dates = value.split('-');
                const startValue = Soho.Locale.parseDate(dates[0].trim()) || Soho.Locale.parseDate(dates[0].trim(), { pattern: this._options?.dateFormat });
                const endValue = Soho.Locale.parseDate(dates[1].trim()) || Soho.Locale.parseDate(dates[1].trim(), { pattern: this._options?.dateFormat });
                this.datepicker.settings.range.start = startValue;
                this.datepicker.settings.range.end = endValue;
                this.datepicker.setValue(startValue, false);
            }
            else {
                this.datepicker.setValue(value, false);
            }
        }
    }
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            if (this.datepicker) {
                this.datepicker.destroy();
                this.datepicker = null;
            }
        });
    }
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh() {
        // Run updated on the next updated check.
        this.runUpdatedOnCheck = true;
        // ... make sure the change detector kicks in, otherwise if the inputs
        // were change programmatially the component may not be eligible for
        // updating.
        this.ref.markForCheck();
    }
    onListClosed() {
        this.ngZone.run(() => {
            this.listclosed.emit();
        });
    }
    onListOpened() {
        this.ngZone.run(() => {
            this.listopened.emit();
        });
    }
    onBeforeMonthRendered() {
        this.ngZone.run(() => {
            this.beforemonthrendered.emit();
        });
    }
    onMonthRendered(args) {
        this.ngZone.run(() => {
            this.monthrendered.emit(args);
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoDatePickerComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoDatePickerComponent, selector: "input[soho-datepicker]", inputs: { showTime: "showTime", useCurrentTime: "useCurrentTime", timeFormat: "timeFormat", minuteInterval: "minuteInterval", secondInterval: "secondInterval", firstDayOfWeek: "firstDayOfWeek", autoSize: "autoSize", showToday: "showToday", attributes: "attributes", mode: "mode", range: "range", roundToInterval: "roundToInterval", dateFormat: "dateFormat", placeholder: "placeholder", disable: "disable", showLegend: "showLegend", showMonthYearPicker: "showMonthYearPicker", showWeekNumber: "showWeekNumber", hideDays: "hideDays", yearsAhead: "yearsAhead", yearsBack: "yearsBack", legend: "legend", locale: "locale", calendarName: "calendarName", useUTC: "useUTC", tabbable: "tabbable", incrementWithKeyboard: "incrementWithKeyboard", todayWithKeyboard: "todayWithKeyboard", options: "options", validation: "validation", disabled: "disabled", readonly: "readonly" }, outputs: { change: "change", listclosed: "listclosed", listopened: "listopened", beforemonthrendered: "beforemonthrendered", monthrendered: "monthrendered" }, host: { properties: { "class.datepicker": "this.isDatepicker", "class.timepicker": "this.isTimepicker" } }, providers: [provideControlValueAccessor(SohoDatePickerComponent)], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoDatePickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[soho-datepicker]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [provideControlValueAccessor(SohoDatePickerComponent)]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { showTime: [{
                type: Input
            }], useCurrentTime: [{
                type: Input
            }], timeFormat: [{
                type: Input
            }], minuteInterval: [{
                type: Input
            }], secondInterval: [{
                type: Input
            }], firstDayOfWeek: [{
                type: Input
            }], autoSize: [{
                type: Input
            }], showToday: [{
                type: Input
            }], attributes: [{
                type: Input
            }], mode: [{
                type: Input
            }], range: [{
                type: Input
            }], roundToInterval: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], disable: [{
                type: Input
            }], showLegend: [{
                type: Input
            }], showMonthYearPicker: [{
                type: Input
            }], showWeekNumber: [{
                type: Input
            }], hideDays: [{
                type: Input
            }], yearsAhead: [{
                type: Input
            }], yearsBack: [{
                type: Input
            }], legend: [{
                type: Input
            }], locale: [{
                type: Input
            }], calendarName: [{
                type: Input
            }], useUTC: [{
                type: Input
            }], tabbable: [{
                type: Input
            }], incrementWithKeyboard: [{
                type: Input
            }], todayWithKeyboard: [{
                type: Input
            }], options: [{
                type: Input
            }], validation: [{
                type: Input
            }], disabled: [{
                type: Input
            }], readonly: [{
                type: Input
            }], change: [{
                type: Output
            }], listclosed: [{
                type: Output
            }], listopened: [{
                type: Output
            }], beforemonthrendered: [{
                type: Output
            }], monthrendered: [{
                type: Output
            }], isDatepicker: [{
                type: HostBinding,
                args: ['class.datepicker']
            }], isTimepicker: [{
                type: HostBinding,
                args: ['class.timepicker']
            }] } });
//# sourceMappingURL=data:application/json;base64,
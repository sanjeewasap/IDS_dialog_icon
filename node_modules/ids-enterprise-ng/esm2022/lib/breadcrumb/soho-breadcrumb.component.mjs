import { ChangeDetectionStrategy, Component, HostBinding, Input, } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Soho Breadcrumb Component
 */
export class SohoBreadcrumbComponent {
    get isBreadcrumb() {
        return true;
    }
    /** Allow Breadcrumb Definition by Input */
    set breadcrumbs(items) {
        this.options.breadcrumbs = items;
        this.updated();
    }
    get breadcrumbs() {
        return this.options.breadcrumbs;
    }
    /** Allow change to alternate styling via Input **/
    set alternate(val) {
        this.options.style = val ? 'alternate' : 'default';
        this.updated();
    }
    get alternate() {
        return this.options.style === 'alternate';
    }
    /** Add truncatling behavior when a lot of items */
    set truncate(truncate) {
        this.options.truncate = truncate;
        this.updated();
    }
    get truncate() {
        return this.options.truncate;
    }
    /** Add extra attributes like id's to the component **/
    set attributes(attributes) {
        this.options.attributes = attributes;
        this.updated();
    }
    get attributes() {
        return this.options.attributes;
    }
    /** Provides access to the internal array of currently-invoked IDS Breadcrumb APIs */
    get breadcrumbAPIs() {
        if (!this.breadcrumbAPI) {
            return [];
        }
        return this.breadcrumbAPI.breadcrumbs;
    }
    /** Provides access to the IDS Breadcrumb's disabled property */
    get disabled() {
        return this.breadcrumbAPI?.disabled;
    }
    /**
     * Constructor
     *
     * @param elementRef - the element matching the component's selector.
     */
    constructor(element, ngZone) {
        this.element = element;
        this.ngZone = ngZone;
        // Default Options
        this.options = {
            style: 'default'
        };
    }
    // ------------------------------------------
    // Lifecycle Events
    // ------------------------------------------
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.jQueryElement = jQuery(this.element.nativeElement);
            this.jQueryElement.breadcrumb(this.options);
            this.breadcrumbAPI = this.jQueryElement.data('breadcrumb');
        });
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.breadcrumbAPI) {
                this.breadcrumbAPI.destroy();
                this.breadcrumbAPI = null;
            }
            if (this.jQueryElement) {
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
        });
    }
    ngOnInit() {
    }
    // -------------------------------------------------------------
    // All the below methods pass through to the IDS Breadcrumb API
    // -------------------------------------------------------------
    enable() {
        if (!this.breadcrumbAPI) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.breadcrumbAPI?.enable();
        });
    }
    disable() {
        if (!this.breadcrumbAPI) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.breadcrumbAPI?.disable();
        });
    }
    /**
     * Adds a new breadcrumb item to the list
     */
    add(settings, doRender) {
        if (!this.breadcrumbAPI) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.breadcrumbAPI?.add(settings, doRender);
        });
    }
    /**
     * Removes a single breadcrumb item from the list
     */
    remove(item, doRender) {
        if (!this.breadcrumbAPI) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.breadcrumbAPI?.remove(item, doRender);
        });
    }
    /**
     * Removes all breadcrumb items from the list
     */
    removeAll(doRender) {
        if (!this.breadcrumbAPI) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.breadcrumbAPI?.removeAll(doRender);
        });
    }
    /**
     * Gets references related to a particular Breadcrumb Item.
     * The return object contains:
     * - 'a' : a reference to the breadcrumb item's anchor tag
     * - 'api' : a reference to the breadcrumb item's API
     * - 'i' : a number representing the current index of the breadcrumb item.
     */
    getBreadcrumbItem(item) {
        if (!this.breadcrumbAPI) {
            return;
        }
        return this.breadcrumbAPI.getBreadcrumbItemAPI(item);
    }
    /**
     * Takes a reference to a Breadcrumb item and makes it "Current",
     * styling it with bold text and popping it out of truncation.
     */
    makeCurrent(item) {
        if (!this.breadcrumbAPI) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.breadcrumbAPI?.makeCurrent(item);
        });
    }
    /**
     * Updates the Breadcrumb List with new incoming settings
     */
    updated(settings) {
        if (settings) {
            this.options = settings;
        }
        if (!this.breadcrumbAPI) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.breadcrumbAPI?.updated(this.options);
        });
    }
    /**
     * Destroys this component and tears down the IDS Breadcrumb
     */
    destroy() {
        if (!this.breadcrumbAPI) {
            return;
        }
        this.ngZone.runOutsideAngular(() => {
            this.breadcrumbAPI?.destroy();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoBreadcrumbComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoBreadcrumbComponent, selector: "[soho-breadcrumb]", inputs: { breadcrumbs: "breadcrumbs", alternate: "alternate", truncate: "truncate", attributes: "attributes" }, host: { properties: { "class.breadcrumb": "this.isBreadcrumb" } }, ngImport: i0, template: "<ng-content></ng-content>\n", changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoBreadcrumbComponent, decorators: [{
            type: Component,
            args: [{ selector: '[soho-breadcrumb]', changeDetection: ChangeDetectionStrategy.OnPush, template: "<ng-content></ng-content>\n" }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isBreadcrumb: [{
                type: HostBinding,
                args: ['class.breadcrumb']
            }], breadcrumbs: [{
                type: Input
            }], alternate: [{
                type: Input
            }], truncate: [{
                type: Input
            }], attributes: [{
                type: Input
            }] } });
export class SohoBreadcrumbListComponent {
    constructor() {
        this.isBreadcrumbList = true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoBreadcrumbListComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoBreadcrumbListComponent, selector: "[soho-breadcrumb-list]", host: { properties: { "class.breadcrumb-list": "this.isBreadcrumbList" } }, ngImport: i0, template: `<ng-content></ng-content>`, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoBreadcrumbListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: '[soho-breadcrumb-list]',
                    template: `<ng-content></ng-content>`,
                    changeDetection: ChangeDetectionStrategy.OnPush
                }]
        }], propDecorators: { isBreadcrumbList: [{
                type: HostBinding,
                args: ['class.breadcrumb-list']
            }] } });
//# sourceMappingURL=data:application/json;base64,
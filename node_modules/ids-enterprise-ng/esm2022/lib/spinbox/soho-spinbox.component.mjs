import { Component, ChangeDetectionStrategy, EventEmitter, HostBinding, Input, Output } from '@angular/core';
import { BaseControlValueAccessor, provideControlValueAccessor } from '../utils/base-control-value-accessor';
import * as i0 from "@angular/core";
export class SohoSpinboxComponent extends BaseControlValueAccessor {
    set disabled(value) {
        this.internalIsDisabled = value;
        if (this.spinbox) {
            if (value) {
                this.ngZone.runOutsideAngular(() => this.spinbox?.disable());
            }
            else {
                this.ngZone.runOutsideAngular(() => this.spinbox?.enable());
            }
        }
        else {
            this.runUpdatedOnCheck = true;
        }
    }
    get disabled() {
        return this.internalIsDisabled;
    }
    get spinboxType() {
        return 'text';
    }
    /**
     * Value of the spin box.
     */
    set value(val) {
        if (this.spinbox) {
            this.spinbox.updateVal(val);
        }
        this.internalValue = val;
    }
    get value() {
        return this.internalValue;
    }
    set attrDisabled(_value) {
        console.warn(`soho-spinbox 'disabled' input has been deprecated, please use '[attr.disabled]'.`);
    }
    updateVal(value) {
        if (this.spinbox) {
            this.spinbox.updateVal(value);
        }
        this.value = value;
    }
    /**
     * Creates an instance of SohoSpinboxComponent.
     *
     * @param element matched element.
     * @param ngZone angular zone.
     *
     */
    constructor(element, ngZone) {
        super();
        this.element = element;
        this.ngZone = ngZone;
        /**
         * @todo replace override of native element
         */
        // eslint-disable-next-line @angular-eslint/no-output-native
        this.change = new EventEmitter();
        // Set the spinbox class.
        this.spinboxClass = true;
        this.options = {};
    }
    ngAfterViewInit() {
        // call outside the angular zone so change detection
        // isn't triggered by the soho component.
        this.ngZone.runOutsideAngular(() => {
            // assign element to local variable
            this.jQueryElement = jQuery(this.element.nativeElement);
            // initialise the spinbox control
            this.jQueryElement.spinbox(this.options);
            // extract the api
            this.spinbox = this.jQueryElement.data('spinbox');
            // @todo - add event binding control so we don't bind if not required.
            this.jQueryElement
                .on('change', (event) => this.onChange(event));
            // Make sure the value of the control is set appropriately.
            if (this.internalValue) {
                this.jQueryElement.val(this.internalValue);
            }
            this.runUpdatedOnCheck = true;
        });
    }
    ngAfterViewChecked() {
        if (this.runUpdatedOnCheck) {
            // Enforce the initial disabled value (this handles the zone internall)
            this.disabled = this.internalIsDisabled;
            this.runUpdatedOnCheck = false;
        }
    }
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            if (this.jQueryElement) {
                // remove the event listeners on this element.
                this.jQueryElement.off();
                this.jQueryElement = undefined;
            }
            // Destroy any widget resources.
            this.spinbox?.destroy();
            this.spinbox = null;
        });
    }
    onChange(_event) {
        // When the request for data has completed, make sure we
        // update the 'dropdown' control.
        this.ngZone.run(() => {
            const newValue = this.jQueryElement?.val();
            if (this.internalValue !== newValue) {
                // Update the model ...
                this.internalValue = this.jQueryElement?.val();
                // ... then emit the changed value.
                this.change.emit(this.internalValue);
            }
        });
    }
    /**
     * Override writeValue to allow the input element to be updated correctly.
     *
     * @param value the new value
     */
    writeValue(value) {
        super.writeValue(value);
        if (this.jQueryElement) {
            // The processing is required to ensure we use the correct format
            // in the control.
            this.jQueryElement.val(value);
        }
    }
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSpinboxComponent, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.1.4", type: SohoSpinboxComponent, selector: "input[soho-spinbox]", inputs: { disabled: "disabled", id: "id", name: "name", min: "min", max: "max", value: "value", step: "step", attrDisabled: "attrDisabled" }, outputs: { change: "change" }, host: { properties: { "class.spinbox": "this.spinboxClass", "attr.type": "this.spinboxType", "attr.id": "this.id", "attr.name": "this.name", "attr.min": "this.min", "attr.max": "this.max", "attr.value": "this.value", "attr.step": "this.step" } }, providers: [provideControlValueAccessor(SohoSpinboxComponent)], usesInheritance: true, ngImport: i0, template: '<ng-content></ng-content>', isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.1.4", ngImport: i0, type: SohoSpinboxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[soho-spinbox]',
                    template: '<ng-content></ng-content>',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [provideControlValueAccessor(SohoSpinboxComponent)]
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { disabled: [{
                type: Input
            }], change: [{
                type: Output
            }], spinboxClass: [{
                type: HostBinding,
                args: ['class.spinbox']
            }], spinboxType: [{
                type: HostBinding,
                args: ['attr.type']
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }, {
                type: Input
            }], name: [{
                type: HostBinding,
                args: ['attr.name']
            }, {
                type: Input
            }], min: [{
                type: HostBinding,
                args: ['attr.min']
            }, {
                type: Input
            }], max: [{
                type: HostBinding,
                args: ['attr.max']
            }, {
                type: Input
            }], value: [{
                type: HostBinding,
                args: ['attr.value']
            }, {
                type: Input
            }], step: [{
                type: HostBinding,
                args: ['attr.step']
            }, {
                type: Input
            }], attrDisabled: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,
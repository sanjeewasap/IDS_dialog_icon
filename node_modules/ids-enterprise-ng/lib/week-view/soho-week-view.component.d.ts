/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
/********************************************************************
 * Weekview component
 *******************************************************************/
export declare class SohoWeekViewComponent implements AfterViewChecked, AfterViewInit, OnDestroy {
    private element;
    private ngZone;
    ref: ChangeDetectorRef;
    isWeekView: boolean;
    set weekViewOptions(weekViewOptions: SohoWeekViewOptions);
    get weekViewOptions(): SohoWeekViewOptions;
    /**
     * Setting to toggle stacked week view layout
     */
    set stacked(isStacked: boolean | undefined);
    get stacked(): boolean | undefined;
    /**
     * Setting to toggle footer when in stacked week view mode
     */
    set showFooter(val: boolean | undefined);
    get showFooter(): boolean | undefined;
    /**
     * Setting to switch to one day view in phone-tablet sizes (stacked mode only)
     */
    set responsive(val: boolean | undefined);
    get responsive(): boolean | undefined;
    /**
     * Setting to hide week view calendar toolbar
     */
    set hideToolbar(val: boolean | undefined);
    get hideToolbar(): boolean | undefined;
    /**
     * An array of objects with data for the event types.
     */
    set eventTypes(eventTypes: SohoWeekViewEventType[] | undefined);
    get eventTypes(): SohoWeekViewEventType[] | undefined;
    /**
     * An array of objects with data for the filtered event types.
     */
    set filteredTypes(filteredTypes: [] | undefined);
    get filteredTypes(): [] | undefined;
    /**
     * An array of objects with data for the events.
     */
    set events(events: SohoWeekViewEvent[] | undefined);
    get events(): SohoWeekViewEvent[] | undefined;
    /**
     * The name of the locale to use for this instance. If not set the current locale will be used.
     */
    set locale(locale: string | undefined);
    get locale(): string | undefined;
    /**
     * Start of the week to show.
     */
    set startDate(startDate: Date | undefined);
    get startDate(): Date | undefined;
    /**
     * End of the week to show
     */
    set endDate(endDate: Date | undefined);
    get endDate(): Date | undefined;
    /**
     * Start of the hour to show.
     */
    set startHour(startHour: number | undefined);
    get startHour(): number | undefined;
    /**
     * End of the hour to show
     */
    set endHour(endHour: number | undefined);
    get endHour(): number | undefined;
    /**
     * Determines if the today button should be shown.
     */
    set showToday(showToday: boolean | undefined);
    get showToday(): boolean | undefined;
    /**
     * Determines if the all day events row should be shown.
     */
    set showAllDay(showAllDay: boolean | undefined);
    get showAllDay(): boolean | undefined;
    /**
     *  If false the dropdown to change views will not be shown.
     */
    set showViewChanger(showViewChanger: boolean | undefined);
    get showViewChanger(): boolean | undefined;
    /**
     * Shows a bar across the current time.
     */
    set showTimeLine(showTimeLine: boolean | undefined);
    get showTimeLine(): boolean | undefined;
    /**
     * Set first day of the week. '1' would be Monday.
     */
    set firstDayOfWeek(firstDayOfWeek: boolean | undefined);
    get firstDayOfWeek(): boolean | undefined;
    /**
     * If false the mouseover text or day event will not be shown.
     */
    set eventTooltip(eventTooltip: string | SohoWeekViewTooltipFunction | undefined);
    get eventTooltip(): string | SohoWeekViewTooltipFunction | undefined;
    /**
     * If false the mouseover text for event icon will not be shown.
     */
    set iconTooltip(iconTooltip: string | SohoWeekViewTooltipFunction | undefined);
    get iconTooltip(): string | SohoWeekViewTooltipFunction | undefined;
    /**
     * Fires when a week view is rendered, allowing you to pass back events or event types to show.
     */
    set renderWeekCallback(renderWeekCallback: Function | undefined);
    get renderWeekCallback(): Function | undefined;
    /**
     * Call back for when the view changer is changed.
     */
    set changeToWeekDayCallback(changeToWeekDayCallback: Function | undefined);
    get changeToWeekDayCallback(): Function | undefined;
    /**
     * Call back for when the week is changed.
     */
    set changeWeekCallback(changeWeekCallback: Function | undefined);
    get changeWeekCallback(): Function | undefined;
    /**
     * Call back for when the view changer is changed.
     */
    set changeViewCallback(changeViewCallback: Function | undefined);
    get changeViewCallback(): Function | undefined;
    /** Add extra attributes like id's to the component **/
    set attributes(attributes: Array<Object> | Object | undefined);
    get attributes(): Array<Object> | Object | undefined;
    constructor(element: ElementRef, ngZone: NgZone, ref: ChangeDetectorRef);
    isCalendarWeekView: boolean;
    selected: EventEmitter<SohoWeekViewDateSelectedEvent>;
    weekRendered: EventEmitter<SohoWeekViewRenderWeekEvent>;
    eventClick: EventEmitter<SohoWeekViewClickEvent>;
    eventDblClick: EventEmitter<SohoWeekViewClickEvent>;
    eventContextMenu: EventEmitter<SohoWeekViewClickEvent>;
    /**
     * Local variables
     */
    private jQueryElement?;
    private weekView;
    private _weekViewOptions;
    private updateRequired?;
    weekviewOptions(weekviewOptions: SohoWeekViewOptions): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    onWeekRenderedEvent(event: SohoWeekViewRenderWeekEvent): void;
    onEventClick(event: SohoWeekViewClickEvent): void;
    onEventDblClick(event: SohoWeekViewClickEvent): void;
    onEventContextMenu(event: SohoWeekViewClickEvent): void;
    /**
     * Get the current selected date on the weekView calendar.
     *
     * @returns the currently selected date on the control.
     */
    currentDate(): Date | undefined;
    /**
     * Get the events and date for the currently selected weekView calendar day.
     *
     * @param date The date to find the events for.
     * @returns dayEvents An object with all the events and the event date.
     */
    getDayEvents(date: Date): SohoWeekViewDayEvents | undefined;
    /**
     * Get dayMap object within weekview component
     * @returns {SohoWeekViewDayMap[]} dayMap object
     */
    getDayMap(): SohoWeekViewDayMap[] | undefined;
    /**
     * Handle updated settings and values.
     */
    updated(settings?: SohoWeekViewOptions): void;
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh(): void;
    /**
     * Destructor.
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoWeekViewComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoWeekViewComponent, "div[soho-week-view]", never, { "weekViewOptions": { "alias": "weekViewOptions"; "required": false; }; "stacked": { "alias": "stacked"; "required": false; }; "showFooter": { "alias": "showFooter"; "required": false; }; "responsive": { "alias": "responsive"; "required": false; }; "hideToolbar": { "alias": "hideToolbar"; "required": false; }; "eventTypes": { "alias": "eventTypes"; "required": false; }; "filteredTypes": { "alias": "filteredTypes"; "required": false; }; "events": { "alias": "events"; "required": false; }; "locale": { "alias": "locale"; "required": false; }; "startDate": { "alias": "startDate"; "required": false; }; "endDate": { "alias": "endDate"; "required": false; }; "startHour": { "alias": "startHour"; "required": false; }; "endHour": { "alias": "endHour"; "required": false; }; "showToday": { "alias": "showToday"; "required": false; }; "showAllDay": { "alias": "showAllDay"; "required": false; }; "showViewChanger": { "alias": "showViewChanger"; "required": false; }; "showTimeLine": { "alias": "showTimeLine"; "required": false; }; "firstDayOfWeek": { "alias": "firstDayOfWeek"; "required": false; }; "eventTooltip": { "alias": "eventTooltip"; "required": false; }; "iconTooltip": { "alias": "iconTooltip"; "required": false; }; "renderWeekCallback": { "alias": "renderWeekCallback"; "required": false; }; "changeToWeekDayCallback": { "alias": "changeToWeekDayCallback"; "required": false; }; "changeWeekCallback": { "alias": "changeWeekCallback"; "required": false; }; "changeViewCallback": { "alias": "changeViewCallback"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "weekviewOptions": { "alias": "weekviewOptions"; "required": false; }; }, { "selected": "selected"; "weekRendered": "weekRendered"; "eventClick": "eventClick"; "eventDblClick": "eventDblClick"; "eventContextMenu": "eventContextMenu"; }, never, ["*"], false, never>;
}

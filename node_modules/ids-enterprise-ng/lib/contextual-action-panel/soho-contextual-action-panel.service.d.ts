/// <reference types="ids-enterprise-typings" />
import { ViewContainerRef, Injector, ComponentFactoryResolver, ApplicationRef, NgZone } from '@angular/core';
import { SohoContextualActionPanelRef } from './soho-contextual-action-panel.ref';
import * as i0 from "@angular/core";
/**
 * This service is used to create a panel panel, based on the content
 * of an Angular Component on the screen.
 */
export declare class SohoContextualActionPanelService {
    private readonly appRef;
    private readonly componentFactoryResolver;
    private readonly injector;
    private readonly ngZone;
    /**
     * Constructor.
     *
     * @param appRef - application reference; must not be null.
     * @param componentFactoryResolver - used to create component factories for components dynamically.
     * @param injector - the current in scope injector, use as a delegate.
     * @param ngZone - the angular zone; must not be null.
     */
    constructor(appRef: ApplicationRef, componentFactoryResolver: ComponentFactoryResolver, injector: Injector, ngZone: NgZone);
    /**
     * Creates a panel defined by the given component, returning a reference to the
     * panel that can be interacted with.
     *
     * The component has the potential to include the panel reference when it is
     * instantiated, as a provider.
     *
     * The panel won't necessarily be open yet, see the panel ref Api for further methods.
     *
     * @param component - the type of the component to instantiate; must not be null.
     * @param parent - the parent container; must not be null.
     * @param options - the default options for the panel; optional.
     *
     * @return the panel reference.
     */
    contextualactionpanel<T>(component: PanelComponentType<T>, parent: ViewContainerRef, options?: SohoContextualActionPanelOptions): SohoContextualActionPanelRef<T>;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoContextualActionPanelService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<SohoContextualActionPanelService>;
}
/**
 * Object with a "new"" method returning the type T.
 */
export type PanelComponentType<T> = new (...args: any[]) => T;

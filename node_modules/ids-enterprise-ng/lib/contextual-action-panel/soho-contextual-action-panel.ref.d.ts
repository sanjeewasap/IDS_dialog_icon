/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="jquery" />
/// <reference types="jquery" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { ComponentRef, ApplicationRef, ComponentFactoryResolver, Injector, NgZone } from '@angular/core';
import { PanelComponentType } from '.';
/**
 * Wrapper for the jQuery panel control.
 *
 */
export declare class SohoContextualActionPanelRef<T> {
    private appRef;
    private injector;
    private ngZone;
    /** Component - if the content is derived from an existing component. */
    private componentRef?;
    /** Selector referencing the panel-panel after it has been moved to the panel container. */
    private jQueryElement?;
    /** Soho Control Api */
    private contextualactionpanel?;
    /** The result of the panel. */
    private _panelResult;
    /** Event fired when the panel is opened. */
    private open$;
    /** Event fired when the panel is closed. */
    private close$;
    /** Event fired before closing the panel */
    private beforeClose$;
    /** Event fired after closing the panel. */
    private afterClose$;
    /** Event fired after opening the panel panel. */
    private afterOpen$;
    /** Handle resource tidy up of this class. */
    private destroyed$;
    /**
     * The component displayed as the panel content.
     *
     * @param componentRef - reference to the component defining the panel panel content.
     */
    set component(componentRef: ComponentRef<T>);
    /**
     * The component displayed inside the panel's frame, if specified.  This may
     * be null if the component is built from an HTML fragment or a jQuery selector.
     */
    get componentPanel(): T | null;
    /**
     * The buttonset API for the CAP dialog.
     *
     * @returns the buttonset API for the CAP dialog, if initialized.
     */
    get buttonsetAPI(): SohoButtonsetStatic | undefined;
    /**
     * Cached options.
     */
    private _options;
    /**
     * Sets the whole options block for this contextual action panel.
     *
     * @param options - the options to set.
     */
    options(options: SohoContextualActionPanelOptions): SohoContextualActionPanelRef<T>;
    /**
     * Sets the whole options block for this contextual action panel.
     *
     * @param modalSettings - the options to set.
     */
    modalSettings(modalSettings: SohoModalOptions): SohoContextualActionPanelRef<T>;
    /**
     * Ability to add class(es) to the parent CAP element.
     *
     * @param cssClass - the class(es) value to add in CAP element.
     */
    cssClass(cssClass: string): this;
    /** Add extra attributes like id's to the component **/
    attributes(attributes: Array<Object> | Object): SohoContextualActionPanelRef<T>;
    /**
     * Sets the title of the panel.
     *
     * @param title - the title of the panel.
     */
    title(title: string): SohoContextualActionPanelRef<T>;
    /**
     * Sets the buttons to use on the panel panel.
     *
     * @deprecated (use modalSettings)
     * @param buttons - list of buttons to display
     */
    buttons(buttons: SohoContextualActionPanelButton[]): SohoContextualActionPanelRef<T>;
    /**
     * Sets the 'id' that the panel control uses.
     *
     * @deprecated (use modalSettings)
     * @param id - the id.
     */
    id(id: string): SohoContextualActionPanelRef<T>;
    /**
     * Sets the 'id' that the panel control uses.
     *
     * @param initializeContent - Sets the ability to initialize content.
     */
    initializeContent(initializeContent: boolean): SohoContextualActionPanelRef<T>;
    /**
     * Sets the 'centerTitle' that the panel control uses.
     *
     * @deprecated (use modalSettings)
     * @param centerTitle - Aligns title to center
     */
    centerTitle(centerTitle: boolean): SohoContextualActionPanelRef<T>;
    /**
     * Sets the 'trigger' that the panel control uses.
     *
     * @deprecated (use modalSettings)
     * @param trigger - when to open the panel.
     */
    trigger(trigger: SohoContextualActionPanelTriggerType): SohoContextualActionPanelRef<T>;
    /**
     * Sets the 'content' that the panel control uses.
     *
     * @param content - a selector or string representing the panel content.
     */
    content(content: JQuery | string): SohoContextualActionPanelRef<T>;
    /**
     * Applies a function to the instantiated component,
     * allowing the component to be modified, or initialised.
     *
     * The function is provided with a typed value for the
     * instance.
     *
     * @param component - the instantiated instance.
     * @return the panel ref for onward assignment.
     */
    apply(fn: (component: T) => void): SohoContextualActionPanelRef<T>;
    /**
     * panel result property.
     *
     * @param panelResult - the stored result of the panel.
     */
    set panelResult(panelResult: any);
    get panelResult(): any;
    /**
     * Constructor.
     */
    constructor(appRef: ApplicationRef, componentFactoryResolver: ComponentFactoryResolver, injector: Injector, ngZone: NgZone, settings: SohoContextualActionPanelOptions, panelComponent?: PanelComponentType<T>);
    /**
     * Opens the panel.
     *
     * @return the panel ref.
     */
    open(): SohoContextualActionPanelRef<T>;
    /**
     * Closes the panel, if open. The panel is not closed
     * fully until the 'afterClosed' event is fired.
     *
     * @param panelResult - optional result - passed back to the caller.
     * @param doForce - optional - forces the modal to close.
     */
    close(panelResult?: any, doForce?: boolean): SohoContextualActionPanelRef<T>;
    /**
     * Opened Event.
     *
     * This event is fired when the panel is being opened.
     *
     * @param eventFn - the function to invoke when the panel is to be opened.
     */
    opened(eventFn: Function): SohoContextualActionPanelRef<T> | null;
    /**
     * Opened Event.
     * This event is fired after the panel has been opened.
     *
     * @param eventFn - the function to invoke when the panel is to be opened.
     */
    afterOpen(eventFn: Function): SohoContextualActionPanelRef<T> | null;
    /**
     * Before Closed Event.
     * This event is fired before closing the panel.
     *
     * @param eventFn - the function to invoke when the panel before closing.
     */
    beforeClose(eventFn: Function): SohoContextualActionPanelRef<T> | null;
    /**
     * Closed Event.
     *
     * This event is fired when the panel is being closed.
     *
     * @param eventFn - the function to invoke when the panel is to be closed.
     */
    closed(eventFn: SohoContextualActionPanelEventFunction<T>): SohoContextualActionPanelRef<T> | null;
    /**
     * After Closed Event.
     *
     * This event is fired, with the result of the panel, when the panel has been
     * closed and destroyed.
     *
     * @param eventFn - the function to invoke after the panel has been closed.
     */
    afterClose(eventFn: SohoContextualActionPanelEventFunction<T> | null): SohoContextualActionPanelRef<T> | null;
    /**
     * Handles the 'open' event, fired just before
     * the focus is assigned to a panel.
     *
     * @param event - full event object.
     */
    private onOpen;
    /**
     * Handles the 'afterOpen' event, fired after the panel panel
     * has been opened.
     *
     * @param event - full event object.
     */
    private onAfterOpen;
    /**
     * Handles the close event.
     *
     * @param event - full event object.
     * @param isCancelled - is true if the cancel button was pressed; otherwise false.
     */
    private onClose;
    /**
     * Handles the 'afterClose' event, fired when th panel
     * has been closed and tidy up is required.
     *
     * @param event - full event object.
     */
    private onAfterClose;
    /**
     * Handles the 'beforeclose' event.
     *
     * @param event - full event object.
     */
    private onBeforeClose;
}
/**
 * Close/AfterClose event handler.
 *
 * @param result - the panel result (if set); may be undefined.
 * @param panelRef - the panel reference (or wrapper); never null.
 * @param panelComponent - the component hosted in the modal; may be undefined.
 */
export type SohoContextualActionPanelEventFunction<T> = (result: any, panelRef: SohoContextualActionPanelRef<T>, panelComponent: T) => void;
/**
 * Contract for all SohoContextualActionPanelComponents.
 */
export interface SohoContextualActionPanelComponent<T> {
}

/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoTrackDirtyDirective implements AfterViewInit, OnDestroy {
    private element;
    private ngZone;
    get trackDirtyAttr(): boolean;
    /**
     * Called when element value is different from original value
     */
    dirty: EventEmitter<SohoTrackDirtyEvent>;
    /**
     * Called when element value is same as original value
     */
    pristine: EventEmitter<SohoTrackDirtyEvent>;
    /**
     * Called when the element has its original value reset to the current value
     */
    afterResetDirty: EventEmitter<SohoTrackDirtyEvent>;
    /**
     * Local variables
     */
    private jQueryElement?;
    private trackDirty?;
    constructor(element: ElementRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    changeDirty(): void;
    resetDirty(): void;
    updated(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoTrackDirtyDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SohoTrackDirtyDirective, "[soho-trackdirty]", ["soho-trackdirty"], {}, { "dirty": "dirty"; "pristine": "pristine"; "afterResetDirty": "afterResetDirty"; }, never, never, false, never>;
}

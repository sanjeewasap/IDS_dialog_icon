/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoBarComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    /** Options. */
    private options;
    get isBar(): boolean;
    /** Defines the data to use, must be specified for this component. */
    set dataset(dataset: Array<any>);
    /** Chart Type */
    set type(value: SohoBarType);
    /** Default is a single or stacked chart. */
    set isStacked(value: boolean);
    /** If true its a 100% bar chart. */
    set isNormalized(value: boolean);
    /** If true its a grouped bar chart. */
    set isGrouped(value: boolean);
    /** If false the legend will not be shown. */
    set showLegend(value: boolean);
    /** true|false - will do or not do the animation, 'initial' will do only first time the animation. */
    set animate(value: boolean);
    /** If true, the component will not resize when resizing the page. */
    set redrawOnResize(value: boolean);
    /** Use d3 format some examples can be found on http://bit.ly/1IKVhHh */
    set formatterString(value: string);
    /** The d3 axis format. */
    set format(value: string);
    /** A tooltip for the whole chart. */
    set tooltip(value: string);
    /** If true log scale is enabled. */
    set useLogScale(value: boolean);
    /** Settings for the chart ticks. Can set ticks: {format: d3Format, number: n} */
    set ticks(value: object);
    /** Show the in the axis lines or not. */
    set showLines(value: boolean);
    /** How far out than the outer circle should the labels be placed, this
     * may be useful to adjust for some labels. */
    set labelFactor(value: number);
    /** The number of pixels after which a label needs to be given a new line.
     * You may want to change this based on label data. */
    set wrapWidth(value: number);
    /** If true chart height will fit in parent available height. */
    set fitHeight(value: boolean);
    /** An empty message will be displayed when there is no chart data. */
    set emptyMessage(value: SohoEmptyMessageOptions);
    /**
     * Add extra attributes like id's to the component
     *
     * @param attributes - the array or object of attributes to add
     */
    set attributes(attributes: Array<Object> | Object);
    /** Events */
    selected: EventEmitter<SohoBarSelectEvent>;
    unselected: EventEmitter<SohoBarSelectEvent>;
    rendered: EventEmitter<Object>;
    dblclick: EventEmitter<Object>;
    /**
     * @todo replace override of native attribute
     */
    contextmenu: EventEmitter<Object[]>;
    private jQueryElement?;
    private bar?;
    private updateRequired;
    constructor(element: ElementRef, ngZone: NgZone);
    /** Setup */
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    updated(): void;
    /** Tear Down */
    ngOnDestroy(): void;
    setSelected(selected: SohoBarSelected): void;
    toggleSelected(selected: SohoBarSelected): void;
    getSelected(): SohoBarSelected;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoBarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoBarComponent, "[soho-bar]", never, { "dataset": { "alias": "dataset"; "required": false; }; "type": { "alias": "type"; "required": false; }; "isStacked": { "alias": "isStacked"; "required": false; }; "isNormalized": { "alias": "isNormalized"; "required": false; }; "isGrouped": { "alias": "isGrouped"; "required": false; }; "showLegend": { "alias": "showLegend"; "required": false; }; "animate": { "alias": "animate"; "required": false; }; "redrawOnResize": { "alias": "redrawOnResize"; "required": false; }; "formatterString": { "alias": "formatterString"; "required": false; }; "format": { "alias": "format"; "required": false; }; "tooltip": { "alias": "tooltip"; "required": false; }; "useLogScale": { "alias": "useLogScale"; "required": false; }; "ticks": { "alias": "ticks"; "required": false; }; "showLines": { "alias": "showLines"; "required": false; }; "labelFactor": { "alias": "labelFactor"; "required": false; }; "wrapWidth": { "alias": "wrapWidth"; "required": false; }; "fitHeight": { "alias": "fitHeight"; "required": false; }; "emptyMessage": { "alias": "emptyMessage"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; }, { "selected": "selected"; "unselected": "unselected"; "rendered": "rendered"; "dblclick": "dblclick"; "contextmenu": "contextmenu"; }, never, ["*"], false, never>;
}

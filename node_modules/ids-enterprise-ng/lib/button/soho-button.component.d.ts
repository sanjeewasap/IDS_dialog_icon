/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, NgZone, OnDestroy, OnInit } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Supported button types.
 */
export type SohoButtonType = 'btn' | 'primary' | 'secondary' | 'tertiary' | 'icon' | 'favorite' | 'modal' | 'modal-primary';
export declare class SohoButtonComponent implements AfterViewInit, OnDestroy, OnInit {
    private element;
    private ngZone;
    static BTN: SohoButtonType;
    static PRIMARY: SohoButtonType;
    static SECONDARY: SohoButtonType;
    static TERTIARY: SohoButtonType;
    static ICON: SohoButtonType;
    static FAVORITE: SohoButtonType;
    static MODAL: SohoButtonType;
    static MODAL_PRIMARY: SohoButtonType;
    /** Reference to the jQuery control. */
    private jQueryElement?;
    /** Reference to the Soho control api. */
    private button?;
    /** The type of the button. */
    private buttonType?;
    private _buttonOptions;
    private _isToggle;
    private _isTogglePressed;
    private _iconAlign;
    private _isPressed;
    /**
     * The type of the button, defaulting to 'secondary'.
     *
     * Allow override of input, to match component selector.
     */
    set sohoButton(type: SohoButtonType);
    /**
     * Sets the button options
     */
    set buttonOptions(buttonOptions: SohoButtonOptions);
    get buttonOptions(): SohoButtonOptions;
    set toggleOnIcon(toggleOnIcon: string);
    set toggleOffIcon(toggleOffIcon: string);
    set replaceText(replaceText: boolean);
    set hideMenuArrow(value: boolean | undefined);
    get hideMenuArrow(): boolean | undefined;
    /**
     * Used to add a bigger hit area (for mobile)
     */
    set hitbox(value: boolean | undefined);
    get hitbox(): boolean | undefined;
    /**
     * Used to set a notification badge on the button
     */
    set notificationBadge(value: boolean | undefined);
    get notificationBadge(): boolean | undefined;
    /**
     * Set the position and color of the notification badge on the button
     */
    set notificationBadgeOptions(value: SohoNotificationBadgeOptions | undefined);
    get notificationBadgeOptions(): SohoNotificationBadgeOptions | undefined;
    /**
     * Used to set an extra class on the soho-icon being used by soho-button.
     * Useful to set emerald06-color azure10-color to change the icon color.
     */
    extraIconClass?: string;
    /**
     * Whether this button should be a toggle button or not. Alternate toggle on/off icons
     * can be used through toggleOnIcon/toggleOffIcon inputs.
     */
    set isToggle(isToggle: boolean);
    get isToggle(): boolean;
    /**
     * Whether the toggle button should be in a pressed state or not.
     */
    set isTogglePressed(isTogglePressed: boolean);
    get isTogglePressed(): boolean;
    /**
     * The icon to be used
     *  - shows when the state is true if toggle has a value
     */
    icon?: string;
    /**
     * The icon placement
     */
    set iconAlign(iconAlign: string);
    get iconAlign(): string;
    /** Sets the button type to 'submit' when true. */
    isSubmit: boolean;
    /** Sets whether the button should have a ripple effect on click. */
    ripple: boolean;
    /**
     * Binary state (toggle):
     *  0 - shows toggle
     *  1 - shows icon (default)
     *
     *  @deprecated use isToggle=true input instead along with toggleOnIcon/toggleOffIcon options
     */
    state?: boolean;
    /**
     * The icon to be used when the state is false.
     *
     * @deprecated use isToggle=true input instead along with toggleOnIcon/toggleOffIcon options
     */
    toggle?: string;
    /**
     * Sets the expandable-expander class to be placed on the button for the
     * soho-expandablearea to use as it's expand/collapse trigger
     *
     */
    expandableExpander: boolean;
    get btn(): boolean;
    get btnPrimary(): boolean;
    get btnSecondary(): boolean;
    get btnTertiary(): boolean;
    get btnIcon(): boolean;
    get btnToggle(): boolean;
    get btnModal(): boolean;
    get btnModalPrimary(): boolean;
    get btnTogglePressed(): boolean;
    get iconFavorite(): boolean;
    moveToLeft: any;
    moveToRight: any;
    moveToSelected: any;
    get noRipple(): boolean;
    get type(): "button" | "submit";
    get isExpandableExpander(): boolean;
    /**
     * @deprecated no longer needed once this.toggle is removed.
     */
    toggleState(): void;
    get ariaPressed(): boolean;
    /**
     * Constructor.
     *
     * @param elementRef - the element matching the component's selector.
     */
    constructor(element: ElementRef, ngZone: NgZone);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    /**
     * Destructor.
     */
    ngOnDestroy(): void;
    get hasIcon(): boolean | "" | undefined;
    get hasIconEnd(): boolean | "" | undefined;
    get currentIcon(): string | undefined;
    /**
     * @deprecated use isToggle and isTogglePressed instead.
     */
    isPressed(): boolean;
    updated(settings?: SohoButtonOptions): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoButtonComponent, "button[soho-button]", never, { "sohoButton": { "alias": "soho-button"; "required": false; }; "buttonOptions": { "alias": "buttonOptions"; "required": false; }; "toggleOnIcon": { "alias": "toggleOnIcon"; "required": false; }; "toggleOffIcon": { "alias": "toggleOffIcon"; "required": false; }; "replaceText": { "alias": "replaceText"; "required": false; }; "hideMenuArrow": { "alias": "hideMenuArrow"; "required": false; }; "hitbox": { "alias": "hitbox"; "required": false; }; "notificationBadge": { "alias": "notificationBadge"; "required": false; }; "notificationBadgeOptions": { "alias": "notificationBadgeOptions"; "required": false; }; "extraIconClass": { "alias": "extraIconClass"; "required": false; }; "isToggle": { "alias": "isToggle"; "required": false; }; "isTogglePressed": { "alias": "isTogglePressed"; "required": false; }; "icon": { "alias": "icon"; "required": false; }; "iconAlign": { "alias": "iconAlign"; "required": false; }; "isSubmit": { "alias": "isSubmit"; "required": false; }; "ripple": { "alias": "ripple"; "required": false; }; "state": { "alias": "state"; "required": false; }; "toggle": { "alias": "toggle"; "required": false; }; "expandableExpander": { "alias": "expandableExpander"; "required": false; }; "moveToLeft": { "alias": "moveToLeft"; "required": false; }; "moveToRight": { "alias": "moveToRight"; "required": false; }; "moveToSelected": { "alias": "moveToSelected"; "required": false; }; }, {}, never, ["*", "div.disabled-tooltip"], false, never>;
}

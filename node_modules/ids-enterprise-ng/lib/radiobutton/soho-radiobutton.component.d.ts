/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * This component does not extend the ControlValueAccessor
 * as Angular already implements RadioControlValueAccessor
 * which hooks the controls up to the Forms model, see
 * https://angular.io/api/forms/RadioControlValueAccessor.
 *
 * The requirement is that the control matches the following
 * selector:
 *
 * input[type=radio][formControlName]
 * input[type=radio][formControl]
 * input[type=radio][ngModel]
 *
 * Make sure you add `type="radio"` to your markup.
 */
export declare class SohoRadioButtonComponent implements AfterViewInit {
    private element;
    /** Current value. */
    value: any;
    /**
     * Called when the radiobutton value changes.
     *
     * @todo remove override of native element
     */
    change: EventEmitter<SohoRadioButtonEvent>;
    /** Bind attributes to the host input element. */
    get isRadioType(): string;
    /** Sets the class attribute for the radio button. */
    get isRadioButton(): boolean;
    /**
     * Due to conflicts with the ReactiveForms API, this Input
     * and HostBinding has been removed, in favour of using
     * [attr.disabled]="isDisabled".
     */
    set disabled(_value: boolean);
    /** Sets the element to indicate checked. */
    checked?: boolean;
    /**
     * ---------------------------------------------------
     * Local variables
     * ---------------------------------------------------
     */
    /** JQuery Component */
    private jQueryElement?;
    /**
     * Constructor.
     */
    constructor(element: ElementRef);
    ngAfterViewInit(): void;
    onChange(event: SohoRadioButtonEvent): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoRadioButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoRadioButtonComponent, "input[soho-radiobutton]", never, { "value": { "alias": "value"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "checked": { "alias": "checked"; "required": false; }; }, { "change": "change"; }, never, ["*"], false, never>;
}

/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
/********************************************************************
 * Calendar Week View Element
 *******************************************************************/
export declare class SohoCalendarWeekViewComponent {
    isCalendarWeekView: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoCalendarWeekViewComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoCalendarWeekViewComponent, "div[soho-calendar-week-view]", never, {}, {}, never, ["*"], false, never>;
}
/********************************************************************
 * Calendar Month View Element
 *******************************************************************/
export declare class SohoCalendarMonthViewComponent {
    isCalendarMonthView: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoCalendarMonthViewComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoCalendarMonthViewComponent, "div[soho-calendar-monthview]", never, {}, {}, never, ["*"], false, never>;
}
/********************************************************************
 * Main Calendar component
 *******************************************************************/
export declare class SohoCalendarComponent implements AfterViewChecked, AfterViewInit, OnDestroy {
    private element;
    private ngZone;
    ref: ChangeDetectorRef;
    isCalendar: boolean;
    set calendarOptions(calendarOptions: SohoCalendarOptions | undefined);
    get calendarOptions(): SohoCalendarOptions | undefined;
    set calendarWeekOptions(calendarWeekOptions: SohoCalendarWeekOptions | undefined);
    get calendarWeekOptions(): SohoCalendarWeekOptions | undefined;
    set disable(disable: SohoDatePickerDisable);
    get disable(): SohoDatePickerDisable;
    set dayLegend(dayLegend: Array<SohoDatePickerLegend>);
    get dayLegend(): Array<SohoDatePickerLegend>;
    set attributes(attributes: Array<Object> | Object | undefined);
    get attributes(): Array<Object> | Object | undefined;
    /**
     * An array of objects with data for the event types.
     */
    set eventTypes(eventTypes: SohoCalendarEventType[] | undefined);
    get eventTypes(): SohoCalendarEventType[] | undefined;
    /**
     * An array of objects with data for the events.
     */
    set events(events: SohoCalendarEvent[]);
    get events(): SohoCalendarEvent[];
    /**
     * The name of the locale to use for this instance. If not set the current locale will be used.
     */
    set locale(locale: string);
    get locale(): string;
    /**
     * Initial month to show.
     */
    set month(month: number | undefined);
    get month(): number | undefined;
    /**
     * Initial year to show.
     */
    set year(year: number | undefined);
    get year(): number | undefined;
    /**
     * If false the dropdown to change views will not be shown.
     */
    set showViewChanger(showViewChanger: boolean | undefined);
    get showViewChanger(): boolean | undefined;
    /**
     * If false the legend will not show below.
     */
    set showEventLegend(showEventLegend: boolean | undefined);
    get showEventLegend(): boolean | undefined;
    /**
     * If false the mouseover text or day event will not be shown.
     */
    set eventTooltip(eventTooltip: string | SohoCalendarTooltipFunction);
    get eventTooltip(): string | SohoCalendarTooltipFunction;
    /**
     * If false the mouseover text for event icon will not be shown.
     */
    set iconTooltip(iconTooltip: string | SohoCalendarTooltipFunction);
    get iconTooltip(): string | SohoCalendarTooltipFunction;
    /**
     * Fires when a month is rendered, allowing you to pass back events or event types to show.
     */
    set renderMonthCallback(renderMonthCallback: Function);
    get renderMonthCallback(): Function;
    /**
     * Fires when a month day is clicked. Allowing you to do something.
     */
    set selectedCallback(selectedCallback: Function | undefined);
    get selectedCallback(): Function | undefined;
    /**
     * The ID of the template used for the events.
     */
    set template(template: string | undefined);
    get template(): string | undefined;
    /**
     * How many days in advance should we show in the upcoming events pane.
     */
    set upcomingEventDays(upcomingEventDays: number | undefined);
    get upcomingEventDays(): number | undefined;
    /**
     * The ID of the template used for the modal dialog on events.
     */
    set modalTemplate(modalTemplate: string | undefined);
    get modalTemplate(): string | undefined;
    /**
     * ID of the menu to use for an event right click context menu
     */
    set menuId(menuId: string | undefined);
    get menuId(): string | undefined;
    /**
     * Callback for the  right click context menu
     */
    set menuSelected(menuSelected: Function | undefined);
    get menuSelected(): Function | undefined;
    /**
     * Initial event properties for the new events dialog.
     */
    set newEventDefaults(newEventDefaults: SohoCalendarEvent | undefined);
    get newEventDefaults(): SohoCalendarEvent | undefined;
    /**
     * Call back for when the view changer is changed
     */
    set changeViewCallback(changeViewCallback: Function | undefined);
    get changeViewCallback(): Function | undefined;
    /**
     * Deterimines if the today button should be shown.
     */
    set showToday(showToday: boolean | undefined);
    get showToday(): boolean | undefined;
    /**
     * Configure date range for calendar
     */
    set displayRange(displayRange: Object | undefined);
    get displayRange(): Object | undefined;
    /**
     * Configure day of week setting
     */
    set firstDayOfWeek(day: number);
    get firstDayOfWeek(): number;
    selected: EventEmitter<SohoCalendarDateSelectedEvent>;
    monthRendered: EventEmitter<SohoCalendarRenderMonthEvent>;
    eventClick: EventEmitter<SohoCalendarEventClickEvent>;
    eventDblClick: EventEmitter<SohoCalendarEventClickEvent>;
    eventContextMenu: EventEmitter<SohoCalendarEventClickEvent>;
    /**
     * Local variables
     */
    private jQueryElement?;
    private calendar?;
    private _calendarOptions?;
    private _calendarWeekOptions?;
    private updateRequired?;
    constructor(element: ElementRef, ngZone: NgZone, ref: ChangeDetectorRef);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    onSelectedEvent(event: SohoCalendarDateSelectedEvent): void;
    onMonthRenderedEvent(event: SohoCalendarRenderMonthEvent): void;
    onEventClick(event: SohoCalendarEventClickEvent): void;
    onEventDblClick(event: SohoCalendarEventClickEvent): void;
    onEventContextMenu(event: SohoCalendarEventClickEvent): void;
    /**
     * Get the current selected date on the calendar.
     *
     * @returns the currently selected date on the control.
     */
    currentDate(): Date;
    /**
     * Get the events and date for the currently selected calendar day.
     *
     * @param date The date to find the events for.
     * @returns dayEvents An object with all the events and the event date.
     */
    getDayEvents(date: Date): SohoCalendarDayEvents;
    /**
     * Add a new event via the event object and show it if it should be visible in the calendar.
     *
     * @param event The event object with common event properties.
     */
    addEvent(event: SohoCalendarEvent): void;
    /**
     * Update an event via the event object and show it if it should be visible in the calendar.
     * It uses the event id to do this.
     *
     * @param event The event object with common event properties.
     */
    updateEvent(event: SohoCalendarEvent): void;
    /**
     * Remove an event from the dataset and page. It uses the id property.
     *
     * @param event The event object with common event properties.
     */
    deleteEvent(event: SohoCalendarEvent): void;
    /**
     * Show a modal used to add/edit events. This uses the modalTemplate setting for the modal contents.
     *
     * @param event The event object with common event properties for defaulting fields in the template.
     * @param done The callback for when the modal closes.
     */
    showEventModal(event: SohoCalendarEvent[], done: Function): void;
    /**
     * @returns whether or not this Modal is currently being displayed
     */
    modalVisible(): boolean;
    /**
     * Remove all events from the calendar
     */
    clearEvents(): void;
    /**
     * Handle updated settings and values.
     */
    updated(settings?: SohoCalendarOptions): void;
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh(): void;
    /**
     * Destructor.
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoCalendarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoCalendarComponent, "[soho-calendar]", never, { "calendarOptions": { "alias": "calendarOptions"; "required": false; }; "calendarWeekOptions": { "alias": "calendarWeekOptions"; "required": false; }; "disable": { "alias": "disable"; "required": false; }; "dayLegend": { "alias": "dayLegend"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "eventTypes": { "alias": "eventTypes"; "required": false; }; "events": { "alias": "events"; "required": false; }; "locale": { "alias": "locale"; "required": false; }; "month": { "alias": "month"; "required": false; }; "year": { "alias": "year"; "required": false; }; "showViewChanger": { "alias": "showViewChanger"; "required": false; }; "showEventLegend": { "alias": "showEventLegend"; "required": false; }; "eventTooltip": { "alias": "eventTooltip"; "required": false; }; "iconTooltip": { "alias": "iconTooltip"; "required": false; }; "renderMonthCallback": { "alias": "renderMonthCallback"; "required": false; }; "selectedCallback": { "alias": "selectedCallback"; "required": false; }; "template": { "alias": "template"; "required": false; }; "upcomingEventDays": { "alias": "upcomingEventDays"; "required": false; }; "modalTemplate": { "alias": "modalTemplate"; "required": false; }; "menuId": { "alias": "menuId"; "required": false; }; "menuSelected": { "alias": "menuSelected"; "required": false; }; "newEventDefaults": { "alias": "newEventDefaults"; "required": false; }; "changeViewCallback": { "alias": "changeViewCallback"; "required": false; }; "showToday": { "alias": "showToday"; "required": false; }; "displayRange": { "alias": "displayRange"; "required": false; }; "firstDayOfWeek": { "alias": "firstDayOfWeek"; "required": false; }; }, { "selected": "selected"; "monthRendered": "monthRendered"; "eventClick": "eventClick"; "eventDblClick": "eventDblClick"; "eventContextMenu": "eventContextMenu"; }, never, ["*"], false, never>;
}

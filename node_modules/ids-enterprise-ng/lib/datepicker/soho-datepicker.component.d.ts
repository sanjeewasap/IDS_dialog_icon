/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, OnDestroy, NgZone, ChangeDetectorRef } from '@angular/core';
import { BaseControlValueAccessor } from '../utils/base-control-value-accessor';
import * as i0 from "@angular/core";
export declare class SohoDatePickerComponent extends BaseControlValueAccessor<string | number | string[] | Date | undefined> implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    ref: ChangeDetectorRef;
    /**
     * Flag to force an update of the control after the view is created.
     */
    private runUpdatedOnCheck?;
    /**
     * Local variables
     */
    private jQueryElement?;
    private datepicker?;
    private isDisabled?;
    private isReadOnly?;
    private _options;
    private updateLegend;
    private _validation;
    /**
     * Indicates to display the timepicker; defaults to false.
     */
    set showTime(showTime: boolean);
    /**
     * If true current time will be used for the time portion otherwise 12:00 midnight is used.
     */
    set useCurrentTime(useCurrentTime: boolean);
    /**
     * Indicates the pattern for the time format.
     */
    set timeFormat(timeFormat: string);
    /**
     * An integer from 1 to 60; multiples of this value are displayed as options in the minutes dropdown.
     */
    set minuteInterval(minuteInterval: number);
    /**
     * An integer from 1 to 60; multiples of this value are displayed as options in the seconds dropdown.
     */
    set secondInterval(secondInterval: number);
    /**
     * Change the datepickers first day of the week.
     * An integer from 0 - 6 where 0 = Sunday, 1 = Monday, etc...
     */
    set firstDayOfWeek(firstDayOfWeek: SohoDatePickerDayOfWeek);
    /**
     * If true the field will be sized to the width of the date.
     */
    set autoSize(autoSize: boolean);
    /**
     * Show the today button on the header.
     */
    set showToday(showToday: boolean);
    /** Add extra attributes like id's to the component **/
    set attributes(attributes: Array<Object> | Object);
    /**
     * Indicates mode, either 'standard' or 'range'.
     */
    set mode(mode: SohoDatePickerMode);
    /**
     * Use range of two dates options.
     */
    set range(range: SohoDatePickerRange);
    /**
     * If a non-matching minutes value is entered, will round the minutes value to the nearest interval on the blur event.
     */
    set roundToInterval(roundToInterval: boolean);
    /**
     * Indicates the pattern for the date format or the value of 'locale'.
     */
    set dateFormat(dateFormat: string);
    /**
     * Indicates a placeholder for an empty value; defaults to false.
     */
    set placeholder(placeholder: string);
    /**
     * Indicates an object containing a date or range of dates that are enabled or disabled.
     */
    set disable(disable: any);
    /**
     * Indicates a legend is shown to associate dates
     */
    set showLegend(showLegend: boolean);
    /**
     * Indicates if the month and year will render as dropdowns.
     */
    set showMonthYearPicker(showMonthYearPicker: boolean);
    /**
     * Indicates if the month and year will render as dropdowns.
     */
    set showWeekNumber(showWeekNumber: boolean);
    /**
     * Indicates if the days portion of the calendar will be hidden.
     */
    set hideDays(hideDays: boolean);
    /**
     * The number of years ahead to show in the month/year picker should total 9 with yearsBack.
     */
    set yearsAhead(yearsAhead: number);
    /**
     * The number of years back to show in the month/year picker should total 9 with yearsAhead.
     */
    set yearsBack(yearsBack: number);
    /**
     * Options for how the legend displays
     */
    set legend(legend: Array<SohoDatePickerLegend>);
    /**
     * The name of the locale to use for this instance. If not set, the current locale will be used.
     */
    set locale(locale: string);
    /**
     * Calendar's name. Currently just 'gregorian' or 'islamic-umalqura'
     */
    set calendarName(calendarName: SohoDatePickerCalendarName);
    /**
     * Indicates if the dates will use UTC format
     */
    set useUTC(useUTC: boolean);
    /**
     * Set the input to tabbable
     */
    set tabbable(tabbable: boolean);
    /**
     * Set the input to allow increment/decrement using keyboard
     */
    set incrementWithKeyboard(incrementWithKeyboard: boolean);
    /**
     * Set the input to allow today using keyboard
     */
    set todayWithKeyboard(todayWithKeyboard: boolean);
    /**
     * Sets the options for the date picker
     */
    set options(options: SohoDatePickerOptions);
    set validation(validation: SohoDatePickerValidator);
    get options(): SohoDatePickerOptions;
    /**
     * Enables or disables the control
     */
    set disabled(value: boolean | undefined);
    get disabled(): boolean | undefined;
    /**
     * Sets the control to readonly
     */
    set readonly(value: boolean | undefined);
    get readonly(): boolean | undefined;
    /**
     * Called when the datepicker value changes
     *
     * @todo replace override of native attribute
     */
    change: EventEmitter<SohoDatePickerEvent>;
    /**
     * Called when the datepicker is closed.
     */
    listclosed: EventEmitter<any>;
    /**
     * Called when the datepicker is opened.
     */
    listopened: EventEmitter<any>;
    /**
     * Called before a month will be rendered in the datepicker
     */
    beforemonthrendered: EventEmitter<any>;
    /**
     * Called after a month has been rendered in the datepicker
     */
    monthrendered: EventEmitter<SohoDatePickerMonthRenderedEvent>;
    /**
     * Public API
     */
    setValue(value: string | Date | number | string[], trigger: boolean, isTime: boolean): void;
    getValue(asDate?: boolean): string | Date | number | string[];
    focus(): void;
    openCalendar(): void;
    /**
     * Bind attributes to the host input element
     */
    get isDatepicker(): boolean;
    get isTimepicker(): boolean;
    /**
     * Creates an instance of SohoDatePickerComponent.
     *
     * @param element the element this component encapsulates.
     * @param ngZone the angular zone for this component.
     * @param ref reference to the change detector
     */
    constructor(element: ElementRef, ngZone: NgZone, ref: ChangeDetectorRef);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    /**
     * Handle the control being changed.
     */
    onChange(event: SohoDatePickerEvent): void;
    /**
     * Override writeValue to allow the date picker
     * element to be updated correctly.
     *
     * @param value - the new value
     */
    writeValue(value: Date | string | number | string[]): void;
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled: boolean): void;
    ngOnDestroy(): void;
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh(): void;
    private onListClosed;
    private onListOpened;
    private onBeforeMonthRendered;
    private onMonthRendered;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoDatePickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoDatePickerComponent, "input[soho-datepicker]", never, { "showTime": { "alias": "showTime"; "required": false; }; "useCurrentTime": { "alias": "useCurrentTime"; "required": false; }; "timeFormat": { "alias": "timeFormat"; "required": false; }; "minuteInterval": { "alias": "minuteInterval"; "required": false; }; "secondInterval": { "alias": "secondInterval"; "required": false; }; "firstDayOfWeek": { "alias": "firstDayOfWeek"; "required": false; }; "autoSize": { "alias": "autoSize"; "required": false; }; "showToday": { "alias": "showToday"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "mode": { "alias": "mode"; "required": false; }; "range": { "alias": "range"; "required": false; }; "roundToInterval": { "alias": "roundToInterval"; "required": false; }; "dateFormat": { "alias": "dateFormat"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "disable": { "alias": "disable"; "required": false; }; "showLegend": { "alias": "showLegend"; "required": false; }; "showMonthYearPicker": { "alias": "showMonthYearPicker"; "required": false; }; "showWeekNumber": { "alias": "showWeekNumber"; "required": false; }; "hideDays": { "alias": "hideDays"; "required": false; }; "yearsAhead": { "alias": "yearsAhead"; "required": false; }; "yearsBack": { "alias": "yearsBack"; "required": false; }; "legend": { "alias": "legend"; "required": false; }; "locale": { "alias": "locale"; "required": false; }; "calendarName": { "alias": "calendarName"; "required": false; }; "useUTC": { "alias": "useUTC"; "required": false; }; "tabbable": { "alias": "tabbable"; "required": false; }; "incrementWithKeyboard": { "alias": "incrementWithKeyboard"; "required": false; }; "todayWithKeyboard": { "alias": "todayWithKeyboard"; "required": false; }; "options": { "alias": "options"; "required": false; }; "validation": { "alias": "validation"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; }, { "change": "change"; "listclosed": "listclosed"; "listopened": "listopened"; "beforemonthrendered": "beforemonthrendered"; "monthrendered": "monthrendered"; }, never, ["*"], false, never>;
}

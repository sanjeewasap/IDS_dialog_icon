/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, EventEmitter, OnInit, OnDestroy } from '@angular/core';
import { SohoTreeService } from './soho-tree.service';
import * as i0 from "@angular/core";
/**
 *  Valid list of tree types.
 */
export type SohoTreeType = 'auto' | 'content-only';
/**
 * Angular Wrapper for the Soho Tree Component.
 *
 * This component searches for an unordered list (ul) with the attribute
 * 'soho-tree' in the parent's DOM tree, initialising those found with
 * the SoHo tree control.
 *
 * The data is provided either by the content (li elements), a dataset
 * input or an implementation of the TreeService interface, by specifying
 * an implementation on the hosting component, e.g.
 *
 * providers: [ provide: TreeService, useClass: TreeDemoService} ]
 *
 * @todo Content based version does not work due to lack of TreeNode.
 * @todo Complete interface definition
 */
export declare class SohoTreeComponent implements AfterViewInit, OnInit, OnDestroy {
    private elementRef;
    private treeService;
    static AUTO: SohoTreeType;
    static CONTENT_ONLY: SohoTreeType;
    set dataset(dataset: SohoTreeNode[] | undefined);
    get dataset(): SohoTreeNode[] | undefined;
    /** Defines the source type of the tree. */
    set sohoTree(treeType: SohoTreeType);
    /** Is the tree selectable? */
    set selectable(selectable: SohoTreeSelectable | undefined);
    get selectable(): SohoTreeSelectable | undefined;
    /** Show/hide selection checkboxe */
    set hideCheckboxes(hideCheckboxes: boolean | undefined);
    set menuId(menuId: string | undefined);
    /** Set the source field, when not using a service or pre-defined data. */
    set source(value: SohoTreeSourceFunction);
    /** Show icon on node opened */
    set folderIconOpen(folderIconOpen: string);
    /** Show icon on node closed */
    set folderIconClosed(folderIconClosed: string);
    /**
     * This event is fired when a node is expanded, the SohoTreeNode
     * expanded is passed in the argument passed to the handler.
     */
    expanded: EventEmitter<SohoTreeEvent>;
    /**
     * This event is fired when a node is collapsed, the SohoTreeNode
     * collapsed is passed in the argument passed to the handler.
     */
    collapsed: EventEmitter<SohoTreeEvent>;
    /**
     * This event is fired when a node is selected, the SohoTreeNode
     * selected is passed in the argument passed to the handler.
     * */
    selected: EventEmitter<SohoTreeEvent>;
    /**
     * This event is fired when right clicking a node.
     * */
    contextmenu: EventEmitter<SohoTreeEvent>;
    /**
     * This event is fired when a node is unselected, the SohoTreeNode
     * unselected is passed in the argument passed to the handler.
     * */
    unselected: EventEmitter<SohoTreeEvent>;
    sortstart: EventEmitter<SohoTreeEvent>;
    sortend: EventEmitter<SohoTreeEvent>;
    /**
     * This event is fired when context menu is selected, the SohoTreeNode
     * selected is passed in the argument passed to the handler.
     * */
    menuselect: EventEmitter<SohoTreeEvent>;
    /**
     * This event is fired on context menu opening, the SohoTreeNode
     * selected is passed in the argument passed to the handler.
     * */
    menuopen: EventEmitter<SohoTreeEvent>;
    isDisabled: boolean;
    treeClass: boolean;
    treeRole: string;
    /** Reference to the jQuery control. */
    private jQueryElement?;
    /** Reference to the SoHo tree control api. */
    private tree?;
    /** The tree's type. */
    private treeType?;
    /** An internal options object that gets updated by using the component's Inputs(). */
    options: SohoTreeOptions;
    /**
     * Constructor.
     *
     * @param elementRef - the element matching this directive.
     * @param treeService - service for obtaining data (optional)
     */
    constructor(elementRef: ElementRef, treeService: SohoTreeService);
    /**
     * Resets the data display to the default provided by the service,
     * that is by calling getRootNodes.
     *
     * The alternative is to set the dataset property, which
     * has the same affect but allows the client to specify
     * the nodes.
     *
     * This method is only applicable when the service is defined,
     * but will not fail if one is not set.
     */
    reset(): void;
    /** Enable the tree */
    enable(): void;
    /** Disables the tree from reacting to events. */
    disable(): void;
    setFocus(node: SohoTreeNode): void;
    disableNode(node: SohoTreeNode): void;
    enableNode(node: SohoTreeNode): void;
    /**
     * Updates the note with the information in the given SohoTreeNode.
     *
     * @parm node the tree node; must not be null.
     */
    updateNode(node: SohoTreeNode): void;
    /**
     * Expands all the loaded tree nodes.
     *
     * Note: this does not load additional nodes.
     */
    expandAll(): void;
    /**
     * Collapse all the tree nodes.
     */
    collapseAll(): void;
    /**
     * Remove the given node.
     */
    removeNode(node: SohoTreeNode): void;
    /**
     * Preserves all nodes' enablement states in the Tree component
     */
    preserveEnablementState(): SohoTreeNode[] | undefined;
    /**
     * Restores all nodes' original enablement states in the Tree component
     */
    restoreEnablementState(): void;
    /**
     * Set the selected note based in the id of the node.  If the node
     * does not exist an exception is thrown.
     */
    selectNode(id: string, focus?: boolean): void;
    /**
     * Set the selected note based in the id of the node.  If the node
     * does not exist an exception is thrown.
     */
    unSelectedNode(id: string, focus?: boolean): void;
    /**
     * Returns a list of selected tree nodes, or an
     * empty array if the tree has not been initialised
     * yet.
     */
    getSelectedNodes(): SohoTreeNode[];
    /**
     * Adds a node to the tree.
     */
    addNode(treeNode: SohoTreeNode, location?: any, isBeforeOrAfter?: string): void;
    /**
     * Find the tree node for the given identifier (id).
     */
    findById(id: string): SohoTreeNode;
    /**
     * Toggles open/closed state of the given tree node.
     */
    toggleNode(node: SohoTreeNode): void;
    /**
     * Handle a request to load the children of the specified node.
     *
     * event - the tree event used to determine which node to load
     * response - function used to return the children
     */
    private onDataRequest;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoTreeComponent, [null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoTreeComponent, "ul[soho-tree]", never, { "dataset": { "alias": "dataset"; "required": false; }; "sohoTree": { "alias": "soho-tree"; "required": false; }; "selectable": { "alias": "selectable"; "required": false; }; "hideCheckboxes": { "alias": "hideCheckboxes"; "required": false; }; "menuId": { "alias": "menuId"; "required": false; }; "source": { "alias": "source"; "required": false; }; "folderIconOpen": { "alias": "folderIconOpen"; "required": false; }; "folderIconClosed": { "alias": "folderIconClosed"; "required": false; }; }, { "expanded": "expanded"; "collapsed": "collapsed"; "selected": "selected"; "contextmenu": "contextmenu"; "unselected": "unselected"; "sortstart": "sortstart"; "sortend": "sortend"; "menuselect": "menuselect"; "menuopen": "menuopen"; }, never, ["*"], false, never>;
}

/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, NgZone } from '@angular/core';
import { BaseControlValueAccessor } from '../utils/base-control-value-accessor';
import * as i0 from "@angular/core";
export declare class SohoInputComponent extends BaseControlValueAccessor<string> implements AfterViewInit, OnDestroy {
    private element;
    private ngZone;
    /**
     * todo: work around until landmark can change code to allow the initial format.
     * Right now landmark initially formats the value to current locale.
     */
    fireInputEventKludge: boolean;
    /**
     * Available Soho Template events as Output (EventEmitters passing the event)
     * Should match the Soho event names for the component
     *
     * @todo replace override of native attribute
     */
    change: EventEmitter<SohoInputEvent[]>;
    /**
     * Input controls managed their disabled state via the 'disabled' attribute.
     * We use null as the default, rather than false, to ensure the attribute is
     * not displayed.
     *
     *
     */
    isDisabled: boolean | undefined;
    /**
     * Clearable attribute. Adds a clear icon in input if true.
     */
    clearable: boolean | undefined;
    /**
     * Local variables
     */
    private jQueryElement?;
    /**
     * Constructor.
     *
     * @param element the owning element.
     * @param changeDetectionRef change detection.
     */
    constructor(element: ElementRef, ngZone: NgZone);
    onKeyUp(_event: KeyboardEvent): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Handle the control being changed.
     */
    onChange(event: any[]): void;
    /**
     * Override writeValue to allow the mask input
     * element to be updated correctly.
     *
     * @param value - the new value
     */
    writeValue(value: any): void;
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled: boolean | undefined): void;
    getValue(): string | undefined;
    setValue(value: string): void;
    focus(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoInputComponent, "input[soho-input]", never, { "fireInputEventKludge": { "alias": "fireInputEventKludge"; "required": false; }; "isDisabled": { "alias": "isDisabled"; "required": false; }; "clearable": { "alias": "clearable"; "required": false; }; }, { "change": "change"; }, never, ["*"], false, never>;
}

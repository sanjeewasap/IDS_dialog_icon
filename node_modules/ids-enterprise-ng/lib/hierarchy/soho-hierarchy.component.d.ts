/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, OnDestroy, EventEmitter, NgZone } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoHierarchyLeafTemplateComponent {
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoHierarchyLeafTemplateComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoHierarchyLeafTemplateComponent, "soho-hierarchy-leaf-template", never, {}, {}, never, ["*"], false, never>;
}
export declare class SohoHierarchyComponent implements OnDestroy, AfterViewInit {
    private elementRef;
    private ngZone;
    private hierarchy?;
    private jQueryElement?;
    /** An internal options object that gets updated by using the component's Inputs(). */
    private options;
    hostClass: string;
    set dataset(dataset: Array<any> | undefined);
    get dataset(): Array<any> | undefined;
    set legend(legend: Array<SohoHierarchyLegend> | undefined);
    get legend(): Array<SohoHierarchyLegend> | undefined;
    set legendKey(key: string | undefined);
    get legendKey(): string | undefined;
    set templateId(id: string | undefined);
    get leafTemplateId(): string | undefined;
    set layout(layout: SohoHierarchyLayoutType | undefined);
    get layout(): SohoHierarchyLayoutType | undefined;
    /**
     * Leaf is selected
     *
     */
    selected: EventEmitter<SohoHierarchyEvent>;
    /**
     * Leaf is double clicked.
     */
    doubleClick: EventEmitter<SohoHierarchyDoubleClickEvent>;
    constructor(elementRef: ElementRef, ngZone: NgZone);
    /**
     * Used to add new data lazily when a leaf is expanded
     *
     * @param id should match the leaf id in the DOM
     */
    add(id: string, dataset: Array<any>, newData: Array<any>): void;
    /**
     *  Reload hierarchy with a new dataset
     */
    reloadDataSet(dataSet: Array<any>): void;
    /**
     * Update actions for action menu on a leaf
     */
    updateActions(eventInfo: SohoHierarchyEvent, updatedActions: Array<SohoHierarchyAction>): void;
    /**
     * Manually select leaf by id
     */
    selectLeaf(leafId: string): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoHierarchyComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoHierarchyComponent, "figure[soho-hierarchy]", never, { "dataset": { "alias": "dataset"; "required": false; }; "legend": { "alias": "legend"; "required": false; }; "legendKey": { "alias": "legendKey"; "required": false; }; "templateId": { "alias": "templateId"; "required": false; }; "layout": { "alias": "layout"; "required": false; }; }, { "selected": "selected"; "doubleClick": "doubleClick"; }, never, ["*"], false, never>;
}

/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoSparklineComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    /** Options. */
    private options;
    get isSparkline(): boolean;
    /** Defines the data to use, must be specified for this component. */
    set dataset(dataset: Array<any>);
    /** Chart Type */
    set type(value: SohoSparklineType);
    /** An array of color sequences in hex format fx #1D5F8A, defaulting to the correct standard colors. */
    set colors(value: Array<any>);
    /** Shows dots on the data points. */
    set isDots(value: boolean);
    /** Highlights the top value as peak with a special dot. */
    set isPeakDot(value: boolean);
    /** Shows a continuous shading to highlight the min and max values. */
    set isMinMax(value: boolean);
    /** Adds a median range display. */
    set isMedianRange(value: boolean);
    rendered: EventEmitter<Object>;
    /**
     * @todo remove override of native element
     */
    contextmenu: EventEmitter<Object[]>;
    private jQueryElement?;
    private sparkline?;
    private updateRequired;
    constructor(element: ElementRef, ngZone: NgZone);
    /** Setup */
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    /** Tear Down */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoSparklineComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoSparklineComponent, "[soho-sparkline]", never, { "dataset": { "alias": "dataset"; "required": false; }; "type": { "alias": "type"; "required": false; }; "colors": { "alias": "colors"; "required": false; }; "isDots": { "alias": "isDots"; "required": false; }; "isPeakDot": { "alias": "isPeakDot"; "required": false; }; "isMinMax": { "alias": "isMinMax"; "required": false; }; "isMedianRange": { "alias": "isMedianRange"; "required": false; }; }, { "rendered": "rendered"; "contextmenu": "contextmenu"; }, never, ["*"], false, never>;
}

/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoSearchFieldWrapperComponent {
    get isSearchfieldWrapper(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoSearchFieldWrapperComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoSearchFieldWrapperComponent, "[soho-searchfield-wrapper]", never, {}, {}, never, ["*"], false, never>;
}
export declare class SohoSearchFieldComponent implements AfterViewInit, OnDestroy {
    private element;
    private ngZone;
    /** Options. */
    options: SohoSearchFieldOptions;
    set allResultsCallback(value: (searchTerm: string) => void);
    /** Displays a dropdown containing categories that can be used to filter results. */
    set categories(value: SohoSearchFieldCategoryType[]);
    /** If true, creates a multiselectable Categories list. */
    set categoryMultiselect(value: boolean);
    /** Has an X to clear. */
    set clearable(value: boolean);
    set showAllResults(value: boolean);
    /** Show any available categories that are selected to teh left of the Dropdown field. */
    set showCategoryText(value: boolean);
    /** Extra button available to show. */
    set button(value: SohoSearchFieldExtraButton);
    /** AutoComplete : Source Function/Data/Url/Array */
    set source(value: SohoAutoCompleteSource);
    /** Template that can be passed */
    set template(value: string);
    /** Number representing a size that will be used when a collapsible Searchfield becomes collapsed. */
    set collapseSize(value: ((api: SohoSearchFieldStatic) => number) | number);
    /** Set the input to tabbable */
    set tabbable(value: boolean);
    selected: EventEmitter<Object[]>;
    cleared: EventEmitter<Object[]>;
    get isSearchField(): boolean;
    /**
     * Local variables
     */
    private jQueryElement?;
    private searchfield?;
    constructor(element: ElementRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    clear(): void;
    /**  Gets a complete list of categories in jQuery-collection form. */
    getCategories(): any;
    /** Gets the categories as data. Passing true will return only the selected category data.*/
    getCategoryData(onlySelected: boolean): SohoSearchFieldCategory[] | undefined;
    /**  Gets a complete list of categories in jQuery-collection form. */
    getSelectedCategories(): any;
    /** Gets the currently selected list of categories in jQuery-collection form. */
    setCategoryButtonText(textContent?: string): void;
    updated(settings?: SohoSearchFieldOptions): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoSearchFieldComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoSearchFieldComponent, "input[soho-searchfield]", never, { "options": { "alias": "options"; "required": false; }; "allResultsCallback": { "alias": "allResultsCallback"; "required": false; }; "categories": { "alias": "categories"; "required": false; }; "categoryMultiselect": { "alias": "categoryMultiselect"; "required": false; }; "clearable": { "alias": "clearable"; "required": false; }; "showAllResults": { "alias": "showAllResults"; "required": false; }; "showCategoryText": { "alias": "showCategoryText"; "required": false; }; "button": { "alias": "button"; "required": false; }; "source": { "alias": "source"; "required": false; }; "template": { "alias": "template"; "required": false; }; "collapseSize": { "alias": "collapseSize"; "required": false; }; "tabbable": { "alias": "tabbable"; "required": false; }; }, { "selected": "selected"; "cleared": "cleared"; }, never, ["*"], false, never>;
}

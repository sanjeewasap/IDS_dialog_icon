/// <reference types="ids-enterprise-typings" />
/// <reference types="jquery" />
/// <reference types="jquery" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * SUB COMPONENT: SOHO-MENUPOPUPMENU-HEADING
 */
export declare class SohoPopupMenuHeadingComponent {
    get isHeading(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoPopupMenuHeadingComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoPopupMenuHeadingComponent, "li[soho-popupmenu-heading]", never, {}, {}, never, ["*"], false, never>;
}
/**
 * SUB COMPONENT: SOHO-POPUPMENU-SHORTCUT-TEXT
 */
export declare class SohoPopupMenuShortCutTextComponent {
    get isShortCutText(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoPopupMenuShortCutTextComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoPopupMenuShortCutTextComponent, "span[soho-popupmenu-shortcut-text]", never, {}, {}, never, ["*"], false, never>;
}
/**
 * SUB COMPONENT: SOHO-MENUPOPUPMENU-SEPARATOR
 */
export declare class SohoPopupMenuSeparatorComponent {
    get isSeparator(): boolean;
    singleSelectableSection: boolean;
    multiSelectableSection: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoPopupMenuSeparatorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoPopupMenuSeparatorComponent, "li[soho-popupmenu-separator]", never, { "singleSelectableSection": { "alias": "singleSelectableSection"; "required": false; }; "multiSelectableSection": { "alias": "multiSelectableSection"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**
 * SUB COMPONENT: SOHO-MENUPOPUPMENU-LABEL
 */
export declare class SohoPopupMenuItemLabelComponent {
    get hrefAttr(): string;
    menuId?: string;
    menuUrl?: string;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoPopupMenuItemLabelComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoPopupMenuItemLabelComponent, "a[soho-popupmenu-label]", never, { "menuId": { "alias": "menuId"; "required": false; }; "menuUrl": { "alias": "menuUrl"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**
 * SUB COMPONENT: SOHO-MENUPOPUPMENU-ITEM
 */
export declare class SohoPopupMenuItemComponent {
    isChecked?: boolean;
    isSelectable: boolean;
    isDisabled: boolean;
    isIndented: boolean;
    subMenu: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoPopupMenuItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoPopupMenuItemComponent, "li[soho-popupmenu-item]", never, { "isChecked": { "alias": "isChecked"; "required": false; }; "isSelectable": { "alias": "isSelectable"; "required": false; }; "isDisabled": { "alias": "isDisabled"; "required": false; }; "isIndented": { "alias": "isIndented"; "required": false; }; "subMenu": { "alias": "subMenu"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**
 * MAIN COMPONENT: SOHO-MENUPOPUPMENU
 */
export declare class SohoPopupMenuComponent implements AfterViewInit, OnDestroy {
    private elementRef;
    private ngZone;
    set popupmenuOptions(_popupMenuOptions: SohoPopupMenuOptions);
    get popupmenuOptions(): SohoPopupMenuOptions;
    /** id (or jQuery object) of associated drop down list. */
    set menu(menu: string | JQuery);
    get menu(): string | JQuery;
    /** 'click' | 'rightClick' | 'immediate' */
    set trigger(trigger: SohoPopupMenuTrigger);
    get trigger(): SohoPopupMenuTrigger;
    /** Auto Focus */
    set autoFocus(autoFocus: boolean);
    get autoFocus(): boolean;
    /** Mouse focus. */
    set mouseFocus(mouseFocus: boolean);
    get mouseFocus(): boolean;
    /** Attach to body. */
    set attachToBody(attachToBody: boolean);
    get attachToBody(): boolean;
    /** beforeOpen - ajax callback for open event */
    set beforeOpen(beforeOpen: SohoPopupMenuSourceFunction);
    get beforeOpen(): SohoPopupMenuSourceFunction;
    /** Switches aria to use listbox construct instead of menu construct (internal). */
    set ariaListbox(ariaListbox: boolean);
    get ariaListbox(): boolean;
    /**
     * By default, menus open up underneath their target element.  Set this to true to
     * use mouse coordinates for positioning a menu inside of its target element.
     */
    set useCoordsForClick(useCoordsForClick: boolean);
    get useCoordsForClick(): boolean;
    /** Can pass in the event object so you can do a right click with immediate */
    set eventObj(eventObj: any);
    get eventObj(): any;
    set placementOpts(placementOpts: SohoPopupmenuPlacementOpts);
    get placementOpts(): SohoPopupmenuPlacementOpts;
    set offset(offset: SohoPopupmenuOffset);
    get offset(): SohoPopupmenuOffset;
    set removeOnDestroy(removeOnDestroy: boolean);
    get removeOnDestroy(): boolean;
    set attributes(attributes: Array<Object> | Object | undefined);
    get attributes(): Array<Object> | Object | undefined;
    selected: EventEmitter<SohoPopupMenuEvent>;
    popupmenuafterplace: EventEmitter<SohoPopupMenuEvent>;
    beforeopen: EventEmitter<SohoPopupMenuEvent>;
    /**
     * @todo remove override of native element
     */
    open: EventEmitter<SohoPopupMenuEvent>;
    afteropen: EventEmitter<SohoPopupMenuEvent>;
    closeEvent: EventEmitter<SohoPopupMenuEvent>;
    isPopupmenu: boolean;
    isSelectable: boolean;
    isMultiselectable: boolean;
    private jQueryElement?;
    private popupmenu?;
    private _popupMenuOptions;
    constructor(elementRef: ElementRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    /**
     * Returns the selected html element.
     */
    getSelected(): any;
    /**
     * Updates the control to reflect the settings.
     */
    updated(settings: any): void;
    /**
     * Tear down the markup for the popup menu
     */
    teardown(): void;
    /**
     * Closes the popup menu
     */
    close(isCancelled?: boolean, noFocus?: boolean): void;
    /**
     * Destroy the markup and any other resources.
     */
    destroy(): void;
    /**
     * Cleanup just before Angular destroys the component.
     * Unsubscribe observables, detach event handlers and remove other resources to avoid memory leaks.
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoPopupMenuComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoPopupMenuComponent, "ul[soho-popupmenu]", never, { "popupmenuOptions": { "alias": "popupmenuOptions"; "required": false; }; "menu": { "alias": "menu"; "required": false; }; "trigger": { "alias": "trigger"; "required": false; }; "autoFocus": { "alias": "autoFocus"; "required": false; }; "mouseFocus": { "alias": "mouseFocus"; "required": false; }; "attachToBody": { "alias": "attachToBody"; "required": false; }; "beforeOpen": { "alias": "beforeOpen"; "required": false; }; "ariaListbox": { "alias": "ariaListbox"; "required": false; }; "useCoordsForClick": { "alias": "useCoordsForClick"; "required": false; }; "eventObj": { "alias": "eventObj"; "required": false; }; "placementOpts": { "alias": "placementOpts"; "required": false; }; "offset": { "alias": "offset"; "required": false; }; "removeOnDestroy": { "alias": "removeOnDestroy"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "isSelectable": { "alias": "isSelectable"; "required": false; }; "isMultiselectable": { "alias": "isMultiselectable"; "required": false; }; }, { "selected": "selected"; "popupmenuafterplace": "popupmenuafterplace"; "beforeopen": "beforeopen"; "open": "open"; "afteropen": "afteropen"; "closeEvent": "close"; }, never, ["*"], false, never>;
}

/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
/**************************************************************
 * STEP LIST TITLE
 **************************************************************/
export declare class SohoStepListTitleComponent {
    get title(): boolean;
    get titleWide(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoStepListTitleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoStepListTitleComponent, "div[soho-step-list-title]", never, {}, {}, never, ["*"], false, never>;
}
/**************************************************************
 * STEP LIST
 **************************************************************/
export declare class SohoStepListComponent {
    isTree: boolean;
    isJSStepTreeScroll: boolean;
    id: string;
    dataInit: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoStepListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoStepListComponent, "ul[soho-step-list]", never, {}, {}, never, ["*"], false, never>;
}
/**************************************************************
 * SUB STEP LIST
 **************************************************************/
export declare class SohoSubstepListComponent {
    isFolder: boolean;
    isJSStepFolder: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoSubstepListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoSubstepListComponent, "ul[soho-substep-list]", never, {}, {}, never, ["*"], false, never>;
}
/**************************************************************
 * STEP LIST ITEM
 **************************************************************/
export declare class SohoStepListItemComponent {
    get jsStep(): boolean;
    isSelected: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoStepListItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoStepListItemComponent, "li[soho-step-list-item]", never, { "isSelected": { "alias": "isSelected"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**************************************************************
 * STEP LIST ITEM ANCHOR
 **************************************************************/
export declare class SohoStepListItemAnchorComponent {
    isJsStepLink: boolean;
    get hrefAttr(): string | null;
    stepId?: string;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoStepListItemAnchorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoStepListItemAnchorComponent, "a[soho-step-list-item-anchor]", never, { "stepId": { "alias": "stepId"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**************************************************************
 * STEP LIST ITEM TITLE
 **************************************************************/
export declare class SohoStepListItemTitleComponent {
    treeText: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoStepListItemTitleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoStepListItemTitleComponent, "span[soho-step-list-item-title]", never, {}, {}, never, ["*"], false, never>;
}
/**************************************************************
 * STEP CONTENT TITLE
 **************************************************************/
export declare class SohoStepContentTitleComponent {
    isHeading: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoStepContentTitleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoStepContentTitleComponent, "div[soho-step-content-title]", never, {}, {}, never, ["*"], false, never>;
}
/**************************************************************
 * STEP CONTENT
 **************************************************************/
export declare class SohoStepContentComponent {
    get isScrollable(): boolean;
    get iStepContainer(): boolean;
    get isJsStepPanelsScroll(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoStepContentComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoStepContentComponent, "div[soho-step-content]", never, {}, {}, never, ["*"], false, never>;
}
/**************************************************************
 * STEP CONTENT PANEL
 **************************************************************/
export declare class SohoStepContentPanelComponent {
    get isJsStepProcessPanel(): boolean;
    get idAttr(): string | undefined;
    stepId?: string;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoStepContentPanelComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoStepContentPanelComponent, "div[soho-step-content-panel]", never, { "stepId": { "alias": "stepId"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**************************************************************
 * MAIN STEP PROCESS COMPONENT
 **************************************************************/
export declare class SohoStepProcessComponent implements AfterViewInit, OnDestroy {
    private element;
    isStepProcessContainer: boolean;
    isTwoColumn: boolean;
    isFixed: boolean;
    isPageContainer: boolean;
    isNoScroll: boolean;
    /**
     * Whether or not to restrict navigation to next and previous buttons only.
     */
    set linearProgression(linearProgression: boolean);
    nextButtonLabel: string;
    previousButtonLabel: string;
    continueButtonLabel: string;
    saveAndCloseButtonLabel: string;
    set nextButtonEnable(enabled: boolean);
    set previousButtonEnable(enabled: boolean);
    set saveCloseButtonEnable(enabled: boolean);
    beforeSelectStep: EventEmitter<BeforeSelectStepEvent>;
    saveClose: EventEmitter<SohoStepSaveCloseEvent>;
    private jQueryElement?;
    private stepprocess?;
    private stepProcessOptions;
    private beforeSelectStepDeferred;
    constructor(element: ElementRef);
    ngAfterViewInit(): void;
    private beforeSelectStepPromise;
    private beforeSelectStepResponse;
    private fireOnSaveClose;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoStepProcessComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoStepProcessComponent, "div[soho-stepprocess]", never, { "linearProgression": { "alias": "linearProgression"; "required": false; }; "nextButtonLabel": { "alias": "nextButtonLabel"; "required": false; }; "previousButtonLabel": { "alias": "previousButtonLabel"; "required": false; }; "continueButtonLabel": { "alias": "continueButtonLabel"; "required": false; }; "saveAndCloseButtonLabel": { "alias": "saveAndCloseButtonLabel"; "required": false; }; "nextButtonEnable": { "alias": "nextButtonEnable"; "required": false; }; "previousButtonEnable": { "alias": "previousButtonEnable"; "required": false; }; "saveCloseButtonEnable": { "alias": "saveCloseButtonEnable"; "required": false; }; }, { "beforeSelectStep": "beforeSelectStep"; "saveClose": "saveClose"; }, never, ["div[soho-step-list-title]", "ul[soho-step-list]", "div[soho-step-content-title]", "div[soho-step-content]"], false, never>;
}

/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="jquery" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, AfterViewChecked, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the Soho Module Nav Switcher element.
 * This Component attaches to an element annotated with the `soho-module-nav-switcher` attribute,
 */
export declare class SohoModuleNavSwitcherComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private elementRef;
    private ngZone;
    /** Reference to the jQuery element. */
    private jQueryElement?;
    /** Reference to the annotated SoHoXi control */
    private modulenavswitcher?;
    /** Stored settings */
    private _options;
    /** Internal use flags */
    private _updateRequired;
    /** Constructor. */
    constructor(elementRef: ElementRef, ngZone: NgZone);
    set displayMode(val: SohoModuleNavDisplayMode | undefined);
    get displayMode(): SohoModuleNavDisplayMode | undefined;
    set generate(val: boolean | undefined);
    get generate(): boolean | undefined;
    set icon(val: SohoModuleNavSwitcherIconSetting);
    get icon(): SohoModuleNavSwitcherIconSetting;
    set moduleButtonText(val: string | undefined);
    get moduleButtonText(): string | undefined;
    set roleDropdownLabel(val: string | undefined);
    get roleDropdownLabel(): string | undefined;
    set roles(val: Array<SohoModuleNavSwitcherRoleRecord> | undefined);
    get roles(): Array<SohoModuleNavSwitcherRoleRecord> | undefined;
    rolechange: EventEmitter<JQuery.TriggeredEvent<any, any, any, any>>;
    modulebuttonclick: EventEmitter<JQuery.TriggeredEvent<any, any, any, any>>;
    accordionAPI(): SohoAccordionStatic | undefined;
    accordionEl(): HTMLElement | undefined;
    moduleButtonAPI(): SohoButtonStatic | undefined;
    roleDropdownAPI(): SohoDropDownStatic | undefined;
    init(): void;
    toggleModuleButtonFocus(doFocus?: boolean): void;
    /** Triggers a UI Resync. */
    updated(val?: SohoModuleNavSwitcherOptions): void;
    teardown(): void;
    /** Sets the roles array programmatically */
    setRoles(val: Array<SohoModuleNavSwitcherRoleRecord>): void;
    /** Triggered by a Module Button click */
    onModuleButtonClick(event: JQuery.TriggeredEvent): void;
    /** Triggered by a Role Dropdown change */
    onRoleChange(event: JQuery.TriggeredEvent): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoModuleNavSwitcherComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoModuleNavSwitcherComponent, "soho-module-nav-switcher, [soho-module-nav-switcher]", never, { "displayMode": { "alias": "displayMode"; "required": false; }; "generate": { "alias": "generate"; "required": false; }; "icon": { "alias": "icon"; "required": false; }; "moduleButtonText": { "alias": "moduleButtonText"; "required": false; }; "roleDropdownLabel": { "alias": "roleDropdownLabel"; "required": false; }; "roles": { "alias": "roles"; "required": false; }; }, { "rolechange": "rolechange"; "modulebuttonclick": "modulebuttonclick"; }, never, never, false, never>;
}

/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoTreemapComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    /** Options. */
    private options;
    get isTreemap(): boolean;
    /** Defines the data to use, must be specified for this component. */
    set dataset(dataset: Object);
    /** If false, the component will not resize when resizing the page. */
    set redrawOnResize(value: boolean);
    /** The margins of the SVG, which you may want to adjust depending on text location. */
    set margin(value: Object[]);
    /** An array of colors used in sequence from front to end of the array. */
    set colors(value: Array<any>);
    /** If false then the percentage wont be shown in the blocks. */
    set showLabel(value: boolean);
    /** The d3 formatter function for the value label. */
    set labelFormatter(value: string);
    /** If true then the first name will be used for the title area. */
    set showTitle(value: boolean);
    /** An empty message will be displayed when there is no chart data. */
    set emptyMessage(value: SohoEmptyMessageOptions);
    /** Add extra attributes like id's to the component **/
    set attributes(value: Array<Object> | Object);
    /** Events */
    rendered: EventEmitter<Object>;
    private jQueryElement?;
    private treemap?;
    private updateRequired;
    constructor(element: ElementRef, ngZone: NgZone);
    /** Setup */
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    /** Tear Down */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoTreemapComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoTreemapComponent, "[soho-treemap]", never, { "dataset": { "alias": "dataset"; "required": false; }; "redrawOnResize": { "alias": "redrawOnResize"; "required": false; }; "margin": { "alias": "margin"; "required": false; }; "colors": { "alias": "colors"; "required": false; }; "showLabel": { "alias": "showLabel"; "required": false; }; "labelFormatter": { "alias": "labelFormatter"; "required": false; }; "showTitle": { "alias": "showTitle"; "required": false; }; "emptyMessage": { "alias": "emptyMessage"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; }, { "rendered": "rendered"; }, never, ["*"], false, never>;
}

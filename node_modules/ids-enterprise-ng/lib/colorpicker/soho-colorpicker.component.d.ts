/// <reference types="ids-enterprise-typings" />
/// <reference types="jquery" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, OnDestroy, NgZone, ChangeDetectorRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class SohoColorPickerComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    ngControl: NgControl;
    ref: ChangeDetectorRef;
    /**
     * Flag to force an update of the control after the view is created.
     */
    private runUpdatedOnCheck?;
    /** Value Accessor */
    private valueAccessor?;
    /**
     * Local variables
     */
    private jQueryElement;
    private colorpicker;
    private isEditable?;
    isUppercase?: boolean;
    isClearable?: boolean;
    private isDisabled?;
    private isReadOnly?;
    private isShowLabel?;
    isColorOnly?: boolean;
    hasCustomColor?: boolean;
    clearableTextString: string;
    private options?;
    /**
     * Indicates the color list
     */
    set colors(colors: Array<SohoColorOption> | undefined);
    /**
     * Enables or disables the control
     */
    set disabled(value: boolean | undefined);
    get disabled(): boolean | undefined;
    /**
     * Enables or disables editing
     */
    set editable(value: boolean | undefined);
    get editable(): boolean | undefined;
    /**
     * Enables or disables forces upper case hex.
     */
    set uppercase(value: boolean);
    /**
     * Enables or disables the clear option.
     */
    set clearable(value: boolean);
    /**
     * Enables or disables the clear option.
     */
    set customColors(value: boolean);
    /**
     * Enables or disables the colorOnly option.
     */
    set colorOnly(value: boolean);
    /**
     * Sets the clearableText option.
     */
    set clearableText(value: string);
    /**
     * Add extra attributes like id's to the component
     */
    set attributes(value: Array<Object> | Object);
    /**
     * Sets the control to readonly
     */
    set readonly(value: boolean | undefined);
    get readonly(): boolean | undefined;
    /**
     * Sets the control to show color label
     */
    set showLabel(value: boolean | undefined);
    get showLabel(): boolean | undefined;
    /**
     * Called when the colorpicker value changes
     *
     * @todo replace override of native attribute
     */
    change: EventEmitter<SohoColorPickerEvent>;
    /**
     * Called when the colorpicker updates in some way.
     */
    updatedEvent: EventEmitter<JQuery.TriggeredEvent>;
    /**
     * Public API
     */
    getLabelValue(): any;
    getHexValue(): any;
    /**
     * Bind attributes to the host input element
     */
    get isColorpicker(): boolean;
    /**
     * Creates an instance of SohoColorPickerComponent.
     *
     * @param element the element this component encapsulates.
     * @param ngZone the angualar zone for this component
     * @param ngControl any associated form control (optional)
     *
     */
    constructor(element: ElementRef, ngZone: NgZone, ngControl: NgControl, ref: ChangeDetectorRef);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    /**
     * Event handler for the 'changed' event on the 'colorpicker' component.
     *
     *
     * @param event the standard jQuery event.
     */
    private onChanged;
    /**
     * In case options are being bound asynchronously, you will need to trigger updated on
     * soho colorpicker control so it updates its value labels.
     */
    updated(): SohoColorPickerComponent;
    onUpdated(event: JQuery.TriggeredEvent): void;
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled: boolean): void;
    ngOnDestroy(): void;
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoColorPickerComponent, [null, null, { optional: true; self: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoColorPickerComponent, "input[soho-colorpicker]", never, { "colors": { "alias": "colors"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "editable": { "alias": "editable"; "required": false; }; "uppercase": { "alias": "uppercase"; "required": false; }; "clearable": { "alias": "clearable"; "required": false; }; "customColors": { "alias": "customColors"; "required": false; }; "colorOnly": { "alias": "colorOnly"; "required": false; }; "clearableText": { "alias": "clearableText"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "showLabel": { "alias": "showLabel"; "required": false; }; }, { "change": "change"; "updatedEvent": "updated"; }, never, ["*"], false, never>;
}

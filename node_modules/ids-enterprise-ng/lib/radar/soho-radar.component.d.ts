/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoRadarComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    /** Options. */
    private options;
    get isRadar(): boolean;
    /** Defines the data to use, must be specified for this component. */
    set dataset(dataset: Array<any>);
    /** If false, the component will not resize when resizing the page. */
    set redrawOnResize(value: boolean);
    /** Makes it possible to adjust the top margins */
    set margin(value: Object);
    /** How many levels or inner circles should there be drawn. */
    set levels(value: number);
    /** What is the value that the biggest circle will represent */
    set maxValue(value: number);
    /** How far out than the outer circle should the labels be placed,
     * this may be useful to adjust for some charts. */
    set labelFactor(value: number);
    /**  The number of pixels after which a label needs to be
     * given a new line. You may want to change this based on label data. */
    set wrapWidth(value: number);
    /**  The opacity value of the blobs. */
    set opacityArea(value: number);
    /**  The size of the colored circles of each blog. Set to zero to remove dots. */
    set dotRadius(value: number);
    /**  The opacity of the circles of each blob 0 or .1 are good values. */
    set opacityCircles(value: number);
    /** The width of the stroke around each blob. */
    set strokeWidth(value: number);
    /** If true the area and stroke will follow a round path (cardinal-closed). */
    set roundStrokes(value: boolean);
    /** If false the axis lines will not be shown in the diagonals. */
    set showCrosslines(value: boolean);
    /** If false the axis labels will not be shown. */
    set showAxisLabels(value: boolean);
    /** An array of colors to use for each blob */
    set colors(value: any);
    /** If false no tooltips will be shown. */
    set showTooltips(value: boolean);
    /** A setting that controls the tooltip values and format. */
    set tooltip(value: SohoRadarTooltipOptions);
    /** d3 formatter to use on the axis labels */
    set axisFormatter(value: string);
    /**  If false the legend will not be shown. */
    set showLegend(value: boolean);
    /** Where to locate the legend. This can be bottom or right at the moment. */
    set legendPlacement(value: string);
    /**  An empty message will be displayed when there is no chart data. */
    set emptyMessage(value: SohoEmptyMessageOptions);
    /** Add extra attributes like id's to the component **/
    set attributes(value: Array<Object> | Object);
    selected: EventEmitter<SohoRadarSelectEvent>;
    unselected: EventEmitter<SohoRadarSelectEvent>;
    rendered: EventEmitter<Object>;
    dblclick: EventEmitter<Object>;
    /**
     * @todo remove override of native elements
     */
    contextmenu: EventEmitter<Object[]>;
    private jQueryElement?;
    private radar?;
    private updateRequired;
    constructor(element: ElementRef, ngZone: NgZone);
    /** Setup */
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    /** Tear Down */
    ngOnDestroy(): void;
    setSelected(selected: SohoRadarSelected): void;
    toggleSelected(selected: SohoRadarSelected): void;
    getSelected(): Object | Object[] | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoRadarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoRadarComponent, "[soho-radar]", never, { "dataset": { "alias": "dataset"; "required": false; }; "redrawOnResize": { "alias": "redrawOnResize"; "required": false; }; "margin": { "alias": "margin"; "required": false; }; "levels": { "alias": "levels"; "required": false; }; "maxValue": { "alias": "maxValue"; "required": false; }; "labelFactor": { "alias": "labelFactor"; "required": false; }; "wrapWidth": { "alias": "wrapWidth"; "required": false; }; "opacityArea": { "alias": "opacityArea"; "required": false; }; "dotRadius": { "alias": "dotRadius"; "required": false; }; "opacityCircles": { "alias": "opacityCircles"; "required": false; }; "strokeWidth": { "alias": "strokeWidth"; "required": false; }; "roundStrokes": { "alias": "roundStrokes"; "required": false; }; "showCrosslines": { "alias": "showCrosslines"; "required": false; }; "showAxisLabels": { "alias": "showAxisLabels"; "required": false; }; "colors": { "alias": "colors"; "required": false; }; "showTooltips": { "alias": "showTooltips"; "required": false; }; "tooltip": { "alias": "tooltip"; "required": false; }; "axisFormatter": { "alias": "axisFormatter"; "required": false; }; "showLegend": { "alias": "showLegend"; "required": false; }; "legendPlacement": { "alias": "legendPlacement"; "required": false; }; "emptyMessage": { "alias": "emptyMessage"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; }, { "selected": "selected"; "unselected": "unselected"; "rendered": "rendered"; "dblclick": "dblclick"; "contextmenu": "contextmenu"; }, never, ["*"], false, never>;
}

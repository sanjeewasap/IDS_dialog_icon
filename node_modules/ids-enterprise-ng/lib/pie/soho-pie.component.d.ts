/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoPieComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    /** Options. */
    private options;
    get isPie(): boolean;
    /** Defines the data to use, must be specified for this component. */
    set dataset(dataset: Array<any>);
    /** If true it renders as a donut chart. */
    set isDonut(value: boolean);
    /** Controls the animation speed. */
    set animationSpeed(value: number);
    /** true|false - will do or not do the animation and 'initial' will do only first time the animation. */
    set animate(value: any);
    /** If true, the component will not resize when resizing the page. There is tooltip values provided.
     * It will not be shown. If you still want lines at the lower breakpoint you can set this to true */
    set redrawOnResize(value: boolean);
    /** If false the center label will not be shown. */
    set hideCenterLabel(value: boolean);
    /** If false connector lines wont be shown. */
    set showLines(value: boolean);
    /** This defaults to false, when false and under 450px the lines. */
    set showLinesMobile(value: boolean);
    /** A setting that controls the line values and format. */
    set lines(value: SohoPieLinesOptions);
    /** If false the legend will not be shown. */
    set showLegend(value: boolean);
    /** Where to locate the legend. This can be bottom or right at the moment. */
    set legendPlacement(value: string);
    /** Where to locate the legend. This can be bottom or right at the moment. */
    set forceLegendPopup(value: boolean);
    /** A setting that controls the legend values and format. */
    set legend(value: SohoPieLegendOptions);
    /** If false now tooltips will be shown */
    set showTooltips(value: boolean);
    /** A setting that controls the tooltip values and format. */
    set tooltip(value: SohoPieTooltipOptions);
    /** If true center tooltip will be shown */
    set showCenterTooltip(value: boolean);
    /** If true chart height will fit in parent available height. */
    set fitHeight(value: boolean);
    /** An empty message will be displayed when there is no chart data. */
    set emptyMessage(value: SohoEmptyMessageOptions);
    /** Events */
    selected: EventEmitter<SohoPieSelectEvent>;
    unselected: EventEmitter<SohoPieSelectEvent>;
    rendered: EventEmitter<Object>;
    dblclick: EventEmitter<Object>;
    /**
     * @todo remove override of native element
     */
    contextmenu?: EventEmitter<Object[]>;
    private jQueryElement?;
    private pie?;
    private updateRequired;
    constructor(element: ElementRef, ngZone: NgZone);
    /** Setup */
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    updated(): void;
    /** Tear Down */
    ngOnDestroy(): void;
    setSelected(selected: SohoPieSelected): void;
    toggleSelected(selected: SohoPieSelected): void;
    getSelected(): Object | Object[] | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoPieComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoPieComponent, "[soho-pie]", never, { "dataset": { "alias": "dataset"; "required": false; }; "isDonut": { "alias": "isDonut"; "required": false; }; "animationSpeed": { "alias": "animationSpeed"; "required": false; }; "animate": { "alias": "animate"; "required": false; }; "redrawOnResize": { "alias": "redrawOnResize"; "required": false; }; "hideCenterLabel": { "alias": "hideCenterLabel"; "required": false; }; "showLines": { "alias": "showLines"; "required": false; }; "showLinesMobile": { "alias": "showLinesMobile"; "required": false; }; "lines": { "alias": "lines"; "required": false; }; "showLegend": { "alias": "showLegend"; "required": false; }; "legendPlacement": { "alias": "legendPlacement"; "required": false; }; "forceLegendPopup": { "alias": "forceLegendPopup"; "required": false; }; "legend": { "alias": "legend"; "required": false; }; "showTooltips": { "alias": "showTooltips"; "required": false; }; "tooltip": { "alias": "tooltip"; "required": false; }; "showCenterTooltip": { "alias": "showCenterTooltip"; "required": false; }; "fitHeight": { "alias": "fitHeight"; "required": false; }; "emptyMessage": { "alias": "emptyMessage"; "required": false; }; }, { "selected": "selected"; "unselected": "unselected"; "rendered": "rendered"; "dblclick": "dblclick"; "contextmenu": "contextmenu"; }, never, ["*"], false, never>;
}

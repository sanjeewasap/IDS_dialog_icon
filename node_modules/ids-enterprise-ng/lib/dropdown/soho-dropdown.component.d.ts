/// <reference types="ids-enterprise-typings" />
/// <reference types="jquery" />
import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, NgZone, AfterViewChecked, ChangeDetectorRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import * as i0 from "@angular/core";
/**
 * Angular wrapper for the `dropdown` widget in the ids-enterprise controls.
 */
export declare class SohoDropDownComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    ngControl: NgControl;
    ref: ChangeDetectorRef;
    /**
     * Used to provide unnamed controls with a unique id.
     */
    private static counter;
    /**
     * Flag to force an update of the control after the view is created.
     */
    private runUpdatedOnCheck?;
    /**
     * Integration with the Angular ControlValueAccessor for form controls.
     */
    private valueAccessor?;
    /**
     * Selector for originating element.
     */
    private jQueryElement?;
    /**
     * Reference to the IDS Enterprise Api.
     */
    private dropdown?;
    /**
     * Default block of options, use the accessors to modify.
     */
    private options;
    private isReadOnly?;
    /**
     * Sets the dropdown to close on selecting a value (helpful for multi-select)
     */
    set closeOnSelect(closeOnSelect: boolean | undefined);
    get closeOnSelect(): boolean | undefined;
    /**
     * Append a css class to the dropdown-list
     */
    set cssClass(cssClass: string | undefined);
    get cssClass(): string | undefined;
    /**
     * Typing debounce for search
     */
    set delay(delay: number | undefined);
    get delay(): number | undefined;
    /**
     * Sets the icon used as the Dropdown Indicator
     */
    set dropdownIcon(icon: string | undefined);
    get dropdownIcon(): string | undefined;
    /**
     * Initialize the empty value
     */
    set empty(empty: boolean | undefined);
    get empty(): boolean | undefined;
    /**
     * Value of the maximum number of selected elements (must have multiple set to true)
     */
    set maxSelected(maxSelected: number | undefined);
    get maxSelected(): number | undefined;
    /**
     * Flag to move the selected values to the top of the dropdown
     *
     * @deprecated use moveSelected
     */
    set moveSelectedToTop(moveSelectedToTop: boolean | undefined);
    get moveSelectedToTop(): boolean | undefined;
    set moveSelected(moveSelected: SohoDropDownMoveSelectedOptions | undefined);
    get moveSelected(): SohoDropDownMoveSelectedOptions | undefined;
    set showEmptyGroupHeaders(showEmptyGroupHeaders: boolean | undefined);
    get showEmptyGroupHeaders(): boolean | undefined;
    set sourceArguments(sourceArguments: any);
    get sourceArguments(): any;
    /**
     * Determines the frequency of reloading data from an external source
     */
    set reload(reload: SohoDropDownReloadStyles);
    get reload(): SohoDropDownReloadStyles;
    /**
     * If set the width of the dropdown is limited to this pixel width.
     * Use 300 for the 300 px size fields. Default is size of the largest data.
     */
    set maxWidth(maxWidth: number | undefined);
    get maxWidth(): number | undefined;
    /**
     * Sets the exact width of the open list, by default its the size of the field
     */
    set width(width: number | undefined);
    get width(): number | undefined;
    set filterMode(filterMode: SohoDropDownFilterModeOptions | undefined);
    get filterMode(): SohoDropDownFilterModeOptions | undefined;
    set virtualScroll(virtualScroll: boolean | undefined);
    get virtualScroll(): boolean | undefined;
    /**
     * Sets the select element as a multi-select
     */
    set multiple(multiple: boolean | undefined);
    get multiple(): boolean | undefined;
    /**
     * Name for the dropdown control. Necessary for ngModel to function.
     */
    name: string;
    /**
     * Flag to add/remove search functionality from the dropdown
     */
    set noSearch(noSearch: boolean | undefined);
    get noSearch(): boolean | undefined;
    /**
     * Existent as a helper... should use framework's API to get data and
     * then create and pass to the control to use
     */
    set source(source: SohoDropDownSourceFunction | Object | string | undefined);
    get source(): SohoDropDownSourceFunction | Object | string | undefined;
    /**
     * Initialize the showSelectAll value for multi-select drop downs
     */
    set showSelectAll(selectAll: boolean | undefined);
    get showSelectAll(): boolean | undefined;
    /**
     * Initialize the showTags value for multi-select drop downs
     */
    set showTags(showTags: boolean | undefined);
    get showTags(): boolean | undefined;
    /**
     * If true, moves the Searchfield in the Dropdown list from directly on top of the pseudo-lement
     * to underneath/above, providing visibility into the currently selected results.
     */
    set showSearchUnderSelected(showSearchUnderSelected: boolean | undefined);
    get showSearchUnderSelected(): boolean | undefined;
    /**
     * If defined, passes along 'clickHandler' and 'dismissHandler' functions to any Tags
     */
    set tagSettings(tagSettings: any);
    get tagSettings(): any;
    /**
     * If defined, passes along 'clickHandler' and 'dismissHandler' functions to any Tags
     */
    set allTextString(allTextString: string | undefined);
    get allTextString(): string | undefined;
    /**
     * @param appendTo additional classes
     */
    set appendTo(appendTo: string);
    /**Custom text string for `Selected` text header use in MultiSelect */
    set selectedTextString(selectedTextString: string);
    get selectedTextString(): string;
    set attributes(attributes: Array<Object> | Object | undefined);
    get attributes(): Array<Object> | Object | undefined;
    /**
     * Called when the dropdown value changes
     *
     * @todo replace override of native attribute
     */
    change$: EventEmitter<JQuery.TriggeredEvent<any, any, any, any>>;
    /**
     * Called when the dropdown updates in some way.
     */
    updated$: EventEmitter<JQuery.TriggeredEvent<any, any, any, any>>;
    /**
     * Fired when the dropdown list is closed.
     */
    listClosed$: EventEmitter<SohoDropDownEvent>;
    /**
     * Fired when the dropdown list is opened.
     */
    listOpened$: EventEmitter<SohoDropDownEvent>;
    /**
     * This event is fired when a key is pressed
     */
    keydown$: EventEmitter<Event>;
    /**
     * Bind attributes to the host select element
     */
    /**
     * Assign the id for the control
     * (maps to the name to use on a label's 'for' attribute)
     */
    get id(): string;
    get isMultiple(): boolean | undefined;
    get isDropdown(): boolean;
    get isMultiSelect(): boolean | undefined;
    set readonly(readonly: boolean | undefined);
    get readonly(): boolean | undefined;
    /**
     * Creates an instance of SohoDropDownComponent.
     *
     * @param element the element this component encapsulates.
     * @param ngZone the angular zone for this component
     * @param ngControl any associated form control (optional)
     * @param ref the change detector reference, must not be null.
     */
    constructor(element: ElementRef, ngZone: NgZone, ngControl: NgControl, ref: ChangeDetectorRef);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    /**
     * Event handler for the 'requestend' event on the dropdown 'component'.
     *
     *
     * @param event the standard jQuery event.
     * @param data any data passed by the dropdown (todo the type)
     *
     */
    private onRequestEnd;
    private onUpdated;
    /**
     * Event handler for the 'changed' event on the 'dropdown' component.
     *
     *
     * @param event the standard jQuery event.
     *
     */
    private onChanged;
    /**
     * Handles the 'listopened' event triggered by the underlying jQuery control.
     *
     * @param event the fired event.
     */
    private onListOpened;
    /**
     * Handles the 'listclosed' event triggered by the underlying jQuery control.
     *
     * @param event the fired event.
     */
    private onListClosed;
    /**
     * In case options are being bound asynchronously, you will need to trigger updated on
     * soho dropdown control so it updates its value labels.
     */
    updated(): SohoDropDownComponent;
    set disabled(value: boolean);
    /**
     * @description
     *
     * Soho-dropdown is not a native element - need this to set focus programmatically.
     * 'name' attribute must be set on the control for this to work correctly.
     */
    setFocus(): void;
    /**
     * @description
     *
     * Sets the value of the dropdown.
     *
     * @todo this may need to involve mapping from actual value
     * if ngModel is used.
     *
     * This is the model value that is to be set.
     * @param value - the internal value to select
     */
    selectValue(value: any): void;
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoDropDownComponent, [null, null, { optional: true; self: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoDropDownComponent, "select[soho-dropdown]", never, { "closeOnSelect": { "alias": "closeOnSelect"; "required": false; }; "cssClass": { "alias": "cssClass"; "required": false; }; "delay": { "alias": "delay"; "required": false; }; "dropdownIcon": { "alias": "dropdownIcon"; "required": false; }; "empty": { "alias": "empty"; "required": false; }; "maxSelected": { "alias": "maxSelected"; "required": false; }; "moveSelectedToTop": { "alias": "moveSelectedToTop"; "required": false; }; "moveSelected": { "alias": "moveSelected"; "required": false; }; "showEmptyGroupHeaders": { "alias": "showEmptyGroupHeaders"; "required": false; }; "sourceArguments": { "alias": "sourceArguments"; "required": false; }; "reload": { "alias": "reload"; "required": false; }; "maxWidth": { "alias": "maxWidth"; "required": false; }; "width": { "alias": "width"; "required": false; }; "filterMode": { "alias": "filterMode"; "required": false; }; "virtualScroll": { "alias": "virtualScroll"; "required": false; }; "multiple": { "alias": "multiple"; "required": false; }; "name": { "alias": "name"; "required": false; }; "noSearch": { "alias": "noSearch"; "required": false; }; "source": { "alias": "source"; "required": false; }; "showSelectAll": { "alias": "showSelectAll"; "required": false; }; "showTags": { "alias": "showTags"; "required": false; }; "showSearchUnderSelected": { "alias": "showSearchUnderSelected"; "required": false; }; "tagSettings": { "alias": "tagSettings"; "required": false; }; "allTextString": { "alias": "allTextString"; "required": false; }; "appendTo": { "alias": "appendTo"; "required": false; }; "selectedTextString": { "alias": "selectedTextString"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; }, { "change$": "change"; "updated$": "updated"; "listClosed$": "listclosed"; "listOpened$": "listopened"; "keydown$": "keydown"; }, never, ["*"], false, never>;
}

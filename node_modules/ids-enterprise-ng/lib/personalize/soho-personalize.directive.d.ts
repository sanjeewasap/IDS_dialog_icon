/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="jquery" />
import { AfterViewInit, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the enterprise personalise widget.
 *
 * This component searches for an element with the attribute
 * 'soho-personalize'.
 */
export declare class SohoPersonalizeDirective implements AfterViewInit, OnDestroy {
    private ngZone;
    /** Options. */
    options: SohoPersonalizeOptions;
    /** The starting color. */
    set colors(colors: string | SohoPersonalizeColors);
    /** The starting theme. */
    set theme(theme: string);
    changetheme: EventEmitter<SohoChangeThemePersonalizeEvent>;
    changecolors: EventEmitter<SohoChangeColorsPersonalizeEvent>;
    /** EP api */
    private personalize?;
    /** jQuery Widget */
    private jQueryElement?;
    /**
     * Constructor.
     */
    constructor(ngZone: NgZone);
    /**
     * After the control has been initialised, and the view is ready,
     * get the SoHoXi controls to apply any renderings.
     */
    ngAfterViewInit(): void;
    /**
     * The theme currently set
     */
    get currentTheme(): SohoTheme;
    /**
     * Return a list of all the available themes.
     *
     * @returns The list of themes.
     */
    themes(): SohoTheme[];
    /**
     * Return the colors used in the current theme that are recommended for personalization.
     *
     * @returns An object full of the colors with id, name, and hex value.
     */
    personalizationColors(): SohoPersonalizationColors;
    onChangeTheme(e: JQuery.TriggeredEvent, theme: string): void;
    onChangeColors(e: JQuery.TriggeredEvent, colors: any): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoPersonalizeDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SohoPersonalizeDirective, "[soho-personalize]", never, { "options": { "alias": "options"; "required": false; }; "colors": { "alias": "colors"; "required": false; }; "theme": { "alias": "theme"; "required": false; }; }, { "changetheme": "changetheme"; "changecolors": "changecolors"; }, never, never, false, never>;
}

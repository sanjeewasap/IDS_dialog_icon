/// <reference types="ids-enterprise-typings" />
import { NgZone } from "@angular/core";
/**
 * Wrapper for the jQuery about control.
 */
export declare class SohoAboutRef {
    private ngZone;
    private eventGuard;
    /** Selector referencing the about-dialog after it has been moved to the dialog container. */
    private jQueryElement?;
    /** Soho Control Api */
    private _about?;
    /** Dialog placeholder, defaults to $('body')*/
    private _placeholder;
    /**
     * Cached options.
     */
    private _options;
    /**
     * Sets the whole options block for this modal dialog.
     *
     * @param options - the options to set.
     */
    options(options?: SohoAboutOptions): SohoAboutRef;
    /**
     * Sets the appName on the about dialog
     *
     * @param appName - the application name
     */
    appName(appName: string): SohoAboutRef;
    /**
     * Sets the additional 'content' that the about dialog displays.
     *
     * @param content - the additional text content
     */
    content(content: string): SohoAboutRef;
    /**
     * Sets the copyrightYear of the about dialog.
     */
    copyrightYear(copyrightYear: string): SohoAboutRef;
    /**
     * Sets Whether or not to show the deviceSpecs
     *
     * @param deviceSpecs - if true; the about dialog will show device info
     */
    deviceSpecs(deviceSpecs: boolean): SohoAboutRef;
    /**
     * Sets The Additional productName
     *
     * @param productName - the product name
     */
    productName(productName: string): SohoAboutRef;
    /**
     * Sets The Additional productName
     *
     * @param productName - the product name
     */
    useDefaultCopyright(useDefaultCopyright: boolean): SohoAboutRef;
    /**
     * Sets about dialog version
     *
     * @param version - the semantic version no fx 4.0.1
     */
    version(version: string): SohoAboutRef;
    /**
     * Add extra attributes like id's to the component
     *
     * @param attributes - the array or object of attributes to add
     */
    attributes(attributes: Array<Object> | Object): SohoAboutRef;
    /**
     * Constructor.
     *
     * @param placeholder for the about dialog; defaults to the body.
     */
    constructor(ngZone: NgZone);
    /**
     * Displays the about dialog.
     *
     * @return the dialog ref.
     */
    open(): SohoAboutRef;
    /**
     * Closes the about dialog, if open.
     *
     * @param dialogResult - optional result - held for the caller.
     */
    close(): SohoAboutRef;
    /**
     * Registers a before open guard.
     *
     * @param eventFn - the function to call before openning the dialog.
     */
    beforeOpen(eventFn: (dialogRef?: SohoAboutRef) => boolean): SohoAboutRef;
    /**
     * Registers a closed guard.
     *
     * @param eventFn - the function to call before openning the dialog.
     */
    closed(eventFn: (dialogRef?: SohoAboutRef) => boolean): SohoAboutRef;
    /**
     * Registers a after close guard.
     *
     * @param eventFn - the function to call before openning the dialog.
     */
    afterClose(eventFn: (dialogRef?: SohoAboutRef) => boolean): SohoAboutRef;
    /**
     * Handles the 'beforeOpen' event, fired before the modal dialog
     * has been opened.
     *
     * @param event - full event object.
     *
     * @return true if the dialog can be opened; otherwise false if veoted.
     */
    private onBeforeOpen;
    /**
     * Handles the 'closed' event, fired before the modal dialog
     * has been opened.
     *
     * @param event - full event object.
     *
     * @return true if the dialog can be opened; otherwise false if veoted.
     */
    private onClose;
    /**
     * Handles the 'afterClose' event, fired before the modal dialog
     * has been opened.
     *
     * @param event - full event object.
     *
     * @return true if the dialog can be opened; otherwise false if veoted.
     */
    private onAfterClose;
}
/**
 * Event Handlers.
 */
export interface SohoAboutDialogEventGuard {
    /**
     * Invoked before a modal is opened.
     *
     * @return false to veto the open action; otherwise true.
     */
    beforeOpen?(dialogRef: SohoAboutRef): boolean;
    /**
     * Invoked when closing a modal.
     *
     * @return false to veto the open action; otherwise true.
     */
    closed?(dialogRef: SohoAboutRef): boolean;
    /**
     * Invoked after the modal is closed.
     *
     * @return false to veto the open action; otherwise true.
     */
    afterClose?(dialogRef: SohoAboutRef): boolean;
}

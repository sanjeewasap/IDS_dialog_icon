/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoLineComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    /** Options. */
    private options;
    get isLine(): boolean;
    /** Defines the data to use, must be specified for this component. */
    set dataset(dataset: Array<any>);
    set tooltip(value: string);
    set isArea(value: boolean);
    set isBubble(value: boolean);
    set showLegend(value: boolean);
    set xAxis(value: object);
    set yAxis(value: object);
    set hideDots(value: boolean);
    set axisLabels(value: any);
    set animate(value: boolean);
    set redrawOnResize(value: boolean);
    set dots(value: object);
    set formatterString(value: string);
    set emptyMessage(value: SohoEmptyMessageOptions);
    selected: EventEmitter<SohoLineSelectEvent>;
    unselected: EventEmitter<SohoLineSelectEvent>;
    rendered: EventEmitter<Object>;
    dblclick: EventEmitter<Object>;
    /**
     * @todo replace override of native attribute
     */
    contextmenu: EventEmitter<Object>;
    private jQueryElement?;
    private line?;
    private updateRequired;
    constructor(element: ElementRef, ngZone: NgZone);
    /** Setup */
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    updated(): void;
    /** Tear Down */
    ngOnDestroy(): void;
    setSelected(selected: SohoLineSelected): void;
    toggleSelected(selected: SohoLineSelected): void;
    getSelected(): Object | Object[] | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoLineComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoLineComponent, "[soho-line]", never, { "dataset": { "alias": "dataset"; "required": false; }; "tooltip": { "alias": "tooltip"; "required": false; }; "isArea": { "alias": "isArea"; "required": false; }; "isBubble": { "alias": "isBubble"; "required": false; }; "showLegend": { "alias": "showLegend"; "required": false; }; "xAxis": { "alias": "xAxis"; "required": false; }; "yAxis": { "alias": "yAxis"; "required": false; }; "hideDots": { "alias": "hideDots"; "required": false; }; "axisLabels": { "alias": "axisLabels"; "required": false; }; "animate": { "alias": "animate"; "required": false; }; "redrawOnResize": { "alias": "redrawOnResize"; "required": false; }; "dots": { "alias": "dots"; "required": false; }; "formatterString": { "alias": "formatterString"; "required": false; }; "emptyMessage": { "alias": "emptyMessage"; "required": false; }; }, { "selected": "selected"; "unselected": "unselected"; "rendered": "rendered"; "dblclick": "dblclick"; "contextmenu": "contextmenu"; }, never, ["*"], false, never>;
}

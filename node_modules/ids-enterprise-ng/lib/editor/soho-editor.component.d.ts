/// <reference types="ids-enterprise-typings" />
/// <reference types="jquery" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, OnDestroy, NgZone, ChangeDetectorRef } from '@angular/core';
import { BaseControlValueAccessor } from '../utils/base-control-value-accessor';
import * as i0 from "@angular/core";
export declare class SohoEditorComponent extends BaseControlValueAccessor<any> implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    private ref;
    private options;
    /**
     * Local variables
     */
    /**
     * Flag to force an update of the control after the view is created.
     */
    private runUpdatedOnCheck?;
    private isDisabled?;
    private isReadOnly?;
    get isEditor(): boolean;
    /**
     * Enables or disables the control
     */
    set disabled(value: boolean | undefined);
    get disabled(): boolean | undefined;
    /**
     * Sets the control to readonly
     */
    set readonly(value: boolean | undefined);
    get readonly(): boolean | undefined;
    set delay(delay: number);
    set firstHeader(firstHeader: string);
    set secondHeader(secondHeader: string);
    set placeholder(placeholder: string);
    set anchor(anchor: SohoEditorAnchor);
    set image(image: SohoEditorOptionsImage);
    set buttons(buttons: SohoEditorButtons);
    /**
     * onLinkClick Callback for Editor clicks
     */
    set onLinkClick(value: (e: JQuery.TriggeredEvent, elem: any) => void);
    set showHtmlView(showHtmlView: boolean);
    set preview(preview: boolean);
    set rows(rows: SohoEditorRows);
    set attributes(attributes: Array<Object> | Object);
    /**
     * Called when the editor value changes
     *
     * @todo replace override of native attribute
     */
    change: EventEmitter<SohoEditorEvent>;
    /**
     * Called when the editor updates in some way
     */
    updated: EventEmitter<SohoEditorEvent>;
    private jQueryElement?;
    private editor?;
    /**
     * Creates an instance of SohoEditorComponent.
     *
     * @param element the element this component encapsulates.
     * @param ngZone the angualar zone for this component.
     * @param ref reference to the change detector
     */
    constructor(element: ElementRef<HTMLElement>, ngZone: NgZone, ref: ChangeDetectorRef);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    /**
     * Handle the control being changed.
     */
    onChange(_event: SohoEditorEvent): void;
    onUpdated(event: SohoEditorEvent): void;
    /**
     *
     * @param value Handle model updates.
     */
    writeValue(value: any): void;
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled: boolean): void;
    ngOnDestroy(): void;
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoEditorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoEditorComponent, "[soho-editor]", never, { "disabled": { "alias": "disabled"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "delay": { "alias": "delay"; "required": false; }; "firstHeader": { "alias": "firstHeader"; "required": false; }; "secondHeader": { "alias": "secondHeader"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "anchor": { "alias": "anchor"; "required": false; }; "image": { "alias": "image"; "required": false; }; "buttons": { "alias": "buttons"; "required": false; }; "onLinkClick": { "alias": "onLinkClick"; "required": false; }; "showHtmlView": { "alias": "showHtmlView"; "required": false; }; "preview": { "alias": "preview"; "required": false; }; "rows": { "alias": "rows"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; }, { "change": "change"; "updated": "updated"; }, never, ["*"], false, never>;
}

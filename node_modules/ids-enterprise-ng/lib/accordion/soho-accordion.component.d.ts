/// <reference types="ids-enterprise-typings" />
/// <reference types="jquery" />
/// <reference types="jquery" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy, QueryList } from '@angular/core';
import { SohoAccordionHeaderComponent } from './soho-accordion-header.component';
import { SohoAccordionPaneComponent } from './soho-accordion-pane.component';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the Soho Accordion control.
 *
 * This component searches for an element, annotated with the `soho-accordion` attribute,
 * and then matches this component to it.
 * <br>
 * The characteristics of the component can be controlled using the set of inputs.
 *
 * The Accordion is a grouped set of collapsible panels used to navigate sections of
 * related content. Each panel consists of two levels: the top level identifies the
 * category or section header, and the second level provides the associated options.
 */
export declare class SohoAccordionComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    headers: QueryList<SohoAccordionHeaderComponent>;
    panes: QueryList<SohoAccordionPaneComponent>;
    options: SohoAccordionOptions;
    /** Reference to the jQuery selector. */
    private jQueryElement;
    /**
     * References to the Soho control api.
     */
    private accordion;
    /**
     * Used to call updated from the afterViewChecked lifecycle event.
     */
    private updateRequired?;
    beforeexpandEvent: EventEmitter<any>;
    beforecollapseEvent: EventEmitter<any>;
    beforeselectEvent: EventEmitter<any>;
    selectedEvent: EventEmitter<any>;
    followlinkEvent: EventEmitter<any>;
    expandEvent: EventEmitter<any>;
    afterexpandEvent: EventEmitter<any>;
    collapseEvent: EventEmitter<any>;
    aftercollapseEvent: EventEmitter<any>;
    /**
     * If an Accordion pane is open, and that pane contains sub-headers, only one
     * of the pane's sub-headers can be open at a time.
     *
     * Defaults to true.
     *
     * If set to true, allows only one pane of the accordion to be open at a time.
     */
    set allowOnePane(allowOnePane: boolean | undefined);
    get allowOnePane(): boolean | undefined;
    /**
     * Displays a "Chevron" icon that sits off to the right-most side of a top-level accordion header.
     * Used in place of an Expander (+/-) if enabled.
     *
     *
     */
    set displayChevron(displayChevron: boolean | undefined);
    get displayChevron(): boolean | undefined;
    /**
     * Changes the iconography used in accordion header expander buttons.
     */
    set expanderDisplay(expanderDisplay: SohoAccordionExpanderType | undefined);
    get expanderDisplay(): SohoAccordionExpanderType | undefined;
    /**
     * Can be set to false if routing is externally handled, otherwise
     * links are handled normally.
     */
    set rerouteOnLinkClick(rerouteOnLinkClick: boolean | undefined);
    get rerouteOnLinkClick(): boolean | undefined;
    /**
     * Add a alert badge to the accordion header (used for App menu)
     */
    set notificationBadge(notificationBadge: boolean | undefined);
    get notificationBadge(): boolean | undefined;
    /**
     * A callback function that when implemented provided a call back for "ajax loading" of tab contents on open.
     */
    set source(source: Function | undefined);
    get source(): Function | undefined;
    /**
     * Display accordion with panels
     */
    set hasPanels(hasPanels: boolean | undefined);
    get hasPanels(): boolean | undefined;
    /**
     * Set the color scheme to inverse
     */
    set inverse(inverse: boolean | undefined);
    get inverse(): boolean | undefined;
    /**
     * Set the color scheme to alternate
     */
    set alternate(bool: boolean | undefined);
    get alternate(): boolean | undefined;
    /**
     * Enables tooltips for longer text that is handled with ellipsis
     */
    set enableTooltips(enableTooltips: boolean | undefined);
    get enableTooltips(): boolean | undefined;
    hasSubheaderSeparators?: boolean;
    /** Enables Module Nav variant */
    moduleNav?: boolean;
    /**
     * Constructor.
     *
     * @param elementRef - the element matching the component's selector.
     * @param ngZone - zone access.
     */
    constructor(element: ElementRef, ngZone: NgZone);
    /**
     * Makes provided accordion headers appear "selected"
     */
    select(header: SohoAccordionHeaderComponent | string): void;
    /**
     * Makes provided accordion headers appear "deselected"
     */
    deselect(header: SohoAccordionHeaderComponent | string): void;
    /**
     * Makes all accordion headers appear "deselected"
     */
    deselectAll(): void;
    /**
     * Get's the nth header from the accordion.
     *
     * @todo - how best to access the headers?
     *
     * @param index - the index of the accordion header.
     * @return the header at the given index.
     */
    getHeader(index: number): SohoAccordionHeaderComponent | undefined;
    /**
     * Expand the given Panel on the Accordion.
     *
     * @param header &nbsp;-&nbsp; the header component
     */
    expand(header: SohoAccordionHeaderComponent | string): void;
    /**
     * Collapse the given Panel on the Accordion.
     *
     * @param header &nbsp;-&nbsp; the jquery header element
     */
    collapse(header: SohoAccordionHeaderComponent | string): void;
    /**
     * Expands all accordion headers, if possible.
     */
    expandAll(): void;
    /**
     * Collapses all the expanded panels.
     *
     *
     */
    collapseAll(): void;
    /**
     * Disables the control.
     */
    disable(): void;
    /**
     * Enables the control.
     */
    enable(): void;
    /**
     * Returns true if the given header is currently disabled or the whole accordion
     * is disabled; otherwise false.
     *
     * @param header the accordion header panel to check.
     */
    isDisabled(header: SohoAccordionHeaderComponent): boolean;
    /**
     * Returns true if the given header is currently expanded; otherwise
     * false.
     *
     * @param header the accordion header panel to check.
     */
    isExpanded(header: SohoAccordionHeaderComponent): boolean;
    /**
     * Toggle the given Panel on the Accordion between expanded and collapsed
     *
     * @param header &nbsp;-&nbsp; the jquery header element
     */
    toggle(header: SohoAccordionHeaderComponent): void;
    /**
     * Call to notify the accordion about any dom changes
     */
    updated(headers?: JQuery[], settings?: SohoAccordionOptions): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    /**
     * Destructor.
     */
    ngOnDestroy(): void;
    private markForUpdate;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoAccordionComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoAccordionComponent, "soho-accordion, [soho-accordion]", never, { "allowOnePane": { "alias": "allowOnePane"; "required": false; }; "displayChevron": { "alias": "displayChevron"; "required": false; }; "expanderDisplay": { "alias": "expanderDisplay"; "required": false; }; "rerouteOnLinkClick": { "alias": "rerouteOnLinkClick"; "required": false; }; "notificationBadge": { "alias": "notificationBadge"; "required": false; }; "source": { "alias": "source"; "required": false; }; "hasPanels": { "alias": "hasPanels"; "required": false; }; "inverse": { "alias": "inverse"; "required": false; }; "alternate": { "alias": "alternate"; "required": false; }; "enableTooltips": { "alias": "enableTooltips"; "required": false; }; "hasSubheaderSeparators": { "alias": "hasSubheaderSeparators"; "required": false; }; "moduleNav": { "alias": "moduleNav"; "required": false; }; }, { "beforeexpandEvent": "beforeexpand"; "beforecollapseEvent": "beforecollapse"; "beforeselectEvent": "beforeselect"; "selectedEvent": "selected"; "followlinkEvent": "followlink"; "expandEvent": "expand"; "afterexpandEvent": "afterexpand"; "collapseEvent": "collapse"; "aftercollapseEvent": "aftercollapse"; }, ["headers", "panes"], ["*"], false, never>;
}

/// <reference types="ids-enterprise-typings" />
/// <reference types="jquery" />
/// <reference types="jquery" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, OnDestroy, NgZone, ChangeDetectorRef } from '@angular/core';
import { BaseControlValueAccessor } from '../utils/base-control-value-accessor';
import * as i0 from "@angular/core";
export declare class SohoTimePickerComponent extends BaseControlValueAccessor<any> implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    ref: ChangeDetectorRef;
    private runUpdatedOnCheck?;
    /**
     * Local variables
     */
    private jQueryElement?;
    private timepicker?;
    private isDisabled?;
    private isReadOnly?;
    private options?;
    /**
     * Indicates mode, either 'standard' or 'range'; default value is 'standard'
     */
    set mode(mode: SohoTimePickerMode);
    /**
     * Indicates the pattern for the time format.
     */
    set timeFormat(timeFormat: string);
    /**
     * An integer from 1 to 60; multiples of this value are displayed as options in the minutes dropdown;
     * default value is 5.
     */
    set minuteInterval(minuteInterval: number);
    /**
     * If a non-matching minutes value is entered, will round the minutes value to the nearest interval on the blur event;
     * default value is false;
     */
    set roundToInterval(roundToInterval: boolean);
    /**
     * The name of the locale to use for this instance. If not set, the current locale will be used.
     */
    set locale(locale: string);
    /**
     * The name of the language to use for this instance. If not set, the current locale will be used or the the passed locale will be used.
     */
    set language(language: string);
    /**
     * An integer from 1 to 60; multiples of this value are displayed as options in the seconds dropdown;
     * default value is 5.
     */
    set secondInterval(secondInterval: number);
    /**
     * If defined as a JQuery-wrapped element, will be used as the target element.
     */
    set parentElement(parentElement: JQuery);
    /**
     * If set to false, focus will not be returned to the calling element;
     * default value is true.
     */
    set returnFocus(returnFocus: boolean);
    /** Add extra attributes like id's to the component **/
    set attributes(attributes: Array<Object> | Object);
    /**
     * Set the input to tabbable
     */
    set tabbable(tabbable: boolean);
    /**
     * Sets the control to be disabled or not.
     */
    set disabled(value: boolean | undefined);
    /**
     * Public API
     */
    get disabled(): boolean | undefined;
    /**
     * Sets the control to readonly
     */
    set readonly(value: boolean | undefined);
    get readonly(): boolean | undefined;
    /**
     * Called when the datepicker value changes
     *
     * @todo remove override of native attribute.
     */
    change: EventEmitter<SohoTimePickerEvent>;
    setValue(time: string | undefined): void;
    /**
     * Bind attributes to the host input element
     */
    get isTimepicker(): boolean;
    /**
     * Creates an instance of SohoTimePickerComponent.
     *
     * @param element the element this component encapsulates.
     * @param ngZone the angular zone for this component.
     * @param ref reference to the change detector
     *
     */
    constructor(element: ElementRef, ngZone: NgZone, ref: ChangeDetectorRef);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    /**
     * Handle the control being changed.
     */
    onChange(event: SohoTimePickerEvent): void;
    /**
     * Override writeValue to allow the time picker
     * element to be updated correctly.
     *
     * @param value - the new value
     */
    writeValue(value: any): void;
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoTimePickerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoTimePickerComponent, "input[soho-timepicker]", never, { "mode": { "alias": "mode"; "required": false; }; "timeFormat": { "alias": "timeFormat"; "required": false; }; "minuteInterval": { "alias": "minuteInterval"; "required": false; }; "roundToInterval": { "alias": "roundToInterval"; "required": false; }; "locale": { "alias": "locale"; "required": false; }; "language": { "alias": "language"; "required": false; }; "secondInterval": { "alias": "secondInterval"; "required": false; }; "parentElement": { "alias": "parentElement"; "required": false; }; "returnFocus": { "alias": "returnFocus"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "tabbable": { "alias": "tabbable"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; }, { "change": "change"; }, never, ["*"], false, never>;
}

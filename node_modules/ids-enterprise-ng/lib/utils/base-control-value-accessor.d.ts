import { ControlValueAccessor } from '@angular/forms';
export declare const NOOP: any;
/**
 * Base class for new components that need to support NgForms.
 */
export declare class BaseControlValueAccessor<T> implements ControlValueAccessor {
    /** Current value. */
    private _value?;
    /** ControlValueAccessor method called when the attached control has changed, */
    protected _onChangeCallback: (_: T) => void;
    /** ControlValueAccessor method called when the attached control has touched. */
    private _onTouchedCallback;
    /** Gets the value for the control. */
    protected get internalValue(): T | undefined;
    /** Sets the value for the control. */
    protected set internalValue(newValue: T | undefined);
    /**
     * When touched.
     */
    protected touched(): void;
    /**
     * -------------------------------------------------
     * ControlValueAccessor implementation
     * -------------------------------------------------
     */
    /**
     * Write a new value to the element.
     */
    writeValue(value: T): void;
    /**
     * Set the function to be called when the control receives a change event.
     */
    registerOnChange(fn: (_: T) => void): void;
    /**
     * Set the function to be called when the control receives a touched event.
     */
    registerOnTouched(fn: () => void): void;
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(_isDisabled: boolean): void;
}
/**
 * Provider - adds the contol value accessor.
 */
export declare function provideControlValueAccessor(type: any): any;

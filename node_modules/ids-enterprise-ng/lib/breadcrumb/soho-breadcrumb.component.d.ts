/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, NgZone, OnDestroy, OnInit } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Soho Breadcrumb Component
 */
export declare class SohoBreadcrumbComponent implements AfterViewInit, OnDestroy, OnInit {
    private element;
    private ngZone;
    private jQueryElement?;
    private breadcrumbAPI?;
    private options;
    get isBreadcrumb(): boolean;
    /** Allow Breadcrumb Definition by Input */
    set breadcrumbs(items: SohoBreadcrumbItemOptions[] | undefined);
    get breadcrumbs(): SohoBreadcrumbItemOptions[] | undefined;
    /** Allow change to alternate styling via Input **/
    set alternate(val: boolean);
    get alternate(): boolean;
    /** Add truncatling behavior when a lot of items */
    set truncate(truncate: boolean | undefined);
    get truncate(): boolean | undefined;
    /** Add extra attributes like id's to the component **/
    set attributes(attributes: Array<Object> | Object | undefined);
    get attributes(): Array<Object> | Object | undefined;
    /** Provides access to the internal array of currently-invoked IDS Breadcrumb APIs */
    get breadcrumbAPIs(): SohoBreadcrumbItemStatic[];
    /** Provides access to the IDS Breadcrumb's disabled property */
    get disabled(): boolean | undefined;
    /**
     * Constructor
     *
     * @param elementRef - the element matching the component's selector.
     */
    constructor(element: ElementRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    ngOnInit(): void;
    enable(): void;
    disable(): void;
    /**
     * Adds a new breadcrumb item to the list
     */
    add(settings?: SohoBreadcrumbItemOptions, doRender?: boolean): void;
    /**
     * Removes a single breadcrumb item from the list
     */
    remove(item: SohoBreadcrumbRef, doRender?: boolean): void;
    /**
     * Removes all breadcrumb items from the list
     */
    removeAll(doRender?: boolean): void;
    /**
     * Gets references related to a particular Breadcrumb Item.
     * The return object contains:
     * - 'a' : a reference to the breadcrumb item's anchor tag
     * - 'api' : a reference to the breadcrumb item's API
     * - 'i' : a number representing the current index of the breadcrumb item.
     */
    getBreadcrumbItem(item: SohoBreadcrumbRef): SohoBreadcrumbTargetObject | undefined;
    /**
     * Takes a reference to a Breadcrumb item and makes it "Current",
     * styling it with bold text and popping it out of truncation.
     */
    makeCurrent(item: SohoBreadcrumbRef): void;
    /**
     * Updates the Breadcrumb List with new incoming settings
     */
    updated(settings?: SohoBreadcrumbOptions): void;
    /**
     * Destroys this component and tears down the IDS Breadcrumb
     */
    destroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoBreadcrumbComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoBreadcrumbComponent, "[soho-breadcrumb]", never, { "breadcrumbs": { "alias": "breadcrumbs"; "required": false; }; "alternate": { "alias": "alternate"; "required": false; }; "truncate": { "alias": "truncate"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare class SohoBreadcrumbListComponent {
    isBreadcrumbList: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoBreadcrumbListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoBreadcrumbListComponent, "[soho-breadcrumb-list]", never, {}, {}, never, ["*"], false, never>;
}

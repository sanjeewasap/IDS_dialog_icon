/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="jquery" />
/// <reference types="jquery" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, NgZone, AfterViewChecked, ChangeDetectorRef } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoMenuButtonComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ref;
    private ngZone;
    get isBtnMenu(): boolean;
    get buttonType(): string;
    /** The underlying jQuery instance. */
    private jQueryElement?;
    /** The enterprise widget api. */
    private menuButton?;
    /** The button widget api */
    private button?;
    private options;
    private buttonOptions;
    /**
     * Flag to force an update of the control after the view is created.
     */
    private runUpdatedOnCheck?;
    selected: EventEmitter<SohoContextMenuEvent>;
    beforeopen: EventEmitter<SohoContextMenuEvent>;
    /**
     * @todo remove override of native element
     */
    open$: EventEmitter<SohoContextMenuEvent>;
    /**
     * @todo remove override of native element
     */
    close$: EventEmitter<SohoContextMenuEvent>;
    /** The icon to be used. */
    icon?: string;
    set autoFocus(value: boolean);
    set mouseFocus(value: boolean);
    set showArrow(value: boolean);
    set returnFocus(value: boolean);
    get returnFocus(): boolean;
    set trigger(trigger: SohoPopupMenuTrigger);
    set menu(menu: string | JQuery<HTMLElement>);
    set ajaxBeforeOpenFunction(fn: AjaxBeforeOpenFunction);
    set hideMenuArrow(value: boolean | undefined);
    get hideMenuArrow(): boolean | undefined;
    set offset(value: SohoPopupmenuOffset | undefined);
    get offset(): SohoPopupmenuOffset | undefined;
    set attachToBody(value: boolean | undefined);
    get attachToBody(): boolean | undefined;
    set removeOnDestroy(value: boolean | undefined);
    get removeOnDestroy(): boolean | undefined;
    set ripple(value: boolean | undefined);
    get ripple(): boolean | undefined;
    constructor(element: ElementRef, ref: ChangeDetectorRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    private onSelected;
    private onBeforeOpen;
    private onClose;
    private onOpen;
    updated(menuSettings?: SohoPopupMenuOptions, buttonSettings?: SohoButtonOptions): void;
    teardown(): void;
    close(): void;
    open(event: JQuery.TriggeredEvent, ajaxReturn?: boolean, useDelay?: boolean): void;
    ngOnDestroy(): void;
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoMenuButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoMenuButtonComponent, "[soho-menu-button]", never, { "icon": { "alias": "icon"; "required": false; }; "autoFocus": { "alias": "autoFocus"; "required": false; }; "mouseFocus": { "alias": "mouseFocus"; "required": false; }; "showArrow": { "alias": "showArrow"; "required": false; }; "returnFocus": { "alias": "returnFocus"; "required": false; }; "trigger": { "alias": "trigger"; "required": false; }; "menu": { "alias": "menu"; "required": false; }; "ajaxBeforeOpenFunction": { "alias": "ajaxBeforeOpenFunction"; "required": false; }; "hideMenuArrow": { "alias": "hideMenuArrow"; "required": false; }; "offset": { "alias": "offset"; "required": false; }; "attachToBody": { "alias": "attachToBody"; "required": false; }; "removeOnDestroy": { "alias": "removeOnDestroy"; "required": false; }; "ripple": { "alias": "ripple"; "required": false; }; }, { "selected": "selected"; "beforeopen": "beforeopen"; "open$": "open"; "close$": "close"; }, never, ["*"], false, never>;
}

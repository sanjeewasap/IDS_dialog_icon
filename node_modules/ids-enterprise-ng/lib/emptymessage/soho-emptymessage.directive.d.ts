/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ChangeDetectorRef, ElementRef } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the SohoEmptyMessage Control.
 */
export declare class SohoEmptyMessageDirective implements AfterViewChecked, AfterViewInit {
    private changeDetector;
    private element;
    /**
     * The `emptyMessage` option.
     */
    set emptyMessageOptions(options: SohoEmptyMessageOptions);
    get emptyMessageOptions(): SohoEmptyMessageOptions;
    set title(title: string | undefined);
    get title(): string | undefined;
    set info(info: string | undefined);
    get info(): string | undefined;
    set icon(icon: string | undefined);
    get icon(): string | undefined;
    set height(height: string | undefined);
    get height(): string | undefined;
    set button(button: SohoEmptyMessageButtonOptions | undefined);
    get button(): SohoEmptyMessageButtonOptions | undefined;
    set color(color: EmptyMessageColor | undefined);
    get color(): EmptyMessageColor | undefined;
    set attributes(attributes: Array<Object> | Object | undefined);
    get attributes(): Array<Object> | Object | undefined;
    private _emptyMessageOptions;
    private jQueryElement?;
    private emptymessage?;
    private updateComponent;
    constructor(changeDetector: ChangeDetectorRef, element: ElementRef);
    /**
     * After the control has been initialised and the view is ready,
     * construct the empty message sohoxi component.
     */
    ngAfterViewInit(): void;
    /**
     *
     */
    ngAfterViewChecked(): void;
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    private markForCheck;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoEmptyMessageDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SohoEmptyMessageDirective, "[soho-emptymessage]", ["soho-emptymessage"], { "emptyMessageOptions": { "alias": "emptyMessageOptions"; "required": false; }; "title": { "alias": "title"; "required": false; }; "info": { "alias": "info"; "required": false; }; "icon": { "alias": "icon"; "required": false; }; "height": { "alias": "height"; "required": false; }; "button": { "alias": "button"; "required": false; }; "color": { "alias": "color"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; }, {}, never, never, false, never>;
}

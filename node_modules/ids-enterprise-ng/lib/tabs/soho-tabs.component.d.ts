/// <reference types="ids-enterprise-typings" />
/// <reference types="jquery" />
/// <reference types="jquery" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import { DeprecatedEventEmitter } from '../utils/deprecated-event-emitter';
import * as i0 from "@angular/core";
/**
 * Internal component to support the tab title
 */
export declare class SohoTabTitleComponent {
    get hrefAttr(): string;
    tabId?: string;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoTabTitleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoTabTitleComponent, "a[soho-tab-title]", never, { "tabId": { "alias": "tabId"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**
 * Internal component to support the tab with a 'count' on it.
 */
export declare class SohoTabCountComponent {
    constructor(_element: ElementRef);
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoTabCountComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoTabCountComponent, "span[soho-tab-count]", never, {}, {}, never, ["*"], false, never>;
}
/**
 * Internal component to support a divider between tab items
 */
export declare class SohoTabSeparatorComponent {
    constructor(_element: ElementRef);
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoTabSeparatorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoTabSeparatorComponent, "li[soho-tab-separator]", never, {}, {}, never, ["*"], false, never>;
}
/**
 * Internal component to support tab panel container content.
 */
export declare class SohoTabPanelContainerComponent {
    private element;
    constructor(element: ElementRef);
    verticalScrolling: any;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoTabPanelContainerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoTabPanelContainerComponent, "div[soho-tab-panel-container]", never, { "verticalScrolling": { "alias": "verticalScrolling"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**
 * Internal component to support tab panel content.
 */
export declare class SohoTabPanelComponent {
    constructor(_element: ElementRef);
    tabId?: string;
    contained?: string;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoTabPanelComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoTabPanelComponent, "div[soho-tab-panel]", never, { "tabId": { "alias": "tabId"; "required": false; }; "contained": { "alias": "contained"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**
 * Internal component to support the tab list items
 */
export declare class SohoTabComponent {
    constructor(_element: ElementRef);
    dismissible: boolean;
    selected: boolean;
    disabled: boolean;
    hidden: boolean;
    hasPopupMenu: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoTabComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoTabComponent, "li[soho-tab]", never, { "dismissible": { "alias": "dismissible"; "required": false; }; "selected": { "alias": "selected"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "hidden": { "alias": "hidden"; "required": false; }; "hasPopupMenu": { "alias": "hasPopupMenu"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**
 * Main tabset header component
 */
export declare class SohoTabListComponent {
    constructor(_element: ElementRef);
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoTabListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoTabListComponent, "ul[soho-tab-list]", never, {}, {}, never, ["*"], false, never>;
}
/**
 * Main tabset header component
 */
export declare class SohoTabListContainerComponent {
    constructor(_element: ElementRef);
    verticalScrolling: any;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoTabListContainerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoTabListContainerComponent, "div[soho-tab-list-container]", never, { "verticalScrolling": { "alias": "verticalScrolling"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**
 * The main soho-tabs component
 */
export declare class SohoTabsComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    get isVertical(): boolean;
    get isModuleTabs(): boolean;
    get isHeaderTabs(): boolean;
    get isAlternate(): boolean;
    /**
     * set to true to show a secondary style for the tabs
     *
     */
    alternate: boolean;
    /**
     * set to true to display the tabs vertically to the left of the tab-panel
     *
     */
    vertical: boolean;
    /**
     * set to true to display the tabs as module tabs
     *
     */
    moduleTabs: boolean;
    /**
     * set to true to display the tabs as header tabs
     *
     */
    headerTabs: boolean;
    /**
     * The callback function called before a tab is closed.
     * Return false to prevent the tab from closing.
     */
    beforeCloseCallback?: Function;
    set tabsOptions(tabsOptions: SohoTabsOptions);
    /**
     * If set to true, creates a button at the end of the tab list that can be used to add an empty tab and panel.
     *
     */
    set addTabButton(addTabButton: boolean);
    /**
     * if defined as a function, will be used in-place of the default Tab Adding method
     * TODO: how to handle call back function?
     */
    set addTabButtonCallback(addTabButtonCallback: Function);
    /**
     * If set to true, will force an App Menu trigger to be present on Non-Vertical Tabs implementatations.
     */
    set appMenuTrigger(appMenuTrigger: boolean);
    /**
     * If defined, replaces the default "Menu" text used in the app menu trigger.
     */
    set appMenuTriggerText(appMenuTriggerText: string);
    /**
     *  If true, causes an app menu trigger's text content to be visually hidden (but still exists for accessiblity purposes)
     */
    set appMenuTriggerTextAudible(appMenuTriggerTextAudible: boolean);
    /**
     *  If defined, will be used by any internal Tabs AJAX calls as the desired request settings.
     */
    set ajaxOptions(ajaxOptions: object);
    /**
     * Defines a separate element to be used for containing the tab panels.  Defaults to the Tab Container itself
     */
    set containerElement(containerElement: string);
    /**
     * If true, will change the selected tab on invocation based on the URL that exists after the hash
     *
     */
    set changeTabOnHashChange(changeTabOnHashChange: boolean);
    /**
     * If defined as a function, provides an external method for adjusting the current page hash used by these tabs
     * TODO: how to handle call back function?
     */
    set hashChangeCallback(hashChangeCallback: Function);
    /**
     * If true, when using full URLs in tab HREFs, or when using Ajax calls, tabs will be loaded as needed instead of the markup
     * all being established at once.
     */
    set lazyLoad(lazyLoad: boolean);
    /**
     * If true, will display a tooltip or Module Tabs with cut-off text content.
     */
    set moduleTabsTooltips(moduleTabsTooltips: boolean);
    /**
     * If true, will display a tooltip on Multi Tabs with cut-off text content.
     */
    set multiTabsTooltips(multiTabsTooltips: boolean);
    /**
     * If defined, it will display the position of counts.
     */
    set countsPosition(countsPosition: undefined | 'top' | 'bottom');
    /**
     * If defined, will serve as a way of pulling in external content to fill tabs.
     */
    set source(source: Function);
    /**
     * If a source method is defined, this flexible object can be passed into the source method, and augmented with
     * parameters specific to the implementation.
     */
    set sourceArguments(sourceArguments: Function);
    /**
     * set to true to allow tab count markup <span class=tabcount>#</span>.
     *
     */
    set tabCounts(tabCounts: boolean);
    /**
     * If Vertical Tabs & true, will automatically switch to Horizontal Tabs on smaller breakpoints.
     *
     */
    set verticalResponsive(verticalResponsive: boolean);
    /** Add extra attributes like id's to the component **/
    set attributes(attributes: Array<Object> | Object);
    /** Sets the tabs to be sortable by drag and drop. **/
    set sortable(sortable: boolean);
    /**
     * if you would like to run the updated() function yourself instead of having
     * this tabs component check for you set this input to true. The advantage to
     * this is that if you know when to update you can be more efficient.
     */
    disableAutoUpdatedCall: boolean;
    /**
     * The beforeactivated event is fired whenever a tab is selected giving the event handler a chance
     * to "veto" the tab selection change.
     *
     */
    beforeActivated: EventEmitter<SohoTabsEvent>;
    /**
     * The beforeactivate event is deprecated in favor of `beforeactivated`.
     *
     * @deprecated
     */
    beforeActivate: DeprecatedEventEmitter<SohoTabsEvent>;
    /**
     * The activated event is fired whenever a tab is selected (or "activated");
     */
    activated: EventEmitter<SohoTabsEvent>;
    /**
     * The afteractivate event is fired after the has been activated.
     */
    afterActivated: EventEmitter<SohoTabsEvent>;
    /**
     * fired before a tab closes
     */
    beforeClose: EventEmitter<SohoTabsEvent>;
    /**
     * fired when a tab closes
     *
     * @todo replace override of native element
     */
    close: EventEmitter<SohoTabsEvent>;
    /**
     * fired after a tab closes
     */
    afterClose: EventEmitter<SohoTabsEvent>;
    /**
     * fire when a new tab is added.
     *
     */
    tabAdded: EventEmitter<SohoTabsEvent>;
    private jQueryElement?;
    private tabs?;
    private _tabsOptions;
    /**
     * Keep track of current tab content for change detection.
     * If the number of tab change we must call tabs.updated() to
     * rebuild teh jquery tab control, if only the titles changed
     * then we can call tabs.handleResize to update the selection
     * style and the overflow.
     * NOTE: only used when disableAutoUpdatedCall is false
     */
    private tabCount?;
    /**
     * NOTE: only used when disableAutoUpdatedCall is false
     */
    private tabIds?;
    /**
     * NOTE: only used when disableAutoUpdatedCall is false
     */
    private tabTitles?;
    /**
     * set to true when @input changes. This will cause the tabs.updated call
     * in the afterViewChecked. This technique has the advantage of only calling
     * updated once in the current angular cycle no matter how many inputs are
     * changed during that cycle.
     */
    private updateRequired;
    /**
     * Constructor.
     *
     * @param elementRef - the element matching the component's selector.
     */
    constructor(_changeDetectorRef: ChangeDetectorRef, element: ElementRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    private updateTabInfo;
    private getTabLiList;
    private getActivatedTab;
    private getTabIds;
    private getTabTitles;
    /**
     * Causes the tabs component view to be rebuilt
     */
    updated(): void;
    /**
     * @param tab The tab element in the list that needs to be activated
     * @returns
     */
    activateTab(tab: JQuery | undefined): void;
    /**
     * Call resize manually when tab titles change so that the underline width matches.
     */
    handleResize(doResponsiveCheck?: boolean): void;
    /**
     * Manually call updated and refresh out of the zone.
     */
    refresh(): void;
    /**
     * Adds a new tab into the tab component
     *
     * @param tabId The tabId of the tab to be added
     * @param options ?
     * @param atIndex The index location where the tab is to be added.
     */
    add(tabId: string, options: any, atIndex: number): void;
    /**
     * Removes a tab
     *
     * @param tabId The tabId of the tab to be removed.
     * @param disableBeforeClose If true, the beforeClose callback should be called
     * before removing the tab.
     */
    remove(tabId: string, disableBeforeClose?: boolean): void;
    /**
     * Hides a tab for the given tabId
     *
     * @param tabId The id of the tab to hide
     */
    hide(tabId: string): void;
    show(tabId: string): void;
    disableTab(tabId: number): void;
    enableTab(tabId: number): void;
    rename(tabId: string, name: string): void;
    /**
     * Gets a tab given either an event or a tabId
     *
     * @param event And event from a tab that will allow tab retrieval
     * @param tabId The tabId of the tab to be retrieved.
     */
    getTab(event: SohoTabsEvent, tabId: string): any;
    /**
     * Return the currenlty active/selected tab.
     *
     * @return  A JQuery object of the active tab element.
     */
    getActiveTab(): JQuery;
    /**
     * Returns the visible tabs
     *
     * @return  An array of JQuery objects of the visible tab elements
     */
    getVisibleTabs(): Array<JQuery>;
    /**
     * Returns the overflow tabs
     *
     * @return  An array of JQuery objects of the overflow tab elements
     */
    getOverflowTabs(): Array<JQuery>;
    /**
     * Selects the tab given an href
     *
     * @param href an href used to find the tab to select
     */
    select(href: string): void;
    /**
     * Disables the entire tab component
     */
    disable(): void;
    /**
     * enables the entire tab component
     */
    enable(): void;
    private onBeforeActivated;
    private onActivated;
    private onAfterActivated;
    private onBeforeClose;
    private onClose;
    private onAfterClose;
    private onTabAdded;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoTabsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoTabsComponent, "div[soho-tabs]", never, { "alternate": { "alias": "alternate"; "required": false; }; "vertical": { "alias": "vertical"; "required": false; }; "moduleTabs": { "alias": "moduleTabs"; "required": false; }; "headerTabs": { "alias": "headerTabs"; "required": false; }; "beforeCloseCallback": { "alias": "beforeCloseCallback"; "required": false; }; "tabsOptions": { "alias": "tabsOptions"; "required": false; }; "addTabButton": { "alias": "addTabButton"; "required": false; }; "addTabButtonCallback": { "alias": "addTabButtonCallback"; "required": false; }; "appMenuTrigger": { "alias": "appMenuTrigger"; "required": false; }; "appMenuTriggerText": { "alias": "appMenuTriggerText"; "required": false; }; "appMenuTriggerTextAudible": { "alias": "appMenuTriggerTextAudible"; "required": false; }; "ajaxOptions": { "alias": "ajaxOptions"; "required": false; }; "containerElement": { "alias": "containerElement"; "required": false; }; "changeTabOnHashChange": { "alias": "changeTabOnHashChange"; "required": false; }; "hashChangeCallback": { "alias": "hashChangeCallback"; "required": false; }; "lazyLoad": { "alias": "lazyLoad"; "required": false; }; "moduleTabsTooltips": { "alias": "moduleTabsTooltips"; "required": false; }; "multiTabsTooltips": { "alias": "multiTabsTooltips"; "required": false; }; "countsPosition": { "alias": "countsPosition"; "required": false; }; "source": { "alias": "source"; "required": false; }; "sourceArguments": { "alias": "sourceArguments"; "required": false; }; "tabCounts": { "alias": "tabCounts"; "required": false; }; "verticalResponsive": { "alias": "verticalResponsive"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "sortable": { "alias": "sortable"; "required": false; }; "disableAutoUpdatedCall": { "alias": "disableAutoUpdatedCall"; "required": false; }; }, { "beforeActivated": "beforeActivated"; "beforeActivate": "beforeActivate"; "activated": "activated"; "afterActivated": "afterActivated"; "beforeClose": "beforeClose"; "close": "close"; "afterClose": "afterClose"; "tabAdded": "tabAdded"; }, never, ["*"], false, never>;
}

/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="jquery" />
/// <reference types="jquery" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, AfterViewChecked, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import { BaseControlValueAccessor } from '../utils';
import * as i0 from "@angular/core";
export declare class SohoLookupComponent extends BaseControlValueAccessor<any> implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    /**
     * Used to call updated from the afterViewChecked lifecycle event.
     */
    private updateRequired?;
    /**
     * API for interacting with modal and then in turn the buttons on the dialog.
     */
    modal?: SohoModalStatic;
    /**
     * Available Soho Template control settings as Inputs
     * Should match the Soho properties for the component
     */
    asobject: boolean;
    /** Grid columns. */
    columns?: SohoDataGridColumn[];
    /**
     * Changes the dataset being used
     */
    set dataset(data: Object[] | undefined);
    get dataset(): Object[] | undefined;
    /** Custom click event; can be used with a modal dialog and custom list component */
    set click(value: SohoLookupClickFunction | undefined);
    get click(): SohoLookupClickFunction | undefined;
    /** If a click method is defined, this flexible object can be passed in. */
    set clickArguments(value: any);
    get clickArguments(): any;
    /** Custom clear event; can be used with a modal dialog and custom list component */
    set clear(value: SohoLookupClearFunction | undefined);
    get clear(): SohoLookupClearFunction | undefined;
    /** If a clear method is defined, this flexible object can be passed in. */
    set clearArguments(value: any);
    get clearArguments(): any;
    /** Field to return from the array or can be a function. */
    set field(value: string | SohoLookupFieldFunction | undefined);
    get field(): string | SohoLookupFieldFunction | undefined;
    /** Dialog title or takes the label + Lookup. */
    set title(value: string | undefined);
    get title(): string | undefined;
    /** Swap out the lookup id for any other icon in the icon set by name */
    set icon(value: string | undefined);
    get icon(): string | undefined;
    /** Pass dialog buttons or Cancel / Apply. */
    set buttons(value: SohoModalButton[] | undefined);
    get buttons(): SohoModalButton[] | undefined;
    /** Options to pass to the underlying data grid. */
    set options(value: SohoDataGridOptions | undefined);
    get options(): SohoDataGridOptions | undefined;
    /**
     * Used to manage data prior to showing the lookup.
     *
     * For example:
     *  - When the button is clicked, show a loading dialog and make the request for
     *    lookup grid data.
     *  - Upon receiving grid data, set lookup.settings.options for the columns and dataset.
     *  - Then call grid() to build the grid and complete the lookup call.
     */
    set beforeShow(value: SohoLookupBeforeShowFunction | undefined);
    get beforeShow(): SohoLookupBeforeShowFunction | undefined;
    /** Custom modal content. */
    set modalContent(value: JQuery | string | undefined);
    get modalContent(): JQuery | string | undefined;
    /** Can the user type random text into the field. */
    set editable(value: boolean | undefined);
    get editable(): boolean | undefined;
    /** If set to false the dialog wont apply the value on clicking a value. */
    set autoApply(value: boolean | undefined);
    get autoApply(): boolean | undefined;
    /** Function used to match the search term to the data. */
    set match(value: SohoDataGridMatchFunction | undefined);
    get match(): SohoDataGridMatchFunction | undefined;
    /** A function that fires to let you validate form items on open and select. */
    set validator(value: SohoLookupValidatorFunction | undefined);
    get validator(): SohoLookupValidatorFunction | undefined;
    /** Set the width of the input to the width of the selection */
    set autoWidth(value: boolean | undefined);
    get autoWidth(): boolean | undefined;
    /** The character  used to separate data strings */
    set delimiter(value: string | undefined);
    get delimiter(): string | undefined;
    /** Apply a minimum width to the lookup*/
    set minWidth(value: number | undefined);
    get minWidth(): number | undefined;
    /**  Add an ability to clear the lookup field with an x */
    set clearable(value: boolean | undefined);
    get clearable(): boolean | undefined;
    /**  Add extra attributes like id's to the component */
    set attributes(attributes: Array<Object> | Object | undefined);
    get attributes(): Array<Object> | Object | undefined;
    /**  Set the input to tabbable */
    set tabbable(tabbable: boolean | undefined);
    get tabbable(): boolean | undefined;
    /**  Set the input to allow duplicates */
    set allowDuplicates(allowDuplicates: boolean | undefined);
    get allowDuplicates(): boolean | undefined;
    multiselect: boolean;
    name?: string;
    source?: SohoDataGridSourceFunction;
    toolbar: any;
    autoCompleteSettings?: SohoLookupAutoComplete;
    /**
     * Available Soho Template events as Output (EventEmitters passing the event)
     * Should match the Soho event names for the component
     */
    afteropen: EventEmitter<Object>;
    start: EventEmitter<Object>;
    complete: EventEmitter<Object>;
    beforeopen: EventEmitter<Object>;
    change: EventEmitter<SohoLookupChangeEvent[]>;
    inputEvt: EventEmitter<Object>;
    open: EventEmitter<Object>;
    close: EventEmitter<Object>;
    selected: EventEmitter<Object>;
    afterpaging: EventEmitter<Object>;
    /**
     * Bind attributes to the host input element
     */
    get isLookup(): boolean;
    /**
     * Is the lookup control disabled?
     */
    private _disabled;
    /**
     * Accessor for _disabled.
     */
    get isDisabled(): boolean | undefined;
    set isDisabled(disabled: boolean | undefined);
    /**
     * Add class binding.
     */
    get disabledClass(): boolean | undefined;
    /**
     * Is the lookup control readonly?
     */
    _readonly: boolean | undefined;
    /**
     * Local variables
     */
    private jQueryElement?;
    /**
     * Soho Lookup widget.
     *
     * @private
     */
    private lookup?;
    /**
     * Autocomplete
     */
    private autocomplete;
    private settings;
    /** Initial dataset */
    private _dataset?;
    /**
     * Constructor.
     *
     * @param element associated element
     * @param ngZone angular zone
     */
    constructor(element: ElementRef, ngZone: NgZone);
    onKeyUp(_event: KeyboardEvent): void;
    ngAfterViewInit(): void;
    /**
     * Update the selected rows
     */
    updateSelectedRows(rows: any[]): void;
    /**
     * Find the row and select it based on select value / function / field value
     */
    selectRowByValue(field: String, value: String): void;
    /** Get the selected rows and return them to the UI **/
    insertRows(): void;
    /** Returns the rows currently selected **/
    selectedRows(): any[];
    /** Enable the input. **/
    enable(): void;
    /** Disable the input. **/
    disable(): void;
    /** Make the input readonly. **/
    readonly(): void;
    /**  Send in a new data set to display in the datagrid in the lookup. **/
    updateDataset(dataset: Object[], pagerInfo: SohoPagerPagingInfo): void;
    /**
     * Call to notify the lookup about any dom/settings changes
     */
    updated(settings?: any): void;
    /**
     * Destroys the modal lookup.
     */
    destroy(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    isMultiselect(): boolean | undefined;
    modalOpened(args: any[]): void;
    /**
     * Handle the control being changed.
     */
    onChange(event: SohoLookupChangeEvent[]): void;
    onAutocompleteChange(event: any): void;
    onAutocompleteSelected(event: any): void;
    onAutocompleteBeforeOpen(event: any): void;
    setDisabledState(isDisabled: boolean | undefined): void;
    /**
     * Needed to extract this function from the 'insertRows' function within the
     * Soho Lookup control object.
     * TODO: Expose this in the Sohoxi library @tim @ed.coyle
     *
     * @todo raise SOHO jira issue
     */
    processValue(value: Object | Object[]): string;
    /**
     * Set lookup value to allow the lookup element to be updated correctly.
     * Used when the click property is set on the sohoxi control.
     *
     * @param event - selected row
     * TODO: Expose this in the Sohoxi library @tim @ed.coyle
     *
     * @todo raise SOHO jira issue
     */
    setValue(event: SohoLookupChangeEvent[]): void;
    /**
     * Override writeValue to allow the lookup
     * element to be updated correctly.
     *
     * @param value - the new value
     */
    writeValue(value: any): void;
    /**
     * Evaluate the event param and parse the value
     */
    private parseValue;
    private markForUpdate;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoLookupComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoLookupComponent, "input[soho-lookup]", never, { "asobject": { "alias": "asobject"; "required": false; }; "columns": { "alias": "columns"; "required": false; }; "dataset": { "alias": "dataset"; "required": false; }; "click": { "alias": "click"; "required": false; }; "clickArguments": { "alias": "clickArguments"; "required": false; }; "clear": { "alias": "clear"; "required": false; }; "clearArguments": { "alias": "clearArguments"; "required": false; }; "field": { "alias": "field"; "required": false; }; "title": { "alias": "title"; "required": false; }; "icon": { "alias": "icon"; "required": false; }; "buttons": { "alias": "buttons"; "required": false; }; "options": { "alias": "options"; "required": false; }; "beforeShow": { "alias": "beforeShow"; "required": false; }; "modalContent": { "alias": "modalContent"; "required": false; }; "editable": { "alias": "editable"; "required": false; }; "autoApply": { "alias": "autoApply"; "required": false; }; "match": { "alias": "match"; "required": false; }; "validator": { "alias": "validator"; "required": false; }; "autoWidth": { "alias": "autoWidth"; "required": false; }; "delimiter": { "alias": "delimiter"; "required": false; }; "minWidth": { "alias": "minWidth"; "required": false; }; "clearable": { "alias": "clearable"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "tabbable": { "alias": "tabbable"; "required": false; }; "allowDuplicates": { "alias": "allowDuplicates"; "required": false; }; "multiselect": { "alias": "multiselect"; "required": false; }; "name": { "alias": "name"; "required": false; }; "source": { "alias": "source"; "required": false; }; "toolbar": { "alias": "toolbar"; "required": false; }; "autoCompleteSettings": { "alias": "autoCompleteSettings"; "required": false; }; "isDisabled": { "alias": "disabled"; "required": false; }; "_readonly": { "alias": "readonly"; "required": false; }; }, { "afteropen": "afteropen"; "start": "start"; "complete": "complete"; "beforeopen": "beforeopen"; "change": "change"; "inputEvt": "inputEvt"; "open": "open"; "close": "close"; "selected": "selected"; "afterpaging": "afterpaging"; }, never, ["*"], false, never>;
}

/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoColumnComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    /** Options. */
    private options;
    get isColumn(): boolean;
    /** Defines the data to use, must be specified for this component. */
    set dataset(dataset: Array<any>);
    /** Chart Type */
    set type(value: SohoColumnType);
    /** Default is a single or stacked chart. */
    set isStacked(value: boolean);
    /** If false the legend will not be shown. */
    set showLegend(value: boolean);
    /** true|false - will do or not do the animation, 'initial' will do only first time the animation. */
    set animate(value: boolean);
    /** If true, the component will not resize when resizing the page. */
    set redrawOnResize(value: boolean);
    /** The d3 axis format. */
    set format(value: string);
    set formatterString(value: string);
    /** Settings for the chart ticks. Can set ticks: {format: d3Format, number: n} */
    set ticks(value: object);
    /** An empty message will be displayed when there is no chart data. */
    set emptyMessage(value: SohoEmptyMessageOptions);
    /** Settings for the chart xAxis. */
    set xAxis(value: object);
    /** Settings for the chart yAxis. */
    set yAxis(value: object);
    /** Settings for the chart tooltip. */
    set tooltip(tooltip: string | SohoColumnTooltipFunction);
    /**
     * Add extra attributes like id's to the component
     */
    set attributes(attributes: Array<Object> | Object);
    /**
     * Add extra options to control axisLabels
     */
    set axisLabels(value: any);
    /**
     * Adds the ability to use line chart if set to true. This will need a target value to the dataset.
     */
    set hideDots(value: boolean);
    set useLine(value: boolean);
    /** Events */
    selected: EventEmitter<SohoColumnSelectEvent>;
    unselected: EventEmitter<SohoColumnSelectEvent>;
    rendered: EventEmitter<Object>;
    dblclick: EventEmitter<Object>;
    /**
     * @todo replace override of native attribute
     */
    contextmenu: EventEmitter<Object>;
    private jQueryElement?;
    column?: SohoColumn | null;
    private updateRequired;
    constructor(element: ElementRef, ngZone: NgZone);
    /** Setup */
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    updated(): void;
    /** Tear Down */
    ngOnDestroy(): void;
    setSelected(selected: SohoColumnSelected): void;
    toggleSelected(selected: SohoColumnSelected): void;
    getSelected(): Object | Object[] | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoColumnComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoColumnComponent, "[soho-column]", never, { "dataset": { "alias": "dataset"; "required": false; }; "type": { "alias": "type"; "required": false; }; "isStacked": { "alias": "isStacked"; "required": false; }; "showLegend": { "alias": "showLegend"; "required": false; }; "animate": { "alias": "animate"; "required": false; }; "redrawOnResize": { "alias": "redrawOnResize"; "required": false; }; "format": { "alias": "format"; "required": false; }; "formatterString": { "alias": "formatterString"; "required": false; }; "ticks": { "alias": "ticks"; "required": false; }; "emptyMessage": { "alias": "emptyMessage"; "required": false; }; "xAxis": { "alias": "xAxis"; "required": false; }; "yAxis": { "alias": "yAxis"; "required": false; }; "tooltip": { "alias": "tooltip"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "axisLabels": { "alias": "axisLabels"; "required": false; }; "hideDots": { "alias": "hideDots"; "required": false; }; "useLine": { "alias": "useLine"; "required": false; }; }, { "selected": "selected"; "unselected": "unselected"; "rendered": "rendered"; "dblclick": "dblclick"; "contextmenu": "contextmenu"; }, never, ["*"], false, never>;
}

import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from "@angular/core";
import * as i0 from "@angular/core";
export declare class SohoListBuilderComponent implements AfterViewInit, OnDestroy, AfterViewChecked {
    private ngZone;
    get isListbuilder(): boolean;
    /**
     * Local variables
     */
    private jQueryElement?;
    private listbuilder?;
    private options;
    /**
    * Force a update to fire next viewChecked.
    */
    updateRequired?: boolean;
    /**
     * Constructor.
     */
    constructor(ngZone: NgZone);
    listBuilderRef: ElementRef | undefined;
    sohoListBuilderElementId?: string;
    /**
     * String of classes to append to the class for the list-view div element
     */
    class?: string;
    get listClass(): string;
    /**
     * Array of data
     */
    set dataset(value: Object[] | undefined);
    get dataset(): Object[] | undefined;
    /** The CSS Class of the handle element */
    set handle(value: string);
    /** "Add" action button (takes a string representing a "data-action" attribute */
    set btnAdd(value: string);
    /** "Edit" action button (takes a string representing a "data-action" attribute */
    set btnEdit(value: string);
    /** "Delete" action button (takes a string representing a "data-action" attribute */
    set btnDelete(value: string);
    /** "GoUp" action button (takes a string representing a "data-action" attribute */
    set btnGoUp(value: string);
    /** "GoDown" action button (takes a string representing a "data-action" attribute */
    set btnGoDown(value: string);
    /** Add extra attributes like id's to the chart elements. For example `attributes: { name: 'id', value: 'my-unique-id' } */
    set attributes(attributes: Array<Object> | Object | undefined);
    /** Html Template String of list. */
    set template(value: string);
    /** Html Template String of list item. */
    set templateNewItem(value: string);
    /** Html Template String of list item inner content. */
    set templateItemContent(value: string);
    /** Calls events after a top button action */
    afteradd: EventEmitter<Object[]>;
    aftergoup: EventEmitter<Object[]>;
    aftergodown: EventEmitter<Object[]>;
    afterdelete: EventEmitter<Object[]>;
    /** Calls events before a top button action */
    beforeedit: EventEmitter<Object[]>;
    beforeadd: EventEmitter<Object[]>;
    beforegoup: EventEmitter<Object[]>;
    beforegodown: EventEmitter<Object[]>;
    beforedelete: EventEmitter<Object[]>;
    /** Update event on arranging items (drag and drop item) */
    arrangeupdate: EventEmitter<Object[]>;
    /** Calls events for edit item */
    entereditmode: EventEmitter<Object[]>;
    exiteditmode: EventEmitter<Object[]>;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoListBuilderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoListBuilderComponent, "[soho-listbuilder]", never, { "sohoListBuilderElementId": { "alias": "sohoListBuilderElementId"; "required": false; }; "class": { "alias": "class"; "required": false; }; "dataset": { "alias": "dataset"; "required": false; }; "handle": { "alias": "handle"; "required": false; }; "btnAdd": { "alias": "btnAdd"; "required": false; }; "btnEdit": { "alias": "btnEdit"; "required": false; }; "btnDelete": { "alias": "btnDelete"; "required": false; }; "btnGoUp": { "alias": "btnGoUp"; "required": false; }; "btnGoDown": { "alias": "btnGoDown"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "template": { "alias": "template"; "required": false; }; "templateNewItem": { "alias": "templateNewItem"; "required": false; }; "templateItemContent": { "alias": "templateItemContent"; "required": false; }; }, { "afteradd": "afteradd"; "aftergoup": "aftergoup"; "aftergodown": "aftergodown"; "afterdelete": "afterdelete"; "beforeedit": "beforeedit"; "beforeadd": "beforeadd"; "beforegoup": "beforegoup"; "beforegodown": "beforegodown"; "beforedelete": "beforedelete"; "arrangeupdate": "arrangeupdate"; "entereditmode": "entereditmode"; "exiteditmode": "exiteditmode"; }, never, ["li[soho-listview-item]", "[soho-emptymessage]"], false, never>;
}

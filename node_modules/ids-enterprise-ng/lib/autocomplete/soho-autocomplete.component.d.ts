/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import { BaseControlValueAccessor } from '../utils/base-control-value-accessor';
import * as i0 from "@angular/core";
export declare class SohoAutoCompleteComponent extends BaseControlValueAccessor<string> implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    /** Options. */
    private options;
    /** Defines the data to use, must be specified for this component. */
    set source(source: SohoAutoCompleteSource);
    /** Object is passed into the source method, and augmented with parameters. */
    set sourceArguments(sourceArguments: string);
    /** Menu template, appropriate markup is expected. */
    set template(template: string);
    /** if true, causes filter results that don't match case to be thrown out. */
    set caseSensitive(caseSensitive: boolean);
    /** Filters based on the first character('startsWidth') of the string, or the entire string('contains') */
    set filterMode(filterMode: SohoAutoCompleteFilterMode);
    /** Delay between key strokes on the keypad before the end of typing */
    set delay(delay: number);
    /** Width of the open menu */
    set width(width: SohoAutoCompleteWidth);
    /** Offset, the left or top offset */
    set offset(offset: SohoAutoCompleteOffset);
    /** Selects first item menu */
    set autoSelectFirstItem(autoSelectFirstItem: boolean);
    set attributes(attributes: Array<Object> | Object | undefined);
    get attributes(): Array<Object> | Object | undefined;
    /**
     * Available Soho Template events as Output (EventEmitters passing the event)
     * Should match the Soho event names for the component
     *
     * @todo replace override of native attribute.
     */
    change: EventEmitter<SohoInputEvent[]>;
    selected: EventEmitter<Object[]>;
    beforeopen: EventEmitter<SohoAutoCompleteEvent>;
    get isAutoComplete(): boolean;
    /**
     * Local variables
     */
    private isDisabled?;
    private isReadOnly?;
    private jQueryElement;
    private autocomplete;
    set disabled(value: boolean | undefined);
    get disabled(): boolean | undefined;
    set readonly(value: boolean | undefined);
    get readonly(): boolean | undefined;
    constructor(element: ElementRef);
    onKeyUp(_event: KeyboardEvent): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    /**
     * Handle the control being changed.
     */
    onChange(event: any[]): void;
    /**
     * Override writeValue to allow the mask input
     * element to be updated correctly.
     *
     * @param value - the new value
     */
    writeValue(value: any): void;
    getValue(): string | undefined;
    setValue(value: string): void;
    /** For async methods, reinit autocomplete `source` setting. */
    updated(): SohoAutoCompleteComponent;
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoAutoCompleteComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoAutoCompleteComponent, "input[soho-autocomplete]", never, { "source": { "alias": "source"; "required": false; }; "sourceArguments": { "alias": "sourceArguments"; "required": false; }; "template": { "alias": "template"; "required": false; }; "caseSensitive": { "alias": "caseSensitive"; "required": false; }; "filterMode": { "alias": "filterMode"; "required": false; }; "delay": { "alias": "delay"; "required": false; }; "width": { "alias": "width"; "required": false; }; "offset": { "alias": "offset"; "required": false; }; "autoSelectFirstItem": { "alias": "autoSelectFirstItem"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; }, { "change": "change"; "selected": "selected"; "beforeopen": "beforeopen"; }, never, ["*"], false, never>;
}

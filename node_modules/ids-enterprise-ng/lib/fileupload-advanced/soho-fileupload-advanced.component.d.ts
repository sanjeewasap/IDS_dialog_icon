/// <reference types="ids-enterprise-typings" />
/// <reference types="jquery" />
import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, AfterViewChecked, NgZone, ChangeDetectorRef } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoFileUploadAdvancedComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ref;
    private ngZone;
    /**
     * Add class to host element to ensure correct styling and detection by EP controls.
     */
    isFileUploadAdvanced: boolean;
    /**
     * Local variables
     */
    /**
     * Flag to force an update of the control after the view is created.
     */
    private runUpdatedOnCheck?;
    /** Keeps track of the enabled / disabled state. */
    isDisabled?: boolean;
    /**
     * Set the disabled state of the control.
     */
    set disabled(value: boolean | undefined);
    get disabled(): boolean | undefined;
    /**
     * On page(true) -or- on modal (false) , this is used for some visual style only.
     *
     * @param isStandalone true for onPage otherwise false.
     */
    set isStandalone(isStandaline: boolean | undefined);
    get isStandalone(): boolean | undefined;
    /**
     * Restrict file types(ie. 'jpg|png|gif') ['*' all types]
     *
     * @param allowedTypes - the allowed types.
     */
    set allowedTypes(allowedTypes: string | undefined);
    get allowedTypes(): string | undefined;
    /**
     * Defines the send method used to upload the files.
     *
     * The send function takes the FormData containing the file, and a
     * status interface to provide fedback to the control whilst uploading.
     *
     * @param sendFn - the callback function responsible to uploading the file.
     */
    set send(sendFn: SohoFileUploadAdvancedSendFunction | any);
    get send(): any;
    /**
     * Restricts the number of files that can be retrieved in total.
     *
     * @param maxFiles - max files cab be upload.
     */
    set maxFiles(maxFiles: number | undefined);
    get maxFiles(): number | undefined;
    /**
     * Restricts the number of files that can be retrieved while in process.
     *
     * @param maxFilesInProcess - the callback function responsible to uploading the file.
     */
    set maxFilesInProcess(maxFilesInProcess: number | undefined);
    get maxFilesInProcess(): number | undefined;
    /**
     * Max file size in bytes, -1 for unlimited.
     *
     * @param maxFileSize - Max file size in bytes, -1 for unlimited.
     */
    set maxFileSize(maxFileSize: number | undefined);
    get maxFileSize(): number | undefined;
    /**
     * Variable name to read from server.
     *
     * @param fileName - Variable name to read from server..
     */
    set fileName(fileName: string | undefined);
    get fileName(): string | undefined;
    /**
     * Add way to browse files to upload
     *
     * @param showBrowseButton - if true, displays the browse button; otherwise do not.
     */
    set showBrowseButton(showBrowseButton: boolean | undefined);
    get showBrowseButton(): boolean | undefined;
    /**
     * Text to show in drop area.
     *
     * @param textDropArea - Text to show in drop area.
     */
    set textDropArea(textDropArea: string | undefined);
    get textDropArea(): string | undefined;
    /**
     * Text to show in drop area when browse option true.
     *
     * @param textDropAreaWithBrowse - Text to show in drop area when browse option true.
     */
    set textDropAreaWithBrowse(textDropAreaWithBrowse: string | undefined);
    get textDropAreaWithBrowse(): string | undefined;
    /**
     * Hidden text for cancel button.
     *
     * @param textBtnCancel - Hidden text for cancel button.
     */
    set textBtnCancel(textBtnCancel: string | undefined);
    get textBtnCancel(): string | undefined;
    /**
     * Hidden text for error close button
     *
     * @param textBtnCloseError - Hidden text for error close button.
     */
    set textBtnCloseError(textBtnCloseError: string | undefined);
    get textBtnCloseError(): string | undefined;
    /**
     * Hidden text for remove button.
     *
     * @param textBtnRemove - Hidden text for remove button.
     */
    set textBtnRemove(textBtnRemove: string | undefined);
    get textBtnRemove(): string | undefined;
    /**
     *
     */
    set errorMaxFiles(errorMaxFiles: string | undefined);
    get errorMaxFiles(): string | undefined;
    /**
     *
     */
    set errorMaxFilesInProcess(errorMaxFilesInProcess: string | undefined);
    get errorMaxFilesInProcess(): string | undefined;
    /**
     *
     */
    set errorMaxFileSize(errorMaxFilesSize: string | undefined);
    get errorMaxFileSize(): string | undefined;
    /**
     * Called when the fileupload value changes
     */
    filesdragenter: EventEmitter<JQuery.TriggeredEvent<any, any, any, any>>;
    filesdropped: EventEmitter<File[]>;
    beforecreatestatus: EventEmitter<File[]>;
    aftercreatestatus: EventEmitter<File[]>;
    fileprogress: EventEmitter<File[]>;
    fileaborted: EventEmitter<File[]>;
    filecompleteduploading: EventEmitter<File[]>;
    fileremoved: EventEmitter<File[]>;
    /** Set of options for this control. */
    private options;
    private jQueryElement?;
    private fileuploadadvanced?;
    /**
     * Updates the control by merging the given settings into
     * the EP widget.
     *
     * @param settings the settings to merge.
     */
    updated(settings: SohoFileUploadAdvancedOptions): void;
    /**
     * Destroys the control.
     */
    destroy(): void;
    /**
     * Constructor.
     */
    constructor(element: ElementRef, ref: ChangeDetectorRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoFileUploadAdvancedComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoFileUploadAdvancedComponent, "soho-fileupload-advanced,div[soho-fileupload-advanced]", never, { "disabled": { "alias": "disabled"; "required": false; }; "isStandalone": { "alias": "isStandalone"; "required": false; }; "allowedTypes": { "alias": "allowedTypes"; "required": false; }; "send": { "alias": "send"; "required": false; }; "maxFiles": { "alias": "maxFiles"; "required": false; }; "maxFilesInProcess": { "alias": "maxFilesInProcess"; "required": false; }; "maxFileSize": { "alias": "maxFileSize"; "required": false; }; "fileName": { "alias": "fileName"; "required": false; }; "showBrowseButton": { "alias": "showBrowseButton"; "required": false; }; "textDropArea": { "alias": "textDropArea"; "required": false; }; "textDropAreaWithBrowse": { "alias": "textDropAreaWithBrowse"; "required": false; }; "textBtnCancel": { "alias": "textBtnCancel"; "required": false; }; "textBtnCloseError": { "alias": "textBtnCloseError"; "required": false; }; "textBtnRemove": { "alias": "textBtnRemove"; "required": false; }; "errorMaxFiles": { "alias": "errorMaxFiles"; "required": false; }; "errorMaxFilesInProcess": { "alias": "errorMaxFilesInProcess"; "required": false; }; "errorMaxFileSize": { "alias": "errorMaxFileSize"; "required": false; }; }, { "filesdragenter": "filesdragenter"; "filesdropped": "filesdropped"; "beforecreatestatus": "beforecreatestatus"; "aftercreatestatus": "aftercreatestatus"; "fileprogress": "fileprogress"; "fileaborted": "fileaborted"; "filecompleteduploading": "filecompleteduploading"; "fileremoved": "fileremoved"; }, never, ["*"], false, never>;
}

/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoToolbarFlexSearchFieldComponent implements AfterViewChecked, AfterViewInit, OnDestroy {
    private changeDetector;
    private element;
    private ngZone;
    /**
     * Options, overwriting any existing options already set on the component, and hence combining
     * this Input with the othera is not recommended.
     *
     * (Note: could change this to use {...this._options,...value})
     */
    options: SohoToolbarFlexSearchFieldOptions;
    /** Adds an X button for clearing the search value. */
    set clearable(value: boolean);
    /** Where it's collapsible or not */
    set collapsible(value: boolean);
    set collapsibleOnMobile(value: boolean);
    set filterMode(value: SohoAutoCompleteFilterMode);
    /** AutoComplete : Source Function/Data/Url/Array */
    set source(value: SohoAutoCompleteSource);
    /** Template that can be passed */
    set template(value: string);
    selected: EventEmitter<Object[]>;
    cleared: EventEmitter<Object[]>;
    /**
     * @todo replace override of native element
     */
    change: EventEmitter<Object[]>;
    get isSearchField(): boolean;
    /**
     * Local variables
     */
    private jQueryElement?;
    private toolbarFlexSearchField?;
    private searchFieldChanged;
    constructor(changeDetector: ChangeDetectorRef, element: ElementRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    clear(): void;
    get searchField(): SohoToolbarFlexSearchFieldStatic | undefined;
    private markForRefresh;
    updated(settings: SohoToolbarFlexSearchFieldOptions): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoToolbarFlexSearchFieldComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoToolbarFlexSearchFieldComponent, "input[soho-toolbar-flex-searchfield]", never, { "options": { "alias": "options"; "required": false; }; "clearable": { "alias": "clearable"; "required": false; }; "collapsible": { "alias": "collapsible"; "required": false; }; "collapsibleOnMobile": { "alias": "collapsibleOnMobile"; "required": false; }; "filterMode": { "alias": "filterMode"; "required": false; }; "source": { "alias": "source"; "required": false; }; "template": { "alias": "template"; "required": false; }; }, { "selected": "selected"; "cleared": "cleared"; "change": "change"; }, never, ["*"], false, never>;
}
/**
 * soho toolbar flex more button
 */
export declare class SohoToolbarFlexMoreButtonComponent {
    isMoreButton: boolean;
    isToolbarSection: boolean;
    isPageChanger: boolean;
    isDisabled: boolean;
    moreButtonId?: string;
    /** @deprecated doesn't seem to be used **/
    ajaxBeforeFunction?: Function;
    /** @deprecated doesn't seem to be used **/
    menuId?: string;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoToolbarFlexMoreButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoToolbarFlexMoreButtonComponent, "soho-toolbar-flex-more-button", never, { "isPageChanger": { "alias": "isPageChanger"; "required": false; }; "isDisabled": { "alias": "isDisabled"; "required": false; }; "moreButtonId": { "alias": "moreButtonId"; "required": false; }; "ajaxBeforeFunction": { "alias": "ajaxBeforeFunction"; "required": false; }; "menuId": { "alias": "menuId"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**
 * soho toolbar flex page title.
 */
export declare class SohoToolbarFlexPageTitleComponent {
    isPageTitle: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoToolbarFlexPageTitleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoToolbarFlexPageTitleComponent, "[soho-toolbar-flex-page-title]", never, {}, {}, never, ["*"], false, never>;
}
/**
 * soho toolbar flex section title.
 */
export declare class SohoToolbarFlexSectionTitleComponent {
    isSectionTitle: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoToolbarFlexSectionTitleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoToolbarFlexSectionTitleComponent, "[soho-toolbar-flex-section-title]", never, {}, {}, never, ["*"], false, never>;
}
/**
 * Generic soho toolbar flex section
 */
export declare class SohoToolbarFlexSectionComponent {
    isToolbarSection: boolean;
    isTitleFavor: boolean;
    isTitle: boolean;
    isButtonSet: boolean;
    isSearch: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoToolbarFlexSectionComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoToolbarFlexSectionComponent, "soho-toolbar-flex-section", never, { "isTitleFavor": { "alias": "isTitleFavor"; "required": false; }; "isTitle": { "alias": "isTitle"; "required": false; }; "isButtonSet": { "alias": "isButtonSet"; "required": false; }; "isSearch": { "alias": "isSearch"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**
 * Soho toolbar Navigation button
 */
export declare class SohoToolbarFlexNavButtonComponent implements AfterViewInit {
    private element;
    private ngZone;
    isIconButton: boolean;
    isAppMenuTrigger: boolean;
    typeAttr: string;
    /** Reference to the Soho control api. */
    private button?;
    private _buttonOptions;
    /** Reference to the jQuery control. */
    private jQueryElement?;
    constructor(element: ElementRef, ngZone: NgZone);
    set buttonOptions(buttonOptions: SohoButtonOptions);
    get buttonOptions(): SohoButtonOptions;
    ngAfterViewInit(): void;
    updated(settings?: SohoButtonOptions): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoToolbarFlexNavButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoToolbarFlexNavButtonComponent, "button[soho-toolbar-flex-nav-button]", never, { "buttonOptions": { "alias": "buttonOptions"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**
 * The main soho toolbar flex component
 */
export declare class SohoToolbarFlexComponent implements AfterViewChecked, AfterViewInit, OnDestroy {
    private changeDetector;
    private element;
    private ngZone;
    isToolbar: boolean;
    /**
     * Allows a moreMenuSettings object to be propagated down into the Toolbar Flex.
     * the jQuery Toolbar Flex component handles passing these settings into the More Actions
     * menu's jQuery Popupmenu.
     */
    set moreMenuBeforeOpenFunction(beforeOpen: AjaxBeforeMoreMenuOpenFunction);
    /** Add extra attributes like id's to the component **/
    set attributes(attributes: Array<Object> | Object);
    /**
     * The selected event is fired when a toolbar button has been clicked.
     */
    selected: EventEmitter<SohoToolbarFlexSelectedEvent>;
    private _options;
    private jQueryElement?;
    private toolbarFlex?;
    private toolbarFlexChanged?;
    constructor(changeDetector: ChangeDetectorRef, element: ElementRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    updated(settings?: SohoToolbarFlexOptions): void;
    /**
     * The buttonset API for the modal dialog.
     *
     * @returns the buttonset API for the modal dialog, if initialised.
     */
    get buttonsetAPIs(): Array<SohoButtonsetStatic> | undefined;
    /**
     * The buttonset API for the modal dialog.
     *
     * @returns the buttonset API for the modal dialog, if initialised.
     */
    get buttonsets(): Array<HTMLElement> | undefined;
    get options(): SohoToolbarFlexOptions;
    private markForRefresh;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoToolbarFlexComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoToolbarFlexComponent, "soho-toolbar-flex, div[soho-toolbar-flex]", never, { "moreMenuBeforeOpenFunction": { "alias": "moreMenuBeforeOpenFunction"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; }, { "selected": "selected"; }, never, ["*"], false, never>;
}

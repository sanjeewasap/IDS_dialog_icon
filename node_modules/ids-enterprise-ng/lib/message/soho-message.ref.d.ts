/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="jquery" />
/// <reference types="jquery" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/**
 * Wrapper for the jQuery modal control.
 */
export declare class SohoMessageRef {
    /** Vetoable Event Guard */
    private eventGuard;
    /** Selector referencing the modal-dialog after it has been moved to the dialog container. */
    private jQueryElement?;
    /** Soho Control Api */
    private _message?;
    /** The result of the dialog. */
    private _dialogResult;
    /** Dialog placeholder, defaults to $('body')*/
    private _placeholder;
    /** Event fired when the message is opened. */
    private open$;
    /**
     * Cached options.
     */
    private _options;
    /**
     * Sets the whole options block for this modal dialog.
     *
     * @param options - the options to set.
     */
    options(options?: SohoMessageOptions): SohoMessageRef;
    /**
     * Sets the width for the dialog.
     *
     * @param width - the extra frame height to allow.
     */
    frameHeight(width: number): SohoMessageRef;
    /**
     * Sets the title of the message dialog.
     *
     * @param title - the title of the dialog.
     */
    title(title: string): SohoMessageRef;
    /**
     * Sets the buttons to use on the modal dialog.
     *
     * @param buttons - list of buttons to display
     */
    buttons(buttons: SohoModalButton[]): SohoMessageRef;
    /**
     * Is this an error dialog?
     *
     * @param isError - true if this dialog is to be styled an an alert.
     */
    isError(isError: boolean): SohoMessageRef;
    /**
     * Sets the 'message' that the message dialog displays.
     *
     * @param message - a selector or string representing the dialog content.
     */
    message(message: string): SohoMessageRef;
    /**
     * Sets the 'status' of the modal control.
     */
    status(status: string): SohoMessageRef;
    /**
     * Sets the 'cssClass' of the modal control.
     */
    cssClass(cssClass: string): SohoMessageRef;
    /**
     * If true, it will show a close icon button on the top right of the message.
     *
     * @param showCloseBtn - if true, the x button will be shown.
     */
    showCloseBtn(showCloseBtn: boolean): SohoMessageRef;
    /**
     * Sets the 'allowTags' of the modal control.
     */
    allowedTags(allowedTags: string): SohoMessageRef;
    /**
     * Sets the 'returnFocus' of the modal control.
     *
     * @param returnFocus -if true; the dialog will autoFocus.
     */
    returnFocus(returnFocus: JQuery): SohoMessageRef;
    /**
     * Controls the opacity of the background overlay.
     *
     * @param overlayOpacity - The percent between 0 and 1 of opacity to use.
     */
    overlayOpacity(overlayOpacity: number): SohoMessageRef;
    /**
     * Causes this modal instance to become hidden when another modal is displayed over top.
     *
     * @param hideUnderneath - If it should be on top or bottom.
     */
    hideUnderneath(hideUnderneath: boolean): SohoMessageRef;
    /**
     * Causes this modal instance to become hidden when another modal is displayed over top.
     *
     * @param hideUnderneath - If it should be on top or bottom.
     */
    attributes(attributes: Array<Object> | Object): SohoMessageRef;
    /**
     * Dialog result property.
     *
     * @param dialogResult - the stored restult of the dialog.
     */
    set dialogResult(dialogResult: any);
    get dialogResult(): any;
    /**
     * Constructor.
     *
     * @param placeholder for the dialog; defaults to the body.
     */
    constructor();
    /**
     * Displays the message.
     *
     * @return the dialog ref.
     */
    open(): SohoMessageRef;
    /**
     * Closes the modal dialog, if open.
     *
     * @param dialogResult - optional result - held for the caller.
     */
    close(dialogResult?: any): SohoMessageRef;
    /**
     * Registers a before open guard.
     *
     * @param eventFn - the function to call before openning the dialog.
     */
    beforeOpen(eventFn: () => boolean): SohoMessageRef;
    /**
     * Opened Event.
     *
     * This event is fired when the dialog is being opened.
     *
     * @param eventFn - the function to invoke when the dialog is to be opened.
     */
    opened(eventFn: Function): SohoMessageRef;
    /**
     * Registers a before close guard.
     *
     * @param eventFn - the function to call before closing the dialog.
     */
    beforeClose(eventFn: () => boolean): SohoMessageRef;
    /**
     * Handles the 'beforeOpen' event, fired before the modal dialog
     * has been opened.
     *
     * @param event - full event object.
     *
     * @return true if the dialog can be opened; otherwise false if veoted.
     */
    private onBeforeOpen;
    /**
     * Handles the 'beforeCloseEvent, fired before the modal dialog
     * is closed, allowing the closure to be vetoed.
     *
     * @param event - event object.
     * @return true if the dialog can be closed; otherwise false if veoted.
     */
    private onBeforeClose;
    /**
     * Handles the 'open' event, fired just before
     * the focus is assigned to a message.
     *
     * @param event - full event object.
     */
    private onOpen;
}

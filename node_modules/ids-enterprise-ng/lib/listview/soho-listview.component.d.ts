/// <reference types="jquery" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, AfterViewChecked, ElementRef, EventEmitter, OnDestroy, QueryList, NgZone } from '@angular/core';
import { SohoSearchFieldComponent } from '../searchfield/soho-searchfield.component';
import * as i0 from "@angular/core";
/**
 * This component will allow the developer to modify any DOM element
 * by exposing it (if desired)
 */
export declare class SohoListViewSearchComponent {
    /**
     * Use this flag if you are projecting a soho-searchfield into this component
     * from another component and do not want this component to build another
     * searchfield
     */
    buildSearch: boolean;
    get isListviewSearch(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoListViewSearchComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoListViewSearchComponent, "[soho-listview-search]", never, { "buildSearch": { "alias": "buildSearch"; "required": false; }; }, {}, never, ["span[soho-searchfield-wrapper]", "input[soho-searchfield]", "*"], false, never>;
}
export declare class SohoListViewItemComponent implements AfterViewInit {
    element: ElementRef;
    /** Underling jQuery item. */
    private listItem?;
    /** Sets the item as disabled.  */
    disabled: boolean;
    /** Sets the item as selected.  */
    selected: boolean;
    /**
     * Constructor.
     *
     * @param element - the element.
     */
    constructor(element: ElementRef);
    /**
     * The index of the list view item in it's parent.
     */
    get index(): number | undefined;
    get selector(): JQuery<HTMLElement> | undefined;
    ngAfterViewInit(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoListViewItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoListViewItemComponent, "[soho-listview-item]", never, { "disabled": { "alias": "disabled"; "required": false; }; "selected": { "alias": "selected"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare class SohoListViewHeaderComponent {
    get isHeading(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoListViewHeaderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoListViewHeaderComponent, "[soho-listview-header]", never, {}, {}, never, ["*"], false, never>;
}
export declare class SohoListViewSubHeaderComponent {
    get isSubHeading(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoListViewSubHeaderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoListViewSubHeaderComponent, "[soho-listview-subheader]", never, {}, {}, never, ["*"], false, never>;
}
export declare class SohoListViewMicroComponent {
    get isMicro(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoListViewMicroComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoListViewMicroComponent, "[soho-listview-micro]", never, {}, {}, never, ["*"], false, never>;
}
export declare class SohoListViewComponent implements AfterViewInit, OnDestroy, AfterViewChecked {
    private ngZone;
    items?: QueryList<SohoListViewItemComponent>;
    /**
     * String of classes to append to the class for the list-view div element
     */
    class?: string;
    sohoListviewElementId?: string;
    /**
     * Force a update to fire next viewChecked.
     */
    updateRequired?: boolean;
    /**
     * Array of data
     */
    set dataset(value: Object[] | undefined);
    get dateset(): Object[] | undefined;
    /** Audible Label (or use parent title). */
    set description(value: string);
    /** If paging is activated, sets the number of listview items available per page. */
    set pagesize(value: number);
    /** If true, activates paging. */
    set paging(value: boolean);
    /** If true, associates itself with a Searchfield/Autocomplete and allows itself to be filtered.  */
    set searchable(value: boolean | undefined);
    get searchable(): boolean | undefined;
    /** false, 'single', or 'multiple'. */
    set selectable(value: SohoListViewSelectable);
    /** Select on focus change?true or false. */
    set selectOnFocus(value: boolean);
    /** External function that can be used to provide an empty  message when no data is available. */
    set emptyMessage(value: SohoEmptyMessageOptions);
    /** External function that can be used to provide a datasource, or a URL. */
    set source(value: SohoListViewSourceFunction | string);
    /** Html Template String. */
    set template(value: string);
    set disableItemDeactivation(value: boolean | undefined);
    get disableItemDeactivation(): boolean | undefined;
    set attributes(attributes: Array<Object> | Object | undefined);
    get attributes(): Array<Object> | Object | undefined;
    /**
     * Set the list of selected items either by their indices or via the
     * jQuery selector for the li element.
     *
     * @param selectedItems the list of selected items.
     * @throws Error if any of the indicies are out of bounds.
     */
    set selectedItems(selectedItems: SohoListViewItemReference[]);
    /**
     * Selected List Items.
     *
     * Note currenty this returns the index of the selected item.
     *
     * @return the indexes of the selected list items.
     */
    get getSelectedItems(): SohoListViewItemReference[] | undefined;
    /**
     * Called after the listview is rendered, passes the dataset
     */
    rendered: EventEmitter<Object[]>;
    /**
     * Called once an item is selected. Returns an object containing the event and the
     * current selected items.
     */
    selected: EventEmitter<Object>;
    /**
     * Called once an item is deselected. Returns an object containing the event and the
     * current selected items.
     */
    unselected: EventEmitter<Object>;
    /**
     * Called once an item is deselected. Returns an object containing the event and the
     * current selected items.
     */
    deselected: EventEmitter<Object>;
    /**
     * Called once an item is activated. Returns an object containing the event
     * and additional info about the activated item.
     */
    itemactivated: EventEmitter<Object>;
    /**
     * Called once an item is deactivated.  Returns an object containing the event
     * and additional info about the deactivated item.
     */
    itemdeactivated: EventEmitter<Object>;
    /**
     * Called once an item is clicked. You may also prefer need activated / deactived here.
     */
    click: EventEmitter<Object>;
    /**
     * Called once an item is double clicked. This isnt used that often.
     */
    dblclick: EventEmitter<Object>;
    /**
     * Called during right click to enable context menus on list items.
     * Use popupmenu during this event.
     */
    contextmenu: EventEmitter<Object>;
    /**
     * Called after the list has been sorted for any reason
     */
    sorted: EventEmitter<Object[]>;
    listViewRef: ElementRef | undefined;
    searchfieldRef?: SohoSearchFieldComponent;
    /**
     * Local variables
     */
    private jQueryElement?;
    private listview?;
    private options;
    /**
     * Constructor.
     */
    constructor(ngZone: NgZone);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    get listClass(): string;
    /**
     * Clear all the currently selected listview items that are selected.
     */
    clearAllSelected(): void;
    /**
     * Toggle the selected listview items between all and none.
     */
    toggleAll(): void;
    /**
     * Removes the list item (or list items) identified by their index or jQuery element.
     *
     * @param index - the index (or list of indices) of the items to be removed.
     * @throws Error if the argument is null, or contains out of range indices then any error is thrown.
     */
    remove(index: SohoListViewItemReference | SohoListViewItemReference[]): void;
    /**
     * Unselects the list item (or list items) identified by their index or jQuery element.
     *
     * @param index - the index (or list of indices) of the items to be unselected.
     * @throws Error if the argument is null, or contains out of range indices then any error is thrown.
     */
    unselect(index: SohoListViewItemReference | SohoListViewItemReference[]): void;
    /**
     * Selects the list item (or list items) identified by their index or jQuery element.
     *
     * If the argument is null, or contains out of range indices then any error is thrown.
     *
     * @param index the index (or list of indices) of the items to be deselected.
     * @throws Error if the argument is null, or contains out of range indices then any error is thrown.
     */
    select(index: SohoListViewItemReference | SohoListViewItemReference[]): void;
    /**
     * Activate the given list item.
     */
    activateItem(item: SohoListViewItemReference): void;
    /**
     * Return an object containing info about the currently activated item.
     */
    activatedItem(): any;
    /**
     * De-activate the given list item. If no item is specified the currently
     * activated item will be deactivated.
     */
    deactivateItem(item?: SohoListViewItemReference): void;
    /**
     * Toggle Activation on the given list item.
     */
    toggleItemActivation(item: SohoListViewItemReference): void;
    /**
     * Apply the given function to the list view item(s).
     *
     * @param fn the function to apply - must take a SohoListViewReference.
     * @param index the index of list view item(s).
     */
    private apply;
    /**
     * Verifies the given item reference is within allowable ranges.
     */
    private boundsCheck;
    /**
     * The number of items in the list.
     */
    private get itemCount();
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoListViewComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoListViewComponent, "soho-listview", never, { "class": { "alias": "class"; "required": false; }; "sohoListviewElementId": { "alias": "sohoListviewElementId"; "required": false; }; "dataset": { "alias": "dataset"; "required": false; }; "description": { "alias": "description"; "required": false; }; "pagesize": { "alias": "pagesize"; "required": false; }; "paging": { "alias": "paging"; "required": false; }; "searchable": { "alias": "searchable"; "required": false; }; "selectable": { "alias": "selectable"; "required": false; }; "selectOnFocus": { "alias": "selectOnFocus"; "required": false; }; "emptyMessage": { "alias": "emptyMessage"; "required": false; }; "source": { "alias": "source"; "required": false; }; "template": { "alias": "template"; "required": false; }; "disableItemDeactivation": { "alias": "disableItemDeactivation"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "selectedItems": { "alias": "selectedItems"; "required": false; }; }, { "rendered": "rendered"; "selected": "selected"; "unselected": "unselected"; "deselected": "deselected"; "itemactivated": "itemactivated"; "itemdeactivated": "itemdeactivated"; "click": "click"; "dblclick": "dblclick"; "contextmenu": "contextmenu"; "sorted": "sorted"; }, ["searchfieldRef", "items"], ["input[soho-searchfield]", "div.[soho-listview-search]", "soho-toolbar.contextual-toolbar,div.[soho-toolbar].contextual-toolbar", "li[soho-listview-item]", "[soho-emptymessage]"], false, never>;
}

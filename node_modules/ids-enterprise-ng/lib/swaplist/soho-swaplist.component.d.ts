/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import { SohoSwapListService } from './soho-swaplist.service';
import * as i0 from "@angular/core";
export type SohoSwapListCardType = 'available' | 'selected' | 'full-access';
/**************************************************************
 * SWAP LIST CARD
 **************************************************************/
export declare class SohoSwapListCardComponent {
    get isSwapList(): boolean;
    /** The type of card. */
    private cardtype?;
    /** The title for the card. */
    private cardtitle?;
    /** The show searchable for the search-field. */
    private showsearchable?;
    /** The show searchable for the search-field. */
    private searchtitle?;
    set type(value: SohoSwapListCardType);
    set showSearchable(value: boolean | undefined);
    get showSearchable(): boolean | undefined;
    set searchTitle(value: string | undefined);
    get searchTitle(): string | undefined;
    /**
     * Return the class to use for the card.
     */
    get cardClass(): string;
    /**
     * Return the card type to use for the card.
     */
    get cardType(): string;
    /**
     * Title of the card, e.g. 'Available'.
     */
    set title(value: string | undefined);
    get title(): string | undefined;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoSwapListCardComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoSwapListCardComponent, "soho-swaplist-card", never, { "type": { "alias": "type"; "required": false; }; "showSearchable": { "alias": "showSearchable"; "required": false; }; "searchTitle": { "alias": "searchTitle"; "required": false; }; "title": { "alias": "title"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**************************************************************
 * SWAP LIST
 **************************************************************/
export declare class SohoSwapListComponent implements AfterViewInit, OnDestroy {
    private element;
    private ngZone;
    private swaplistService;
    /** Used to provide unnamed controls with a unique id. */
    private static counter;
    /** Selector for originating element. */
    private jQueryElement?;
    /** Reference to the SoHoXi control api. */
    private swaplist?;
    /** Block of options, use the accessors to modify. */
    private _options;
    /** Flag controlling the display of the full access (additional) items. */
    private _showFullAccessCard;
    /**
     * Assign the id for the control
     * (maps to the name to use on a label's 'for' attribute)
     */
    get id(): string;
    /** Adds the 'swaplist' class required by the SoHoXi control. */
    get isSwapList(): boolean;
    /** Adds the 'one-third' class required when full access is set. */
    get isOneThird(): boolean;
    /** The component used to represent the available items. */
    _availableCard?: SohoSwapListCardComponent;
    /** The component used to represent the selected items. */
    _selectedCard?: SohoSwapListCardComponent;
    /** The component used to represent the full access (additional) items. */
    _additionalCard?: SohoSwapListCardComponent;
    /** Name for the swaplist control. Necessary for ngModel to function. */
    name: string;
    /** Default title for available items card. */
    availableCardTitle: string;
    /** Default title for selected items card. */
    selectedCardTitle: string;
    /** Default title for additional items card. */
    fullAccessCardTitle: string;
    /** Default search title for available items card. */
    availableCardSearchTitle: string;
    /** Default search title for selected items card. */
    selectedCardSearchTitle: string;
    /** Default search title for additional items card. */
    fullAccessCardSearchTitle: string;
    /** Default button text for select. */
    btnMoveToSelect: string;
    /** Default button text for move to left. */
    btnMoveToLeft: string;
    /** Default button text for  move to right. */
    btnMoveToRight: string;
    /**
     * Set searchable option for SohoSwapList.
     *
     * @param value option.
     */
    set searchable(value: boolean | undefined);
    get searchable(): boolean | undefined;
    /** Add extra attributes like id's to the component **/
    set attributes(value: Array<Object> | Object | undefined);
    get attributes(): Array<Object> | Object | undefined;
    /**
     * Set available card items.
     * @param value item data.
     */
    set availableItems(value: SohoSwapListItem[] | undefined);
    get availableItems(): SohoSwapListItem[] | undefined;
    /** Disable dragging (all true by default) **/
    set draggable(value: SohoSwapSections | undefined);
    get draggable(): SohoSwapSections | undefined;
    /** Keep items in the section when moving (all false by default) **/
    set keepInList(value: SohoSwapSections | undefined);
    get keepInList(): SohoSwapSections | undefined;
    /**
     * Set selected card items.
     *
     * @param value item data.
     */
    set selectedItems(value: SohoSwapListItem[]);
    /**
     * Return the dataset currently selected card items.
     *
     * @return an array of SohoSwapListItem.
     */
    get selectedItems(): SohoSwapListItem[];
    /**
     * Set additional card items.
     *
     * @param value item data.
     */
    set additionalItems(value: SohoSwapListItem[]);
    /**
     * Return the dataset currently additional card items.
     *
     * @return an array of SohoSwapListItem.
     */
    get additionalItems(): SohoSwapListItem[];
    /**
     * Set flag to display third card full access card or not.
     *
     * @param value the value to show full access card.
     */
    set showFullAccessCard(value: boolean);
    /**
     * Return the value whether full access card displayed.
     *
     * @return boolean value.
     */
    get showFullAccessCard(): boolean;
    /**
     * Called before swap item/s.
     */
    beforeSwapEvent: EventEmitter<SohoSwapListBeforeSwapEvent>;
    /**
     * Called when the swap list updates in some way.
     */
    updateEvent: EventEmitter<SohoSwapListSwapUpdateEvent>;
    constructor(element: ElementRef, ngZone: NgZone, swaplistService: SohoSwapListService);
    ngAfterViewInit(): void;
    /**
     * Destroys any resources created by the control.
     */
    ngOnDestroy(): void;
    /**
     * In case the list data is being bound asynchronously or modified on the fly,
     * you will need to trigger updated on so it updates the list(s).
     */
    updated(): void;
    /**
     * Updates the dataset used by the swaplist, dynamically refesing the
     * control's view.
     *
     * @param dataset the dataset to assign.
     */
    updateDataset(dataset: SohoSwapListOptions): void;
    /**
     * Converts the list of items into a list of swaplist items.
     *
     * @param items data to convert to item model.
     *
     * @todo remove any
     */
    private ConvertToModel;
    private onBeforeSwap;
    private onSwapUpdate;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoSwapListComponent, [null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoSwapListComponent, "soho-swaplist", never, { "name": { "alias": "name"; "required": false; }; "availableCardTitle": { "alias": "availableCardTitle"; "required": false; }; "selectedCardTitle": { "alias": "selectedCardTitle"; "required": false; }; "fullAccessCardTitle": { "alias": "fullAccessCardTitle"; "required": false; }; "availableCardSearchTitle": { "alias": "availableCardSearchTitle"; "required": false; }; "selectedCardSearchTitle": { "alias": "selectedCardSearchTitle"; "required": false; }; "fullAccessCardSearchTitle": { "alias": "fullAccessCardSearchTitle"; "required": false; }; "btnMoveToSelect": { "alias": "btnMoveToSelect"; "required": false; }; "btnMoveToLeft": { "alias": "btnMoveToLeft"; "required": false; }; "btnMoveToRight": { "alias": "btnMoveToRight"; "required": false; }; "searchable": { "alias": "searchable"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "availableItems": { "alias": "availableItems"; "required": false; }; "draggable": { "alias": "draggable"; "required": false; }; "keepInList": { "alias": "keepInList"; "required": false; }; "selectedItems": { "alias": "selectedItems"; "required": false; }; "additionalItems": { "alias": "additionalItems"; "required": false; }; "showFullAccessCard": { "alias": "showFullAccessCard"; "required": false; }; }, { "beforeSwapEvent": "beforeswap"; "updateEvent": "updated"; }, ["_availableCard", "_selectedCard", "_additionalCard"], never, false, never>;
}

/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoFieldFilterDirective implements AfterViewChecked, AfterViewInit, OnDestroy {
    private ref;
    private element;
    private ngZone;
    set fieldSettings(settings: SohoFieldFilterSettings);
    set fieldDropdownDataSet(dataset: Array<SohoFieldFilterOption>);
    set dropdownOpts(options: SohoDropDownOptions);
    set template(template: string);
    set selectedFilterType(type: SohoFieldFilterOperator);
    filtered: EventEmitter<SohoFieldFilteredEvent>;
    private _settings;
    /**
     * Local variables
     */
    private jQueryElement?;
    private fieldFilter?;
    private runUpdatedOnCheck?;
    constructor(ref: ChangeDetectorRef, element: ElementRef, ngZone: NgZone);
    ngAfterViewChecked(): void;
    ngAfterViewInit(): void;
    /**
     * Get current filter type
     * returns {object} The current filter type
     */
    getFilterType(): any;
    /**
     * Set filter type to given value
     * param {number|string} value to be set, index or value.
     * returns {void}
     */
    setFilterType(value: SohoFieldFilterOperator | number): void;
    /** Destructor. */
    ngOnDestroy(): void;
    markForRefresh(): void;
    private onFiltered;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoFieldFilterDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SohoFieldFilterDirective, "[soho-field-filter]", never, { "fieldSettings": { "alias": "fieldSettings"; "required": false; }; "fieldDropdownDataSet": { "alias": "fieldDropdownDataSet"; "required": false; }; "dropdownOpts": { "alias": "dropdownOpts"; "required": false; }; "template": { "alias": "template"; "required": false; }; "selectedFilterType": { "alias": "selectedFilterType"; "required": false; }; }, { "filtered": "filtered"; }, never, never, false, never>;
}

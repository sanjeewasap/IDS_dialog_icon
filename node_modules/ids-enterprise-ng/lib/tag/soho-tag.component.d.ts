/// <reference types="ids-enterprise-typings" />
import { ElementRef, AfterViewInit, OnDestroy, NgZone, EventEmitter } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Support Tag types.
 *
 * `error` displayed as an error (for example with a red background).
 * `good` displayed to mean correct or valid (for example with a green background).
 * `alert` displayed as an alert (for example with a yellow background).
 * `secondary` displayed as grey - like a secondary button.
 *
 * Leaving the value off the element displays the element in it's default state.
 *
 * Note: You should not use color alone to indicate state, this should be either
 * supplemented with off-screen labels or visual labels near the element explaining the state.
 */
export type SohoTagType = 'error' | 'good' | 'alert' | 'secondary' | 'info' | undefined;
export declare class SohoTagListComponent implements AfterViewInit, OnDestroy {
    private element;
    private ngZone;
    get isTagList(): boolean;
    /**
     * Fired before a tag item is removed.
     */
    beforeRemove: EventEmitter<SohoTagBeforeRemoveEvent>;
    /**
     * Fired after a tag item is removed.
     */
    afterRemove: EventEmitter<SohoTagAfterRemoveEvent>;
    /**
     * The wrapped jQuery element.
     */
    private jQueryElement?;
    /**
     * Creates an instance of SohoTagListComponent.
     *
     * @param element wrapped element.
     * @param ngZone angular zone.
     *
     */
    constructor(element: ElementRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    private onAfterTagRemove;
    private onBeforeTagRemove;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoTagListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoTagListComponent, "[soho-tag-list]", never, {}, { "beforeRemove": "beforeRemove"; "afterRemove": "afterRemove"; }, never, ["*"], false, never>;
}
/**
 * Angular Support for elements styled as SohoXi tags.  The styling can be
 * controlled using the additional tag type, specified on element.
 *
 * They can be mixed in with other elements like lists, grids and search fields.
 *
 *<pre>
 * {@code
 * <span soho-tag='error'>#Error</span>
 * }
 *</pre>
 *
 * @export
 *
 *
 *
 */
export declare class SohoTagComponent implements AfterViewInit, OnDestroy {
    private element;
    private ngZone;
    static ALERT: SohoTagType;
    static GOOD: SohoTagType;
    static SECONDARY: SohoTagType;
    static ERROR: SohoTagType;
    static INFO: SohoTagType;
    static DEFAULT: SohoTagType;
    /**
     * Fired before a tag item is removed.
     */
    beforeTagRemove: EventEmitter<SohoTagBeforeRemoveEvent>;
    /**
     * Fired after a tag item is removed.
     *
     * @todo remove usage of native element
     */
    click: EventEmitter<SohoTagAfterRemoveEvent>;
    /** Options. */
    private options;
    get isTag(): boolean;
    get alert(): boolean;
    get good(): boolean;
    get secondary(): boolean;
    get error(): boolean;
    get info(): boolean;
    isClickable?: boolean;
    isDismissible?: boolean;
    /**
     * Allow override of element name, to match the component name.
     */
    set sohoTag(type: SohoTagType);
    private tagType;
    private jQueryElement?;
    tag?: SohoTag | null;
    /**
     * Creates an instance of SohoTagComponent.
     */
    constructor(element: ElementRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    private onBeforeTagRemove;
    private onClick;
    /**
     * The settings have been updated.
     */
    updated(): void;
    /**
     * Destroys the component.
     *
     *
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoTagComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoTagComponent, "[soho-tag]", never, { "isClickable": { "alias": "isClickable"; "required": false; }; "isDismissible": { "alias": "isDismissible"; "required": false; }; "sohoTag": { "alias": "soho-tag"; "required": false; }; }, { "beforeTagRemove": "beforeTagRemove"; "click": "click"; }, never, ["*"], false, never>;
}

import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy, QueryList } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
/**
 * Helper Component for the ExpandableAreaComponent
 */
export declare class ExpandableHeaderComponent {
    static ɵfac: i0.ɵɵFactoryDeclaration<ExpandableHeaderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ExpandableHeaderComponent, "soho-expandable-header", never, {}, {}, never, ["*"], false, never>;
}
/**
 * Helper Component for the ExpandableAreaComponent
 */
export declare class ExpandablePaneComponent {
    fixed: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<ExpandablePaneComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ExpandablePaneComponent, "soho-expandable-pane", never, { "fixed": { "alias": "fixed"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**
 * Helper Component for the ExpandableAreaComponent
 */
export declare class ExpandableFooterComponent {
    static ɵfac: i0.ɵɵFactoryDeclaration<ExpandableFooterComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ExpandableFooterComponent, "soho-expandable-footer", never, {}, {}, never, ["*"], false, never>;
}
export declare class ExpandableAreaComponent implements AfterViewInit, OnDestroy {
    private element;
    private changeDetectorRef;
    private ngZone;
    id: string | undefined;
    set disabled(value: boolean | undefined);
    /**
     * Boolean value of the disabled state of the component
     */
    get disabled(): boolean | undefined;
    set closed(value: boolean | undefined);
    /**
     * Boolean value of the closed state of the component
     */
    get closed(): boolean | undefined;
    toggle?: Observable<boolean>;
    header: ExpandableHeaderComponent | undefined;
    panes: QueryList<ExpandablePaneComponent> | undefined;
    footer?: ExpandablePaneComponent;
    beforeexpand: EventEmitter<Object>;
    beforecollapse: EventEmitter<Object>;
    expand: EventEmitter<Object>;
    collapse: EventEmitter<Object>;
    afterexpand: EventEmitter<Object>;
    aftercollapse: EventEmitter<Object>;
    private jQueryElement?;
    private expandablearea?;
    private _disabled?;
    private _closed?;
    hasFixedPane: boolean;
    constructor(element: ElementRef, changeDetectorRef: ChangeDetectorRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Calls the expandablearea disable function
     */
    disable(): void;
    /**
     * Calls the expandablearea enable function
     */
    enable(): void;
    /**
     * Toggles the state of the expandablearea (open or closed) based on the passed
     * parameter.
     */
    toggleOpen(open: boolean): void;
    close(): void;
    open(): void;
    /**
     * The class setter for the expandable area div element
     */
    get expandableAreaClasses(): string;
    /**
     * The class setter for the header element
     */
    get headerClasses(): string;
    /**
     * The class setter for the pane element
     */
    get paneClasses(): string;
    /**
     * The class setter for the pane element
     */
    get footerClasses(): string;
    /**
     * The class setter for the visible pane element
     */
    get visiblePaneClasses(): string;
    private onBeforeExpand;
    private onBeforeCollapse;
    private onExpand;
    private onCollapse;
    private onAfterExpand;
    private onAfterCollapse;
    static ɵfac: i0.ɵɵFactoryDeclaration<ExpandableAreaComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<ExpandableAreaComponent, "soho-expandable-area", never, { "id": { "alias": "soho-expandable-area"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "closed": { "alias": "closed"; "required": false; }; "toggle": { "alias": "toggle"; "required": false; }; }, { "beforeexpand": "beforeexpand"; "beforecollapse": "beforecollapse"; "expand": "expand"; "collapse": "collapse"; "afterexpand": "afterexpand"; "aftercollapse": "aftercollapse"; }, ["header", "footer", "panes"], ["soho-expandable-header", "soho-expandable-pane[fixed=true]", "soho-expandable-pane", "soho-expandable-footer"], false, never>;
}

/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, OnDestroy, NgZone } from '@angular/core';
import { BaseControlValueAccessor } from '../utils/base-control-value-accessor';
import * as i0 from "@angular/core";
export declare class SohoSpinboxComponent extends BaseControlValueAccessor<number> implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    /** Disabled flag - used by initialisation. */
    internalIsDisabled?: boolean;
    private runUpdatedOnCheck?;
    set disabled(value: boolean | undefined);
    get disabled(): boolean | undefined;
    /**
     * @todo replace override of native element
     */
    change: EventEmitter<number>;
    spinboxClass: boolean;
    get spinboxType(): string;
    id?: string;
    name?: string;
    min?: number;
    max?: number;
    /**
     * Value of the spin box.
     */
    set value(val: number | string | any);
    get value(): number | string | any;
    step?: boolean;
    set attrDisabled(_value: boolean);
    private options;
    private jQueryElement?;
    private spinbox?;
    updateVal(value: string | number): void;
    /**
     * Creates an instance of SohoSpinboxComponent.
     *
     * @param element matched element.
     * @param ngZone angular zone.
     *
     */
    constructor(element: ElementRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    onChange(_event: SohoSpinboxEvent): void;
    /**
     * Override writeValue to allow the input element to be updated correctly.
     *
     * @param value the new value
     */
    writeValue(value: number): void;
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoSpinboxComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoSpinboxComponent, "input[soho-spinbox]", never, { "disabled": { "alias": "disabled"; "required": false; }; "id": { "alias": "id"; "required": false; }; "name": { "alias": "name"; "required": false; }; "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "value": { "alias": "value"; "required": false; }; "step": { "alias": "step"; "required": false; }; "attrDisabled": { "alias": "attrDisabled"; "required": false; }; }, { "change": "change"; }, never, ["*"], false, never>;
}

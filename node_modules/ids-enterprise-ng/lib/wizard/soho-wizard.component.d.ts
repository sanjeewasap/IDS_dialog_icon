/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, AfterContentInit } from '@angular/core';
import { SohoWizardHeaderComponent } from './soho-wizard-header.component';
import { SohoWizardPagesComponent } from './soho-wizard-pages.component';
import { SohoWizardPageComponent } from './soho-wizard-page.component';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the Soho Wizard Component.
 *
 * This component searches for a div with the attribute
 * 'soho-wizard' in the DOM, initialising those found with
 * the SoHo Wizard control.
 *
 * TODO:
 * =====
 *
 * - handling of ticks / tick model (based on underlying widget)
 * - model driven
 * - support Builder Panel style (with title?)
 * - support for "modal style" buttons.
 * - extract state machine
 */
export declare class SohoWizardComponent implements AfterViewInit, AfterContentInit, OnDestroy {
    private elementRef;
    /**
     * Reference to the underlying container for the pages.
     *
     *
     *
     */
    pagesContainer?: SohoWizardPagesComponent;
    /**
     * Reference to the header, container for the ticks.
     *
     *
     *
     */
    header?: SohoWizardHeaderComponent;
    /**
     * Ticks for the settings - this does not really work yet (i think).
     */
    set ticks(ticks: SohoWizardTick[]);
    get ticks(): SohoWizardTick[];
    /** Id of the current tick. */
    set currentTickId(tickId: string);
    get currentTickId(): string;
    /**
     * Provides a `beforeActivate` vetoable handler, which
     * allows the caller to prevent activation of a link.
     *
     * @todo needs linking with any buttons!
     */
    private beforeActivate?;
    /**
     * This event is fired when a tick is activated.
     */
    activated: EventEmitter<SohoWizardEvent>;
    /**
     * This event is fired after a tick is activated.
     */
    afteractivated: EventEmitter<SohoWizardEvent>;
    isWizardClass: boolean;
    /** Reference to the jQuery control. */
    private jQueryElement?;
    /** Reference to the SoHo wizard control api. */
    private wizard?;
    /** An internal options object that gets updated by using the component's Inputs(). */
    private _options;
    /**
     * Ordered list of steps.
     *
     *
     *
     *
     */
    private _steps?;
    /**
     * Has the wizard finished.
     */
    private finished;
    /**
     * Constructor.
     *
     * @param elementRef - the element matching this component.
     */
    constructor(elementRef: ElementRef);
    /**
     * Returns the currently selected page.
     */
    get currentPage(): SohoWizardPageComponent | undefined;
    /**
     * Moves to the first state if possible.
     */
    first(): void;
    /**
     * Attempts to move to the next step, if allowed.
     *
     *
     */
    next(): void;
    /**
     * Attempts to move to the previous step, if allowed.
     *
     *
     */
    previous(): void;
    /**
     * Attempts to move to the last step, if allowed.
     *
     *
     */
    last(): void;
    /**
     * Attempts to move to the last step, and finish the wizard.
     *
     *
     */
    finish(): void;
    /**
     * Is there another step after the current step?
     *
     * @return  true if there is another step; otherwise false.
     *
     */
    hasNext(): boolean;
    /**
     * Is there previous step.
     */
    hasPrevious(): boolean;
    /**
     * Returns true if the process has finished,
     * otherwise false.
     */
    hasFinished(): boolean;
    /**
     * Resets the state machine, moving to the first page
     * and clearing finished flag.
     */
    reset(): void;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    /**
     * Handle component destruction by clearing down the SoHo
     * wizard component.
     *
     *
     */
    ngOnDestroy(): void;
    private onActivated;
    private onBeforeActivate;
    private stepCount;
    private steps;
    private stepAt;
    private currentIndex;
    private currentStep;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoWizardComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoWizardComponent, "div[soho-wizard]", never, { "ticks": { "alias": "ticks"; "required": false; }; "currentTickId": { "alias": "currentTickId"; "required": false; }; "beforeActivate": { "alias": "beforeActivate"; "required": false; }; }, { "activated": "activated"; "afteractivated": "afteractivated"; }, ["pagesContainer", "header"], ["*"], false, never>;
}

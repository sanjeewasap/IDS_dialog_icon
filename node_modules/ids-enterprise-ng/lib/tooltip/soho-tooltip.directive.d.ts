/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, OnChanges } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoTooltipDirective implements AfterViewInit, OnDestroy, OnChanges {
    private element;
    private options;
    /**
     * @param content the content of the tooltip
     */
    set content(content: string);
    /**
     * @param offset offset
     */
    set offset(offset: number);
    /**
     * @param placement the orientation of the tooltip based on the source component.
     */
    set placement(placement: SohoTooltipOffset);
    set trigger(trigger: string);
    /**
     * @param tooltipTitle the title of the tooltip.
     */
    set title(title: string);
    /**
     * @param beforeShow before show.
     */
    set beforeShow(beforeShow: any);
    /**
     * @param popover is this a popover?
     */
    set popover(popover: boolean);
    /**
     * @param closebutton display the close button?
     */
    set closebutton(closebutton: boolean);
    /**
     * @param isError is this an error tooltip.
     */
    set isError(isError: boolean);
    /**
     * @param isErrorColor use the error color.
     */
    set isErrorColor(isErrorColor: boolean);
    /**
     * @param tooltipElement tooptip element
     */
    set tooltipElement(tooltipElement: any);
    /**
     * @param keepOpen keep the tooltip open?
     */
    set keepOpen(keepOpen: boolean);
    /**
     * @param extraClass additional classes
     */
    set extraClass(extraClass: string);
    /**
     * @param appendTo additional classes
     */
    set appendTo(appendTo: string);
    /**
     * @param maxWidth the maximum width of the tooltip in pixels.
     */
    set maxWidth(maxWidth: number);
    /**
     * If the object with the tooltip is tabbed to, will also show the tooltip.
     */
    set showOnKeyboardFocus(showOnKeyboardFocus: boolean);
    /**
     * Call back for hiding.
     */
    set onHidden(onHidden: Function);
    /**
     * Placement options pass through
     */
    set placementOpt(placementOpt: object);
    /**
     * Init the content in the tooltip.
     */
    set initializeContent(initializeContent: boolean);
    /**
     * If set this color will be used on the header (if a popover).
     */
    set headerClass(headerClass: string);
    /**
     * The delay before showing the tooltip
     */
    set delay(delay: number);
    /**
     * The if true (default) the popup is added to the body.
     */
    set attachToBody(attachToBody: boolean);
    /** Add extra attributes like id's to the component **/
    set attributes(attributes: Array<Object> | Object);
    /**
     * Called when the tooltip value changes
     */
    changeEvent: EventEmitter<SohoTooltipEvent>;
    /**
     * Called when the tooltip updates in some way
     */
    updateEvent: EventEmitter<SohoTooltipEvent>;
    private jQueryElement?;
    private tooltip?;
    constructor(element: ElementRef);
    ngAfterViewInit(): void;
    private createControl;
    /**
     * Shows the tooltip.
     */
    show(): void;
    /**
     * Hides the tooltip.
     */
    hide(force?: boolean): void;
    ngOnDestroy(): void;
    ngOnChanges(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoTooltipDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SohoTooltipDirective, "[soho-tooltip]", never, { "content": { "alias": "content"; "required": false; }; "offset": { "alias": "offset"; "required": false; }; "placement": { "alias": "placement"; "required": false; }; "trigger": { "alias": "trigger"; "required": false; }; "title": { "alias": "title"; "required": false; }; "beforeShow": { "alias": "beforeShow"; "required": false; }; "popover": { "alias": "popover"; "required": false; }; "closebutton": { "alias": "closebutton"; "required": false; }; "isError": { "alias": "isError"; "required": false; }; "isErrorColor": { "alias": "isErrorColor"; "required": false; }; "tooltipElement": { "alias": "tooltipElement"; "required": false; }; "keepOpen": { "alias": "keepOpen"; "required": false; }; "extraClass": { "alias": "extraClass"; "required": false; }; "appendTo": { "alias": "appendTo"; "required": false; }; "maxWidth": { "alias": "maxWidth"; "required": false; }; "showOnKeyboardFocus": { "alias": "showOnKeyboardFocus"; "required": false; }; "onHidden": { "alias": "onHidden"; "required": false; }; "placementOpt": { "alias": "placementOpt"; "required": false; }; "initializeContent": { "alias": "initializeContent"; "required": false; }; "headerClass": { "alias": "headerClass"; "required": false; }; "delay": { "alias": "delay"; "required": false; }; "attachToBody": { "alias": "attachToBody"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; }, { "changeEvent": "changeEvent"; "updateEvent": "updateEvent"; }, never, never, false, never>;
}

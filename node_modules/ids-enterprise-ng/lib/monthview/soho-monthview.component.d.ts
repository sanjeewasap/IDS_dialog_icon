/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoMonthViewComponent implements AfterViewChecked, AfterViewInit, OnDestroy {
    private element;
    private ngZone;
    ref: ChangeDetectorRef;
    isMonthView: boolean;
    dataInit: boolean;
    set monthviewOptions(monthviewOptions: SohoMonthViewOptions | undefined);
    get monthviewOptions(): SohoMonthViewOptions | undefined;
    /**
     * The name of the locale to use for this instance. If not set the current locale will be used.
     */
    set locale(locale: string);
    get locale(): string;
    /**
     * Initial month to show.
     */
    set month(month: number | undefined);
    get month(): number | undefined;
    /**
     * Initial year to show.
     */
    set year(year: number | undefined);
    get year(): number | undefined;
    /**
     * The initial selected day to show.
     */
    set day(day: number | undefined);
    get day(): number | undefined;
    /**
     * The date to highlight as selected/today.
     */
    set activeDate(activeDate: number | undefined);
    get activeDate(): number | undefined;
    /**
     * The date to highlight as selected/today (as an array for islamic)
     */
    set activeDateIslamic(activeDateIslamic: number | undefined);
    get activeDateIslamic(): number | undefined;
    /**
     * Is it in a popup (datepicker using it)
     */
    set isPopup(isPopup: boolean | undefined);
    get isPopup(): boolean | undefined;
    /**
     * If true, will set it as inPage month view.
     */
    set inPage(inPage: boolean | undefined);
    get inPage(): boolean | undefined;
    /**
     * If true, will set the month-year title as button for inPage.
     */
    set inPageTitleAsButton(inPageTitleAsButton: boolean | undefined);
    get inPageTitleAsButton(): boolean | undefined;
    /**
     * If true, will set to be toggleable.
     */
    set inPageToggleable(inPageToggleable: boolean | undefined);
    get inPageToggleable(): boolean | undefined;
    /**
     * If true, will init as expanded
     */
    set inPageExpanded(inPageExpanded: boolean | undefined);
    get inPageExpanded(): boolean | undefined;
    /**
     * Set first day of the week. '1' would be Monday.
     */
    set firstDayOfWeek(firstDayOfWeek: number | undefined);
    get firstDayOfWeek(): number | undefined;
    /**
     * If true the today button is shown on the header.
     */
    set showToday(showToday: boolean | undefined);
    get showToday(): boolean | undefined;
    /**
     * Indicates this is a month picker on the month and week view.
     * Has some slight different behavior.
     */
    set isMonthPicker(isMonthPicker: boolean | undefined);
    get isMonthPicker(): boolean | undefined;
    /**
     * If false the year and month switcher will be disabled.
     */
    set showMonthYearPicker(showMonthYearPicker: boolean | undefined);
    get showMonthYearPicker(): boolean | undefined;
    /**
     * Shows the legend below the table.
     */
    set showLegend(showLegend: boolean | undefined);
    get showLegend(): boolean | undefined;
    /**
     * Legend Build up.
     */
    set legend(legend: SohoMonthViewLegend[] | undefined);
    get legend(): SohoMonthViewLegend[] | undefined;
    /**
     * If true the days portion of the calendar will be hidden.
     * Usefull for Month/Year only formats.
     */
    set hideDays(hideDays: boolean | undefined);
    get hideDays(): boolean | undefined;
    /**
     * Disable dates in various ways.
     * For example `{minDate: 'M/d/yyyy', maxDate: 'M/d/yyyy'}`.
     * Dates should be in format M/d/yyyy
     */
    set disable(disable: SohoDatePickerDisable | undefined);
    get disable(): SohoDatePickerDisable | undefined;
    /**
     * The number of years ahead to show in the month/year picker should total 9 with yearsBack.
     */
    set yearsBack(yearsBack: number | undefined);
    get yearsBack(): number | undefined;
    /**
     * The number of years back to show in the month/year picker should total 9 with yearsAhead.
     */
    set yearsAhead(yearsAhead: number | undefined);
    get yearsAhead(): number | undefined;
    /**
     * Range between two dates with various options.
     */
    set range(range: SohoMonthViewRange[] | undefined);
    get range(): SohoMonthViewRange[] | undefined;
    /**
     * If true the month days can be clicked to select
     */
    set selectable(selectable: boolean | undefined);
    get selectable(): boolean | undefined;
    /**
     * Callback that fires when a month day is clicked.
     */
    set onSelected(onSelected: boolean | undefined);
    get onSelected(): boolean | undefined;
    /**
     * Callback that fires when a key is pressed down.
     */
    set onKeyDown(onKeyDown: boolean | undefined);
    get onKeyDown(): boolean | undefined;
    /**
     * If true the Next Previous buttons will shown on the header.
     */
    set showNextPrevious(showNextPrevious: boolean | undefined);
    get showNextPrevious(): boolean | undefined;
    /**
     * Call back for when the view changer is changed.
     */
    set changeViewCallback(changeViewCallback: Function | undefined);
    get changeViewCallback(): Function | undefined;
    set attributes(attributes: Array<Object> | Object | undefined);
    get attributes(): Array<Object> | Object | undefined;
    monthRendered: EventEmitter<SohoMonthViewRenderEvent>;
    selected: EventEmitter<SohoMonthViewSelectedEvent>;
    /**
     * Local variables
     */
    private jQueryElement?;
    private monthview?;
    private _monthviewOptions?;
    private updateRequired?;
    private updateLegend?;
    constructor(element: ElementRef, ngZone: NgZone, ref: ChangeDetectorRef);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    onMonthViewRenderedEvent(event: SohoMonthViewRenderEvent): void;
    onMonthViewSelectedEvent(event: SohoMonthViewSelectedEvent): void;
    /**
     * Handle updated settings and values.
     */
    updated(): void;
    /**
     * Mark the components as requiring a rebuild after the next update.
     */
    markForRefresh(): void;
    /**
     * Tear down the markup for the monthview
     */
    teardown(): void;
    /**
     * Destroy the markup and any other resources.
     */
    destroy(): void;
    /**
     * Shows the given month and year.
     */
    showMonth(month: number, year: number): void;
    /**
     * Cleanup just before Angular destroys the component.
     * Unsubscribe observables, detach event handlers and remove other resources to avoid memory leaks.
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoMonthViewComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoMonthViewComponent, "[soho-monthview]", never, { "monthviewOptions": { "alias": "monthviewOptions"; "required": false; }; "locale": { "alias": "locale"; "required": false; }; "month": { "alias": "month"; "required": false; }; "year": { "alias": "year"; "required": false; }; "day": { "alias": "day"; "required": false; }; "activeDate": { "alias": "activeDate"; "required": false; }; "activeDateIslamic": { "alias": "activeDateIslamic"; "required": false; }; "isPopup": { "alias": "isPopup"; "required": false; }; "inPage": { "alias": "inPage"; "required": false; }; "inPageTitleAsButton": { "alias": "inPageTitleAsButton"; "required": false; }; "inPageToggleable": { "alias": "inPageToggleable"; "required": false; }; "inPageExpanded": { "alias": "inPageExpanded"; "required": false; }; "firstDayOfWeek": { "alias": "firstDayOfWeek"; "required": false; }; "showToday": { "alias": "showToday"; "required": false; }; "isMonthPicker": { "alias": "isMonthPicker"; "required": false; }; "showMonthYearPicker": { "alias": "showMonthYearPicker"; "required": false; }; "showLegend": { "alias": "showLegend"; "required": false; }; "legend": { "alias": "legend"; "required": false; }; "hideDays": { "alias": "hideDays"; "required": false; }; "disable": { "alias": "disable"; "required": false; }; "yearsBack": { "alias": "yearsBack"; "required": false; }; "yearsAhead": { "alias": "yearsAhead"; "required": false; }; "range": { "alias": "range"; "required": false; }; "selectable": { "alias": "selectable"; "required": false; }; "onSelected": { "alias": "onSelected"; "required": false; }; "onKeyDown": { "alias": "onKeyDown"; "required": false; }; "showNextPrevious": { "alias": "showNextPrevious"; "required": false; }; "changeViewCallback": { "alias": "changeViewCallback"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; }, { "monthRendered": "monthRendered"; "selected": "selected"; }, never, ["*"], false, never>;
}

/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="jquery" />
import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * SUB COMPONENT: SOHO-CONTEXT-MENU-HEADING
 */
export declare class SohoContextMenuHeadingComponent {
    get isHeading(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoContextMenuHeadingComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoContextMenuHeadingComponent, "li[soho-context-menu-heading]", never, {}, {}, never, ["*"], false, never>;
}
/**
 * SUB COMPONENT: SOHO-CONTEXT-MENU-SHORTCUT-TEXT
 */
export declare class SohoContextMenuShortCutTextComponent {
    get isShortCutText(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoContextMenuShortCutTextComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoContextMenuShortCutTextComponent, "span[soho-context-menu-shortcut-text]", never, {}, {}, never, ["*"], false, never>;
}
/**
 * SUB COMPONENT: SOHO-CONTEXT-MENU-SEPARATOR
 */
export declare class SohoContextMenuSeparatorComponent {
    get isSeparator(): boolean;
    singleSelectableSection: boolean;
    multiSelectableSection: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoContextMenuSeparatorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoContextMenuSeparatorComponent, "li[soho-context-menu-separator]", never, { "singleSelectableSection": { "alias": "singleSelectableSection"; "required": false; }; "multiSelectableSection": { "alias": "multiSelectableSection"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**
 * SUB COMPONENT: SOHO-CONTEXT-MENU-LABEL
 */
export declare class SohoContextMenuItemLabelComponent {
    get hrefAttr(): string;
    menuId?: string;
    menuUrl?: string;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoContextMenuItemLabelComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoContextMenuItemLabelComponent, "a[soho-context-menu-label]", never, { "menuId": { "alias": "menuId"; "required": false; }; "menuUrl": { "alias": "menuUrl"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**
 * SUB COMPONENT: SOHO-CONTEXT-MENU-ITEM
 */
export declare class SohoContextMenuItemComponent {
    isChecked?: boolean;
    isSelectable: boolean;
    isDisabled: boolean;
    isIndented: boolean;
    subMenu: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoContextMenuItemComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoContextMenuItemComponent, "li[soho-context-menu-item]", never, { "isChecked": { "alias": "isChecked"; "required": false; }; "isSelectable": { "alias": "isSelectable"; "required": false; }; "isDisabled": { "alias": "isDisabled"; "required": false; }; "isIndented": { "alias": "isIndented"; "required": false; }; "subMenu": { "alias": "subMenu"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**
 * MAIN DIRECTIVE: SOHO-CONTEXT-MENU
 */
export declare class SohoContextMenuDirective implements AfterViewInit, OnDestroy {
    private element;
    private ngZone;
    private jQueryElement?;
    private contextMenu?;
    private options;
    selected: EventEmitter<SohoContextMenuEvent>;
    beforeopen: EventEmitter<SohoContextMenuEvent>;
    /**
     * @todo replace override of native attribute
     */
    open: EventEmitter<SohoContextMenuEvent>;
    closeEvent: EventEmitter<SohoContextMenuEvent>;
    set trigger(trigger: SohoPopupMenuTrigger);
    set menu(menu: string);
    /** Auto Focus */
    set autoFocus(autoFocus: boolean);
    get autoFocus(): boolean;
    /** Mouse focus. */
    set mouseFocus(mouseFocus: boolean);
    get mouseFocus(): boolean;
    /** Attach to body. */
    set attachToBody(attachToBody: boolean);
    get attachToBody(): boolean;
    set placementOpts(placementOpts: SohoPopupmenuPlacementOpts);
    get placementOpts(): SohoPopupmenuPlacementOpts;
    set offset(offset: SohoPopupmenuOffset);
    get offset(): SohoPopupmenuOffset;
    listOffset: SohoPopupmenuOffset;
    set removeOnDestroy(removeOnDestroy: boolean);
    get removeOnDestroy(): boolean;
    /** beforeOpen - ajax callback for open event */
    set beforeOpen(beforeOpen: SohoPopupMenuSourceFunction);
    get beforeOpen(): SohoPopupMenuSourceFunction;
    /** beforeOpen - ajax callback for open event */
    lazyLoad: boolean;
    constructor(element: ElementRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    private init;
    onContextMenu(e: JQuery.TriggeredEvent, api: any): void;
    updated(): void;
    teardown(): void;
    /**
     * Closes the popup menu
     *
     * @param isCancelled Internally set option used if the operation is a cancel.
     *  Wont matter for manual api call.
     * @param noFocus Do not return focus to the calling element (fx a button)
     */
    close(isCancelled?: boolean, noFocus?: boolean): void;
    ngOnDestroy(): void;
    initializeComponent(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoContextMenuDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SohoContextMenuDirective, "[soho-context-menu]", never, { "trigger": { "alias": "trigger"; "required": false; }; "menu": { "alias": "menu"; "required": false; }; "autoFocus": { "alias": "autoFocus"; "required": false; }; "mouseFocus": { "alias": "mouseFocus"; "required": false; }; "attachToBody": { "alias": "attachToBody"; "required": false; }; "placementOpts": { "alias": "placementOpts"; "required": false; }; "offset": { "alias": "offset"; "required": false; }; "listOffset": { "alias": "listOffset"; "required": false; }; "removeOnDestroy": { "alias": "removeOnDestroy"; "required": false; }; "beforeOpen": { "alias": "beforeOpen"; "required": false; }; "lazyLoad": { "alias": "lazyLoad"; "required": false; }; }, { "selected": "selected"; "beforeopen": "beforeopen"; "open": "open"; "closeEvent": "close"; }, never, never, false, never>;
}

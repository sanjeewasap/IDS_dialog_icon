/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, AfterViewChecked, ChangeDetectorRef, NgZone } from '@angular/core';
import { BaseControlValueAccessor } from '../utils/base-control-value-accessor';
import * as i0 from "@angular/core";
export declare class SohoTextAreaComponent extends BaseControlValueAccessor<string> implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    ref: ChangeDetectorRef;
    private ngZone;
    private textStatic?;
    private options;
    /**
     * Local variables
     */
    private isDisabled?;
    private isReadOnly?;
    private runUpdatedOnCheck?;
    set disabled(value: boolean | undefined);
    get disabled(): boolean | undefined;
    set readonly(value: boolean | undefined);
    get readonly(): boolean | undefined;
    resizable?: boolean;
    set maxLength(maxLength: number | undefined);
    get maxLength(): number | undefined;
    set autoGrow(autoGrow: boolean | undefined);
    get autoGrow(): boolean | undefined;
    set autoGrowMaxHeight(autoGrowMaxHeight: number | undefined);
    get autoGrowMaxHeight(): number | undefined;
    set attributes(attributes: Array<Object> | Object | undefined);
    get attributes(): Array<Object> | Object | undefined;
    set characterCounter(characterCounter: boolean);
    set printable(printable: boolean);
    set charRemainingText(charRemainingText: string);
    set charMaxText(charMaxText: string);
    /**
     * Called when the textarea updates in some way
     */
    updated: EventEmitter<SohoTextAreaEvent>;
    /**
     * @todo Change to 'changed'.
     */
    change: EventEmitter<SohoTextAreaEvent[]>;
    private jQueryElement?;
    private textarea?;
    /**
     * Specific host listener for textarea.
     *
     * @param textarea the HTML element
     */
    oninput(event: SohoTextAreaEvent, textarea: HTMLTextAreaElement): void;
    constructor(element: ElementRef, ref: ChangeDetectorRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    /**
     * Handle the control being changed.
     */
    onChange(event: any[]): void;
    /**
     * Override writeValue to allow the input to count correctly
     *
     * @param value - the new value
     */
    writeValue(value: any): void;
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled: boolean): void;
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    markForRefresh(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoTextAreaComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoTextAreaComponent, "textarea[soho-textarea]", never, { "disabled": { "alias": "disabled"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; "resizable": { "alias": "resizable"; "required": false; }; "maxLength": { "alias": "maxLength"; "required": false; }; "autoGrow": { "alias": "autoGrow"; "required": false; }; "autoGrowMaxHeight": { "alias": "autoGrowMaxHeight"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "characterCounter": { "alias": "characterCounter"; "required": false; }; "printable": { "alias": "printable"; "required": false; }; "charRemainingText": { "alias": "charRemainingText"; "required": false; }; "charMaxText": { "alias": "charMaxText"; "required": false; }; }, { "updated": "updated"; "change": "change"; }, never, ["*"], false, never>;
}

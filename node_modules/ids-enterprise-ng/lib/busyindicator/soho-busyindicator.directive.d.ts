/// <reference types="jquery" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the SoHo Busy Indicator control.
 *
 * This component searches for an element, annotated with the soho-busyindicator attribute,
 * and then matches this component to it.
 * <br>
 * The characteristics of the component can be controlled using the set of inputs.
 * <br>
 * When activated, this control will display the busy indicator over the control appropriately.
 */
export declare class SohoBusyIndicatorDirective implements AfterViewInit, AfterViewChecked, OnDestroy {
    private elementRef;
    private ngZone;
    private options;
    private jQueryElement?;
    private initiallyActive?;
    private busyindicator?;
    private updateBusyIndicator;
    afterstart: EventEmitter<SohoBusyIndicatorEvent>;
    /**
     * This event is fired when 'timeToComplete' milliseconds is reached
     * after the indicator is opened.
     *
     * @todo replace override of native attribute
     */
    complete: EventEmitter<SohoBusyIndicatorEvent>;
    set blockUI(blockUI: boolean);
    set displayDelay(displayDelay: number);
    set timeToComplete(timeToComplete: number);
    /** Custom Text To Show or Will Show Localized 'Loading...' */
    set text(text: string);
    /** Controls the activated state of the busy indicator. */
    set activated(value: boolean | undefined);
    /**
     * Display an overlay that prevents interaction,
     * but appears transparent instead of gray.
     */
    set transparentOverlay(transparentOverlay: boolean);
    /**
     * To display only the overlay w/o the badge and text. Useful to stop input to a component
     * that doesn't already have another mechanism (like a disabled state).
     */
    set overlayOnly(overlayOnly: boolean);
    /**
     * To display only the overlay w/o the badge and text. Useful to stop input to a component
     * that doesn't already have another mechanism (like a disabled state).
     */
    set attributes(attributes: Array<Object> | Object);
    /**
     * To get the attributes of the busy indicator. Useful for things like getting an indicator based on an Id.
     */
    get attributes(): Object | Array<Object>;
    /**
     * Constructor.
     *
     * @param elementRef - the element matching the component's selector.
     */
    constructor(elementRef: ElementRef, ngZone: NgZone);
    /**
     * Closes the indicator, if open.
     */
    close(fromEvent: boolean): void;
    /**
     * Displays the busy indicator.
     */
    open(): void;
    isActive(): boolean | undefined;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    /**
     * Destructor.
     */
    ngOnDestroy(): void;
    /**
     * Publishes the event, after annotating the event.
     */
    private onAfterStart;
    /**
     * Publishes the event, after annotating the event.
     */
    private onComplete;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoBusyIndicatorDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SohoBusyIndicatorDirective, "[soho-busyindicator]", never, { "blockUI": { "alias": "blockUI"; "required": false; }; "displayDelay": { "alias": "displayDelay"; "required": false; }; "timeToComplete": { "alias": "timeToComplete"; "required": false; }; "text": { "alias": "text"; "required": false; }; "activated": { "alias": "activated"; "required": false; }; "transparentOverlay": { "alias": "transparentOverlay"; "required": false; }; "overlayOnly": { "alias": "overlayOnly"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; }, { "afterstart": "afterstart"; "complete": "complete"; }, never, never, false, never>;
}
/**
 * Customised event object.
 */
export interface SohoBusyIndicatorEvent {
    /** Event Type. */
    type: 'afterstart' | 'complete';
    /** Source Component. */
    component: SohoBusyIndicatorDirective;
    /** Full JQuery Event. */
    event: JQuery.TriggeredEvent;
}

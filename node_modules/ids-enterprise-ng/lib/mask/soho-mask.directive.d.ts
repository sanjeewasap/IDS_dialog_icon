/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, EventEmitter, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoMaskDirective implements AfterViewInit, OnDestroy {
    private element;
    /** Private control options. */
    private _options;
    private _patternOptions;
    private _symbols;
    /** Sets all the options. */
    set options(value: SohoMaskOptions | string);
    /** Definitions of pattern(s) as a regular expression. */
    set definitions(value: {
        [key: string]: RegExp;
    });
    /** When true, appends the leftover characters in the placeholder to the conformed value. */
    set guide(value: boolean);
    /** When true, keeps groups of character intact. */
    set keepCharacterPositions(value: boolean);
    /** Function that replaces the internal masking functionality. */
    set maskAPI(value: Function);
    /**
     *  The pattern to use for the mask.
     *
     * This uses the sohoPrefix otherwise the pattern interferes
     * with the pattern on form groups.
     */
    set sohoPattern(value: SohoMaskPattern);
    /** Function that is executed after the masking process is complete. */
    set pipe(value: Function);
    /** The placeholder text for the mask. */
    set placeholder(value: string);
    /** Indicates special formatting rules may apply to the mask. */
    set process(value: SohoMaskProcess);
    /** When true, the onblur event executes mask processing. */
    set processOnBlur(value: boolean);
    /** Indicates to initially mask the value of the input field. */
    set processOnInitialize(value: boolean);
    /** The pattern options. */
    set patternOptions(value: SohoMaskPatternOptions | string);
    /** When true, the decimal separator symbol is allowed in a formatted number. */
    set allowDecimal(value: boolean);
    /** When true, allows leading zeros in a formatted number. */
    set allowLeadingZeros(value: boolean);
    /** When true, the negative symbol is allowed in a formatted number. */
    set allowNegative(value: boolean);
    /** When true, adds the thousands separator symbol to the correct location in a formatted number. */
    set allowThousandsSeparator(value: boolean);
    /** The maximum number of digits to the left of the decimal separator symbol in a formatted number. */
    set decimalLimit(value: number);
    /** The maximum number of digits to the right of decimal separator symbol in a formatted number. */
    set integerLimit(value: number);
    /** The character that precedes the masked value. */
    set prefix(value: string);
    /** When true, the decimal separator symbol is required in a formatted number. */
    set requireDecimal(value: boolean);
    /** The character that follows the masked value. */
    set suffix(value: string);
    /** The symbols to use for the formatted number. */
    set symbols(value: SohoMaskPatternSymbols | string);
    /** The locale to use for the formatted number. */
    set locale(value: string);
    /** The currency symbol to use for the formatted number. */
    set currencySymbol(value: string);
    /** The decimal separator symbol to use for the formatted number. */
    set decimalSymbol(value: string);
    /** The negative symbol to use for the formatted number. */
    set negativeSymbol(value: string);
    /** The thousands separator symbol to use for the formatted number. */
    set thousandsSymbol(value: string);
    /**
     * Indicates if each section of the group pattern match must be full in order for
     * the literals in-between each section to be automatically added (meaning you can't
     * type a literal to end that group until all characters in that group are entered).
     *
     * @deprecated not supported
     */
    set groupComplete(_value: boolean);
    /**
     * Indicates special formatting rules may apply to the mask.
     *
     * @deprecated use process instead
     */
    set mode(value: SohoMaskMode);
    /**
     * Indicates to complete the full mask or the mask will revert to empty.
     *
     * @deprecated not supported
     */
    set mustComplete(_value: boolean);
    /**
     * Indicates you can enter the negative symbol in front of the number;
     * automatically set to true if a negative symbol is detected inside the mask.
     *
     * @deprecated use allowNegative instead
     */
    set negative(value: boolean);
    /**
     * Option defined in control, but not referenced.
     *
     * @deprecated
     */
    set number(_value: boolean);
    /**
     * Indicates the thousands separator for numbers (based on localization) will be
     * inserted wherever necessary during typing; automatically set to true if the
     * localized thousands separator is detected inside the mask.
     *
     * @deprecated use allowThousandsSeparator instead
     */
    set thousandsSeparator(value: boolean);
    /**
     * Indicates to display the localized symbol for currency or percent;
     * backwards compatible with old 'data-show-currency'; value true equates to currency
     *
     * @deprecated use prefix or suffix instead
     */
    set showSymbol(_value: SohoMaskShowSymbol);
    /**
     * Called when mask value changes
     */
    write: EventEmitter<SohoMaskEvent>;
    /**
     * Local variables
     */
    private jQueryElement?;
    private mask?;
    constructor(element: ElementRef);
    ngAfterViewInit(): void;
    /** Destructor. */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoMaskDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SohoMaskDirective, "input[soho-mask]", never, { "options": { "alias": "options"; "required": false; }; "definitions": { "alias": "definitions"; "required": false; }; "guide": { "alias": "guide"; "required": false; }; "keepCharacterPositions": { "alias": "keepCharacterPositions"; "required": false; }; "maskAPI": { "alias": "maskAPI"; "required": false; }; "sohoPattern": { "alias": "sohoPattern"; "required": false; }; "pipe": { "alias": "pipe"; "required": false; }; "placeholder": { "alias": "placeholder"; "required": false; }; "process": { "alias": "process"; "required": false; }; "processOnBlur": { "alias": "processOnBlur"; "required": false; }; "processOnInitialize": { "alias": "processOnInitialize"; "required": false; }; "patternOptions": { "alias": "patternOptions"; "required": false; }; "allowDecimal": { "alias": "allowDecimal"; "required": false; }; "allowLeadingZeros": { "alias": "allowLeadingZeros"; "required": false; }; "allowNegative": { "alias": "allowNegative"; "required": false; }; "allowThousandsSeparator": { "alias": "allowThousandsSeparator"; "required": false; }; "decimalLimit": { "alias": "decimalLimit"; "required": false; }; "integerLimit": { "alias": "integerLimit"; "required": false; }; "prefix": { "alias": "prefix"; "required": false; }; "requireDecimal": { "alias": "requireDecimal"; "required": false; }; "suffix": { "alias": "suffix"; "required": false; }; "symbols": { "alias": "symbols"; "required": false; }; "locale": { "alias": "locale"; "required": false; }; "currencySymbol": { "alias": "currencySymbol"; "required": false; }; "decimalSymbol": { "alias": "decimalSymbol"; "required": false; }; "negativeSymbol": { "alias": "negativeSymbol"; "required": false; }; "thousandsSymbol": { "alias": "thousandsSymbol"; "required": false; }; "groupComplete": { "alias": "groupComplete"; "required": false; }; "mode": { "alias": "mode"; "required": false; }; "mustComplete": { "alias": "mustComplete"; "required": false; }; "negative": { "alias": "negative"; "required": false; }; "number": { "alias": "number"; "required": false; }; "thousandsSeparator": { "alias": "thousandsSeparator"; "required": false; }; "showSymbol": { "alias": "showSymbol"; "required": false; }; }, { "write": "write"; }, never, never, false, never>;
}

/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import { BaseControlValueAccessor } from '../utils/base-control-value-accessor';
import * as i0 from "@angular/core";
export declare class SohoSliderComponent extends BaseControlValueAccessor<number> implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ngZone;
    /**
     * Flag to force an update of the control after the view is created.
     */
    private runUpdatedOnCheck?;
    /** Minimum Value */
    set min(min: number | undefined);
    get min(): number | undefined;
    /** Maximum Value */
    set max(max: number | undefined);
    get max(): number | undefined;
    /** Increment or decrement by step value */
    set step(step: number | undefined);
    get step(): number | undefined;
    /** value or a range of values */
    set value(value: number[] | undefined);
    get value(): number[] | undefined;
    /** Choose a range of values or select a value */
    set range(range: boolean | undefined);
    get range(): boolean | undefined;
    /** An array of ticks that provide the value, description and color details */
    set ticks(ticks: string);
    /** Persist tooltip */
    set persistTooltip(persistTooltip: boolean);
    /** Option to control the position of tooltip. ['top' , 'bottom'] */
    set tooltipPosition(tooltipPosition: 'top' | 'bottom');
    /** Tooltip Content */
    set tooltipContent(tooltipContent: string[]);
    /** Set vertical class to render the slider vertically */
    set vertical(isVertical: boolean);
    /** Add extra attributes like id's to the component **/
    set attributes(attributes: Array<Object> | Object);
    /**
     * Called when the slider control changes
     *
     * @todo replace override of native element
     */
    change: EventEmitter<SohoSliderEvent>;
    /** Called when the slider is being slid */
    sliding: EventEmitter<SohoSliderEvent>;
    /** Called when the slider starts to be slid */
    slidestart: EventEmitter<SohoSliderEvent>;
    /** Called when the slider is finished sliding, change will also fire here. */
    slidestop: EventEmitter<SohoSliderEvent>;
    /** Called when the slider is updated when the model value changes */
    updated: EventEmitter<SohoSliderEvent>;
    /** Bind attributes to input element */
    get isSlider(): boolean;
    get isVerticalSlider(): boolean;
    get sliderType(): string;
    /**
     * Local variables
     */
    private isDisabled?;
    private isReadOnly?;
    private isVertical;
    private isVerticalOriginal;
    private jQueryElement?;
    private slider?;
    private options;
    constructor(element: ElementRef, ngZone: NgZone);
    set disabled(value: boolean | undefined);
    get disabled(): boolean | undefined;
    set readonly(value: boolean | undefined);
    get readonly(): boolean | undefined;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    onChange(event: SohoSliderEvent): void;
    onSliding(event: SohoSliderEvent): void;
    onSlideStart(event: SohoSliderEvent): void;
    onSlideStop(event: SohoSliderEvent): void;
    onUpdated(event: SohoSliderEvent): void;
    /**
     * This function is called when the control status changes to or from "DISABLED".
     * Depending on the value, it will enable or disable the appropriate DOM element.
     */
    setDisabledState(isDisabled: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoSliderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoSliderComponent, "input[soho-slider]", never, { "min": { "alias": "min"; "required": false; }; "max": { "alias": "max"; "required": false; }; "step": { "alias": "step"; "required": false; }; "value": { "alias": "value"; "required": false; }; "range": { "alias": "range"; "required": false; }; "ticks": { "alias": "ticks"; "required": false; }; "persistTooltip": { "alias": "persistTooltip"; "required": false; }; "tooltipPosition": { "alias": "tooltipPosition"; "required": false; }; "tooltipContent": { "alias": "tooltipContent"; "required": false; }; "vertical": { "alias": "vertical"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "readonly": { "alias": "readonly"; "required": false; }; }, { "change": "change"; "sliding": "sliding"; "slidestart": "slidestart"; "slidestop": "slidestop"; "updated": "updated"; }, never, ["*"], false, never>;
}

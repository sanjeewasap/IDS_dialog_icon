/// <reference types="ids-enterprise-typings" />
/// <reference types="jquery" />
/// <reference types="jquery" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { ComponentFactoryResolver, Injector, NgZone, ViewContainerRef, ApplicationRef } from '@angular/core';
import { SohoModalDialogRef } from './soho-modal-dialog.ref';
import { Router } from '@angular/router';
import * as i0 from "@angular/core";
/**
 * This service is used to create a modal dialog, based on the content
 * of an Angular Componnent on the screen.
 */
export declare class SohoModalDialogService {
    private readonly appRef;
    private readonly componentFactoryResolver;
    private readonly injector;
    private readonly ngZone;
    private readonly router;
    /**
     * Constructor.
     *
     * @param appRef - application reference; must not be null.
     * @param componentFactoryResolver - used to create component factories for components dynamically.
     * @param injector - the current in scope injector, use as a delegate.
     * @param ngZone - the angular zone; must not be null.
     * @router
     */
    constructor(appRef: ApplicationRef, componentFactoryResolver: ComponentFactoryResolver, injector: Injector, ngZone: NgZone, router: Router);
    /**
     * Creates a modal dialog defined by the given component, returning a reference to the
     * dialog that can be interacted with.
     *
     * The component has the potential to include the dialog reference when it is
     * instantiated, as a provider.
     *
     * The dialog won't necessarily be open yet, see the dialog ref api for further methods.
     *
     * @param component - The type of the component to instantiate; must not be null.
     * @param parent - The parent container; obsolete but parameter kept for backwards API compatibility. Has no effect.
     * @param options - The control options to use.
     *
     * @return the modal dialog reference.
     */
    modal<T>(component: ComponentType<T>, _parent?: ViewContainerRef, options?: SohoModalOptions): SohoModalDialogRef<T>;
    /**
     * Creates a modal dialog (using the content defined in the options), returning a reference to the
     * dialog that can be interacted with.
     *
     * The dialog won't be open.
     *
     * @return the modal dialog reference.
     */
    message<T>(content: string | JQuery): SohoModalDialogRef<T>;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoModalDialogService, [null, null, null, null, { optional: true; }]>;
    static ɵprov: i0.ɵɵInjectableDeclaration<SohoModalDialogService>;
}
/**
 * Object with a "new"" method returning the type T.
 */
export type ComponentType<T> = new (...args: any[]) => T;

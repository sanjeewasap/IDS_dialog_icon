/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, OnDestroy, NgZone } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the Soho Application Menu Component.
 *
 * This component searches for a nav element with the attribute
 * 'soho-applcation-menu' in the parent's DOM tree, initialising those found with
 * the Soho application menu control.
 */
export declare class SohoApplicationMenuComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private elementRef;
    private ngZone;
    /** Breakpoint. */
    breakpoint?: SohoApplicationMenuBreakPoint;
    /** Sets Open on resize */
    set openOnLarge(openOnLarge: boolean | undefined);
    get openOnLarge(): boolean | undefined;
    /** Allows the menu to become closed after an actionable header has been selected */
    set dismissOnClickMobile(dismissOnClickMobile: boolean | undefined);
    get dismissOnClickMobile(): boolean | undefined;
    /** A list of jQuery elements which trigger the openning and closing application menu. */
    set triggers(triggers: string[]);
    /**
     * Is the application menu filterable?
     */
    filterable?: boolean;
    /**
     * Is the application menu resizable?
     */
    set resizable(resizable: boolean | undefined);
    get resizable(): boolean | undefined;
    /**
     * Resizeable Save Position Settings
     */
    set savePosition(savePosition: boolean | undefined);
    get savePosition(): boolean | undefined;
    /**
     *
     * @param expandSwitcher
     * Menu switcher expand setting to provide callback
     */
    set onExpandSwitcher(expandSwitcher: SohoApplicationMenuExpandSwitcherFunction);
    /**
     *
     * @param collapseSwitcher
     * Menu switcher collapse setting to provide callback
     */
    set onCollapseSwitcher(collapseSwitcher: SohoApplicationMenuCollapseSwitcherFunction);
    appMenu: boolean;
    isPersonalizable: boolean;
    /**
     * This will let the Soho controls bind the application menu trigger naturally
     */
    get menuId(): string;
    /** Reference to the jQuery element. */
    private jQueryElement?;
    /** Reference to the annotated SoHoXi control */
    private applicationmenu?;
    /** List of jQuery triggers. */
    private _triggers;
    /** Open on resize */
    private _openOnLarge?;
    /** Dismiss the menu when an item is clicked in the mobile breakpoints */
    private _dismissOnClickMobile?;
    private _resizable?;
    private _savePosition?;
    /** Menu switcher expand callback  */
    private _onExpandSwitcher?;
    /** Menu switcher collapse callback  */
    private _onCollapseSwitcher?;
    /**
     * This event is fired when the visibility of the application menu is changed,
     * is it also called when the item is changed programmatically.
     *
     * @deprecated use accordionExpand and accordionCollapse events instead
     */
    visibility: EventEmitter<any>;
    /**
     * This event is fired when a menu accordion is expamded
     * The event include the anchor element.
     */
    accordionExpand: EventEmitter<any>;
    /**
     * This event is fired when a menu accordion is collapsed
     */
    accordionCollapse: EventEmitter<boolean>;
    /** This event is fired when the visibility of the application menu is changed */
    menuVisibility: EventEmitter<boolean>;
    /** This event is fired when the application menu is filtered. */
    filtered: EventEmitter<any[]>;
    /** flag the need to update the soho/ep control in ngAfterViewChecked. */
    private updateRequired;
    constructor(elementRef: ElementRef, ngZone: NgZone);
    /**
     * Close the menu.
     */
    closeMenu(): void;
    /** Open the menu. */
    openMenu(noFocus?: boolean, userOpened?: boolean, openedByClass?: boolean): void;
    /**
     * Returns true if the menu is open, otherwise false.
     */
    isOpen(): boolean | undefined;
    /**
     * Notifies application menu that it has been updated
     */
    updated(): void;
    /**
     * Closes the panel area controlled by switcher
     */
    closeSwitcherPanel(): void;
    updateLazy(applicationMenu: SohoApplicationMenuComponent, target: any): void;
    toggleAndSelectHeader(applicationMenu: SohoApplicationMenuComponent, header: any): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    /**
     * Destructor.
     */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoApplicationMenuComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoApplicationMenuComponent, "nav[soho-application-menu]", never, { "breakpoint": { "alias": "breakpoint"; "required": false; }; "openOnLarge": { "alias": "openOnLarge"; "required": false; }; "dismissOnClickMobile": { "alias": "dismissOnClickMobile"; "required": false; }; "triggers": { "alias": "triggers"; "required": false; }; "filterable": { "alias": "filterable"; "required": false; }; "resizable": { "alias": "resizable"; "required": false; }; "savePosition": { "alias": "savePosition"; "required": false; }; "onExpandSwitcher": { "alias": "onExpandSwitcher"; "required": false; }; "onCollapseSwitcher": { "alias": "onCollapseSwitcher"; "required": false; }; "isPersonalizable": { "alias": "isPersonalizable"; "required": false; }; }, { "visibility": "visibility"; "accordionExpand": "accordionExpand"; "accordionCollapse": "accordionCollapse"; "menuVisibility": "menuVisibility"; "filtered": "filtered"; }, never, ["*"], false, never>;
}

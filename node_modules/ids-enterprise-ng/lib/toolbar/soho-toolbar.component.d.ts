/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewChecked, AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, NgZone } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * needed in case you are using an *ngIf to display and remove the toolbar search field.
 * Otherwise sohoxi will create a wrapper and angular will not know how to handle the
 * element structure change.
 */
export declare class SohoToolbarSearchFieldWrapperComponent {
    get isSearchfieldWrapper(): boolean;
    get isToolbarSearchfieldWrapper(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoToolbarSearchFieldWrapperComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoToolbarSearchFieldWrapperComponent, "span[soho-toolbar-searchfield-wrapper]", never, {}, {}, never, ["*"], false, never>;
}
export declare class SohoToolbarSearchFieldComponent implements AfterViewChecked, AfterViewInit, OnDestroy {
    private changeDetector;
    private element;
    private ngZone;
    /** Options. */
    options: SohoToolbarSearchFieldOptions;
    /** Adds an X button for clearing the search value. */
    set clearable(value: boolean);
    /** Where it's collapsible or not */
    set collapsible(value: boolean);
    set collapsibleOnMobile(value: boolean);
    /** AutoComplete : Source Function/Data/Url/Array */
    set source(value: SohoAutoCompleteSource);
    /** Template that can be passed */
    set template(value: string);
    selected: EventEmitter<Object[]>;
    cleared: EventEmitter<Object[]>;
    get isSearchField(): boolean;
    /**
     * Local variables
     */
    private jQueryElement?;
    private toolbarsearchfield?;
    private searchFieldChanged;
    constructor(changeDetector: ChangeDetectorRef, element: ElementRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    clear(): void;
    private markForRefresh;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoToolbarSearchFieldComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoToolbarSearchFieldComponent, "input[soho-toolbar-searchfield]", never, { "options": { "alias": "options"; "required": false; }; "clearable": { "alias": "clearable"; "required": false; }; "collapsible": { "alias": "collapsible"; "required": false; }; "collapsibleOnMobile": { "alias": "collapsibleOnMobile"; "required": false; }; "source": { "alias": "source"; "required": false; }; "template": { "alias": "template"; "required": false; }; }, { "selected": "selected"; "cleared": "cleared"; }, never, ["*"], false, never>;
}
/**
 * soho toolbar more button
 */
export declare class SohoToolbarMoreButtonComponent {
    get isMoreButton(): boolean;
    isPageChanger: boolean;
    isDisabled: boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoToolbarMoreButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoToolbarMoreButtonComponent, "soho-toolbar-more-button", never, { "isPageChanger": { "alias": "isPageChanger"; "required": false; }; "isDisabled": { "alias": "isDisabled"; "required": false; }; }, {}, never, ["*"], false, never>;
}
/**
 * soho toolbar page title.
 */
export declare class SohoPageTitleComponent {
    get isPageTitle(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoPageTitleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoPageTitleComponent, "span[soho-page-title]", never, {}, {}, never, ["*"], false, never>;
}
/**
 * soho section title.
 */
export declare class SohoSectionTitleComponent {
    get isSectionTitle(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoSectionTitleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoSectionTitleComponent, "span[soho-section-title]", never, {}, {}, never, ["*"], false, never>;
}
/**
 * soho selection count.
 */
export declare class SohoSelectionCountComponent {
    get isTitle(): boolean;
    get isSelectionCount(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoSelectionCountComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoSelectionCountComponent, "div[soho-selection-count]", never, {}, {}, never, ["*"], false, never>;
}
/**
 * Soho toolbar Navigation button
 */
export declare class SohoToolbarNavButtonComponent {
    get isIconButton(): boolean;
    get isAppMenuTrigger(): boolean;
    get typeAttr(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoToolbarNavButtonComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoToolbarNavButtonComponent, "button[soho-nav-button]", never, {}, {}, never, ["*"], false, never>;
}
/**
 * Soho toolbar title
 */
export declare class SohoToolbarTitleComponent {
    get isTitle(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoToolbarTitleComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoToolbarTitleComponent, "soho-toolbar-title", never, {}, {}, never, ["*"], false, never>;
}
/**
 * Soho toolbar buttonset
 */
export declare class SohoToolbarButtonSetComponent {
    get isButtonSet(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoToolbarButtonSetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoToolbarButtonSetComponent, "soho-toolbar-button-set", never, {}, {}, never, ["*"], false, never>;
}
/**
 * The main soho toolbar component
 */
export declare class SohoToolbarComponent implements AfterViewChecked, AfterViewInit, OnDestroy {
    private changeDetector;
    private element;
    private ngZone;
    get isToolbar(): boolean;
    get showMoreButton(): boolean | undefined;
    get isBlock(): "block" | null;
    /**
     * Whether to display the overflow more-button or not regardless of
     * overflow content.
     */
    noActionsButton: boolean;
    /**
     * Set the has more button component option, this is used
     * to define if the more button is expected to exist in the toolbar logic.
     */
    set hasMoreButton(value: boolean);
    /**
     * Set the expected max visible buttons before overflow is forced.
     */
    set maxVisibleButtons(value: number);
    /**
     * Set the rightAligned hint. This is for toolbars with no title that should be forced to right align.
     */
    set rightAligned(value: boolean);
    /**
     * @deprecated Use the rightAligned option.
     */
    set rightAlign(value: boolean);
    /**
     * If true, uses Javascript to size the Title and Buttonset elements in a way that shows as much of the Title area as possible.
     */
    set resizeContainers(value: boolean);
    /**
     * If "resizeContainers" is true, setting this to true will try to display as many buttons as possible while resizing the toolbar.
     * Setting to false attempts to show the entire title instead.
     */
    set favorButtonset(value: boolean);
    /**
     * Allows a moreMenuSettings object to be propagated down into the Toolbar.
     * the jQuery Toolbar component handles passing these settings into the More Actions
     * menu's jQuery Popupmenu.
     */
    set moreMenuSettings(value: SohoPopupMenuOptions);
    /** Add extra attributes like id's to the component **/
    set attributes(value: Array<Object> | Object);
    /**
     * The beforeactivate event is fired whenever a toolbar is activated giving the event handler a chance
     * to "veto" the tab selection change.
     */
    beforeActivated: EventEmitter<SohoToolbarEvent>;
    /**
     * The activated event is if the beforeActivate succeeds.
     */
    activated: EventEmitter<SohoToolbarEvent>;
    /**
     * The afteractivate event is fired after the toolbar has been activated.
     */
    afterActivated: EventEmitter<SohoToolbarEvent>;
    /**
     * The selected event is fired when a toolbar button has been clicked.
     */
    selected: EventEmitter<SohoToolbarSelectedEvent>;
    menuItemMouseOver: EventEmitter<HTMLButtonElement>;
    private options;
    private jQueryElement?;
    private toolbar?;
    private toolbarChanged?;
    constructor(changeDetector: ChangeDetectorRef, element: ElementRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    updated(settings?: any): void;
    handleResize(): void;
    private markForRefresh;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoToolbarComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoToolbarComponent, "soho-toolbar, div[soho-toolbar]", never, { "noActionsButton": { "alias": "noActionsButton"; "required": false; }; "hasMoreButton": { "alias": "hasMoreButton"; "required": false; }; "maxVisibleButtons": { "alias": "maxVisibleButtons"; "required": false; }; "rightAligned": { "alias": "rightAligned"; "required": false; }; "rightAlign": { "alias": "rightAlign"; "required": false; }; "resizeContainers": { "alias": "resizeContainers"; "required": false; }; "favorButtonset": { "alias": "favorButtonset"; "required": false; }; "moreMenuSettings": { "alias": "moreMenuSettings"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; }, { "beforeActivated": "beforeActivated"; "activated": "activated"; "afterActivated": "afterActivated"; "selected": "selected"; "menuItemMouseOver": "menuItemMouseOver"; }, never, ["soho-toolbar-title", "soho-toolbar-button-set", "soho-toolbar-more-button"], false, never>;
}

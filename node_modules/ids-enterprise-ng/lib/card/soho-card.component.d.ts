/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnInit, OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class SohoCardsComponent implements AfterViewInit, OnDestroy {
    private element;
    private ngZone;
    get isCards(): boolean;
    /** Reference to the Soho control api. */
    private cards?;
    constructor(element: ElementRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private jQueryElement?;
    private options;
    private card?;
    /** Defines the data to use, must be specified for this component */
    set dataset(dataset: Array<any> | undefined);
    get dataset(): Array<any> | undefined;
    /** Defines the selection type of cards */
    set selectable(selectable: SohoCardsSelectable);
    get selectable(): SohoCardsSelectable;
    updated(settings: any): SohoCardsComponent;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoCardsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoCardsComponent, "[soho-cards]", never, { "dataset": { "alias": "dataset"; "required": false; }; "selectable": { "alias": "selectable"; "required": false; }; }, {}, never, ["*"], false, never>;
}
export declare class SohoCardActionableComponent {
    get isCardActionable(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoCardActionableComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoCardActionableComponent, "soho-card-actionable", never, {}, {}, never, ["*"], false, never>;
}
export declare class SohoCardHeaderComponent {
    get isCardHeader(): boolean;
    flex: string;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoCardHeaderComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoCardHeaderComponent, "soho-card-header", never, {}, {}, never, ["*"], false, never>;
}
export declare class SohoCardPaneComponent {
    get isCardPane(): boolean;
    none: string;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoCardPaneComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoCardPaneComponent, "soho-card-pane", never, {}, {}, never, ["*"], false, never>;
}
export declare class SohoCardComponent implements AfterViewInit, OnDestroy, OnInit {
    private element;
    private ngZone;
    id: string | undefined;
    expandableHeader: boolean | undefined;
    verticalButtonAction: boolean | undefined;
    autoHeight: boolean | undefined;
    block: string;
    get isCard(): boolean;
    get isExpandableHeader(): boolean | undefined;
    get isAutoHeight(): boolean | undefined;
    set bordered(value: boolean | string | undefined);
    set noHeader(value: boolean | undefined);
    set contentPaddingX(value: number | undefined);
    set contentPaddingY(value: number | undefined);
    set noShadow(value: boolean);
    set detailRefId(value: string | undefined);
    set closed(value: boolean | undefined);
    /**
     * Closed the state of the component
     */
    get closed(): boolean | undefined;
    set attributes(value: Array<Object> | Object | undefined);
    get attributes(): Array<Object> | Object | undefined;
    /** Html template string */
    set template(template: string);
    updated(settings: any): SohoCardComponent;
    toggle?: Observable<boolean>;
    beforeexpand: EventEmitter<Object>;
    beforecollapse: EventEmitter<Object>;
    expand: EventEmitter<Object>;
    collapse: EventEmitter<Object>;
    afterexpand: EventEmitter<Object>;
    aftercollapse: EventEmitter<Object>;
    private jQueryElement?;
    private options;
    private cards?;
    private _closed?;
    constructor(element: ElementRef, ngZone: NgZone);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    /**
     * Toggles the state of the expandable card based on the passed param.
     */
    toggleOpen(open: boolean): void;
    close(): void;
    open(): void;
    private onBeforeExpand;
    private onBeforeCollapse;
    private onExpand;
    private onCollapse;
    private onAfterExpand;
    private onAfterCollapse;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoCardComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoCardComponent, "soho-card", never, { "id": { "alias": "soho-card"; "required": false; }; "expandableHeader": { "alias": "expandableHeader"; "required": false; }; "verticalButtonAction": { "alias": "verticalButtonAction"; "required": false; }; "autoHeight": { "alias": "autoHeight"; "required": false; }; "bordered": { "alias": "bordered"; "required": false; }; "noHeader": { "alias": "noHeader"; "required": false; }; "contentPaddingX": { "alias": "contentPaddingX"; "required": false; }; "contentPaddingY": { "alias": "contentPaddingY"; "required": false; }; "noShadow": { "alias": "noShadow"; "required": false; }; "detailRefId": { "alias": "detailRefId"; "required": false; }; "closed": { "alias": "closed"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "template": { "alias": "template"; "required": false; }; "toggle": { "alias": "toggle"; "required": false; }; }, { "beforeexpand": "beforeexpand"; "beforecollapse": "beforecollapse"; "expand": "expand"; "collapse": "collapse"; "afterexpand": "afterexpand"; "aftercollapse": "aftercollapse"; }, never, ["*"], false, never>;
}

/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, NgZone } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Angular Wrapper for the SohoAlert Directive.
 *
 */
export declare class SohoAlertDirective implements AfterViewInit {
    elementRef: ElementRef;
    private ngZone;
    private _options;
    private jQueryElement?;
    /** Set or remove the message. */
    set message(message: string);
    set id(id: string);
    set type(type: SohoAlertType);
    /** Set message with or without control color */
    set isAlert(isAlert: boolean | undefined);
    /** Set message whether to trigger events */
    set triggerEvents(triggerEvents: boolean | undefined);
    /** Set message with or without custom icon */
    set icon(icon: string | undefined);
    /**
     * Returns the data object data-errormessage
     *
     * @deprecated use getMessage() instead
     * @return error
     */
    get errorMessage(): string;
    constructor(elementRef: ElementRef, ngZone: NgZone);
    /**
     * After the control has been initialised and the view is ready,
     * get the SoHoXi controls to activate any alerts.
     */
    ngAfterViewInit(): void;
    /**
     * Adds an inline error message
     *
     * @deprecated use addInlineMessage() instead
     * @param message the error message to add.
     */
    addInlineError(message: string): void;
    /**
     * Adds an inline message of the type specified
     *
     * @param message the message to add.
     * @param type optional - 'error' (default)
     * @param isAlert optional - false (default)
     * @param triggerEvents optional - true (default)
     * @param icon optional
     */
    addInlineMessage(message: string, type?: SohoAlertType, isAlert?: boolean, triggerEvents?: boolean, icon?: string): void;
    /**
     * Gets the message of the type specified
     *
     * @param type optional - 'error' default
     * @return returns the message for the given type.
     */
    getMessage(type?: SohoAlertType): string;
    /**
     * Removes the error message
     *
     * @deprecated use removeMessage() instead
     */
    removeError(): void;
    /**
     * Removes the message of the type specified
     *
     * @param type optional - 'error' (default)
     * @param triggerEvents optional - true (default) triggers events
     */
    removeMessage(type?: SohoAlertType, triggerEvents?: boolean | undefined): void;
    /**
     * Removes the message for all types
     *
     * @param triggerEvents optional - true (default) triggers events
     */
    removeAllMessages(triggerEvents?: boolean): void;
    /**
     * Scrolls the element into the visible area of the browser window
     *
     * @param alignToTop optional - true (default) element will be aligned to the top of the visible area of the scrollable ancestor
     */
    scrollIntoView(alignToTop?: boolean): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoAlertDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<SohoAlertDirective, "[soho-alert]", ["soho-alert"], { "message": { "alias": "message"; "required": false; }; "id": { "alias": "id"; "required": false; }; "type": { "alias": "type"; "required": false; }; "isAlert": { "alias": "isAlert"; "required": false; }; "triggerEvents": { "alias": "triggerEvents"; "required": false; }; "icon": { "alias": "icon"; "required": false; }; }, {}, never, never, false, never>;
}

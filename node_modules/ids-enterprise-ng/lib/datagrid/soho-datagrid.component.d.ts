/// <reference types="ids-enterprise-typings" />
/// <reference types="jquery" />
/// <reference types="jquery" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ChangeDetectorRef, AfterViewChecked, ElementRef, EventEmitter, OnInit, OnDestroy, ComponentFactoryResolver, Injector, ApplicationRef, ComponentRef, Type, NgZone } from '@angular/core';
import { SohoDataGridService } from './soho-datagrid.service';
import * as i0 from "@angular/core";
export type SohoDataGridType = 'auto' | 'content-only';
/**
 * Contract for cell editors.
 */
export interface ExtendedSohoDataGridCellEditor extends SohoDataGridCellEditor {
    component: Type<SohoDataGridCellEditor>;
    args: SohoDataGridEditCellFunctionArgs;
    input?: JQuery<HTMLElement>;
    useValue: boolean;
    className?: string;
    /**
     * Initialise the edit control with the given component.  The control
     * mist conform to the SohoDataGridCellEditor contract.
     */
    init(componentRef: ComponentRef<SohoDataGridCellEditor>): void;
    /**
     * Destroy the editor.
     */
    destroy(): void;
}
export declare class SohoAngularEditorAdapter implements ExtendedSohoDataGridCellEditor {
    component: Type<SohoDataGridCellEditor>;
    args: SohoDataGridEditCellFunctionArgs;
    componentRef?: ComponentRef<SohoDataGridCellEditor> | null;
    input?: JQuery<HTMLElement>;
    useValue: boolean;
    className?: string;
    constructor(component: Type<SohoDataGridCellEditor>, args: SohoDataGridEditCellFunctionArgs);
    init(componentRef: ComponentRef<SohoDataGridCellEditor>): void;
    val(value?: any): any;
    focus(): void;
    destroy(): void;
}
/**
 * Angular Wrapper for the Soho Data Grid Component.
 *
 * This component searches for an element with the attribute
 * 'soho-datagrid' in the parent's DOM tree, initialising it with
 * the Soho datagrid control.
 *
 * The data is provided either by a component input or an implementation
 * of the DataGridService interface, by specifying an implementation
 * on the hosting component, i.e.
 *
 * providers: [ provide: DataGridService, useClass: DataGridDemoService} ]
 */
export declare class SohoDataGridComponent implements OnInit, AfterViewInit, OnDestroy, AfterViewChecked {
    private ngZone;
    private elementRef;
    private changeDetector;
    private resolver;
    private injector;
    private app;
    protected datagridService: SohoDataGridService;
    static AUTO: SohoDataGridType;
    static CONTENT_ONLY: SohoDataGridType;
    /**
     * Sets the grid options for the data grid, marking this components
     * as requiring a full rebuild at the end of the change lifecycle.
     *
     * @param gridOptions - not null grid options.
     */
    set gridOptions(gridOptions: SohoDataGridOptions);
    get gridOptions(): SohoDataGridOptions;
    /**
     * Defines which property in the data rows is to be used as the id of each
     * row of the data.
     *
     * @param idProperty string id
     */
    set idProperty(idProperty: string | undefined);
    get idProperty(): string | undefined;
    /**
     * The value of the frozenColumns option - returns the requested
     * value if the control has not been created yet.
     */
    get frozenColumns(): SohoDataGridFrozenColumns | undefined;
    /**
     * Sets the frozenColumns settings - will force a grid rebuild if the component has already been
     * created.
     *
     * @param frozenColumns - the frozenColumns settings.
     */
    set frozenColumns(frozenColumns: SohoDataGridFrozenColumns | undefined);
    /**
     * If true allows
     */
    set cellNavigation(cellNavigation: boolean | undefined);
    get cellNavigation(): boolean | undefined;
    get isVerticalScrollToEnd(): boolean | undefined;
    /**
     * Changes the row navigation setting of the data grid. If rowNavigation
     * is "false” then a border is not displayed around the row.
     *
     * Defaults to true.
     *
     * @param rowlNavigation i "false” then grid will NOT show a border around the row.
     */
    set rowNavigation(rowNavigation: boolean | undefined);
    get rowNavigation(): boolean | undefined;
    /**
     * If true, displays the rows in the grid using alternate shading, otherwise
     * all the rows use the same shading.
     */
    set alternateRowShading(alternateRowShading: boolean | undefined);
    get alternateRowShading(): boolean | undefined;
    /**
     * The data to be displayed provided as an array
     * of json objects compatible with the column meta
     * data provided.
     *
     * @param dataset - array of json objects
     */
    set dataset(dataset: Array<any> | undefined);
    /**
     * Return the dataset currently displayed by the datagrid.
     *
     * @return an array of objects.
     */
    get dataset(): any[] | undefined;
    /**
     * If true the columns can be reorders; otherwise if false they are fixed.
     */
    set columnReorder(columnReorder: boolean | undefined);
    get columnReorder(): boolean | undefined;
    set disableClientSort(disableClientSort: boolean | undefined);
    get disableClientSort(): boolean | undefined;
    set disableClientFilter(disableClientFilter: boolean | undefined);
    get disableClientFilter(): boolean | undefined;
    set resultsText(resultsText: SohoDataGridResultsTextFunction);
    set showFilterTotal(showFilterTotal: boolean | undefined);
    get showFilterTotal(): boolean | undefined;
    /**
     * If true, the grid allows edits, otherwise if false edits are disabled.
     */
    set editable(editable: boolean | undefined);
    get editable(): boolean | undefined;
    /**
     * Input that defines a function which is used to determine if a row is disabled, or not.
     */
    set isRowDisabled(isRowDisabled: SohoIsRowDisabledFunction | undefined);
    get isRowDisabled(): SohoIsRowDisabledFunction | undefined;
    set allowOneExpandedRow(allowOneExpandedRow: boolean | undefined);
    get allowOneExpandedRow(): boolean | undefined;
    set rowTemplate(rowTemplate: string | undefined);
    get rowTemplate(): string | undefined;
    set rowTemplateComponent(rowTemplateComponent: any);
    get rowTemplateComponent(): any;
    set rowTemplateComponentInputs(rowTemplateComponentInputs: any);
    get rowTemplateComponentInputs(): any;
    set rowTemplateField(rowTemplateField: string | undefined);
    get rowTemplateField(): string | undefined;
    /**
     * If true, will select the cell text soon as entering edit mode
     */
    set selectOnEdit(selectOnEdit: boolean | undefined);
    get selectOnEdit(): boolean | undefined;
    set isList(isList: boolean | undefined);
    get isList(): boolean | undefined;
    set menuId(menuId: any);
    /** beforeOpen - ajax callback for open event */
    set menuBeforeOpen(menuBeforeOpen: SohoPopupMenuSourceFunction);
    get menuBeforeOpen(): SohoPopupMenuSourceFunction;
    /**
     * Sets the row height for the grid, to be one of the supported options.
     *
     * @param rowHeight - 'extra-small' | 'small' | 'medium' | 'large'
     */
    set rowHeight(rowHeight: SohoDataGridRowHeight);
    /**
     * Sets the height of the row to something other then the three built in rowHeights.
     *
     * @param fixedRowHeight Any integer
     */
    set fixedRowHeight(fixedRowHeight: number | string | Function);
    /**
     * Whether selection is enabled.
     *
     * @param selectable valid values are: 'multiple', 'single', 'mixed', 'siblings' and false.
     */
    set selectable(selectable: any);
    get selectable(): any;
    set showSelectAllCheckBox(showSelectAllCheckBox: boolean | undefined);
    get showSelectAllCheckBox(): boolean | undefined;
    set clickToSelect(clickToSelect: boolean | undefined);
    get clickToSelect(): boolean | undefined;
    set toolbar(toolbar: SohoToolbarOptions);
    set initializeToolbar(initializeToolbar: boolean | undefined);
    get initializeToolbar(): boolean | undefined;
    set saveUserSettings(settingsForSave: SohoDataGridSaveUserSettings);
    set paging(paging: boolean | undefined);
    get paging(): boolean | undefined;
    set pagesize(pagesize: number);
    set pagesizes(pagesizes: Array<number>);
    set indeterminate(indeterminate: boolean);
    set actionableMode(actionableMode: boolean | undefined);
    get actionableMode(): boolean | undefined;
    set saveColumns(saveColumns: boolean);
    /**
     * Input for the source function.
     *
     * @param source the dataset's source function.
     */
    set source(source: SohoDataGridSourceFunction | undefined);
    /**
     * Enables or disables the filter bar on the grid.
     *
     * @param filterable if true, the filter bar is displayed; otherwise no filter bar is displayed.
     */
    set filterable(filterable: boolean | undefined);
    get filterable(): boolean | undefined;
    set filterWhenTyping(filterWhenTyping: boolean | undefined);
    get filterWhenTyping(): boolean | undefined;
    /**
     * If true the datagrid is displayed as a tree, otherwise
     * the grid is displayed as flat rows.
     *
     * This field is dynamic, and will cause the grid to be rebuilt
     * if changed.
     *
     * @param treeGrid - boolean flag indicating if the data is hierarchical.
     */
    set treeGrid(treeGrid: boolean | undefined);
    get treeGrid(): boolean | undefined;
    /**
     * Returns the unqiue identifier; which may be undefined.
     */
    get uniqueId(): string | undefined;
    /**
     * Sets the unqiueId - will force a grid rebuild if the component has already been
     * created.
     *
     * @param unqiueId - the new id.
     */
    set uniqueId(uniqueId: string | undefined);
    /**
     * The value of the rowReorder flag - returns the requested value if the control has not been created yet.
     */
    get rowReorder(): boolean | undefined;
    /**
     * Sets the rowReorder flag - will force a grid rebuild if the component has already been
     * created.
     *
     * @param rowReorder - if true the rows will be reorderable; otherwise they will not.
     */
    set rowReorder(value: boolean | undefined);
    /**
     * The value of the showDirty flag - returns the requested value if the control has not been created yet.
     */
    get showDirty(): boolean | undefined;
    /**
     * Sets the showDirty flag - will force a grid rebuild if the component has already been
     * created.
     *
     * @param showDirty - if true then dirty rows will be highlighted; otherwise they will not.
     */
    set showDirty(value: boolean | undefined);
    /**
     * Sets the resizeMode option to changes the column resize behavior.
     *
     * @param resizeMode - if true then dirty rows will be highlighted; otherwise they will not.
     */
    set resizeMode(value: SohoDataGridResizeMode | undefined);
    /**
     * Sets the datagrid header background color, either dark or light.
     * @param headerBackgroundColor - default value is 'dark'
     */
    set headerBackgroundColor(value: SohoDatagridHeaderBackgroundColor | undefined);
    set headerMenuId(value: string | undefined);
    get headerMenuId(): string | undefined;
    set headerMenuSelected(headerMenuSelected: Function);
    set headerMenuBeforeOpen(headerMenuBeforeOpen: Function);
    get disableRowDeactivation(): boolean | undefined;
    set disableRowDeactivation(value: boolean | undefined);
    get disableRowDeselection(): boolean | undefined;
    set disableRowDeselection(value: boolean | undefined);
    /**
     * Used to hold an object that can be referenced in formatters
     * and editors or anywhere else a datagrid reference is available
     */
    set userObject(userObject: any | undefined);
    get userObject(): any | undefined;
    /**
     * The value of the groupable option - returns the requested
     * value if the control has not been created yet.
     */
    get groupable(): SohoDataGridGroupable | undefined;
    /**
     * Sets the groupable settings - will force a grid rebuild if the component has already been
     * created.
     *
     * @param groupable - the groupable settings.
     */
    set groupable(value: SohoDataGridGroupable | undefined);
    /**
     * The array of data to display in the grid.
     *
     * @param an array of objects matching the column definition.
     *
     * As this method can be called before the control is
     * initialised, stash the data for later, and only
     * call loadData on the control api if ready.
     */
    set data(data: any[] | undefined);
    /**
     * The array of columns to display in the grid.
     *
     * As this method can be called before the control is
     * initialised, stash the data for later, and only
     * call loadData on the control api if ready.
     */
    set columns(columns: SohoDataGridColumn[] | undefined);
    /**
     *
     * Summary row columns settingss
     */
    set summaryRowColumns(summaryRowColumns: SohoDataGridSummaryRowColumnSettings[]);
    /**
     * If true an extra column will be added to the end that fills the space.
     * This allows columns to not stretch to fill so they are a constant size.
     * This setting cannot be used with percent columns.
     */
    set spacerColumn(spacerColumn: boolean | undefined);
    /**
     * If true an extra column is currently added to the end that fills the space.
     */
    get spacerColumn(): boolean | undefined;
    set sizeColumnsEqually(sizeColumnsEqually: boolean | undefined);
    get sizeColumnsEqually(): boolean | undefined;
    set expandableRow(expandableRow: boolean | undefined);
    get expandableRow(): boolean | undefined;
    set redrawOnResize(redrawOnResize: boolean | undefined);
    get redrawOnResize(): boolean | undefined;
    set exportConvertNegative(exportConvertNegative: boolean | undefined);
    get exportConvertNegative(): boolean | undefined;
    set stickyHeader(stickyHeader: boolean);
    set attributes(attributes: Array<Object> | Object);
    /**
     * Determines the sizing method for the auto sizing columns.
     */
    set columnSizing(columnSizing: 'both' | 'data' | 'header' | undefined);
    /**
     * Determines the sizing method for the auto sizing columns.
     */
    get columnSizing(): 'both' | 'data' | 'header' | undefined;
    /**
     * The name of the column stretched to fill the width of the datagrid,
     * or 'last' where the last column will be stretched to fill the
     * remaining space.
     *
     * @param stretchColumn - the name of the column to stretch; or 'last',
     */
    set stretchColumn(stretchColumn: string | undefined);
    /**
     * The name of the column to stretch, or 'last' if the
     * last column is stretched.
     */
    get stretchColumn(): string | undefined;
    /**
     * If true, column will recalculate its width and stretch if required on column change.
     *
     * @param stretchColumnOnChange - If false stretch logic wont run on column change.
     */
    set stretchColumnOnChange(stretchColumnOnChange: boolean | undefined);
    /**
     * The current value of stretchColumnOnChange.
     */
    get stretchColumnOnChange(): boolean | undefined;
    /**
     * Whether to show the page size selector or not.
     */
    set showPageSizeSelector(showPageSizeSelector: boolean);
    /**
     * If true, hides the pager if there's only one page worth of results.
     */
    set hidePagerOnOnePage(hidePagerOnOnePage: boolean);
    /**
     * The column groups
     *
     * As this method can be called before the control is
     * initialised, stash the data for later, and only
     * call loadData on the control api if ready.
     */
    set columnGroup(columnGroups: SohoDataGridColumnGroup[]);
    get columnGroup(): SohoDataGridColumnGroup[];
    /**
     * The `emptyMessage` data grid option.
     * Use null or undefined to remove any empty message.
     */
    set emptyMessage(emptyMessage: SohoEmptyMessageOptions | null | undefined);
    get emptyMessage(): SohoEmptyMessageOptions | null | undefined;
    /**
     * Enable toolips on the cell values, at a cost of performance.
     */
    set enableTooltips(value: boolean | undefined);
    get enableTooltips(): boolean | undefined;
    set selectChildren(selectChildren: boolean | undefined);
    get selectChildren(): boolean | undefined;
    set allowChildExpandOnMatch(allowChildExpandOnMatch: boolean | undefined);
    get allowChildExpandOnMatch(): boolean | undefined;
    /**
     * Defines the source type of the grid, either:
     *
     * - "content-only" where table elements are provided in the body.
     * - "auto" where columns and rows are obtained for an
     *   injected service (if defined) or via the Inputs if not.
     *
     * Allow the input to be overriden, to match the component selector.
     */
    set sohoDatagrid(datagridType: SohoDataGridType);
    selected: EventEmitter<SohoDataGridSelectedEvent>;
    cellchange: EventEmitter<SohoDataGridCellChangeEvent>;
    rowRemove: EventEmitter<SohoDataGridRowRemoveEvent>;
    rowAdd: EventEmitter<SohoDataGridAddRowEvent>;
    filtered: EventEmitter<SohoDataGridFilteredEvent>;
    expandrow: EventEmitter<SohoDataGridToggleRowEvent>;
    /**
     * This event is fired when a key is pressed
     *
     * @todo remove override of native attribute
     */
    keydown: EventEmitter<SohoDataGridKeyDownEvent>;
    exiteditmode: EventEmitter<SohoDataGridEditModeEvent>;
    beforeentereditmode: EventEmitter<SohoDataGridEditModeEvent>;
    /**
     * This event is fired when edit mode is entered.
     */
    entereditmode: EventEmitter<SohoDataGridEditModeEvent>;
    collapserow: EventEmitter<SohoDataGridToggleRowEvent>;
    sorted: EventEmitter<SohoDataGridSortedEvent>;
    nextPage: EventEmitter<SohoPagerPagingInfo>;
    previousPage: EventEmitter<SohoPagerPagingInfo>;
    firstPage: EventEmitter<SohoPagerPagingInfo>;
    lastPage: EventEmitter<SohoPagerPagingInfo>;
    pageSizeChange: EventEmitter<SohoPagerPagingInfo>;
    beforePaging: EventEmitter<SohoPagerPagingInfo>;
    afterPaging: EventEmitter<SohoPagerPagingInfo>;
    beforeRowActivated: EventEmitter<SohoDataGridRowActivated>;
    rowActivated: EventEmitter<SohoDataGridRowActivated>;
    rowDeactivated: EventEmitter<SohoDataGridRowActivated>;
    rowClicked: EventEmitter<SohoDataGridRowClicked>;
    rowDoubleClicked: EventEmitter<SohoDataGridRowClicked>;
    contextMenu: EventEmitter<SohoDataGridRowClicked>;
    rowReordered: EventEmitter<SohoDataGridRowReorderedEvent>;
    openFilterRow: EventEmitter<SohoDataGridOpenFilterRowEvent>;
    closeFilterRow: EventEmitter<SohoDataGridCloseFilterRowEvent>;
    settingsChanged: EventEmitter<SohoDataGridSettingsChangedEvent>;
    rendered: EventEmitter<SohoDataGridRenderedEvent>;
    afterRender: EventEmitter<SohoDataGridAfterRenderEvent>;
    verticalScroll: EventEmitter<SohoDataGridScrollEvent>;
    filteroperatorchanged: EventEmitter<SohoDataGridFilterOperatorChangedEvent>;
    isDisabled: boolean;
    /**
     * Sets the role for the grid.
     */
    get datagridRole(): "treegrid" | "datagrid";
    private jQueryElement?;
    private datagrid?;
    private gridData?;
    private datagridType?;
    private _gridOptions;
    private refreshHint;
    private changedOptions;
    private cellComponents;
    private rowTemplateComponents;
    /**
     * Constructor.
     *
     * @param ngZone - the angular zone for this component.
     * @param elementRef - the element matching the component's selector.
     * @param changeDetector - the component's change detector.
     * @param resolver - component factory resolver (for editors/formatters).
     * @param injector - dynamic component injector (for editors/formatters).
     * @param datagridService - service for obtaining data (optional)
     */
    constructor(ngZone: NgZone, elementRef: ElementRef, changeDetector: ChangeDetectorRef, resolver: ComponentFactoryResolver, injector: Injector, app: ApplicationRef, datagridService: SohoDataGridService);
    getColumnGroup(idx: number): string;
    getColumnById(idx: number): string;
    /**
     * Overrides the sort function used by the datagrid,
     * can only be used once the grid has been created.
     *
     * @todo this should made lazy.
     */
    setSortFunction(sortFunction: SohoDataGridSortFunction): void;
    /**
     * Sets the column and direction to sort the dataset on.
     *
     * Can only be used once the grid has been initialised, otherwise
     * an error is thrown.
     *
     * @param columnId the id of the column to sort on; must be non-null.
     * @param ascending if true sort ascending, otherwise descending.  If not supplied the setting is toggled.
     */
    setSortColumn(columnId: string, ascending?: boolean): void;
    /**
     * Used to set the sort indicator on a column when disableClientSort is set to true.
     */
    setSortIndicator(columnId: string, ascending: boolean | undefined | null): void;
    pageSize(): number | undefined;
    updatePagingInfo(pageInfo: SohoPagerPagingInfo): void;
    enable(): void;
    disable(): void;
    updateRow(idx: number, row: any): void;
    hideColumn(id: any): void;
    showColumn(id: any): void;
    columnById(id: string): Array<any>;
    getColumns(): Array<any>;
    getColumnGroups(): SohoDataGridColumnGroup[];
    /** Get the column index from the col's id */
    columnIdxById(columnId: string): number;
    getHeaderRowColumn(fld: any): any;
    /**
     * Adds a row of data to the datagrid at the given optional location.
     *
     * @param data the row of data to add.
     * @param location the optional location, 'top' or 'bottom' or a number.
     */
    addRow(data: any, location?: 'top' | 'bottom' | number): void;
    /**
     * Adds multiple rows of data to the datagrid at the given optional location.
     * @param data Array of data to add.
     * @param location the optional location, 'top' or 'bottom' or a number.
     */
    addRows(data: any[], location?: 'top' | 'bottom' | number): void;
    /**
     * Removes a row matching the rowIndex passed in from the data and grid.
     *
     * @param rowIndex the index of the row to remove.
     */
    removeRow(rowIndex: number, noSync?: boolean, noTrigger?: boolean): void;
    /**
     * Returns an array of the dirty rows in the grid.
     *
     * @return an array of the dirty rows in the grid.
     */
    dirtyRows(): Array<any>;
    /**
     * Returns an array of the dirty cells in the grid.
     *
     * @return an array of the dirty cells in the grid.
     */
    dirtyCells(): Array<any>;
    /**
     * Clear all dirty cells.
     */
    clearDirty(): void;
    /**
     * Commit the cell that's currently in edit mode.
     */
    commitCellEdit(): void;
    /**
     * Clear all dirty cells in given row.
     *
     * @param row - the row number (idx) of the row.
     */
    clearDirtyRow(row: number): void;
    /**
     * Clear dirty on given cell.
     *
     * @param row - the row number (idx) of the row
     * @param cell - the cell number (idx) of the cell
     */
    clearDirtyCell(row: number, cell: number): void;
    /**
     * Clear all error for a given cell in a row
     *
     * @param row The row index.
     * @param cell The cell index.
     */
    clearAllCellError(row: number, cell: number): void;
    /**
     * Clear a cell with an error of a given type
     *
     * @param row The row index.
     * @param cell The cell index.
     * @param type of error.
     */
    clearCellError(row: number, cell: number, type: any): void;
    /**
     * Clear a row level all errors, alerts, info messages
     *
     * @param row The row index.
     */
    clearRowError(row: number): void;
    /**
     * Clear all errors, alerts and info messages in entire datagrid.
     */
    clearAllErrors(): void;
    /** Validate all rows and cells in the entire grid if they have validation on the column */
    showRowError(row: number, message: string, type: SohoAlertType): void;
    /** Validate all cells in a specific row */
    validateRow(row: number): void;
    /**
     * Set and show a message/error on the given row.
     */
    validateAll(): void;
    /**
     * Sets the status of a given row in the grid.
     *
     * @param idx - the row number (idx) of the row
     * @param status - status class name e.g. 'error'
     * @param tooltip - string value for tooltip message e.g. 'Error'
     */
    rowStatus(idx: number, status: string, tooltip: string): void;
    /**
     * Return an array containing all of the currently modified rows, the type of modification
     * and the cells that are dirty and the data.
     *
     * @returns An keyed object showing the dirty row info.
     */
    getModifiedRows(): SohoDataGridModifiedRows;
    /**
     * Set a cell to dirty and add the dirty icon visually.
     *
     * @param row The row index
     * @param cell The cell index
     * @param toggle True to set it and false to remove it
     * @param data Adds dirty data to the internal tracker
     */
    setDirtyIndicator(row: number, cell: number, toggle: boolean, data?: object): void;
    /**
     * Removes all selected rows
     */
    removeSelected(): void;
    /**
     * Toggles the display of the filter row.
     */
    toggleFilterRow(): void;
    /**
     * Accept conditions from outside or pull from filter row
     */
    applyFilter(conditions?: Array<SohoDataGridFilterCondition>): void;
    /**
     * Set the filter row from passed data / settings
     */
    setFilterConditions(conditions: Array<SohoDataGridFilterCondition>): void;
    /**
     * Get filter conditions in array form from the UI
     */
    filterConditions(): Array<SohoDataGridFilterCondition>;
    /**
     * Clears any filter defined, for this datagrid.
     */
    clearFilter(): void;
    /**
     * Returns the rows currently selected on the data grid.
     *
     * @return an array of SohoDataGridSelectedRow instances.
     * @deprecated use selectedRows instead.
     */
    getSelectedRows(): SohoDataGridSelectedRow[];
    /**
     * Returns the rows currently selected on the data grid.
     *
     * @return an array of SohoDataGridSelectedRow instances.
     */
    selectedRows(): SohoDataGridSelectedRow[];
    /**
     * Selects all the rows in the grid.
     */
    selectAllRows(): void;
    /**
     * Unselects all the rows in the grid.
     */
    unSelectAllRows(): void;
    /**
     * Sets the selected status of the specified row in the data grid.
     *
     * @param idx - the row number (idx) of the row to select.
     * @deprecated - use selectRows instead.
     */
    selectRow(idx: number): void;
    /**
     * Deselects the specified row in the data grid.
     *
     * @param idx - the row number (idx) of the row to deselect.
     */
    unselectRow(idx: number): void;
    /**
     * Selects a range of rows based on the provided row indexes.
     *
     * @param start - the start index
     * @param end - then end index
     */
    selectRange(start: number, end: number): void;
    /**
     * Set the selected rows by passing the row index or an array of row indexes
     */
    selectRows(row: number | number[]): void;
    /**
     * Set the status of the checkbox on the header.
     *
     * @param state 'all', 'partial' or 'all'.
     */
    setHeaderCheckboxState(state: SohoDataGridHeaderCheckboxState): void;
    /**
     * Activate the row of the passed-in idx.
     * NOTE: valid only when selection mode is 'mixed'
     */
    activateRow(idx: number): void;
    /**
     * Deactivate the currently activated row.
     *
     * NOTE: valid only when selection mode is 'mixed'
     */
    deactivateRow(): void;
    /**
     * Get the currently activated row.
     * NOTE: valid only when selection mode is 'mixed'
     */
    activatedRow(): SohoDataGridRowActivated;
    /**
     * Sets the active cell.
     *
     * @param idx The index of the row of the cell to set active.
     * @param idx2 The index of the cell to set active.
     */
    setActiveCell(idx: number, idx2: number): void;
    /**
     * Gets the active cell info
     */
    getActiveCell(): any;
    /**
     * Scrolls the row at <b>idx</b> into view in the view port.
     *
     * @param idx The index of the row to scroll into view.
     */
    scrollRowIntoView(idx: number): void;
    /**
     * Returns an array of row numbers for the rows containing the value for the specified field.
     *
     * @param fieldName The field name to search.
     * @param value The value to use in search.
     */
    findRowsByValue(fieldName: string, value: any): number[];
    /**
     * Programmatically trigger a call to the datagrid.settings.source
     * function with the given pagerType.
     *
     * @param pagerType - a valid pager type.
     */
    triggerSource(pagerType: SohoDataGridTriggerSourcePagerType, callback?: Function): void;
    /**
     * Trigger export of grid data to Excel.
     *
     * @param fileName The prefix name to be used for the exported file.
     * @param worksheetName The name to be used for the worksheet.
     * @param customDs A datasource to override the default (deprecated)
     */
    exportToExcel(fileName: string, worksheetName?: string | undefined, customDs?: Object[]): void;
    /**
     * Trigger export of grid data to CSV formatted file.
     *
     * @param fileName The prefix name to be used for the exported file.
     * @param customDs A datasource to override the default.
     * @param separator The separator to use in the cvs file, defaults to 'sep=,'
     * @param format if true, date and number values will be formatted based on the locale
     */
    exportToCsv(fileName: string, customDs?: Object[], separator?: string, format?: boolean): void;
    /**
     * Updates the columns and columnGroups displayed on the grid.
     *
     * @param columns The datagrid columns to update.
     * @param columnGroups The column groups to update.
     */
    updateColumns(columns: SohoDataGridColumn[], columnGroups: SohoDataGridColumnGroup[]): void;
    /**
     * Parse a JSON array with columns and return the column object.
     *
     * @param columnStr The json represntation of the column object.
     * @return  The array of columns.
     */
    columnsFromString(columns: string): Object;
    /**
     * Reset columns to their defaults (used on restore menu item).
     */
    resetColumns(): void;
    /**
     * Open the personalize dialog.
     */
    personalizeColumns(): void;
    /**
     * Restore the user settings from local Storage or as passed in.
     *
     * @param settings The object containing the settings to use.
     */
    restoreUserSettings(settings: any): void;
    /**
     * Handle a request to load the data for the grid from the service.
     *
     * @todo paging - not yet fully implemented?
     */
    private onDataRequest;
    /**
     * Event fired after a child row has been expanded.
     */
    private onExpandRowHandler;
    /**
     * Build component for rowTemplate
     */
    private buildRowTemplateComponent;
    /**
     * Event fired after a context menu is opened
     */
    private onKeyDownHandler;
    /**
     * Event fired after a child row has been expanded.
     *
     * @param idProperty string id
     */
    set onBeforeSelect(beforeSelectFunction: SohoDataGridBeforeSelectFunction | undefined);
    get onBeforeSelect(): SohoDataGridBeforeSelectFunction | undefined;
    /**
     *  Makes it possible to save selections when changing pages on server side paging.
     *  You may want to also use showSelectAllCheckBox: false
     */
    set allowSelectAcrossPages(allowSelectAcrossPages: boolean | undefined);
    get allowSelectAcrossPages(): boolean | undefined;
    /**
     *  Select all will effect only on current page and its for client side paging only.
     */
    set selectAllCurrentPage(selectAllCurrentPage: boolean | undefined);
    get selectAllCurrentPage(): boolean | undefined;
    /**
     * An array of column IDs used to define aria descriptors for selection checkboxes.
     */
    set columnIds(columnIds: Array<String | Number> | undefined);
    get columnIds(): Array<String | Number> | undefined;
    /**
     *If true, the new row indicator will display after adding a row
     *
     * @param showNewRowIndicator boolean show new indicator setting
     */
    set showNewRowIndicator(showNewRowIndicator: boolean | undefined);
    get showNewRowIndicator(): boolean | undefined;
    set onExpandChildren(expandChildrenFunction: SohoDataGridExpandChildrenFunction | undefined);
    get onExpandChildren(): SohoDataGridExpandChildrenFunction | undefined;
    set onCollapseChildren(collapseChildrenFunction: SohoDataGridCollapseChildrenFunction | undefined);
    get onCollapseChildren(): SohoDataGridCollapseChildrenFunction | undefined;
    set onPostRenderCell(onPostRenderCell: SohoDataGridPostRenderCellFunction);
    set onDestroyCell(onDestroyCell: SohoDataGridPostRenderCellFunction);
    set onEditCell(onEditCell: SohoDataGridEditCellFunction);
    set onKeyDown(onKeyDown: SohoDataGridKeyDownFunction);
    set onExpandRow(onExpandRow: SohoDataGridExpandRowFunction);
    set fallbackImage(fallbackImage: string | undefined);
    get fallbackImage(): string | undefined;
    set fallbackTooltip(fallbackTooltip: SohoFallbackTooltipOptions | undefined);
    get fallbackTooltip(): SohoFallbackTooltipOptions | undefined;
    /**
     * Event fired after edit mode is activated on an editor.
     *
     * @param args the event arguments
     */
    private onExitEditMode;
    /**
     * Event fired before edit mode is activated on an editor.
     *
     * @param args the event arguments
     */
    private onBeforeEnterEditMode;
    /**
     * Event fired when edit mode is activated on an editor.
     *
     * @param args the event arguments
     */
    private onEnterEditMode;
    /**
     * Event fired after a child row has been collapsed.
     */
    private onCollapseRow;
    /**
     * Event fired when a row has been added.
     */
    private onRowAdd;
    /**
     * Event fired when a cell has changed.
     */
    private onCellChange;
    /**
     * Event fired when a row has been clicked.
     */
    private onRowClicked;
    /**
     * Event fired when the filter row is closed.
     */
    private onCloseFilterRow;
    /**
     * Event fired when a context menu is is clicked.
     */
    private onContextMenu;
    /**
     * Event fired when a context menu is is clicked.
     */
    private onDoubleClick;
    /**
     * Event fired when the data is filtered.
     */
    private onFiltered;
    /**
     * Event fired when filter row opened.
     */
    private onOpenFilterRow;
    /**
     * Event fired when a row is removed.
     */
    private onRowRemove;
    /**
     * Event fired when the data is rendered
     */
    private onRendered;
    /**
     * Event fired when the data is filtered.
     */
    private onAfterRender;
    /**
     * Event fired before a row is activated.
     */
    private onBeforeRowActivated;
    /**
     * Event fired when a row is activated.
     */
    private onRowActivated;
    /**
     * Event fired when a row is deactivated.
     */
    private onRowDeactivated;
    /**
     * Event fired when a row is reordered.
     */
    private onRowReordered;
    /**
     * Event fired when a row is selected or deselected.
     */
    private onSelected;
    /**
     * Event fired when settings are changed on the grid.
     */
    private onSettingsChanged;
    /**
     * Event fired when the data is sorted.
     */
    private onSorted;
    /**
     * Event fired when using built-in pager to next page.
     */
    private onNextPage;
    /**
       * Event fired when using built-in pager to previous page.
       */
    private onPreviousPage;
    /**
       * Event fired when using built-in pager to first page.
       */
    private onFirstPage;
    /**
       * Event fired when using built-in pager to last page.
       */
    private onLastPage;
    /**
     * Event fired on paging size change
     */
    private onPageSizeChange;
    /**
     * Event fired before paging
     */
    private onBeforePaging;
    /**
     * Event fired after paging
     */
    private onAfterPaging;
    /**
     * Event fired after vertical scroll
     */
    private onVerticalScroll;
    /**
     * Event fired after vertical scroll
     */
    private onFilterOperatorChanged;
    /**
     * Returns the row dom jQuery node.
     *
     * @param  row The row index.
     * @param  includeGroups If true groups are taken into account.
     * @return The dom jQuery node
     */
    rowNode(row: number, includeGroups: boolean): any;
    /**
     * Returns the cell dom node.
     *
     * @param  row The row index.
     * @param  cell The cell index.
     * @param  includeGroups If true groups are taken into account.
     * @return The dom node
     */
    cellNode(row: number, cell: number, includeGroups: boolean): any;
    /**
     * Expand Detail Row Or Tree Row
     * @param {number} dataRowIndex The row to toggle
     */
    toggleRowDetail(dataRowIndex: number): void;
    /**
     * Initialize the component after Angular initializes the data-bound input properties.
     */
    ngOnInit(): void;
    /**
     * Called after Angular projects external content into its view.
     */
    ngAfterViewInit(): void;
    /**
     *
     */
    ngAfterViewChecked(): void;
    /**
     * Cleanup just before Angular destroys the component.
     *
     * Unsubscribe observables, detach event handlers and remove other resources to avoid memory leaks.
     */
    ngOnDestroy(): void;
    /**
     * Destroys the jQuery control (and any other resources)
     * associated with this component.
     */
    private destroyDataGrid;
    /**
     * Handles the 'postCellRender' event.
     *
     * @param container the container to host the element.
     * @param args the formatter arguments.
     */
    private onPostRenderCellHandler;
    /**
     * Handles the 'destroyCell' event.
     *
     * @param container the container.
     * @param args the args
     */
    private onDestroyCellHandler;
    private onEditCellHandler;
    private buildDataGrid;
    /**
     * Marks the components as requiring a rebuild after the next update.
     *
     * @todo possible add hints? Rebuild, Update, SetOption
     *
     * @param optionName - the option that was updated, (allowing specific handling)
     * @param hint - the type of refresh required, update?.
     */
    private markForRefresh;
    /**
     * Stop gap method to update the current datagrid and rebuild it again.
     *
     * This is required whilst there is no method found that can update the view
     * for a particular input.
     */
    updated(settings?: SohoDataGridOptions): void;
    /**
     * Updates the source setting/function to use source input if set.
     * Otherwise use dataGridService if that is set.
     *
     * @param source the function
     */
    private updateSource;
    private checkForComponentEditors;
    private checkForSummaryRowSettings;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoDataGridComponent, [null, null, null, null, null, null, { optional: true; }]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoDataGridComponent, "[soho-datagrid]", never, { "gridOptions": { "alias": "gridOptions"; "required": false; }; "idProperty": { "alias": "idProperty"; "required": false; }; "frozenColumns": { "alias": "frozenColumns"; "required": false; }; "cellNavigation": { "alias": "cellNavigation"; "required": false; }; "rowNavigation": { "alias": "rowNavigation"; "required": false; }; "alternateRowShading": { "alias": "alternateRowShading"; "required": false; }; "dataset": { "alias": "dataset"; "required": false; }; "columnReorder": { "alias": "columnReorder"; "required": false; }; "disableClientSort": { "alias": "disableClientSort"; "required": false; }; "disableClientFilter": { "alias": "disableClientFilter"; "required": false; }; "resultsText": { "alias": "resultsText"; "required": false; }; "showFilterTotal": { "alias": "showFilterTotal"; "required": false; }; "editable": { "alias": "editable"; "required": false; }; "isRowDisabled": { "alias": "isRowDisabled"; "required": false; }; "allowOneExpandedRow": { "alias": "allowOneExpandedRow"; "required": false; }; "rowTemplate": { "alias": "rowTemplate"; "required": false; }; "rowTemplateComponent": { "alias": "rowTemplateComponent"; "required": false; }; "rowTemplateComponentInputs": { "alias": "rowTemplateComponentInputs"; "required": false; }; "rowTemplateField": { "alias": "rowTemplateField"; "required": false; }; "selectOnEdit": { "alias": "selectOnEdit"; "required": false; }; "isList": { "alias": "isList"; "required": false; }; "menuId": { "alias": "menuId"; "required": false; }; "menuBeforeOpen": { "alias": "menuBeforeOpen"; "required": false; }; "rowHeight": { "alias": "rowHeight"; "required": false; }; "fixedRowHeight": { "alias": "fixedRowHeight"; "required": false; }; "selectable": { "alias": "selectable"; "required": false; }; "showSelectAllCheckBox": { "alias": "showSelectAllCheckBox"; "required": false; }; "clickToSelect": { "alias": "clickToSelect"; "required": false; }; "toolbar": { "alias": "toolbar"; "required": false; }; "initializeToolbar": { "alias": "initializeToolbar"; "required": false; }; "saveUserSettings": { "alias": "saveUserSettings"; "required": false; }; "paging": { "alias": "paging"; "required": false; }; "pagesize": { "alias": "pagesize"; "required": false; }; "pagesizes": { "alias": "pagesizes"; "required": false; }; "indeterminate": { "alias": "indeterminate"; "required": false; }; "actionableMode": { "alias": "actionableMode"; "required": false; }; "saveColumns": { "alias": "saveColumns"; "required": false; }; "source": { "alias": "source"; "required": false; }; "filterable": { "alias": "filterable"; "required": false; }; "filterWhenTyping": { "alias": "filterWhenTyping"; "required": false; }; "treeGrid": { "alias": "treeGrid"; "required": false; }; "uniqueId": { "alias": "uniqueId"; "required": false; }; "rowReorder": { "alias": "rowReorder"; "required": false; }; "showDirty": { "alias": "showDirty"; "required": false; }; "resizeMode": { "alias": "resizeMode"; "required": false; }; "headerBackgroundColor": { "alias": "headerBackgroundColor"; "required": false; }; "headerMenuId": { "alias": "headerMenuId"; "required": false; }; "headerMenuSelected": { "alias": "headerMenuSelected"; "required": false; }; "headerMenuBeforeOpen": { "alias": "headerMenuBeforeOpen"; "required": false; }; "disableRowDeactivation": { "alias": "disableRowDeactivation"; "required": false; }; "disableRowDeselection": { "alias": "disableRowDeselection"; "required": false; }; "userObject": { "alias": "userObject"; "required": false; }; "groupable": { "alias": "groupable"; "required": false; }; "data": { "alias": "data"; "required": false; }; "columns": { "alias": "columns"; "required": false; }; "summaryRowColumns": { "alias": "summaryRowColumns"; "required": false; }; "spacerColumn": { "alias": "spacerColumn"; "required": false; }; "sizeColumnsEqually": { "alias": "sizeColumnsEqually"; "required": false; }; "expandableRow": { "alias": "expandableRow"; "required": false; }; "redrawOnResize": { "alias": "redrawOnResize"; "required": false; }; "exportConvertNegative": { "alias": "exportConvertNegative"; "required": false; }; "stickyHeader": { "alias": "stickyHeader"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; "columnSizing": { "alias": "columnSizing"; "required": false; }; "stretchColumn": { "alias": "stretchColumn"; "required": false; }; "stretchColumnOnChange": { "alias": "stretchColumnOnChange"; "required": false; }; "showPageSizeSelector": { "alias": "showPageSizeSelector"; "required": false; }; "hidePagerOnOnePage": { "alias": "hidePagerOnOnePage"; "required": false; }; "columnGroup": { "alias": "columnGroup"; "required": false; }; "emptyMessage": { "alias": "emptyMessage"; "required": false; }; "enableTooltips": { "alias": "enableTooltips"; "required": false; }; "selectChildren": { "alias": "selectChildren"; "required": false; }; "allowChildExpandOnMatch": { "alias": "allowChildExpandOnMatch"; "required": false; }; "sohoDatagrid": { "alias": "soho-datagrid"; "required": false; }; "onBeforeSelect": { "alias": "onBeforeSelect"; "required": false; }; "allowSelectAcrossPages": { "alias": "allowSelectAcrossPages"; "required": false; }; "selectAllCurrentPage": { "alias": "selectAllCurrentPage"; "required": false; }; "columnIds": { "alias": "columnIds"; "required": false; }; "showNewRowIndicator": { "alias": "showNewRowIndicator"; "required": false; }; "onExpandChildren": { "alias": "onExpandChildren"; "required": false; }; "onCollapseChildren": { "alias": "onCollapseChildren"; "required": false; }; "onPostRenderCell": { "alias": "onPostRenderCell"; "required": false; }; "onDestroyCell": { "alias": "onDestroyCell"; "required": false; }; "onEditCell": { "alias": "onEditCell"; "required": false; }; "onKeyDown": { "alias": "onKeyDown"; "required": false; }; "onExpandRow": { "alias": "onExpandRow"; "required": false; }; "fallbackImage": { "alias": "fallbackImage"; "required": false; }; "fallbackTooltip": { "alias": "fallbackTooltip"; "required": false; }; }, { "selected": "selected"; "cellchange": "cellchange"; "rowRemove": "rowRemove"; "rowAdd": "rowAdd"; "filtered": "filtered"; "expandrow": "expandrow"; "keydown": "keydown"; "exiteditmode": "exiteditmode"; "beforeentereditmode": "beforeentereditmode"; "entereditmode": "entereditmode"; "collapserow": "collapserow"; "sorted": "sorted"; "nextPage": "nextPage"; "previousPage": "previousPage"; "firstPage": "firstPage"; "lastPage": "lastPage"; "pageSizeChange": "pageSizeChange"; "beforePaging": "beforePaging"; "afterPaging": "afterPaging"; "beforeRowActivated": "beforeRowActivated"; "rowActivated": "rowActivated"; "rowDeactivated": "rowDeactivated"; "rowClicked": "rowClicked"; "rowDoubleClicked": "rowDoubleClicked"; "contextMenu": "contextMenu"; "rowReordered": "rowReordered"; "openFilterRow": "openFilterRow"; "closeFilterRow": "closeFilterRow"; "settingsChanged": "settingsChanged"; "rendered": "rendered"; "afterRender": "afterRender"; "verticalScroll": "verticalScroll"; "filteroperatorchanged": "filteroperatorchanged"; }, never, ["*"], false, never>;
}
/**
 * Details of the 'expandrow' and 'collapserow' events.
 */
export interface SohoDataGridToggleRowEvent extends SohoDataGridRowExpandEvent {
    grid: SohoDataGridComponent;
    args?: any;
}
/**
 * Details of the 'keydown' event
 */
export interface SohoDataGridKeyDownEvent {
    e: JQuery.Event;
    args?: SohoDataGridKeyDownArgs;
    response?: Function;
}

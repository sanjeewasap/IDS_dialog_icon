/// <reference types="ids-enterprise-typings" />
/// <reference types="ids-enterprise-typings" />
import { AfterViewInit, ElementRef, NgZone, OnDestroy, AfterViewChecked, ChangeDetectorRef } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoButtonsetComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private element;
    private ref;
    private ngZone;
    /** Reference to the jQuery control. */
    private jQueryElement?;
    /** Reference to the Soho buttonset api. */
    private buttonset?;
    /** Settings (options) */
    private settings;
    /** Flag to force an update of the control after the view is created. */
    private runUpdatedOnCheck?;
    /**
     * Constructor.
     *
     * @param element - the element matching the component's selector.
     * @param ref - change detector reference for the component.
     * @param ngZone - angular zone.
     */
    constructor(element: ElementRef, ref: ChangeDetectorRef, ngZone: NgZone);
    /**
     * The list of buttons definitions.
     *
     * @params buttons - list of modal button definitions to use.
     */
    set buttons(buttons: SohoButtonOptions[] | undefined);
    get buttons(): SohoButtonOptions[] | undefined;
    /**
     * Detect existing buttons in the markup rather than generating
     * new button markup.
     */
    set detectHTMLButtons(value: boolean | undefined);
    get detectHTMLButtons(): boolean | undefined;
    /**
     * Styles to add to any generated button markup.
     */
    set style(style: string | undefined);
    get style(): string | undefined;
    get buttonAPIs(): SohoButtonStatic[];
    /**
     * Disable all the buttons on the buttonset.
     *
     * @param val whether or not the Buttonset is disabled.
     */
    set disabled(val: boolean);
    /**
     * Adds a new button to the Buttonset.
     *
     * @param button button definition.
     * @param [doAddDOM=false] if true, appends the new element to the Buttonset container after creation/update.
     */
    add(button: SohoButtonOptions, doAddDOM?: boolean): void;
    /**
     * Removes a button from the buttonset, based on the API, HTML Element or element id.
     *
     * @param buttonAPI a button, an html element, or button id.
     * @param [doRemoveDOM=false] if true, removes the button's HTML from the page.
     */
    remove(buttonAPI?: SohoButtonStatic | HTMLButtonElement | string, doRemoveDOM?: boolean): void;
    /**
     * Removes ALL buttons from the buttonset
     *
     * @param [doRemoveDOM=false] if true, removes the button's HTML from the page.
     */
    removeAll(doRemoveDOM?: boolean): void;
    /**
     * Returns a ButtonSet API in a specified place in the buttons array.
     *
     * @param idx index to target
     * @returns the Button API at the given index
     */
    at(idx: number): SohoButtonStatic;
    /**
     * Provides a JSON-compatible data representation of this button component for use with
     * higher-level components.
     *
     * @param addContextElement if true, adds a reference to this button element to the return data (NOT JSON-compatible).
     * @returns JSON-compatible representation of this button's configuration.
     */
    toData(addContextElement: boolean): string;
    /**
     * Update the component with new settings.
     *
     * @param settings The settings you would like to modify.
     * @returns This component's API.
     */
    updated(settings: SohoButtonsetOptions): SohoButtonsetStatic;
    /**
     * Teardown and remove any added markup and events.
     */
    destroy(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    /**
     * Destructor.
     */
    ngOnDestroy(): void;
    /**
     * Marks the components as requiring a rebuild after the next update.
     */
    private markForRefresh;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoButtonsetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoButtonsetComponent, "div[soho-buttonset]", never, { "buttons": { "alias": "buttons"; "required": false; }; "detectHTMLButtons": { "alias": "detectHTMLButtons"; "required": false; }; "style": { "alias": "style"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; }, {}, never, ["*"], false, never>;
}

import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, NgZone, OnDestroy } from '@angular/core';
import * as i0 from "@angular/core";
export declare class SohoStandalonePagerComponent implements AfterViewInit, AfterViewChecked, OnDestroy {
    private elementRef;
    private ngZone;
    set dataset(dataset: any[]);
    set pageSize(pageSize: number);
    set pageSizes(pageSizes: number[]);
    set showFirstButton(showFirstButton: boolean);
    set showLastButton(showLastButton: boolean);
    set showNextButton(showNextButton: boolean);
    set showPreviousButton(showPreviousButton: boolean);
    set showPageSizeSelector(showPageSizeSelector: boolean);
    set showPageSelectorInput(showPageSelectorInput: boolean);
    set enableFirstButton(enableFirstButton: boolean);
    set enableLastButton(enableLastButton: boolean);
    set enablePreviousButton(enablePreviousButton: boolean);
    set enableNextButton(enableNextButton: boolean);
    set previousPageTooltip(previousPageTooltip: string);
    set firstPageTooltip(firstPageTooltip: string);
    set nextPageTooltip(nextPageTooltip: string);
    set lastPageTooltip(lastPageTooltip: string);
    set attachPageSizeMenuToBody(attachPageSizeMenuToBody: boolean);
    set smallPageSizeSelector(smallPageSizeSelector: boolean);
    set pageSizeMenuSettings(options: object);
    set attributes(attributes: object);
    firstPage: EventEmitter<Object>;
    lastPage: EventEmitter<Object>;
    previousPage: EventEmitter<Object>;
    nextPage: EventEmitter<Object>;
    pageSizeChange: EventEmitter<Object>;
    page: EventEmitter<Object>;
    private jQueryElement?;
    private pager?;
    private options;
    private updateRequired;
    constructor(elementRef: ElementRef, ngZone: NgZone);
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    /** Tear Down */
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<SohoStandalonePagerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<SohoStandalonePagerComponent, "div[soho-standalone-pager]", never, { "dataset": { "alias": "dataset"; "required": false; }; "pageSize": { "alias": "pageSize"; "required": false; }; "pageSizes": { "alias": "pageSizes"; "required": false; }; "showFirstButton": { "alias": "showFirstButton"; "required": false; }; "showLastButton": { "alias": "showLastButton"; "required": false; }; "showNextButton": { "alias": "showNextButton"; "required": false; }; "showPreviousButton": { "alias": "showPreviousButton"; "required": false; }; "showPageSizeSelector": { "alias": "showPageSizeSelector"; "required": false; }; "showPageSelectorInput": { "alias": "showPageSelectorInput"; "required": false; }; "enableFirstButton": { "alias": "enableFirstButton"; "required": false; }; "enableLastButton": { "alias": "enableLastButton"; "required": false; }; "enablePreviousButton": { "alias": "enablePreviousButton"; "required": false; }; "enableNextButton": { "alias": "enableNextButton"; "required": false; }; "previousPageTooltip": { "alias": "previousPageTooltip"; "required": false; }; "firstPageTooltip": { "alias": "firstPageTooltip"; "required": false; }; "nextPageTooltip": { "alias": "nextPageTooltip"; "required": false; }; "lastPageTooltip": { "alias": "lastPageTooltip"; "required": false; }; "attachPageSizeMenuToBody": { "alias": "attachPageSizeMenuToBody"; "required": false; }; "smallPageSizeSelector": { "alias": "smallPageSizeSelector"; "required": false; }; "pageSizeMenuSettings": { "alias": "pageSizeMenuSettings"; "required": false; }; "attributes": { "alias": "attributes"; "required": false; }; }, { "firstPage": "firstPage"; "lastPage": "lastPage"; "previousPage": "previousPage"; "nextPage": "nextPage"; "pageSizeChange": "pageSizeChange"; "page": "page"; }, never, never, false, never>;
}

import{a as l}from"./ids-chunk-AKCO43TX.js";import{a as c,b as d}from"./ids-chunk-XE4WFW5M.js";import{a as p}from"./ids-chunk-GFV2Z7F5.js";import{a as e}from"./ids-chunk-EQJWBFQ2.js";import{a as n}from"./ids-chunk-U7OOVFXE.js";var h=`
@media (min-width: 360px) {
  :host(.last) {
    flex: 0;
  }
}
@media (min-width: 840px) {
  :host(.last) {
    flex: 1;
  }
}

:host {
  display: flex;
  flex: 1;
  position: relative;
}
:host ::slotted(ids-text) {
  color: var(--ids-process-indicator-color-text);
}
@media (min-width: 360px) {
  :host .label {
    display: none;
  }
  :host .details {
    display: none;
  }
  :host .step {
    margin-top: var(--ids-process-indicator-step-margin-top);
  }
}
@media (min-width: 840px) {
  :host .details {
    display: unset;
  }
  :host .label {
    display: unset;
  }
  :host .step {
    margin-top: unset;
  }
}

::slotted(*) {
  display: block;
  margin: var(--ids-process-indicator-margin);
}

.ids-process-indicator-step ids-text::part(text) {
  color: var(--ids-process-indicator-color-text);
  margin: var(--ids-process-indicator-text-margin);
}
.ids-process-indicator-step ids-text.label {
  margin: var(--ids-process-indicator-margin);
  white-space: nowrap;
}
.ids-process-indicator-step .line {
  position: absolute;
  transform: var(--ids-process-indicator-line-transform);
  height: var(--ids-process-indicator-font-line-height);
  width: 100%;
  background-color: var(--ids-process-indicator-line-color-background);
}
.ids-process-indicator-step .step {
  display: flex;
  transform: var(--ids-process-indicator-step-transform);
  height: var(--ids-process-indicator-step-height);
  width: var(--ids-process-indicator-step-width);
  border-radius: var(--ids-process-indicator-border-radius-step);
  background-color: var(--ids-process-indicator-color-background);
  border: 2px solid var(--ids-process-indicator-color);
}

:host([status=cancelled]) .step {
  background-color: var(--ids-process-indicator-canceled-step-color-background);
  width: 18px;
  height: 18px;
  border: 0;
  justify-content: center;
}
:host([status=cancelled]) .step ids-icon {
  display: flex;
  justify-content: center;
  color: var(--ids-process-indicator-canceled-step-color-icon);
}

:host([status=done]) .step {
  border: var(--ids-process-indicator-border-done);
  background-color: var(--ids-process-indicator-color-primary);
}

:host([status=started]) .step {
  border: var(--ids-process-indicator-border-started);
  background-color: var(--ids-process-indicator-color-background);
}`;var u=["cancelled","started","done"],a="empty label",m=l(p),r=class extends m{constructor(){super()}connectedCallback(){super.connectedCallback(),requestAnimationFrame(()=>{let t=this.parentElement;if(t.tagName==="IDS-PROCESS-INDICATOR"){let s=t.querySelectorAll("ids-process-indicator-step"),i=s.length,o=this.container?.querySelector(".line");s[i-1]===this?(this.classList.add("last"),o?.setAttribute("hidden","")):(this.status==="started"||this.status==="done")&&o?.style.setProperty("background-color","var(--ids-process-indicator-color-primary)")}this.#s()})}static get attributes(){return[...super.attributes,e.LABEL,e.STATUS]}template(){return`
      <div class="ids-process-indicator-step">
        <div class="line"></div>
        <ids-text part="label" hidden class="label">
          ${this.label}
        </ids-text>
        <span class="step">
          ${this.#i(this.status)}
        </span>
        <div class="details">
          <slot name="detail"></slot>
        </div>
      </div>
    `}#t(t,s){s&&this.setAttribute(t,s)}#r(t){t.style.setProperty("visibility","hidden")}#o(t){t.style.removeProperty("visibility")}#s(){let t=this.#e();t&&(this.label===a?this.#r(t):this.#o(t))}#e(){return this.container?.querySelector(".label")}#i(t){return t==="cancelled"?'<ids-icon icon="close" size="xsmall"></ids-icon>':""}set label(t){let s=t||a,i=this.#e();this.#t(e.LABEL,s),i&&(i.innerHTML=s),this.#s()}get label(){return this.getAttribute(e.LABEL)||(a??"")}set status(t){let s=t.toLowerCase();u.includes(s)&&(this.#t(e.STATUS,s),this.container?.querySelectorAll("ids-icon")?.forEach(o=>o.remove()),this.#i(s)&&this.container?.querySelector(".step")?.insertAdjacentHTML("beforeend",'<ids-icon icon="close" size="xsmall"></ids-icon>'))}get status(){let t=this.getAttribute(e.STATUS);return t&&u.includes(t)?t:""}};r=n([c("ids-process-indicator-step"),d(h)],r);export{r as a};

import{a as u,c as o}from"./ids-chunk-T6ZG7KNF.js";import{c as n,d}from"./ids-chunk-LCUXCSNZ.js";import{a,b as r}from"./ids-chunk-EQJWBFQ2.js";var h=b=>class extends b{constructor(...e){super(...e),this.state||(this.state={}),this.state.label=""}connectedCallback(){super.connectedCallback?.(),this.state.labelState=null,this.hasAttribute(a.LABEL_STATE)&&(this.labelState=this.getAttribute(a.LABEL_STATE))}static get attributes(){return[...b.attributes,...u]}set label(e){let t=n(e),s=this.label;t!==s&&(this.state&&(this.state.label=t),t?this.setAttribute(a.LABEL,`${t}`):this.removeAttribute(a.LABEL),this.setLabelText(t))}get label(){return this.state?.label||""}setLabelText(e=this.state?.label,t="label"){let s=n(e),l=this.shadowRoot?.querySelector(t);if(l){let i=l.querySelector("ids-text");this.labelState?(i&&(i.innerHTML=""),l.classList.add("empty")):(i&&(i.innerHTML=s||""),l.classList[s?"remove":"add"]("empty"))}}set labelRequired(e){let t=o(e);e!==null?this.setAttribute(a.LABEL_REQUIRED,t.toString()):this.removeAttribute(a.LABEL_REQUIRED),this.labelEl?.classList[t?"remove":"add"]("no-required-indicator"),this.textInput&&(this.textInput.labelRequired=this.labelRequired)}get labelRequired(){return o(this.getAttribute(a.LABEL_REQUIRED))}labelStates=["hidden","collapsed"];get labelState(){return this.state?.labelState||null}set labelState(e){let t=null;typeof e=="string"&&(t=d(e,""));let s=this.state.labelState;s!==t&&(t!==null&&this.labelStates.includes(t)?this.setAttribute(a.LABEL_STATE,`${t}`):(this.removeAttribute(a.LABEL_STATE),t=null),this.state.labelState=t,this.#t(s,t))}#t(e,t){if(!this.container)return;let s=this.container.classList;e&&s.remove(`label-state-${e}`),t&&s.add(`label-state-${t}`),this.#e(t),typeof this.onLabelStateChange=="function"&&this.onLabelStateChange(t)}#e(e=null){e?(this.#s(),this.input?.setAttribute(r.ARIA_LABEL,this.label)):(this.#a(),this.input?.removeAttribute(r.ARIA_LABEL))}#s(){this.setLabelText?.("")}#a(){let e=this.shadowRoot?.querySelector("label"),t=this;!e&&!t.labelEl?t.fieldContainer&&t.fieldContainer?.insertAdjacentHTML("beforebegin",`<label for="${this.id}-input" class="ids-label-text">
          <ids-text part="label" label="true" color-unset>${this.label}</ids-text>
        </label>`):this.setLabelText?.(this.label)}},I=h;export{I as a};

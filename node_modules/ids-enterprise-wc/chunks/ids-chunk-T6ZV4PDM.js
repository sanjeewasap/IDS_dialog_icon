var a=s=>class extends s{hotkeys=null;pressedKeys=null;keyDownHandler;keyUpHandler;constructor(...e){super(...e),this.initKeyboardHandlers()}static get attributes(){return[...s.attributes]}disconnectedCallback(){super.disconnectedCallback?.(),this.detachAllListeners(),this.hotkeys=null,this.pressedKeys=null}initKeyboardHandlers(){this.hotkeys=new Map,this.pressedKeys=new Map,this.keyDownHandler=e=>{this.press(e.key),this.dispatchHotkeys(e)},this.onEvent("keydown.keyboard",this,this.keyDownHandler),this.keyUpHandler=e=>{this.unpress(e.key)},this.onEvent("keyup.keyboard",this,this.keyUpHandler)}press(e){return this.pressedKeys?.set(`${e}`,!0)}listen(e,n,t){let r=Array.isArray(e)?e:[e];for(let i of r)this.hotkeys?.set(`${i}`,t)}unlisten(e){return this.hotkeys?.delete(`${e}`)}unpress(e){return this.pressedKeys?.delete(`${e}`)}dispatchHotkeys(e){this.hotkeys?.forEach((n,t)=>{t.split(",").indexOf(e.key)>-1&&n(e)})}detachAllListeners(){this.keyDownHandler&&this.offEvent&&(this.offEvent("keydown.keyboard",this,this.keyDownHandler),delete this.keyDownHandler),this.keyUpHandler&&this.offEvent&&(this.offEvent("keyup.keyboard",this,this.keyUpHandler),delete this.keyUpHandler)}},o=a;export{o as a};

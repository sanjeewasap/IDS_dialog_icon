import{a as x}from"./ids-chunk-DF3OTTVT.js";import{a as m}from"./ids-chunk-I4KVLUTU.js";import{a as p}from"./ids-chunk-SEZJIM5Z.js";import{a as u}from"./ids-chunk-TZI4AWYL.js";import{a as b}from"./ids-chunk-N7RNTKMO.js";import{a as h}from"./ids-chunk-AKCO43TX.js";import{a as l,b as n}from"./ids-chunk-XE4WFW5M.js";import{a as k}from"./ids-chunk-GFV2Z7F5.js";import{e as c}from"./ids-chunk-QPDOZZIG.js";import{a as e}from"./ids-chunk-EQJWBFQ2.js";import{a as d}from"./ids-chunk-U7OOVFXE.js";var v=`
@charset "UTF-8";
/**
 * Checkbox Mixins.
 */
@keyframes check {
  0% {
    height: 0;
    left: 0;
    top: 8px;
    width: 0;
  }
  50% {
    height: 0;
    left: 0;
    top: 8px;
    width: 4px;
  }
  100% {
    height: 10px;
    left: 4px;
    top: 0;
    width: 4px;
  }
}
@keyframes checkindeterminate {
  0% {
    width: 0;
  }
  100% {
    width: 10px;
  }
}
.icon-dirty {
  position: absolute;
  color: var(--ids-color-caution-30);
  top: 1px;
}
.icon-dirty[dir=rtl] {
  transform: rotate(90deg);
  top: 0;
}

.ids-color-picker .icon-dirty {
  margin-inline-start: 35px;
}

.ids-color-picker.compact .icon-dirty {
  margin-inline-start: 27px;
}

.ids-radio-group .icon-dirty {
  margin-inline-start: -1px;
  margin-block-start: 9px;
  top: auto;
  z-index: 1;
}

.ids-checkbox .icon-dirty {
  margin-inline-start: -25px;
}
.ids-checkbox .icon-dirty[dir=rtl] {
  margin-inline-start: -20px;
  transform: none;
  top: -1px;
}
.ids-checkbox.hitbox .icon-dirty {
  margin-inline-start: -30px;
}
.ids-checkbox.hitbox .icon-dirty[dir=rtl] {
  margin-inline-start: -26px;
}

.ids-textarea .icon-dirty {
  top: 0;
  margin-inline-start: 1px;
}
.ids-textarea .icon-dirty[dir=rtl] {
  top: 1px;
}

.validation-message {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display: flex;
  font-family: var(--ids-font-family-default);
  margin-top: var(--ids-space-30);
}
.validation-message.has-custom-icon {
  color: var(--ids-icon-color-default);
}
.validation-message.disabled {
  color: var(--ids-input-color-text-disabled);
}
.validation-message .ids-icon {
  margin-inline-end: var(--ids-space-30);
}
.validation-message.alert {
  color: var(--ids-color-caution-default);
}
.validation-message.alert.disabled {
  color: var(--ids-color-caution-30);
}
.validation-message.warning {
  color: var(--ids-color-warning-default);
}
.validation-message.warning.disabled {
  color: var(--ids-color-warning-30);
}
.validation-message.error {
  color: var(--ids-color-error-default);
}
.validation-message.error.disabled {
  color: var(--ids-color-error-30);
}
.validation-message.info {
  color: var(--ids-color-info-default);
}
.validation-message.info.disabled {
  color: var(--ids-color-info-30);
}
.validation-message.success {
  color: var(--ids-color-success-default);
}
.validation-message.success.disabled {
  color: var(--ids-color-success-30);
}

:host(.justify-center) .ids-checkbox .checkmark,
:host(.justify-center) .ids-checkbox:not([color]) input[type=checkbox] ~ .checkmark {
  top: calc(50% - 8px);
}

:host([no-margin]) .ids-checkbox {
  margin: var(--ids-space-none);
}

.ids-checkbox {
  margin-bottom: var(--ids-space-40);
}
.ids-checkbox label {
  cursor: var(--ids-cursor-pointer);
  user-select: none;
  padding-inline-start: 24px;
  position: relative;
  display: inline-block;
}
.ids-checkbox label.empty::before {
  content: "\xA0";
}
.ids-checkbox label.required .label-checkbox::after {
  position: absolute;
  font-family: var(--ids-font-family-default);
  margin-inline-start: var(--ids-space-20);
  margin-inline-end: var(--ids-space-20);
  font-size: var(--ids-font-size-50);
  color: var(--ids-input-required-indicator-color-text-default);
  content: "*";
  right: -13px;
  top: -2px;
}
.ids-checkbox label.no-required-indicator .label-checkbox::after, .ids-checkbox label.empty .label-checkbox::after {
  content: "";
}
.ids-checkbox.disabled label {
  cursor: var(--ids-cursor-default);
}
.ids-checkbox.disabled label.required .label-checkbox::after {
  color: var(--ids-input-required-indicator-color-text-disabled);
}
.ids-checkbox.hitbox {
  padding-top: var(--ids-space-50);
  padding-bottom: var(--ids-space-50);
}
.ids-checkbox.hitbox label {
  padding-inline-start: 42px;
}
.ids-checkbox.hitbox label span.checkmark {
  margin-inline-start: 14px;
}
.ids-checkbox.hitbox .validation-message {
  margin-inline-start: 14px;
}
.ids-checkbox.horizontal {
  margin-inline-end: var(--ids-space-50);
  display: inline-block;
}
.ids-checkbox input[type=checkbox] {
  position: absolute;
  cursor: var(--ids-cursor-pointer);
  opacity: 0;
  height: 0;
  width: 0;
}
.ids-checkbox input[type=checkbox] ~ .checkmark {
  position: absolute;
  border: var(--ids-checkbox-border);
  border-radius: var(--ids-checkbox-border-radius);
  height: 14px;
  width: 14px;
  left: 0;
  top: 2px;
}
.ids-checkbox input[type=checkbox].error ~ .checkmark {
  border-color: var(--ids-checkbox-color-border-error);
}
.ids-checkbox input[type=checkbox]:checked ~ .checkmark {
  background-color: var(--ids-checkbox-color-background-selected);
  border-color: var(--ids-checkbox-color-border-selected);
}
.ids-checkbox input[type=checkbox]:checked ~ .checkmark::after {
  position: absolute;
  display: block;
  border: var(--ids-font-size-20) solid var(--ids-checkbox-color-border-selected-after);
  border-width: var(--ids-checkbox-border-width-selected-after);
  animation: check 0.15s;
  transform: rotate(45deg);
  content: "";
  height: 10px;
  left: 4px;
  top: 0;
  width: 4px;
}
.ids-checkbox input[type=checkbox].indeterminate ~ .checkmark {
  background-color: var(--ids-checkbox-color-background-indeterminate);
  border-color: var(--ids-checkbox-color-border-indeterminate);
}
.ids-checkbox input[type=checkbox].indeterminate ~ .checkmark::after {
  position: absolute;
  animation: checkindeterminate 0.15s;
  display: block;
  border: 1px solid var(--ids-checkbox-color-border-indeterminate-after);
  border-width: var(--ids-checkbox-border-width-indeterminate);
  content: "";
  height: 6px;
  left: 2px;
  top: 0;
  transform: none;
  width: 10px;
}
.ids-checkbox input[type=checkbox]:focus ~ .checkmark {
  border-color: var(--ids-checkbox-color-border-focus);
  box-shadow: var(--ids-checkbox-focus-box-shadow);
}
.ids-checkbox input[type=checkbox]:disabled ~ .checkmark {
  background-color: var(--ids-checkbox-color-background-disabled);
  border-color: var(--ids-checkbox-color-border-disabled);
  cursor: var(--ids-cursor-default);
}
.ids-checkbox input[type=checkbox]:disabled ~ .label-checkbox {
  cursor: var(--ids-cursor-default);
  color: var(--ids-checkbox-color-text-disabled);
}
.ids-checkbox input[type=checkbox]:disabled.error ~ .checkmark {
  border-color: var(--ids-color-error-30);
}
.ids-checkbox input[type=checkbox]:disabled:checked ~ .checkmark {
  background-color: var(--ids-checkbox-color-background-selected-disabled);
  border-color: var(--ids-checkbox-color-border-selected-disabled);
}
.ids-checkbox.no-animation input[type=checkbox]:checked ~ .checkmark::after {
  animation: none;
}
.ids-checkbox[color=emerald] input[type=checkbox] ~ .checkmark {
  background-color: var(--ids-color-emerald-70);
  border-color: var(--ids-color-emerald-70);
}
.ids-checkbox[color=emerald] input[type=checkbox]:disabled ~ .checkmark {
  background-color: var(--ids-checkbox-color-background-disabled);
  border-color: var(--ids-checkbox-color-border-disabled);
  cursor: var(--ids-cursor-default);
}
.ids-checkbox[color=emerald] input[type=checkbox]:disabled:checked ~ .checkmark {
  background-color: var(--ids-checkbox-color-background-selected-disabled);
  border-color: var(--ids-checkbox-color-border-selected-disabled);
}
.ids-checkbox[color=emerald] input[type=checkbox]:focus ~ .checkmark {
  border-color: var(--ids-color-emerald-70);
}
.ids-checkbox[color=amethyst] input[type=checkbox] ~ .checkmark {
  background-color: var(--ids-color-amethyst-70);
  border-color: var(--ids-color-amethyst-70);
}
.ids-checkbox[color=amethyst] input[type=checkbox]:disabled ~ .checkmark {
  background-color: var(--ids-checkbox-color-background-disabled);
  border-color: var(--ids-checkbox-color-border-disabled);
  cursor: var(--ids-cursor-default);
}
.ids-checkbox[color=amethyst] input[type=checkbox]:disabled:checked ~ .checkmark {
  background-color: var(--ids-checkbox-color-background-selected-disabled);
  border-color: var(--ids-checkbox-color-border-selected-disabled);
}
.ids-checkbox[color=amethyst] input[type=checkbox]:focus ~ .checkmark {
  border-color: var(--ids-color-amethyst-70);
}
.ids-checkbox[color=azure] input[type=checkbox] ~ .checkmark {
  background-color: var(--ids-color-azure-70);
  border-color: var(--ids-color-azure-70);
}
.ids-checkbox[color=azure] input[type=checkbox]:disabled ~ .checkmark {
  background-color: var(--ids-checkbox-color-background-disabled);
  border-color: var(--ids-checkbox-color-border-disabled);
  cursor: var(--ids-cursor-default);
}
.ids-checkbox[color=azure] input[type=checkbox]:disabled:checked ~ .checkmark {
  background-color: var(--ids-checkbox-color-background-selected-disabled);
  border-color: var(--ids-checkbox-color-border-selected-disabled);
}
.ids-checkbox[color=azure] input[type=checkbox]:focus ~ .checkmark {
  border-color: var(--ids-color-azure-70);
}
.ids-checkbox[color=amber] input[type=checkbox] ~ .checkmark {
  background-color: var(--ids-color-amber-70);
  border-color: var(--ids-color-amber-70);
}
.ids-checkbox[color=amber] input[type=checkbox]:disabled ~ .checkmark {
  background-color: var(--ids-checkbox-color-background-disabled);
  border-color: var(--ids-checkbox-color-border-disabled);
  cursor: var(--ids-cursor-default);
}
.ids-checkbox[color=amber] input[type=checkbox]:disabled:checked ~ .checkmark {
  background-color: var(--ids-checkbox-color-background-selected-disabled);
  border-color: var(--ids-checkbox-color-border-selected-disabled);
}
.ids-checkbox[color=amber] input[type=checkbox]:focus ~ .checkmark {
  border-color: var(--ids-color-amber-70);
}
.ids-checkbox[color=ruby] input[type=checkbox] ~ .checkmark {
  background-color: var(--ids-color-ruby-70);
  border-color: var(--ids-color-ruby-70);
}
.ids-checkbox[color=ruby] input[type=checkbox]:disabled ~ .checkmark {
  background-color: var(--ids-checkbox-color-background-disabled);
  border-color: var(--ids-checkbox-color-border-disabled);
  cursor: var(--ids-cursor-default);
}
.ids-checkbox[color=ruby] input[type=checkbox]:disabled:checked ~ .checkmark {
  background-color: var(--ids-checkbox-color-background-selected-disabled);
  border-color: var(--ids-checkbox-color-border-selected-disabled);
}
.ids-checkbox[color=ruby] input[type=checkbox]:focus ~ .checkmark {
  border-color: var(--ids-color-ruby-70);
}
.ids-checkbox .validation-message {
  margin-top: var(--ids-space-30);
  margin-inline-start: -1px;
}
.ids-checkbox.has-focus input[type=checkbox] ~ .checkmark {
  border-color: var(--ids-checkbox-focus-border-color);
  box-shadow: var(--ids-checkbox-focus-box-shadow);
}

:host-context(form) {
  margin-top: var(--ids-space-40);
  display: flex;
}

:host([dir=rtl]) input[type=checkbox] ~ .checkmark {
  left: initial;
  right: 0;
}
:host([dir=rtl]) label.required .label-checkbox::after {
  right: initial;
  left: -13px;
}

:host(.multiselect-checkbox) input[type=checkbox]:not(:checked):not(:disabled) ~ .checkmark {
  background-color: var(--ids-checkbox-color-background-multiselect);
}
:host(.multiselect-checkbox) .ids-checkbox label {
  padding-inline-start: var(--ids-space-60);
}`;var L=p(x(m(u(b(h(k)))))),i=class extends L{constructor(){super()}labelAudible;isFormComponent=!0;static get attributes(){return[...super.attributes,e.NO_ANIMATION,e.CHECKED,e.COLOR,e.DISABLED,e.HORIZONTAL,e.INDETERMINATE,e.VALUE]}#e=!1;connectedCallback(){super.connectedCallback(),this.#o(),this.dirtyTracker&&this.handleDirtyTracker()}template(){let r=this.color?` color="${this.color}"`:"",o=c(this.labelAudible)?' audible="true"':"",t=c(this.disabled)?" disabled":"",g=c(this.horizontal)?" horizontal":"",a=c(this.checked)?" checked":"",f=c(this.noAnimation)?" no-animation":"",y=` class="ids-checkbox${t}${g}${f}"`,s="checkbox";s+=c(this.indeterminate)?" indeterminate":"",s=` class="${s}"`;let E=!(c(this.labelRequired)||this.labelRequired===null),A=!this.label.length||this.labelState==="hidden"?" empty":"";return`
      <div${y}${r} part="root">
        <label class="ids-label-text${E?" no-required-indicator":""}${A}" part="label">
          <input part="input" type="checkbox"${s}${t}${a}>
          <span class="checkmark${a}" part="checkmark"></span>
          <ids-text${o} class="label-checkbox" part="label-checkbox">${this.label}</ids-text>
        </label>
      </div>
    `}attachCheckboxChangeEvent(){this.onEvent("change",this.input,r=>{this.indeterminate=!1,this.#e=!0,this.checked=!!this.input?.checked,this.triggerEvent(r.type,this,{detail:{elem:this,nativeEvent:r,value:this.value,checked:this.input?.checked},bubbles:!0})})}attachNativeEvents(){["focus","keydown","keypress","keyup","click","dbclick"].forEach(o=>{this.onEvent(o,this.input,t=>{this.triggerEvent(t.type,this,{detail:{elem:this,nativeEvent:t,value:this.value,checked:!!this.input?.checked}})})})}#o(){this.attachCheckboxChangeEvent(),this.attachNativeEvents()}get input(){return this.container?.querySelector('input[type="checkbox"]')}get labelEl(){return this.container?.querySelector("label")}set checked(r){let o=c(r),t=this.shadowRoot?.querySelector(".checkmark");this.checked===o&&this.input?.checked===o||(o?(this.setAttribute(e.CHECKED,String(o)),t?.classList.add(e.CHECKED)):(this.removeAttribute(e.CHECKED),t?.classList.remove(e.CHECKED)),this.input&&(this.input.checked=o),!this.#e&&this.input&&this.triggerEvent("change",this.input,{bubbles:!0}),this.#e=!1)}get checked(){return c(this.getAttribute(e.CHECKED))}set color(r){let o=this.shadowRoot?.querySelector(".ids-checkbox");r?(this.setAttribute(e.COLOR,r.toString()),o?.setAttribute(e.COLOR,r.toString())):(this.removeAttribute(e.COLOR),o?.removeAttribute(e.COLOR))}get color(){return this.getAttribute(e.COLOR)}set disabled(r){let o=this.shadowRoot?.querySelector(".ids-checkbox"),t=c(r);t?(this.setAttribute(e.DISABLED,t.toString()),this.input?.setAttribute(e.DISABLED,t.toString()),o?.classList.add(e.DISABLED),this.labelEl?.querySelector(".label-checkbox")?.setAttribute(e.DISABLED,t.toString())):(this.removeAttribute(e.DISABLED),this.input?.removeAttribute(e.DISABLED),o?.classList.remove(e.DISABLED),this.labelEl?.querySelector(".label-checkbox")?.removeAttribute(e.DISABLED))}get disabled(){return this.getAttribute(e.DISABLED)}set horizontal(r){let o=this.shadowRoot?.querySelector(".ids-checkbox"),t=c(r);t?(this.setAttribute(e.HORIZONTAL,t.toString()),o?.classList.add(e.HORIZONTAL)):(this.removeAttribute(e.HORIZONTAL),o?.classList.remove(e.HORIZONTAL))}get horizontal(){return this.getAttribute(e.HORIZONTAL)}set indeterminate(r){let o=c(r);o?this.setAttribute(e.INDETERMINATE,o.toString()):this.removeAttribute(e.INDETERMINATE),this.input&&(o?(this.input.classList.add(e.INDETERMINATE),this.input.indeterminate=!0):(this.input.classList.remove(e.INDETERMINATE),this.input.indeterminate=!1))}get indeterminate(){return this.getAttribute(e.INDETERMINATE)}set value(r){r?(this.setAttribute(e.VALUE,String(r)),this.input?.setAttribute(e.VALUE,String(r))):(this.removeAttribute(e.VALUE),this.input?.removeAttribute(e.VALUE))}get value(){return this.getAttribute(e.VALUE)}set noAnimation(r){let o=c(r);o?(this.setAttribute(e.NO_ANIMATION,String(o)),this.container?.classList.add("no-animation")):(this.removeAttribute(e.NO_ANIMATION),this.container?.classList.remove("no-animation"))}get noAnimation(){return c(this.getAttribute(e.NO_ANIMATION))||!1}focus(){this.input?.focus()}};i=d([l("ids-checkbox"),n(v)],i);export{i as a};

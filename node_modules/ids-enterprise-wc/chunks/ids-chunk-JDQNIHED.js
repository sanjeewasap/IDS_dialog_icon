import{a as w}from"./ids-chunk-OIS6KGMU.js";import{a as u}from"./ids-chunk-N7RNTKMO.js";import{a as m}from"./ids-chunk-T6ZV4PDM.js";import{a as h}from"./ids-chunk-AKCO43TX.js";import{a as l,b as c}from"./ids-chunk-XE4WFW5M.js";import{a as b}from"./ids-chunk-GFV2Z7F5.js";import{g as p}from"./ids-chunk-QPDOZZIG.js";import{a as r}from"./ids-chunk-EQJWBFQ2.js";import{a as o}from"./ids-chunk-U7OOVFXE.js";var v=`
.ids-swaplist {
  box-shadow: var(--ids-swaplist-shadow);
  display: flex;
  flex-direction: row;
}

.swap-buttons {
  margin-inline-start: auto;
}

ids-swappable-item {
  padding: var(--ids-swaplist-item-padding);
  padding-inline-start: var(--ids-swaplist-item-padding-inline-start);
  position: relative;
  margin-block-end: var(--ids-swaplist-item-margin-block-end);
}
ids-swappable-item.is-hidden {
  height: 0;
  padding: 0;
  border: none;
  overflow: hidden;
}

ids-swappable-item[over] {
  border: var(--ids-swaplist-item-over-border);
}

ids-button {
  position: relative;
  padding: var(--ids-swaplist-toolbar-button-padding);
  height: var(--ids-swaplist-button-height);
  width: var(--ids-swaplist-button-width);
}
ids-button::part(button) {
  padding: var(--ids-swaplist-toolbar-button-padding);
  align-items: center;
  display: flex;
  justify-content: center;
}
ids-button::part(button):hover {
  background-color: var(--ids-swaplist-button-color-background-hover);
}

ids-card {
  flex: 1;
}
ids-card::part(card) {
  margin-block-end: var(--ids-swaplist-card-margin-block-end);
}
ids-card::part(header) {
  border-block-end: var(--ids-swaplist-border);
}
ids-card::part(content) {
  height: var(--ids-swaplist-card-content-height-min);
}
ids-card.card::part(card) {
  border-radius: var(--ids-swaplist-card-border-radius);
  border-inline-start-width: var(--ids-swaplist-inline-start-border-width);
  box-shadow: var(--ids-swaplist-card-shadow);
}
ids-card.card:first-child::part(card) {
  border-inline-start-width: var(--ids-swaplist-first-child-inline-start-border-width);
  border-start-start-radius: var(--ids-swaplist-border-radius);
  border-end-start-radius: var(--ids-swaplist-border-radius);
}
ids-card.card:last-child::part(card) {
  border-start-end-radius: var(--ids-swaplist-border-radius);
  border-end-end-radius: var(--ids-swaplist-border-radius);
}`;var g=m(u(h(b))),f=2,d=class extends g{constructor(){super()}datasource=new w;defaultTemplate="";connectedCallback(){super.connectedCallback(),this.defaultTemplate=`${this.querySelector("template")?.innerHTML||""}`,this.attachEventHandlers()}static get attributes(){return[...super.attributes,r.COUNT]}set data(t){this.datasource&&(this.datasource.data=t||[],this.render())}get data(){return this?.datasource?.data||[]}#e(t){let e=t.parentElement.parentElement.parentElement,s=e.nextSibling.querySelector("ids-swappable");e.querySelectorAll("ids-swappable-item[selected]").forEach(n=>{s.appendChild(n),n.removeAttribute(r.SELECTED)})}#s(t){let e=t.parentElement.parentElement.parentElement,s=e.previousSibling.querySelector("ids-swappable");e.querySelectorAll("ids-swappable-item[selected]").forEach(n=>{s.appendChild(n),n.removeAttribute(r.SELECTED)})}get selectedItems(){return this.container?.querySelectorAll("ids-swappable-item[selected]")}set count(t){let e=parseInt(t);Number.isNaN(e)?this.setAttribute(r.COUNT,String(f)):this.setAttribute(r.COUNT,String(e))}get count(){let t=this.getAttribute(r.COUNT);return t?parseInt(t):f}buttonTemplate(t){let e=`
      <ids-button id="left-arrow-${t}" class="left-arrow">
        <span class="audible">Swap Item Left</span>
        <ids-icon icon="swap-list-left"></ids-icon>
      </ids-button>
    `,i=`
      <ids-button id="right-arrow-${t}" class="right-arrow">
        <span class="audible">Swap Item Left</span>
        <ids-icon icon="swap-list-right"></ids-icon>
      </ids-button>
    `,s="";return t>0&&t<this.count-1?s=e+i:t===0?s=i:t===this.count-1&&(s=e),s}itemTemplateFunc(){return e=>this.itemTemplate(e)}itemTemplate(t){return p(this.defaultTemplate,t)}listTemplate(){let t=Array(this.count).fill(0),e=t.length;return t.map((s,a)=>`
      <ids-card class="${e===a+1?`card card-${a} card-last`:`card card-${a}`}">
        <div slot="card-header">
          <ids-text font-size="20">List #${a}</ids-text>
          <div class="swap-buttons">
            ${this.buttonTemplate(a)}
          </div>
        </div>
        <div slot="card-content">
          <ids-swappable selection="multiple">
            ${this.data.length>0?this.data?.map(this.itemTemplateFunc()).join(""):""}
          </ids-swappable>
        </div>
      </ids-card>
    `.trim()).join("")}#t(t){t.target.classList.contains("left-arrow")?this.#s(t.target):t.target.classList.contains("right-arrow")&&this.#e(t.target)}attachEventHandlers(){this.offEvent("click",this.container,t=>this.#t(t)),this.onEvent("click",this.container,t=>this.#t(t)),this.offEvent("touchend",this.container,t=>this.#t(t)),this.onEvent("touchend",this.container,t=>this.#t(t)),this.listen("Enter",this.container,t=>this.#t(t))}render(){return super.render(!0),this.data?.length>0&&this.attachEventHandlers(),this}template(){return`
      <div class="ids-swaplist">
        ${this.listTemplate()}
      </div>
    `}};d=o([l("ids-swaplist"),c(v)],d);export{d as a};

import{a as p,b as h}from"./ids-chunk-3BGYNGOR.js";import{a as c}from"./ids-chunk-AKCO43TX.js";import{a,b as l}from"./ids-chunk-XE4WFW5M.js";import{a as d}from"./ids-chunk-GFV2Z7F5.js";import{e as r}from"./ids-chunk-QPDOZZIG.js";import{a as e}from"./ids-chunk-EQJWBFQ2.js";import{a as o}from"./ids-chunk-U7OOVFXE.js";var g=`
@charset "UTF-8";
/* Ids Loading Indicator */
:host(ids-loading-indicator:not([linear]):not([sticky])) {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
}

:host(ids-loading-indicator:not([linear]):not([sticky]):not([inline])) {
  width: 50px;
  height: 50px;
}

:host(ids-loading-indicator[inline]:not([linear]):not([sticky])) {
  width: 11px;
  height: 11px;
}

:host(ids-loading-indicator[linear]),
:host(ids-loading-indicator[sticky]) {
  position: relative;
  display: flex;
  justify-content: center;
  width: 100%;
}

:host(ids-loading-indicator[sticky]) {
  position: absolute;
  align-items: center;
  top: 0;
  left: 0;
}

:host(ids-loading-indicator[linear]) {
  align-items: flex-end;
  height: 48px;
}

.progress {
  transition: stroke-dashoffset 0.275s ease-in, transform 0.275s ease-in;
  z-index: 1;
}

.progress-percentage {
  display: flex;
  align-items: center;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  color: var(--ids-loading-indicator-color-text);
}

.progress-percentage.linear {
  top: 50%;
}

.percentage {
  position: relative;
  top: -4px;
  right: -2px;
}

svg.linear-indicator {
  display: flex;
  align-items: center;
  width: 100%;
  height: 6px;
  overflow: hidden;
}
svg.linear-indicator.sticky {
  height: 8px;
}
svg.linear-indicator .progress {
  fill: var(--ids-loading-indicator-progress-color);
  transform: scaleX(calc(var(--progress) * 1%));
}
svg.linear-indicator .circle {
  fill: var(--ids-loading-indicator-circle-color);
}

svg.circular-indicator {
  position: relative;
  overflow: visible;
  fill: transparent;
  transform-origin: 50% 50%;
  transform: rotateZ(-90deg);
  display: flex;
  align-items: center;
  justify-content: center;
}
svg.circular-indicator circle {
  transform-origin: 50% 50%;
}
svg.circular-indicator .circle {
  stroke: var(--ids-loading-indicator-circle-color);
}
svg.circular-indicator .progress {
  stroke-dasharray: 283;
  stroke: var(--ids-loading-indicator-progress-color);
}

svg.circular-indicator:not(.inline) {
  width: 50px;
  height: 50px;
}

svg.circular-indicator.inline {
  width: 11px;
  height: 11px;
}

.circular-indicator.determinate .progress {
  /*
   * circumference is 2\u03C0r(45) => 282.74, or 283
   */
  stroke-dashoffset: calc(283px - (var(--progress) * 2.83));
}

@keyframes indeterminate-spinner-progress-anim {
  0%, 15% {
    stroke-dashoffset: 272;
    transform: rotate(0);
  }
  60% {
    stroke-dashoffset: 80;
    transform: rotate(45deg);
  }
  65% {
    stroke-dashoffset: 80;
    transform: rotate(45deg);
  }
  100% {
    stroke-dashoffset: 272;
    transform: rotate(360deg);
  }
}
@keyframes indeterminate-spinner-anim {
  0% {
    transform: rotateZ(0deg);
  }
  100% {
    transform: rotateZ(360deg);
  }
}
svg.circular-indicator.indeterminate .progress {
  animation: 1.52s linear infinite both indeterminate-spinner-progress-anim;
}

svg.circular-indicator.indeterminate {
  animation: 2.4s linear infinite indeterminate-spinner-anim;
}

svg.linear-indicator.indeterminate .progress {
  animation: 2.8s linear infinite both indeterminate-linear-progress-anim;
}

@keyframes indeterminate-linear-progress-anim {
  0% {
    transform: scaleX(0%) translateX(0%);
  }
  3.125%, 53.125% {
    transform: scaleX(20%) translateX(0%);
  }
  6.25% {
    transform: scaleX(30%) translateX(20%);
  }
  12.5%, 62.5% {
    transform: scaleX(45%) translateX(60%);
  }
  25%, 75% {
    transform: scaleX(100%) translateX(100%);
  }
  25.0000001%, 50%, 75.0000001%, 100% {
    transform: scaleX(0%) translateX(0);
  }
}
:host([size=xs]:not([linear]):not([sticky]):not([inline])), :host([size=xs]:not([linear]):not([sticky]):not([inline]))::part(container) {
  width: 14px;
  height: 14px;
}
:host([size=xs]:not([linear]):not([sticky]):not([inline]))::part(circle) {
  stroke-width: 12;
}
:host([size=xs]:not([linear]):not([sticky]):not([inline]))::part(progress) {
  stroke-width: 21;
}

:host(.type-primary)::part(circle) {
  stroke: var(--ids-loading-indicator-primary-circle-stroke);
}
:host(.type-primary)::part(progress) {
  stroke: var(--ids-loading-indicator-primary-progress-color-border);
}

:host(.type-primary-destructive)::part(progress) {
  stroke: var(--ids-loading-indicator-primary-destructive-progress-color-border);
}
:host(.type-primary-destructive)::part(circle) {
  stroke: var(--ids-loading-indicator-primary-destructive-circle-stroke);
}

:host(.type-tertiary-destructive)::part(progress) {
  stroke: var(--ids-loading-indicator-destructive-progress-color-border);
}
:host(.type-tertiary-destructive)::part(circle) {
  stroke: var(--ids-loading-indicator-tertiary-destructive-circle-stroke);
}`;var m=c(d),s=class extends m{constructor(){super()}connectedCallback(){super.connectedCallback(),this.#e()}static get attributes(){return[e.LINEAR,e.PERCENTAGE_VISIBLE,e.PROGRESS,e.STICKY,e.TYPE]}template(){let t="circular";return this.hasAttribute(e.STICKY)&&(t="sticky"),this.hasAttribute(e.LINEAR)&&(t="linear"),h({progress:this.progress,percentageVisible:this.percentageVisible,inline:this.inline,type:t})}get inline(){return this.hasAttribute(e.INLINE)}set inline(t){let i=r(t);i&&!this.hasAttribute(e.INLINE)&&this.setAttribute(e.INLINE,""),!i&&this.hasAttribute(e.INLINE)&&this.removeAttribute(e.INLINE)}get progress(){let t=this.getAttribute(e.PROGRESS);return t!==null?parseInt(t):void 0}set progress(t){!Number.isNaN(Number.parseFloat(t))?this.setAttribute(e.PROGRESS,String(parseFloat(t))):this.removeAttribute(e.PROGRESS),this.#e()}#e(){this.progress!==void 0&&!Number.isNaN(this.progress)?this.shadowRoot?.querySelector("svg")?.style.setProperty("--progress",this.type==="circular"?`${this.progress}px`:this.progress):this.shadowRoot?.querySelector("svg")?.style.removeProperty("--progress"),this.updatePercentageVisible()}set sticky(t){this.#i(e.STICKY,r(t))}get sticky(){return this.hasAttribute(e.STICKY)}set percentageVisible(t){let i=r(t);i&&!this.hasAttribute(e.PERCENTAGE_VISIBLE)?this.setAttribute(e.PERCENTAGE_VISIBLE,""):!i&&this.hasAttribute(e.PERCENTAGE_VISIBLE)&&this.removeAttribute(e.PERCENTAGE_VISIBLE),this.updatePercentageVisible()}get percentageVisible(){return this.hasAttribute(e.PERCENTAGE_VISIBLE)}updatePercentageVisible(){let t=this.shadowRoot?.querySelector('[part="percentage-text"]');if(t&&t.remove(),this.percentageVisible&&this.type!=="sticky"){let i=document.createElement("template");i.innerHTML=p({type:this.type,progress:this.progress}),this.shadowRoot?.appendChild(i.content.cloneNode(!0))}}set linear(t){this.#i(e.LINEAR,r(t))}get linear(){return this.hasAttribute(e.LINEAR)}get type(){return this.#t||"circular"}#t;#i(t,i){let n=r(i);n&&(this.#t!==t&&(this.#t&&this.hasAttribute(this.#t)&&this.removeAttribute(this.#t),this.#t=t,this.render()),this.hasAttribute(t)||this.setAttribute(t,"")),n||(this.hasAttribute(t)&&this.removeAttribute(t),this.#t===t&&(this.#t=void 0))}};s=o([a("ids-loading-indicator"),l(g)],s);export{s as a};

import{a as c}from"./ids-chunk-N7RNTKMO.js";import{a as p}from"./ids-chunk-AKCO43TX.js";import{a as m,b as d}from"./ids-chunk-XE4WFW5M.js";import{a as b}from"./ids-chunk-GFV2Z7F5.js";import{a as o}from"./ids-chunk-EQJWBFQ2.js";import{a as u}from"./ids-chunk-U7OOVFXE.js";var f=`
/* Ids Text Css */
:host {
  display: block;
  width: 100%;
}

text {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  display: block;
  font-weight: var(--ids-font-weight-normal);
  margin: var(--ids-space-none);
  font-size: var(--ids-font-size-40);
  color: currentColor;
  font-family: var(--ids-font-family-default);
}

svg {
  stroke: var(--ids-tree-treemap-color-border);
}

.treemap-title {
  background-color: var(--ids-tree-treemap-title-color-background);
  padding: var(--ids-space-40);
  color: var(--ids-tree-treemap-title-color-text);
  text-align: center;
}`;var y=300,v=c(p(b)),s=class extends v{d=[];height=y;width=NaN;Rectangle={data:[],xBeginning:0,yBeginning:0,totalWidth:NaN,totalHeight:y};initialData=[];constructor(){super()}connectedCallback(){super.connectedCallback(),this.resizeTreemap()}static get attributes(){return[...super.attributes,o.DATA,o.TITLE]}set data(t){this.d=t,this.render(!0)}get data(){return this.d}onTitleChange(t){let e=this.shadowRoot?.querySelector('[part="title"]');e&&(e.innerHTML=t||"")}template(){return`
      <div class="treemap-container">
        <div class="treemap-title">
          ${this.templateTitle()}
        </div>
        ${this.templateSvg(this.data)}
      </div>
    `}templateSvg(t){let e="<svg>Sorry, your browser does not support inline SVG.</svg>";return t!==void 0&&(e=`
        <svg width='${this.width}' height='${this.height}' stroke-width=".5">
          ${t?.map(i=>this.templateGroups(i)).join("")}
        </svg>
      `),e}templateGroups(t){return`
      <g
        fill=${t?.data?.color||"#003876"}
        class="treemap-rect"
      >
        <rect
          x=${t.x}
          y=${t.y}
          width=${t.width}
          height=${t.height}
        >
        </rect>
        <text
          fill="white"
          x="${t.x+8*2}"
          y="${t.y+8*3}"
          stroke-width="0"
        >
          ${t?.data?.text||"Empty"}
        </text>
        <text
          fill="white"
          x="${t.x+8*2}"
          y="${t.y+8*6}"
          stroke-width="0"
        >
          ${t?.data?.label||"0%"}
        </text>
      </g>
    `}templateTitle(){return`
      <ids-text type="span" font-weight="semi-bold" part="title">
        ${typeof this.title=="string"?this.title:"Add Treemap Title"}
      </ids-text>`}#s=t=>Math.max(...t);#h=t=>Math.min(...t);#i=(t,e)=>t+e;#t=t=>Math.max(Math.round(t*100)/100,0);#o=t=>{let e=t.data,i=t.height;if(typeof i!="number"||i<=0)throw new Error("You need to specify the height of your treemap");if(!Array.isArray(e)||e.length===0||!e.every(a=>Object.prototype.hasOwnProperty.call(a,"value")&&typeof a.value=="number"&&a.value>=0))throw new Error("Your data must be in this format [{ value: 1 }, { value: 2 }], 'value' being a positive number")};#r=(t,e)=>{let i=t.reduce(this.#i,0),a=this.#s(t),r=this.#h(t);return Math.max(e**2*a/i**2,i**2/(e**2*r))};#e=()=>this.Rectangle.totalHeight**2>this.Rectangle.totalWidth**2?{value:this.Rectangle.totalWidth,vertical:!1}:{value:this.Rectangle.totalHeight,vertical:!0};#a=(t,e,i)=>{let a=t.reduce(this.#i,0)/e;t.forEach(r=>{let n=r/a,{xBeginning:l}=this.Rectangle,{yBeginning:g}=this.Rectangle,h;i?(h={x:l,y:g,width:a,height:n,data:this.initialData[this.Rectangle.data.length]},this.Rectangle.yBeginning+=n):(h={x:l,y:g,width:n,height:a,data:this.initialData[this.Rectangle.data.length]},this.Rectangle.xBeginning+=n),this.Rectangle.data.push(h)}),i?(this.Rectangle.xBeginning+=a,this.Rectangle.yBeginning-=e,this.Rectangle.totalWidth-=a):(this.Rectangle.xBeginning-=e,this.Rectangle.yBeginning+=a,this.Rectangle.totalHeight-=a)};#l=(t,e,i)=>{let{vertical:a}=this.#e();this.#a(t,i,a),this.#a(e,i,a)};#n=(t,e,i)=>{if(t.length===1)return this.#l(e,t,i);let a=[...e,t[0]];return e.length===0||this.#r(e,i)>=this.#r(a,i)?(t.shift(),this.#n(t,a,i)):(this.#a(e,i,this.#e().vertical),this.#n(t,[],this.#e().value))};treeMap(t){if(t&&t.data.length>0){let e=t.height,i=t.data;this.#o({data:i,height:e}),this.width=this.container?.offsetWidth??NaN,this.height=e,this.Rectangle={data:[],xBeginning:0,yBeginning:0,totalWidth:this.width,totalHeight:this.height},this.initialData=i;let a=i.map(n=>n.value).reduce(this.#i,0),r=i.map(n=>n.value*this.height*this.width/a);return this.#n(r,[],this.#e().value),this.Rectangle.data.map(n=>({...n,x:this.#t(n.x),y:this.#t(n.y),width:this.#t(n.width),height:this.#t(n.height)}))}return[]}resizeTreemap(){new ResizeObserver(e=>{for(let i of e){this.width=i.target.offsetWidth;let a={data:this.initialData,width:this.width,height:this.height};this.treeMap(a)&&(this.data=this.treeMap(a))}}).observe(this)}};s=u([m("ids-treemap"),d(f)],s);export{s as a};

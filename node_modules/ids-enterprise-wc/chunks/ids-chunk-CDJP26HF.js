import{a as f}from"./ids-chunk-AKCO43TX.js";import{a as u,b as w}from"./ids-chunk-XE4WFW5M.js";import{a as g}from"./ids-chunk-GFV2Z7F5.js";import{a as c}from"./ids-chunk-EQJWBFQ2.js";import{a as b}from"./ids-chunk-U7OOVFXE.js";var v=`
/* Ids Wizard Component */
.ids-wizard {
  padding-inline: 32px;
  margin-block: 8px;
  box-sizing: border-box;
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: flex-start;
  justify-content: flex-start;
  width: 100%;
  max-width: 100%;
  height: 64px;
}
.ids-wizard .steps {
  position: relative;
  box-sizing: border-box;
  display: flex;
  flex-direction: row;
  align-items: center;
  width: 100%;
  height: 28px;
}
.ids-wizard .step.clickable:focus .step-label {
  border: 1px solid var(--ids-wizard-step-color-default);
  border-radius: var(--ids-border-radius-01);
  box-shadow: var(--ids-shadow-focus);
  outline: none;
  outline-color: transparent;
}
.ids-wizard .step:focus-visible {
  outline-style: none;
}
.ids-wizard .step-label {
  border: 1px solid transparent;
  position: absolute;
  top: 24px;
  box-sizing: border-box;
  text-align: left;
  text-decoration: none;
  padding: 2px 6px;
}
.ids-wizard .step:not(:first-child):not(:last-child) .step-label {
  left: 50%;
  transform: translateX(-50%);
}
.ids-wizard .step:first-child .step-label {
  left: -16px;
}
.ids-wizard .step:last-child .step-label {
  right: -16px;
  text-align: right;
}
.ids-wizard .step:not(.visited) .step-label {
  color: var(--ids-wizard-step-color-unvisited);
}
.ids-wizard .step.visited .step-label {
  color: var(--ids-wizard-step-color-default);
}
.ids-wizard .step:not(.clickable) .step-label {
  cursor: var(--ids-cursor-default);
}
.ids-wizard .step.clickable:not(.current):hover .step-label {
  text-decoration: underline;
}
.ids-wizard .step {
  position: relative;
  text-align: left;
  text-decoration: none;
}
.ids-wizard .step.clickable {
  cursor: var(--ids-cursor-pointer);
}
.ids-wizard .step .step-marker {
  position: relative;
  width: var(--ids-wizard-step-width);
  height: var(--ids-wizard-step-width);
  overflow: visible;
}
.ids-wizard .step .step-marker > svg {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  overflow: visible;
}
.ids-wizard .step .step-marker > svg:nth-child(1) {
  width: var(--ids-wizard-step-width);
  height: var(--ids-wizard-step-width);
  fill: var(--ids-wizard-step-color-default);
  stroke: none;
  z-index: 2;
}
.ids-wizard .step .step-marker > svg:nth-child(2) {
  width: calc(var(--ids-wizard-step-width) + 5px);
  height: calc(var(--ids-wizard-step-width) + 5px);
  fill: var(--ids-wizard-step-inner-border-color-border);
  stroke: var(--ids-wizard-step-color-default);
  stroke-width: 1px;
  z-index: 1;
}
.ids-wizard .path-segment {
  position: relative;
  height: 100%;
  flex-grow: 1;
}
.ids-wizard .path-segment::before {
  background-color: var(--ids-wizard-step-color-unvisited);
  position: absolute;
  left: 0;
  top: 50%;
  transform: translateY(-50%);
  width: 100%;
  height: 2px;
  content: "";
}
.ids-wizard .path-segment.visited::before {
  background-color: var(--ids-wizard-step-color-default);
}
.ids-wizard .path-segment.from-prev {
  left: 0;
}
.ids-wizard .path-segment.to-next {
  right: 0;
}
.ids-wizard .step.current .step-label {
  font-weight: var(--ids-font-weight-semibold);
}
.ids-wizard .step:not(.visited) svg:first-child circle {
  fill: transparent;
  stroke: var(--ids-wizard-step-color-unvisited);
  stroke-width: 3px;
}`;var h=class extends f(g){constructor(){super()}shouldUpdateCallbacks=!0;stepObserver=new MutationObserver(t=>{for(let{type:e}of t)e==="childList"&&(this.shouldUpdateCallbacks=!0,this.render(!0))});resizeObserver=new ResizeObserver(()=>{this.fitAndSizeElements()});fitAndSizeElements(){let t=[];for(let e=0;e<this.children.length;e++){let i=this.getStepEl(this,e+1)?.children[1];i&&(i.style.maxWidth="unset",t.push(i))}requestAnimationFrame(()=>{let e=this.resizeStepLabelRects(this);for(let i=0;i<e.length;i++){let{width:s}=e[i];t[i].style.maxWidth=`${s}px`}})}areRectsHColliding(t,e){return t.left+t.width>e.left&&t.right-t.width<e.right}static get attributes(){return[c.STEP_NUMBER,c.CLICKABLE]}isStepClickable(t){let e=this.children[t-1];return!this.clickable&&e.getAttribute(c.CLICKABLE)!=="false"||e.getAttribute(c.CLICKABLE)!=="false"}template(){let t="",e=this.stepNumber-1;for(let[i,s]of[...this.children].entries()){let a=e===i,d=i<=e,r=this.isStepClickable(i+1),p=s.textContent,n="step";n+=a?" current":"",n+=d?" visited":"",n+=r?" clickable":"";let o=i>=this.children.length-1?"":`<div
        class="path-segment${e<=i?"":" visited"}
        part="path-segment"
      ></div>`,l=`<div
        class="step-label"
        step-number=${i+1}
      >
        <ids-text
          overflow="ellipsis"
          size=18
          font-weight="${a?"bold":"normal"}"
          color="unset"
        >${p}
        </ids-text>
      </div>`;t+=`<a
        class="${n}"
        part="step"
        step-number="${i+1}"
        tabindex="${r?"0":"-1"}"'
      >
        <div class="step-marker">
          <svg viewBox="0 0 24 24">
            <circle cx="12" cy="12" r="12" />
          </svg>
          ${a?`<svg viewBox="0 0 24 24">
              <circle cx="12" cy="12" r="12" />
            </svg>`:""}
        </div>
        ${l}
      </a>
      ${o}`}return`<div class="ids-wizard">
      <nav class="steps">
        ${t}
      </nav>
    </div>`}get stepNumber(){let t=parseInt(this.getAttribute(c.STEP_NUMBER)??"");return Number.isNaN(t)?-1:t}set stepNumber(t){if(Number.isNaN(Number(t)))throw new Error("ids-wizard: Invalid step number provided");let e=parseInt(t);if(e<=0)throw new Error("ids-wizard: step number should be > 0");if(e>this.children?.length)throw new Error("ids-wizard: step number should be below step-count");this.setAttribute("step-number",e.toString())}set clickable(t){this.setAttribute(c.CLICKABLE,String(t!=="false"))}get clickable(){return this.getAttribute(c.CLICKABLE)}connectedCallback(){super.connectedCallback(),this.stepObserver.disconnect(),this.stepObserver.observe(this,{childList:!0,attributes:!0,subtree:!0}),this.rendered()}rendered(){if(this.shouldUpdateCallbacks){this.resizeObserver.disconnect();for(let t=1;t<=this.children.length;t++){if(!this.isStepClickable(t))continue;let e=this.shadowRoot?.querySelector(`.step[step-number="${t}"]`),i=()=>{this.stepNumber=`${t}`};this.offEvent(`click.step.${t}`,this),this.onEvent(`click.step.${t}`,e,i)}this.container&&this.resizeObserver.observe(this.container),this.shouldUpdateCallbacks=!1}}getStepEl(t,e){return t?.shadowRoot?.querySelector(`.step[step-number="${e}"]`)}resizeStepLabelRects(...t){let e=t[0],i=t[1]||1,s=t[2]||[],a=t[3]||-1;if(a===-1){a=e.getBoundingClientRect().width;for(let n=0;n<e.children.length;n++){let[,o]=this.getStepEl(e,n+1)?.children??[],l=o.getBoundingClientRect(),m={width:l.width,left:l.left,right:l.right};s.push(m)}}if(s.length<=1)return s;let d=s[i-1],r=s[i];for(;this.areRectsHColliding(d,r);){let p=i===1,n=i===s.length-1,o=Math.round(d.width/r.width*.5),l=Math.round(r.width/d.width*.5);d.width<=16&&(o=.01),r.width<=16&&(l=.01),p&&(o*=.5),n&&(l*=.5),d.width-=8*o,r.width-=8*l,p&&(d.right-=8*o,r.right-=4*l,r.left+=4*l),n&&(r.left+=8*l,d.right-=4*o,d.left+=4*o),p||(d.left+=4*o,d.right-=4*o),n||(r.left+=4*l,r.right-=4*l)}return s[i-1]=d,s[i]=r,i<s.length-1&&a&&(s=this.resizeStepLabelRects(e,i+1,s,a)),s}};h=b([u("ids-wizard"),w(v)],h);export{h as a};

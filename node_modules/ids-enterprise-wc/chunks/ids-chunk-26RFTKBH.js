import{a as S}from"./ids-chunk-LCCMDCGB.js";import{a as A,b as k}from"./ids-chunk-XE4WFW5M.js";import{f as E}from"./ids-chunk-QPDOZZIG.js";import{a as u}from"./ids-chunk-EQJWBFQ2.js";import{a as v}from"./ids-chunk-U7OOVFXE.js";var $=`
/* Ids Line Chart Component */ /* Ids Axis Chart Component */
.chart-legend {
  display: flex;
  padding-inline-start: 8px;
  flex-direction: row;
  margin-top: -4px;
  justify-content: flex-start;
  width: inherit;
}
.chart-legend a {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  align-items: center;
  border: 1px solid transparent;
  display: flex;
  font-family: var(--ids-font-family-default);
  font-size: var(--ids-chart-legend-font-size);
  color: var(--ids-chart-legend-color-text);
  padding-inline-start: 8px;
  padding-inline-end: 8px;
  padding-block-start: 2px;
  padding-block-end: 2px;
  text-decoration: none;
}
.chart-legend a:focus {
  outline: none;
  border-color: var(--ids-color-border-focus);
  box-shadow: var(--ids-shadow-focus);
}
.chart-legend .swatch {
  display: inline-flex;
  margin-inline-end: 8px;
  height: 12px;
  width: 12px;
}
.chart-legend .swatch.color-1 {
  background-color: var(--ids-chart-color-1);
}
.chart-legend .swatch.color-2 {
  background-color: var(--ids-chart-color-2);
}
.chart-legend .swatch.color-3 {
  background-color: var(--ids-chart-color-3);
}
.chart-legend .swatch.color-4 {
  background-color: var(--ids-chart-color-4);
}
.chart-legend .swatch.color-5 {
  background-color: var(--ids-chart-color-5);
}
.chart-legend .swatch.color-6 {
  background-color: var(--ids-chart-color-6);
}
.chart-legend .swatch.color-7 {
  background-color: var(--ids-chart-color-7);
}
.chart-legend .swatch.color-8 {
  background-color: var(--ids-chart-color-8);
}
.chart-legend .swatch.color-9 {
  background-color: var(--ids-chart-color-9);
}
.chart-legend .swatch.color-10 {
  background-color: var(--ids-chart-color-10);
}
.chart-legend .swatch.color-11 {
  background-color: var(--ids-chart-color-11);
}
.chart-legend .swatch.color-12 {
  background-color: var(--ids-chart-color-12);
}
.chart-legend .swatch.color-13 {
  background-color: var(--ids-chart-color-13);
}
.chart-legend .swatch.color-14 {
  background-color: var(--ids-chart-color-14);
}
.chart-legend .swatch.color-15 {
  background-color: var(--ids-chart-color-15);
}
.chart-legend .swatch.color-16 {
  background-color: var(--ids-chart-color-16);
}
.chart-legend .swatch.color-17 {
  background-color: var(--ids-chart-color-17);
}
.chart-legend .swatch.color-18 {
  background-color: var(--ids-chart-color-18);
}
.chart-legend .swatch.color-19 {
  background-color: var(--ids-chart-color-19);
}
.chart-legend .swatch.color-20 {
  background-color: var(--ids-chart-color-20);
}
.chart-legend .swatch.color-21 {
  background-color: var(--ids-chart-color-21);
}

.ids-chart-container {
  display: flex;
  flex-direction: column;
}
.ids-chart-container.legend-top {
  margin-block-end: 8px;
  flex-direction: column-reverse;
}
.ids-chart-container.legend-top .chart-legend {
  margin-inline-start: 0;
  justify-content: end;
}
.ids-chart-container.legend-right, .ids-chart-container.legend-left {
  flex-direction: row;
}
.ids-chart-container.legend-right .chart-legend, .ids-chart-container.legend-left .chart-legend {
  margin-inline-start: 0;
  flex-direction: column;
  justify-content: center;
}
.ids-chart-container.legend-right .chart-legend a, .ids-chart-container.legend-left .chart-legend a {
  margin-block-end: 8px;
  width: max-content;
}
.ids-chart-container.legend-left {
  flex-direction: row-reverse;
}

.ids-axis-chart {
  display: flex;
}
.ids-axis-chart.hidden {
  display: none;
}
.ids-axis-chart .grid {
  shape-rendering: crispedges;
  stroke: var(--ids-axis-chart-grid-color);
  stroke-width: 1;
  stroke-dasharray: 2 2;
}
.ids-axis-chart .grid.horizontal-lines line:last-child {
  stroke: var(--ids-axis-chart-last-line-color-border);
  stroke-dasharray: none;
}
.ids-axis-chart .grid.hidden {
  stroke-width: 0;
}
.ids-axis-chart.horizontal .grid.horizontal-lines line:last-child {
  stroke: inherit;
  stroke-dasharray: inherit;
}
.ids-axis-chart.horizontal .grid.vertical-lines line:first-child {
  stroke: var(--ids-axis-chart-first-line-color);
  stroke-dasharray: none;
}
.ids-axis-chart g[tabindex="0"]:focus {
  outline: var(--ids-axis-chart-outline-focus);
}
.ids-axis-chart .labels {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-family: var(--ids-axis-chart-font-family);
  font-size: var(--ids-axis-chart-font-size);
}
.ids-axis-chart .labels text {
  fill: var(--ids-axis-chart-color-text);
}
.ids-axis-chart .labels.x-labels {
  text-anchor: middle;
}
.ids-axis-chart .labels.y-labels {
  text-anchor: end;
}
.ids-axis-chart .labels.axis-labels text {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  font-weight: var(--ids-axis-chart-font-weight);
  text-anchor: middle;
}
.ids-axis-chart .audible {
  opacity: 0;
}

.ids-chart-container.selectable .audible {
  font-size: 1px;
}

ids-empty-message:not([hidden]),
::slotted(ids-empty-message:not([hidden])) {
  display: flex;
  justify-content: center;
  align-items: center;
  height: 100%;
}
ids-empty-message:not([hidden])[hidden],
::slotted(ids-empty-message:not([hidden]))[hidden] {
  display: none;
}

.tooltip-center {
  margin-block: var(--ids-space-30);
  text-align: center;
}

.tooltip.chart-legend {
  flex-direction: column;
  margin-block-end: var(--ids-space-40);
  padding: 0;
}
.tooltip.chart-legend .swatch {
  margin-inline: var(--ids-space-30);
  padding: 0;
}

.tooltip-row span {
  padding-inline-start: var(--ids-space-20);
  padding-inline-end: var(--ids-space-30);
}

:host([dir=rtl]) .ids-axis-chart {
  transform: scale(-1, 1);
}
:host([dir=rtl]) .ids-axis-chart:not(.horizontal) .labels.y-labels text {
  transform: scale(-1, 1) translate(var(--ids-axis-chart-ylabels-x, -45px), 0);
}
:host([dir=rtl]) .labels.x-labels {
  transform: scale(-1, 1);
  transform-origin: unset;
}

.ids-axis-chart .bars .bar {
  outline: none;
}
.ids-axis-chart .bars rect.color-1:not([fill]) {
  fill: var(--ids-chart-color-1);
}
.ids-axis-chart .bars rect.color-2:not([fill]) {
  fill: var(--ids-chart-color-2);
}
.ids-axis-chart .bars rect.color-3:not([fill]) {
  fill: var(--ids-chart-color-3);
}
.ids-axis-chart .bars rect.color-4:not([fill]) {
  fill: var(--ids-chart-color-4);
}
.ids-axis-chart .bars rect.color-5:not([fill]) {
  fill: var(--ids-chart-color-5);
}
.ids-axis-chart .bars rect.color-6:not([fill]) {
  fill: var(--ids-chart-color-6);
}
.ids-axis-chart .bars rect.color-7:not([fill]) {
  fill: var(--ids-chart-color-7);
}
.ids-axis-chart .bars rect.color-8:not([fill]) {
  fill: var(--ids-chart-color-8);
}
.ids-axis-chart .bars rect.color-9:not([fill]) {
  fill: var(--ids-chart-color-9);
}
.ids-axis-chart .bars rect.color-10:not([fill]) {
  fill: var(--ids-chart-color-10);
}
.ids-axis-chart .bars rect.color-11:not([fill]) {
  fill: var(--ids-chart-color-11);
}
.ids-axis-chart .bars rect.color-12:not([fill]) {
  fill: var(--ids-chart-color-12);
}
.ids-axis-chart .bars rect.color-13:not([fill]) {
  fill: var(--ids-chart-color-13);
}
.ids-axis-chart .bars rect.color-14:not([fill]) {
  fill: var(--ids-chart-color-14);
}
.ids-axis-chart .bars rect.color-15:not([fill]) {
  fill: var(--ids-chart-color-15);
}
.ids-axis-chart .bars rect.color-16:not([fill]) {
  fill: var(--ids-chart-color-16);
}
.ids-axis-chart .bars rect.color-17:not([fill]) {
  fill: var(--ids-chart-color-17);
}
.ids-axis-chart .bars rect.color-18:not([fill]) {
  fill: var(--ids-chart-color-18);
}
.ids-axis-chart .bars rect.color-19:not([fill]) {
  fill: var(--ids-chart-color-19);
}
.ids-axis-chart .bars rect.color-20:not([fill]) {
  fill: var(--ids-chart-color-20);
}
.ids-axis-chart .bars rect.color-21:not([fill]) {
  fill: var(--ids-chart-color-21);
}

.ids-chart-container.selectable .ids-axis-chart .bars .bar {
  cursor: var(--ids-cursor-pointer);
}
.ids-chart-container.selectable .ids-axis-chart .bars .bar[selected] {
  opacity: 1;
}
.ids-chart-container.selectable .ids-axis-chart .bars .bar.not-selected {
  opacity: 0.5;
}`;var y=class extends S{constructor(){super(),this.DEFAULT_SELECTABLE=!1}static get attributes(){return[...super.attributes,u.BAR_PERCENTAGE,u.CATEGORY_PERCENTAGE]}connectedCallback(){super.connectedCallback()}afterConnectedCallback(){this.#r(),this.#e(),this.attachTooltipEvents()}afterCalculateCallback(){this.#s()}chartTemplate(){return`<g class="bars" role="list" aria-label="${`${this.stacked?"":this.data[0]?.name}`}">
      ${this.#a()}
    </g>`}#e(){if(!this.initialized||!this.selectable||!this.data?.length||!this.selectionElements?.length)return;let e=r=>typeof r=="number"&&r>-1,o=()=>{this.data.forEach(r=>{delete r.selected,r.data?.forEach(a=>{delete a?.selected})})},c=this.data.findIndex(r=>r.selected);if(e(c)){o(),this.data[c].data?.forEach(r=>{r.selected=!0}),this.selectionElements.forEach(r=>{r.getAttribute("group-index")===`${c}`?r.setAttribute("selected",""):r.classList.add("not-selected")});return}let i;for(let r=0,a=this.data.length;r<a&&(i=this.data[r].data?.findIndex(h=>h.selected),!e(i));r++);e(i)&&(o(),this.data.forEach(r=>{let a=r?.data?.[i];a&&(a.selected=!0)}),this.selectionElements.forEach(r=>{r.getAttribute("index")===`${i}`?r.setAttribute("selected",""):r.classList.add("not-selected")}))}getSelected(){let e=this.selectionElements.filter(a=>a.hasAttribute("selected"));if(!e.length)return{};let o=e[0].getAttribute("group-index");if(!e.some(a=>a.getAttribute("group-index")!==o)){let a=this.data[o];return{bars:e,data:a,groupIndex:o}}let i=[],r=e.map(a=>{let h=a.getAttribute("group-index"),l=a.getAttribute("index"),b=this.data[h].data[l];return b&&i.push(b),{group:h,index:l}});return{bars:e,data:i,indexes:r}}setSelected(e){if(!this.initialized||!this.selectable||!this.data?.length||!this.selectionElements?.length)return;let o=E(e.groupIndex),c=E(e.index);if(!Number.isNaN(o))if(Number.isNaN(c))this.setSelection(o,!0);else{let i=this.selectionElements.findIndex(r=>r.getAttribute("group-index")===`${o}`&&r.getAttribute("index")===`${c}`);typeof i=="number"&&i>-1&&this.setSelection(i)}}setSelection(e,o){if(Number.isNaN(e)||!this.selectionElements?.[0])return!1;let c=t=>this.selectionElements.filter(n=>t(n)),i={selected:c(t=>t.hasAttribute("selected"))};if(o)i.target=c(t=>t.getAttribute("group-index")===`${e}`),i.inverse=c(t=>t.getAttribute("group-index")!==`${e}`);else{let t=this.selectionElements?.[e]?.getAttribute("index");i.target=c(n=>n.getAttribute("index")===`${t}`),i.inverse=c(n=>n.getAttribute("index")!==`${t}`)}let r=!1,a=t=>{let n=t[0].getAttribute("group-index");if(r=!t.some(d=>d.getAttribute("group-index")!==n),r){let d=this.data[n];return{bars:t,data:d,groupIndex:n}}let s=[],g=t.map(d=>{let f=d.getAttribute("group-index"),p=d.getAttribute("index"),m=this.data[f].data[p];return m&&s.push(m),{group:f,index:p}});return{bars:t,data:s,indexes:g}},h=()=>{let t=a(i.selected);if(!this.triggerVetoableEvent("beforedeselected",t))return!1;let n=s=>{delete s.selected};return r?n(t.data):t.data.forEach(s=>n(s)),this.selectionElements.forEach(s=>s.classList.remove("not-selected")),i.selected.forEach(s=>s.removeAttribute("selected")),this.triggerEvent("deselected",this,{bubbles:!0,detail:{elem:this,...t}}),!0};if(i.selected.length){if(!i.target.some(n=>!n.hasAttribute("selected")))return h();if(!h())return!1}let l=a(i.target);if(!this.triggerVetoableEvent("beforeselected",l))return!1;let b=t=>{t.selected=!0};return r?b(l.data):l.data.forEach(t=>b(t)),i.target.forEach(t=>t.setAttribute("selected","")),i.inverse.forEach(t=>t.classList.add("not-selected")),this.triggerEvent("selected",this,{bubbles:!0,detail:{elem:this,...l}}),!0}get selectionElements(){return this.selectable?[...this.container?.querySelectorAll("rect.bar")??[]]:[]}tooltipElements(){return[...this.container?.querySelectorAll("rect.bar")??[]]}#r(){if(this.horizontal)return;let e=this.shadowRoot?.querySelector(".vertical-lines");if(e){let o=e.querySelectorAll("line");o.forEach((r,a)=>{a!==0&&(r.setAttribute("x1",String(this.sectionWidths.at(a)?.left)),r.setAttribute("x2",String(this.sectionWidths.at(a)?.left)))});let c=this.sectionWidths.at(-1)?.left,i=`<line x1="${c}" x2="${c}" y1="${o[0].getAttribute("y1")}" y2="${o[0].getAttribute("y2")}"/>`;e.insertAdjacentHTML("beforeend",i)}}#a(){if(this.horizontal)return this.#i();let e="",o=[],c=this.groupCount,i=this.isGrouped,r=this.sectionWidth,a=this.categoryPercentage*r,h=1,l=i?(a-c*h)/c:a;return l*=this.barPercentage,this.markerData.points?.forEach((b,t)=>{b.forEach((n,s)=>{let g;i?(g=this.sectionWidths[s].left+(r-a)/2+(a-l*c)/2,g+=l*t+t*h):g=this.sectionWidths[s].left+(r-a)/2+(a-l)/2;let d=this.markerData.gridBottom,f=d-n.top,p=this.data[t]?.pattern?` fill="url(#${this.data[t]?.pattern})"`:"",m=this.data[0]?.data[s]?.name,x=n.top;this.stacked&&(x=t>0?x-o[s]:x,o[s]=(o[s]||0)+f),e+=`<g role="listitem">
          <text class="audible" x="${g}" y="${this.markerData.gridBottom}">${m} ${n.value}</text>
          <rect class="bar color-${t+1}" aria-hidden="true" group-index="${t}" index="${s}" width="${l}" height="${f}" x="${g}" y="${x}"${p}>
            <animate attributeName="height" from="0" to="${f}" ${this.animated?this.cubicBezier:this.cubicBezier.replace("0.8s","0.01s")}></animate>
            <animate attributeName="y" from="${d}" to="${x}" ${this.animated?this.cubicBezier:this.cubicBezier.replace("0.8s","0.01s")}></animate>
          </rect></g>`})}),e}#i(){let e="",o=[],c=this.groupCount,i=this.isGrouped,r=this.sectionHeight,a=this.categoryPercentage*r,h=1,l=i?(a-c*h)/c:a;return l*=this.barPercentage,this.markerData.points?.forEach((b,t)=>{b.forEach((n,s)=>{let g;i?(g=this.sectionHeights[s].top+(r-a)/2+(a-l*c)/2,g+=l*t+t*h):g=this.sectionHeights[s].top+(r-a)/2+(a-l)/2;let d=this.markerData.gridLeft-this.margins.leftInner-this.margins.rightInner,f=d,m=this.markerData.gridRight-n.left,x=this.data[t]?.pattern?` fill="url(#${this.data[t]?.pattern})"`:"",G=this.data[0]?.data[s]?.name;this.stacked&&(d=t>0?o[s]:d,o[s]=(o[s]||d)+m),e+=`<g role="listitem">
          <text class="audible" x="${d}" y="${this.markerData.gridBottom}">${G} ${n.value}</text>
          <rect class="bar color-${t+1}" aria-hidden="true" group-index="${t}" index="${s}" width="${m}" height="${l}" x="${d}" y="${g}"${x}>
            <animate attributeName="x" from="${f}" to="${d}" ${this.animated?this.cubicBezier:this.cubicBezier.replace("0.8s","0.01s")}></animate>
            <animate attributeName="width" from="0" to="${m}" ${this.animated?this.cubicBezier:this.cubicBezier.replace("0.8s","0.01s")}></animate>
          </rect></g>`})}),e}get groupCount(){return this.markerData?.groupCount||1}#s(){this.isGrouped=!this.stacked&&this.groupCount>1}#t(e){return!Number.isNaN(e)&&e>0&&e<=1}get alignXLabels(){return this.getAttribute(u.ALIGN_X_LABELS)||"middle"}set barPercentage(e){this.#t(Number(e))?this.setAttribute(u.BAR_PERCENTAGE,String(e)):this.removeAttribute(u.BAR_PERCENTAGE),this.redraw()}get barPercentage(){let e=Number(this.getAttribute(u.BAR_PERCENTAGE));return this.#t(e)?e:this.isGrouped?.7:.5}set categoryPercentage(e){this.#t(Number(e))?this.setAttribute(u.CATEGORY_PERCENTAGE,String(e)):this.removeAttribute(u.CATEGORY_PERCENTAGE),this.redraw()}get categoryPercentage(){let e=Number(this.getAttribute(u.CATEGORY_PERCENTAGE));return this.#t(e)?e:.9}};y=v([A("ids-bar-chart"),k($)],y);export{y as a};

{
  "schemaVersion": "1.0.0",
  "readme": "",
  "modules": [
    {
      "kind": "javascript-module",
      "path": "src/components/ids-about/ids-about.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS About Component",
          "name": "IdsAbout",
          "cssParts": [
            {
              "description": "the popup outer element",
              "name": "popup"
            },
            {
              "description": "the inner overlay element",
              "name": "overlay"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "method",
              "name": "attachEventHandlers",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Establish internal event handlers"
            },
            {
              "kind": "method",
              "name": "#attachCloseButton",
              "description": "Add button with icon to the modal\nReusing ids-modal-button component with cancel attribute and extra css class to change appearance"
            },
            {
              "kind": "field",
              "name": "ariaLabelContent",
              "type": {
                "text": "string"
              },
              "description": "Used for ARIA Labels and other content",
              "readonly": true,
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "productName",
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Set the product name property",
              "parameters": [
                {
                  "description": "productName attribute value",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "productVersion",
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Set the product version property",
              "parameters": [
                {
                  "description": "productVersion attribute value",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#refreshProduct",
              "description": "Refreshes the product info with product name / version attributes value"
            },
            {
              "kind": "field",
              "name": "deviceSpecs",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Sets whether or not to display device information.",
              "parameters": [
                {
                  "description": "deviceSpecs attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#refreshDeviceSpecs",
              "description": "Refreshes the device specs content",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "copyrightYear",
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Set the copyright year property",
              "parameters": [
                {
                  "description": "copyrightYear attribute value",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "useDefaultCopyright",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Sets whether or not to display Legal Approved Infor Copyright Text",
              "parameters": [
                {
                  "description": "useDefaultCopyright attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#refreshCopyright",
              "description": "Refreshes the copyright content",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-about/ids-about.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsAbout",
            "module": "src/components/ids-about/ids-about.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-action-panel/ids-action-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Action Panel",
          "name": "IdsActionPanel",
          "members": [
            {
              "kind": "field",
              "name": "toolbar",
              "type": {
                "text": "HTMLSlotElement | null"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#refreshHeader"
            },
            {
              "kind": "method",
              "name": "addOpenEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides `addOpenEvents` from both Modal and the IdsPopupOpenEventsMixin to include\na way to tie in Toolbar buttons to the Modal's standard `onButtonClick` callback",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeOpenEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides `addOpenEvents` from both Modal and the IdsPopupOpenEventsMixin to include\na way to tie in Toolbar buttons to the Modal's standard `onButtonClick` callback",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "shouldUpdate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "onButtonClick",
              "type": {
                "text": "(target: any) => void | undefined"
              },
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "globalKeydownListener",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "Array<string>"
              },
              "default": "['beforeshow', 'beforehide']",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabelContent",
              "type": {
                "text": "string"
              },
              "description": "Used for ARIA Labels and other content",
              "readonly": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttons",
              "type": {
                "text": "NodeListOf<IdsModalButton>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "NodeListOf<IdsModalButton>"
                }
              },
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "fullsize",
              "type": {
                "text": "IdsModalFullsizeAttributeValue"
              },
              "return": {
                "type": {
                  "text": "IdsModalFullsizeAttributeValue"
                }
              },
              "parameters": [
                {
                  "description": "the breakpoint at which\nthe Modal will change from normal mode to fullsize mode",
                  "name": "val",
                  "type": {
                    "text": "IdsModalFullsizeAttributeValue"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#clearBreakpointResponse",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes established callbacks for responding to breakpoints, if set",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setFullsizeDefault",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Runs on connectedCallback or any refresh to adjust the `fullsize` attribute, if set",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "overlay",
              "type": {
                "text": "any"
              },
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "description": "an overlay element",
                  "name": "val",
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "default": "null",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "messageTitle",
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "the new content to be used as the message's title",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "null",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#refreshModalHeader",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "hasTitle",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if the title should be rendered"
                }
              ],
              "description": "Refreshes the state of the Modal header, either adding its slot/contents or removing it",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "refreshAriaLabel",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Renders or Removes a correct `aria-label` attribute on the Modal about its contents.",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#refreshModalFooter",
              "description": "Refreshes the state of the Modal footer, hiding/showing it",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "#visible",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "true if the Modal is visible.",
                  "name": "val",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Shows the modal with possibity to veto the promise",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Hides the modal with possibity to veto the promise",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#refreshOverlay",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "if true, uses an external overlay"
                }
              ],
              "description": "Refreshes the state of the overlay used behind the modal.  If a shared overlay isn't applied,\nan internal one is generated and applied to the ShadowRoot.",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#refreshVisibility",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "if true, makes the Modal visible to the user"
                }
              ],
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setTargetFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Focuses the defined target element, if applicable",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "#setFocusIfVisible",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets up overall events",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleButtonClick",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  },
                  "description": "the original event object"
                }
              ],
              "description": "Handles when Modal Button is clicked.",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "onTriggerClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle `onTriggerClick` from IdsPopupInteractionsMixin",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "onOutsideClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "the original click event"
                }
              ],
              "description": "Handle `onOutsideClick` from IdsPopupOpenEventsMixin",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            }
          ],
          "superclass": {
            "name": "IdsModal",
            "module": "/src/components/ids-modal/ids-modal"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsActionPanel",
            "module": "src/components/ids-action-panel/ids-action-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-accordion/ids-accordion-common.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "ALIGNMENT_TYPES",
          "type": {
            "text": "array"
          },
          "default": "['has-icon']"
        },
        {
          "kind": "function",
          "name": "applyContentAlignmentClass",
          "parameters": [
            {
              "name": "cl",
              "type": {
                "text": "{ contains: (arg0: string) => any; remove: (arg0: string) => void; add: (arg0: string) => void; }"
              }
            },
            {
              "name": "thisAlignment",
              "type": {
                "text": "string | null"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "refreshRTLStyle",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "cl",
              "type": {
                "text": "DOMTokenList"
              },
              "description": "the classlist of an IdsElement's `container`"
            },
            {
              "name": "val",
              "type": {
                "text": "boolean"
              },
              "description": "true if this component should be displayed with RTL styles"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "ALIGNMENT_TYPES",
          "declaration": {
            "name": "ALIGNMENT_TYPES",
            "module": "src/components/ids-accordion/ids-accordion-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "applyContentAlignmentClass",
          "declaration": {
            "name": "applyContentAlignmentClass",
            "module": "src/components/ids-accordion/ids-accordion-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "refreshRTLStyle",
          "declaration": {
            "name": "refreshRTLStyle",
            "module": "src/components/ids-accordion/ids-accordion-common.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-accordion/ids-accordion-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Accordion Header Component",
          "name": "IdsAccordionHeader",
          "cssParts": [
            {
              "description": "the accordion header root element",
              "name": "header"
            },
            {
              "description": "the accordion header icon element",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<any>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['app-menu', 'sub-app-menu']",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "method",
              "name": "templateExpanderIcon",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Expander Icon template contents"
            },
            {
              "kind": "field",
              "name": "panel",
              "type": {
                "text": "any"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "method",
              "name": "refreshContentAlignment",
              "parameters": [
                {
                  "name": "thisAlignment",
                  "type": {
                    "text": "string"
                  },
                  "description": "the type of alignment to apply"
                }
              ]
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "true if this header should appear expanded",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "expanderType",
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "the type of expander to use",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#refreshExpanderIconClass",
              "parameters": [
                {
                  "name": "oldType",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "newType",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Focuses this accordion header"
            },
            {
              "kind": "field",
              "name": "icon",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "the type of display icon to show",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#refreshIconDisplay",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "the icon definition to apply"
                }
              ]
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "true if this accordion header should appear \"selected\"",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#refreshSelected",
              "parameters": [
                {
                  "name": "isSelected",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if the Accordion Header should appear \"Selected\""
                }
              ],
              "description": "Refreshes the visual \"Selected\" state"
            },
            {
              "kind": "method",
              "name": "toggleExpanderIcon",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if the expander icon should be displayed"
                }
              ],
              "description": "Toggles the display of an expander icon"
            },
            {
              "kind": "method",
              "name": "#showExpanderIcon",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Renders the expander icon, either adding it to the DOM or updating if it exists."
            },
            {
              "kind": "method",
              "name": "#hideExpanderIcon",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes the expander icon from the DOM."
            },
            {
              "kind": "method",
              "name": "#refreshExpanderIconType",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Changes the visual style of the expander icon"
            },
            {
              "kind": "field",
              "name": "hiddenByFilter",
              "parameters": [
                {
                  "description": "true if this accordion header should appear to be \"filtered\",\nwhich usually means \"hidden\"",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "childFilterMatch",
              "parameters": [
                {
                  "description": "true if this accordion header's panel contains a child panel\nthat matches the specified filter term, and should be displayed accordingly",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets disabled property",
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "true/false",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-accordion/ids-accordion-header.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsAccordionHeader",
            "module": "src/components/ids-accordion/ids-accordion-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-accordion/ids-accordion-panel.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Accordion Panel Component",
          "name": "IdsAccordionPanel",
          "members": [
            {
              "kind": "field",
              "name": "paneOpenListener",
              "type": {
                "text": "() => void | undefined"
              }
            },
            {
              "kind": "field",
              "name": "paneCloseListener",
              "type": {
                "text": "() => void | undefined"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "any"
              },
              "default": "['app-menu', 'sub-app-menu']",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setTitles",
              "description": "Create a unique title for each accordion pane",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "description": "When the accordion's color variant is set, push this change through to include a check on the expander icon"
            },
            {
              "kind": "field",
              "name": "contentAlignment",
              "description": "Sets a CSS class containing alignment rules for text/icons/images on this accordion panel",
              "parameters": [
                {
                  "description": "the new alignment rule to set",
                  "name": "val",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string|null"
                }
              }
            },
            {
              "kind": "method",
              "name": "#refreshContentAlignment",
              "parameters": [
                {
                  "name": "thisAlignment",
                  "default": "null",
                  "description": "the alignment rule to set",
                  "type": {
                    "text": "*"
                  }
                }
              ],
              "description": "Visually updates the alignment of icons/text/images in the accordion panel"
            },
            {
              "kind": "field",
              "name": "accordion",
              "type": {
                "text": "any"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "any"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement|null"
                }
              }
            },
            {
              "kind": "field",
              "name": "expander",
              "type": {
                "text": "HTMLElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement|null"
                }
              }
            },
            {
              "kind": "field",
              "name": "pane",
              "type": {
                "text": "HTMLElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement|null"
                }
              }
            },
            {
              "kind": "field",
              "name": "hasParentPanel",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "parentExpanded",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "isExpandable",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "expanded",
              "description": "Get the expanded property",
              "parameters": [
                {
                  "description": "true/false",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#toggleExpanded",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "isExpanded",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if the panel is to be expanded"
                }
              ],
              "description": "The main state switching function\nCollapses sibling panels if allowOnePane setting is true",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#collapseSiblingPanels",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Collapses sibling ids-accordion-panels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#selectAndToggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggles expansion on this pane, and selects its header"
            },
            {
              "kind": "method",
              "name": "#toggleExpanderDisplay",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Hides/Shows an Accordion Header's expander icon"
            },
            {
              "kind": "field",
              "name": "nested",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "true if this panel should appear \"nested\"",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets disabled property",
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "true/false",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "collapsePane",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Collapse the expandable area pane.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "expandPane",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Expand the expandable area pane.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets up event listeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "select",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "IdsAccordionPanel"
                  },
                  "description": "The panel to be selected"
                }
              ],
              "description": "Select the prev/next panel"
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Passes focus from the Panel to its Header component"
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "object"
              },
              "default": "{}"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-accordion/ids-accordion-panel.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsAccordionPanel",
            "module": "src/components/ids-accordion/ids-accordion-panel.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-accordion/ids-accordion.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Accordion Component",
          "name": "IdsAccordion",
          "cssParts": [
            {
              "description": "the accordion root element",
              "name": "accordion"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "IdsAccordionHeader | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['app-menu']",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "description": "When the accordion's color variant is set, push this change through to the child elements"
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Inner template contents",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "#contentObserver",
              "privacy": "private",
              "type": {
                "text": "MutationObserver | undefined"
              },
              "default": "new MutationObserver((mutations) => {\n    for (const m of mutations) {\n      if (m.type === 'childList') {\n        this.#assignDepthDependentStyles();\n      }\n    }\n  })",
              "description": "Observes changes in the accordion tree"
            },
            {
              "kind": "field",
              "name": "headers",
              "type": {
                "text": "Array<IdsAccordionHeader>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<IdsAccordionHeader>"
                }
              }
            },
            {
              "kind": "field",
              "name": "panels",
              "type": {
                "text": "Array<IdsAccordionPanel>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<IdsAccordionPanel>"
                }
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "IdsAccordionPanel | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "IdsAccordionPanel|null"
                }
              }
            },
            {
              "kind": "field",
              "name": "allowOnePane",
              "type": {
                "text": "boolean"
              },
              "description": "Sets allowOnePane property",
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "true/false",
                  "name": "allow",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets disabled property",
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "true/false",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#assignDepthDependentStyles",
              "parameters": [
                {
                  "name": "element",
                  "default": "this",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "the element to check"
                },
                {
                  "name": "depth",
                  "default": "0",
                  "description": "the zero.",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "doColorVariant",
                  "default": "true",
                  "description": "if true, modifies the color variant",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "doExpanderType",
                  "default": "true",
                  "description": "if true, modifies the expander type",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "doDisplayIconType",
                  "default": "true",
                  "description": "if true, modifies the display icon type",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "doRTL",
                  "default": "true",
                  "description": "if true, modifies RTL styles",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Labels Headers and Panels with styling information that is\ndependent on how deeply-nested they are within the Accordion tree."
            },
            {
              "kind": "method",
              "name": "#handleEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "onLanguageChange",
              "description": "Respond to language changes"
            },
            {
              "kind": "method",
              "name": "#deselectOtherHeaders",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "a header to ignore"
                }
              ],
              "description": "Makes accordion headers appear to be deselected, except for the provided one."
            },
            {
              "kind": "method",
              "name": "#handleKeys",
              "description": "Sets up keyboard navigation among accordion elements",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "navigate",
              "parameters": [
                {
                  "name": "amt",
                  "default": "0",
                  "description": "the amount of steps to take",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Traverses the Accordion a specified number of steps",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "method",
              "name": "#nextPanel",
              "description": "Navigates focus from the currently focused Accordion Panel to the next,\nlooping focus to the first panel if applicable.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#prevPanel",
              "description": "Navigates focus from the currently focused Accordion Panel to the previous,\nlooping focus to the last panel if applicable.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#markAdjacentPanesForIcons",
              "parameters": [
                {
                  "name": "panel",
                  "type": {
                    "text": "any"
                  },
                  "description": "the accordion panel that contains icons"
                },
                {
                  "name": "status",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if other adjacent accordion panels\nshould appear to be aligned with this panel's icon"
                }
              ],
              "description": "Assigns CSS classes to panes/headers that will correctly align their contents\nfor either having an icon, or not having an icon"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-accordion/ids-accordion.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsAccordion",
            "module": "src/components/ids-accordion/ids-accordion.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-action-sheet/ids-action-sheet.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Action Sheet Component",
          "name": "IdsActionSheet",
          "members": [
            {
              "kind": "field",
              "name": "overlay",
              "type": {
                "text": "IdsOverlay | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "cancelBtn",
              "type": {
                "text": "IdsButton | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "field",
              "name": "visible",
              "description": "Set the visible attribute",
              "parameters": [
                {
                  "description": "true if the action sheet should appear",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "cancelBtnText",
              "description": "Set the btn text attribute",
              "parameters": [
                {
                  "description": "the inner text of the cancel btn",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "onOutsideClick",
              "description": "Handle `onOutsideClick` on overlay"
            },
            {
              "kind": "method",
              "name": "onCancelClick",
              "description": "Handle cancel btn click"
            },
            {
              "kind": "method",
              "name": "dismiss",
              "description": "Remove the action sheet from the page"
            },
            {
              "kind": "method",
              "name": "#hideOnDesktop",
              "description": "Hide the action sheet on desktop devices"
            },
            {
              "kind": "method",
              "name": "#setVisibility",
              "parameters": [
                {
                  "name": "mq",
                  "type": {
                    "text": "object"
                  },
                  "description": "the media query to check"
                }
              ],
              "description": "Set the action and overlay to hidden is media query is hit"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "description": "Sets up event listeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-action-sheet/ids-action-sheet.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsActionSheet",
            "module": "src/components/ids-action-sheet/ids-action-sheet.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-alert/ids-alert.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Alert Component",
          "name": "IdsAlert",
          "cssParts": [
            {
              "description": "the icon element",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "beforeTooltipShow",
              "parameters": [
                {
                  "name": "tooltip",
                  "optional": true,
                  "type": {
                    "text": "any"
                  },
                  "description": "the tooltip element"
                }
              ],
              "description": "Setup some special config for the tooltip"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "field",
              "name": "color",
              "description": "Set the alert color",
              "parameters": [
                {
                  "description": "The color to use between: error, success, info, alert, warning amber, amethyst",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets to disabled",
              "parameters": [
                {
                  "description": "If true will set `disabled` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string | null"
              },
              "description": "Set the icon",
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "parameters": [
                {
                  "description": "The Icon Type [success, info, error, warning]",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "description": "Return the size. May be large, normal/medium or small",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "IdsTooltipMixin",
              "module": "/src/mixins/ids-tooltip-mixin/ids-tooltip-mixin"
            },
            {
              "name": "IdsEventsMixin",
              "module": "/src/mixins/ids-events-mixin/ids-events-mixin"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsAlert",
            "module": "src/components/ids-alert/ids-alert.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-app-menu/ids-app-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS App Menu Component",
          "name": "IdsAppMenu",
          "cssParts": [
            {
              "description": "the user avatar",
              "name": "avatar"
            },
            {
              "description": "the accordion root element",
              "name": "accordion"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "globalKeydownListener",
              "type": {
                "text": "(e: KeyboardEvent) => void | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#container",
              "privacy": "private",
              "type": {
                "text": "IdsContainer | undefined | null"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template"
            },
            {
              "kind": "field",
              "name": "accordion",
              "type": {
                "text": "IdsAccordion | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "IdsAccordion"
                }
              }
            },
            {
              "kind": "field",
              "name": "isFiltered",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#refreshVariants"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers"
            },
            {
              "kind": "method",
              "name": "#detachEventHandlers"
            },
            {
              "kind": "method",
              "name": "#setContainer",
              "description": "Adds CSS class to ids-container for initial CSS rules"
            },
            {
              "kind": "method",
              "name": "#clearContainer"
            },
            {
              "kind": "method",
              "name": "#connectSearchField",
              "description": "Attaches a slotted IdsSearchField component to the app menu"
            },
            {
              "kind": "method",
              "name": "onOutsideClick",
              "description": "Inherited from the Popup Open Events Mixin.\nRuns when a click event is propagated to the window.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "filterAccordion",
              "description": "Performs a filter operation on accordion panels",
              "parameters": [
                {
                  "description": "text value with which to filter accordion panels",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              }
            },
            {
              "kind": "method",
              "name": "clearFilterAccordion",
              "description": "Clears a navigation accordion's previous filter result",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#clearChildFilter",
              "description": "Resets the \"child-filter-match\" attribute on any accordion headers who's children matched a previous filter result",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "addOpenEvents",
              "description": "Overrides `addOpenEvents` from IdsPopupOpenEventsMixin to add a global handler\nfor App Menu keyboard events that can cause the menu to close"
            },
            {
              "kind": "method",
              "name": "removeOpenEvents",
              "description": "Overrides `removeOpenEvents` from IdsPopupOpenEventsMixin"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-app-menu/ids-app-menu.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsAppMenu",
            "module": "src/components/ids-app-menu/ids-app-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-area-chart/ids-area-chart.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Area Chart Component",
          "name": "IdsAreaChart",
          "cssParts": [
            {
              "description": "the outside svg element",
              "name": "svg"
            },
            {
              "description": "the dots/markers in the chart",
              "name": "marker"
            },
            {
              "description": "the lines in the chart",
              "name": "line"
            },
            {
              "description": "each area element in the chart",
              "name": "area"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "chartTemplate",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Return the chart data for the internal svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#areas",
              "description": "Generate the svg markup for the area paths",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selectionElements",
              "type": {
                "text": "Array<SVGElement>"
              },
              "description": "Return chart elements that get selection",
              "return": {
                "type": {
                  "text": "Array<SVGElement>"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsLineChart",
                "module": "src/components/ids-line-chart/ids-line-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "DEFAULT_SELECTABLE",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsLineChart",
                "module": "src/components/ids-line-chart/ids-line-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "afterConnectedCallback",
              "inheritedFrom": {
                "name": "IdsLineChart",
                "module": "src/components/ids-line-chart/ids-line-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#preSelected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set initially selected",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsLineChart",
                "module": "src/components/ids-line-chart/ids-line-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "getSelected",
              "return": {
                "type": {
                  "text": "IdsLineChartSelected"
                }
              },
              "description": "Get currently selected",
              "inheritedFrom": {
                "name": "IdsLineChart",
                "module": "src/components/ids-line-chart/ids-line-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSelected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opt",
                  "type": {
                    "text": "IdsLineChartSelectedBy"
                  },
                  "description": "The in comeing options"
                }
              ],
              "description": "Set selected by give indexes",
              "inheritedFrom": {
                "name": "IdsLineChart",
                "module": "src/components/ids-line-chart/ids-line-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "setSelection",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number|string"
                  },
                  "description": "The index value"
                },
                {
                  "name": "isLegendClick",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "True if legend clicked"
                }
              ],
              "description": "Set the selection for given index",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsLineChart",
                "module": "src/components/ids-line-chart/ids-line-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "tooltipElements",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "description": "Return the elements that get tooltip events",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "lineMarkers",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Return the marker data for the svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsLineChart",
                "module": "src/components/ids-line-chart/ids-line-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "markerSize",
              "description": "Set the size of the markers (aka dots/ticks) in the chart",
              "parameters": [
                {
                  "description": "The value to use (in pixels)",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsLineChart",
                "module": "src/components/ids-line-chart/ids-line-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialized",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "svg",
              "type": {
                "text": "SVGElement | null | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "type": {
                "text": "HTMLCanvasElement | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "emptyMessage",
              "type": {
                "text": "IdsEmptyMessage | null | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "legend",
              "type": {
                "text": "HTMLSlotElement | null | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "sectionWidths",
              "type": {
                "text": "SectionWidth[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "sectionWidth",
              "default": "NaN",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "sectionHeights",
              "type": {
                "text": "SectionHeight[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "sectionHeight",
              "default": "NaN",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "resizeToParentHeight",
              "type": {
                "text": "boolean | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "resizeToParentWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "parentWidth",
              "default": "NaN",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "parentHeight",
              "default": "NaN",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "datasource",
              "default": "new IdsDataSource()",
              "description": "Reference to datasource API",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "array"
              },
              "default": "[\n    'beforeselected',\n    'beforedeselected'\n  ]",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "onSelectableChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "On selectable change",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Setup the Event Handling",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "#xMaxTextWidth",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Max width for x-labels text",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "#yMaxTextWidth",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Max width for y-labels text",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "#resizeObserver",
              "privacy": "private",
              "type": {
                "text": "ResizeObserver | undefined"
              },
              "default": "undefined",
              "description": "Holds the resize observer object",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#attachResizeObserver",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attach the resize observer",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "isGrouped",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "resize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "entries",
                  "type": {
                    "text": "object"
                  },
                  "description": "The resize observer entries"
                }
              ],
              "description": "Handle Resizing",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "redraw",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Redraw the chart",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#adjustRTL",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Adjust RTL",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "markerData",
              "type": {
                "text": "IdsChartMarkerData"
              },
              "default": "{\n    markerCount: 0,\n    groupCount: 0,\n    min: 0,\n    max: 0,\n    scale: new NiceScale(this.yAxisMin, 0),\n    gridTop: 0,\n    gridBottom: 0,\n    gridLeft: 0,\n    gridRight: 0,\n    groupTotals: [0],\n  }",
              "description": "The marker data to use to draw the chart",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#calculate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Get the min/max points and calculate the scale",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#horizontalPoints",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set horizontal data points / locations",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#verticalPoints",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set vertical data points / locations",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#sectionWidths",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the widths of each category section (used in other places)",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#sectionHeights",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the heights of each category section (used in other places)",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#addColorVariables",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Add colors in a style sheet to the root so the variables can be used",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#axisTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the insider part of the SVG",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "tooltipTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Overridable method to draw to get the tooltip template",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "attachTooltipEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Setup handlers on tooltip elements",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "tooltipData",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the data groupIndex"
                },
                {
                  "name": "groupIndex",
                  "default": "0",
                  "description": "the data index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Return the data for a tooltip accessible by index",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#tooltipContent",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "elem",
                  "type": {
                    "text": "SVGElement"
                  },
                  "description": "The svg element we will inspect for content"
                }
              ],
              "description": "Return the tooltip content",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "#axisLabelsText",
              "privacy": "private",
              "type": {
                "text": "{\n    bottom: string,\n    end: string,\n    start: string,\n    top: string\n  } | undefined"
              },
              "description": "Holds the axis labels text object",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#resetAxisLabelsText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Reset the axis labels",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setAxisLabels",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opt",
                  "type": {
                    "text": "'bottom'|'end'|'start'|'top'"
                  },
                  "description": "The option"
                }
              ],
              "description": "Set the axis labels",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#axisLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the axis label for the svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#horizontalLines",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the horizontal line data for the svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#verticalLines",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the vertical line data for the svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#formatXLabel",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string|Function"
                  },
                  "description": "The value to format value"
                }
              ],
              "description": "Format the value for the x label in a variety of ways",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "formatYLabel",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string|Function"
                  },
                  "description": "The value to format value"
                }
              ],
              "description": "Format the value for the y label in a variety of ways",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#nameLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#valueLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the value labels data",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#namesLineGap",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#valuesLineGap",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#xLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the x label data for the svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#yLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the y label data for the svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#showEmptyMessage",
              "description": "Show an empty message with settings configuration",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#hideEmptyMessage",
              "description": "Hide the empty message",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#patterns",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the def markup for svg patterns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "onTitleChange",
              "parameters": [
                {
                  "name": "value",
                  "default": "''",
                  "description": "The title value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Handles chart title attribute changes",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The width of the chart (in pixels) or 'inherit' from the parent",
              "parameters": [
                {
                  "description": "The height value",
                  "name": "value",
                  "type": {
                    "text": "number | string"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "horizontal",
              "description": "Flips the orientation to horizontal\nsupported `Axis` and `Bar` type charts",
              "parameters": [
                {
                  "description": "If true will set `horizontal` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the chart (in pixels) or 'inherit' from the parent",
              "parameters": [
                {
                  "description": "The width value",
                  "name": "value",
                  "type": {
                    "text": "number | string"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#getParentDimensions",
              "description": "Get the parent element's width and height",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setContainerWidth",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  },
                  "description": "The width value"
                }
              ],
              "description": "Set the container width (for correct legend and sizing)",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#maxTextWidthForNames",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "description": "Get the max width to render names axis",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#maxTextWidthForValues",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "description": "Get the max width to render values axis",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "xMaxTextWidth",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the max width to render the x-axis",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "yMaxTextWidth",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the max width to render the y-axis",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "margins",
              "description": "Set the left, right, top, bottom margins",
              "parameters": [
                {
                  "description": "The margin values",
                  "name": "value",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "bottomRotateMargin",
              "type": {
                "text": "number"
              },
              "description": "Get bottom rotate margin",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelsMargin",
              "type": {
                "text": "{ bottom: number; end: number; start: number; top: number; }"
              },
              "description": "Get axis labels margin",
              "return": {
                "type": {
                  "text": "{ bottom: number, end: number, start: number, top: number }"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "textWidths",
              "description": "Set the width the text labels/axes take up on each side.",
              "parameters": [
                {
                  "description": "The margin values",
                  "name": "value",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "type": {
                "text": "IdsChartDimensions"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Set the data array of the chart",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ],
              "type": {
                "text": "Array<IdsChartData>"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "yAxisMin",
              "description": "Set the minimum value on the y axis",
              "parameters": [
                {
                  "description": "The value to use",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "showVerticalGridLines",
              "description": "Show the vertical axis grid lines",
              "parameters": [
                {
                  "description": "True or false to show the grid lines",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "showHorizontalGridLines",
              "description": "Show the horizontal axis grid lines",
              "parameters": [
                {
                  "description": "True or false to show the grid lines",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "colors",
              "type": {
                "text": "Array<string>"
              },
              "description": "Utility function to get the colors series being used in this chart",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "color",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "The current index"
                }
              ],
              "description": "Get the color to use based on the index for sequential and custom colors",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "xAxisFormatter",
              "description": "Set the format on the x axis items",
              "parameters": [
                {
                  "description": "A string with the formatting routine or a function for more customization.",
                  "name": "value",
                  "type": {
                    "text": "Function"
                  }
                }
              ],
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "yAxisFormatter",
              "description": "Set the format on the y axis items",
              "parameters": [
                {
                  "description": "A string with the formatting routine or a function for more customization.",
                  "name": "value",
                  "type": {
                    "text": "string|Function"
                  }
                }
              ],
              "type": {
                "text": "any"
              },
              "default": "{\n      notation: 'compact',\n      compactDisplay: 'short'\n    }",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "reanimate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Reanimate the chart",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "cubicBezier",
              "type": {
                "text": "string"
              },
              "description": "Get a reusable snippet to ease the animation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "animated",
              "description": "Set the animation on/off",
              "parameters": [
                {
                  "description": "True if animation is on",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "animationSpeed",
              "description": "Set the animation speed in s",
              "parameters": [
                {
                  "description": "The speed in s",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "alignXLabels",
              "description": "Set the x axis label alignment between start, middle and end",
              "parameters": [
                {
                  "description": "start, middle or end",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "stacked",
              "description": "Stack the data forming a stacked bar chart",
              "parameters": [
                {
                  "description": "True to stack the data",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelBottom",
              "description": "Set the bottom axis label text",
              "parameters": [
                {
                  "description": "of the text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelEnd",
              "description": "Set the end axis label text",
              "parameters": [
                {
                  "description": "of the text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelMargin",
              "description": "Set the margin for axis label text",
              "parameters": [
                {
                  "description": "of the margin",
                  "name": "value",
                  "type": {
                    "text": "string|number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelStart",
              "description": "Set the start axis label text",
              "parameters": [
                {
                  "description": "of the text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelTop",
              "description": "Set the top axis label text",
              "parameters": [
                {
                  "description": "of the text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "rotateNameLabels",
              "description": "Set the rotation for the axis name label text (eg 45deg)",
              "parameters": [
                {
                  "description": "the number of degrees to rotate the text",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "state",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            }
          ],
          "superclass": {
            "name": "IdsLineChart",
            "module": "/src/components/ids-line-chart/ids-line-chart"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsAreaChart",
            "module": "src/components/ids-area-chart/ids-area-chart.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-axis-chart/ids-axis-chart.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Axis Chart Component",
          "name": "IdsAxisChart",
          "cssParts": [
            {
              "description": "the outside container element",
              "name": "container"
            },
            {
              "description": "the svg outer element",
              "name": "chart"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "initialized",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "svg",
              "type": {
                "text": "SVGElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "type": {
                "text": "HTMLCanvasElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "emptyMessage",
              "type": {
                "text": "IdsEmptyMessage | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "legend",
              "type": {
                "text": "HTMLSlotElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "sectionWidths",
              "type": {
                "text": "SectionWidth[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "sectionWidth",
              "default": "NaN"
            },
            {
              "kind": "field",
              "name": "sectionHeights",
              "type": {
                "text": "SectionHeight[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "sectionHeight",
              "default": "NaN"
            },
            {
              "kind": "field",
              "name": "resizeToParentHeight",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "resizeToParentWidth",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "parentWidth",
              "default": "NaN"
            },
            {
              "kind": "field",
              "name": "parentHeight",
              "default": "NaN"
            },
            {
              "kind": "field",
              "name": "datasource",
              "default": "new IdsDataSource()",
              "description": "Reference to datasource API"
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "array"
              },
              "default": "[\n    'beforeselected',\n    'beforedeselected'\n  ]",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "onSelectableChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "On selectable change"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Setup the Event Handling",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#xMaxTextWidth",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Max width for x-labels text"
            },
            {
              "kind": "field",
              "name": "#yMaxTextWidth",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Max width for y-labels text"
            },
            {
              "kind": "field",
              "name": "#resizeObserver",
              "privacy": "private",
              "type": {
                "text": "ResizeObserver | undefined"
              },
              "default": "undefined",
              "description": "Holds the resize observer object"
            },
            {
              "kind": "method",
              "name": "#attachResizeObserver",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attach the resize observer",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isGrouped",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false"
            },
            {
              "kind": "method",
              "name": "resize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "entries",
                  "type": {
                    "text": "object"
                  },
                  "description": "The resize observer entries"
                }
              ],
              "description": "Handle Resizing",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "redraw",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Redraw the chart",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#adjustRTL",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Adjust RTL",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "markerData",
              "type": {
                "text": "IdsChartMarkerData"
              },
              "default": "{\n    markerCount: 0,\n    groupCount: 0,\n    min: 0,\n    max: 0,\n    scale: new NiceScale(this.yAxisMin, 0),\n    gridTop: 0,\n    gridBottom: 0,\n    gridLeft: 0,\n    gridRight: 0,\n    groupTotals: [0],\n  }",
              "description": "The marker data to use to draw the chart"
            },
            {
              "kind": "method",
              "name": "#calculate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Get the min/max points and calculate the scale",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#horizontalPoints",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set horizontal data points / locations",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#verticalPoints",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set vertical data points / locations",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#sectionWidths",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the widths of each category section (used in other places)",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#sectionHeights",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the heights of each category section (used in other places)",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#addColorVariables",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Add colors in a style sheet to the root so the variables can be used",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#axisTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the insider part of the SVG",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "chartTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Overridable method to draw the markers"
            },
            {
              "kind": "method",
              "name": "tooltipElements",
              "return": {
                "type": {
                  "text": "Array<SVGElement>"
                }
              },
              "description": "Child Chart elements that get tooltips",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "tooltipTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Overridable method to draw to get the tooltip template"
            },
            {
              "kind": "method",
              "name": "attachTooltipEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Setup handlers on tooltip elements"
            },
            {
              "kind": "method",
              "name": "tooltipData",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the data groupIndex"
                },
                {
                  "name": "groupIndex",
                  "default": "0",
                  "description": "the data index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Return the data for a tooltip accessible by index",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "#tooltipContent",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "elem",
                  "type": {
                    "text": "SVGElement"
                  },
                  "description": "The svg element we will inspect for content"
                }
              ],
              "description": "Return the tooltip content",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#axisLabelsText",
              "privacy": "private",
              "type": {
                "text": "{\n    bottom: string,\n    end: string,\n    start: string,\n    top: string\n  } | undefined"
              },
              "description": "Holds the axis labels text object"
            },
            {
              "kind": "method",
              "name": "#resetAxisLabelsText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Reset the axis labels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setAxisLabels",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opt",
                  "type": {
                    "text": "'bottom'|'end'|'start'|'top'"
                  },
                  "description": "The option"
                }
              ],
              "description": "Set the axis labels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#axisLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the axis label for the svg",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#horizontalLines",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the horizontal line data for the svg",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#verticalLines",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the vertical line data for the svg",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#formatXLabel",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string|Function"
                  },
                  "description": "The value to format value"
                }
              ],
              "description": "Format the value for the x label in a variety of ways",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "formatYLabel",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string|Function"
                  },
                  "description": "The value to format value"
                }
              ],
              "description": "Format the value for the y label in a variety of ways",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#nameLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#valueLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the value labels data",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#namesLineGap"
            },
            {
              "kind": "method",
              "name": "#valuesLineGap"
            },
            {
              "kind": "method",
              "name": "#xLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the x label data for the svg",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#yLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the y label data for the svg",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#showEmptyMessage",
              "description": "Show an empty message with settings configuration",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#hideEmptyMessage",
              "description": "Hide the empty message",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#patterns",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the def markup for svg patterns",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onTitleChange",
              "parameters": [
                {
                  "name": "value",
                  "default": "''",
                  "description": "The title value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Handles chart title attribute changes"
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The width of the chart (in pixels) or 'inherit' from the parent",
              "parameters": [
                {
                  "description": "The height value",
                  "name": "value",
                  "type": {
                    "text": "number | string"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "horizontal",
              "description": "Flips the orientation to horizontal\nsupported `Axis` and `Bar` type charts",
              "parameters": [
                {
                  "description": "If true will set `horizontal` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the chart (in pixels) or 'inherit' from the parent",
              "parameters": [
                {
                  "description": "The width value",
                  "name": "value",
                  "type": {
                    "text": "number | string"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "method",
              "name": "#getParentDimensions",
              "description": "Get the parent element's width and height",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setContainerWidth",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  },
                  "description": "The width value"
                }
              ],
              "description": "Set the container width (for correct legend and sizing)"
            },
            {
              "kind": "method",
              "name": "#maxTextWidthForNames",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "description": "Get the max width to render names axis",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#maxTextWidthForValues",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "description": "Get the max width to render values axis",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "xMaxTextWidth",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the max width to render the x-axis",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "yMaxTextWidth",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the max width to render the y-axis",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "margins",
              "description": "Set the left, right, top, bottom margins",
              "parameters": [
                {
                  "description": "The margin values",
                  "name": "value",
                  "type": {
                    "text": "object"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "bottomRotateMargin",
              "type": {
                "text": "number"
              },
              "description": "Get bottom rotate margin",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "axisLabelsMargin",
              "type": {
                "text": "{ bottom: number; end: number; start: number; top: number; }"
              },
              "description": "Get axis labels margin",
              "return": {
                "type": {
                  "text": "{ bottom: number, end: number, start: number, top: number }"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "textWidths",
              "description": "Set the width the text labels/axes take up on each side.",
              "parameters": [
                {
                  "description": "The margin values",
                  "name": "value",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "type": {
                "text": "IdsChartDimensions"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Set the data array of the chart",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ],
              "type": {
                "text": "Array<IdsChartData>"
              }
            },
            {
              "kind": "field",
              "name": "yAxisMin",
              "description": "Set the minimum value on the y axis",
              "parameters": [
                {
                  "description": "The value to use",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "showVerticalGridLines",
              "description": "Show the vertical axis grid lines",
              "parameters": [
                {
                  "description": "True or false to show the grid lines",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "showHorizontalGridLines",
              "description": "Show the horizontal axis grid lines",
              "parameters": [
                {
                  "description": "True or false to show the grid lines",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "colors",
              "type": {
                "text": "Array<string>"
              },
              "description": "Utility function to get the colors series being used in this chart",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "color",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "The current index"
                }
              ],
              "description": "Get the color to use based on the index for sequential and custom colors",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "xAxisFormatter",
              "description": "Set the format on the x axis items",
              "parameters": [
                {
                  "description": "A string with the formatting routine or a function for more customization.",
                  "name": "value",
                  "type": {
                    "text": "Function"
                  }
                }
              ],
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "yAxisFormatter",
              "description": "Set the format on the y axis items",
              "parameters": [
                {
                  "description": "A string with the formatting routine or a function for more customization.",
                  "name": "value",
                  "type": {
                    "text": "string|Function"
                  }
                }
              ],
              "type": {
                "text": "any"
              },
              "default": "{\n      notation: 'compact',\n      compactDisplay: 'short'\n    }"
            },
            {
              "kind": "method",
              "name": "reanimate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Reanimate the chart"
            },
            {
              "kind": "field",
              "name": "cubicBezier",
              "type": {
                "text": "string"
              },
              "description": "Get a reusable snippet to ease the animation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "animated",
              "description": "Set the animation on/off",
              "parameters": [
                {
                  "description": "True if animation is on",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "animationSpeed",
              "description": "Set the animation speed in s",
              "parameters": [
                {
                  "description": "The speed in s",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "alignXLabels",
              "description": "Set the x axis label alignment between start, middle and end",
              "parameters": [
                {
                  "description": "start, middle or end",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "stacked",
              "description": "Stack the data forming a stacked bar chart",
              "parameters": [
                {
                  "description": "True to stack the data",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelBottom",
              "description": "Set the bottom axis label text",
              "parameters": [
                {
                  "description": "of the text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "axisLabelEnd",
              "description": "Set the end axis label text",
              "parameters": [
                {
                  "description": "of the text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "axisLabelMargin",
              "description": "Set the margin for axis label text",
              "parameters": [
                {
                  "description": "of the margin",
                  "name": "value",
                  "type": {
                    "text": "string|number"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelStart",
              "description": "Set the start axis label text",
              "parameters": [
                {
                  "description": "of the text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "axisLabelTop",
              "description": "Set the top axis label text",
              "parameters": [
                {
                  "description": "of the text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "rotateNameLabels",
              "description": "Set the rotation for the axis name label text (eg 45deg)",
              "parameters": [
                {
                  "description": "the number of degrees to rotate the text",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "state"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsAxisChart",
            "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-axis-chart/ids-chart-colors.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "QUALITATIVE_COLORS",
          "type": {
            "text": "Array<string>"
          },
          "default": "[\n  '--ids-chart-color-accent-01',\n  '--ids-chart-color-accent-02',\n  '--ids-chart-color-accent-03',\n  '--ids-chart-color-accent-04',\n  '--ids-chart-color-accent-05',\n  '--ids-chart-color-accent-06',\n  '--ids-chart-color-accent-07',\n  '--ids-chart-color-accent-08',\n  '--ids-chart-color-accent-09',\n  '--ids-chart-color-accent-10',\n  '--ids-chart-color-accent-11',\n  '--ids-chart-color-accent-12',\n  '--ids-chart-color-accent-13',\n  '--ids-chart-color-accent-14',\n  '--ids-chart-color-accent-15',\n  '--ids-chart-color-accent-16',\n  '--ids-chart-color-accent-17',\n  '--ids-chart-color-accent-18',\n  '--ids-chart-color-accent-19',\n  '--ids-chart-color-accent-20'\n]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "QUALITATIVE_COLORS",
          "declaration": {
            "name": "QUALITATIVE_COLORS",
            "module": "src/components/ids-axis-chart/ids-chart-colors.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-axis-chart/ids-nice-scale.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "Calculates a nice scale range for a pair of values.",
          "name": "NiceScale",
          "members": [
            {
              "kind": "field",
              "name": "#minPoint",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "description": "The calculated or provided min value to show"
            },
            {
              "kind": "field",
              "name": "#maxPoint",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "description": "The calculated or provided max value"
            },
            {
              "kind": "field",
              "name": "#maxTicks",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "10",
              "description": "The calculated or provided max ticks"
            },
            {
              "kind": "field",
              "name": "#range",
              "privacy": "private",
              "type": {
                "text": "number | undefined"
              },
              "description": "The calculated tick spacing"
            },
            {
              "kind": "field",
              "name": "tickSpacing",
              "type": {
                "text": "number | undefined"
              },
              "description": "The calculated tick spacing"
            },
            {
              "kind": "field",
              "name": "niceMin",
              "type": {
                "text": "number"
              },
              "description": "The calculated nice min value",
              "default": "0"
            },
            {
              "kind": "field",
              "name": "niceMax",
              "type": {
                "text": "number"
              },
              "description": "The calculated nice max value",
              "default": "0"
            },
            {
              "kind": "method",
              "name": "#calculate",
              "description": "Calculate and update values for tick spacing and nice\nminimum and maximum data points on the axis."
            },
            {
              "kind": "method",
              "name": "#niceNum",
              "parameters": [
                {
                  "name": "range",
                  "type": {
                    "text": "number"
                  },
                  "description": "the data range"
                },
                {
                  "name": "round",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "whether to round the result"
                }
              ],
              "description": "Returns a \"nice\" number approximately equal to range Rounds\nthe number if round = true Takes the ceiling if round = false.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "NiceScale",
            "module": "src/components/ids-axis-chart/ids-nice-scale.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-axis-chart/ids-pattern-data.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "patternData",
          "type": {
            "text": "Record<string, string>"
          },
          "default": "{\n  'arrows': '<pattern id=\"arrows\" patternUnits=\"userSpaceOnUse\" width=\"4\" height=\"4\"><path d=\"M1 1V3H2V2H3V1H1Z\" fill=\"#000000\"/></pattern>',\n  'boxes': '<pattern id=\"boxes\" patternUnits=\"userSpaceOnUse\" width=\"4\" height=\"4\"><path fill=\"transparent\" d=\"M0 0h4v4H0z\"/><path d=\"M3 0h1v4H3V0ZM0 3h3v1H0V3Z\" fill=\"#000000\"/></pattern>',\n  'checkers': '<pattern id=\"checkers\" patternUnits=\"userSpaceOnUse\" width=\"4\" height=\"4\"><path fill=\"transparent\" d=\"M0 0h4v4H0z\"/><path d=\"M0 0v1h1v1h1v1h1v1h1V3H3V2H2V1H1V0H0Z\" fill=\"#000000\"/><path d=\"M4 0H3v1H2v1H1v1H0v1h1V3h1V2h1V1h1V0Z\" fill=\"#000000\"/></pattern>',\n  'patches': '<pattern id=\"patches\" patternUnits=\"userSpaceOnUse\" width=\"4\" height=\"4\"><path fill=\"transparent\" d=\"M0 0h4v4H0z\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"M2 3a1 1 0 1 0 0-2 1 1 0 0 0 0 2Zm0 1a2 2 0 1 0 0-4 2 2 0 0 0 0 4Z\" fill=\"#000000\"/></pattern>',\n  'circles': '<pattern id=\"circles\" patternUnits=\"userSpaceOnUse\" width=\"4\" height=\"4\"><path fill=\"transparent\" d=\"M0 0h4v4H0z\"/><circle cx=\"2.5\" cy=\"2.5\" r=\"1.5\" fill=\"#000000\"/></pattern>',\n  'exes': '<pattern id=\"exes\" patternUnits=\"userSpaceOnUse\" width=\"8\" height=\"8\"><path fill=\"transparent\" d=\"M0 0h8v8H0z\"/><path d=\"M1 1h1v1H1V1ZM2 2h1v1H2V2ZM3 3h1v1H3V3ZM4 4h1v1H4V4ZM6 5H5v1h1V5ZM7 6H6v1h1V6ZM2 6H1v1h1V6ZM3 5H2v1h1V5ZM4 4H3v1h1V4ZM5 3H4v1h1V3ZM6 2H5v1h1V2ZM7 1H6v1h1V1Z\" fill=\"#000000\"/></pattern>',\n  'diamonds': '<pattern id=\"diamonds\" patternUnits=\"userSpaceOnUse\" width=\"8\" height=\"8\"><path fill=\"transparent\" d=\"M0 0h8v8H0z\"/><path d=\"M3 0h1v1H3V0ZM1 2h1v1H1V2ZM2 1h1v1H2V1ZM0 3h1v1H0V3ZM0 4h1v1H0V4ZM2 6h1v1H2V6ZM1 5h1v1H1V5ZM3 7h1v1H3V7ZM4 7h1v1H4V7ZM6 5h1v1H6V5ZM5 6h1v1H5V6ZM7 4h1v1H7V4ZM7 3h1v1H7V3ZM5 1h1v1H5V1ZM6 2h1v1H6V2ZM4 0h1v1H4V0Z\" fill=\"#000000\"/></pattern>',\n  'dots': '<pattern id=\"dots\" patternUnits=\"userSpaceOnUse\" width=\"4\" height=\"4\"><path fill=\"transparent\" d=\"M0 0h4v4H0z\"/><path d=\"M0 0h1v1H0V0ZM2 2h1v1H2V2Z\" fill=\"#000000\"/></pattern>',\n  'stars': '<pattern id=\"stars\" patternUnits=\"userSpaceOnUse\" width=\"8\" height=\"8\"><path fill=\"transparent\" d=\"M0 0h8v8H0z\"/><path d=\"M0 0h1v1H0V0ZM7 7h1v1H7V7ZM7 0h1v1H7V0ZM0 7h1v1H0V7ZM3 3h2v2H3V3Z\" fill=\"#000000\"/></pattern>',\n  'mixed': '<pattern id=\"mixed\" patternUnits=\"userSpaceOnUse\" width=\"4\" height=\"4\"><path fill=\"transparent\" d=\"M0 0h8v8H0z\"/><path d=\"M0 0h1v1H0V0ZM7 7h1v1H7V7ZM3 3h2v2H3V3Z\" fill=\"#000000\"/></pattern>',\n  'squares': '<pattern id=\"squares\" patternUnits=\"userSpaceOnUse\" width=\"8\" height=\"8\"><path fill=\"transparent\" d=\"M0 0h8v8H0z\"/><path d=\"M3 0h2v2H3V0ZM3 6h2v2H3V6ZM0 3h2v2H0V3ZM6 3h2v2H6V3Z\" fill=\"#000000\"/></pattern>',\n  'hex': '<pattern id=\"hex\" patternUnits=\"userSpaceOnUse\" width=\"8\" height=\"8\"><path fill=\"transparent\" d=\"M0 0h4v4H0z\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"m2 .599 1.416 2.124-.832.554L2 2.401l-.584.876-.832-.554L2 .599Z\" fill=\"#000000\"/></pattern>',\n  'big-hex': '<pattern id=\"big-hex\" patternUnits=\"userSpaceOnUse\" width=\"8\" height=\"8\"><path fill=\"transparent\" d=\"M0 0h4v4H0z\"/><path fill-rule=\"evenodd\" clip-rule=\"evenodd\" d=\"m2.845 2-.422-.732h-.846L1.155 2l.422.732h.846L2.845 2ZM3 3.732 4 2 3 .268H1L0 2l1 1.732h2Z\" fill=\"#000000\"/></pattern>',\n  'intersect': '<pattern id=\"intersect\" patternUnits=\"userSpaceOnUse\" width=\"8\" height=\"8\"><path fill=\"transparent\" d=\"M0 0h8v8H0z\"/><path d=\"M1 1h1v1H1V1ZM2 2h1v1H2V2ZM3 3h1v1H3V3ZM4 4h1v1H4V4ZM6 5H5v1h1V5ZM7 6H6v1h1V6ZM2 6H1v1h1V6ZM3 5H2v1h1V5ZM6 2H5v1h1V2ZM7 1H6v1h1V1ZM0 7h1v1H0V7Z\" fill=\"#000000\"/></pattern>',\n  'lines': '<pattern id=\"lines\" patternUnits=\"userSpaceOnUse\" width=\"4\" height=\"4\"><path fill=\"transparent\" d=\"M0 0h4v4H0z\"/><path d=\"M4 0H3v1H2v1H1v1H0v1h1V3h1V2h1V1h1V0Z\" fill=\"#000000\"/></pattern>',\n  'bars': '<pattern id=\"bars\" patternUnits=\"userSpaceOnUse\" width=\"8\" height=\"8\"><path fill=\"transparent\" d=\"M0 0h8v8H0z\"/><path d=\"M8 1H7V0h1v1ZM6 2V1h1v1H6ZM5 3h1V2H5v1ZM4 4h1V3H4v1ZM3 5h1V4H3v1ZM2 6h1V5H2v1ZM1 7h1V6H1v1ZM1 7H0v1h1V7Z\" fill=\"#000000\"/></pattern>',\n  'pipes': '<pattern id=\"pipes\" patternUnits=\"userSpaceOnUse\" width=\"4\" height=\"4\"><path fill=\"transparent\" d=\"M0 0h4v4H0z\"/><path fill=\"#000000\" d=\"M1 0h1v4H1z\"/></pattern>',\n  'mesh': '<pattern id=\"mesh\" patternUnits=\"userSpaceOnUse\" width=\"8\" height=\"8\"><path fill=\"transparent\" d=\"M0 0h8v8H0z\"/><path d=\"M1 0h1v8H1V0ZM3 0h1v8H3V0ZM5 0h1v8H5V0ZM7 0h1v8H7V0Z\" fill=\"#000000\"/></pattern>',\n  'pluses': '<pattern id=\"pluses\" patternUnits=\"userSpaceOnUse\" width=\"4\" height=\"4\"><g clip-path=\"url(#a)\"><path fill=\"transparent\" d=\"M0 0h4v4H0z\"/><path d=\"M3 1v1H0V1h3Z\" fill=\"#000000\"/><path d=\"M1 0h1v3H1V0Z\" fill=\"#000000\"/></g><defs><clipPath id=\"a\"><path fill=\"transparent\" d=\"M0 0h4v4H0z\"/></clipPath></defs></pattern>',\n  'waves': '<pattern id=\"waves\" patternUnits=\"userSpaceOnUse\" width=\"4\" height=\"4\"><path fill=\"transparent\" d=\"M0 0h4v4H0z\"/><path d=\"M0 2h1v1H0V2ZM1 1h1v1H1V1ZM2 0h1v1H2V0ZM3 1h1v1H3V1Z\" fill=\"#000000\"/></pattern>',\n  'big-waves': '<pattern id=\"big-waves\" patternUnits=\"userSpaceOnUse\" width=\"8\" height=\"8\"><path fill=\"transparent\" d=\"M0 0h8v8H0z\"/><path d=\"M0 3h1v1H0V3ZM1 2h1v1H1V2ZM2 1h1v1H2V1ZM3 0h1v1H3V0ZM4 1h1v1H4V1ZM5 2h1v1H5V2ZM6 3h1v1H6V3ZM7 4h1v1H7V4ZM7 0h1v1H7V0ZM0 7h1v1H0V7ZM1 6h1v1H1V6ZM2 5h1v1H2V5ZM3 4h1v1H3V4ZM4 5h1v1H4V5ZM5 6h1v1H5V6ZM6 7h1v1H6V7Z\" fill=\"#000000\"/></pattern>',\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "patternData",
          "declaration": {
            "name": "patternData",
            "module": "src/components/ids-axis-chart/ids-pattern-data.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-badge/ids-badge.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Badge Component",
          "name": "IdsBadge",
          "cssParts": [
            {
              "description": "the badge element",
              "name": "badge"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "string[]"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Create the Template for the contents",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "shape",
              "type": {
                "text": "string"
              },
              "description": "Set the shape of the badge",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "The Badge Shape",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string | null"
              },
              "description": "Set the color",
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "parameters": [
                {
                  "description": "The Badge Color [base, error, info, success and warning]",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets the disabled state",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-badge/ids-badge.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsBadge",
            "module": "src/components/ids-badge/ids-badge.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-bar-chart/ids-bar-chart.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Bar Chart Component",
          "name": "IdsBarChart",
          "cssParts": [
            {
              "description": "the outside svg element",
              "name": "svg"
            },
            {
              "description": "the dots/markers in the chart",
              "name": "marker"
            },
            {
              "description": "the lines in the chart",
              "name": "line"
            },
            {
              "description": "each bars element in the chart",
              "name": "bars"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "afterConnectedCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Callback for after connected."
            },
            {
              "kind": "method",
              "name": "afterCalculateCallback",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Callback for after calculate."
            },
            {
              "kind": "method",
              "name": "chartTemplate",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Return the chart data for the internal svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#preSelected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set initially selected",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getSelected",
              "return": {
                "type": {
                  "text": "IdsBarChartSelected"
                }
              },
              "description": "Get currently selected"
            },
            {
              "kind": "method",
              "name": "setSelected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opt",
                  "type": {
                    "text": "IdsBarChartSelectedBy"
                  },
                  "description": "The in comeing options"
                }
              ],
              "description": "Set selected by give indexes"
            },
            {
              "kind": "method",
              "name": "setSelection",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number|string"
                  },
                  "description": "The index value"
                },
                {
                  "name": "isLegendClick",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "True if legend clicked"
                }
              ],
              "description": "Set the selection for given index",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selectionElements",
              "type": {
                "text": "Array<SVGElement>"
              },
              "description": "Return chart elements that get selection",
              "return": {
                "type": {
                  "text": "Array<SVGElement>"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "tooltipElements",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "description": "Return the elements that get tooltip events",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#adjustVerticalLines",
              "description": "Adjust the lines to display category sections",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#bars",
              "description": "Generate the svg markup for the area paths",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#horizontalBars",
              "description": "Generate the svg markup for the horizontal bars.",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "groupCount",
              "type": {
                "text": "number"
              },
              "description": "Number of groups count",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#setIsGrouped",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set if chart type as grouped"
            },
            {
              "kind": "method",
              "name": "#isBetweenZeroToOne",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  },
                  "description": "The number value to check (0-1)"
                }
              ],
              "description": "Check if given value is between zero to one."
            },
            {
              "kind": "field",
              "name": "alignXLabels",
              "description": "Adjust the default for the x labels",
              "parameters": [
                {
                  "description": "start, middle or end",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "barPercentage",
              "description": "Percent (0-1) of the available width each bar should be within the category width.\n1.0 will take the whole category width and put the bars right next to each other.\nif `isGrouped` this value, will use as whole group percentage.",
              "parameters": [
                {
                  "description": "Percent (0-1)",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "categoryPercentage",
              "description": "Percent (0-1) of the available width each category (group) section.",
              "parameters": [
                {
                  "description": "Percent (0-1)",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "DEFAULT_SELECTABLE",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "initialized",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "svg",
              "type": {
                "text": "SVGElement | null | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "type": {
                "text": "HTMLCanvasElement | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "emptyMessage",
              "type": {
                "text": "IdsEmptyMessage | null | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "legend",
              "type": {
                "text": "HTMLSlotElement | null | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "sectionWidths",
              "type": {
                "text": "SectionWidth[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "sectionWidth",
              "default": "NaN",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "sectionHeights",
              "type": {
                "text": "SectionHeight[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "sectionHeight",
              "default": "NaN",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "resizeToParentHeight",
              "type": {
                "text": "boolean | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "resizeToParentWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "parentWidth",
              "default": "NaN",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "parentHeight",
              "default": "NaN",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "datasource",
              "default": "new IdsDataSource()",
              "description": "Reference to datasource API",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "array"
              },
              "default": "[\n    'beforeselected',\n    'beforedeselected'\n  ]",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "onSelectableChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "On selectable change",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Setup the Event Handling",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "#xMaxTextWidth",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Max width for x-labels text",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "#yMaxTextWidth",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Max width for y-labels text",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "#resizeObserver",
              "privacy": "private",
              "type": {
                "text": "ResizeObserver | undefined"
              },
              "default": "undefined",
              "description": "Holds the resize observer object",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#attachResizeObserver",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attach the resize observer",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "isGrouped",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "resize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "entries",
                  "type": {
                    "text": "object"
                  },
                  "description": "The resize observer entries"
                }
              ],
              "description": "Handle Resizing",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "redraw",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Redraw the chart",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#adjustRTL",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Adjust RTL",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "markerData",
              "type": {
                "text": "IdsChartMarkerData"
              },
              "default": "{\n    markerCount: 0,\n    groupCount: 0,\n    min: 0,\n    max: 0,\n    scale: new NiceScale(this.yAxisMin, 0),\n    gridTop: 0,\n    gridBottom: 0,\n    gridLeft: 0,\n    gridRight: 0,\n    groupTotals: [0],\n  }",
              "description": "The marker data to use to draw the chart",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#calculate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Get the min/max points and calculate the scale",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#horizontalPoints",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set horizontal data points / locations",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#verticalPoints",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set vertical data points / locations",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#sectionWidths",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the widths of each category section (used in other places)",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#sectionHeights",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the heights of each category section (used in other places)",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#addColorVariables",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Add colors in a style sheet to the root so the variables can be used",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#axisTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the insider part of the SVG",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "tooltipTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Overridable method to draw to get the tooltip template",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "attachTooltipEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Setup handlers on tooltip elements",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "tooltipData",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the data groupIndex"
                },
                {
                  "name": "groupIndex",
                  "default": "0",
                  "description": "the data index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Return the data for a tooltip accessible by index",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#tooltipContent",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "elem",
                  "type": {
                    "text": "SVGElement"
                  },
                  "description": "The svg element we will inspect for content"
                }
              ],
              "description": "Return the tooltip content",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "#axisLabelsText",
              "privacy": "private",
              "type": {
                "text": "{\n    bottom: string,\n    end: string,\n    start: string,\n    top: string\n  } | undefined"
              },
              "description": "Holds the axis labels text object",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#resetAxisLabelsText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Reset the axis labels",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setAxisLabels",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opt",
                  "type": {
                    "text": "'bottom'|'end'|'start'|'top'"
                  },
                  "description": "The option"
                }
              ],
              "description": "Set the axis labels",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#axisLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the axis label for the svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#horizontalLines",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the horizontal line data for the svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#verticalLines",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the vertical line data for the svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#formatXLabel",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string|Function"
                  },
                  "description": "The value to format value"
                }
              ],
              "description": "Format the value for the x label in a variety of ways",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "formatYLabel",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string|Function"
                  },
                  "description": "The value to format value"
                }
              ],
              "description": "Format the value for the y label in a variety of ways",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#nameLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#valueLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the value labels data",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#namesLineGap",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#valuesLineGap",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#xLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the x label data for the svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#yLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the y label data for the svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#showEmptyMessage",
              "description": "Show an empty message with settings configuration",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#hideEmptyMessage",
              "description": "Hide the empty message",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#patterns",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the def markup for svg patterns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "onTitleChange",
              "parameters": [
                {
                  "name": "value",
                  "default": "''",
                  "description": "The title value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Handles chart title attribute changes",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The width of the chart (in pixels) or 'inherit' from the parent",
              "parameters": [
                {
                  "description": "The height value",
                  "name": "value",
                  "type": {
                    "text": "number | string"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "horizontal",
              "description": "Flips the orientation to horizontal\nsupported `Axis` and `Bar` type charts",
              "parameters": [
                {
                  "description": "If true will set `horizontal` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the chart (in pixels) or 'inherit' from the parent",
              "parameters": [
                {
                  "description": "The width value",
                  "name": "value",
                  "type": {
                    "text": "number | string"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#getParentDimensions",
              "description": "Get the parent element's width and height",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setContainerWidth",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  },
                  "description": "The width value"
                }
              ],
              "description": "Set the container width (for correct legend and sizing)",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#maxTextWidthForNames",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "description": "Get the max width to render names axis",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#maxTextWidthForValues",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "description": "Get the max width to render values axis",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "xMaxTextWidth",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the max width to render the x-axis",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "yMaxTextWidth",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the max width to render the y-axis",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "margins",
              "description": "Set the left, right, top, bottom margins",
              "parameters": [
                {
                  "description": "The margin values",
                  "name": "value",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "bottomRotateMargin",
              "type": {
                "text": "number"
              },
              "description": "Get bottom rotate margin",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelsMargin",
              "type": {
                "text": "{ bottom: number; end: number; start: number; top: number; }"
              },
              "description": "Get axis labels margin",
              "return": {
                "type": {
                  "text": "{ bottom: number, end: number, start: number, top: number }"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "textWidths",
              "description": "Set the width the text labels/axes take up on each side.",
              "parameters": [
                {
                  "description": "The margin values",
                  "name": "value",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "type": {
                "text": "IdsChartDimensions"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Set the data array of the chart",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ],
              "type": {
                "text": "Array<IdsChartData>"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "yAxisMin",
              "description": "Set the minimum value on the y axis",
              "parameters": [
                {
                  "description": "The value to use",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "showVerticalGridLines",
              "description": "Show the vertical axis grid lines",
              "parameters": [
                {
                  "description": "True or false to show the grid lines",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "showHorizontalGridLines",
              "description": "Show the horizontal axis grid lines",
              "parameters": [
                {
                  "description": "True or false to show the grid lines",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "colors",
              "type": {
                "text": "Array<string>"
              },
              "description": "Utility function to get the colors series being used in this chart",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "color",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "The current index"
                }
              ],
              "description": "Get the color to use based on the index for sequential and custom colors",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "xAxisFormatter",
              "description": "Set the format on the x axis items",
              "parameters": [
                {
                  "description": "A string with the formatting routine or a function for more customization.",
                  "name": "value",
                  "type": {
                    "text": "Function"
                  }
                }
              ],
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "yAxisFormatter",
              "description": "Set the format on the y axis items",
              "parameters": [
                {
                  "description": "A string with the formatting routine or a function for more customization.",
                  "name": "value",
                  "type": {
                    "text": "string|Function"
                  }
                }
              ],
              "type": {
                "text": "any"
              },
              "default": "{\n      notation: 'compact',\n      compactDisplay: 'short'\n    }",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "reanimate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Reanimate the chart",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "cubicBezier",
              "type": {
                "text": "string"
              },
              "description": "Get a reusable snippet to ease the animation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "animated",
              "description": "Set the animation on/off",
              "parameters": [
                {
                  "description": "True if animation is on",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "animationSpeed",
              "description": "Set the animation speed in s",
              "parameters": [
                {
                  "description": "The speed in s",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "stacked",
              "description": "Stack the data forming a stacked bar chart",
              "parameters": [
                {
                  "description": "True to stack the data",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelBottom",
              "description": "Set the bottom axis label text",
              "parameters": [
                {
                  "description": "of the text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelEnd",
              "description": "Set the end axis label text",
              "parameters": [
                {
                  "description": "of the text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelMargin",
              "description": "Set the margin for axis label text",
              "parameters": [
                {
                  "description": "of the margin",
                  "name": "value",
                  "type": {
                    "text": "string|number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelStart",
              "description": "Set the start axis label text",
              "parameters": [
                {
                  "description": "of the text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelTop",
              "description": "Set the top axis label text",
              "parameters": [
                {
                  "description": "of the text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "rotateNameLabels",
              "description": "Set the rotation for the axis name label text (eg 45deg)",
              "parameters": [
                {
                  "description": "the number of degrees to rotate the text",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "state",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            }
          ],
          "superclass": {
            "name": "IdsAxisChart",
            "module": "/src/components/ids-axis-chart/ids-axis-chart"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsBarChart",
            "module": "src/components/ids-bar-chart/ids-bar-chart.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-block-grid/ids-block-grid-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Block Grid Item Component",
          "name": "IdsBlockgridItem",
          "members": [
            {
              "kind": "field",
              "name": "checkboxHasFocus",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "template"
            },
            {
              "kind": "method",
              "name": "#handleEvents",
              "description": "Establish Internal Event Handlers",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#attachKeyboardListeners",
              "description": "Establish Internal Keyboard shortcuts",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#handleSelectionChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "object"
                  },
                  "description": "Actual event"
                }
              ],
              "description": "Handle single/multiple selection change",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#handleSingleSelectionChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "object"
                  },
                  "description": "Actual event"
                }
              ],
              "description": "Change single selection for block item",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#handleMultiMixedSelectionChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "object"
                  },
                  "description": "Actual event"
                }
              ],
              "description": "Change multiple selection for block item",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#handlePreSelectionChange",
              "description": "Change single selection for block item",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "object"
              },
              "default": "{\n      checkboxHasFocus: false,\n    }"
            }
          ],
          "events": [
            {
              "name": "click",
              "type": {
                "text": "Event"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-block-grid/ids-block-grid-item.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsBlockgridItem",
            "module": "src/components/ids-block-grid/ids-block-grid-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-block-grid/ids-block-grid.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Block Grid Component",
          "name": "IdsBlockgrid",
          "members": [
            {
              "kind": "field",
              "name": "datasource",
              "type": {
                "text": "any"
              },
              "default": "new IdsDataSource()",
              "description": "Reference to datasource API"
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Create the Template for the contents",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "redraw",
              "description": "Rerender the list by re applying the template",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Set the data array of the blockgrid",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "align",
              "description": "Set the alignment of blockgrid",
              "return": {
                "type": {
                  "text": "string|null"
                }
              },
              "parameters": [
                {
                  "description": "The Blockgrid Alignment",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "selection",
              "description": "Set the selection to a block-grid and it will add selection to all items",
              "parameters": [
                {
                  "description": "The selection value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#gridItems",
              "return": {
                "type": {
                  "text": "Array<IdsBlockGridItem>"
                }
              }
            },
            {
              "kind": "method",
              "name": "#syncSelectionOnItems",
              "description": "Add selection value to all block-grid-items"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-block-grid/ids-block-grid.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsBlockgrid",
            "module": "src/components/ids-block-grid/ids-block-grid.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-breadcrumb/ids-breadcrumb.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Breadcrumb Component",
          "name": "IdsBreadcrumb",
          "cssParts": [
            {
              "name": "breadcrumb"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "onBreadcrumbActivate",
              "type": {
                "text": "(target: HTMLElement, current: HTMLElement) => void | undefined"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#resizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(() => this.#resize())",
              "description": "Attach the resize observer.",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['breadcrumb', 'alternate']",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attaches event handlers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#buildOverflowMenu",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Constructs the overflow"
            },
            {
              "kind": "method",
              "name": "#buildOverflowMenuItem",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "elem",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "the breadcrumb element to use for creating the menu item"
                }
              ],
              "description": "Constructs a single overflow menu item"
            },
            {
              "kind": "method",
              "name": "#emptyOverflowMenu",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Destroys the overflow"
            },
            {
              "kind": "method",
              "name": "#resize",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Resize",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Returns the Inner template contents"
            },
            {
              "kind": "method",
              "name": "add",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "breadcrumb",
                  "type": {
                    "text": "Element"
                  },
                  "description": "The HTML element to add"
                }
              ],
              "description": "Adds an individual breadcrumb to the end of the bread crumb list"
            },
            {
              "kind": "method",
              "name": "delete",
              "return": {
                "type": {
                  "text": "Element | null"
                }
              },
              "description": "Removes the last breadcrumb from the bread crumb list"
            },
            {
              "kind": "method",
              "name": "refreshBreadcrumbMenu",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Refreshes the state of the Breadcrumb's overflow menu based on whether its items are overflowed"
            },
            {
              "kind": "method",
              "name": "#showBreadCrumbMenu",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "contains the render routine for showing truncation and the breadcrumb overflow menu",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#hideBreadCrumbMenu",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "contains the render routine for removing truncation and hiding the breadcrumb overflow menu",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "current",
              "type": {
                "text": "HTMLElement | null"
              },
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "buttonEl",
              "type": {
                "text": "IdsMenuButton | undefined | null"
              },
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "menuContainerEl",
              "type": {
                "text": "HTMLElement | undefined | null"
              },
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "navElem",
              "type": {
                "text": "HTMLElement | undefined | null"
              },
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "overflowMenuItems",
              "type": {
                "text": "Array<any>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              }
            },
            {
              "kind": "field",
              "name": "popupMenuEl",
              "type": {
                "text": "IdsPopupMenu | undefined | null"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "popupMenuGroupEl",
              "type": {
                "text": "IdsMenuGroup | undefined | null"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "truncate",
              "description": "Set if breadcrumb will be truncated if there isn't enough space",
              "parameters": [
                {
                  "description": "truncate if true",
                  "name": "value",
                  "type": {
                    "text": "boolean|null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#enableTruncation",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "contains the render routine for showing truncation and the breadcrumb overflow menu",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#disableTruncation",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "contains the render routine for removing truncation and hiding the breadcrumb overflow menu",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "padding",
              "description": "If set to number the breadcrumb container will have padding added (in pixels)",
              "parameters": [
                {
                  "description": "sets the padding to the container",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "method",
              "name": "isOverflowed",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "reference to the toolbar item to be checked for overflow"
                }
              ]
            },
            {
              "kind": "method",
              "name": "refreshOverflowedItems",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Refreshes the visible state of menu items representing \"overflowed\" elements"
            },
            {
              "kind": "method",
              "name": "hasVisibleActions",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "hasEnabledActions",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "setActiveBreadcrumb",
              "parameters": [
                {
                  "name": "el",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "the target breadcrumb link"
                },
                {
                  "name": "previousActiveBreadcrumbEl",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "a previously-activated Breadcrumb, if applicable"
                }
              ]
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "description": "Inherited from IdsColorVariantMixin to set child element color variants"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-breadcrumb/ids-breadcrumb.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsBreadcrumb",
            "module": "src/components/ids-breadcrumb/ids-breadcrumb.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-button/ids-button-common.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "BUTTON_APPEARANCE",
          "type": {
            "text": "Array<IdsButtonAppearance>"
          },
          "default": "[\n  'default',\n  'primary',\n  'secondary',\n  'tertiary',\n  'primary-destructive',\n  'tertiary-destructive',\n  'swipe-action-left',\n  'swipe-action-right'\n]"
        },
        {
          "kind": "variable",
          "name": "BUTTON_TYPES",
          "type": {
            "text": "Array<string>"
          },
          "default": "[\n  'button', 'submit', 'reset', 'menu'\n]"
        },
        {
          "kind": "variable",
          "name": "BUTTON_DEFAULTS",
          "type": {
            "text": "any"
          },
          "default": "{\n  cssClass: [],\n  disabled: false,\n  hidden: false,\n  tabIndex: 0,\n  iconAlign: undefined,\n  appearance: BUTTON_APPEARANCE[0]\n}"
        },
        {
          "kind": "variable",
          "name": "BUTTON_ATTRIBUTES",
          "type": {
            "text": "string[]"
          },
          "default": "[\n  attributes.APPEARANCE,\n  attributes.CSS_CLASS,\n  attributes.DISABLED,\n  attributes.HIDDEN,\n  attributes.ICON,\n  attributes.ICON_ALIGN,\n  attributes.ID,\n  attributes.NO_PADDING,\n  attributes.NO_MARGINS,\n  attributes.SQUARE,\n  attributes.TEXT,\n  attributes.TYPE,\n  attributes.TABINDEX,\n  attributes.WIDTH\n]"
        },
        {
          "kind": "variable",
          "name": "ICON_ALIGN_CLASSNAMES",
          "type": {
            "text": "array"
          },
          "default": "[\n  'align-icon-start',\n  'align-icon-end'\n]"
        },
        {
          "kind": "variable",
          "name": "baseProtoClasses",
          "type": {
            "text": "array"
          },
          "default": "[\n  'ids-button',\n  'ids-icon-button',\n  'ids-menu-button',\n  'ids-toggle-button'\n]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "BUTTON_APPEARANCE",
          "declaration": {
            "name": "BUTTON_APPEARANCE",
            "module": "src/components/ids-button/ids-button-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "BUTTON_TYPES",
          "declaration": {
            "name": "BUTTON_TYPES",
            "module": "src/components/ids-button/ids-button-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "BUTTON_DEFAULTS",
          "declaration": {
            "name": "BUTTON_DEFAULTS",
            "module": "src/components/ids-button/ids-button-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "BUTTON_ATTRIBUTES",
          "declaration": {
            "name": "BUTTON_ATTRIBUTES",
            "module": "src/components/ids-button/ids-button-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "ICON_ALIGN_CLASSNAMES",
          "declaration": {
            "name": "ICON_ALIGN_CLASSNAMES",
            "module": "src/components/ids-button/ids-button-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "baseProtoClasses",
          "declaration": {
            "name": "baseProtoClasses",
            "module": "src/components/ids-button/ids-button-common.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-button/ids-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Button Component",
          "name": "IdsButton",
          "cssParts": [
            {
              "description": "the button element",
              "name": "button"
            },
            {
              "description": "the icon element",
              "name": "icon"
            },
            {
              "description": "the text element",
              "name": "text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "shouldUpdate",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "#setInitialState"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['alternate', 'alternate-formatter']",
              "description": "Inherited from `IdsColorVariantMixin`",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "field",
              "name": "protoClasses",
              "description": "Figure out the classes",
              "privacy": "private",
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "refreshProtoClasses",
              "description": "Refreshes this button's prototype CSS class",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Inner template contents",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "onHiddenChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "true if hidden"
                }
              ],
              "description": "Handles hidden attribute changes"
            },
            {
              "kind": "method",
              "name": "setAriaText",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLButtonElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "cssClass",
              "parameters": [
                {
                  "description": "containing CSS classes that will be applied to the button\nStrings will be split into an array and separated by whitespace.",
                  "name": "val",
                  "type": {
                    "text": "Array<string>|string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Passes a disabled attribute from the custom element to the button",
              "parameters": [
                {
                  "description": "true if the button will be disabled",
                  "name": "val",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "#tabIndex",
              "privacy": "private",
              "description": "Passes a tabIndex attribute from the custom element to the button",
              "parameters": [
                {
                  "description": "the tabIndex value",
                  "name": "val",
                  "type": {
                    "text": "number | string | null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Gets the current icon used on the button",
              "parameters": [
                {
                  "description": "representing the icon to set",
                  "name": "val",
                  "type": {
                    "text": "string | undefined"
                  }
                }
              ],
              "type": {
                "text": "string | undefined | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "iconEl",
              "type": {
                "text": "HTMLElement | null"
              },
              "description": "Gets the current icon element",
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "iconAlign",
              "description": "Sets the automatic alignment of an existing icon to the 'start' or 'end' of the text",
              "parameters": [
                {
                  "description": "automatic icon alignment setting, if applicable (defaults to undefined).",
                  "name": "val",
                  "type": {
                    "text": "IdsButtonIconAlignment"
                  }
                }
              ],
              "type": {
                "text": "IdsButtonIconAlignment"
              },
              "return": {
                "type": {
                  "text": "IdsButtonIconAlignment"
                }
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "string | null"
              },
              "description": "Set width of button",
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "parameters": [
                {
                  "description": "100%, 90px, 50rem etc.",
                  "name": "w",
                  "type": {
                    "text": "string | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "appendIcon",
              "parameters": [
                {
                  "name": "iconName",
                  "type": {
                    "text": "string"
                  },
                  "description": "The icon name to check"
                }
              ],
              "description": "Check if an icon exists, and adds the icon if it's missing",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeIcon",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Check if an icon exists, and removes the icon if it's present",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setIconAlignment",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Adds/Removes Icon Alignment CSS classes to/from the inner button component.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "hasIncorrectStartElement",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "hasIncorrectEndElement",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "text",
              "parameters": [
                {
                  "description": "the text value",
                  "name": "val",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "method",
              "name": "appendText",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "New text contents"
                }
              ],
              "description": "Check if the text slot exists, and appends it if it's missing",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeText",
              "description": "Checks if the text slot exists, and removes it if necessary",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "appearance",
              "description": "Set the button appearance between 'default', 'primary', 'secondary', 'tertiary', or 'destructive'",
              "parameters": [
                {
                  "description": "a valid button \"appearance\"",
                  "name": "val",
                  "type": {
                    "text": "IdsButtonAppearance | null"
                  }
                }
              ],
              "type": {
                "text": "IdsButtonAppearance"
              },
              "return": {
                "type": {
                  "text": "IdsButtonAppearance"
                }
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Sets the HTMLButtonElement 'type' attribute",
              "type": {
                "text": "IdsButtonType"
              },
              "return": {
                "type": {
                  "text": "IdsButtonType"
                }
              }
            },
            {
              "kind": "field",
              "name": "noMargins",
              "description": "Sets the no margins attribute",
              "parameters": [
                {
                  "description": "string value from the no margins attribute",
                  "name": "n",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "noPadding",
              "parameters": [
                {
                  "description": "true if the button should not have standard padding rules applied",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              },
              "return": {
                "type": {
                  "text": "boolean | string"
                }
              }
            },
            {
              "kind": "field",
              "name": "square",
              "parameters": [
                {
                  "description": "whether the corners of the button as an icon-button should be angled/90°",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "setAppearanceClass",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string | null"
                  },
                  "description": "desired appearance class"
                }
              ],
              "description": "Sets the correct appearance class on the ShadowRoot button.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides the standard \"focus\" behavior to instead pass focus to the inner HTMLButton element."
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Implements callback from IdsColorVariantMixin used to\nupdate the color variant on children components"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-button/ids-button.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsButton",
            "module": "src/components/ids-button/ids-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-calendar/ids-calendar-event.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IdsCalendarEvent",
          "members": [
            {
              "kind": "field",
              "name": "#order",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "#cssClass",
              "privacy": "private",
              "type": {
                "text": "string[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "#dateKey",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "cachedEvent",
              "type": {
                "text": "CalendarEventData | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "cachedEventType",
              "type": {
                "text": "CalendarEventTypeData | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "string[]"
              },
              "static": true,
              "description": "Returns array of observed attributes",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Creates template for ids calendar event"
            },
            {
              "kind": "method",
              "name": "contentTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Creates template for calendar event content"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attach calendar-event event handlers"
            },
            {
              "kind": "field",
              "name": "onLanguageChange",
              "description": "Respond to language changes"
            },
            {
              "kind": "method",
              "name": "refreshContent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Refreshses calendar event content with current settings"
            },
            {
              "kind": "method",
              "name": "recalc",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates calendar event dimensions and position"
            },
            {
              "kind": "method",
              "name": "getDisplayTime",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Creates localized hour range string (ex. 12-5:00pm)"
            },
            {
              "kind": "field",
              "name": "eventData",
              "description": "Gets calendar event data",
              "parameters": [
                {
                  "description": "Event data",
                  "name": "data",
                  "type": {
                    "text": "CalendarEventData"
                  }
                }
              ],
              "type": {
                "text": "CalendarEventData | null"
              },
              "return": {
                "type": {
                  "text": "CalendarEventData"
                }
              }
            },
            {
              "kind": "field",
              "name": "eventTypeData",
              "description": "Gets calendar event type",
              "parameters": [
                {
                  "description": "Event type",
                  "name": "data",
                  "type": {
                    "text": "CalendarEventTypeData"
                  }
                }
              ],
              "type": {
                "text": "CalendarEventTypeData | null"
              },
              "return": {
                "type": {
                  "text": "CalendarEventTypeData"
                }
              }
            },
            {
              "kind": "field",
              "name": "yOffset",
              "description": "Gets y offset",
              "parameters": [
                {
                  "description": "css top value",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "xOffset",
              "description": "Sets horizontal position of calendar event\nStyles left or right depending on rtl flag",
              "parameters": [
                {
                  "description": "css left/right value",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "Gets height",
              "parameters": [
                {
                  "description": "css height value",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "width",
              "description": "Gets width",
              "parameters": [
                {
                  "description": "css width value",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "cssClass",
              "description": "Sets extra css classes to calendar event",
              "parameters": [
                {
                  "description": "array of css classes",
                  "name": "value",
                  "type": {
                    "text": "Array<string>"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "startDate",
              "type": {
                "text": "Date"
              },
              "description": "Gets start date of calendar event",
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "endDate",
              "type": {
                "text": "Date"
              },
              "description": "Gets end date of calendar event",
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "duration",
              "type": {
                "text": "number"
              },
              "description": "Gets duration of event in hours",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "displayTime",
              "description": "Gets displayTime setting value",
              "parameters": [
                {
                  "description": "shows hour range if true",
                  "name": "value",
                  "type": {
                    "text": "string | boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "overflow",
              "description": "Gets overflow value of IdsText",
              "parameters": [
                {
                  "description": "Overflow values for IdsText",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "order",
              "description": "Gets order property",
              "parameters": [
                {
                  "description": "order number",
                  "name": "val",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string"
              },
              "description": "Gets color property from event type data",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "dateKey",
              "description": "Gets dateKey property",
              "parameters": [
                {
                  "description": "dateKey string",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-calendar/ids-calendar-event.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsCalendarEvent",
            "module": "src/components/ids-calendar/ids-calendar-event.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-calendar/ids-calendar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Calendar Component",
          "name": "IdsCalendar",
          "members": [
            {
              "kind": "field",
              "name": "#mobileBreakpoint",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#resizeObserver",
              "privacy": "private",
              "type": {
                "text": "ResizeObserver | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#selectedEventId",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "showDetails",
              "description": "Setting for calendar details pane",
              "parameters": [
                {
                  "description": "show/hides details",
                  "name": "val",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "showLegend",
              "description": "Setting for calendar legend pane",
              "parameters": [
                {
                  "description": "show/hides legend",
                  "name": "val",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "showToday",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not the today button should be shown",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "showToday param value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#updateTodayBtn",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "date",
              "description": "Returns active date",
              "parameters": [
                {
                  "description": "user date input",
                  "name": "val",
                  "type": {
                    "text": "Date|string"
                  }
                }
              ],
              "type": {
                "text": "Date"
              },
              "return": {
                "type": {
                  "text": "Date"
                }
              }
            },
            {
              "kind": "method",
              "name": "#configureResizeObserver",
              "description": "Configures IdsCalendar's resize observer"
            },
            {
              "kind": "method",
              "name": "onEventTypesChange",
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "CalendarEventTypeData[]"
                  },
                  "description": "event types"
                }
              ],
              "description": "Handle event type data changes"
            },
            {
              "kind": "field",
              "name": "onLocaleChange",
              "parameters": [
                {
                  "description": "the new locale object",
                  "name": "locale",
                  "type": {
                    "text": "IdsLocale"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Ids Calendar template"
            },
            {
              "kind": "method",
              "name": "detailAccordionTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "CalendarEventDetail[]"
                  },
                  "description": "event detail data"
                }
              ],
              "description": "Create accordion template for events detail"
            },
            {
              "kind": "method",
              "name": "detailListTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "CalendarEventDetail[]"
                  },
                  "description": "event detail data"
                }
              ],
              "description": "Create list template for events detail"
            },
            {
              "kind": "method",
              "name": "#todayBtnTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#createToolbarTemplate",
              "description": "Renders an IdsToolbar component with calendar controls",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "createNewEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  },
                  "description": "user defined id"
                },
                {
                  "name": "isModal",
                  "default": "false",
                  "description": "opens modal if true",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Creates new calendar event"
            },
            {
              "kind": "method",
              "name": "#eventFormTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "CalendarEventData"
                  },
                  "description": "event data"
                }
              ],
              "description": "Create calendar event form template"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attach calendar event handlers"
            },
            {
              "kind": "method",
              "name": "#getEventFormPopup",
              "return": {
                "type": {
                  "text": "IdsPopup"
                }
              },
              "description": "Get IdsPopup containg calendar event form"
            },
            {
              "kind": "method",
              "name": "#attachToolbarEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Add next/previous/today click events when toolbar is attached"
            },
            {
              "kind": "method",
              "name": "#attachFormEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attach calendar event form handlers"
            },
            {
              "kind": "method",
              "name": "#insertFormPopup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "target to attach popup to"
                },
                {
                  "name": "eventData",
                  "type": {
                    "text": "CalendarEventData"
                  },
                  "description": "calendar event component"
                }
              ],
              "description": "Insert event form popup into view.\nAttach it to provided calendar event"
            },
            {
              "kind": "method",
              "name": "#toggleTimePickers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "disable",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "boolean"
                }
              ],
              "description": "Enables/Disabled time pickers inside event form"
            },
            {
              "kind": "method",
              "name": "positionFormPopup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "target",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "element"
                }
              ],
              "description": "Aligns form popup with provided html target element"
            },
            {
              "kind": "method",
              "name": "#removePopup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Remove calendar event form popup"
            },
            {
              "kind": "method",
              "name": "#submitEventForm",
              "parameters": [
                {
                  "name": "formElem",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "form element"
                }
              ],
              "description": "Gets values from event form and updates event"
            },
            {
              "kind": "method",
              "name": "#toggleEventType",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "checkbox",
                  "type": {
                    "text": "IdsCheckbox"
                  },
                  "description": "IdsCheckbox component"
                },
                {
                  "name": "checked",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if checked"
                }
              ],
              "description": "Update event type data checked state"
            },
            {
              "kind": "method",
              "name": "changeView",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "view",
                  "default": "'month'",
                  "type": {
                    "text": "CalendarViewTypes"
                  },
                  "description": "month | week | day"
                }
              ],
              "description": "Changes view component"
            },
            {
              "kind": "method",
              "name": "changeDate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  },
                  "description": "Date"
                },
                {
                  "name": "isDayView",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if range is 1 day"
                }
              ],
              "description": "Update date range of current view"
            },
            {
              "kind": "method",
              "name": "insertViewTemplate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "template",
                  "type": {
                    "text": "string"
                  },
                  "description": "view component template"
                }
              ],
              "description": "Inserts view component template"
            },
            {
              "kind": "method",
              "name": "relayCalendarData",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Passes calendar event data to active view"
            },
            {
              "kind": "method",
              "name": "#updateActiveDate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  },
                  "description": "active date"
                }
              ],
              "description": "Updates active date\nReflects date attribute without re-render"
            },
            {
              "kind": "method",
              "name": "#updateDatePickerPopupTrigger",
              "parameters": [
                {
                  "name": "locale",
                  "optional": true,
                  "type": {
                    "text": "IdsLocale"
                  },
                  "description": "if provided, sets a different locale from the currently-set locale"
                },
                {
                  "name": "date",
                  "optional": true,
                  "type": {
                    "text": "Date"
                  },
                  "description": "if provided, sets an alternate date from the currently-set date"
                }
              ],
              "description": "Updates the text content of the Date Picker Popup's trigger button"
            },
            {
              "kind": "method",
              "name": "#getSelectedEvents",
              "return": {
                "type": {
                  "text": "CalendarEventData[]"
                }
              }
            },
            {
              "kind": "method",
              "name": "#createMonthTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Renders IdsMonthView component"
            },
            {
              "kind": "method",
              "name": "#createWeekTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "isDayView",
                  "default": "false",
                  "description": "show day view",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Renders IdsWeekView component"
            },
            {
              "kind": "method",
              "name": "#filterEventsByType",
              "return": {
                "type": {
                  "text": "Array<CalendarEventData>"
                }
              },
              "parameters": [
                {
                  "name": "events",
                  "type": {
                    "text": "Array<CalendarEventData>"
                  },
                  "description": "Array<CalendarEventData>"
                }
              ],
              "description": "Filters calendar events by checked event types"
            },
            {
              "kind": "method",
              "name": "formatDateRange",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "Date"
                  },
                  "description": "start date"
                },
                {
                  "name": "end",
                  "type": {
                    "text": "Date"
                  },
                  "description": "end date"
                }
              ],
              "description": "Create localized date range string"
            },
            {
              "kind": "method",
              "name": "formatDuration",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "Date"
                  },
                  "description": "start date"
                },
                {
                  "name": "end",
                  "type": {
                    "text": "Date"
                  },
                  "description": "end date"
                }
              ],
              "description": "Create localized duration string"
            },
            {
              "kind": "method",
              "name": "#formatDetailData",
              "return": {
                "type": {
                  "text": "CalendarEventDetail"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "CalendarEventData"
                  },
                  "description": "calendar event data"
                }
              ],
              "description": "Formats calendar event data for detail views"
            },
            {
              "kind": "method",
              "name": "updateEventDetails",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "selected",
                  "optional": true,
                  "type": {
                    "text": "CalendarEventData[]"
                  },
                  "description": "selected calendar events data"
                }
              ],
              "description": "Updates detail view with selected day events"
            },
            {
              "kind": "method",
              "name": "addEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "eventData",
                  "type": {
                    "text": "CalendarEventData"
                  },
                  "description": "event data"
                }
              ],
              "description": "Add new calendar event data to collection"
            },
            {
              "kind": "method",
              "name": "updateEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "CalendarEventData"
                  },
                  "description": "event data"
                }
              ],
              "description": "Update existing calendar event and rerender events\nIf event doesn't exist, it creates new calendar event"
            },
            {
              "kind": "method",
              "name": "clearEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Remove calendar events data and components"
            },
            {
              "kind": "method",
              "name": "renderLegend",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "eventTypes",
                  "default": "[]",
                  "type": {
                    "text": "CalendarEventTypeData[]"
                  },
                  "description": "event types"
                }
              ],
              "description": "Renders event type legend if none provided"
            },
            {
              "kind": "method",
              "name": "getView",
              "return": {
                "type": {
                  "text": "IdsMonthView|IdsWeekView"
                }
              },
              "description": "Gets current view component"
            },
            {
              "kind": "method",
              "name": "#toggleMonthLegend",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "eventTypes",
                  "type": {
                    "text": "CalendarEventTypeData[]"
                  },
                  "description": "calendar event types data"
                },
                {
                  "name": "show",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "toggle legend"
                }
              ],
              "description": "Toggle Month View Legend"
            },
            {
              "kind": "method",
              "name": "#onResize",
              "parameters": [
                {
                  "name": "entries",
                  "type": {
                    "text": "ResizeObserverEntry[]"
                  },
                  "description": "resize entries"
                }
              ],
              "description": "Handle resize changes and toggle mobile/desktop elements"
            },
            {
              "kind": "field",
              "name": "startDate",
              "type": {
                "text": "Date"
              },
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "endDate",
              "type": {
                "text": "Date"
              },
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "renderEventsData",
              "parameters": [
                {
                  "name": "forceRender",
                  "default": "false",
                  "description": "skip events fetch and render data",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Renders calendar events",
              "return": {
                "type": {
                  "text": "Promise<CalendarEventData>"
                }
              }
            },
            {
              "kind": "method",
              "name": "formatMonthRange",
              "parameters": [
                {
                  "name": "locale",
                  "optional": true,
                  "type": {
                    "text": "IdsLocale"
                  },
                  "description": "an optional, provided IdsLocale object"
                }
              ],
              "description": "Helper to format startDate/endDate to month range",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-calendar/ids-calendar.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsCalendar",
            "module": "src/components/ids-calendar/ids-calendar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-card/ids-card-action.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Card Action Component",
          "name": "IdsCardAction",
          "members": [
            {
              "kind": "method",
              "name": "template",
              "description": "Create the Template for the contents",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsCardAction",
            "module": "src/components/ids-card/ids-card-action.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-card/ids-card.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Card Component",
          "name": "IdsCard",
          "cssParts": [
            {
              "description": "the card element",
              "name": "card"
            },
            {
              "description": "the header element",
              "name": "header"
            },
            {
              "description": "the card content element",
              "name": "content"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "cardTemplate",
              "description": "Method for card template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "actionableButtonTemplate",
              "description": "Method for actionable button card template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "actionableLinkTemplate",
              "description": "Method for actionable link card template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Inner template contents",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#handleEvents",
              "description": "Establish Internal Event Handlers",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setFooterClass",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set css class for footer",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#handleSelectionChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "object"
                  },
                  "description": "Actual event"
                }
              ],
              "description": "Handle single/multiple selection change",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#handleSingleSelectionChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "object"
                  },
                  "description": "Actual event"
                }
              ],
              "description": "Change single selection for cards",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#handleMultipleSelectionChange",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "object"
                  },
                  "description": "Actual event"
                }
              ],
              "description": "Change multiple selection for cards",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "redraw",
              "description": "Redraw the template when some properties change."
            },
            {
              "kind": "field",
              "name": "autoFit",
              "description": "Set the card to auto fit to its parent size",
              "parameters": [
                {
                  "description": "The auto fit",
                  "name": "value",
                  "type": {
                    "text": "boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "autoHeight",
              "description": "Set the card to auto height",
              "parameters": [
                {
                  "description": "The height can be auto to contents",
                  "name": "value",
                  "type": {
                    "text": "boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "borderless",
              "description": "Set the card to borderless",
              "parameters": [
                {
                  "description": "If card should be borderless or not",
                  "name": "value",
                  "type": {
                    "text": "boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "actionable",
              "description": "Set the card to be actionable button.",
              "parameters": [
                {
                  "description": "The card can act as a button.",
                  "name": "value",
                  "type": {
                    "text": "boolean | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "overflow",
              "description": "Set how the container overflows, can be hidden or auto (default)",
              "parameters": [
                {
                  "description": "css property for overflow",
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "href",
              "description": "Set href for actionable link card",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "href for ids-hyperlink",
                  "name": "url",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "height",
              "description": "Set a height and center the card",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "height in pixels",
                  "name": "height",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#setHeight"
            },
            {
              "kind": "field",
              "name": "target",
              "description": "Set target for an actionable link card",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "target value for ids-hyperlink",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "noHeader",
              "description": "Set to true to hide the header space",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-card/ids-card.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsCard",
            "module": "src/components/ids-card/ids-card.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-checkbox/ids-checkbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Checkbox Component",
          "name": "IdsCheckbox",
          "cssParts": [
            {
              "description": "the label element",
              "name": "label"
            },
            {
              "description": "the checkbox input element",
              "name": "input"
            },
            {
              "description": "the label text element",
              "name": "label-checkbox"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "labelAudible",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "isFormComponent",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<any>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#triggeredChange",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Internal change event detection trigger."
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents."
            },
            {
              "kind": "method",
              "name": "attachCheckboxChangeEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attach checkbox change event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "attachNativeEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Establish Internal Event Handlers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle events",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "labelEl",
              "type": {
                "text": "HTMLLabelElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLLabelElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "description": "Sets the checked state to true or false",
              "parameters": [
                {
                  "description": "If true will set `checked` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "color",
              "description": "Sets the checkbox color to one of the colors in our color palette for example emerald",
              "parameters": [
                {
                  "description": "If true will set `color` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets input to disabled",
              "parameters": [
                {
                  "description": "If true will set `disabled` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "horizontal",
              "description": "Flips the checkbox orientation to horizontal",
              "parameters": [
                {
                  "description": "If true will set `horizontal` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "indeterminate",
              "description": "Sets the checkbox to the indeterminate state",
              "parameters": [
                {
                  "description": "The `indeterminate` attribute",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Set the checkbox `value` attribute",
              "parameters": [
                {
                  "description": "the value property",
                  "name": "val",
                  "type": {
                    "text": "string | boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "noAnimation",
              "description": "Disable the check animation",
              "parameters": [
                {
                  "description": "the value property",
                  "name": "value",
                  "type": {
                    "text": "string | boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides the standard \"focus\" behavior to instead pass focus to the inner HTMLInput element."
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-checkbox/ids-checkbox.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsCheckbox",
            "module": "src/components/ids-checkbox/ids-checkbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-checkbox-group/ids-checkbox-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Checkbox Group Component",
          "name": "IdsCheckboxGroup",
          "cssParts": [
            {
              "description": "the checkbox-group element",
              "name": "checkbox-group"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "description": "Set the label of checkbox-group",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "label",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "mixins": [
            {
              "name": "IdsEventsMixin",
              "module": "/src/mixins/ids-events-mixin/ids-events-mixin"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsCheckboxGroup",
            "module": "src/components/ids-checkbox-group/ids-checkbox-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-color/ids-color.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Color",
          "name": "IdsColor",
          "cssParts": [
            {
              "description": "the color swatch element",
              "name": "color"
            },
            {
              "description": "the checkbox element",
              "name": "check"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "swatch",
              "type": {
                "text": "HTMLDivElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "IdsIcon | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "IdsTooltip | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "string[]"
              },
              "static": true,
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "HTML for IdsColor.shadowRoot"
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Gets the disabled attribute",
              "parameters": [
                {
                  "description": "true if color-swatch is disabled",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "hex",
              "parameters": [
                {
                  "description": "The hex code color to use",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "label",
              "parameters": [
                {
                  "description": "Text for this color swatch's label",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "showLabel",
              "parameters": [
                {
                  "description": "show the label underneath",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "tooltip",
              "parameters": [
                {
                  "description": "Text for this color swatch's tooltip",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "size",
              "parameters": [
                {
                  "description": "The color swatch's size (xs, sm, mm, md, lg, full)",
                  "name": "value",
                  "type": {
                    "text": "SwatchSizesType"
                  }
                }
              ],
              "type": {
                "text": "SwatchSizesType"
              },
              "return": {
                "type": {
                  "text": "SwatchSizesType"
                }
              }
            },
            {
              "kind": "field",
              "name": "clickable",
              "parameters": [
                {
                  "description": "The color can have a checkbox",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "color",
              "parameters": [
                {
                  "description": "Use a css variable for the color",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "showTooltip",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Show this color swatch's tooltip"
            },
            {
              "kind": "method",
              "name": "hideTooltip",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Hide this color swatch's tooltip"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle events"
            },
            {
              "kind": "method",
              "name": "#detachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Detach event handlers"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-color/ids-color.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsColor",
            "module": "src/components/ids-color/ids-color.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-color-picker/ids-color-picker.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Color Picker",
          "name": "IdsColorPicker",
          "members": [
            {
              "kind": "field",
              "name": "colorInput",
              "type": {
                "text": "HTMLInputElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "colorPreview",
              "type": {
                "text": "IdsColor | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "triggerBtn",
              "type": {
                "text": "IdsTriggerButton | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "textInput",
              "type": {
                "text": "IdsTriggerField | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "isFormComponent",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "useDefaultSwatches",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "initialized",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "string[]"
              },
              "static": true,
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "HTML for IdsColorPicker.shadowRoot\nContains default slot for color elements"
            },
            {
              "kind": "field",
              "name": "colorPreviewHtml",
              "type": {
                "text": "string"
              },
              "description": "HTML for Color Picker Previw Swatch",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "popup",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "colorPickerAdvancedHtml",
              "type": {
                "text": "string"
              },
              "description": "HTML for Advanced Color Picker Popup",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "swatches",
              "type": {
                "text": "Array<IdsColor>"
              },
              "description": "Available color swatches within this color-picker",
              "return": {
                "type": {
                  "text": "IdsColor[]"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "defaultSwatches",
              "type": {
                "text": "Array<IdsColor>"
              },
              "description": "Default color swatches for this color-picker if no children provided",
              "return": {
                "type": {
                  "text": "Array<IdsColor>"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Gets the value attribute",
              "parameters": [
                {
                  "description": "string value from the value attribute",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "validate",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "tabbable",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "tooltip",
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "advanced",
              "description": "Gets the advanced attribute",
              "parameters": [
                {
                  "description": "true if the \"advanced\" color picker type should be used",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              },
              "return": {
                "type": {
                  "text": "boolean | string"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Gets the disabled attribute",
              "parameters": [
                {
                  "description": "string value from the disabled attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "description": "Gets the readonly attribute",
              "parameters": [
                {
                  "description": "string value from the readonly attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "suppressLabels",
              "description": "Gets the labels attribute",
              "parameters": [
                {
                  "description": "true if color-swatch labels should show instead of hexes",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "suppressTooltips",
              "description": "Gets the tooltips attribute",
              "parameters": [
                {
                  "description": "true if color-swatch tooltips should show",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "compact",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Closes the Color Picker's Popup"
            },
            {
              "kind": "method",
              "name": "open",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Opens the Color Picker's Popup"
            },
            {
              "kind": "method",
              "name": "onOutsideClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Inherited from the Popup Open Events Mixin.\nRuns when a click event is propagated to the window."
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle events"
            },
            {
              "kind": "method",
              "name": "#updateColorPreview",
              "parameters": [
                {
                  "name": "hex",
                  "type": {
                    "text": "string"
                  },
                  "description": "hex"
                }
              ],
              "description": "Update color preview swatch"
            },
            {
              "kind": "method",
              "name": "#detachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle events"
            },
            {
              "kind": "method",
              "name": "#attachColorInputEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#detachColorInputEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Detach events"
            },
            {
              "kind": "method",
              "name": "#configureSwatches",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Configure disabled/labels/tooltips attributes on IdsColor swatches"
            },
            {
              "kind": "method",
              "name": "#findColorSwatch",
              "return": {
                "type": {
                  "text": "IdsColor | undefined"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  },
                  "description": "the color's hex or label"
                }
              ],
              "description": "Find a color-swatch by hex or label"
            },
            {
              "kind": "method",
              "name": "appendClearableButton"
            },
            {
              "kind": "method",
              "name": "removeClearableButton"
            },
            {
              "kind": "method",
              "name": "#getSelectedSwatchValue",
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "description": "Returns the value of the currently-selected color picker swatch"
            },
            {
              "kind": "method",
              "name": "#openCloseColorpicker",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Open/Close popup to show and hide color panel"
            },
            {
              "kind": "method",
              "name": "#updateColor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  },
                  "description": "the color's hex-value or label"
                }
              ],
              "description": "Update color to match setected color"
            },
            {
              "kind": "method",
              "name": "#updateSelectedSwatch",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "colorSwatch",
                  "optional": true,
                  "type": {
                    "text": "IdsColor"
                  },
                  "description": "selected color swatch"
                }
              ],
              "description": "Update selected swatch color"
            },
            {
              "kind": "method",
              "name": "#fieldSwatchSize",
              "description": "Get the field height swatch size",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "onFieldHeightChange",
              "parameters": [
                {
                  "name": "fieldHeight",
                  "type": {
                    "text": "string"
                  },
                  "description": "Field Height"
                }
              ],
              "description": "Push field-height/compact to the container element and swatch"
            },
            {
              "kind": "method",
              "name": "onDirtyTrackerChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "enabled",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "enabled"
                }
              ],
              "description": "Handles dirty tracker settings changes"
            },
            {
              "kind": "method",
              "name": "onLabelChange",
              "parameters": [
                {
                  "name": "label",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "label"
                }
              ],
              "description": "Handles label setting changes"
            },
            {
              "kind": "method",
              "name": "onLabelStateChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "variantName",
                  "type": {
                    "text": "IdsLabelStateMode"
                  },
                  "description": "name"
                }
              ],
              "description": "Handles label state setting changes"
            },
            {
              "kind": "method",
              "name": "#updateColorPickerValues",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "colorValue",
                  "type": {
                    "text": "string | null"
                  },
                  "description": "the value to update"
                }
              ],
              "description": "Update color picker value to match setected color hex value"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-color-picker/ids-color-picker.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsColorPicker",
            "module": "src/components/ids-color-picker/ids-color-picker.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-container/ids-container.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Container Component",
          "name": "IdsContainer",
          "cssParts": [
            {
              "description": "the entire container element",
              "name": "container"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['alternate']",
              "description": "Inherited from `IdsColorVariantMixin`",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "field",
              "name": "padding",
              "description": "If set to number the container will have padding added (in pixels)",
              "parameters": [
                {
                  "description": "sets the padding to the container",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "scrollable",
              "description": "If set to true the container is scrollable",
              "parameters": [
                {
                  "description": "true of false depending if the tag is scrollable",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              }
            },
            {
              "kind": "method",
              "name": "#addReset",
              "description": "Add the reset to the body",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "reset",
              "description": "If set to true body element will get reset",
              "parameters": [
                {
                  "description": "true of false",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-container/ids-container.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsContainer",
            "module": "src/components/ids-container/ids-container.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-counts/ids-counts.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Counts Component",
          "name": "IdsCounts",
          "cssParts": [
            {
              "description": "the link element",
              "name": "link"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "#textProperties"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "field",
              "name": "color",
              "description": "Set the color of the counts",
              "parameters": [
                {
                  "description": "The color value. This can be omitted.\nbase (blue), caution, error, success, warning, or a hex code with the \"#\"",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "compact",
              "description": "Set the compact attribute",
              "parameters": [
                {
                  "description": "true or false. Component will\ndefault to regular size if this property is ommitted.",
                  "name": "value",
                  "type": {
                    "text": "string | boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "href",
              "description": "Set the href attribute",
              "parameters": [
                {
                  "description": "The href link",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            }
          ],
          "mixins": [
            {
              "name": "IdsEventsMixin",
              "module": "/src/mixins/ids-events-mixin/ids-events-mixin"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsCounts",
            "module": "src/components/ids-counts/ids-counts.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-data-grid/ids-data-grid-cell.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IdsDataGridCell",
          "members": [
            {
              "kind": "field",
              "name": "rootNode",
              "type": {
                "text": "any | undefined"
              }
            },
            {
              "kind": "field",
              "name": "isInValid",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "dataGrid",
              "description": "Reference to the data grid parent",
              "return": {
                "type": {
                  "text": "IdsDataGrid"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "column",
              "description": "Get the column definition",
              "return": {
                "type": {
                  "text": "IdsDataGridColumn"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "row",
              "type": {
                "text": "number"
              },
              "description": "Get row of table cell",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "renderCell",
              "description": "Rerender a cell - may be used later"
            },
            {
              "kind": "method",
              "name": "activate",
              "parameters": [
                {
                  "name": "nofocus",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, do not focus the cell"
                }
              ],
              "description": "Set the active cell for focus",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "field",
              "name": "originalValue",
              "type": {
                "text": "unknown"
              },
              "description": "Previous Value before Editing"
            },
            {
              "kind": "field",
              "name": "previousInvalidState",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Previous Invalid state before reseting"
            },
            {
              "kind": "field",
              "name": "editor",
              "type": {
                "text": "IdsDataGridEditor | undefined"
              },
              "description": "The editor element"
            },
            {
              "kind": "field",
              "name": "isEditing",
              "type": {
                "text": "boolean | undefined"
              },
              "description": "If currently in edit mode"
            },
            {
              "kind": "method",
              "name": "startCellEdit",
              "parameters": [
                {
                  "name": "clickEvent",
                  "optional": true,
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "event passed if activated by click (vs keyboard)"
                }
              ],
              "description": "Start Edit Mode"
            },
            {
              "kind": "method",
              "name": "endCellEdit",
              "description": "End Cell Edit"
            },
            {
              "kind": "method",
              "name": "cancelCellEdit",
              "description": "Cancel Cell Edit"
            },
            {
              "kind": "method",
              "name": "#saveCellValue",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "any"
                  },
                  "description": "the value to coerce and save"
                }
              ],
              "description": "Save cell Edit Back into data set"
            },
            {
              "kind": "method",
              "name": "#saveDirtyState",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "the current value"
                }
              ],
              "description": "Save the dirty state info on the row"
            },
            {
              "kind": "method",
              "name": "#saveValidState",
              "parameters": [
                {
                  "name": "validationMessages",
                  "type": {
                    "text": "any"
                  },
                  "description": "the current value"
                }
              ],
              "description": "Save the validation state info on the row"
            },
            {
              "kind": "method",
              "name": "#resetValidState",
              "description": "Set back the valid state"
            },
            {
              "kind": "field",
              "name": "cellCache",
              "type": {
                "text": "{ [key: string]: string }"
              },
              "static": true,
              "default": "{}"
            },
            {
              "kind": "method",
              "name": "template",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "row",
                  "type": {
                    "text": "object"
                  },
                  "description": "The data item for the row"
                },
                {
                  "name": "column",
                  "type": {
                    "text": "object"
                  },
                  "description": "The column data for the row"
                },
                {
                  "name": "rowIndex",
                  "type": {
                    "text": "object"
                  },
                  "description": "The running row-index"
                },
                {
                  "name": "dataGrid",
                  "type": {
                    "text": "IdsDataGrid"
                  },
                  "description": "The dataGrid instance"
                }
              ],
              "description": "Return the Template for the cell contents"
            },
            {
              "kind": "method",
              "name": "clearCache",
              "description": "Clears cell cache"
            },
            {
              "kind": "method",
              "name": "refreshCell",
              "description": "Refreshes the cell"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsDataGridCell",
            "module": "src/components/ids-data-grid/ids-data-grid-cell.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-data-grid/ids-data-grid-column.ts",
      "declarations": [],
      "exports": []
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-data-grid/ids-data-grid-container-arguments.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "containerTypes",
          "type": {
            "text": "object"
          },
          "default": "{\n  BODY_CELL: 'body-cell',\n  BODY_CELL_EDITOR: 'body-cell-editor',\n  HEADER_TITLE: 'header-title',\n  HEADER_ICON: 'header-icon',\n  HEADER_FILTER: 'header-filter',\n  HEADER_FILTER_BUTTON: 'header-filter-button',\n}",
          "description": "Types for container target element."
        },
        {
          "kind": "function",
          "name": "containerHeaderArgs",
          "return": {
            "type": {
              "text": "IdsDataGridContainerArgs"
            }
          },
          "parameters": [
            {
              "name": "this",
              "type": {
                "text": "IdsDataGrid"
              },
              "description": "The data grid object."
            },
            {
              "name": "path",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "List of path element."
            },
            {
              "name": "columnheader",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The column header element."
            }
          ],
          "description": "Get header arguments.",
          "privacy": "private"
        },
        {
          "kind": "function",
          "name": "containerBodyCellArgs",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "this",
              "type": {
                "text": "IdsDataGrid"
              },
              "description": "The data grid object."
            },
            {
              "name": "path",
              "type": {
                "text": "HTMLElement[]"
              },
              "description": "List of path element."
            },
            {
              "name": "cellEl",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The cell element."
            }
          ],
          "description": "Get body cell callback arguments.",
          "privacy": "private"
        },
        {
          "kind": "function",
          "name": "containerArguments",
          "return": {
            "type": {
              "text": "IdsDataGridContainerArgs"
            }
          },
          "parameters": [
            {
              "name": "this",
              "type": {
                "text": "IdsDataGrid"
              },
              "description": "The data grid object."
            },
            {
              "name": "e",
              "type": {
                "text": "MouseEvent"
              },
              "description": "The event."
            }
          ],
          "description": "Get container arguments."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "containerTypes",
          "declaration": {
            "name": "containerTypes",
            "module": "src/components/ids-data-grid/ids-data-grid-container-arguments.ts"
          }
        },
        {
          "kind": "js",
          "name": "containerHeaderArgs",
          "declaration": {
            "name": "containerHeaderArgs",
            "module": "src/components/ids-data-grid/ids-data-grid-container-arguments.ts"
          }
        },
        {
          "kind": "js",
          "name": "containerBodyCellArgs",
          "declaration": {
            "name": "containerBodyCellArgs",
            "module": "src/components/ids-data-grid/ids-data-grid-container-arguments.ts"
          }
        },
        {
          "kind": "js",
          "name": "containerArguments",
          "declaration": {
            "name": "containerArguments",
            "module": "src/components/ids-data-grid/ids-data-grid-container-arguments.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-data-grid/ids-data-grid-contextmenu.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getContextmenuElem",
          "return": {
            "type": {
              "text": "IdsPopupMenu|undefined"
            }
          },
          "parameters": [
            {
              "name": "this",
              "type": {
                "text": "IdsDataGrid"
              },
              "description": "The data grid object."
            },
            {
              "name": "isHeader",
              "default": "false",
              "description": "menu for header vs body.",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "description": "Get context menu element"
        },
        {
          "kind": "function",
          "name": "setContextmenu",
          "parameters": [
            {
              "name": "this",
              "type": {
                "text": "IdsDataGrid"
              },
              "description": "The data grid object."
            }
          ],
          "description": "Set contextmenu",
          "return": {
            "type": {
              "text": "void"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getContextmenuElem",
          "declaration": {
            "name": "getContextmenuElem",
            "module": "src/components/ids-data-grid/ids-data-grid-contextmenu.ts"
          }
        },
        {
          "kind": "js",
          "name": "setContextmenu",
          "declaration": {
            "name": "setContextmenu",
            "module": "src/components/ids-data-grid/ids-data-grid-contextmenu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-data-grid/ids-data-grid-editors.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "InputEditor",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "'input'",
              "description": "The type of editor (i.e. input, dropdown, checkbox ect)"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "IdsInput | undefined"
              },
              "description": "Holds the Editor"
            },
            {
              "kind": "method",
              "name": "init",
              "parameters": [
                {
                  "name": "cell",
                  "optional": true,
                  "type": {
                    "text": "IdsDataGridCell"
                  },
                  "description": "the cell element"
                }
              ],
              "description": "Create an input and set the value and focus states"
            },
            {
              "kind": "method",
              "name": "save"
            },
            {
              "kind": "method",
              "name": "destroy"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "CheckboxEditor",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "'checkbox'",
              "description": "The type of editor (i.e. input, dropdown, checkbox ect)"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "IdsCheckbox | undefined"
              },
              "description": "Holds the Editor"
            },
            {
              "kind": "field",
              "name": "clickEvent",
              "type": {
                "text": "MouseEvent | undefined"
              },
              "description": "MouseEvent if click was used to edit"
            },
            {
              "kind": "method",
              "name": "init",
              "parameters": [
                {
                  "name": "cell",
                  "optional": true,
                  "type": {
                    "text": "IdsDataGridCell"
                  },
                  "description": "the cell element"
                }
              ],
              "description": "Create an input and set the value and focus states"
            },
            {
              "kind": "method",
              "name": "save"
            },
            {
              "kind": "method",
              "name": "destroy"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "DropdownEditor",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "'dropdown'",
              "description": "The type of editor (i.e. input, dropdown, checkbox ect)"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "IdsDropdown | undefined"
              },
              "description": "Holds the Editor"
            },
            {
              "kind": "field",
              "name": "#value",
              "privacy": "private",
              "type": {
                "text": "string | null | undefined"
              },
              "description": "Cache dropdown value"
            },
            {
              "kind": "field",
              "name": "#stopPropagationCb",
              "privacy": "private",
              "description": "Callback reference to handle blur event propagation"
            },
            {
              "kind": "field",
              "name": "clickEvent",
              "type": {
                "text": "MouseEvent | undefined"
              },
              "description": "MouseEvent if click was used to edit"
            },
            {
              "kind": "method",
              "name": "init",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "cell",
                  "optional": true,
                  "type": {
                    "text": "IdsDataGridCell"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "stopPropagation",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "FocusEvent"
                  },
                  "description": "focus event"
                }
              ],
              "description": "Overrides data grid cell's focusout event handling"
            },
            {
              "kind": "method",
              "name": "#attchEventListeners",
              "description": "Attach dropdown event handlers"
            },
            {
              "kind": "method",
              "name": "save"
            },
            {
              "kind": "method",
              "name": "destroy",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Destroy dropdown editor"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "DatePickerEditor",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "privacy": "public",
              "default": "'datepicker'"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "IdsDatePicker | undefined"
              },
              "privacy": "public"
            },
            {
              "kind": "field",
              "name": "clickEvent",
              "type": {
                "text": "MouseEvent | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#value",
              "privacy": "private",
              "type": {
                "text": "Date | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#displayValue",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "method",
              "name": "init",
              "parameters": [
                {
                  "name": "cell",
                  "optional": true,
                  "type": {
                    "text": "IdsDataGridCell"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#buildDatePicker",
              "return": {
                "type": {
                  "text": "IdsDatePicker"
                }
              },
              "parameters": [
                {
                  "name": "cell",
                  "type": {
                    "text": "IdsDataGridCell"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#update",
              "parameters": [
                {
                  "name": "cell",
                  "type": {
                    "text": "IdsDataGridCell"
                  }
                },
                {
                  "name": "dateString",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#stopPropagation",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "FocusEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#attachEventListeners",
              "parameters": [
                {
                  "name": "cell",
                  "optional": true,
                  "type": {
                    "text": "IdsDataGridCell"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "save",
              "parameters": [
                {
                  "name": "cell",
                  "optional": true,
                  "type": {
                    "text": "IdsDataGridCell"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "destroy"
            }
          ]
        },
        {
          "kind": "class",
          "description": "",
          "name": "TimePickerEditor",
          "members": [
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "default": "'timepicker'"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "IdsTimePicker | undefined"
              }
            },
            {
              "kind": "field",
              "name": "clickEvent",
              "type": {
                "text": "MouseEvent | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#originalDate",
              "privacy": "private",
              "type": {
                "text": "Date | undefined"
              }
            },
            {
              "kind": "method",
              "name": "init",
              "parameters": [
                {
                  "name": "cell",
                  "optional": true,
                  "type": {
                    "text": "IdsDataGridCell | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#buildTimePicker",
              "return": {
                "type": {
                  "text": "IdsTimePicker"
                }
              },
              "parameters": [
                {
                  "name": "cell",
                  "type": {
                    "text": "IdsDataGridCell"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#stopPropagation",
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "FocusEvent | CustomEvent"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#attachEventListeners"
            },
            {
              "kind": "method",
              "name": "save"
            },
            {
              "kind": "method",
              "name": "destroy"
            }
          ]
        },
        {
          "kind": "variable",
          "name": "editors",
          "type": {
            "text": "Array<{ type: string, editor?: IdsDataGridEditor }>"
          },
          "default": "[]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "InputEditor",
          "declaration": {
            "name": "InputEditor",
            "module": "src/components/ids-data-grid/ids-data-grid-editors.ts"
          }
        },
        {
          "kind": "js",
          "name": "CheckboxEditor",
          "declaration": {
            "name": "CheckboxEditor",
            "module": "src/components/ids-data-grid/ids-data-grid-editors.ts"
          }
        },
        {
          "kind": "js",
          "name": "DropdownEditor",
          "declaration": {
            "name": "DropdownEditor",
            "module": "src/components/ids-data-grid/ids-data-grid-editors.ts"
          }
        },
        {
          "kind": "js",
          "name": "DatePickerEditor",
          "declaration": {
            "name": "DatePickerEditor",
            "module": "src/components/ids-data-grid/ids-data-grid-editors.ts"
          }
        },
        {
          "kind": "js",
          "name": "TimePickerEditor",
          "declaration": {
            "name": "TimePickerEditor",
            "module": "src/components/ids-data-grid/ids-data-grid-editors.ts"
          }
        },
        {
          "kind": "js",
          "name": "editors",
          "declaration": {
            "name": "editors",
            "module": "src/components/ids-data-grid/ids-data-grid-editors.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-data-grid/ids-data-grid-empty-message.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "emptyMessageTemplate",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "this",
              "type": {
                "text": "IdsDataGrid"
              },
              "description": "The data grid object."
            }
          ],
          "description": "Empty message template markup."
        },
        {
          "kind": "function",
          "name": "setEmptyMessageElements",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "this",
              "type": {
                "text": "IdsDataGrid"
              },
              "description": "The data grid object."
            }
          ],
          "description": "Set empty message elements."
        },
        {
          "kind": "function",
          "name": "resetEmptyMessageElements",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "this",
              "type": {
                "text": "IdsDataGrid"
              },
              "description": "The data grid object."
            }
          ],
          "description": "Reset empty message elements."
        },
        {
          "kind": "function",
          "name": "showEmptyMessage",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "this",
              "type": {
                "text": "IdsDataGrid"
              },
              "description": "The data grid object."
            }
          ],
          "description": "Show the empty message."
        },
        {
          "kind": "function",
          "name": "hideEmptyMessage",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "this",
              "type": {
                "text": "IdsDataGrid"
              },
              "description": "The data grid object."
            }
          ],
          "description": "Hide the empty message."
        },
        {
          "kind": "function",
          "name": "IdsDataGridToggleEmptyMessage",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "this",
              "type": {
                "text": "IdsDataGrid"
              },
              "description": "The data grid object."
            },
            {
              "name": "hide",
              "optional": true,
              "type": {
                "text": "boolean | number"
              },
              "description": "If true, will hide empty message."
            }
          ],
          "description": "Toggle the empty message."
        },
        {
          "kind": "function",
          "name": "setEmptyMessage",
          "return": {
            "type": {
              "text": "void"
            }
          },
          "parameters": [
            {
              "name": "this",
              "type": {
                "text": "IdsDataGrid"
              },
              "description": "The data grid object."
            }
          ],
          "description": "Set empty message."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "emptyMessageTemplate",
          "declaration": {
            "name": "emptyMessageTemplate",
            "module": "src/components/ids-data-grid/ids-data-grid-empty-message.ts"
          }
        },
        {
          "kind": "js",
          "name": "setEmptyMessageElements",
          "declaration": {
            "name": "setEmptyMessageElements",
            "module": "src/components/ids-data-grid/ids-data-grid-empty-message.ts"
          }
        },
        {
          "kind": "js",
          "name": "resetEmptyMessageElements",
          "declaration": {
            "name": "resetEmptyMessageElements",
            "module": "src/components/ids-data-grid/ids-data-grid-empty-message.ts"
          }
        },
        {
          "kind": "js",
          "name": "showEmptyMessage",
          "declaration": {
            "name": "showEmptyMessage",
            "module": "src/components/ids-data-grid/ids-data-grid-empty-message.ts"
          }
        },
        {
          "kind": "js",
          "name": "hideEmptyMessage",
          "declaration": {
            "name": "hideEmptyMessage",
            "module": "src/components/ids-data-grid/ids-data-grid-empty-message.ts"
          }
        },
        {
          "kind": "js",
          "name": "IdsDataGridToggleEmptyMessage",
          "declaration": {
            "name": "IdsDataGridToggleEmptyMessage",
            "module": "src/components/ids-data-grid/ids-data-grid-empty-message.ts"
          }
        },
        {
          "kind": "js",
          "name": "setEmptyMessage",
          "declaration": {
            "name": "setEmptyMessage",
            "module": "src/components/ids-data-grid/ids-data-grid-empty-message.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-data-grid/ids-data-grid-filters.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Data Grid Filters",
          "name": "IdsDataGridFilters",
          "members": [
            {
              "kind": "field",
              "name": "root",
              "type": {
                "text": "any"
              },
              "default": "root"
            },
            {
              "kind": "field",
              "name": "DEFAULTS",
              "type": {
                "text": "object"
              },
              "default": "{\n    disableClientFilter: false,\n    filterable: true,\n    filterWhenTyping: true,\n    filterRowDisabled: false\n  }",
              "description": "Filter defaults."
            },
            {
              "kind": "field",
              "name": "#conditions",
              "privacy": "private",
              "type": {
                "text": "Array<IdsDataGridFilterConditions>"
              },
              "default": "[]",
              "description": "Saved list of conditions to use with filter rerender."
            },
            {
              "kind": "field",
              "name": "#initial",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{}",
              "description": "Initial values to use reset filter."
            },
            {
              "kind": "field",
              "name": "#filterIsProcessing",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Hold filter in-process state."
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "HTMLElement|null"
              },
              "description": "Focused element use with rerender filter.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#suppressFilteredEvent",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Suppress filtered event"
            },
            {
              "kind": "method",
              "name": "text",
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info"
                }
              ],
              "description": "Text filter markup.",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "integer",
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info"
                }
              ],
              "description": "Integer filter markup.",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "decimal",
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info"
                }
              ],
              "description": "Decimal filter markup.",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "contents",
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info"
                }
              ],
              "description": "Contents filter markup.",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "dropdown",
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info"
                }
              ],
              "description": "Dropdown filter markup.",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "checkbox",
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info"
                }
              ],
              "description": "Checkbox filter markup.",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "date",
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info"
                }
              ],
              "description": "Date filter markup.",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "time",
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info"
                }
              ],
              "description": "Time filter markup.",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "filterWrapperById",
              "parameters": [
                {
                  "name": "columnId",
                  "type": {
                    "text": "string"
                  },
                  "description": "The column id"
                }
              ],
              "description": "Get filter wrapper element by given column id",
              "return": {
                "type": {
                  "text": "HTMLElement|undefined"
                }
              }
            },
            {
              "kind": "method",
              "name": "filterTemplate",
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info"
                }
              ],
              "description": "Returns markup for a header cell filter in data grid.",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setDatePicker",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "datePicker",
                  "type": {
                    "text": "object"
                  },
                  "description": "datepicker element."
                },
                {
                  "name": "operator",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "filter type."
                }
              ],
              "description": "Set datepicker type to range or single date.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "resetFilters",
              "description": "Reset all filters as initial state.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setFilterConditions",
              "parameters": [
                {
                  "name": "conditions",
                  "type": {
                    "text": "Array<IdsDataGridFilterConditions>"
                  },
                  "description": "An array of objects with the filter conditions."
                }
              ],
              "description": "Set filter conditions on the UI Only.",
              "return": {
                "type": {
                  "text": "Array<object>"
                }
              }
            },
            {
              "kind": "method",
              "name": "filterConditions",
              "description": "Get filter conditions in array from whats set in the UI.",
              "return": {
                "type": {
                  "text": "Array<object>"
                }
              }
            },
            {
              "kind": "method",
              "name": "applyFilter",
              "parameters": [
                {
                  "name": "conditions",
                  "optional": true,
                  "type": {
                    "text": "Array"
                  },
                  "description": "An array of objects with the filter conditions"
                }
              ],
              "description": "Apply the Filter with the currently selected conditions, or the ones passed in.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setFilterRowDisabled",
              "description": "Set disabled filter row",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "attachFilterSettings",
              "description": "Attach filters setting after data grid render",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "attachFilterEventHandlers",
              "description": "Handle all triggering and handling of events",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#handleMenuButtonSelected",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "IdsMenuItem"
                  },
                  "description": "reference to the menu item that triggered the event"
                }
              ],
              "description": "Handles `selected` events from filter menus",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setFilterWhenTyping",
              "description": "Set filter event when typing for all filter inputs",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#btnAndInputTemplate",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  },
                  "description": "Must be exactly the same as filter method name"
                },
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info."
                }
              ],
              "description": "Returns the markup for filter menu button and input.",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#filterButtonTemplate",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  },
                  "description": "Must be exactly the same as filter method name"
                },
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info."
                }
              ],
              "description": "Returns the markup for filter menu button in header cell.",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#inputTemplate",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  },
                  "description": "Must be exactly the same as filter method name"
                },
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info."
                }
              ],
              "description": "Get input template string",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#triggerFieldTemplate",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  },
                  "description": "Must be exactly the same as filter method name"
                },
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info."
                },
                {
                  "name": "icon",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "if provided, defines the icon used on this field's trigger button"
                },
                {
                  "name": "btnText",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "if provided, defines the text content of this field's trigger button"
                }
              ],
              "description": "Get trigger field template string",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#dropdownTemplate",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  },
                  "description": "Must be exactly the same as filter method name"
                },
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info"
                }
              ],
              "description": "Get dropdown template string",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "filterNodes",
              "description": "Get list of filter wrapper elements",
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#dropdownNotFilterItem",
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info"
                }
              ],
              "description": "Get not filter item for dropdown",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#id",
              "parameters": [
                {
                  "name": "column",
                  "optional": true,
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info"
                }
              ],
              "description": "Get unique id string",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#operators",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  },
                  "description": "The filter type"
                },
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info"
                }
              ],
              "description": "Get button operators by filter type",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#operatorsDataset",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{\n    contains: { value: 'contains', label: 'Contains', icon: 'filter-contains' },\n    doesNotContain: { value: 'does-not-contain', label: 'Does Not Contain', icon: 'filter-does-not-contain' },\n    equals: { value: 'equals', label: 'Equals', icon: 'filter-equals' },\n    doesNotEqual: { value: 'does-not-equal', label: 'Does Not Equals', icon: 'filter-does-not-equal' },\n    isEmpty: { value: 'is-empty', label: 'Is Empty', icon: 'filter-is-empty' },\n    isNotEmpty: { value: 'is-not-empty', label: 'Is Not Empty', icon: 'filter-is-not-empty' },\n    endsWith: { value: 'end-with', label: 'Ends With', icon: 'filter-end-with' },\n    doesNotEndWith: { value: 'does-not-end-with', label: 'Does Not End With', icon: 'filter-does-not-end-with' },\n    startsWith: { value: 'start-with', label: 'Starts With', icon: 'filter-start-with' },\n    doesNotStartWith: { value: 'does-not-start-with', label: 'Does Not Start With', icon: 'filter-does-not-start-with' },\n    lessThan: { value: 'less-than', label: 'Less Than', icon: 'filter-less-than' },\n    lessOrEquals: { value: 'less-equals', label: 'Less Or Equals', icon: 'filter-less-equals' },\n    greaterThan: { value: 'greater-than', label: 'Greater Than', icon: 'filter-greater-than' },\n    greaterOrEquals: { value: 'greater-equals', label: 'Greater Or Equals', icon: 'filter-greater-equals' },\n    inRange: { value: 'in-range', label: 'In Range', icon: 'filter-in-range' },\n    all: { value: 'selected-notselected', label: 'All', icon: 'filter-selected-notselected' },\n    selected: { value: 'selected', label: 'Selected', icon: 'filter-selected' },\n    notSelected: { value: 'not-selected', label: 'Not Selected', icon: 'filter-not-selected' },\n  }",
              "description": "Available operators for filter button."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsDataGridFilters",
            "module": "src/components/ids-data-grid/ids-data-grid-filters.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-data-grid/ids-data-grid-formatters.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IdsDataGridFormatters",
          "members": [
            {
              "kind": "method",
              "name": "#extractValue",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "Record<string, any>"
                  }
                },
                {
                  "name": "field",
                  "type": {
                    "text": "string | undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#columnDisabled",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "row",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "col",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "item",
                  "type": {
                    "text": "Record<string, any>"
                  }
                }
              ],
              "description": "Used to check if the column should show as disabled"
            },
            {
              "kind": "method",
              "name": "#isDisabled",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "row",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "col",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "item",
                  "type": {
                    "text": "Record<string, any>"
                  }
                }
              ],
              "description": "Used to check if the row or column should show as disabled"
            },
            {
              "kind": "method",
              "name": "#color",
              "return": {
                "type": {
                  "text": "string | undefined"
                }
              },
              "parameters": [
                {
                  "name": "row",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "col",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "item",
                  "type": {
                    "text": "Record<string, any>"
                  }
                }
              ],
              "description": "Used to get the color via the function or text"
            },
            {
              "kind": "method",
              "name": "#readonly",
              "return": {
                "type": {
                  "text": "boolean | undefined"
                }
              },
              "parameters": [
                {
                  "name": "row",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "col",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "item",
                  "type": {
                    "text": "Record<string, any>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#size",
              "return": {
                "type": {
                  "text": "string | undefined"
                }
              },
              "parameters": [
                {
                  "name": "row",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "col",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "item",
                  "type": {
                    "text": "Record<string, any>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "text",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                }
              ],
              "description": "Displays a Text String"
            },
            {
              "kind": "method",
              "name": "password",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                }
              ],
              "description": "Masks text with stars"
            },
            {
              "kind": "method",
              "name": "rowNumber",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "_rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Formats a sequencing running count of rows"
            },
            {
              "kind": "method",
              "name": "date",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "api",
                  "type": {
                    "text": "IdsDataGrid"
                  }
                }
              ],
              "description": "Formats date data as a date string in the desired format"
            },
            {
              "kind": "method",
              "name": "time",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "api",
                  "type": {
                    "text": "IdsDataGrid"
                  }
                }
              ],
              "description": "Formats date data as a time string in the desired format"
            },
            {
              "kind": "method",
              "name": "decimal",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "api",
                  "type": {
                    "text": "IdsDataGrid"
                  }
                }
              ],
              "description": "Formats number data as a decimal string in the specific localeAPI"
            },
            {
              "kind": "method",
              "name": "integer",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "api",
                  "type": {
                    "text": "IdsDataGrid"
                  }
                }
              ],
              "description": "Formats number data as a integer string in the specific locale"
            },
            {
              "kind": "method",
              "name": "hyperlink",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Formats number data as a ids-hyperlink"
            },
            {
              "kind": "method",
              "name": "selectionCheckbox",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Shows a selection checkbox column"
            },
            {
              "kind": "method",
              "name": "checkbox",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Shows a checkbox column"
            },
            {
              "kind": "method",
              "name": "selectionRadio",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Shows a selection radio column"
            },
            {
              "kind": "method",
              "name": "button",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Shows an ids-button"
            },
            {
              "kind": "method",
              "name": "badge",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Shows an ids-badge"
            },
            {
              "kind": "method",
              "name": "tree",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                }
              ],
              "description": "Shows an Tree"
            },
            {
              "kind": "method",
              "name": "expander",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                }
              ],
              "description": "Shows an expander button"
            },
            {
              "kind": "method",
              "name": "dropdown",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                }
              ],
              "description": "Shows a dropdown list"
            },
            {
              "kind": "method",
              "name": "alert",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "color",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "icon",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "favorite",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "tag",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "progress",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "rating",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "slider",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "stepChart",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "image",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "card",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rowData",
                  "type": {
                    "text": "Record<string, unknown>"
                  }
                },
                {
                  "name": "columnData",
                  "type": {
                    "text": "IdsDataGridColumn"
                  }
                }
              ]
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsDataGridFormatters",
            "module": "src/components/ids-data-grid/ids-data-grid-formatters.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-data-grid/ids-data-grid-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IdsDataGridHeader",
          "members": [
            {
              "kind": "field",
              "name": "rootNode",
              "type": {
                "text": "any | undefined"
              }
            },
            {
              "kind": "field",
              "name": "headerCheckbox",
              "type": {
                "text": "HTMLElement | undefined"
              }
            },
            {
              "kind": "field",
              "name": "isHeaderExpanderCollapsed",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Tracks the state of the header expander"
            },
            {
              "kind": "field",
              "name": "dataGrid",
              "description": "Reference to the data grid parent",
              "return": {
                "type": {
                  "text": "IdsDataGrid"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "description": "Handle all header related events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachSortHandler",
              "description": "Attach handlers to sort via clicking the headers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachSelectionHandler",
              "description": "Attach handlers to sort via clicking the headers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachResizeHandlers",
              "description": "Establish Drag handlers for resize\nBased on https://htmldom.dev/resize-columns-of-a-table/",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachReorderHandlers",
              "description": "Establish Reorder handlers for moving columns",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setIsHeaderExpanderCollapsed",
              "description": "Set header expander state"
            },
            {
              "kind": "method",
              "name": "setHeaderCheckbox",
              "description": "Set the header checkbox state",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setSortState",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  },
                  "description": "The column id (or field) to set"
                },
                {
                  "name": "ascending",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "Sort ascending (lowest first) or descending (lowest last)"
                }
              ],
              "description": "Set the sort column and sort direction on the UI only"
            },
            {
              "kind": "method",
              "name": "setFilterRow",
              "description": "Set filter row to be shown or hidden",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "template",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "datagrid",
                  "type": {
                    "text": "IdsDataGrid"
                  },
                  "description": "visible columns in the data grid"
                }
              ],
              "description": "Return the Template for the header contents"
            },
            {
              "kind": "method",
              "name": "headerCellTemplate",
              "static": true,
              "parameters": [
                {
                  "name": "dataGrid",
                  "type": {
                    "text": "IdsDataGrid"
                  },
                  "description": "visible columns in the data grid"
                },
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "The column info"
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "The column index"
                }
              ],
              "description": "Returns the markup for a header cell.",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "headerIconTemplate",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "column",
                  "type": {
                    "text": "IdsDataGridColumn | IdsDataGridColumnGroup"
                  },
                  "description": "The column info"
                }
              ],
              "description": "Returns the markup for a header icon."
            },
            {
              "kind": "method",
              "name": "columnGroupsTemplate",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "dataGrid",
                  "type": {
                    "text": "IdsDataGrid"
                  },
                  "description": "The datagrid reference"
                }
              ],
              "description": "Returns the markup for the grouped header cells."
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "object"
              },
              "default": "{\n      headerMenuData: null\n    }"
            }
          ],
          "mixins": [
            {
              "name": "IdsEventsMixin",
              "module": "/src/mixins/ids-events-mixin/ids-events-mixin"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsDataGridHeader",
            "module": "src/components/ids-data-grid/ids-data-grid-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-data-grid/ids-data-grid-row.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IdsDataGridRow",
          "members": [
            {
              "kind": "field",
              "name": "rootNode",
              "type": {
                "text": "any | undefined"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "dataGrid",
              "description": "Reference to the data grid parent",
              "return": {
                "type": {
                  "text": "IdsDataGrid"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "data",
              "type": {
                "text": "Record<string, any>[]"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "columns",
              "type": {
                "text": "IdsDataGridColumn[]"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "visibleColumns",
              "type": {
                "text": "IdsDataGridColumn[]"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "dimensions",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Set the row disabled state.",
              "parameters": [
                {
                  "description": "the value",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "rowIndex",
              "description": "Set the row index. This index will be used to popuplate data from ids-data-grid.",
              "parameters": [
                {
                  "description": "the index",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "rowCache",
              "type": {
                "text": "{ [key: string]: string }"
              },
              "static": true,
              "default": "{}",
              "description": "Implements row cache"
            },
            {
              "kind": "method",
              "name": "renderRow",
              "parameters": [
                {
                  "name": "row",
                  "type": {
                    "text": "number"
                  },
                  "description": "the row index"
                }
              ],
              "description": "Render the row again from the cache or template."
            },
            {
              "kind": "method",
              "name": "refreshRow",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Refreshes the row's cells"
            },
            {
              "kind": "method",
              "name": "#setAttributes",
              "description": "Set row attributes and classes"
            },
            {
              "kind": "method",
              "name": "toggleSelection",
              "description": "Toggle Selection on the row element (via click/keyboard in the main dataGrid)"
            },
            {
              "kind": "method",
              "name": "toggleExpandCollapse",
              "parameters": [
                {
                  "name": "noTrigger",
                  "default": "false",
                  "description": "If true, will not trigger event",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Toggle Expand/Collpase on the row element"
            },
            {
              "kind": "method",
              "name": "toggleRowActivation",
              "description": "Toggle activation on the row element"
            },
            {
              "kind": "method",
              "name": "toggleChildRowSelection",
              "parameters": [
                {
                  "name": "isSelect",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true or false to select or deselect"
                }
              ],
              "description": "Select/Deselect all child rows",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "Select this row node",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "updateCells",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the row index"
                }
              ],
              "description": "Updates some attributes/classes on a single row's cells",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "template",
              "static": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "row",
                  "type": {
                    "text": "Record<string, unknown>"
                  },
                  "description": "The row data object"
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "The data row index"
                },
                {
                  "name": "ariaRowIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "The indexes for aria-rowindex"
                },
                {
                  "name": "dataGrid",
                  "type": {
                    "text": "IdsDataGrid"
                  },
                  "description": "The dataGrid instance"
                }
              ],
              "description": "Return the row's markup"
            },
            {
              "kind": "method",
              "name": "cellsHTML",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the cells' markup"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsDataGridRow",
            "module": "src/components/ids-data-grid/ids-data-grid-row.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-data-grid/ids-data-grid-save-settings-mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "A mixin that adds save user settings functionality to data grid",
          "name": "IdsDataGridSaveSettingsMixin",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "settings",
              "type": {
                "text": "object"
              },
              "default": "{\n    activePage: 'active-page',\n    columns: 'columns',\n    filter: 'filter',\n    pageSize: 'page-size',\n    rowHeight: 'row-height',\n    sortOrder: 'sort-order'\n  }",
              "description": "Settings to use with local storage."
            },
            {
              "kind": "field",
              "name": "#valSettings",
              "privacy": "private",
              "description": "List of values for each setting."
            },
            {
              "kind": "field",
              "name": "#saveMode",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "State to check if can be able to save."
            },
            {
              "kind": "field",
              "name": "#restored",
              "privacy": "private",
              "type": {
                "text": "string[]"
              },
              "default": "[]",
              "description": "List of restored options."
            },
            {
              "kind": "field",
              "name": "saveActivePage",
              "description": "Sets to save active page",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "saveColumns",
              "description": "Sets to save columns",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "saveFilter",
              "description": "Sets to save filter",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "savePageSize",
              "description": "Sets to save page size",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "saveRowHeight",
              "description": "Sets to save row height",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "saveSortOrder",
              "description": "Sets to save sort order",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "saveUserSettings",
              "description": "Sets to save all user settings",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#setBoolAttribute",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  },
                  "description": "The attribute name"
                },
                {
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  },
                  "description": "The value"
                }
              ],
              "description": "Sets the given boolean attribute.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#canUseLocalStorage",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Checks if local storage can be use.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#keyTobeUsed",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "setting",
                  "type": {
                    "text": "string"
                  },
                  "description": "The setting name."
                },
                {
                  "name": "prefix",
                  "default": "''",
                  "description": "Optional prefix string to make the id more unique.",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "suffix",
                  "default": "''",
                  "description": "Optional suffix string to make the id more unique.",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "uniqueId",
                  "default": "(this as unknown as IdsDataGrid).uniqueId ?? this.getAttribute('id') ?? ''",
                  "description": "The uniqueId.",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Get key to be used with local storage.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#keyAndValue",
              "return": {
                "type": {
                  "text": "{ key: string, value: any }"
                }
              },
              "parameters": [
                {
                  "name": "setting",
                  "type": {
                    "text": "string"
                  },
                  "description": "The setting."
                }
              ],
              "description": "Get key/value for given setting.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#save",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  },
                  "description": "The key."
                },
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  },
                  "description": "The value."
                }
              ],
              "description": "Save given key/value to local storage.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "saveSetting",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "setting",
                  "type": {
                    "text": "string"
                  },
                  "description": "The setting."
                }
              ],
              "description": "Save the given setting."
            },
            {
              "kind": "method",
              "name": "saveAllSettings",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Save all user settings to local storage."
            },
            {
              "kind": "method",
              "name": "savedSetting",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "parameters": [
                {
                  "name": "setting",
                  "type": {
                    "text": "string"
                  },
                  "description": "The setting."
                }
              ],
              "description": "Get saved value for given setting."
            },
            {
              "kind": "method",
              "name": "allSavedSettings",
              "return": {
                "type": {
                  "text": "IdsDataGridSaveSettings"
                }
              },
              "description": "Get saved all user settings."
            },
            {
              "kind": "method",
              "name": "clearSetting",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "setting",
                  "type": {
                    "text": "string"
                  },
                  "description": "The setting."
                },
                {
                  "name": "key",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "The unique user key stored with local storage."
                }
              ],
              "description": "Clear the given saved setting from local storage",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "clearAllSettings",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "userKeys",
                  "default": "{}",
                  "type": {
                    "text": "any"
                  },
                  "description": "The setting/value."
                }
              ],
              "description": "Clear saved all user settings from local storage."
            },
            {
              "kind": "method",
              "name": "restoreSetting",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "setting",
                  "type": {
                    "text": "string"
                  },
                  "description": "The setting."
                },
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "any"
                  },
                  "description": "The value."
                }
              ],
              "description": "Restore given setting."
            },
            {
              "kind": "method",
              "name": "restoreAllSettings",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "userSettings",
                  "default": "{}",
                  "type": {
                    "text": "IdsDataGridSaveSettings"
                  },
                  "description": "The setting/value."
                }
              ],
              "description": "Restore saved all user settings from local storage."
            },
            {
              "kind": "method",
              "name": "#restoreUserSetting",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "setting",
                  "type": {
                    "text": "string"
                  },
                  "description": "The setting."
                },
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  },
                  "description": "The value."
                },
                {
                  "name": "callback",
                  "type": {
                    "text": "Function"
                  },
                  "description": "The callback function."
                }
              ],
              "description": "Restore given user setting.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#restoreActivePage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "default": "this.savedSetting(this.settings.activePage)",
                  "description": "The value.",
                  "type": {
                    "text": "number | null"
                  }
                }
              ],
              "description": "Restore active page."
            },
            {
              "kind": "method",
              "name": "#restoreColumns",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "default": "this.savedSetting(this.settings.columns)",
                  "description": "The value.",
                  "type": {
                    "text": "IdsDataGridColumn[] | null"
                  }
                }
              ],
              "description": "Restore columns."
            },
            {
              "kind": "method",
              "name": "#restoreFilter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "default": "this.savedSetting(this.settings.filter)",
                  "description": "The value.",
                  "type": {
                    "text": "IdsDataGridFilterConditions[] | null"
                  }
                }
              ],
              "description": "Restore filter."
            },
            {
              "kind": "method",
              "name": "#restorePageSize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "default": "this.savedSetting(this.settings.pageSize)",
                  "description": "The value.",
                  "type": {
                    "text": "number | null"
                  }
                }
              ],
              "description": "Restore Page size."
            },
            {
              "kind": "method",
              "name": "#restoreRowHeight",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "default": "this.savedSetting(this.settings.rowHeight)",
                  "description": "The value.",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "description": "Restore row height."
            },
            {
              "kind": "method",
              "name": "#restoreSortOrder",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "default": "this.savedSetting(this.settings.sortOrder)",
                  "description": "The value.",
                  "type": {
                    "text": "{ id: string, ascending: boolean } | null"
                  }
                }
              ],
              "description": "Restore sort order."
            },
            {
              "kind": "method",
              "name": "saveSettings",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets to save user settings."
            },
            {
              "kind": "method",
              "name": "attachSaveSettingsEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle all save settings events"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "any"
              },
              "description": "Accepts a superclass and creates a new subclass from it"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsDataGridSaveSettingsMixin",
            "module": "src/components/ids-data-grid/ids-data-grid-save-settings-mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-data-grid/ids-data-grid-tooltip-mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "A mixin that adds tooltip functionality to data grid",
          "name": "IdsDataGridTooltipMixin",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "suppressTooltips",
              "description": "Set the tooltips on/off.",
              "parameters": [
                {
                  "description": "True as turn off",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#tooltip",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "description": "Single tooltip use with all grid elements"
            },
            {
              "kind": "field",
              "name": "#types",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{\n    BODY_CELL: 'body-cell',\n    FILTER_BUTTON: 'filter-button',\n    HEADER_TITLE: 'header-title',\n    HEADER_ICON: 'header-icon'\n  }",
              "description": "Types of tooltip as unique identifier"
            },
            {
              "kind": "method",
              "name": "setupTooltip",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Setup tooltip",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#handleTooltip",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "The event"
                }
              ],
              "description": "Handle tooltip",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#tooltipBodyCell",
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "HTMLElement[]"
                  },
                  "description": "List of path element."
                }
              ],
              "description": "Handle tooltip for body cell",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#tooltipHeaderTitleOrIcon",
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "HTMLElement[]"
                  },
                  "description": "List of path element."
                }
              ],
              "description": "Handle tooltip for header title or header icon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#tooltipFilterButton",
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "HTMLElement[]"
                  },
                  "description": "List of path element."
                }
              ],
              "description": "Handle tooltip for header filter button",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setTooltipCssPart",
              "parameters": [
                {
                  "name": "opt",
                  "type": {
                    "text": "object"
                  },
                  "description": "The options."
                }
              ],
              "description": "Set tooltip css part.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#tooltipContent",
              "parameters": [
                {
                  "name": "opt",
                  "type": {
                    "text": "object"
                  },
                  "description": "The options."
                }
              ],
              "description": "Get tooltip content to display.",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#tooltipOptions",
              "parameters": [
                {
                  "name": "opt",
                  "type": {
                    "text": "object"
                  },
                  "description": "The options."
                }
              ],
              "description": "Get tooltip settings.",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#showTooltip",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opt",
                  "type": {
                    "text": "object"
                  },
                  "description": "The options."
                }
              ],
              "description": "Handle to show tooltip",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#hideTooltip",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle to hide tooltip",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#mouseOut",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "method",
              "name": "#attachTooltip",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Add tooltip and attach all tooltip events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#detachTooltip",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Detach tooltip and all tooltip events",
              "privacy": "private"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "any"
              },
              "description": "Accepts a superclass and creates a new subclass from it"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsDataGridTooltipMixin",
            "module": "src/components/ids-data-grid/ids-data-grid-tooltip-mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-data-grid/ids-data-grid.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Data Grid Component",
          "name": "IdsDataGrid",
          "cssParts": [
            {
              "description": "the table main element",
              "name": "table"
            },
            {
              "description": "the table body element",
              "name": "body"
            },
            {
              "description": "the header element",
              "name": "header"
            },
            {
              "description": "the header cells",
              "name": "header-cell"
            },
            {
              "description": "the row elements",
              "name": "row"
            },
            {
              "description": "the cell elements",
              "name": "cell"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "initialized",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isResizing",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "activeCell",
              "type": {
                "text": "Record<string, any>"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "autoFitSet",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "currentColumns",
              "type": {
                "text": "IdsDataGridColumn[] | undefined"
              }
            },
            {
              "kind": "field",
              "name": "sortColumn",
              "type": {
                "text": "{ id: string, ascending: boolean } | undefined"
              }
            },
            {
              "kind": "field",
              "name": "emptyMessageElements",
              "type": {
                "text": "IdsDataGridEmptyMessageElements | undefined"
              }
            },
            {
              "kind": "field",
              "name": "cacheHash"
            },
            {
              "kind": "field",
              "name": "contextmenuTypes",
              "type": {
                "text": "object"
              },
              "default": "{ ...containerTypes }",
              "description": "Types for contextmenu."
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "IdsDataGridHeader"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "body",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "rows",
              "type": {
                "text": "IdsDataGridRow[]"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "wrapper",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "datasource",
              "type": {
                "text": "IdsDataSource"
              },
              "readonly": true,
              "default": "new IdsDataSource()",
              "description": "Reference to datasource API"
            },
            {
              "kind": "field",
              "name": "filters",
              "readonly": true,
              "default": "new IdsDataGridFilters(this)",
              "description": "Filters instance attached to component"
            },
            {
              "kind": "field",
              "name": "formatters",
              "type": {
                "text": "IdsDataGridFormatters"
              },
              "readonly": true,
              "default": "new IdsDataGridFormatters()",
              "description": "API for list of formatters"
            },
            {
              "kind": "field",
              "name": "editors",
              "readonly": true,
              "default": "editors",
              "description": "API for list of editors"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "array"
              },
              "default": "[\n    'beforemenushow',\n    'beforetooltipshow',\n  ]",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Inner template contents",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "collapseAll",
              "description": "Collapse all expandable or tree rows.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "expandAll",
              "description": "Expand all expandable or tree rows.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "toggleAll",
              "parameters": [
                {
                  "name": "opt",
                  "default": "false",
                  "type": {
                    "text": "boolean | string"
                  },
                  "description": "false: will expand all, true: will collapse all"
                }
              ],
              "description": "Toggle collapse/expand all expandable or tree rows.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "toggleEmptyMessage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "hide",
                  "optional": true,
                  "type": {
                    "text": "boolean | number"
                  },
                  "description": "If true, will hide empty message."
                }
              ],
              "description": "Toggle the empty message."
            },
            {
              "kind": "method",
              "name": "applyFilter",
              "parameters": [
                {
                  "name": "conditions",
                  "type": {
                    "text": "Array"
                  },
                  "description": "An array of objects with the filter conditions."
                }
              ],
              "description": "Apply the Filter with the currently selected conditions, or the ones passed in.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "redrawBody",
              "description": "Sync and then redraw the body section",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#redrawBodyTemplate",
              "description": "Redraw the body area",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "redraw",
              "description": "Redraw the list by reapplying the template",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "afterRedraw",
              "description": "Do some things after redraw"
            },
            {
              "kind": "field",
              "name": "contextmenuInfo",
              "type": {
                "text": "{\n    menu?: IdsPopupMenu,\n    target?: HTMLElement,\n    callbackArgs?: IdsDataGridContextmenuArgs\n  }"
              },
              "default": "{}",
              "description": "Contextmenu stuff use for info and events",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isDynamicContextmenu",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Track contextmenu data dynamicly changed by the user.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "bodyTemplate",
              "description": "Body template markup",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "resetCache",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "rowIndex",
                  "optional": true,
                  "type": {
                    "text": "number|undefined"
                  },
                  "description": "(optional) row-index to target specific rowCache to clear"
                }
              ],
              "description": "Simple way to clear cache until a better cache-busting strategy is in implemented"
            },
            {
              "kind": "method",
              "name": "bodyInnerTemplate",
              "description": "Body inner template markup",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "rowIsSelected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "The row index"
                }
              ],
              "description": "Check if row is selected."
            },
            {
              "kind": "field",
              "name": "#lastSelectedRow",
              "privacy": "private",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "Keep flag for last selected row"
            },
            {
              "kind": "field",
              "name": "#lastShiftedRow",
              "privacy": "private",
              "type": {
                "text": "number | null"
              },
              "default": "null",
              "description": "Keep reference to last shifted row"
            },
            {
              "kind": "method",
              "name": "#resetLastSelectedRow",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Reset flag for last selected row",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#resetLastShiftedRow",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Reset reference to last shifted row",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#toggleSelectionInBetween",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "The row index"
                }
              ],
              "description": "Toggle rows selection between given index and last selected",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#getSelection",
              "return": {
                "type": {
                  "text": "Selection|null"
                }
              },
              "description": "Get current selection",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "description": "Handle all triggering and handling of events",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onLocaleChange",
              "description": "Handle Locale (and language) change"
            },
            {
              "kind": "method",
              "name": "moveColumn",
              "parameters": [
                {
                  "name": "fromIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "The column index to movex"
                },
                {
                  "name": "toIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "The new column index"
                }
              ],
              "description": "Move a column to a new position. Use `columnIndex` to get the column by id."
            },
            {
              "kind": "method",
              "name": "#attachKeyboardListeners",
              "description": "Establish Internal Keyboard shortcuts",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#editAdjacentCell",
              "return": {
                "type": {
                  "text": "IdsDataGridCell"
                }
              },
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "IdsDirection"
                  },
                  "description": "The cell element"
                }
              ],
              "description": "Find the next editable cell and start editing it",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#handleEditMode",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  },
                  "description": "The cell event"
                },
                {
                  "name": "cellNode",
                  "type": {
                    "text": "IdsDataGridCell"
                  },
                  "description": "The cell element"
                }
              ],
              "description": "Save or start editing",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setColumnWidths",
              "description": "Set the column widths by generating the lengths in the css grid\nand setting the css variable.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setColumnWidth",
              "parameters": [
                {
                  "name": "columnId",
                  "type": {
                    "text": "string"
                  },
                  "description": "The column id"
                },
                {
                  "name": "width",
                  "type": {
                    "text": "number"
                  },
                  "description": "The column id (or field) to sort"
                }
              ],
              "description": "Set one column's width (used for resizing)"
            },
            {
              "kind": "method",
              "name": "setColumnVisible",
              "parameters": [
                {
                  "name": "columnId",
                  "type": {
                    "text": "string"
                  },
                  "description": "The column id"
                },
                {
                  "name": "visible",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "True to hide or false to show"
                }
              ],
              "description": "Set a column to visible or hidden"
            },
            {
              "kind": "method",
              "name": "#setColumnGroupsWidth",
              "description": "Set the column groups widths based on the provided colspans.\nWith some error handling.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setSortColumn",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  },
                  "description": "The column id (or field) to sort"
                },
                {
                  "name": "ascending",
                  "default": "true",
                  "description": "Sort ascending (lowest first) or descending (lowest last)",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Set the sort column and sort direction"
            },
            {
              "kind": "method",
              "name": "setSortState",
              "parameters": [
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  },
                  "description": "The column id (or field) to set"
                },
                {
                  "name": "ascending",
                  "default": "true",
                  "description": "Sort ascending (lowest first) or descending (lowest last)",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Set the sort column and sort direction on the UI only"
            },
            {
              "kind": "method",
              "name": "columnGroupDataById",
              "parameters": [
                {
                  "name": "columnGroupId",
                  "type": {
                    "text": "string"
                  },
                  "description": "The column group id"
                }
              ],
              "description": "Get column group data by given column group id",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "columnGroupIdxById",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "columnGroupId",
                  "type": {
                    "text": "string"
                  },
                  "description": "The column group id"
                }
              ],
              "description": "Get column group index by given column group id"
            },
            {
              "kind": "method",
              "name": "columnDataById",
              "parameters": [
                {
                  "name": "columnId",
                  "type": {
                    "text": "string"
                  },
                  "description": "The column id"
                }
              ],
              "description": "Get column data by given column id",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "columnIdxById",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "columnId",
                  "type": {
                    "text": "string"
                  },
                  "description": "The column id"
                }
              ],
              "description": "Get column index by given column id"
            },
            {
              "kind": "field",
              "name": "visibleColumns",
              "type": {
                "text": "Array<IdsDataGridColumn>"
              },
              "description": "Get the visible column data (via hidden attributes)",
              "return": {
                "type": {
                  "text": "Array<IdsDataGridColumn>"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "rightFrozenColumns",
              "type": {
                "text": "Array<IdsDataGridColumn>"
              },
              "description": "Get the columns frozen on the right",
              "return": {
                "type": {
                  "text": "Array<IdsDataGridColumn>"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "leftFrozenColumns",
              "type": {
                "text": "Array<IdsDataGridColumn>"
              },
              "description": "Get the columns frozen on the left",
              "return": {
                "type": {
                  "text": "Array<IdsDataGridColumn>"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "hasFrozenColumns",
              "type": {
                "text": "boolean"
              },
              "description": "Return true if any columns are frozen",
              "return": {
                "type": {
                  "text": "Array<IdsDataGridColumn>"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "columnDataByHeaderElem",
              "parameters": [
                {
                  "name": "elem",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "The column header element"
                }
              ],
              "description": "Get column data by given column header element",
              "return": {
                "type": {
                  "text": "IdsDataGridColumn"
                }
              }
            },
            {
              "kind": "field",
              "name": "showHeaderExpander",
              "description": "Set to show header expander icon for expandable and tree rows",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "alternateRowShading",
              "description": "Set a style on every alternate row for better readability.",
              "parameters": [
                {
                  "description": "true to use alternate row shading",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "columns",
              "description": "Set the columns of the data grid",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array"
                  }
                }
              ],
              "type": {
                "text": "IdsDataGridColumn[]"
              }
            },
            {
              "kind": "field",
              "name": "columnGroups",
              "description": "Set the columns groups of the data grid",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "appendData",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "Array"
                  },
                  "description": "The array to use"
                }
              ],
              "description": "Use this to add more data to the datagrid's existing dataset.\nThis will automatically render additional rows in the datagrid."
            },
            {
              "kind": "method",
              "name": "#appendMissingRows"
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Set the data of the data grid",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array"
                  }
                }
              ],
              "type": {
                "text": "Array<Record<string, any>>"
              }
            },
            {
              "kind": "field",
              "name": "emptyMessageDescription",
              "description": "Set empty message description",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "emptyMessageIcon",
              "description": "Set empty message icon",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "emptyMessageLabel",
              "description": "Set empty message label",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "headerMenuId",
              "description": "Set header menu id",
              "parameters": [
                {
                  "description": "The header menu id",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "headerMenuData",
              "description": "Set the header menu data",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "menuId",
              "description": "Set menu id",
              "parameters": [
                {
                  "description": "The menu id",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "menuData",
              "description": "Set the menu data",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "virtualScroll",
              "description": "Set the list view to use virtual scrolling for a large amount of rows",
              "parameters": [
                {
                  "description": "true to use virtual scrolling",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "virtualScrollSettings",
              "description": "Some future configurable virtual scroll settings",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "virtualScrollMaxRowsInDOM",
              "type": {
                "text": "number"
              },
              "default": "300"
            },
            {
              "kind": "method",
              "name": "#attachScrollEvents"
            },
            {
              "kind": "field",
              "name": "#containerMaxHeight",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Virtual Container Height"
            },
            {
              "kind": "method",
              "name": "#updateContainerMaxHeight"
            },
            {
              "kind": "method",
              "name": "#attachVirtualScrollEvent"
            },
            {
              "kind": "field",
              "name": "#customScrollEventCache",
              "privacy": "private",
              "type": {
                "text": "{ [key: string]: number }"
              },
              "default": "{}"
            },
            {
              "kind": "method",
              "name": "#triggerCustomScrollEvent",
              "parameters": [
                {
                  "name": "rowIndex",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "eventType",
                  "optional": true,
                  "type": {
                    "text": "'start' | 'end'"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#rafReference",
              "privacy": "private",
              "default": "NaN",
              "description": "Stores the last request animation from used during virtual scroll.\nRAFs are recommended in the row-recycling articles we referenced.\nIf we were to take them out, what would happen is the repainting of the browser\nwindow would happen during scrolling and we'd errors like \"redraw happened during scrolling.\n\nOne thing to note is RAFs should have as little logic as possible within them\nand should only contain the CSS+DOM manipulations.\nIt's best to do (as much as possible) logic+calculations outside the RAF,\nand then when ready to move things around, do those inside the RAF.\nthis keeps the RAF short and sweet, and keeps our FPS-lag low."
            },
            {
              "kind": "method",
              "name": "requestAnimationFrame",
              "parameters": [
                {
                  "name": "fnCallback",
                  "type": {
                    "text": "() => void"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#scrollTo",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "rowIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "row index"
                }
              ],
              "description": "Internal handling of scrolling to row"
            },
            {
              "kind": "method",
              "name": "scrollRowIntoView",
              "parameters": [
                {
                  "name": "rowIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "which row to scroll into view."
                },
                {
                  "name": "doScroll",
                  "default": "true",
                  "description": "set to \"true\" to have the browser perform the scroll action",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "We always want to set doScroll=true when scrollRowIntoView() is called manually in code...\n...so when the \"public\" uses it they would simply do scrollRowIntoView(x).\n\nHowever, this method is also used in the \"onscroll\" event-handler...\n...within that \"onscroll\" event-handler, we want doScroll=false,\n...and let the browser handle moving/panning the window without interference."
            },
            {
              "kind": "method",
              "name": "#recycleAllRows",
              "parameters": [
                {
                  "name": "topRowIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#recycleTopRowsDown",
              "parameters": [
                {
                  "name": "rowCount",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#recycleBottomRowsUp",
              "parameters": [
                {
                  "name": "rowCount",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Set the aria-label element in the DOM. This should be translated.",
              "parameters": [
                {
                  "description": "The aria label",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "rowHeight",
              "description": "Set the row height between extra-small, small, medium and large (default)",
              "parameters": [
                {
                  "description": "The row height",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "rowStart",
              "description": "Get the start-row index",
              "parameters": [
                {
                  "description": "The row-index at which to start showing data.",
                  "name": "rowIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowNavigation",
              "description": "Sets keyboard navigation to rows",
              "parameters": [
                {
                  "description": "toggle row navigation",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "listStyle",
              "description": "Set the style of the grid to list style for simple readonly lists",
              "parameters": [
                {
                  "description": "list styling to use",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "rowSelection",
              "description": "Set the row selection mode between false, 'single', 'multiple' and 'mixed'",
              "parameters": [
                {
                  "description": "selection mode to use",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "suppressEmptyMessage",
              "description": "Set suppress empty message",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "suppressRowClickSelection"
            },
            {
              "kind": "field",
              "name": "suppressRowDeselection",
              "description": "Set to true to prevent rows from being deselected if click or space bar the row.\ni.e. once a row is selected, it remains selected until another row is selected in its place.",
              "parameters": [
                {
                  "description": "true or false",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "suppressRowDeactivation",
              "description": "Set to true to prevent rows from being deactivated if clicked.\ni.e. once a row is activated, it remains activated until another row is activated in its place.",
              "parameters": [
                {
                  "description": "true or false",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "selectedRows",
              "type": {
                "text": "Array<{ index: number, data: Record<string, unknown> }>"
              },
              "description": "Get the selected rows",
              "return": {
                "type": {
                  "text": "Array<object>"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "activatedRow",
              "type": {
                "text": "any"
              },
              "description": "Get the activated row",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "updateDataset",
              "parameters": [
                {
                  "name": "row",
                  "type": {
                    "text": "number"
                  },
                  "description": "the parent row that was clicked"
                },
                {
                  "name": "data",
                  "type": {
                    "text": "Record<string, unknown>"
                  },
                  "description": "the data to apply to the row"
                },
                {
                  "name": "isClear",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "do not keep current data"
                }
              ],
              "description": "Update the dataset"
            },
            {
              "kind": "method",
              "name": "updateDatasetAndRefresh",
              "parameters": [
                {
                  "name": "row",
                  "type": {
                    "text": "number"
                  },
                  "description": "the parent row that was clicked"
                },
                {
                  "name": "data",
                  "type": {
                    "text": "Record<string, unknown>"
                  },
                  "description": "the data to apply to the row"
                },
                {
                  "name": "isClear",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "do not keep current data"
                }
              ],
              "description": "Update the dataset and refresh"
            },
            {
              "kind": "method",
              "name": "#findParentRow",
              "return": {
                "type": {
                  "text": "Record<string, unknown>"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "Array<Record<string, any>>"
                  },
                  "description": "the parent row that was clicked"
                },
                {
                  "name": "parentIds",
                  "type": {
                    "text": "string"
                  },
                  "description": "the string \"1 2\" of indexes"
                }
              ],
              "description": "Find the parent id based on the cached props"
            },
            {
              "kind": "method",
              "name": "#updateRowCount",
              "description": "Updates row count attribute on container"
            },
            {
              "kind": "method",
              "name": "rowByIndex",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "rowIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based index"
                }
              ],
              "description": "Get the row HTMLElement"
            },
            {
              "kind": "field",
              "name": "activeCellEditor",
              "type": {
                "text": "IdsDataGridCell | undefined"
              }
            },
            {
              "kind": "method",
              "name": "commitCellEdit",
              "description": "Commit editing on any active editor"
            },
            {
              "kind": "method",
              "name": "cancelCellEdit",
              "description": "Cancel editing on any active editor"
            },
            {
              "kind": "method",
              "name": "addRow",
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "Record<string, unknown>"
                  },
                  "description": "the data to add to the row"
                },
                {
                  "name": "index",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "insert position for new row"
                }
              ],
              "description": "Add a row to the data grid"
            },
            {
              "kind": "method",
              "name": "addRows",
              "parameters": [
                {
                  "name": "data",
                  "default": "[]",
                  "type": {
                    "text": "Array<Record<string, unknown>>"
                  },
                  "description": "multiple row data"
                },
                {
                  "name": "index",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "insert position for new rows"
                }
              ],
              "description": "Add multiple rows to the data grid"
            },
            {
              "kind": "method",
              "name": "removeRow",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the row index to remove"
                }
              ],
              "description": "Remove a row by index for the data"
            },
            {
              "kind": "method",
              "name": "clearRow",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the row index to clear"
                }
              ],
              "description": "Clear all values in a row a row by index"
            },
            {
              "kind": "method",
              "name": "editFirstCell",
              "description": "Edit the first editable cell"
            },
            {
              "kind": "method",
              "name": "selectRow",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based index"
                },
                {
                  "name": "triggerEvent",
                  "default": "true",
                  "description": "fire an event with the selected row",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Set a row to selected"
            },
            {
              "kind": "method",
              "name": "deSelectRow",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based index"
                },
                {
                  "name": "triggerEvent",
                  "default": "true",
                  "description": "fire an event with the deselected row",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Set a row to be deselected"
            },
            {
              "kind": "method",
              "name": "activateRow",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based index"
                }
              ],
              "description": "Set a row to activated"
            },
            {
              "kind": "method",
              "name": "deactivateRow",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based index"
                }
              ],
              "description": "Set a row to be deactivated"
            },
            {
              "kind": "method",
              "name": "selectAllRows",
              "description": "Set a all rows to be selected"
            },
            {
              "kind": "method",
              "name": "deSelectAllRows",
              "description": "Set a all rows to be deselected"
            },
            {
              "kind": "field",
              "name": "rowCount",
              "description": "Set/Get the total number of records",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "rowPixelHeight",
              "type": {
                "text": "number"
              },
              "description": "Get the row height in pixels",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "autoFit",
              "description": "Set the card to auto fit to its parent size",
              "parameters": [
                {
                  "description": "The auto fit",
                  "name": "value",
                  "type": {
                    "text": "boolean|string|null"
                  }
                }
              ],
              "type": {
                "text": "boolean | string | null"
              }
            },
            {
              "kind": "method",
              "name": "#applyAutoFit",
              "description": "Set the container height",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "suppressCaching",
              "description": "Suppress row row and cell caching",
              "parameters": [
                {
                  "description": "false to not cache",
                  "name": "value",
                  "type": {
                    "text": "boolean|string|null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "setActiveCell",
              "parameters": [
                {
                  "name": "cellNumber",
                  "type": {
                    "text": "number"
                  },
                  "description": "The cell to focus (zero based)"
                },
                {
                  "name": "rowIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "The row to focus (zero based)"
                },
                {
                  "name": "noFocus",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, do not focus the cell"
                }
              ],
              "description": "Set the active cell for focus",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "field",
              "name": "disableClientFilter",
              "description": "Sets disable client filter",
              "parameters": [
                {
                  "description": "IThe value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "filterable",
              "description": "Sets the data grid to be filterable",
              "parameters": [
                {
                  "description": "If true will set filterable",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "filterRowDisabled",
              "description": "Sets disabled to be filter row",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "filterWhenTyping",
              "description": "Sets the data grid to filter when typing",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "treeGrid",
              "description": "Sets the grid to render as a tree grid (does require a tree formatter column)",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "groupSelectsChildren",
              "description": "If true then the children will be selected when a group is selected",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "idColumn",
              "description": "Used to set which column is the unique id column in the data set.\nThis is needed for some operations.",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "expandableRow",
              "description": "If true an expandable row is present in the grid. Also requires a expandable-row-template and\nan expander formatter.",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "expandableRowTemplate",
              "description": "An id that points to the template to use for expandable rows. Also requires the expandable-row setting\nand an expander formatter.",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "uniqueId",
              "description": "Set uniqueId to save to local storage.",
              "parameters": [
                {
                  "description": "A uniqueId use to save to local storage.",
                  "name": "value",
                  "type": {
                    "text": "number|string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "editable",
              "description": "Set to true if one or more editors is present to activate editing",
              "parameters": [
                {
                  "description": "true indicates some cells may be editable",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "editNextOnEnterPress",
              "description": "Set to false to avoid moving up and down rows when editing and hitting enter",
              "parameters": [
                {
                  "description": "false indicates the grid will not switch rows on edit",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "addNewAtEnd",
              "description": "Set to true to automatically append rows when keyboard navigating\nthe data grid in editable mode",
              "parameters": [
                {
                  "description": "boolean flag",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "invalidCells",
              "type": {
                "text": "Array<{ row: number, cell: number, columnId: string | null, validationMessages: any }>"
              },
              "description": "Get all the currently invalid cells",
              "return": {
                "type": {
                  "text": "Array<{ row: number, cell: number, columnId: string | null, validationMessages: any }>"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "dirtyCells",
              "type": {
                "text": "Array<{ row: number, cell: number, columnId: string | null, originalValue: any }>"
              },
              "description": "Get all the currently dirty cells",
              "return": {
                "type": {
                  "text": "Array<{ row: number, cell: number, columnId: string | null, originalValue: any }>"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "resetDirtyCells",
              "description": "Reset any currently dirty cells"
            },
            {
              "kind": "method",
              "name": "exportToExcel",
              "parameters": [
                {
                  "name": "format",
                  "type": {
                    "text": "string"
                  },
                  "description": "csv or xlsx"
                },
                {
                  "name": "filename",
                  "type": {
                    "text": "string"
                  },
                  "description": "filename"
                },
                {
                  "name": "keepGridFormatting",
                  "default": "true",
                  "description": "keep grid formatting, or pass raw datasource data",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Export data grid to excel"
            },
            {
              "kind": "method",
              "name": "determineColType",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "gridCol",
                  "type": {
                    "text": "IdsDataGridColumn"
                  },
                  "description": "grid column config"
                }
              ],
              "description": "Get excel data type from data grid column formattter"
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "object"
              },
              "default": "{\n      menuData: null\n    }"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-data-grid/ids-data-grid.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsDataGrid",
            "module": "src/components/ids-data-grid/ids-data-grid.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-data-label/ids-data-label.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Data Label Component",
          "name": "IdsDataLabel",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Sets to label",
              "parameters": [
                {
                  "description": "label string",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "labelPosition",
              "description": "Sets to label",
              "parameters": [
                {
                  "description": "label string",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "labelClass",
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "colon",
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "object"
              },
              "default": "{\n      labelClass: 'top-positioned',\n    }"
            }
          ],
          "mixins": [
            {
              "name": "IdsLocaleMixin",
              "module": "/src/mixins/ids-locale-mixin/ids-locale-mixin"
            },
            {
              "name": "IdsEventsMixin",
              "module": "/src/mixins/ids-events-mixin/ids-events-mixin"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsDataLabel",
            "module": "src/components/ids-data-label/ids-data-label.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-date-picker/ids-date-picker-common.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "IdsDatePickerCommonAttributes",
          "type": {
            "text": "array"
          },
          "default": "[\n  attributes.DAY,\n  attributes.FIRST_DAY_OF_WEEK,\n  attributes.FORMAT,\n  attributes.IS_CALENDAR_TOOLBAR,\n  attributes.IS_DROPDOWN,\n  attributes.MINUTE_INTERVAL,\n  attributes.MONTH,\n  attributes.RANGE_SETTINGS,\n  attributes.SECOND_INTERVAL,\n  attributes.SHOW_CANCEL,\n  attributes.SHOW_CLEAR,\n  attributes.SHOW_PICKLIST_MONTH,\n  attributes.SHOW_PICKLIST_WEEK,\n  attributes.SHOW_PICKLIST_YEAR,\n  attributes.SHOW_TODAY,\n  attributes.USE_CURRENT_TIME,\n  attributes.USE_RANGE,\n  attributes.VALUE,\n  attributes.YEAR\n]"
        },
        {
          "kind": "variable",
          "name": "MIN_MONTH",
          "type": {
            "text": "number"
          },
          "default": "0"
        },
        {
          "kind": "variable",
          "name": "MAX_MONTH",
          "type": {
            "text": "number"
          },
          "default": "11"
        },
        {
          "kind": "variable",
          "name": "MONTH_KEYS",
          "type": {
            "text": "array"
          },
          "default": "['Jan', 'Feb', 'Mar', 'Apr', 'May', 'June', 'July', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']"
        },
        {
          "kind": "variable",
          "name": "PICKLIST_LENGTH",
          "type": {
            "text": "number"
          },
          "default": "6"
        },
        {
          "kind": "function",
          "name": "getDateValuesFromString",
          "parameters": [
            {
              "name": "val",
              "type": {
                "text": "string"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IdsDatePickerCommonAttributes",
          "declaration": {
            "name": "IdsDatePickerCommonAttributes",
            "module": "src/components/ids-date-picker/ids-date-picker-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "MIN_MONTH",
          "declaration": {
            "name": "MIN_MONTH",
            "module": "src/components/ids-date-picker/ids-date-picker-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "MAX_MONTH",
          "declaration": {
            "name": "MAX_MONTH",
            "module": "src/components/ids-date-picker/ids-date-picker-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "MONTH_KEYS",
          "declaration": {
            "name": "MONTH_KEYS",
            "module": "src/components/ids-date-picker/ids-date-picker-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "PICKLIST_LENGTH",
          "declaration": {
            "name": "PICKLIST_LENGTH",
            "module": "src/components/ids-date-picker/ids-date-picker-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "getDateValuesFromString",
          "declaration": {
            "name": "getDateValuesFromString",
            "module": "src/components/ids-date-picker/ids-date-picker-common.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-date-picker/ids-date-picker-popup.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Date Picker Popup Component",
          "name": "IdsDatePickerPopup",
          "members": [
            {
              "kind": "field",
              "name": "expandableArea",
              "type": {
                "text": "IdsExpandableArea | null | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "monthView",
              "type": {
                "text": "IdsMonthView | null | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "monthYearPicklist",
              "type": {
                "text": "IdsMonthYearPicklist | null | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "timepicker",
              "type": {
                "text": "IdsTimePicker | null | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "toolbar",
              "type": {
                "text": "IdsToolbar | null | undefined"
              },
              "privacy": "protected"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "method",
              "name": "timepickerTemplate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "toolbarTemplate",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "Array<string>"
              },
              "default": "['beforeshow']",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "field",
              "name": "buttons",
              "readonly": true,
              "return": {
                "type": {
                  "text": "NodeList<IdsDatePickerPopupButton>"
                }
              }
            },
            {
              "kind": "field",
              "name": "showToday",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not month view today button should be show",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "show-today attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onFirstDayOfWeekChange",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onMonthChange",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "isValid",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onYearChange",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "isValid",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onDayChange",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "isValid",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onFormatChange"
            },
            {
              "kind": "field",
              "name": "onLocaleChange",
              "parameters": [
                {
                  "description": "the new locale object",
                  "name": "locale",
                  "type": {
                    "text": "IdsLocale"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hideIfAble",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "applyBtnEl",
              "type": {
                "text": "IdsModalButton | null | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "cancelBtnEl",
              "type": {
                "text": "IdsModalButton | null | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "todayBtnEl",
              "type": {
                "text": "IdsButton | null | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not the month/year picker should be expanded",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "expanded attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onDisableSettingsChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "IdsDisableSettings"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onLegendSettingsChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "IdsLegendSettings"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getRangeSettings",
              "return": {
                "type": {
                  "text": "IdsRangeSettings"
                }
              },
              "description": "Defer to the inner IdsMonthView for getting `rangeSettings` if possible"
            },
            {
              "kind": "method",
              "name": "setRangeSettings",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "IdsRangeSettings"
                  },
                  "description": "incoming range settings"
                }
              ],
              "description": "Defer to the inner IdsMonthView for storing `rangeSettings` if possible"
            },
            {
              "kind": "method",
              "name": "onRangeSettingsChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "IdsRangeSettings"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "minuteInterval",
              "type": {
                "text": "number"
              },
              "description": "Set interval in minutes dropdown",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "description": "minute-interval attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "secondInterval",
              "type": {
                "text": "number"
              },
              "description": "Set interval in seconds dropdown",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "description": "second-interval attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showClear",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not to show clear button in the calendar popup",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "show-clear attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showCancel",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not to show cancel button when the picker is expanded",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "show-cancel attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showPicklistYear",
              "type": {
                "text": "boolean"
              },
              "description": "Whether or not to show a list of years in the picklist",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "value to be set as show-picklist-year attribute converted to boolean",
                  "name": "val",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showPicklistMonth",
              "type": {
                "text": "boolean"
              },
              "description": "Whether or not to show a list of months in the picklist",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "value to be set as show-picklist-month attribute converted to boolean",
                  "name": "val",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showPicklistWeek",
              "type": {
                "text": "boolean"
              },
              "description": "Whether or not to show week numbers in the picklist",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "value to be set as show-picklist-week attribute converted to boolean",
                  "name": "val",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "useCurrentTime",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not to show current time in the time picker",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "description": "useCurrentTime param value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onUseRangeChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#value",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Set Date Picker Popup's stored value. Should parse a date from the value.",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "value param",
                  "name": "val",
                  "type": {
                    "text": "string|null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onPicklistExpand",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onPicklistCollapse",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "configureComponents",
              "description": "Checks internal component refs based on settings"
            },
            {
              "kind": "method",
              "name": "getActiveDate",
              "description": "Defers `activeDate` to the inner MonthView's `activeDate` attribute,\notherwise fallback to the one generated by this one's date props",
              "return": {
                "type": {
                  "text": "Date"
                }
              }
            },
            {
              "kind": "method",
              "name": "attachExpandedListener",
              "privacy": "private",
              "description": "Expanded/Collapsed event for Month/Year Picklist"
            },
            {
              "kind": "method",
              "name": "attachEventListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleApplyEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "click event"
                }
              ],
              "description": "Click to apply button event handler"
            },
            {
              "kind": "method",
              "name": "clear",
              "description": "Clears the contents of the Date Picker Popup and its corresponding target, if applicable",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleDaySelectedEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "IdsDayselectedEvent"
                  },
                  "description": "event from the calendar day selection"
                }
              ],
              "description": "Selected event handler"
            },
            {
              "kind": "method",
              "name": "captureValueFromPicklist",
              "privacy": "private",
              "description": "Gets the value from the selected items in the Month/Year Picklist\nand sets them in the Date Picker Popup",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hasTime",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Defines if the format has hours/minutes/seconds pattern to show time picker"
            },
            {
              "kind": "method",
              "name": "setTime",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "any"
                  },
                  "description": "date to add time values"
                }
              ],
              "description": "Helper to set the date with time from time picker"
            },
            {
              "kind": "method",
              "name": "triggerSelectedEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "optional": true,
                  "type": {
                    "text": "IdsDayselectedEvent"
                  },
                  "description": "optional event handler to pass arguments"
                }
              ],
              "description": "Triggers the same `dayselected` event on the Popup's target element that came from the internal IdsMonthView"
            },
            {
              "kind": "method",
              "name": "updateTimepickerDisplay",
              "privacy": "private",
              "description": "Renders or removes an embedded IdsTimePicker component"
            },
            {
              "kind": "method",
              "name": "removeRipples",
              "privacy": "private",
              "description": "Removes all button ripples in the component",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "syncDateAttributes",
              "privacy": "public",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string | Date"
                  },
                  "description": "incoming date string/object"
                }
              ],
              "description": "Takes a string containing a date, or an actual Date object, and syncs its values\nto the correct properties provided by IdsDateAttributeMixin"
            },
            {
              "kind": "method",
              "name": "setCurrentTime",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "formatMonthText",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "locale",
                  "optional": true,
                  "type": {
                    "text": "IdsLocale"
                  },
                  "description": "an optional, provided IdsLocale object"
                },
                {
                  "name": "date",
                  "optional": true,
                  "type": {
                    "text": "Date"
                  },
                  "description": "an optional, provided Date object (defaults to `this.getActiveDate()`)"
                }
              ],
              "description": "Helper to format datepicker text in the toolbar"
            },
            {
              "kind": "method",
              "name": "updateMonthYearPickerTriggerDisplay",
              "parameters": [
                {
                  "name": "locale",
                  "optional": true,
                  "type": {
                    "text": "IdsLocale"
                  },
                  "description": "incoming IdsLocale object, if applicable"
                },
                {
                  "name": "date",
                  "optional": true,
                  "type": {
                    "text": "Date"
                  },
                  "description": "an optional, provided Date object (defaults to `this.getActiveDate()`)"
                }
              ],
              "description": "Updates the text contents of the Month/Year Picker's trigger button to reflect current state",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onHide",
              "description": "Runs when this picker component hides",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onShow",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Runs when this picker component shows"
            },
            {
              "kind": "method",
              "name": "updateActionButtonStateOnShow",
              "privacy": "private",
              "description": "Updates the Popup's Modal button states"
            },
            {
              "kind": "method",
              "name": "isDisabledByDate",
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  },
                  "description": "the date to check"
                }
              ],
              "description": "Passes through to IdsMonthView to check if a specified date is disabled (not available for choosing)",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Passes focus to the inner MonthView component"
            },
            {
              "kind": "field",
              "name": "showWeekNumbers",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-date-picker/ids-date-picker-popup.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsDatePickerPopup",
            "module": "src/components/ids-date-picker/ids-date-picker-popup.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-date-picker/ids-date-picker.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Date Picker Component",
          "name": "IdsDatePicker",
          "cssParts": [
            {
              "description": "the container of the component",
              "name": "container"
            },
            {
              "description": "the trigger container",
              "name": "trigger-field"
            },
            {
              "description": "the trigger button",
              "name": "trigger-button"
            },
            {
              "description": "the icon in the trigger button",
              "name": "icon"
            },
            {
              "description": "the input element",
              "name": "input"
            },
            {
              "description": "the popup with calendar",
              "name": "popup"
            },
            {
              "description": "footer of the popup",
              "name": "footer"
            },
            {
              "description": "the clear button in the calendar popup",
              "name": "btn-clear"
            },
            {
              "description": "the cancel button in the calendar popup",
              "name": "btn-cancel"
            },
            {
              "description": "the apply button in the calendar popup",
              "name": "btn-apply"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "isFormComponent",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "#picker",
              "privacy": "private",
              "type": {
                "text": "IdsDatePickerPopup | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#triggerButton",
              "privacy": "private",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "#triggerField",
              "privacy": "private",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['alternate-formatter', 'borderless', 'in-cell']",
              "description": "List of available color variants for this component",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Push color variant to the trigger-field element"
            },
            {
              "kind": "method",
              "name": "onLabelRequiredChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Push label-state to the trigger-field element"
            },
            {
              "kind": "method",
              "name": "onLabelChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Push label-state to the trigger-field element"
            },
            {
              "kind": "method",
              "name": "onLabelStateChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Push label-state to the trigger-field element"
            },
            {
              "kind": "method",
              "name": "onFieldHeightChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "the new field height setting"
                }
              ],
              "description": "Push field-height/compact to the trigger-field element"
            },
            {
              "kind": "method",
              "name": "onPlace",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "parameters": [
                {
                  "name": "popupRect",
                  "type": {
                    "text": "DOMRect"
                  },
                  "description": "a Rect object representing the current state of the popup."
                }
              ],
              "description": "Optional callback that can be used to adjust the Popup's placement\nafter all internal adjustments are made."
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "method",
              "name": "onDirtyTrackerChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "The changed value"
                }
              ],
              "description": "Callback for dirty tracker setting change",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "IdsDatePickerPopup | undefined"
              },
              "return": {
                "type": {
                  "text": "IdsDatePickerPopup"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#configurePicker"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Establish internal event handlers"
            },
            {
              "kind": "field",
              "name": "onLocaleChange"
            },
            {
              "kind": "field",
              "name": "onLanguageChange"
            },
            {
              "kind": "method",
              "name": "#attachKeyboardListeners",
              "return": {
                "type": {
                  "text": "IdsDatePicker"
                }
              },
              "description": "Establish Internal Keyboard shortcuts"
            },
            {
              "kind": "method",
              "name": "#togglePopup",
              "parameters": [
                {
                  "name": "isOpen",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "should be opened or closed"
                }
              ],
              "description": "Open/close popup with month view"
            },
            {
              "kind": "method",
              "name": "getActiveDate",
              "description": "Defers `activeDate` to the inner IdsDatePickerPopup's active date,\notherwise fallback to the one generated by this one's date props",
              "return": {
                "type": {
                  "text": "Date"
                }
              }
            },
            {
              "kind": "method",
              "name": "#triggerSelectedEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Trigger selected event with current params"
            },
            {
              "kind": "method",
              "name": "#handleKeyDownEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  },
                  "description": "keyboard event"
                }
              ],
              "description": "Keyboard events handler"
            },
            {
              "kind": "method",
              "name": "#triggerExpandedEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "expanded",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "expanded or collapsed"
                }
              ],
              "description": "Trigger expanded event with current params"
            },
            {
              "kind": "method",
              "name": "#parseInputDate",
              "description": "Parse date from value and pass as year/month/day params what triggers month view to rerender"
            },
            {
              "kind": "method",
              "name": "parseEventDate",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "Date"
                  },
                  "description": "stringified date"
                }
              ],
              "description": "Takes a date string value (presumably passed from an event) and converts\nthe value to day/month/year attributes"
            },
            {
              "kind": "method",
              "name": "#applyMask",
              "description": "Applying ids-mask to the input when changing locale or format"
            },
            {
              "kind": "method",
              "name": "#setAvailableDateValidation",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Available date validation extend validation mixin\nUses month view to define if date is available"
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Focuses input or dropdown"
            },
            {
              "kind": "method",
              "name": "open",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Public method to open calendar popup"
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Public method to close calendar popup"
            },
            {
              "kind": "method",
              "name": "#hasTime",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Defines if the format has hours/minutes/seconds pattern to show time picker"
            },
            {
              "kind": "method",
              "name": "#translate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "The key"
                }
              ],
              "description": "Get translate text for given key from current locale"
            },
            {
              "kind": "method",
              "name": "#setTime",
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "any"
                  },
                  "description": "date to add time values"
                }
              ],
              "description": "Helper to set the date with time from time picker"
            },
            {
              "kind": "method",
              "name": "onIdChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "id value"
                }
              ],
              "description": "Handles id attribute changes"
            },
            {
              "kind": "field",
              "name": "hasFocus",
              "type": {
                "text": "boolean"
              },
              "description": "Indicates if input, dropdown or the calendar toolbar has focus",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Set input value. Should parse a date from the value\nSet dropdown button text if the component is dropdown\nSet text if the component is used in calendar toolbar",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "value param",
                  "name": "val",
                  "type": {
                    "text": "string|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "string"
              },
              "description": "Set input placeholder",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "of placeholder to be set",
                  "name": "val",
                  "type": {
                    "text": "boolean|string|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Set trigger field disabled attribute",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "disabled param value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "readonly",
              "type": {
                "text": "boolean"
              },
              "description": "Set trigger field readonly attribute",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "readonly param value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "description": "Set the size (width) of input",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "[xs, sm, mm, md, lg, full]",
                  "name": "val",
                  "type": {
                    "text": "string|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "tabbable",
              "type": {
                "text": "boolean"
              },
              "description": "Set trigger field tabbable attribute",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "true of false depending if the trigger field is tabbable",
                  "name": "val",
                  "type": {
                    "text": "boolean|string|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "validate",
              "type": {
                "text": "string | null"
              },
              "description": "Set trigger field/input validation",
              "return": {
                "type": {
                  "text": "string|null"
                }
              },
              "parameters": [
                {
                  "description": "validate param",
                  "name": "val",
                  "type": {
                    "text": "string|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "validationEvents",
              "type": {
                "text": "string"
              },
              "description": "Set which input events to fire validation on",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "validation-events attribute",
                  "name": "val",
                  "type": {
                    "text": "string|null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onFormatChange",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "isCalendarToolbar",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not the component is used in calendar toolbar",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "is-calendar-toolbar attribute",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "isDropdown",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not the component is dropdown type",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "is-dropdown attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showToday",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not month view today button should be show",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "show-today attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "noMargins",
              "description": "Sets the no margins attribute",
              "parameters": [
                {
                  "description": "The value for no margins attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onFirstDayOfWeekChange",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onMonthChange",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "isValid",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onYearChange",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "isValid",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onDayChange",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "isValid",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "input",
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "expanded",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not the month/year picker should be expanded",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "expanded attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onDisableSettingsChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "IdsDisableSettings"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onLegendSettingsChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "Array<IdsLegend>"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onRangeSettingsChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "IdsRangeSettings"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onUseRangeChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "mask",
              "type": {
                "text": "boolean"
              },
              "description": "Enable/disable date mask for the input",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "mask param value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "minuteInterval",
              "type": {
                "text": "number"
              },
              "description": "Set interval in minutes dropdown",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "description": "minute-interval attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "secondInterval",
              "type": {
                "text": "number"
              },
              "description": "Set interval in seconds dropdown",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "description": "second-interval attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showClear",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not to show clear button in the calendar popup",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "show-clear attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showCancel",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not to show cancel button when the picker is expanded",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "show-cancel attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showPicklistYear",
              "type": {
                "text": "boolean"
              },
              "description": "Whether or not to show a list of years in the picklist",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "value to be set as show-picklist-year attribute converted to boolean",
                  "name": "val",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showPicklistMonth",
              "type": {
                "text": "boolean"
              },
              "description": "Whether or not to show a list of months in the picklist",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "value to be set as show-picklist-month attribute converted to boolean",
                  "name": "val",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showPicklistWeek",
              "type": {
                "text": "boolean"
              },
              "description": "Whether or not to show week numbers in the picklist",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "value to be set as show-picklist-week attribute converted to boolean",
                  "name": "val",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "useCurrentTime",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not to show current time in the time picker",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "description": "useCurrentTime param value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showWeekNumbers",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-date-picker/ids-date-picker.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsDatePicker",
            "module": "src/components/ids-date-picker/ids-date-picker.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-date-picker/ids-month-year-picklist.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Month/Year PickList Component",
          "name": "IdsMonthYearPicklist",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template"
            },
            {
              "kind": "method",
              "name": "templatePicklistWeeks",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "templatePicklistMonths",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "templatePicklistYears",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "refreshPicklists",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              },
              "description": "Set trigger field disabled attribute",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "disabled param value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "hasPicklistConfigurationAttributes",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "attachEventListeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleKeyDownEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  },
                  "description": "keyboard event"
                }
              ],
              "description": "Keyboard events handler"
            },
            {
              "kind": "method",
              "name": "renderPicklistYears",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string|undefined"
                }
              },
              "description": "Get a list of years to be attached to the picklist"
            },
            {
              "kind": "method",
              "name": "renderPicklistMonths",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string|undefined"
                }
              },
              "description": "Get a list of months to be attached to the picklist"
            },
            {
              "kind": "method",
              "name": "renderPicklistWeeks",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string|undefined"
                }
              },
              "description": "Get a list of week numbers to be attached to the picklist"
            },
            {
              "kind": "method",
              "name": "getWeekNumber",
              "privacy": "private",
              "parameters": [
                {
                  "name": "weekIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "index number as it comes from the paged loop"
                }
              ],
              "description": "Helper to get week number from paginated index",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "handlePicklistEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "click event"
                }
              ],
              "description": "Click to picklist elements event handler"
            },
            {
              "kind": "method",
              "name": "picklistYearPaged",
              "privacy": "private",
              "parameters": [
                {
                  "name": "isNext",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "increase/descrese picklist year"
                }
              ],
              "description": "Loop through the year list and increase/descrese year depends on the param"
            },
            {
              "kind": "method",
              "name": "picklistMonthPaged",
              "privacy": "private",
              "description": "Loop through the entire list of the months"
            },
            {
              "kind": "method",
              "name": "picklistWeekPaged",
              "privacy": "private",
              "parameters": [
                {
                  "name": "isNext",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "increase/descrese picklist week"
                }
              ],
              "description": "Loop through the week list and increase/descrese week depends on the param"
            },
            {
              "kind": "method",
              "name": "setWeekDate",
              "privacy": "private",
              "parameters": [
                {
                  "name": "week",
                  "type": {
                    "text": "number"
                  },
                  "description": "number of a week"
                }
              ],
              "description": "Set month and day params based on week number"
            },
            {
              "kind": "method",
              "name": "selectPicklistEl",
              "privacy": "private",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "element to handle"
                }
              ],
              "description": "Add selectable/tabbable attributes to picklist element"
            },
            {
              "kind": "method",
              "name": "unselectPicklist",
              "privacy": "private",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "'month'|'year'|'all'"
                  },
                  "description": "of panel to unselect"
                }
              ],
              "description": "Reset picklist selectable/tabbable attributes"
            },
            {
              "kind": "field",
              "name": "showPicklistYear",
              "type": {
                "text": "boolean"
              },
              "description": "Whether or not to show a list of years in the picklist",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "value to be set as show-picklist-year attribute converted to boolean",
                  "name": "val",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showPicklistMonth",
              "type": {
                "text": "boolean"
              },
              "description": "Whether or not to show a list of months in the picklist",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "value to be set as show-picklist-month attribute converted to boolean",
                  "name": "val",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showPicklistWeek",
              "type": {
                "text": "boolean"
              },
              "description": "Whether or not to show week numbers in the picklist",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "value to be set as show-picklist-week attribute converted to boolean",
                  "name": "val",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "onLocaleChange",
              "description": "Respond to locale changes"
            },
            {
              "kind": "method",
              "name": "activatePicklist"
            },
            {
              "kind": "method",
              "name": "deactivatePicklist"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-date-picker/ids-month-year-picklist.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsMonthYearPicklist",
            "module": "src/components/ids-date-picker/ids-month-year-picklist.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-draggable/get-el-translate-point.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getElTranslatePoint",
          "return": {
            "type": {
              "text": "TranslationPoint"
            }
          },
          "parameters": [
            {
              "name": "element",
              "type": {
                "text": "HTMLElement"
              },
              "description": "element to grab translation point from it's styles with"
            }
          ],
          "description": "Gets computed translate values from style prop; adapted from:\nhttps://zellwk.com/blog/css-translate-values-in-javascript/"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "getElTranslatePoint",
            "module": "src/components/ids-draggable/get-el-translate-point.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-draggable/ids-draggable.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Draggable Component",
          "name": "IdsDraggable",
          "members": [
            {
              "kind": "field",
              "name": "#relativeBounds",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the properties we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "axis",
              "parameters": [
                {
                  "description": "The axis that the draggable content will\nbe moving along (e.g. X => horizontal, Y => vertical);\nBy default, not defined and supports both axes.",
                  "name": "value",
                  "type": {
                    "text": "\"x\"|\"y\"|undefined"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "\"x\"|\"y\"|null"
                }
              }
            },
            {
              "kind": "field",
              "name": "parentContainment",
              "parameters": [
                {
                  "description": "Whether the draggable should be limited in range\nby its parent element",
                  "name": "value",
                  "type": {
                    "text": "string | boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "parameters": [
                {
                  "description": "Whether or not draggable functionality is to be disabled",
                  "name": "value",
                  "type": {
                    "text": "string | boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "handle",
              "parameters": [
                {
                  "description": "A query selector representing an optional handle that can be used to\ndrag the content of the draggable",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "#updateHandleElem",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setIntAttribute",
              "parameters": [
                {
                  "name": "elem",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "ids element to update"
                },
                {
                  "name": "attribute",
                  "type": {
                    "text": "string"
                  },
                  "description": "the attribute to update"
                },
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  },
                  "description": "a value to set on the"
                }
              ],
              "description": "sets an optional integer attribute for an element\n(may offload as general util; just need to think\nthrough this a bit more)"
            },
            {
              "kind": "field",
              "name": "minTransformX",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "maxTransformX",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "minTransformY",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "maxTransformY",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "#updateTransform",
              "privacy": "private",
              "description": "update the transform with respect to containment\nand min/max transform bounds",
              "parameters": [
                {
                  "description": "mouse delta x",
                  "name": "mouseDeltaX",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "description": "mouse delta y",
                  "name": "mouseDeltaY",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Array"
                }
              }
            },
            {
              "kind": "field",
              "name": "onMouseMove",
              "type": {
                "text": "any"
              },
              "description": "called on mouse move; transforms element for\ntransition offset and updates cursor overlay\nelement as necessary",
              "parameters": [
                {
                  "description": "mousemove event",
                  "name": "e",
                  "type": {
                    "text": "*"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "onMouseUp",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "isDragging",
              "parameters": [
                {
                  "description": "Whether or not this element\nand content is being dragged",
                  "name": "value",
                  "type": {
                    "text": "string | boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#getCursorStyle",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Get the \"cursor\" property of cursor element\nplaced in front of drag"
            },
            {
              "kind": "field",
              "name": "#handleElem",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "description": "Element that is currently draggable;\nif \"handle\" becomes it possibly becomes the selected element.\n\nOtherwise it defaults to the overall draggable container (this)"
            },
            {
              "kind": "field",
              "name": "#parentRect",
              "privacy": "private",
              "type": {
                "text": "{ x: number, y: number }"
              },
              "description": "First measurable parent's rectangle\nwhen a drag is initiated"
            },
            {
              "kind": "field",
              "name": "#dragStartMousePoint",
              "privacy": "private",
              "type": {
                "text": "{ x: number, y: number }"
              },
              "description": "The point where we start dragging on the mouse\nto delta from for current tracking."
            },
            {
              "kind": "field",
              "name": "#dragStartOffset",
              "privacy": "private",
              "type": {
                "text": "{ x: number, y: number }"
              },
              "description": "The transform translation point applied at\nthe time of a dragstart in order to calculate\ndelta during drag"
            },
            {
              "kind": "field",
              "name": "#dragStartRect",
              "privacy": "private",
              "type": {
                "text": "{ x: number, y: number }"
              },
              "description": "The bounding rectangle of this component at the\ntime of a dragstart offset by translate (so\nits original position in the div on start of drag)"
            },
            {
              "kind": "field",
              "name": "#xformBounds",
              "privacy": "private",
              "type": {
                "text": "{ top: number, bottom: number, left: number, right: number }"
              },
              "description": "Rectangle bounds that transform is limited to if drag\nis bounded by parent"
            },
            {
              "kind": "field",
              "name": "#cursorEl",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "description": "Element which provides cursor for mouse when\ndragging after mousedown event since we can\nbind to X/Y axes and there's no way to override\nthe behavior"
            },
            {
              "kind": "method",
              "name": "#updateParentRect",
              "parameters": [
                {
                  "name": "path",
                  "type": {
                    "text": "*"
                  },
                  "description": "path passed by mouse/drag event\nto traverse through shadow and lightDOM"
                }
              ],
              "description": "Update parent rectangle stored in this.#parentRect",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "relativeBounds",
              "parameters": [
                {
                  "description": "The max coordinates relative\nto the overall div; e.g. \"left: -20; right: -20\" would extend\nthe minimum x and maximum x from current container\nbounds, or \"top: 10; bottom: 20\" would make the top (upwards\nbounds) 10 below the top or 20 below the bottom).",
                  "name": "value",
                  "type": {
                    "text": "string | number"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "method",
              "name": "getBoundsHash",
              "parameters": [
                {
                  "name": "bounds",
                  "type": {
                    "text": "{\n   *  left: number,\n   *  top: number,\n   *  right: number,\n   *  bottom: number\n   * }"
                  },
                  "description": "rectangle bounds to hash"
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#updateRelativeBounds"
            }
          ],
          "mixins": [
            {
              "name": "IdsEventsMixin",
              "module": "/src/mixins/ids-events-mixin/ids-events-mixin"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsDraggable",
            "module": "src/components/ids-draggable/ids-draggable.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-drawer/ids-drawer-attributes.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "EDGES",
          "type": {
            "text": "array"
          },
          "default": "['start', 'bottom']"
        },
        {
          "kind": "variable",
          "name": "TYPES",
          "type": {
            "text": "array"
          },
          "default": "['app-menu', 'action-sheet']"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EDGES",
          "declaration": {
            "name": "EDGES",
            "module": "src/components/ids-drawer/ids-drawer-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "TYPES",
          "declaration": {
            "name": "TYPES",
            "module": "src/components/ids-drawer/ids-drawer-attributes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-drawer/ids-drawer.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Drawer Component",
          "name": "IdsDrawer",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "edge",
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "changes the Edge that the Drawer is displayed against",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "null"
            },
            {
              "kind": "method",
              "name": "#refreshEdgeClass",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Refreshes the visual state of the Drawer related to its Edge"
            },
            {
              "kind": "field",
              "name": "target",
              "type": {
                "text": "HTMLElement"
              },
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "description": "a target element's reference",
                  "name": "val",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "default": "null"
            },
            {
              "kind": "field",
              "name": "hasTriggerEvents",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Describes whether or not this drawer has trigger events"
            },
            {
              "kind": "method",
              "name": "removeTriggerEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes events from a trigger element"
            },
            {
              "kind": "method",
              "name": "refreshTriggerEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attaches events to the trigger element"
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "changes the display type of the Drawer",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "null"
            },
            {
              "kind": "method",
              "name": "#refreshTypeClass",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Refreshes the visual state of the Drawer related to its type"
            },
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "true if the Drawer should become visible",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "default": "false"
            },
            {
              "kind": "method",
              "name": "#refreshVisibility",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Changes visual state related to the Drawer's visibility"
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "Array<string>"
              },
              "default": "['beforeshow', 'beforehide']",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "show",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Shows the drawer"
            },
            {
              "kind": "method",
              "name": "hide",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Hides the drawer"
            },
            {
              "kind": "method",
              "name": "onOutsideClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "the original click event"
                }
              ],
              "description": "Handle `onOutsideClick` from IdsPopupOpenEventsMixin"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-drawer/ids-drawer.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsDrawer",
            "module": "src/components/ids-drawer/ids-drawer.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-dropdown/ids-dropdown-attributes-mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "A mixin that adds shared attribute setters/getters/callbacks related to IdsMonthView behaviors.",
          "name": "IdsDropdownAttributeMixin",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "allowBlank",
              "description": "Gets allow-blank value",
              "parameters": [
                {
                  "description": "adds blank option if true",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "clearable",
              "description": "When set the value can be cleared with Backspace/Delete",
              "parameters": [
                {
                  "description": "clearable value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "clearableText",
              "description": "When set the blank option will have a text",
              "parameters": [
                {
                  "description": "blank option text",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Set the dropdown size",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "any"
              },
              "description": "Accepts a superclass and creates a new subclass from it."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsDropdownAttributeMixin",
            "module": "src/components/ids-dropdown/ids-dropdown-attributes-mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-dropdown/ids-dropdown-common.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "IdsDropdownCommonAttributes",
          "type": {
            "text": "array"
          },
          "default": "[\n  attributes.ALLOW_BLANK,\n  attributes.CLEARABLE,\n  attributes.CLEARABLE_TEXT,\n  attributes.DISABLED,\n  attributes.GROUP,\n  attributes.GROUP_LABEL,\n  attributes.LIST,\n  attributes.NO_MARGINS,\n  attributes.PLACEHOLDER,\n  attributes.READONLY,\n  attributes.SHOW_LOADING_INDICATOR,\n  attributes.SIZE,\n  attributes.TYPEAHEAD,\n  attributes.VALUE\n]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IdsDropdownCommonAttributes",
          "declaration": {
            "name": "IdsDropdownCommonAttributes",
            "module": "src/components/ids-dropdown/ids-dropdown-common.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-dropdown/ids-dropdown-list.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Dropdown List Component",
          "name": "IdsDropdownList",
          "cssParts": [
            {
              "description": "the dropdown list element",
              "name": "dropdown-list"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "isMultiSelect",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "listBox",
              "type": {
                "text": "IdsListBox | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template"
            },
            {
              "kind": "method",
              "name": "onHide"
            },
            {
              "kind": "method",
              "name": "onShow"
            },
            {
              "kind": "method",
              "name": "onTargetChange"
            },
            {
              "kind": "method",
              "name": "attachEventHandlers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "addOpenEvents",
              "description": "Override `addOpenEvents` from IdsPopupOpenEventsMixin to include\nappending of some keyboard handlers"
            },
            {
              "kind": "method",
              "name": "removeOpenEvents",
              "description": "Override `removeOpenEvents` from IdsPopupOpenEventsMixin to include\nremoval of some keyboard handlers"
            },
            {
              "kind": "method",
              "name": "triggerSelectedEvent",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "optional": true,
                  "type": {
                    "text": "CustomEvent"
                  },
                  "description": "optional event handler to pass arguments"
                }
              ],
              "description": "Triggers a `selected` event that propagates to the target element (usually an IdsDropdown)"
            },
            {
              "kind": "method",
              "name": "triggerOpenEvent",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "triggerCloseEvent",
              "privacy": "private",
              "parameters": [
                {
                  "name": "doCancel",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "configurePopup",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setAriaOnMenuOpen",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Add internal aria attributes while open"
            },
            {
              "kind": "method",
              "name": "setAriaOnMenuClose",
              "privacy": "private",
              "description": "Add internal aria attributes while closed",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "options",
              "description": "Returns the currently available options",
              "return": {
                "type": {
                  "text": "Array<any>"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectedOption",
              "type": {
                "text": "IdsListBoxOption | null"
              },
              "description": "Returns the selected Listbox option based on the Dropdown's value.",
              "return": {
                "type": {
                  "text": "IdsListBoxOption| null"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "IdsListBoxOption | null"
              },
              "description": "Returns the currently-selected Listbox option\n(may be different from the Dropdown's value because of user input)",
              "readonly": true,
              "return": {
                "type": {
                  "text": "IdsListBoxOption|null"
                }
              }
            },
            {
              "kind": "field",
              "name": "typeahead",
              "description": "Get the typeahead attribute",
              "parameters": [
                {
                  "description": "typeahead value",
                  "name": "value",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Set the value of the dropdown using the value/id attribute if present",
              "parameters": [
                {
                  "description": "The value/id to use",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "method",
              "name": "clearSelected",
              "description": "Remove the aria and state from the currently selected element"
            },
            {
              "kind": "method",
              "name": "getOption",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "referenced value"
                }
              ],
              "description": "Gets a reference to an IdsDropdownList option based on a provided value",
              "return": {
                "type": {
                  "text": "IdsListBoxOption | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "selectOption",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "the option to select"
                }
              ],
              "description": "Set the aria and state on the element",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "deselectOption",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "element to remove attributes"
                }
              ],
              "description": "Removes selected attributes from an option"
            },
            {
              "kind": "method",
              "name": "onAllowBlankChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onClearableTextChange"
            },
            {
              "kind": "method",
              "name": "insertBlank",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Insert blank option into list box"
            },
            {
              "kind": "method",
              "name": "removeBlank",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Remove blank options from list box"
            },
            {
              "kind": "method",
              "name": "configureBlank",
              "description": "Refreshes the state of the \"blank\" option in the Dropdown list",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onFieldHeightChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onSizeChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-dropdown/ids-dropdown-list.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsDropdownList",
            "module": "src/components/ids-dropdown/ids-dropdown-list.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-dropdown/ids-dropdown.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Dropdown Component",
          "name": "IdsDropdown",
          "cssParts": [
            {
              "description": "the tag element",
              "name": "dropdown"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "isFormComponent",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "hasIcons",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "dropdownList",
              "type": {
                "text": "IdsDropdownList | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "IdsTriggerButton | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "listBox",
              "type": {
                "text": "IdsListBox | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "labelClicked",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "labelEl",
              "type": {
                "text": "HTMLLabelElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "openedByKeyboard",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets to true when a keyboard operation opens the dropdown (prevents extraneous event triggering)"
            },
            {
              "kind": "field",
              "name": "closedByKeyboard",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets to true when a keyboard operation closes the dropdown (prevents extraneous event triggering)"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#optionsData",
              "privacy": "private",
              "type": {
                "text": "IdsDropdownOptions"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "#isMultiSelect",
              "privacy": "private",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "Array<string>"
              },
              "default": "['alternate-formatter', 'borderless', 'in-cell']",
              "description": "List of available color variants for this component",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Push color variant to the container element"
            },
            {
              "kind": "method",
              "name": "onLabelChange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onLabelStateChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Push label-state to the container element"
            },
            {
              "kind": "method",
              "name": "onLabelRequiredChange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onFieldHeightChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "the new field height setting"
                }
              ],
              "description": "Push field-height/compact to the container element"
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "method",
              "name": "templateDropdownList",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#addAria",
              "description": "Add internal aria attributes",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "field",
              "name": "input",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "popup",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Set the value of the dropdown using the value/id attribute if present",
              "parameters": [
                {
                  "description": "The value/id to use",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "selectedOption",
              "type": {
                "text": "HTMLElement | null"
              },
              "description": "Returns the selected Listbox option based on the Dropdown's value.",
              "return": {
                "type": {
                  "text": "HTMLElement| null"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "HTMLElement | null"
              },
              "description": "Returns the currently-selected Listbox option\n(may be different from the Dropdown's value because of user input)",
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement|null"
                }
              }
            },
            {
              "kind": "field",
              "name": "selectedIndex",
              "description": "Set the selected option by index",
              "parameters": [
                {
                  "description": "the index to use",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "options",
              "description": "Returns the currently available options",
              "return": {
                "type": {
                  "text": "Array<IdsListBoxOption>"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "readonly",
              "description": "Sets the readonly attribute",
              "parameters": [
                {
                  "description": "string value from the readonly attribute",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets the disabled attribute",
              "parameters": [
                {
                  "description": "string value from the disabled attribute",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onAllowBlankChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "selectOption",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "the option to select"
                }
              ],
              "description": "Set the aria and state on the element",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "deselectOption",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "element to remove attributes"
                }
              ],
              "description": "Removes selected attributes from an option"
            },
            {
              "kind": "method",
              "name": "selectIcon",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "the option to select"
                }
              ],
              "description": "Set the icon to be visible (if used)",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "selectTooltip",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "the option to select"
                }
              ],
              "description": "Set the tooltip to be visible for the selected option",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "clearSelected",
              "description": "Remove the aria and state from the currently selected element"
            },
            {
              "kind": "method",
              "name": "configurePopup",
              "description": "Configures the Dropdown component's attached IdsDropdownList/IdsPopup"
            },
            {
              "kind": "method",
              "name": "open",
              "parameters": [
                {
                  "name": "shouldSelect",
                  "default": "false",
                  "description": "whether or not the input text should be selected",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Open the dropdown list"
            },
            {
              "kind": "method",
              "name": "loadDataSet",
              "parameters": [
                {
                  "name": "dataset",
                  "type": {
                    "text": "IdsDropdownOptions"
                  },
                  "description": "The dataset to use with value, label ect..."
                }
              ],
              "description": "Populate the DOM with the dataset",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "beforeShow",
              "description": "An async function that fires as the dropdown is opening allowing you to set contents.",
              "parameters": [
                {
                  "description": "The async function",
                  "name": "func",
                  "type": {
                    "text": "Function"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "close",
              "parameters": [
                {
                  "name": "noFocus",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "if true do not focus on close"
                }
              ],
              "description": "Close the dropdown popup"
            },
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "shouldSelect",
                  "default": "false",
                  "description": "whether or not the input text should be selected",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Toggle the dropdown list open/closed state",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "description": "Establish Internal Event Handlers",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "attachKeyboardOpenEvent",
              "privacy": "private",
              "description": "Attach a keyboard event for Enter/Spacebar that opens the dropdown.\nThis needs to happen separately from the other event handlers because this\none is rebound every time the list is closed."
            },
            {
              "kind": "field",
              "name": "onLanguageChange",
              "description": "Handle the Locale Change"
            },
            {
              "kind": "method",
              "name": "attachClickEvent",
              "description": "Connects event handlers related to activation of the Dropdown List"
            },
            {
              "kind": "method",
              "name": "attachOpenEvents",
              "privacy": "private",
              "description": "Connects interaction events that should only be present when the\ndropdown list is open"
            },
            {
              "kind": "method",
              "name": "attachKeyboardSelectionEvent",
              "description": "Establish selection event for keyboard interactions.\nOverrides a similiar method from IdsDropdown for Multiselect-specific behavior."
            },
            {
              "kind": "method",
              "name": "removeOpenEvents",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachKeyboardListeners",
              "description": "Establish Internal Keyboard shortcuts",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#typeAhead",
              "parameters": [
                {
                  "name": "text",
                  "type": {
                    "text": "string"
                  },
                  "description": "keydownend event detail keys"
                }
              ],
              "description": "Handle typeahead functionality",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#selectMatch",
              "parameters": [
                {
                  "name": "input",
                  "type": {
                    "text": "string"
                  },
                  "description": "the text to find by"
                }
              ],
              "description": "Find and select the only option by input text provided"
            },
            {
              "kind": "method",
              "name": "#triggerIconChange",
              "parameters": [
                {
                  "name": "icon",
                  "type": {
                    "text": "string"
                  },
                  "description": "ids-icon icon value"
                }
              ],
              "description": "Helper to replace trigger button icon"
            },
            {
              "kind": "method",
              "name": "#selectFirstOption",
              "description": "Select first no blank with value option"
            },
            {
              "kind": "method",
              "name": "#templatelistBoxOption",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "IdsDropdownOption"
                  },
                  "description": "data object"
                }
              ],
              "description": "Create the list box option template."
            },
            {
              "kind": "method",
              "name": "#getGroupIndex",
              "parameters": [
                {
                  "name": "groupLabels",
                  "type": {
                    "text": "Array<number>"
                  },
                  "description": "group label indexes in the options list"
                },
                {
                  "name": "optionIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "option index in the options list"
                }
              ],
              "description": "Helper to get group index for given option index in the options list",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "#getGroupLabelOption",
              "return": {
                "type": {
                  "text": "IdsDropdownOption | undefined"
                }
              },
              "parameters": [
                {
                  "name": "optionIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "option index in the options list"
                }
              ],
              "description": "Helper to get group option for given option index in the options list"
            },
            {
              "kind": "method",
              "name": "#findMatches",
              "return": {
                "type": {
                  "text": "IdsDropdownOptions"
                }
              },
              "parameters": [
                {
                  "name": "inputValue",
                  "type": {
                    "text": "string"
                  },
                  "description": "value of the input field"
                }
              ],
              "description": "Find matches between the input value and the dataset"
            },
            {
              "kind": "method",
              "name": "#setOptionsData",
              "description": "Map slotted ids-list-box-option elements to the dataset"
            },
            {
              "kind": "method",
              "name": "#sanitizeOption",
              "return": {
                "type": {
                  "text": "IdsDropdownOption"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "IdsDropdownOption"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "validate",
              "description": "Pass down `validate` attribute into IdsTriggerField",
              "parameters": [
                {
                  "description": "The `validate` attribute",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "validationEvents",
              "description": "Pass down `validation-events` attribute into IdsTriggerField",
              "parameters": [
                {
                  "description": "The `validation-events` attribute",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "configureDropdownList",
              "privacy": "private",
              "description": "Configures the connected Dropdown list component"
            },
            {
              "kind": "field",
              "name": "list",
              "description": "Defines the existence of an external IdsDropdownList component, and connects this IdsDropdown\nto the component via events.",
              "parameters": [
                {
                  "description": "ID attribute name",
                  "name": "val",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "noMargins",
              "description": "Sets the no margins attribute",
              "parameters": [
                {
                  "description": "The value for no margins attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "onSizeChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "typeahead",
              "description": "Get the typeahead attribute",
              "parameters": [
                {
                  "description": "typeahead value",
                  "name": "value",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "onClearableTextChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Get the placeholder attribute",
              "parameters": [
                {
                  "description": "the placeholder's text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Pass focus internally"
            },
            {
              "kind": "field",
              "name": "showLoadingIndicator",
              "description": "show-loading-indicator attribute",
              "parameters": [
                {
                  "description": "show-loading-indicator attribute value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string|null"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "object"
              },
              "default": "{ selectedIndex: 0 }"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-dropdown/ids-dropdown.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsDropdown",
            "module": "src/components/ids-dropdown/ids-dropdown.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-editor/ids-editor-clean-utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "isWordFormat",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "content",
              "type": {
                "text": "string"
              },
              "description": "The html"
            }
          ],
          "description": "Check if given html is word format"
        },
        {
          "kind": "function",
          "name": "cleanWordHtml",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "content",
              "type": {
                "text": "string"
              },
              "description": "The html"
            }
          ],
          "description": "Clean word format for given html"
        },
        {
          "kind": "function",
          "name": "stripStyles",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "content",
              "type": {
                "text": "string"
              },
              "description": "The html"
            },
            {
              "name": "styleStripper",
              "type": {
                "text": "RegExp"
              },
              "description": "The RegExp"
            }
          ],
          "description": "Strip given styles",
          "privacy": "private"
        },
        {
          "kind": "function",
          "name": "stripAttribute",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "content",
              "type": {
                "text": "string"
              },
              "description": "The html"
            },
            {
              "name": "attribute",
              "type": {
                "text": "string"
              },
              "description": "The attribute"
            },
            {
              "name": "attributeStripper",
              "type": {
                "text": "RegExp"
              },
              "description": "The RegExp"
            }
          ],
          "description": "Strip given attribute",
          "privacy": "private"
        },
        {
          "kind": "function",
          "name": "cleanHtml",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "content",
              "type": {
                "text": "string"
              },
              "description": "The html"
            }
          ],
          "description": "Clean given html",
          "privacy": "private"
        },
        {
          "kind": "function",
          "name": "trimContent",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "content",
              "type": {
                "text": "string"
              },
              "description": "The html."
            }
          ],
          "description": "Trim out the editor spaces for comparison.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "isWordFormat",
          "declaration": {
            "name": "isWordFormat",
            "module": "src/components/ids-editor/ids-editor-clean-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "cleanWordHtml",
          "declaration": {
            "name": "cleanWordHtml",
            "module": "src/components/ids-editor/ids-editor-clean-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "stripStyles",
          "declaration": {
            "name": "stripStyles",
            "module": "src/components/ids-editor/ids-editor-clean-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "stripAttribute",
          "declaration": {
            "name": "stripAttribute",
            "module": "src/components/ids-editor/ids-editor-clean-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "cleanHtml",
          "declaration": {
            "name": "cleanHtml",
            "module": "src/components/ids-editor/ids-editor-clean-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "trimContent",
          "declaration": {
            "name": "trimContent",
            "module": "src/components/ids-editor/ids-editor-clean-utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-editor/ids-editor-formatters.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "formatHtml",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "html",
              "type": {
                "text": "string"
              },
              "description": "true will force to toggle in to source mode."
            }
          ],
          "description": "Format given string to proper indentation."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "formatHtml",
            "module": "src/components/ids-editor/ids-editor-formatters.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-editor/ids-editor-handle-paste.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "handlePasteAsPlainText",
          "return": {
            "type": {
              "text": "string|null"
            }
          },
          "parameters": [
            {
              "name": "e",
              "optional": true,
              "type": {
                "text": "ClipboardEvent"
              },
              "description": "The event"
            }
          ],
          "description": "Paste as plain text.",
          "privacy": "private"
        },
        {
          "kind": "function",
          "name": "handlePasteAsHtml",
          "return": {
            "type": {
              "text": "string|null"
            }
          },
          "parameters": [
            {
              "name": "e",
              "optional": true,
              "type": {
                "text": "ClipboardEvent"
              },
              "description": "The event"
            }
          ],
          "description": "Paste as Html.",
          "privacy": "private"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "handlePasteAsPlainText",
          "declaration": {
            "name": "handlePasteAsPlainText",
            "module": "src/components/ids-editor/ids-editor-handle-paste.ts"
          }
        },
        {
          "kind": "js",
          "name": "handlePasteAsHtml",
          "declaration": {
            "name": "handlePasteAsHtml",
            "module": "src/components/ids-editor/ids-editor-handle-paste.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-editor/ids-editor-selection-utils.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "blockElem",
          "return": {
            "type": {
              "text": "IdsEditorBlockElem"
            }
          },
          "parameters": [
            {
              "name": "sel",
              "type": {
                "text": "Selection"
              },
              "description": "The selection."
            }
          ],
          "description": "Get block element and tagName for given node"
        },
        {
          "kind": "function",
          "name": "selectionBlockElems",
          "return": {
            "type": {
              "text": "Array<HTMLElement>"
            }
          },
          "parameters": [
            {
              "name": "sel",
              "type": {
                "text": "Selection"
              },
              "description": "The selection."
            },
            {
              "name": "elem",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The element."
            }
          ],
          "description": "Get list of block elements for selection"
        },
        {
          "kind": "function",
          "name": "saveSelection",
          "return": {
            "type": {
              "text": "Array<Range>|null"
            }
          },
          "parameters": [
            {
              "name": "sel",
              "type": {
                "text": "Selection"
              },
              "description": "The selection."
            }
          ],
          "description": "Save current selection."
        },
        {
          "kind": "function",
          "name": "restoreSelection",
          "parameters": [
            {
              "name": "sel",
              "type": {
                "text": "Selection"
              },
              "description": "The selection."
            },
            {
              "name": "savedSel",
              "type": {
                "text": "Array<Range>|null"
              },
              "description": "Saved selection ranges."
            }
          ],
          "description": "Restore selection.",
          "return": {
            "type": {
              "text": "void"
            }
          }
        },
        {
          "kind": "function",
          "name": "selectionParents",
          "return": {
            "type": {
              "text": "object"
            }
          },
          "parameters": [
            {
              "name": "sel",
              "type": {
                "text": "Selection"
              },
              "description": "The selection."
            },
            {
              "name": "elem",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The element."
            }
          ],
          "description": "Get all selection parents."
        },
        {
          "kind": "function",
          "name": "findElementInSelection",
          "return": {
            "type": {
              "text": "HTMLElement|null"
            }
          },
          "parameters": [
            {
              "name": "sel",
              "type": {
                "text": "Selection"
              },
              "description": "The selection."
            },
            {
              "name": "container",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The editor container element."
            },
            {
              "name": "tagname",
              "type": {
                "text": "string"
              },
              "description": "The tagname to find."
            }
          ],
          "description": "Find element within the selection\nhttp://stackoverflow.com/questions/6052870/how-to-know-if-there-is-a-link-element-within-the-selection"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "blockElem",
          "declaration": {
            "name": "blockElem",
            "module": "src/components/ids-editor/ids-editor-selection-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "selectionBlockElems",
          "declaration": {
            "name": "selectionBlockElems",
            "module": "src/components/ids-editor/ids-editor-selection-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "saveSelection",
          "declaration": {
            "name": "saveSelection",
            "module": "src/components/ids-editor/ids-editor-selection-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "restoreSelection",
          "declaration": {
            "name": "restoreSelection",
            "module": "src/components/ids-editor/ids-editor-selection-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "selectionParents",
          "declaration": {
            "name": "selectionParents",
            "module": "src/components/ids-editor/ids-editor-selection-utils.ts"
          }
        },
        {
          "kind": "js",
          "name": "findElementInSelection",
          "declaration": {
            "name": "findElementInSelection",
            "module": "src/components/ids-editor/ids-editor-selection-utils.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-editor/ids-editor-shared.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "VIEWS",
          "type": {
            "text": "array"
          },
          "default": "['editor', 'source']"
        },
        {
          "kind": "variable",
          "name": "PARAGRAPH_SEPARATORS",
          "type": {
            "text": "array"
          },
          "default": "['p', 'div', 'br']"
        },
        {
          "kind": "variable",
          "name": "BLOCK_ELEMENTS",
          "type": {
            "text": "array"
          },
          "default": "['p', 'div', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'blockquote', 'pre']"
        },
        {
          "kind": "variable",
          "name": "FONT_SIZES",
          "type": {
            "text": "array"
          },
          "default": "['1', '2', '3', '4', '5', '6', '7']"
        },
        {
          "kind": "variable",
          "name": "CLASSES",
          "type": {
            "text": "object"
          },
          "default": "{ hidden: 'hidden', labelRequired: 'no-required-indicator' }"
        },
        {
          "kind": "variable",
          "name": "EDITOR_DEFAULTS",
          "type": {
            "text": "object"
          },
          "default": "{\n  disabled: false,\n  label: 'Ids editor',\n  labelHidden: false,\n  labelRequired: true,\n  modals: {\n    hyperlink: {\n      url: 'http://www.example.com',\n      classes: 'hyperlink',\n      targets: [\n        { text: 'Same Window', value: '' },\n        { text: 'New Window', value: '_blank', selected: true }\n      ],\n      // Clickable hyperlink in editor\n      isClickable: false,\n      showIsClickable: true\n    },\n    insertimage: {\n      url: '',\n      alt: ''\n    }\n  },\n  paragraphSeparator: 'p',\n  pasteAsPlainText: false,\n  readonly: false,\n  sourceFormatter: false,\n  view: 'editor', // 'editor', 'source'\n}"
        },
        {
          "kind": "variable",
          "name": "EDITOR_ATTRIBUTES",
          "type": {
            "text": "array"
          },
          "default": "[\n  ...IdsLabelStateAttributes,\n  attributes.DISABLED,\n  attributes.PARAGRAPH_SEPARATOR,\n  attributes.PASTE_AS_PLAIN_TEXT,\n  attributes.PLACEHOLDER,\n  attributes.READONLY,\n  attributes.SOURCE_FORMATTER,\n  attributes.VIEW\n]"
        },
        {
          "kind": "function",
          "name": "qs",
          "return": {
            "type": {
              "text": "any"
            }
          },
          "parameters": [
            {
              "name": "s",
              "type": {
                "text": "string"
              },
              "description": "The selector."
            },
            {
              "name": "root",
              "type": {
                "text": "ShadowRoot|HTMLElement"
              },
              "description": "The root element."
            }
          ],
          "description": "Query selector in shadow root or given element."
        },
        {
          "kind": "function",
          "name": "qsAll",
          "return": {
            "type": {
              "text": "Array<any>"
            }
          },
          "parameters": [
            {
              "name": "s",
              "type": {
                "text": "string"
              },
              "description": "The selector."
            },
            {
              "name": "root",
              "type": {
                "text": "ShadowRoot|HTMLElement"
              },
              "description": "The root element."
            }
          ],
          "description": "Query selector all in shadow root or given element."
        },
        {
          "kind": "function",
          "name": "rgbToHex",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "rgb",
              "type": {
                "text": "string"
              },
              "description": "The rgb value"
            }
          ],
          "description": "Convert rgb to hex color value."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "VIEWS",
          "declaration": {
            "name": "VIEWS",
            "module": "src/components/ids-editor/ids-editor-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "PARAGRAPH_SEPARATORS",
          "declaration": {
            "name": "PARAGRAPH_SEPARATORS",
            "module": "src/components/ids-editor/ids-editor-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "BLOCK_ELEMENTS",
          "declaration": {
            "name": "BLOCK_ELEMENTS",
            "module": "src/components/ids-editor/ids-editor-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "FONT_SIZES",
          "declaration": {
            "name": "FONT_SIZES",
            "module": "src/components/ids-editor/ids-editor-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "CLASSES",
          "declaration": {
            "name": "CLASSES",
            "module": "src/components/ids-editor/ids-editor-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "EDITOR_DEFAULTS",
          "declaration": {
            "name": "EDITOR_DEFAULTS",
            "module": "src/components/ids-editor/ids-editor-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "EDITOR_ATTRIBUTES",
          "declaration": {
            "name": "EDITOR_ATTRIBUTES",
            "module": "src/components/ids-editor/ids-editor-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "qs",
          "declaration": {
            "name": "qs",
            "module": "src/components/ids-editor/ids-editor-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "qsAll",
          "declaration": {
            "name": "qsAll",
            "module": "src/components/ids-editor/ids-editor-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "rgbToHex",
          "declaration": {
            "name": "rgbToHex",
            "module": "src/components/ids-editor/ids-editor-shared.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-editor/ids-editor-templates.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "parseTemplate",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "str",
              "type": {
                "text": "string"
              },
              "description": "The template string"
            },
            {
              "name": "ctx",
              "type": {
                "text": "any"
              },
              "description": "The context key/value"
            }
          ],
          "description": "Parse given template string with each context."
        },
        {
          "kind": "variable",
          "name": "editorTemplate",
          "default": "`\n  <div class=\"ids-editor\" part=\"editor\"{disabled}{readonly}>\n    <slot class=\"{hiddenClass}\"></slot>\n    <ids-text id=\"editor-label\" label class=\"{labelClass}{hiddenLabelCss}{requiredLabelCss}\" part=\"editor-label\"{disabled}{readonly}>{labelText}</ids-text>\n    <div class=\"main-container\" part=\"main-container\">\n      <div class=\"toolbar-container\" part=\"toolbar-container\">\n        <slot name=\"toolbar\"></slot>\n      </div>\n      <div class=\"editor-content\">\n        <div id=\"editor-container\" class=\"editor-container\" part=\"editor-container\"{contenteditable} aria-multiline=\"true\" role=\"textbox\" aria-labelledby=\"editor-label\"{placeholder}></div>\n        <div class=\"source-container {hiddenClass}\" part=\"source-container\">\n          <div class=\"source-wrapper\">\n            <ul class=\"line-numbers\"></ul>\n            <label class=\"audible\" for=\"source-textarea\">\n              {sourceTextareaLabel}\n            </label>\n            <textarea id=\"source-textarea\" class=\"source-textarea\"{placeholder}></textarea>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>`"
        },
        {
          "kind": "variable",
          "name": "btnEditorModeTemplate",
          "default": "`\n  <ids-button editor-action=\"editormode\" square=\"true\" tooltip=\"View Visual\" color-variant=\"alternate-formatter\">\n    <span class=\"audible\">View Visual</span>\n    <ids-icon icon=\"visual\" width=\"50\" viewbox=\"0 0 73 18\"></ids-icon>\n  </ids-button>`"
        },
        {
          "kind": "variable",
          "name": "btnSourceModeTemplate",
          "default": "`\n  <ids-button editor-action=\"sourcemode\" square=\"true\" tooltip=\"View Source\" color-variant=\"alternate-formatter\">\n    <span class=\"audible\">View Source</span>\n    <ids-icon icon=\"html\" width=\"38\" viewbox=\"0 0 54 18\"></ids-icon>\n  </ids-button>`"
        },
        {
          "kind": "variable",
          "name": "toolbarTemplate",
          "default": "`\n  <ids-toolbar slot=\"toolbar\" type=\"formatter\">\n    <ids-toolbar-section type=\"buttonset\">\n      <ids-menu-button\n        editor-action=\"formatblock\"\n        id=\"btn-formatblock-{instanceCounter}\"\n        role=\"button\"\n        menu=\"menu-formatblock-{instanceCounter}\"\n        tooltip=\"Choose Font Style\"\n        formatter-width=\"125px\"\n        dropdown-icon\n        no-padding=\"true\"\n        trigger-type=\"click\"\n        color-variant=\"alternate-formatter\">\n        <span>Normal Text</span>\n      </ids-menu-button>\n      <ids-popup-menu id=\"menu-formatblock-{instanceCounter}\" target=\"#btn-formatblock-{instanceCounter}\">\n        <ids-menu-group>\n          <ids-menu-item value=\"p\" selected=\"true\"><ids-text>Normal Text</ids-text></ids-menu-item>\n          <ids-menu-item value=\"h1\"><ids-text font-size=\"28\">Header 1</ids-text></ids-menu-item>\n          <ids-menu-item value=\"h2\"><ids-text font-size=\"24\">Header 2</ids-text></ids-menu-item>\n          <ids-menu-item value=\"h3\"><ids-text font-size=\"20\">Header 3</ids-text></ids-menu-item>\n        </ids-menu-group>\n      </ids-popup-menu>\n      <ids-separator vertical></ids-separator>\n      <ids-button editor-action=\"bold\" square=\"true\" tooltip=\"Toggle Bold Text\" color-variant=\"alternate-formatter\">\n        <span class=\"audible\">Bold</span>\n        <ids-icon icon=\"bold\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"italic\" square=\"true\" tooltip=\"Toggle Italic Text\" color-variant=\"alternate-formatter\">\n        <span class=\"audible\">Italic</span>\n        <ids-icon icon=\"italic\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"underline\" square=\"true\" tooltip=\"Toggle Underline Text\" color-variant=\"alternate-formatter\">\n        <span class=\"audible\">Underline</span>\n        <ids-icon icon=\"underline\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"strikethrough\" square=\"true\" tooltip=\"Toggle Strike Through Text\" color-variant=\"alternate-formatter\">\n        <span class=\"audible\">Strike through</span>\n        <ids-icon icon=\"strike-through\"></ids-icon>\n      </ids-button>\n      <ids-separator vertical></ids-separator>\n      <ids-button editor-action=\"forecolor\" square=\"true\" tooltip=\"Text Color\" color-variant=\"alternate-formatter\">\n        <span class=\"audible\">Text color</span>\n        <ids-icon icon=\"fore-color\"></ids-icon>\n      </ids-button>\n      <ids-separator vertical></ids-separator>\n      <ids-button editor-action=\"alignleft\" square=\"true\" tooltip=\"Align Left\" color-variant=\"alternate-formatter\">\n        <span class=\"audible\">Align left</span>\n        <ids-icon icon=\"left-text-align\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"aligncenter\" square=\"true\" tooltip=\"Align Center\" color-variant=\"alternate-formatter\">\n        <span class=\"audible\">Align center</span>\n        <ids-icon icon=\"center-text\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"alignright\" square=\"true\" tooltip=\"Align Right\" color-variant=\"alternate-formatter\">\n        <span class=\"audible\">Align right</span>\n        <ids-icon icon=\"right-text-align\"></ids-icon>\n      </ids-button>\n      <ids-separator vertical></ids-separator>\n      <ids-button editor-action=\"blockquote\" square=\"true\" tooltip=\"Block Quote\" color-variant=\"alternate-formatter\">\n        <span class=\"audible\">Block quote</span>\n        <ids-icon icon=\"quote\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"orderedlist\" square=\"true\" tooltip=\"Insert/Remove Numbered List\" color-variant=\"alternate-formatter\">\n        <span class=\"audible\">Ordered List</span>\n        <ids-icon icon=\"number-list\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"unorderedlist\" square=\"true\" tooltip=\"Insert/Remove Bulleted List\" color-variant=\"alternate-formatter\">\n        <span class=\"audible\">Unordered List</span>\n        <ids-icon icon=\"bullet-list\"></ids-icon>\n      </ids-button>\n      <ids-separator vertical></ids-separator>\n      <ids-button editor-action=\"hyperlink\" square=\"true\" tooltip=\"Insert Hyperlink\" color-variant=\"alternate-formatter\">\n        <span class=\"audible\">Insert Hyperlink</span>\n        <ids-icon icon=\"link\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"insertimage\" square=\"true\" tooltip=\"Insert Image\" color-variant=\"alternate-formatter\">\n        <span class=\"audible\">Insert Image</span>\n        <ids-icon icon=\"insert-image\"></ids-icon>\n      </ids-button>\n      <ids-separator vertical></ids-separator>\n      <ids-button editor-action=\"clearformatting\" square=\"true\" tooltip=\"Clear Formatting\" color-variant=\"alternate-formatter\">\n        <span class=\"audible\">Clear Formatting</span>\n        <ids-icon icon=\"clear-formatting\"></ids-icon>\n      </ids-button>\n      <ids-separator vertical></ids-separator>\n      ${btnSourceModeTemplate}\n      ${btnEditorModeTemplate}\n    </ids-toolbar-section>\n    <ids-toolbar-more-actions overflow color-variant=\"alternate-formatter\"></ids-toolbar-more-actions>\n  </ids-toolbar>`"
        },
        {
          "kind": "variable",
          "name": "errorMessageTemplate",
          "default": "`\n  <ids-message id=\"errormessage-modal\" status=\"error\">\n    <ids-text slot=\"title\" font-size=\"24\" type=\"h2\" id=\"errormessage-modal-title\">No Selection!</ids-text>\n    <ids-text class=\"demo-contents\" align=\"left\">Please make some selection to complete this task.</ids-text>\n    <ids-modal-button slot=\"buttons\" appearance=\"primary\" id=\"errormessage-modal-ok\">OK</ids-modal-button>\n  </ids-message>`"
        },
        {
          "kind": "variable",
          "name": "hyperlinkModalTemplate",
          "default": "`\n  <ids-modal id=\"{key}-modal\">\n    <ids-text slot=\"title\" font-size=\"24\" type=\"h2\" id=\"{key}-modal-title\">Insert Anchor</ids-text>\n    <ids-layout-grid class=\"data-grid-container\" auto-fit=\"true\" gap=\"md\" no-margins=\"true\" min-col-width=\"300px\">\n      <ids-layout-grid-cell>\n        <ids-input id=\"{key}-modal-input-url\" label=\"Url\" value=\"{url}\" validate=\"required\"></ids-input>\n        {clickableElemHtml}\n        <ids-input id=\"{key}-modal-input-classes\" label=\"Css Class\" value=\"{classes}\"></ids-input>\n        {targetDropdownHtml}\n        <div id=\"{key}-modal-checkbox-remove-container\" class=\"{hiddenClass}\">\n          <ids-checkbox id=\"{key}-modal-checkbox-remove\" label=\"Remove hyperlink\"></ids-checkbox>\n        </div>\n      </ids-layout-grid-cell>\n    </ids-layout-grid>\n    <ids-modal-button slot=\"buttons\" id=\"{key}-modal-cancel-btn\" appearance=\"secondary\">\n      <span>Cancel</span>\n    </ids-modal-button>\n    <ids-modal-button slot=\"buttons\" id=\"{key}-modal-apply-btn\" appearance=\"primary\">\n      <span>Apply</span>\n    </ids-modal-button>\n  </ids-modal>`"
        },
        {
          "kind": "variable",
          "name": "insertimageModalTemplate",
          "default": "`\n  <ids-modal id=\"{key}-modal\">\n    <ids-text slot=\"title\" font-size=\"24\" type=\"h2\" id=\"{key}-modal-title\">Insert Image</ids-text>\n    <ids-layout-grid class=\"data-grid-container\" auto-fit=\"true\" gap=\"md\" no-margins=\"true\" min-col-width=\"300px\">\n      <ids-layout-grid-cell>\n        <ids-input id=\"{key}-modal-input-src\" label=\"Url\" value=\"{url}\" validate=\"required\"></ids-input>\n        <ids-input id=\"{key}-modal-input-alt\" label=\"Alt text\" value=\"{alt}\"></ids-input>\n      </ids-layout-grid-cell>\n    </ids-layout-grid>\n\n    <ids-modal-button slot=\"buttons\" id=\"{key}-modal-cancel-btn\" appearance=\"secondary\">\n      <span>Cancel</span>\n    </ids-modal-button>\n    <ids-modal-button slot=\"buttons\" id=\"{key}-modal-apply-btn\" appearance=\"primary\">\n      <span>Apply</span>\n    </ids-modal-button>\n  </ids-modal>`"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "parseTemplate",
          "declaration": {
            "name": "parseTemplate",
            "module": "src/components/ids-editor/ids-editor-templates.ts"
          }
        },
        {
          "kind": "js",
          "name": "editorTemplate",
          "declaration": {
            "name": "editorTemplate",
            "module": "src/components/ids-editor/ids-editor-templates.ts"
          }
        },
        {
          "kind": "js",
          "name": "btnEditorModeTemplate",
          "declaration": {
            "name": "btnEditorModeTemplate",
            "module": "src/components/ids-editor/ids-editor-templates.ts"
          }
        },
        {
          "kind": "js",
          "name": "btnSourceModeTemplate",
          "declaration": {
            "name": "btnSourceModeTemplate",
            "module": "src/components/ids-editor/ids-editor-templates.ts"
          }
        },
        {
          "kind": "js",
          "name": "toolbarTemplate",
          "declaration": {
            "name": "toolbarTemplate",
            "module": "src/components/ids-editor/ids-editor-templates.ts"
          }
        },
        {
          "kind": "js",
          "name": "errorMessageTemplate",
          "declaration": {
            "name": "errorMessageTemplate",
            "module": "src/components/ids-editor/ids-editor-templates.ts"
          }
        },
        {
          "kind": "js",
          "name": "hyperlinkModalTemplate",
          "declaration": {
            "name": "hyperlinkModalTemplate",
            "module": "src/components/ids-editor/ids-editor-templates.ts"
          }
        },
        {
          "kind": "js",
          "name": "insertimageModalTemplate",
          "declaration": {
            "name": "insertimageModalTemplate",
            "module": "src/components/ids-editor/ids-editor-templates.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-editor/ids-editor.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Editor Component",
          "name": "IdsEditor",
          "cssParts": [
            {
              "description": "the editor element",
              "name": "editor"
            },
            {
              "description": "the editor label element",
              "name": "editor-label"
            },
            {
              "description": "the main container element",
              "name": "main-container"
            },
            {
              "description": "the toolbar container element",
              "name": "toolbar-container"
            },
            {
              "description": "the editor container element",
              "name": "editor-container"
            },
            {
              "description": "the source container element",
              "name": "source-container"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "validationElems",
              "type": {
                "text": "Record<string, any> | undefined"
              }
            },
            {
              "kind": "field",
              "name": "reqInitialize",
              "type": {
                "text": "boolean | undefined"
              }
            },
            {
              "kind": "field",
              "name": "isFormComponent",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "array"
              },
              "default": "[\n    'beforesourcemode',\n    'beforeeditormode',\n    'beforepaste'\n  ]",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "modalElementsValue",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "parameters": [
                {
                  "name": "modals",
                  "optional": true,
                  "type": {
                    "text": "@param {object} [modals.hyperlink] The hyperlink options.\n   * @param {string} [modals.hyperlink.url] Url for hyperlink.\n   * @param {string} [modals.hyperlink.classes] Css Class for hyperlink.\n   * @param {Array<object>} [modals.hyperlink.targets] List target options for hyperlink.\n   * @param {boolean} [modals.hyperlink.isClickable] If true, isClickable checkbox should checked.\n   * @param {boolean} [modals.hyperlink.showIsClickable] If true, will show isClickable checkbox.\n   * @param {object} [modals.insertimage] The insertimage options.\n   * @param {string} [modals.insertimage.url] Url for insertimage.\n   * @param {string} [modals.insertimage.alt] Alt text for insertimage.\n   * "
                  },
                  "description": "Incoming modals options."
                }
              ],
              "description": "Set default value to each element in modals."
            },
            {
              "kind": "method",
              "name": "sourceTextareaLabel",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Get label text for source textarea."
            },
            {
              "kind": "field",
              "name": "#modals",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "default": "{}",
              "description": "Modals attached to editor."
            },
            {
              "kind": "field",
              "name": "#paragraphSeparator",
              "privacy": "private",
              "type": {
                "text": "string | undefined"
              },
              "description": "Current paragraph separator."
            },
            {
              "kind": "field",
              "name": "#savedSelection",
              "privacy": "private",
              "type": {
                "text": "Array<Range> | undefined"
              },
              "description": "Saved current selection ranges."
            },
            {
              "kind": "field",
              "name": "#elems",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "default": "{}",
              "description": "Cache elements use most."
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "any | undefined"
              }
            },
            {
              "kind": "field",
              "name": "labelEl",
              "type": {
                "text": "IdsText | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "#actions",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "default": "{\n    // STYLES\n    bold: { action: 'bold', keyid: 'KeyB' },\n    italic: { action: 'italic', keyid: 'KeyI' },\n    underline: { action: 'underline', keyid: 'KeyU' },\n    strikethrough: { action: 'strikeThrough', keyid: 'KeyS|shift' },\n\n    // SCRIPTS\n    superscript: { action: 'superscript', keyid: 'Equal|shift' },\n    subscript: { action: 'subscript', keyid: 'Equal' },\n\n    // TEXT FORMAT\n    formatblock: { action: 'formatBlock', value: [...BLOCK_ELEMENTS] },\n\n    // FONT SIZE\n    fontsize: { action: 'fontSize', value: [...FONT_SIZES] },\n\n    // COLORS\n    forecolor: { action: 'foreColor', keyid: 'KeyK|shift|alt' },\n    backcolor: { action: 'backColor' },\n\n    // LISTS\n    orderedlist: { action: 'insertOrderedList', keyid: 'KeyO|shift' },\n    unorderedlist: { action: 'insertUnorderedList', keyid: 'KeyU|shift' },\n\n    // INSERT\n    insertimage: { action: 'insertImage', keyid: 'KeyI|shift' },\n    hyperlink: { action: 'createLink', keyid: 'KeyK' },\n    unlink: { action: 'unlink', keyid: 'KeyK|shift' },\n    inserthtml: { action: 'insertHTML' },\n    inserthorizontalrule: { action: 'insertHorizontalRule', keyid: 'KeyL|shift' },\n\n    // ALIGNMENT\n    alignleft: { action: 'justifyLeft', keyid: 'KeyL' },\n    alignright: { action: 'justifyRight', keyid: 'KeyR' },\n    aligncenter: { action: 'justifyCenter', keyid: 'KeyE' },\n    alignjustify: { action: 'justifyFull', keyid: 'KeyJ' },\n\n    // CLEAR FORMATTING\n    clearformatting: { action: 'removeFormat', keyid: 'Space|shift' },\n\n    // HISTORY\n    redo: { action: 'redo', keyid: 'KeyY' },\n    undo: { action: 'undo', keyid: 'KeyZ' },\n\n    // EXTRA\n    editormode: { action: 'editorMode', keyid: 'Backquote|shift' },\n    sourcemode: { action: 'sourceMode', keyid: 'Backquote' }\n  }",
              "description": "List of actions can be execute with editor.\nextra actions get added in `#initContent()`"
            },
            {
              "kind": "field",
              "name": "#resizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(() => this.#resize())",
              "description": "Attach the resize observer."
            },
            {
              "kind": "method",
              "name": "#triggerEvent",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "parameters": [
                {
                  "name": "eventtName",
                  "type": {
                    "text": "string"
                  },
                  "description": "The event name to be trigger."
                },
                {
                  "name": "target",
                  "default": "this",
                  "type": {
                    "text": "object|HTMLElement"
                  },
                  "description": "The target element."
                },
                {
                  "name": "extra",
                  "default": "{}",
                  "type": {
                    "text": "object"
                  },
                  "description": "Extra data."
                }
              ],
              "description": "Trigger the given event with current value.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#initView",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Init the current view",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#initToolbar",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Init the toolbar",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#getSelection",
              "return": {
                "type": {
                  "text": "Selection|null"
                }
              },
              "description": "Get current selection",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setParagraphSeparator",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Set default paragraph separator",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#adjustSourceLineNumbers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the heights and adjust the line number feature.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setEditorContent",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "parameters": [
                {
                  "name": "content",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "The html"
                }
              ],
              "description": "Set editor content value",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setSourceContent",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "parameters": [
                {
                  "name": "content",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "The html"
                }
              ],
              "description": "Set source content value",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#editorMode",
              "return": {
                "type": {
                  "text": "object|boolean"
                }
              },
              "parameters": [
                {
                  "name": "content",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "The html"
                }
              ],
              "description": "Switch to editor mode",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#sourceMode",
              "return": {
                "type": {
                  "text": "object|boolean"
                }
              },
              "parameters": [
                {
                  "name": "content",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "The html"
                }
              ],
              "description": "Switch to source mode",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#resize",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Resize",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#contenteditable",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Set contenteditable",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#disabledHyperlinks",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Set disabled hyperlinks and keep tab order in sync",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setDisabled",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Set disabled state",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#initContent",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Initialize the raw content",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#initModals",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Initialize the modals to attach with editor",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#unActiveToolbarButtons",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set toolbar buttons as un-active.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#onPasteEditorContainer",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "ClipboardEvent"
                  },
                  "description": "The event"
                }
              ],
              "description": "On paste editor container.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#onSelectionChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "On selection change.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#onSelectedToolbar",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  },
                  "description": "The event"
                }
              ],
              "description": "On toolbar items selected.",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onInputToolbar",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "The event"
                }
              ],
              "description": "On toolbar items input event.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#onBeforeShowModal",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  },
                  "description": "The modal key"
                }
              ],
              "description": "On modal before show.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#handleAction",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "action",
                  "type": {
                    "text": "string"
                  },
                  "description": "The action"
                },
                {
                  "name": "val",
                  "optional": true,
                  "type": {
                    "text": "string|undefined"
                  },
                  "description": "The value"
                }
              ],
              "description": "Handle given action.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#handleModalAction",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  },
                  "description": "The modal key"
                }
              ],
              "description": "Handle modal action.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Establish Internal Event Handlers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachModalEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "key",
                  "type": {
                    "text": "string"
                  },
                  "description": "The modal key"
                }
              ],
              "description": "Attach modal events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachSlotchangeEvent",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Attach slotchange events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachKeyboardEvents",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Attach Keyboard events",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string"
              },
              "description": "Get editor current value",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets the editor to disabled",
              "parameters": [
                {
                  "description": "If true will set disabled",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setLabelText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "default": "this.state?.label",
                  "description": "of label",
                  "optional": true,
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Used for setting the text contents of the shadowroot label"
            },
            {
              "kind": "field",
              "name": "paragraphSeparator",
              "description": "Set the paragraph separator for editor",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "pasteAsPlainText",
              "description": "Sets to be paste as plain text for editor",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Set the placeholder text for editor",
              "parameters": [
                {
                  "description": "The placeholder value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "readonly",
              "description": "Sets the editor to readonly",
              "parameters": [
                {
                  "description": "If true will set readonly",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "sourceFormatter",
              "description": "Sets to be use source formatter for editor",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "view",
              "description": "Set the view mode for editor",
              "parameters": [
                {
                  "description": "The value: 'editor', 'source'",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-editor/ids-editor.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsEditor",
            "module": "src/components/ids-editor/ids-editor.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-error-page/ids-error-page.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Error Page Component",
          "name": "IdsErrorPage",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Get the icon",
              "parameters": [
                {
                  "description": "icon id",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Get the label",
              "parameters": [
                {
                  "description": "label text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "description",
              "description": "Get the description text",
              "parameters": [
                {
                  "description": "description text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "buttonText",
              "description": "Get the button text",
              "parameters": [
                {
                  "description": "button text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attach the error page event handlers",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "ariaLabelContent",
              "type": {
                "text": "string"
              },
              "description": "Used for ARIA Labels and other content",
              "readonly": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#refreshText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "string"
                  },
                  "description": "dom element selector to query"
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "attribute value"
                }
              ],
              "description": "Refresh the text attributes",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "shouldUpdate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "onButtonClick",
              "type": {
                "text": "(target: any) => void | undefined"
              },
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "globalKeydownListener",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "Array<string>"
              },
              "default": "['beforeshow', 'beforehide']",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttons",
              "type": {
                "text": "NodeListOf<IdsModalButton>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "NodeListOf<IdsModalButton>"
                }
              },
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "fullsize",
              "type": {
                "text": "IdsModalFullsizeAttributeValue"
              },
              "return": {
                "type": {
                  "text": "IdsModalFullsizeAttributeValue"
                }
              },
              "parameters": [
                {
                  "description": "the breakpoint at which\nthe Modal will change from normal mode to fullsize mode",
                  "name": "val",
                  "type": {
                    "text": "IdsModalFullsizeAttributeValue"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#clearBreakpointResponse",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes established callbacks for responding to breakpoints, if set",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setFullsizeDefault",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Runs on connectedCallback or any refresh to adjust the `fullsize` attribute, if set",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "overlay",
              "type": {
                "text": "any"
              },
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "description": "an overlay element",
                  "name": "val",
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "default": "null",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "messageTitle",
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "the new content to be used as the message's title",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "null",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#refreshModalHeader",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "hasTitle",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if the title should be rendered"
                }
              ],
              "description": "Refreshes the state of the Modal header, either adding its slot/contents or removing it",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "refreshAriaLabel",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Renders or Removes a correct `aria-label` attribute on the Modal about its contents.",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#refreshModalFooter",
              "description": "Refreshes the state of the Modal footer, hiding/showing it",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "#visible",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "true if the Modal is visible.",
                  "name": "val",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Shows the modal with possibity to veto the promise",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Hides the modal with possibity to veto the promise",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "addOpenEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides `addOpenEvents` from the OpenEvents mixin to add additional \"Escape\" key handling",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeOpenEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides `removeOpenEvents` from the OpenEvents mixin to remove \"Escape\" key handling",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#refreshOverlay",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "if true, uses an external overlay"
                }
              ],
              "description": "Refreshes the state of the overlay used behind the modal.  If a shared overlay isn't applied,\nan internal one is generated and applied to the ShadowRoot.",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#refreshVisibility",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "if true, makes the Modal visible to the user"
                }
              ],
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setTargetFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Focuses the defined target element, if applicable",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "#setFocusIfVisible",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets up overall events",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleButtonClick",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  },
                  "description": "the original event object"
                }
              ],
              "description": "Handles when Modal Button is clicked.",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "onTriggerClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle `onTriggerClick` from IdsPopupInteractionsMixin",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "onOutsideClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "the original click event"
                }
              ],
              "description": "Handle `onOutsideClick` from IdsPopupOpenEventsMixin",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            }
          ],
          "superclass": {
            "name": "IdsModal",
            "module": "/src/components/ids-modal/ids-modal"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsErrorPage",
            "module": "src/components/ids-error-page/ids-error-page.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-empty-message/ids-empty-message.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Empty Message Component",
          "name": "IdsEmptyMessage",
          "cssParts": [
            {
              "description": "the container element",
              "name": "container"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters and setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "iconData",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the template for the contents"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "description": "Establish internal event handlers",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string | null"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-empty-message/ids-empty-message.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsEmptyMessage",
            "module": "src/components/ids-empty-message/ids-empty-message.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-expandable-area/ids-exandable-area-attributes.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "EXPANDABLE_AREA_TYPES",
          "type": {
            "text": "array"
          },
          "default": "[\n  'toggle-btn',\n  'partial'\n]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EXPANDABLE_AREA_TYPES",
          "declaration": {
            "name": "EXPANDABLE_AREA_TYPES",
            "module": "src/components/ids-expandable-area/ids-exandable-area-attributes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-expandable-area/ids-expandable-area.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Expandable Area Component",
          "name": "IdsExpandableArea",
          "cssParts": [
            {
              "description": "the main container element",
              "name": "container"
            },
            {
              "description": "the header element",
              "name": "header"
            },
            {
              "description": "the expandable pane element",
              "name": "pane"
            },
            {
              "description": "the expandable pane content",
              "name": "pane-content"
            },
            {
              "description": "the footer element",
              "name": "footer"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "array"
              },
              "default": "['beforecollapse', 'beforeexpand']",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "field",
              "name": "expander",
              "type": {
                "text": "HTMLElement | null | undefined"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "expanderDefault",
              "type": {
                "text": "HTMLSlotElement | null | undefined"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "expanderExpanded",
              "type": {
                "text": "HTMLSlotElement | null | undefined"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "pane",
              "type": {
                "text": "HTMLElement | null | undefined"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Set the type",
              "parameters": [
                {
                  "description": "The Type [null, toggle-btn]",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "expanded",
              "description": "Set the expanded property",
              "parameters": [
                {
                  "description": "true/false",
                  "name": "value",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "expandStyle",
              "description": "Set the expanded property",
              "parameters": [
                {
                  "description": "true/false",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "switchState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "The main state switching function"
            },
            {
              "kind": "method",
              "name": "collapsePane",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Collapse the expandable area pane.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "expandPane",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Expand the expandable area pane.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "targetExpandedSize",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "setAttributes",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets the expanded state attribute"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets up event listeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "object"
              },
              "default": "{}"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-expandable-area/ids-expandable-area.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsExpandableArea",
            "module": "src/components/ids-expandable-area/ids-expandable-area.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-fieldset/ids-fieldset.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Fieldset Component",
          "name": "IdsFieldset",
          "cssParts": [
            {
              "description": "the fieldset element",
              "name": "fieldset"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "template",
              "description": "Inner template contents",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-fieldset/ids-fieldset.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsFieldset",
            "module": "src/components/ids-fieldset/ids-fieldset.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-form/ids-form.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Form Component",
          "name": "IdsForm",
          "cssParts": [
            {
              "description": "the form element",
              "name": "form"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "string[]"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the template for the header contents"
            },
            {
              "kind": "field",
              "name": "compact",
              "description": "Sets the compact attribute",
              "parameters": [
                {
                  "description": "string value for compact",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "fieldHeight",
              "description": "Set the fieldHeight (height) of input",
              "parameters": [
                {
                  "description": "[xs, sm, md, lg]",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "submitButton",
              "description": "Attached a button to the form to submit the form.",
              "parameters": [
                {
                  "description": "string value for title",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "idsComponents",
              "type": {
                "text": "Element[]"
              },
              "description": "Returns an array containing only IdsElements",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Element[]"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "formComponents",
              "type": {
                "text": "Element[]"
              },
              "description": "Returns an array containing only Ids Elements that are considered form components.",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Element[]"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "resetDirtyTracker",
              "description": "Resets the dirty indicator on all form components."
            },
            {
              "kind": "method",
              "name": "checkValidation",
              "description": "Runs validation on each input"
            },
            {
              "kind": "field",
              "name": "isDirty",
              "type": {
                "text": "boolean"
              },
              "description": "Return if and form fields are dirty or not",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "dirtyFormComponents",
              "type": {
                "text": "Array<Element>"
              },
              "description": "Returs all dirty form components.",
              "return": {
                "type": {
                  "text": "Array<Element>"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "isValid",
              "type": {
                "text": "boolean"
              },
              "description": "Return if the form is valid or not",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "errorFormComponents",
              "type": {
                "text": "Array<Element>"
              },
              "description": "Return the inputs with validation errors",
              "return": {
                "type": {
                  "text": "Array<Element>"
                }
              },
              "readonly": true
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-form/ids-form.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsForm",
            "module": "src/components/ids-form/ids-form.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-header/ids-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Header Component",
          "name": "IdsHeader",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the template for the header contents"
            },
            {
              "kind": "method",
              "name": "#refreshVariants",
              "description": "Refresh the color variants on all elements",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "color",
              "description": "Sets the color attribute",
              "parameters": [
                {
                  "description": "string value for color",
                  "name": "c",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-header/ids-header.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsHeader",
            "module": "src/components/ids-header/ids-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-hidden/ids-hidden.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Hidden Component",
          "name": "IdsHidden",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "field",
              "name": "hideDown",
              "description": "Get the hideDown attribute",
              "parameters": [
                {
                  "description": "xxl | xl | lg | md | sm | xs",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "keyof Breakpoints | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "hideUp",
              "description": "Get the hideUp attribute",
              "parameters": [
                {
                  "description": "xxl | xl | lg | md | sm | xs",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "keyof Breakpoints | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "visible",
              "description": "Get the visible attribute",
              "parameters": [
                {
                  "description": "of the visible attribute",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "condition",
              "description": "Get the compare condition",
              "parameters": [
                {
                  "description": "the value to compare",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Get the compare value",
              "parameters": [
                {
                  "description": "the value to compare",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "checkScreen",
              "parameters": [
                {
                  "name": "mq",
                  "type": {
                    "text": "MediaQueryList"
                  },
                  "description": "media query to check against"
                }
              ],
              "description": "Check the screen size"
            },
            {
              "kind": "method",
              "name": "checkCompare",
              "description": "Check value agains the comparison"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsHidden",
            "module": "src/components/ids-hidden/ids-hidden.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-hierarchy/ids-hierarchy-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Hierarchy Item Component",
          "name": "IdsHierarchyItem",
          "members": [
            {
              "kind": "field",
              "name": "#prevSelected",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "store the previous \"selected\" value to prevent double firing events"
            },
            {
              "kind": "field",
              "name": "childElements",
              "type": {
                "text": "IdsHierarchyItemInfo[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "expander",
              "type": {
                "text": "IdsButton | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "dropdownMenu",
              "type": {
                "text": "IdsMenuButton | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "leaf",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "nestedItemContainer",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "expanded",
              "description": "Set the value of the expanded attribute",
              "parameters": [
                {
                  "description": "the value of the attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "Set the value of the selected attribute",
              "parameters": [
                {
                  "description": "the value of the attribute",
                  "name": "value",
                  "type": {
                    "text": "string | boolean"
                  }
                }
              ],
              "type": {
                "text": "string | boolean"
              },
              "return": {
                "type": {
                  "text": "string | boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "rootItem",
              "description": "Set the value of the root attribute",
              "parameters": [
                {
                  "description": "the value of the attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string | null"
              },
              "description": "Set the color of the bar",
              "parameters": [
                {
                  "description": "The color value, this can be a hex code with the #",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#setColor"
            },
            {
              "kind": "field",
              "name": "loadChildren",
              "description": "An async function that fires as the dropdown is opening allowing you to set contents.",
              "parameters": [
                {
                  "description": "The async function",
                  "name": "func",
                  "type": {
                    "text": "Function"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "hasChildren",
              "description": "An async function that fires as the dropdown is opening allowing you to set contents.",
              "parameters": [
                {
                  "description": "The async function",
                  "name": "value",
                  "type": {
                    "text": "Array"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#expandCollapse",
              "parameters": [
                {
                  "name": "expanded",
                  "type": {
                    "text": "string"
                  },
                  "description": "the value of the expanded attribute."
                }
              ],
              "description": "Sets the value of the expanded attribute",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#hasNestedItems",
              "description": "Check for nested items and assign css class",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "adjustZIndex",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "name": "zIndex",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "description": "Sets up event listeners",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-hierarchy/ids-hierarchy-item.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsHierarchyItem",
            "module": "src/components/ids-hierarchy/ids-hierarchy-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-hierarchy/ids-hierarchy-legend-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Hierarchy Legend Item Component",
          "name": "IdsHierarchyLegendItem",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template"
            },
            {
              "kind": "field",
              "name": "text",
              "description": "Set the value of the text attribute",
              "parameters": [
                {
                  "description": "the value of the attribute",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string|null"
                }
              }
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string | null"
              },
              "description": "Set the color of the bar",
              "parameters": [
                {
                  "description": "The color value, this can be a hex code with the #",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#setColor"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-hierarchy/ids-hierarchy-legend-item.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsHierarchyLegendItem",
            "module": "src/components/ids-hierarchy/ids-hierarchy-legend-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-hierarchy/ids-hierarchy-legend.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Hierarchy Legend Component",
          "name": "IdsHierarchyLegend",
          "members": [
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsHierarchyLegend",
            "module": "src/components/ids-hierarchy/ids-hierarchy-legend.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-hierarchy/ids-hierarchy.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Hierarchy Component",
          "name": "IdsHierarchy",
          "members": [
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#selectItem",
              "description": "Selects the current hierarchy item\nand deselects all other items",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "IdsEventsMixin",
              "module": "/src/mixins/ids-events-mixin/ids-events-mixin"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsHierarchy",
            "module": "src/components/ids-hierarchy/ids-hierarchy.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-home-page/ids-home-page-attributes.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "HOME_PAGE_DEFAULTS",
          "type": {
            "text": "object"
          },
          "default": "{\n  animated: true,\n  cardHeight: 370,\n  cardWidth: 360,\n  cols: 3,\n  gap: 20,\n  gapX: 20,\n  gapY: 20\n}"
        },
        {
          "kind": "variable",
          "name": "EVENTS",
          "type": {
            "text": "object"
          },
          "default": "{ resized: 'resized' }"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "HOME_PAGE_DEFAULTS",
          "declaration": {
            "name": "HOME_PAGE_DEFAULTS",
            "module": "src/components/ids-home-page/ids-home-page-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "EVENTS",
          "declaration": {
            "name": "EVENTS",
            "module": "src/components/ids-home-page/ids-home-page-attributes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-home-page/ids-home-page.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Home Page Component",
          "name": "IdsHomePage",
          "cssParts": [
            {
              "description": "The home-page element",
              "name": "home-page"
            },
            {
              "description": "The cards element",
              "name": "cards"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "method",
              "name": "refresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "animated",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "False will disable animation during refresh"
                }
              ],
              "description": "Refresh will resize calculations to update any changes."
            },
            {
              "kind": "field",
              "name": "#blocks",
              "privacy": "private",
              "type": {
                "text": "Array<any>"
              },
              "default": "[]",
              "description": "List of blocks to manage cards width/height and position."
            },
            {
              "kind": "field",
              "name": "#cards",
              "privacy": "private",
              "type": {
                "text": "Node[]"
              },
              "default": "[]",
              "description": "List of cards attached to home page."
            },
            {
              "kind": "field",
              "name": "#columns",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Number of current columns."
            },
            {
              "kind": "field",
              "name": "#containerHeight",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Container current height."
            },
            {
              "kind": "field",
              "name": "#gapX",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Column gap"
            },
            {
              "kind": "field",
              "name": "#gapY",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Row gap"
            },
            {
              "kind": "field",
              "name": "#rowsAndCols",
              "privacy": "private",
              "type": {
                "text": "Array<any>"
              },
              "default": "[]",
              "description": "Keep all the blocks as rows and columns."
            },
            {
              "kind": "field",
              "name": "#resizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(() => this.#resize())",
              "description": "Attach the resize observer."
            },
            {
              "kind": "method",
              "name": "#init",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Initialize the component",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#initCards",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Initialize attached cards.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#initRowsAndCols",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Initialize rows and cols.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#initColumns",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "row",
                  "default": "0",
                  "description": "to be initialize.",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Initialize columns.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setGap",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Set the gap between each card,\nwill look into three values gap, gap-x, gap-y to sync into gapX and gapY\nwill not use the gap value if used gap along with gap-x or/and gap-y\nfor example if user add gap=\"10\", gap-x=\"15\" then will use the gap-x value,\nbut gap-y will be use as gap value, it will be { x: 15, y: 10 }\nsince the gap, gap-x, gap-y all three default values \"20\"",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#refreshGap",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Refresh the gap to set gap and cards",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setBlocks",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Setup each block sizes, based on card width and height provided from markup",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#arrayIndexMove",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "arr",
                  "type": {
                    "text": "Array"
                  },
                  "description": "The array"
                },
                {
                  "name": "from",
                  "type": {
                    "text": "number"
                  },
                  "description": "index"
                },
                {
                  "name": "to",
                  "type": {
                    "text": "number"
                  },
                  "description": "index"
                }
              ],
              "description": "Move an array element position",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#fitBlock",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "r",
                  "type": {
                    "text": "number"
                  },
                  "description": "as row."
                },
                {
                  "name": "c",
                  "type": {
                    "text": "number"
                  },
                  "description": "as col."
                },
                {
                  "name": "block",
                  "type": {
                    "text": "IdsHomePageBlock"
                  },
                  "description": "to fit."
                }
              ],
              "description": "Make all spots as unavailable, depends on block's width and height\nSoon we used this block",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#getAvailability",
              "return": {
                "type": {
                  "text": "IdsHomePageAavailable"
                }
              },
              "parameters": [
                {
                  "name": "block",
                  "type": {
                    "text": "IdsHomePageBlock"
                  },
                  "description": "to get availability."
                }
              ],
              "description": "Get availability where we can fit this given block.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#applyCubicBezier",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "elem",
                  "type": {
                    "text": "any"
                  },
                  "description": "The element."
                },
                {
                  "name": "effect",
                  "type": {
                    "text": "string"
                  },
                  "description": "effect to apply."
                }
              ],
              "description": "Apply cubic-bezier effects",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#resize",
              "parameters": [
                {
                  "name": "animated",
                  "default": "this.animated",
                  "description": "False will disable animation during refresh",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Resize and adjust width/height for cards",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Establish Internal Event Handlers",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onLanguageChange",
              "description": "Handle Languages Changes"
            },
            {
              "kind": "method",
              "name": "#getDefaultVal",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "parameters": [
                {
                  "name": "attr",
                  "type": {
                    "text": "string"
                  },
                  "description": "The attribute name to get the value."
                },
                {
                  "name": "defaultVal",
                  "type": {
                    "text": "any"
                  },
                  "description": "The default value if not found in list."
                }
              ],
              "description": "Get the boolean value for given attribute.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#isBool",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean|string"
                  },
                  "description": "The value."
                }
              ],
              "description": "Check the given value is boolean."
            },
            {
              "kind": "method",
              "name": "#getBoolVal",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "attr",
                  "type": {
                    "text": "string"
                  },
                  "description": "The attribute name to get the value."
                },
                {
                  "name": "elem",
                  "default": "this",
                  "description": "The element.",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Get the boolean value for given attribute.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#getNumberVal",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "attr",
                  "type": {
                    "text": "string"
                  },
                  "description": "The attribute name to get the value."
                },
                {
                  "name": "elem",
                  "default": "this",
                  "description": "The element.",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "description": "Get the number value for given attribute.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "object"
              },
              "description": "Get the current status of home page",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "animated",
              "description": "Set to animated or not the home page cards on resize.",
              "parameters": [
                {
                  "description": "If true, allows animate the home page cards.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "cardHeight",
              "description": "Set card height for single span",
              "parameters": [
                {
                  "description": "The height",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "cardWidth",
              "description": "Set card width for single span",
              "parameters": [
                {
                  "description": "The width",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "cols",
              "description": "Set number of columns to display",
              "parameters": [
                {
                  "description": "Number of columns",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "gap",
              "description": "Set card gap for single span, apply same for both horizontal and vertical sides",
              "parameters": [
                {
                  "description": "The row gap",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "gapX",
              "description": "Set card horizontal gap for single span",
              "parameters": [
                {
                  "description": "The gap-x",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "gapY",
              "description": "Set card vertical gap for single span",
              "parameters": [
                {
                  "description": "The gap-y",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-home-page/ids-home-page.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsHomePage",
            "module": "src/components/ids-home-page/ids-home-page.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-hyperlink/ids-hyperlink.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Hyperlink Component",
          "name": "IdsHyperlink",
          "cssParts": [
            {
              "description": "the link element",
              "name": "link"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['breadcrumb', 'alternate']"
            },
            {
              "kind": "field",
              "name": "href",
              "description": "Set the link href",
              "parameters": [
                {
                  "description": "Set the link's href to some link",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "description": "Set the link target attribute",
              "parameters": [
                {
                  "description": "Set the link's href to some link",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "textDecoration",
              "description": "Set the link text decoration styling",
              "parameters": [
                {
                  "description": "If 'none', removes text decoration, If hover then just on hover it\nis shown.",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Set the text to disabled color.",
              "parameters": [
                {
                  "description": "True if disabled",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "color",
              "description": "\nIf set to \"unset\", color can be controlled by parent container",
              "parameters": [
                {
                  "description": "\"unset\" or undefined/null",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "fontSize",
              "description": "Set the font size/style of the text with a class.",
              "parameters": [
                {
                  "description": "The font size in the font scheme\ni.e. 10, 12, 16 or xs, sm, base, lg, xl",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "fontWeight",
              "description": "Adjust font weight; can be either \"bold\" \"lighter\" or not present\nsince font supports 300, 400, 600",
              "parameters": [
                {
                  "description": "(if bold)",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "allowEmptyHref",
              "description": "Allows underline and styling of the link when href attribute is empty",
              "parameters": [
                {
                  "description": "whether or not to allow underline when href attribute is empty",
                  "name": "value",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-hyperlink/ids-hyperlink.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsHyperlink",
            "module": "src/components/ids-hyperlink/ids-hyperlink.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-image/ids-image.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Image Component",
          "name": "IdsImage",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Inner template contents",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#attachOnErrorEvent",
              "parameters": [
                {
                  "name": "img",
                  "type": {
                    "text": "HTMLImageElement"
                  },
                  "description": "element to attach error event"
                }
              ],
              "description": "Add error event when img attached to shadow"
            },
            {
              "kind": "method",
              "name": "#detachOnErrorEvent",
              "description": "Remove error event when the image is removed"
            },
            {
              "kind": "method",
              "name": "#getImgEl",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "src",
                  "type": {
                    "text": "string"
                  },
                  "description": "attribute value"
                },
                {
                  "name": "alt",
                  "type": {
                    "text": "string"
                  },
                  "description": "attribute value"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#getPlaceholderEl",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "src",
              "type": {
                "text": "string"
              },
              "description": "Set the path to the image",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "src attribute value",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "alt",
              "type": {
                "text": "string"
              },
              "description": "Set an alternate text for the image",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "alt attribute value",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#getSize",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "size attribute value"
                }
              ],
              "description": "Get one of the predefined sizes",
              "return": {
                "type": {
                  "text": "'auto'|'sm'|'md'|'lg'"
                }
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Set the size for the image",
              "return": {
                "type": {
                  "text": "'auto'|'sm'|'md'|'lg'"
                }
              },
              "parameters": [
                {
                  "description": "size attribute value",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Set whether or not to replace image with placeholder initially",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "placeholder attribute value",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "fallback",
              "description": "Set whether or not to replace image with placeholder if the image fails to load",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "fallback attribute value",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "round",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not the image is round",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "round attribute value",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#getStatus",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "user status attribute value"
                }
              ],
              "description": "Get one of the predefined statuses",
              "return": {
                "type": {
                  "text": "'available'|'away'|'busy'|'do-not-disturb'|'unknown'|null"
                }
              }
            },
            {
              "kind": "method",
              "name": "#getStatusEl",
              "parameters": [
                {
                  "name": "status",
                  "type": {
                    "text": "'available'|'away'|'busy'|'do-not-disturb'|'unknown'"
                  },
                  "description": "one of predefined statuses"
                }
              ],
              "description": "Get element to render when adding or changing the status",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "userStatus",
              "description": "Set user status and render html element",
              "return": {
                "type": {
                  "text": "'available'|'away'|'busy'|'do-not-disturb'|'unknown'|null"
                }
              },
              "parameters": [
                {
                  "description": "user status parameter value",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#getInitialsEl",
              "parameters": [
                {
                  "name": "initials",
                  "type": {
                    "text": "string"
                  },
                  "description": "cropped text"
                }
              ],
              "description": "Get element to render when adding or changing the initials",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "initials",
              "description": "Set initials and render html element",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "initials parameter value",
                  "name": "val",
                  "type": {
                    "text": "string|null"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-image/ids-image.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsImage",
            "module": "src/components/ids-image/ids-image.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-icon/ids-icon-attributes.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "sizes",
          "type": {
            "text": "{ [size: string]: number }"
          },
          "default": "{\n  xxl: 64, // special cases like logos\n  xl: 34, // special cases (not used yet)\n  large: 24, // special cases\n  normal: 18,\n  medium: 18,\n  small: 16,\n  xsmall: 10 // special cases\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "sizes",
          "declaration": {
            "name": "sizes",
            "module": "src/components/ids-icon/ids-icon-attributes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-icon/ids-icon.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Icon Component",
          "name": "IdsIcon",
          "cssParts": [
            {
              "name": "svg"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "pathData",
              "type": {
                "text": "Record<string, string>"
              },
              "default": "pathImport"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "onLanguageChange",
              "description": "Handle Languages Changes"
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "method",
              "name": "iconData",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the icon data for the svg based on the icon name"
            },
            {
              "kind": "field",
              "name": "customIconJsonData",
              "type": {
                "text": "object | undefined"
              },
              "static": true,
              "default": "undefined",
              "description": "Holds the static single instance of custom icon data"
            },
            {
              "kind": "field",
              "name": "customIconData",
              "static": true,
              "description": "Set the static custom icon instance"
            },
            {
              "kind": "field",
              "name": "customIconData",
              "type": {
                "text": "object | undefined"
              },
              "static": true,
              "description": "Get the static custom icon instance",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "isMirrored",
              "parameters": [
                {
                  "name": "iconName",
                  "type": {
                    "text": "string"
                  },
                  "description": "icon name to check"
                }
              ],
              "description": "Some icons are mirrored in RTL Mode",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "badgeColor",
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "parameters": [
                {
                  "description": "sets the color of the notification badge",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "badgePosition",
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "parameters": [
                {
                  "description": "sets the postion of the notification badge",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "height",
              "type": {
                "text": "string"
              },
              "description": "Returns the height attribute",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "allows sets a custom height value for the icon svg",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "viewbox",
              "type": {
                "text": "string | null"
              },
              "description": "Return the viewbox",
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "parameters": [
                {
                  "description": "set a custom viewbox for the icon svg",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "string"
              },
              "description": "Return the width number",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "sets a custom width for the icon svg",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "string"
              },
              "description": "Sets the icon svg path to render",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "The value must be a valid key in the path-data.json",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "size",
              "type": {
                "text": "string"
              },
              "description": "Return the size. May be large, normal/medium or small",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#adjustViewbox",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Some specific icon types have different `viewBox`\nproperties that need adjusting at the component level"
            },
            {
              "kind": "field",
              "name": "vertical",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "Rotate the icon to vertical",
                  "name": "value",
                  "type": {
                    "text": "boolean | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#updateBadge",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-icon/ids-icon.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsIcon",
            "module": "src/components/ids-icon/ids-icon.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-input/ids-autocomplete.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "IdsAutoComplete",
          "members": [
            {
              "kind": "field",
              "name": "datasource",
              "default": "new IdsDataSource()",
              "description": "Gets the internal IdsDataSource object",
              "return": {
                "type": {
                  "text": "IdsDataSource"
                }
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "description": "Get the autocomplete attribute",
              "parameters": [
                {
                  "description": "autocomplete value",
                  "name": "value",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Get the data of the autocomplete",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array<any>"
                  }
                }
              ],
              "type": {
                "text": "Array<any>"
              },
              "return": {
                "type": {
                  "text": "Array<any>"
                }
              }
            },
            {
              "kind": "field",
              "name": "searchField",
              "description": "Get searchField",
              "parameters": [
                {
                  "description": "search field value",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "Element | null | any"
              },
              "description": "Get the internal ids-popup element",
              "return": {
                "type": {
                  "text": "Element | null | any"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "listBox",
              "type": {
                "text": "Element | null | any"
              },
              "description": "Get the internal ids-list-box element",
              "return": {
                "type": {
                  "text": "Element | null | any"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "options",
              "type": {
                "text": "Element | null | any"
              },
              "description": "Get all internal ids-list-box-option elements",
              "return": {
                "type": {
                  "text": "Element | null | any"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "isSelected",
              "type": {
                "text": "Element | null | any"
              },
              "description": "Get the selected ids-list-box-option element",
              "return": {
                "type": {
                  "text": "Element | null | any"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "findMatches",
              "return": {
                "type": {
                  "text": "Array<any> | null"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | RegExp"
                  },
                  "description": "value of the input field"
                },
                {
                  "name": "list",
                  "type": {
                    "text": "Array"
                  },
                  "description": "the dataset"
                }
              ],
              "description": "Find matches between the input value, searchField and dataset"
            },
            {
              "kind": "method",
              "name": "displayMatches",
              "description": "Display matches from the dataset",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#populateListBox",
              "description": "Popuplate the list box with the current data"
            },
            {
              "kind": "method",
              "name": "#templatelistBoxOption",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  },
                  "description": "sets the value attr of the option"
                },
                {
                  "name": "label",
                  "type": {
                    "text": "string | null"
                  },
                  "description": "sets the label of the option"
                }
              ],
              "description": "Create the list box option template."
            },
            {
              "kind": "method",
              "name": "#addAria",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Add internal aria attributes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "closePopup",
              "description": "Close popup",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "openPopup",
              "description": "Open popup",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "selectOption",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event | any"
                  },
                  "description": "event"
                }
              ],
              "description": "Set the value of the input to the selected option"
            },
            {
              "kind": "method",
              "name": "clearOptions",
              "description": "Trigger the cleared event when input is cleared"
            },
            {
              "kind": "method",
              "name": "setSelectedOption",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "Element | any"
                  },
                  "description": "element"
                }
              ],
              "description": "Set the selected attributes on the current option"
            },
            {
              "kind": "method",
              "name": "removeSelectedOption",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "Element | any"
                  },
                  "description": "element"
                }
              ],
              "description": "Remove the selected attributes on the current option"
            },
            {
              "kind": "method",
              "name": "#configurePopup",
              "description": "Configure and attach internal IdsPopup element.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#attachEventListeners",
              "description": "Attach internal event handlers",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#attachKeyboardListeners",
              "description": "Attach the keyborad listeners",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#removeEventListeners",
              "description": "Remove internal event handlers",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "destroyAutocomplete",
              "description": "Destroy autocomplete functionality",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsAutoComplete",
            "module": "src/components/ids-input/ids-autocomplete.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-input/ids-input-attributes.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "TYPES",
          "type": {
            "text": "{\n  default: 'text',\n  text: 'text',\n  password: 'password',\n  number: 'number',\n  phone: 'tel',\n  email: 'email',\n  color: 'color'\n}"
          },
          "default": "{\n  default: 'text',\n  text: 'text',\n  password: 'password',\n  number: 'number',\n  phone: 'tel',\n  email: 'email',\n  color: 'color'\n}"
        },
        {
          "kind": "variable",
          "name": "SIZES",
          "type": {
            "text": "{\n  default: 'md',\n  xs: 'xs',\n  sm: 'sm',\n  mm: 'mm',\n  md: 'md',\n  lg: 'lg',\n  full: 'full'\n}"
          },
          "default": "{\n  default: 'md',\n  xs: 'xs',\n  sm: 'sm',\n  mm: 'mm',\n  md: 'md',\n  lg: 'lg',\n  full: 'full'\n}"
        },
        {
          "kind": "variable",
          "name": "TEXT_ALIGN",
          "type": {
            "text": "object"
          },
          "default": "{\n  default: 'start',\n  start: 'start',\n  center: 'center',\n  end: 'end'\n}"
        },
        {
          "kind": "variable",
          "name": "LABEL_WRAPS",
          "type": {
            "text": "array"
          },
          "default": "['ellipsis', 'wrap', 'ellipsis-no-stretch', 'wrap-no-stretch']"
        },
        {
          "kind": "variable",
          "name": "instanceCounter",
          "type": {
            "text": "number"
          },
          "default": "0"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "LABEL_WRAPS",
          "declaration": {
            "name": "LABEL_WRAPS",
            "module": "src/components/ids-input/ids-input-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "TYPES",
          "declaration": {
            "name": "TYPES",
            "module": "src/components/ids-input/ids-input-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "TypeKeys",
          "declaration": {
            "name": "TypeKeys",
            "module": "src/components/ids-input/ids-input-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "TypeValues",
          "declaration": {
            "name": "TypeValues",
            "module": "src/components/ids-input/ids-input-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "SIZES",
          "declaration": {
            "name": "SIZES",
            "module": "src/components/ids-input/ids-input-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "SizeKeys",
          "declaration": {
            "name": "SizeKeys",
            "module": "src/components/ids-input/ids-input-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "SizeValues",
          "declaration": {
            "name": "SizeValues",
            "module": "src/components/ids-input/ids-input-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "TEXT_ALIGN",
          "declaration": {
            "name": "TEXT_ALIGN",
            "module": "src/components/ids-input/ids-input-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "instanceCounter",
          "declaration": {
            "name": "instanceCounter",
            "module": "src/components/ids-input/ids-input-attributes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-input/ids-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Input Component",
          "name": "IdsInput",
          "cssParts": [
            {
              "description": "the overall container",
              "name": "container"
            },
            {
              "description": "the container for the input",
              "name": "field-container"
            },
            {
              "description": "the input element",
              "name": "input"
            },
            {
              "description": "the label element",
              "name": "label"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "generatedId",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "triggeredByChange",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isFormComponent",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['alternate', 'alternate-formatter', 'borderless', 'in-cell', 'list-builder']",
              "description": "Inherited from `IdsColorVariantMixin`",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "method",
              "name": "templateHostAttributes",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Uses current IdsInput state to set some attributes on its host element"
            },
            {
              "kind": "method",
              "name": "templateVariables",
              "return": {
                "type": {
                  "text": "IdsInputTemplateVariables"
                }
              },
              "description": "Uses current IdsInput state to generate strings used in its template."
            },
            {
              "kind": "field",
              "name": "isPasswordVisible",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "templateShowHide",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "templateCapsLock",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "capsLockIcon",
              "type": {
                "text": "HTMLElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "fieldContainer",
              "type": {
                "text": "HTMLElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "labelEl",
              "type": {
                "text": "HTMLLabelElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLLabelElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "revealablePassword",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "sets whether password reveal functionality is available",
              "parameters": [
                {
                  "description": "boolean value sets whether reveal functionality is toggled on or off",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "capsLock",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "sets whether capslock indicatoris enabled or disabled",
              "parameters": [
                {
                  "description": "sets whether capslock indicator functionality is toggled on or off",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "passwordVisible",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "sets whether the password is currently visible",
              "parameters": [
                {
                  "description": "toggles the visibility of the password on or off",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "setInputState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  },
                  "description": "The property."
                }
              ],
              "description": "Set input state for disabled or readonly",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setLabelText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "of label"
                }
              ],
              "description": "Set the label text",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleAutoselect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle autoselect",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInputFocusEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "optional": true,
                  "type": {
                    "text": "string | null"
                  },
                  "description": "If 'remove', will remove attached events"
                }
              ],
              "description": "Handle input focus event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#capsLockEventSetUp",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "indicates whether to turn events on or off"
                }
              ],
              "description": "handles teardown and set up for capslock detection events"
            },
            {
              "kind": "method",
              "name": "#attachNativeEvents",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "description": "Setup event handlers that trigger on the host element during native events from the internal HTMLInputElement\nThese trigg",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#togglePasswordEventSetUp",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "whether to toggle events on or off"
                }
              ],
              "description": "handles event set up and teardown for password indicator",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#passwordVisibilityHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "toggles the visibility of the password by changing field type",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "active",
              "description": "When set the input will add a CSS class `is-active` that simulates the text input being \"focused\".",
              "parameters": [
                {
                  "description": "If true will set `text-ellipsis` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "autoselect",
              "description": "When set the input will select all text on focus",
              "parameters": [
                {
                  "description": "If true will set `autoselect` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "bgTransparent",
              "description": "When set the input will add css class `bg-transparent`",
              "parameters": [
                {
                  "description": "If true will set `bg-transparent` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "textEllipsis",
              "description": "When set the input will add css class `text-ellipsis`",
              "parameters": [
                {
                  "description": "If true will set `text-ellipsis` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets input to disabled",
              "parameters": [
                {
                  "description": "If true will set `disabled` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "#labelEl",
              "privacy": "private",
              "type": {
                "text": "HTMLLabelElement | undefined"
              },
              "description": "internal reference to a label element a user provides"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Set the `placeholder` of input",
              "parameters": [
                {
                  "description": "of the `placeholder` property",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "description": "Set the input to readonly state",
              "parameters": [
                {
                  "description": "If true will set `readonly` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "readonlyBackground",
              "parameters": [
                {
                  "description": "If true, causes an IdsInput set to `readonly` to appear\nto use its standard field background color instead of the \"readonly\" state color",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setReadonlyBackground"
            },
            {
              "kind": "field",
              "name": "labelWrap",
              "description": "Set the label wrap setting of input",
              "parameters": [
                {
                  "description": "['ellipsis', 'wrap', 'no-stretch-ellipsis', 'no-stretch-wrap']",
                  "name": "value",
                  "type": {
                    "text": "IdsInputLabelWrap"
                  }
                }
              ],
              "type": {
                "text": "IdsInputLabelWrap"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Set the size (width) of input",
              "parameters": [
                {
                  "description": "[xs, sm, mm, md, lg, full]",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "textAlign",
              "description": "Sets the text alignment",
              "parameters": [
                {
                  "description": "[start, center, end]",
                  "name": "value",
                  "type": {
                    "text": "IdsInputAlignment"
                  }
                }
              ],
              "type": {
                "text": "IdsInputAlignment"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Sets the input type",
              "parameters": [
                {
                  "description": "[text, password, number, phone, email]",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Set the `value` attribute of input",
              "parameters": [
                {
                  "description": "the value property",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "#id",
              "privacy": "private",
              "description": "set the id of the input, which will also determine the\ninput id for labels at #${id}-input",
              "parameters": [
                {
                  "description": "id",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "cursor",
              "description": "Set the css cursor property to something other than text",
              "parameters": [
                {
                  "description": "the css cursor value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "noMargins",
              "description": "Sets the no margins attribute",
              "parameters": [
                {
                  "description": "true or false or as a string",
                  "name": "n",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "padding",
              "description": "Sets the inner padding (inline-start and end)",
              "parameters": [
                {
                  "description": "string value for the padding",
                  "name": "n",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | number"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides the standard \"blur\" behavior to instead tell the inner HTMLInput element to blur."
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides the standard \"focus\" behavior to instead pass focus to the inner HTMLInput element."
            },
            {
              "kind": "field",
              "name": "format",
              "description": "format attribute",
              "parameters": [
                {
                  "description": "date, time format",
                  "name": "val",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string|null"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-input/ids-input.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsInput",
            "module": "src/components/ids-input/ids-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-layout-flex/ids-layout-flex-item.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FLEX_ITEM_OPTIONS",
          "type": {
            "text": "object"
          },
          "default": "{\n  alignSelf: ['auto', 'baseline', 'center', 'stretch', 'flex-start', 'flex-end'],\n  grow: [0, 1],\n  overflow: ['auto', 'hidden', 'visible', 'scroll'],\n  shrink: [0, 1]\n}"
        },
        {
          "kind": "class",
          "description": "IDS Layout Flex Item Component",
          "name": "IdsLayoutFlexItem",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "any"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "alignSelf",
              "description": "Set the align self setting",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "grow",
              "description": "Set the grow setting",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "shrink",
              "description": "Set the shrink setting",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "overflow",
              "description": "Set overflow value on flex item",
              "parameters": [
                {
                  "description": "overflow value",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FLEX_ITEM_OPTIONS",
          "declaration": {
            "name": "FLEX_ITEM_OPTIONS",
            "module": "src/components/ids-layout-flex/ids-layout-flex-item.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsLayoutFlexItem",
            "module": "src/components/ids-layout-flex/ids-layout-flex-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-layout-flex/ids-layout-flex.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "FLEX_OPTIONS",
          "type": {
            "text": "object"
          },
          "default": "{\n  alignContent: ['flex-start', 'flex-end', 'center', 'space-between', 'space-around', 'space-evenly', 'stretch', 'start', 'end', 'baseline'],\n  alignItems: ['start', 'end', 'flex-start', 'flex-end', 'center', 'baseline', 'stretch'],\n  direction: ['row', 'row-reverse', 'column', 'column-reverse'],\n  display: ['flex', 'inline-flex'],\n  justifyContent: ['start', 'end', 'flex-start', 'flex-end', 'center', 'left', 'right', 'space-between', 'space-around', 'space-evenly'],\n  wrap: ['nowrap', 'wrap', 'wrap-reverse'],\n  units: [0, 1, 2, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40]\n}"
        },
        {
          "kind": "class",
          "description": "IDS Layout Flex Component",
          "name": "IdsLayoutFlex",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "any"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "alignContent",
              "description": "Set the align content setting",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "alignItems",
              "description": "Set the align items setting",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "direction",
              "description": "Set the direction setting",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "display",
              "description": "Set the display setting",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "gap",
              "description": "Set the gap, apply same for both horizontal and vertical sides",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "gapX",
              "description": "Set the horizontal gap",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "gapY",
              "description": "Set card vertical gap",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "justifyContent",
              "description": "Set the justify content setting",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "wrap",
              "description": "Set the wrap setting",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "fullHeight",
              "description": "Set flex container to 100% height",
              "parameters": [
                {
                  "description": "value",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "FLEX_OPTIONS",
          "declaration": {
            "name": "FLEX_OPTIONS",
            "module": "src/components/ids-layout-flex/ids-layout-flex.ts"
          }
        },
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsLayoutFlex",
            "module": "src/components/ids-layout-flex/ids-layout-flex.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-layout-grid/ids-layout-grid-cell.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Layout Grid Cell Component",
          "name": "IdsLayoutGridCell",
          "members": [
            {
              "kind": "field",
              "name": "closeButton",
              "type": {
                "text": "IdsButton | undefined"
              }
            },
            {
              "kind": "field",
              "name": "alignContent",
              "description": "Get the grid align-content setting",
              "parameters": [
                {
                  "description": "The align-content [null, start, end, between, around, evenly]",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colEnd",
              "description": "Get col-end attribute",
              "parameters": [
                {
                  "description": "number value of ending column of the cell",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colEndXs",
              "description": "Get col-end-xs attribute",
              "parameters": [
                {
                  "description": "number value of ending column of the cell at the xs breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colEndSm",
              "description": "Get col-end-sm attribute",
              "parameters": [
                {
                  "description": "number value of ending column of the cell at the sm breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colEndMd",
              "description": "Get col-end-md attribute",
              "parameters": [
                {
                  "description": "number value of ending column of the cell at the md breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colEndLg",
              "description": "Get col-end-lg attribute",
              "parameters": [
                {
                  "description": "number value of ending column of the cell at the lg breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colEndXl",
              "description": "Get col-end-xl attribute",
              "parameters": [
                {
                  "description": "number value of ending column of the cell at the xl breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colEndXxl",
              "description": "Get col-end-xxl attribute",
              "parameters": [
                {
                  "description": "number value of ending column of the cell at the xxl breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colSpan",
              "description": "Get col-span attribute",
              "parameters": [
                {
                  "description": "The number value for the columns to span in the grid",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colSpanXs",
              "description": "Get col-span-xs attribute",
              "parameters": [
                {
                  "description": "The number value for the columns to span in the grid at the xs breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colSpanSm",
              "description": "Get col-span-sm attribute",
              "parameters": [
                {
                  "description": "The number value for the columns to span in the grid at the sm breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colSpanMd",
              "description": "Get col-span-md attribute",
              "parameters": [
                {
                  "description": "The number value for the columns to span in the grid at the md breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colSpanLg",
              "description": "Get col-span-lg attribute",
              "parameters": [
                {
                  "description": "The number value for the columns to span in the grid at the lg breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colSpanXl",
              "description": "Get col-span-xl attribute",
              "parameters": [
                {
                  "description": "The number value for the columns to span in the grid at the xl breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colSpanXxl",
              "description": "Get col-span-xxl attribute",
              "parameters": [
                {
                  "description": "The number value for the columns to span in the grid at the xxl breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colStart",
              "description": "Get the col-start attribute",
              "parameters": [
                {
                  "description": "The number value for the starting column of the cell",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colStartXs",
              "description": "Get the col-start-xs attribute",
              "parameters": [
                {
                  "description": "The number value for the starting column of the cell at the xs breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colStartSm",
              "description": "Get the col-start-sm attribute",
              "parameters": [
                {
                  "description": "The number value for the starting column of the cell at the sm breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colStartMd",
              "description": "Get the col-start-md attribute",
              "parameters": [
                {
                  "description": "The number value for the starting column of the cell at the md breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colStartLg",
              "description": "Get the col-start-lg attribute",
              "parameters": [
                {
                  "description": "The number value for the starting column of the cell at the lg breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colStartXl",
              "description": "Get the col-start-xl attribute",
              "parameters": [
                {
                  "description": "The number value for the starting column of the cell at the xl breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colStartXxl",
              "description": "Get the col-start-xxl attribute",
              "parameters": [
                {
                  "description": "The number value for the starting column of the cell at the xxl breakpoint",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "editable",
              "description": "Get the editable attribute",
              "parameters": [
                {
                  "description": "The value of the editable attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "fill",
              "description": "Get the fill attribute",
              "parameters": [
                {
                  "description": "The boolean value of the fill attribute.",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "boolean | null | any"
              },
              "return": {
                "type": {
                  "text": "boolean | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "Get the height attribute",
              "parameters": [
                {
                  "description": "The value of the height attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "boolean | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "justifyContent",
              "description": "Get the grid justify setting",
              "parameters": [
                {
                  "description": "The justify-content [null, start, end, between, around, evenly]",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "minHeight",
              "description": "Get the minHeight attribute",
              "parameters": [
                {
                  "description": "The value of the minHeight attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "order",
              "description": "Get the order attribute",
              "parameters": [
                {
                  "description": "The value of the order attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "orderXs",
              "description": "Get the order-xs attribute",
              "parameters": [
                {
                  "description": "The value of the order-xs attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "orderSm",
              "description": "Get the order-sm attribute",
              "parameters": [
                {
                  "description": "The value of the order-sm attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "orderMd",
              "description": "Get the order-md attribute",
              "parameters": [
                {
                  "description": "The value of the order-md attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "orderLg",
              "description": "Get the order-lg attribute",
              "parameters": [
                {
                  "description": "The value of the order-lg attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "orderXl",
              "description": "Get the order-xl attribute",
              "parameters": [
                {
                  "description": "The value of the order-xl attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "orderXxl",
              "description": "Get the order-xxl attribute",
              "parameters": [
                {
                  "description": "The value of the order-xxl attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "padding",
              "description": "Get the padding attribute",
              "parameters": [
                {
                  "description": "The value of the padding attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowSpan",
              "description": "Get the row-span attribute",
              "parameters": [
                {
                  "description": "The value of the row-span attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowSpanXs",
              "description": "Get the row-span attribute",
              "parameters": [
                {
                  "description": "The value of the row-span-xs attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowSpanSm",
              "description": "Get the row-span-sm attribute",
              "parameters": [
                {
                  "description": "The value of the row-span-sm attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowSpanMd",
              "description": "Get the row-span-md attribute",
              "parameters": [
                {
                  "description": "The value of the row-span-md attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowSpanLg",
              "description": "Get the row-span-lg attribute",
              "parameters": [
                {
                  "description": "The value of the row-span-md attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowSpanXl",
              "description": "Get the row-span-xl attribute",
              "parameters": [
                {
                  "description": "The value of the row-span-xl attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowSpanXxl",
              "description": "Get the row-span-xxl attribute",
              "parameters": [
                {
                  "description": "The value of the row-span-xxl attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "sticky",
              "description": "Get the sticky attribute",
              "parameters": [
                {
                  "description": "The value of the sticky attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "stickyPosition",
              "description": "Get the sticky-position attribute",
              "parameters": [
                {
                  "description": "The value of the sticky-position attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null | any"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "any"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "initialSettings",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setupCloseButton",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "enableEditable"
            },
            {
              "kind": "method",
              "name": "disableEditable"
            },
            {
              "kind": "method",
              "name": "removeCell",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-layout-grid/ids-layout-grid-cell.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsLayoutGridCell",
            "module": "src/components/ids-layout-grid/ids-layout-grid-cell.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-layout-grid/ids-layout-grid-common.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "prefix",
          "type": {
            "text": "string"
          },
          "default": "'ids-layout-grid'"
        },
        {
          "kind": "variable",
          "name": "GRID_ATTRIBUTES",
          "type": {
            "text": "string[]"
          },
          "default": "[\n  attributes.ALIGN_CONTENT,\n  attributes.ALIGN_ITEMS,\n  attributes.AUTO_FIT,\n  attributes.AUTO_FILL,\n  attributes.COLS,\n  attributes.COLS_XS,\n  attributes.COLS_SM,\n  attributes.COLS_MD,\n  attributes.COLS_LG,\n  attributes.COLS_XL,\n  attributes.COLS_XXL,\n  attributes.FLOW,\n  attributes.GAP,\n  attributes.JUSTIFY_CONTENT,\n  attributes.MARGIN,\n  attributes.MARGIN_Y,\n  attributes.MAX_COL_WIDTH,\n  attributes.MIN_COL_WIDTH,\n  attributes.MAX_ROW_HEIGHT,\n  attributes.MIN_ROW_HEIGHT,\n  attributes.PADDING,\n  attributes.PADDING_X,\n  attributes.PADDING_Y,\n  attributes.ROW_HEIGHT,\n  attributes.ROWS,\n  attributes.ROWS_XS,\n  attributes.ROWS_SM,\n  attributes.ROWS_MD,\n  attributes.ROWS_LG,\n  attributes.ROWS_XL,\n  attributes.ROWS_XXL\n]"
        },
        {
          "kind": "variable",
          "name": "GRID_CELL_ATTRIBUTES",
          "type": {
            "text": "string[]"
          },
          "default": "[\n  attributes.ALIGN_CONTENT,\n  attributes.COL_END,\n  attributes.COL_END_XS,\n  attributes.COL_END_SM,\n  attributes.COL_END_MD,\n  attributes.COL_END_LG,\n  attributes.COL_END_XL,\n  attributes.COL_END_XXL,\n  attributes.COL_SPAN,\n  attributes.COL_SPAN_XS,\n  attributes.COL_SPAN_SM,\n  attributes.COL_SPAN_MD,\n  attributes.COL_SPAN_LG,\n  attributes.COL_SPAN_XL,\n  attributes.COL_SPAN_XXL,\n  attributes.COL_START,\n  attributes.COL_START_XS,\n  attributes.COL_START_SM,\n  attributes.COL_START_MD,\n  attributes.COL_START_LG,\n  attributes.COL_START_XL,\n  attributes.COL_START_XXL,\n  attributes.EDITABLE,\n  attributes.FILL,\n  attributes.HEIGHT,\n  attributes.JUSTIFY_CONTENT,\n  attributes.MIN_HEIGHT,\n  attributes.PADDING,\n  attributes.ORDER,\n  attributes.ORDER_XS,\n  attributes.ORDER_SM,\n  attributes.ORDER_MD,\n  attributes.ORDER_LG,\n  attributes.ORDER_XL,\n  attributes.ORDER_XXL,\n  attributes.ROW_SPAN,\n  attributes.ROW_SPAN_XS,\n  attributes.ROW_SPAN_SM,\n  attributes.ROW_SPAN_MD,\n  attributes.ROW_SPAN_LG,\n  attributes.ROW_SPAN_XL,\n  attributes.ROW_SPAN_XXL,\n  attributes.STICKY,\n  attributes.STICKY_POSITION\n]"
        },
        {
          "kind": "variable",
          "name": "GAP_TYPES",
          "type": {
            "text": "Array<IdsGapType>"
          },
          "default": "[\n  undefined,\n  'none',\n  'sm',\n  'md',\n  'lg',\n  'xl',\n]"
        },
        {
          "kind": "variable",
          "name": "ALIGN_ITEMS",
          "type": {
            "text": "Array<IdsGridAlignItems>"
          },
          "default": "[\n  'start',\n  'end',\n  'center',\n  'stretch',\n]"
        },
        {
          "kind": "variable",
          "name": "ALIGN_TYPES",
          "type": {
            "text": "Array<IdsJustifyType>"
          },
          "default": "[\n  undefined,\n  'space-around',\n  'space-between',\n  'center',\n  'end',\n  'space-evenly',\n  'start',\n]"
        },
        {
          "kind": "variable",
          "name": "FLOW_TYPES",
          "type": {
            "text": "Array<IdsFlowType>"
          },
          "default": "[\n  undefined,\n  'row',\n  'column',\n  'dense',\n  'row-dense',\n  'column-dense'\n]"
        },
        {
          "kind": "variable",
          "name": "MARGIN_SIZES",
          "type": {
            "text": "Array<IdsGridMargins>"
          },
          "default": "[\n  undefined,\n  'xs',\n  'sm',\n  'md',\n  'lg',\n  'xl'\n]"
        },
        {
          "kind": "variable",
          "name": "PADDING_SIZES",
          "type": {
            "text": "Array<IdsGridPadding | any>"
          },
          "default": "[\n  undefined,\n  'xxs',\n  'xs',\n  'sm',\n  'md',\n  'lg',\n  'xl'\n]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "prefix",
          "declaration": {
            "name": "prefix",
            "module": "src/components/ids-layout-grid/ids-layout-grid-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "GRID_ATTRIBUTES",
          "declaration": {
            "name": "GRID_ATTRIBUTES",
            "module": "src/components/ids-layout-grid/ids-layout-grid-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "GRID_CELL_ATTRIBUTES",
          "declaration": {
            "name": "GRID_CELL_ATTRIBUTES",
            "module": "src/components/ids-layout-grid/ids-layout-grid-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "GAP_TYPES",
          "declaration": {
            "name": "GAP_TYPES",
            "module": "src/components/ids-layout-grid/ids-layout-grid-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "ALIGN_ITEMS",
          "declaration": {
            "name": "ALIGN_ITEMS",
            "module": "src/components/ids-layout-grid/ids-layout-grid-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "ALIGN_TYPES",
          "declaration": {
            "name": "ALIGN_TYPES",
            "module": "src/components/ids-layout-grid/ids-layout-grid-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "FLOW_TYPES",
          "declaration": {
            "name": "FLOW_TYPES",
            "module": "src/components/ids-layout-grid/ids-layout-grid-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "MARGIN_SIZES",
          "declaration": {
            "name": "MARGIN_SIZES",
            "module": "src/components/ids-layout-grid/ids-layout-grid-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "PADDING_SIZES",
          "declaration": {
            "name": "PADDING_SIZES",
            "module": "src/components/ids-layout-grid/ids-layout-grid-common.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-layout-grid/ids-layout-grid.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Layout Grid Component",
          "name": "IdsLayoutGrid",
          "members": [
            {
              "kind": "field",
              "name": "alignContent",
              "description": "Get the grid align-content setting",
              "parameters": [
                {
                  "description": "The align-content [null, start, end, between, around, evenly]",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "alignItems",
              "description": "Get the grid align-items setting",
              "parameters": [
                {
                  "description": "The align-items [null, start, end, center, stretch]",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "autoFit",
              "description": "Get auto-fit attribute",
              "parameters": [
                {
                  "description": "boolean",
                  "name": "value",
                  "type": {
                    "text": "boolean | string | null"
                  }
                }
              ],
              "type": {
                "text": "string | boolean | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "autoFill",
              "description": "Get auto-fill attribute",
              "parameters": [
                {
                  "description": "boolean",
                  "name": "value",
                  "type": {
                    "text": "boolean | string | null"
                  }
                }
              ],
              "type": {
                "text": "string | boolean | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "string | boolean | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "cols",
              "description": "Get columns attribute",
              "parameters": [
                {
                  "description": "sets the number of columns",
                  "name": "value",
                  "type": {
                    "text": "boolean | string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colsXs",
              "description": "Get XS columns attribute",
              "parameters": [
                {
                  "description": "sets the number of columns at the XS breakpoint",
                  "name": "value",
                  "type": {
                    "text": "boolean | string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colsSm",
              "description": "Get SM columns attribute",
              "parameters": [
                {
                  "description": "sets the number of columns at the SM breakpoint",
                  "name": "value",
                  "type": {
                    "text": "boolean | string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colsMd",
              "description": "Get MD columns attribute",
              "parameters": [
                {
                  "description": "sets the number of columns at the MD breakpoint",
                  "name": "value",
                  "type": {
                    "text": "boolean | string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colsLg",
              "description": "Get LG columns attribute",
              "parameters": [
                {
                  "description": "sets the number of columns at the LG breakpoint",
                  "name": "value",
                  "type": {
                    "text": "boolean | string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colsXl",
              "description": "Get XL columns attribute",
              "parameters": [
                {
                  "description": "sets the number of columns at the XL breakpoint",
                  "name": "value",
                  "type": {
                    "text": "boolean | string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "colsXxl",
              "description": "Get XXL columns attribute",
              "parameters": [
                {
                  "description": "sets the number of columns at the XXL breakpoint",
                  "name": "value",
                  "type": {
                    "text": "boolean | string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "minColWidth",
              "description": "Get the minColWidth attribute",
              "parameters": [
                {
                  "description": "Number value that sets the min-width of the grid columns",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "minRowHeight",
              "description": "Get the minRowHeight attribute",
              "parameters": [
                {
                  "description": "Number value that sets the height of the grid rows",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "maxColWidth",
              "description": "Get the maxColWidth attribute",
              "parameters": [
                {
                  "description": "Number value that sets the max-width of the grid columns",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "maxRowHeight",
              "description": "Get the maxRowHeight attribute",
              "parameters": [
                {
                  "description": "Number value that sets the max-height of the grid rows",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "gap",
              "description": "Handle The Gap Setting",
              "parameters": [
                {
                  "description": "The Gap [undefined, none, sm, md, lg, xl]",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "margin",
              "description": "Get the margin attribute",
              "parameters": [
                {
                  "description": "The value of the margin [null, 'sm', 'md', 'lg', 'xl']",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "marginY",
              "description": "Get the margin attribute",
              "parameters": [
                {
                  "description": "The value of the margin-y [null, 'sm', 'md', 'lg', 'xl']",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "padding",
              "description": "Get the padding attribute",
              "parameters": [
                {
                  "description": "The value of the padding attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "paddingX",
              "description": "Get the paddingX attribute",
              "parameters": [
                {
                  "description": "The value of the paddingX attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "paddingY",
              "description": "Get the paddingY attribute",
              "parameters": [
                {
                  "description": "The value of the paddingY attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "justifyContent",
              "description": "Get the grid justify setting",
              "parameters": [
                {
                  "description": "The justify [null, start, end, between, around, evenly]",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "flow",
              "description": "Get the flow attribute",
              "parameters": [
                {
                  "description": "Flow [undefined, row, column, dense, row-dense, column-dense]",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "rows",
              "description": "Get the row attribute",
              "parameters": [
                {
                  "description": "The amount of rows in the grid",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowsXs",
              "description": "Get the rowXs attribute",
              "parameters": [
                {
                  "description": "The amount of rows at xs breakpoint in the grid",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowsSm",
              "description": "Get the rowSm attribute",
              "parameters": [
                {
                  "description": "The amount of rows at sm breakpoint in the grid",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowsMd",
              "description": "Get the rowMd attribute",
              "parameters": [
                {
                  "description": "The amount of rows at md breakpoint in the grid",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowsLg",
              "description": "Get the rowLg attribute",
              "parameters": [
                {
                  "description": "The amount of rows at lg breakpoint in the grid",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowsXl",
              "description": "Get the rowXl attribute",
              "parameters": [
                {
                  "description": "The amount of rows at xl breakpoint in the grid",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowsXxl",
              "description": "Get the rowXxl attribute",
              "parameters": [
                {
                  "description": "The amount of rows at xxl breakpoint in the grid",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "rowHeight",
              "description": "Get the rowHeight attribute",
              "parameters": [
                {
                  "description": "The height of the rows in the grid",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "any"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "initialSettings",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsLayoutGrid",
            "module": "src/components/ids-layout-grid/ids-layout-grid.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-line-chart/ids-line-chart.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Line Chart Component",
          "name": "IdsLineChart",
          "cssParts": [
            {
              "description": "the outside svg element",
              "name": "svg"
            },
            {
              "description": "the dots/markers in the chart",
              "name": "marker"
            },
            {
              "description": "the lines in the chart",
              "name": "line"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "afterConnectedCallback"
            },
            {
              "kind": "method",
              "name": "chartTemplate",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Return the chart data for the internal svg",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#preSelected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set initially selected",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getSelected",
              "return": {
                "type": {
                  "text": "IdsLineChartSelected"
                }
              },
              "description": "Get currently selected"
            },
            {
              "kind": "method",
              "name": "setSelected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opt",
                  "type": {
                    "text": "IdsLineChartSelectedBy"
                  },
                  "description": "The in comeing options"
                }
              ],
              "description": "Set selected by give indexes"
            },
            {
              "kind": "method",
              "name": "setSelection",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number|string"
                  },
                  "description": "The index value"
                },
                {
                  "name": "isLegendClick",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "True if legend clicked"
                }
              ],
              "description": "Set the selection for given index",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selectionElements",
              "type": {
                "text": "Array<SVGElement>"
              },
              "description": "Return chart elements that get selection",
              "return": {
                "type": {
                  "text": "Array<SVGElement>"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "tooltipElements",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "description": "Return the elements that get tooltip events",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "lineMarkers",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Return the marker data for the svg",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "markerSize",
              "description": "Set the size of the markers (aka dots/ticks) in the chart",
              "parameters": [
                {
                  "description": "The value to use (in pixels)",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "DEFAULT_SELECTABLE",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "initialized",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "svg",
              "type": {
                "text": "SVGElement | null | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "canvas",
              "type": {
                "text": "HTMLCanvasElement | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "emptyMessage",
              "type": {
                "text": "IdsEmptyMessage | null | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "legend",
              "type": {
                "text": "HTMLSlotElement | null | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "sectionWidths",
              "type": {
                "text": "SectionWidth[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "sectionWidth",
              "default": "NaN",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "sectionHeights",
              "type": {
                "text": "SectionHeight[]"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "sectionHeight",
              "default": "NaN",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "resizeToParentHeight",
              "type": {
                "text": "boolean | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "resizeToParentWidth",
              "type": {
                "text": "boolean | undefined"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "parentWidth",
              "default": "NaN",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "parentHeight",
              "default": "NaN",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "datasource",
              "default": "new IdsDataSource()",
              "description": "Reference to datasource API",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "array"
              },
              "default": "[\n    'beforeselected',\n    'beforedeselected'\n  ]",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "onSelectableChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "On selectable change",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Setup the Event Handling",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "#xMaxTextWidth",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Max width for x-labels text",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "#yMaxTextWidth",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Max width for y-labels text",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "#resizeObserver",
              "privacy": "private",
              "type": {
                "text": "ResizeObserver | undefined"
              },
              "default": "undefined",
              "description": "Holds the resize observer object",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#attachResizeObserver",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attach the resize observer",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "isGrouped",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "default": "false",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "resize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "entries",
                  "type": {
                    "text": "object"
                  },
                  "description": "The resize observer entries"
                }
              ],
              "description": "Handle Resizing",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "redraw",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Redraw the chart",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#adjustRTL",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Adjust RTL",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "markerData",
              "type": {
                "text": "IdsChartMarkerData"
              },
              "default": "{\n    markerCount: 0,\n    groupCount: 0,\n    min: 0,\n    max: 0,\n    scale: new NiceScale(this.yAxisMin, 0),\n    gridTop: 0,\n    gridBottom: 0,\n    gridLeft: 0,\n    gridRight: 0,\n    groupTotals: [0],\n  }",
              "description": "The marker data to use to draw the chart",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#calculate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Get the min/max points and calculate the scale",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#horizontalPoints",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set horizontal data points / locations",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#verticalPoints",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set vertical data points / locations",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#sectionWidths",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the widths of each category section (used in other places)",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#sectionHeights",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the heights of each category section (used in other places)",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#addColorVariables",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Add colors in a style sheet to the root so the variables can be used",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#axisTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the insider part of the SVG",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "tooltipTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Overridable method to draw to get the tooltip template",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "attachTooltipEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Setup handlers on tooltip elements",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "tooltipData",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the data groupIndex"
                },
                {
                  "name": "groupIndex",
                  "default": "0",
                  "description": "the data index",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Return the data for a tooltip accessible by index",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#tooltipContent",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "elem",
                  "type": {
                    "text": "SVGElement"
                  },
                  "description": "The svg element we will inspect for content"
                }
              ],
              "description": "Return the tooltip content",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "#axisLabelsText",
              "privacy": "private",
              "type": {
                "text": "{\n    bottom: string,\n    end: string,\n    start: string,\n    top: string\n  } | undefined"
              },
              "description": "Holds the axis labels text object",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#resetAxisLabelsText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Reset the axis labels",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setAxisLabels",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opt",
                  "type": {
                    "text": "'bottom'|'end'|'start'|'top'"
                  },
                  "description": "The option"
                }
              ],
              "description": "Set the axis labels",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#axisLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the axis label for the svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#horizontalLines",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the horizontal line data for the svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#verticalLines",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the vertical line data for the svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#formatXLabel",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string|Function"
                  },
                  "description": "The value to format value"
                }
              ],
              "description": "Format the value for the x label in a variety of ways",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "formatYLabel",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string|Function"
                  },
                  "description": "The value to format value"
                }
              ],
              "description": "Format the value for the y label in a variety of ways",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#nameLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#valueLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the value labels data",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#namesLineGap",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#valuesLineGap",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#xLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the x label data for the svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#yLabels",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the y label data for the svg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#showEmptyMessage",
              "description": "Show an empty message with settings configuration",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#hideEmptyMessage",
              "description": "Hide the empty message",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#patterns",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the def markup for svg patterns",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "onTitleChange",
              "parameters": [
                {
                  "name": "value",
                  "default": "''",
                  "description": "The title value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Handles chart title attribute changes",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The width of the chart (in pixels) or 'inherit' from the parent",
              "parameters": [
                {
                  "description": "The height value",
                  "name": "value",
                  "type": {
                    "text": "number | string"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "horizontal",
              "description": "Flips the orientation to horizontal\nsupported `Axis` and `Bar` type charts",
              "parameters": [
                {
                  "description": "If true will set `horizontal` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the chart (in pixels) or 'inherit' from the parent",
              "parameters": [
                {
                  "description": "The width value",
                  "name": "value",
                  "type": {
                    "text": "number | string"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#getParentDimensions",
              "description": "Get the parent element's width and height",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setContainerWidth",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  },
                  "description": "The width value"
                }
              ],
              "description": "Set the container width (for correct legend and sizing)",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#maxTextWidthForNames",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "description": "Get the max width to render names axis",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "#maxTextWidthForValues",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "description": "Get the max width to render values axis",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "xMaxTextWidth",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the max width to render the x-axis",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "yMaxTextWidth",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the max width to render the y-axis",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "margins",
              "description": "Set the left, right, top, bottom margins",
              "parameters": [
                {
                  "description": "The margin values",
                  "name": "value",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "bottomRotateMargin",
              "type": {
                "text": "number"
              },
              "description": "Get bottom rotate margin",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelsMargin",
              "type": {
                "text": "{ bottom: number; end: number; start: number; top: number; }"
              },
              "description": "Get axis labels margin",
              "return": {
                "type": {
                  "text": "{ bottom: number, end: number, start: number, top: number }"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "textWidths",
              "description": "Set the width the text labels/axes take up on each side.",
              "parameters": [
                {
                  "description": "The margin values",
                  "name": "value",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "type": {
                "text": "IdsChartDimensions"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Set the data array of the chart",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ],
              "type": {
                "text": "Array<IdsChartData>"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "yAxisMin",
              "description": "Set the minimum value on the y axis",
              "parameters": [
                {
                  "description": "The value to use",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "showVerticalGridLines",
              "description": "Show the vertical axis grid lines",
              "parameters": [
                {
                  "description": "True or false to show the grid lines",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "showHorizontalGridLines",
              "description": "Show the horizontal axis grid lines",
              "parameters": [
                {
                  "description": "True or false to show the grid lines",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "colors",
              "type": {
                "text": "Array<string>"
              },
              "description": "Utility function to get the colors series being used in this chart",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "color",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "The current index"
                }
              ],
              "description": "Get the color to use based on the index for sequential and custom colors",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "xAxisFormatter",
              "description": "Set the format on the x axis items",
              "parameters": [
                {
                  "description": "A string with the formatting routine or a function for more customization.",
                  "name": "value",
                  "type": {
                    "text": "Function"
                  }
                }
              ],
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "yAxisFormatter",
              "description": "Set the format on the y axis items",
              "parameters": [
                {
                  "description": "A string with the formatting routine or a function for more customization.",
                  "name": "value",
                  "type": {
                    "text": "string|Function"
                  }
                }
              ],
              "type": {
                "text": "any"
              },
              "default": "{\n      notation: 'compact',\n      compactDisplay: 'short'\n    }",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "method",
              "name": "reanimate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Reanimate the chart",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "cubicBezier",
              "type": {
                "text": "string"
              },
              "description": "Get a reusable snippet to ease the animation",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "animated",
              "description": "Set the animation on/off",
              "parameters": [
                {
                  "description": "True if animation is on",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "animationSpeed",
              "description": "Set the animation speed in s",
              "parameters": [
                {
                  "description": "The speed in s",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "alignXLabels",
              "description": "Set the x axis label alignment between start, middle and end",
              "parameters": [
                {
                  "description": "start, middle or end",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "stacked",
              "description": "Stack the data forming a stacked bar chart",
              "parameters": [
                {
                  "description": "True to stack the data",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelBottom",
              "description": "Set the bottom axis label text",
              "parameters": [
                {
                  "description": "of the text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelEnd",
              "description": "Set the end axis label text",
              "parameters": [
                {
                  "description": "of the text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelMargin",
              "description": "Set the margin for axis label text",
              "parameters": [
                {
                  "description": "of the margin",
                  "name": "value",
                  "type": {
                    "text": "string|number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelStart",
              "description": "Set the start axis label text",
              "parameters": [
                {
                  "description": "of the text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "axisLabelTop",
              "description": "Set the top axis label text",
              "parameters": [
                {
                  "description": "of the text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "rotateNameLabels",
              "description": "Set the rotation for the axis name label text (eg 45deg)",
              "parameters": [
                {
                  "description": "the number of degrees to rotate the text",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            },
            {
              "kind": "field",
              "name": "state",
              "inheritedFrom": {
                "name": "IdsAxisChart",
                "module": "src/components/ids-axis-chart/ids-axis-chart.ts"
              }
            }
          ],
          "superclass": {
            "name": "IdsAxisChart",
            "module": "/src/components/ids-axis-chart/ids-axis-chart"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsLineChart",
            "module": "src/components/ids-line-chart/ids-line-chart.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-list-box/ids-list-box-option.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS List Box Option Component",
          "name": "IdsListBoxOption",
          "cssParts": [
            {
              "description": "the option element",
              "name": "option"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<any>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array<any>"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "string | null"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-list-box/ids-list-box-option.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsListBoxOption",
            "module": "src/components/ids-list-box/ids-list-box-option.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-list-box/ids-list-box.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS List Box Component",
          "name": "IdsListBox",
          "members": [
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsListBox",
            "module": "src/components/ids-list-box/ids-list-box.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-list-builder/ids-list-builder.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS ListBuilder Component",
          "name": "IdsListBuilder",
          "cssParts": [
            {
              "description": "the container element",
              "name": "container"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#selectedLiEditor",
              "privacy": "private",
              "type": {
                "text": "IdsInput | null"
              },
              "default": "null",
              "description": "Active editor of the selected list item"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "type": {
                "text": "any"
              },
              "description": "A clone of the list item being dragged,\nit appears during drag to help visualize where the dragged item's position"
            },
            {
              "kind": "field",
              "name": "actions",
              "type": {
                "text": "object"
              },
              "default": "{\n    ADD: 'add',\n    EDIT: 'edit',\n    DELETE: 'delete',\n    MOVE_UP: 'move-up',\n    MOVE_DOWN: 'move-down',\n  }",
              "description": "List of actions can be performed"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "readonly": true,
              "type": {
                "text": "Array<string>"
              },
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "toolbarTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Get toolbar template"
            },
            {
              "kind": "method",
              "name": "buttonTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "@param {string} [options.action] The button action\n   * @param {string} [options.icon] The button icon\n   * @param {string} [options.text] The button text\n   * "
                  },
                  "description": "The button options",
                  "optional": true
                }
              ],
              "description": "Get toolbar button template"
            },
            {
              "kind": "method",
              "name": "#initToolbar",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Init the toolbar",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "parentEl",
              "type": {
                "text": "IdsSwappable | null | undefined"
              },
              "description": "Get the parent element",
              "return": {
                "type": {
                  "text": "IdsToolbar|null"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "toolbar",
              "type": {
                "text": "IdsToolbar | null"
              },
              "description": "Get the toolbar element",
              "return": {
                "type": {
                  "text": "IdsToolbar|null"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectable",
              "description": "Set the selection mode of the listview",
              "parameters": [
                {
                  "description": "true to use virtual scrolling",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "dataKeys",
              "description": "Set the data array of the listview",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array | null"
                  }
                }
              ],
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Set the data set of the list",
              "parameters": [
                {
                  "description": "The list of items",
                  "name": "val",
                  "type": {
                    "text": "Array<any>"
                  }
                }
              ],
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#attachEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attaches all the listeners which allow for clicking,\ndragging, and keyboard interaction with the list items",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#unfocusAnySelectedLiEditor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes and unfocuses any active list item editor after updating the list item's value",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#updateSelectedLiWithEditorValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Helper function to update the list item inner text with the editor's input value",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#removeSelectedLiEditor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Helper function to remove the editor element from the DOM",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#insertSelectedLiWithEditor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "newEntry",
                  "default": "false",
                  "type": {
                    "text": "boolean | null"
                  },
                  "description": "whether or not this is an editor for a new or pre-existing list item"
                }
              ],
              "description": "Helper function to insert an editor into the DOM and hide the inner text of the list item",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selectedLi",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "allSelectedLi",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#removeAllSelectedLi",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Remove selected list item",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "swap",
              "parameters": [
                {
                  "name": "nodeA",
                  "type": {
                    "text": "Node"
                  },
                  "description": "the first node"
                },
                {
                  "name": "nodeB",
                  "type": {
                    "text": "Node"
                  },
                  "description": "the second node"
                }
              ],
              "description": "Helper function for swapping nodes in the list item -- used when dragging list items or clicking the up/down arrows"
            },
            {
              "kind": "method",
              "name": "add",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Add new item"
            },
            {
              "kind": "method",
              "name": "delete",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Delete selected"
            },
            {
              "kind": "method",
              "name": "edit",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Edit selected item"
            },
            {
              "kind": "method",
              "name": "moveUp",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Move up selected"
            },
            {
              "kind": "method",
              "name": "moveDown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Move down selected"
            },
            {
              "kind": "method",
              "name": "#handleAction",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "action",
                  "type": {
                    "text": "string"
                  },
                  "description": "The action"
                }
              ],
              "description": "Handle given action.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachClickListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attaches functionality for toolbar button interaction",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#toggleEditor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Add/remove the editor in one function,\nused when `Enter` key is hit on a selected list item",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachKeyboardListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#attachClickListenersForLi",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "li",
                  "type": {
                    "text": "any"
                  },
                  "description": "the list item"
                }
              ],
              "description": "Helper function to attach mouse events to each individual item",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachKeyboardListenersForLi",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "li",
                  "type": {
                    "text": "any"
                  },
                  "description": "the list item"
                }
              ],
              "description": "Helper function to attach keyboard events to each individual item",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getFocusedLi",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "description": "Get focused Li",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "resetIndices",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Reset indices"
            },
            {
              "kind": "field",
              "name": "virtualScroll",
              "description": "List builder does not support VS",
              "parameters": [
                {
                  "description": "true to use virtual scrolling",
                  "name": "value",
                  "type": {
                    "text": "string | boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "initialized",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Is the component initialized",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "#focusedLiIndex",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "default": "0",
              "description": "The currently focused list item",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "#activatedIndex",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "description": "The currently activated list item",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "#isTargetCheckbox",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The currently target while selecting",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "#isApply",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The currently apply state while single selecting",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "#size",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The currently list size",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "datasource",
              "default": "new IdsDataSource()",
              "description": "The datasource container",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "defaultTemplate",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "array"
              },
              "default": "[\n    'beforeitemactivated',\n    'beforeitemdeactivated',\n    'beforeselected',\n    'beforedeselected'\n  ]",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#extractTemplateLiteralsFromHTML",
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAllLi",
              "return": {
                "type": {
                  "text": "NodeListOf<HTMLElement>"
                }
              },
              "description": "Get list of all elements",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAllSwappableItems",
              "return": {
                "type": {
                  "text": "NodeListOf<IdsSwappableItem>"
                }
              },
              "description": "Return all swappable items",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#addSortableStyles",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Add the sortable class to the list items",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#itemInfo",
              "return": {
                "type": {
                  "text": "IdsListViewItemInfo|null"
                }
              },
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "The element."
                }
              ],
              "description": "Get the item info for given element.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#itemByIndex",
              "return": {
                "type": {
                  "text": "HTMLElement|null"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "The value of data index."
                }
              ],
              "description": "Get the list item DOM element.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "dataIndex",
              "return": {
                "type": {
                  "text": "number|null"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "The page index value."
                }
              ],
              "description": "Get data index for given page index.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "pageIndex",
              "return": {
                "type": {
                  "text": "number|null"
                }
              },
              "parameters": [
                {
                  "name": "dataIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "The data index value."
                }
              ],
              "description": "Get page index for given data index.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "isInPage",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "dataIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "The data index value."
                }
              ],
              "description": "Check if given data index in current page.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#handleOnClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handle on click",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#handleOnKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handle on keydown",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#handleOnKeyup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handle on keyup",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#handleOnAfterVirtualScroll",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handle on after virtual scroll",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setSelection",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "itemInfo",
                  "type": {
                    "text": "any"
                  },
                  "description": "The item and index."
                }
              ],
              "description": "Set the selection for given item",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "focusLi",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "li",
                  "optional": true,
                  "type": {
                    "text": "any"
                  },
                  "description": "The list item."
                },
                {
                  "name": "noFocus",
                  "default": "false",
                  "description": "do not actually focus",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Set the focus for given list item.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "getPreviousLi",
              "return": {
                "type": {
                  "text": "HTMLElement|undefined"
                }
              },
              "parameters": [
                {
                  "name": "li",
                  "type": {
                    "text": "any"
                  },
                  "description": "The list item."
                }
              ],
              "description": "Get previous list item for a given list item.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "getNextLi",
              "return": {
                "type": {
                  "text": "HTMLElement|undefined"
                }
              },
              "parameters": [
                {
                  "name": "li",
                  "type": {
                    "text": "any"
                  },
                  "description": "The list item."
                }
              ],
              "description": "Get next list item for a given list item.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "listItemTemplateFunc",
              "return": {
                "type": {
                  "text": "Function"
                }
              },
              "description": "Get template function for list item.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "staticScrollTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Helper method to render the static scrolling template",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "virtualScrollTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Helper method to render the virtual scrolling template",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "itemTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "object"
                  },
                  "description": "The item to generate"
                }
              ],
              "description": "Return an item's html injecting any values from the dataset as needed.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "pagerTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Set the pager template for listview",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#adjustVirtualScrollIndexes",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "startIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "The starting data index."
                }
              ],
              "description": "Adjust list items all indexes for virtual scroll",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#toggleCheckboxes",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggle checkboxes",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleSelectedAttribute",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "Element"
                  },
                  "description": "the item to add/remove the selected attribute"
                },
                {
                  "name": "switchValue",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "optional switch values to force add/remove the selected attribute"
                }
              ],
              "description": "Helper function that toggles the 'selected' attribute of an element, then focuses on that element",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleSelectedLi",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "any"
                  },
                  "description": "the selected list item to toggle"
                }
              ],
              "description": "Toggles the selected list item",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "updateDataFromDOM",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Update data from DOM",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "redraw",
              "description": "Rerender the list by re applying the template",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "virtualScrollContainer",
              "type": {
                "text": "IdsVirtualScroll | undefined | null"
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "body",
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "adjustHeight",
              "description": "Set the height of the list after loading the template",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#checkTemplateHeight",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "itemTemplate",
                  "type": {
                    "text": "string"
                  },
                  "description": "The item template"
                }
              ],
              "description": "Calculate the height of a template element.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "boolVal",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  },
                  "description": "The attribute name."
                },
                {
                  "name": "defaultValue",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "The default value."
                }
              ],
              "description": "Get boolean property value for given attribute.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "ds",
              "type": {
                "text": "Array<any>"
              },
              "description": "Get the list of all data from dataset",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "loaded",
              "description": "Used to determine if data has been loaded into IdsListView",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array | null"
                  }
                }
              ],
              "type": {
                "text": "any"
              },
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "Set the expected height of the viewport for virtual scrolling",
              "parameters": [
                {
                  "description": "true to use virtual scrolling",
                  "name": "value",
                  "type": {
                    "text": "string | number"
                  }
                }
              ],
              "type": {
                "text": "string | number"
              },
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "itemHeight",
              "description": "Set the expected height of each item",
              "parameters": [
                {
                  "description": "true to use virtual scrolling",
                  "name": "value",
                  "type": {
                    "text": "string | number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectableClass",
              "return": {
                "type": {
                  "text": "string|Array<string>"
                }
              },
              "parameters": [
                {
                  "name": "isAll",
                  "optional": true,
                  "type": {
                    "text": "boolean|undefined"
                  },
                  "description": "If true, will return all classes as array"
                }
              ],
              "description": "Get class name/s with prefixed value",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "activatedItem",
              "type": {
                "text": "IdsListViewActivatedItem | Array<IdsListViewActivatedItem> | null"
              },
              "description": "Get the activated item",
              "return": {
                "type": {
                  "text": "IdsListViewActivatedItem|null"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "IdsListViewSelectedItem | Array<IdsListViewSelectedItem> | null"
              },
              "description": "Get the selected item/s",
              "return": {
                "type": {
                  "text": "IdsListViewSelectedItem|Array<IdsListViewSelectedItem>|null"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "sortable",
              "description": "Handles the sortable property and reflects it on the DOM.",
              "parameters": [
                {
                  "description": "The sortable parameter.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "suppressDeactivation",
              "description": "Sets the items to be suppress deactivation for mixed selection only.",
              "parameters": [
                {
                  "description": "The value.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "suppressDeselection",
              "description": "Sets the items to be suppress deselection for single selection only.",
              "parameters": [
                {
                  "description": "The value.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "hideCheckboxes",
              "description": "Checkboxes will not render if true, only apply to multiple selection.",
              "parameters": [
                {
                  "description": "The value.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Set the aria label text",
              "parameters": [
                {
                  "description": "The label text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setCheckbox",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "The listview item."
                },
                {
                  "name": "isChecked",
                  "default": "false",
                  "description": "The value to be set.",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Set checkbox state in given listview item.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#triggerEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "eventtName",
                  "type": {
                    "text": "string"
                  },
                  "description": "The event name to be trigger."
                },
                {
                  "name": "args",
                  "default": "{}",
                  "type": {
                    "text": "object"
                  },
                  "description": "Extra data."
                }
              ],
              "description": "Trigger the given event.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#activateItemInPage",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based index."
                }
              ],
              "description": "Set a list item to be activated, in current page and data.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#deactivateItemInPage",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based index"
                }
              ],
              "description": "Set a list item to be deactivated, in current page and data.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "activateItem",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "dataIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based dataIndex"
                }
              ],
              "description": "Set a list item to be activated, in dataset.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "deactivateItem",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "dataIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based dataIndex"
                }
              ],
              "description": "Set a list item to be deactivated, in dataset",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#selectInPage",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based index."
                }
              ],
              "description": "Set a list item to be selected, in current page and data.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "#deselectInPage",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based index."
                }
              ],
              "description": "Set a list item to be deselected, in current page and data.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "select",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "dataIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based dataIndex."
                }
              ],
              "description": "Set a list item to be selected, in dataset.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "deselect",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "dataIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based dataIndex."
                }
              ],
              "description": "Set a list item to be deselected, in dataset.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectAll",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set a all list items to be selected.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "deselectAll",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set a all list items to be deselected.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggleAll",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "isDeselect",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true will deselect all items, otherwise select all."
                }
              ],
              "description": "Set all list items to be selected or deselected.",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "getListItemData",
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "Element"
                  },
                  "description": "list item"
                }
              ],
              "description": "Get data for list item",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "getFocusedLiIndex",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "description": "Return #focusedLiIndex",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            },
            {
              "kind": "method",
              "name": "getAllSelectedLiIndex",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "description": "Return all selected Li indexes",
              "inheritedFrom": {
                "name": "IdsListView",
                "module": "src/components/ids-list-view/ids-list-view.ts"
              }
            }
          ],
          "superclass": {
            "name": "IdsListView",
            "module": "/src/components/ids-list-view/ids-list-view"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsListBuilder",
            "module": "src/components/ids-list-builder/ids-list-builder.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-list-view/ids-list-view-search-mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "",
          "name": "IdsListViewSearchMixin",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "searchFilterModes",
              "type": {
                "text": "object"
              },
              "default": "{\n    CONTAINS: 'contains',\n    KEYWORD: 'keyword',\n    PHRASE_STARTS_WITH: 'phrase-starts-with',\n    WORD_STARTS_WITH: 'word-starts-with'\n  }",
              "description": "Possible Filter Modes"
            },
            {
              "kind": "field",
              "name": "searchFilterCallback",
              "type": {
                "text": "null | ((term: string) => ((item: SearchItem) => boolean))"
              },
              "default": "null",
              "description": "Search filter callback, use for custom filter to match"
            },
            {
              "kind": "field",
              "name": "searchableTextCallback",
              "type": {
                "text": "null | ((item: SearchItem) => string)"
              },
              "default": "null",
              "description": "Searchable text callback"
            },
            {
              "kind": "field",
              "name": "#term",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''",
              "description": "Current search term"
            },
            {
              "kind": "field",
              "name": "searchContainer",
              "type": {
                "text": "HTMLDivElement | null | undefined"
              },
              "description": "Get search container element",
              "return": {
                "type": {
                  "text": "HTMLDivElement|null|undefined"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "searchField",
              "type": {
                "text": "IdsSearchField | null | undefined"
              },
              "description": "Get searchf ield element",
              "return": {
                "type": {
                  "text": "HTMLDivElement|null|undefined"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "searchFieldId",
              "description": "Set ID of the search field element to use for the search",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "searchFilterMode",
              "description": "Set search filter mode",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "SearchFilterModes"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "searchTermCaseSensitive",
              "description": "Set search term case sensitive",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "searchTermMinSize",
              "description": "Set search term min size, will trigger filtering only when its length is greater than or equals to term value.",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string | number | null"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "searchable",
              "description": "Set searchable which allows list view to be filtered",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "suppressHighlight",
              "description": "Set search term text to be suppress highlight when using searchable",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "searchTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Get search template"
            },
            {
              "kind": "method",
              "name": "searchFieldTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Get search field template"
            },
            {
              "kind": "method",
              "name": "resetSearch",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Reset search"
            },
            {
              "kind": "method",
              "name": "setSearchable",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the searchable"
            },
            {
              "kind": "method",
              "name": "#attacheSearchField",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attaches a slotted IdsSearchField component",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#objectPropsAsText",
              "return": {
                "type": {
                  "text": "string|HTMLElement|object"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "string"
                  },
                  "description": "The term value"
                }
              ],
              "description": "Get object props as text"
            },
            {
              "kind": "method",
              "name": "#searchableContent",
              "return": {
                "type": {
                  "text": "string|HTMLElement|object"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "string"
                  },
                  "description": "The term value"
                }
              ],
              "description": "Get searchable content",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#wordStartsWithFilter",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "text",
                  "type": {
                    "text": "string"
                  },
                  "description": "searchable text."
                },
                {
                  "name": "term",
                  "type": {
                    "text": "string"
                  },
                  "description": "the term for which to search in the text string."
                }
              ],
              "description": "Matches the provided term against the beginning of all words in a text string.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#handleSearch",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "term",
                  "type": {
                    "text": "string"
                  },
                  "description": "The term value"
                }
              ],
              "description": "Handle search for given trem",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "searchHighlight",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "string | HTMLElement | object"
                  },
                  "description": "The from data item"
                }
              ],
              "description": "Set search term highlight"
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "T"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsListViewSearchMixin",
            "module": "src/components/ids-list-view/ids-list-view-search-mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-list-view/ids-list-view.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS List View Component",
          "name": "IdsListView",
          "cssParts": [
            {
              "description": "the li list element",
              "name": "list-item"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "initialized",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Is the component initialized"
            },
            {
              "kind": "field",
              "name": "#focusedLiIndex",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "default": "0",
              "description": "The currently focused list item"
            },
            {
              "kind": "field",
              "name": "#activatedIndex",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "-1",
              "description": "The currently activated list item"
            },
            {
              "kind": "field",
              "name": "#isTargetCheckbox",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The currently target while selecting"
            },
            {
              "kind": "field",
              "name": "#isApply",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "The currently apply state while single selecting"
            },
            {
              "kind": "field",
              "name": "#size",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "The currently list size"
            },
            {
              "kind": "field",
              "name": "datasource",
              "default": "new IdsDataSource()",
              "description": "The datasource container"
            },
            {
              "kind": "field",
              "name": "defaultTemplate",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "array"
              },
              "default": "[\n    'beforeitemactivated',\n    'beforeitemdeactivated',\n    'beforeselected',\n    'beforedeselected'\n  ]",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#extractTemplateLiteralsFromHTML",
              "parameters": [
                {
                  "name": "string",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getAllLi",
              "return": {
                "type": {
                  "text": "NodeListOf<HTMLElement>"
                }
              },
              "description": "Get list of all elements"
            },
            {
              "kind": "method",
              "name": "getAllSwappableItems",
              "return": {
                "type": {
                  "text": "NodeListOf<IdsSwappableItem>"
                }
              },
              "description": "Return all swappable items"
            },
            {
              "kind": "method",
              "name": "#addSortableStyles",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Add the sortable class to the list items"
            },
            {
              "kind": "method",
              "name": "#itemInfo",
              "return": {
                "type": {
                  "text": "IdsListViewItemInfo|null"
                }
              },
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "The element."
                }
              ],
              "description": "Get the item info for given element."
            },
            {
              "kind": "method",
              "name": "#itemByIndex",
              "return": {
                "type": {
                  "text": "HTMLElement|null"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "The value of data index."
                }
              ],
              "description": "Get the list item DOM element."
            },
            {
              "kind": "method",
              "name": "dataIndex",
              "return": {
                "type": {
                  "text": "number|null"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "The page index value."
                }
              ],
              "description": "Get data index for given page index."
            },
            {
              "kind": "method",
              "name": "pageIndex",
              "return": {
                "type": {
                  "text": "number|null"
                }
              },
              "parameters": [
                {
                  "name": "dataIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "The data index value."
                }
              ],
              "description": "Get page index for given data index."
            },
            {
              "kind": "method",
              "name": "isInPage",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "dataIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "The data index value."
                }
              ],
              "description": "Check if given data index in current page."
            },
            {
              "kind": "method",
              "name": "#handleOnClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handle on click",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#handleOnKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handle on keydown",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#handleOnKeyup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "KeyboardEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handle on keyup",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#handleOnAfterVirtualScroll",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  },
                  "description": "The event."
                }
              ],
              "description": "Handle on after virtual scroll",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventListeners"
            },
            {
              "kind": "method",
              "name": "#setSelection",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "itemInfo",
                  "type": {
                    "text": "any"
                  },
                  "description": "The item and index."
                }
              ],
              "description": "Set the selection for given item",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focusLi",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "li",
                  "optional": true,
                  "type": {
                    "text": "any"
                  },
                  "description": "The list item."
                },
                {
                  "name": "noFocus",
                  "default": "false",
                  "description": "do not actually focus",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Set the focus for given list item."
            },
            {
              "kind": "method",
              "name": "getFocusedLi",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "description": "Get currently focused list item."
            },
            {
              "kind": "method",
              "name": "getPreviousLi",
              "return": {
                "type": {
                  "text": "HTMLElement|undefined"
                }
              },
              "parameters": [
                {
                  "name": "li",
                  "type": {
                    "text": "any"
                  },
                  "description": "The list item."
                }
              ],
              "description": "Get previous list item for a given list item."
            },
            {
              "kind": "method",
              "name": "getNextLi",
              "return": {
                "type": {
                  "text": "HTMLElement|undefined"
                }
              },
              "parameters": [
                {
                  "name": "li",
                  "type": {
                    "text": "any"
                  },
                  "description": "The list item."
                }
              ],
              "description": "Get next list item for a given list item."
            },
            {
              "kind": "method",
              "name": "listItemTemplateFunc",
              "return": {
                "type": {
                  "text": "Function"
                }
              },
              "description": "Get template function for list item."
            },
            {
              "kind": "method",
              "name": "staticScrollTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Helper method to render the static scrolling template"
            },
            {
              "kind": "method",
              "name": "virtualScrollTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Helper method to render the virtual scrolling template"
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "method",
              "name": "itemTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "object"
                  },
                  "description": "The item to generate"
                }
              ],
              "description": "Return an item's html injecting any values from the dataset as needed."
            },
            {
              "kind": "method",
              "name": "pagerTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Set the pager template for listview"
            },
            {
              "kind": "method",
              "name": "#adjustVirtualScrollIndexes",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "startIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "The starting data index."
                }
              ],
              "description": "Adjust list items all indexes for virtual scroll",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#toggleCheckboxes",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggle checkboxes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggleSelectedAttribute",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "Element"
                  },
                  "description": "the item to add/remove the selected attribute"
                },
                {
                  "name": "switchValue",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "optional switch values to force add/remove the selected attribute"
                }
              ],
              "description": "Helper function that toggles the 'selected' attribute of an element, then focuses on that element"
            },
            {
              "kind": "method",
              "name": "toggleSelectedLi",
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "any"
                  },
                  "description": "the selected list item to toggle"
                }
              ],
              "description": "Toggles the selected list item"
            },
            {
              "kind": "method",
              "name": "updateDataFromDOM",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Update data from DOM"
            },
            {
              "kind": "method",
              "name": "redraw",
              "description": "Rerender the list by re applying the template"
            },
            {
              "kind": "field",
              "name": "virtualScrollContainer",
              "type": {
                "text": "IdsVirtualScroll | undefined | null"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "body",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "adjustHeight",
              "description": "Set the height of the list after loading the template",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#checkTemplateHeight",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "itemTemplate",
                  "type": {
                    "text": "string"
                  },
                  "description": "The item template"
                }
              ],
              "description": "Calculate the height of a template element.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "boolVal",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "attributeName",
                  "type": {
                    "text": "string"
                  },
                  "description": "The attribute name."
                },
                {
                  "name": "defaultValue",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "The default value."
                }
              ],
              "description": "Get boolean property value for given attribute."
            },
            {
              "kind": "field",
              "name": "ds",
              "type": {
                "text": "Array<any>"
              },
              "description": "Get the list of all data from dataset",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Set the data array of the listview",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array | null"
                  }
                }
              ],
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "loaded",
              "description": "Used to determine if data has been loaded into IdsListView",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array | null"
                  }
                }
              ],
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "dataKeys",
              "description": "Set the data array of the listview",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array | null"
                  }
                }
              ],
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "virtualScroll",
              "description": "Set the list view to use virtual scrolling for a large amount of elements.",
              "parameters": [
                {
                  "description": "true to use virtual scrolling",
                  "name": "value",
                  "type": {
                    "text": "string | boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "height",
              "description": "Set the expected height of the viewport for virtual scrolling",
              "parameters": [
                {
                  "description": "true to use virtual scrolling",
                  "name": "value",
                  "type": {
                    "text": "string | number"
                  }
                }
              ],
              "type": {
                "text": "string | number"
              }
            },
            {
              "kind": "field",
              "name": "itemHeight",
              "description": "Set the expected height of each item",
              "parameters": [
                {
                  "description": "true to use virtual scrolling",
                  "name": "value",
                  "type": {
                    "text": "string | number"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "selectable",
              "description": "Set the selection mode of the listview",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "method",
              "name": "selectableClass",
              "return": {
                "type": {
                  "text": "string|Array<string>"
                }
              },
              "parameters": [
                {
                  "name": "isAll",
                  "optional": true,
                  "type": {
                    "text": "boolean|undefined"
                  },
                  "description": "If true, will return all classes as array"
                }
              ],
              "description": "Get class name/s with prefixed value"
            },
            {
              "kind": "field",
              "name": "activatedItem",
              "type": {
                "text": "IdsListViewActivatedItem | Array<IdsListViewActivatedItem> | null"
              },
              "description": "Get the activated item",
              "return": {
                "type": {
                  "text": "IdsListViewActivatedItem|null"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "IdsListViewSelectedItem | Array<IdsListViewSelectedItem> | null"
              },
              "description": "Get the selected item/s",
              "return": {
                "type": {
                  "text": "IdsListViewSelectedItem|Array<IdsListViewSelectedItem>|null"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "sortable",
              "description": "Handles the sortable property and reflects it on the DOM.",
              "parameters": [
                {
                  "description": "The sortable parameter.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "suppressDeactivation",
              "description": "Sets the items to be suppress deactivation for mixed selection only.",
              "parameters": [
                {
                  "description": "The value.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "suppressDeselection",
              "description": "Sets the items to be suppress deselection for single selection only.",
              "parameters": [
                {
                  "description": "The value.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "hideCheckboxes",
              "description": "Checkboxes will not render if true, only apply to multiple selection.",
              "parameters": [
                {
                  "description": "The value.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Set the aria label text",
              "parameters": [
                {
                  "description": "The label text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#setCheckbox",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "The listview item."
                },
                {
                  "name": "isChecked",
                  "default": "false",
                  "description": "The value to be set.",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Set checkbox state in given listview item.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#triggerEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "eventtName",
                  "type": {
                    "text": "string"
                  },
                  "description": "The event name to be trigger."
                },
                {
                  "name": "args",
                  "default": "{}",
                  "type": {
                    "text": "object"
                  },
                  "description": "Extra data."
                }
              ],
              "description": "Trigger the given event.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#activateItemInPage",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based index."
                }
              ],
              "description": "Set a list item to be activated, in current page and data."
            },
            {
              "kind": "method",
              "name": "#deactivateItemInPage",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based index"
                }
              ],
              "description": "Set a list item to be deactivated, in current page and data."
            },
            {
              "kind": "method",
              "name": "activateItem",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "dataIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based dataIndex"
                }
              ],
              "description": "Set a list item to be activated, in dataset."
            },
            {
              "kind": "method",
              "name": "deactivateItem",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "dataIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based dataIndex"
                }
              ],
              "description": "Set a list item to be deactivated, in dataset"
            },
            {
              "kind": "method",
              "name": "#selectInPage",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based index."
                }
              ],
              "description": "Set a list item to be selected, in current page and data.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#deselectInPage",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based index."
                }
              ],
              "description": "Set a list item to be deselected, in current page and data.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "select",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "dataIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based dataIndex."
                }
              ],
              "description": "Set a list item to be selected, in dataset."
            },
            {
              "kind": "method",
              "name": "deselect",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "dataIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "the zero based dataIndex."
                }
              ],
              "description": "Set a list item to be deselected, in dataset."
            },
            {
              "kind": "method",
              "name": "selectAll",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set a all list items to be selected."
            },
            {
              "kind": "method",
              "name": "deselectAll",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set a all list items to be deselected."
            },
            {
              "kind": "method",
              "name": "toggleAll",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "isDeselect",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true will deselect all items, otherwise select all."
                }
              ],
              "description": "Set all list items to be selected or deselected."
            },
            {
              "kind": "method",
              "name": "getListItemData",
              "parameters": [
                {
                  "name": "item",
                  "optional": true,
                  "type": {
                    "text": "Element"
                  },
                  "description": "list item"
                }
              ],
              "description": "Get data for list item",
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getFocusedLiIndex",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "description": "Return #focusedLiIndex"
            },
            {
              "kind": "method",
              "name": "getAllSelectedLiIndex",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "description": "Return all selected Li indexes"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-list-view/ids-list-view.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsListView",
            "module": "src/components/ids-list-view/ids-list-view.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-lookup/ids-lookup.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Lookup Component",
          "name": "IdsLookup",
          "cssParts": [
            {
              "description": "the trigger container",
              "name": "trigger-field"
            },
            {
              "description": "the input element",
              "name": "input"
            },
            {
              "description": "the trigger button",
              "name": "trigger-button"
            },
            {
              "description": "the icon in the trigger button",
              "name": "icon"
            },
            {
              "description": "the modal dialog container",
              "name": "modal"
            },
            {
              "description": "the dataGrid element",
              "name": "data-grid"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "triggerField",
              "type": {
                "text": "IdsTriggerField | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "triggerButton",
              "type": {
                "text": "IdsTriggerButton | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "dataGrid",
              "type": {
                "text": "IdsDataGrid | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "modal",
              "type": {
                "text": "IdsModal | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "listBox",
              "type": {
                "text": "any | undefined"
              }
            },
            {
              "kind": "field",
              "name": "isFormComponent",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "field",
              "name": "autocomplete",
              "description": "Get the autocomplete attribute",
              "parameters": [
                {
                  "description": "autocomplete value",
                  "name": "value",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ],
              "type": {
                "text": "boolean | null"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "onDirtyTrackerChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "The changed value"
                }
              ],
              "description": "Callback for dirty tracker setting change",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Set the value of the dropdown using the value/id attribute if present",
              "parameters": [
                {
                  "description": "The value/id to use",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "onLabelChange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onLabelStateChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Push label-state to the container element"
            },
            {
              "kind": "method",
              "name": "onLabelRequiredChange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "description": "Sets the readonly state of the field",
              "parameters": [
                {
                  "description": "string value from the readonly attribute",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ],
              "type": {
                "text": "string | boolean"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets the disabled attribute",
              "parameters": [
                {
                  "description": "string value from the disabled attribute",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ],
              "type": {
                "text": "string | boolean"
              }
            },
            {
              "kind": "field",
              "name": "tabbable",
              "description": "Set the trigger button to tabbable",
              "parameters": [
                {
                  "description": "True of false depending if the trigger field is tabbable",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "string | boolean"
              }
            },
            {
              "kind": "field",
              "name": "columns",
              "description": "Set the columns array of the data grid",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "IdsDataGridColumn[] | undefined"
                  }
                }
              ],
              "type": {
                "text": "any[] | undefined"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Set the data array of the data grid",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array<Record<string, any>>"
                  }
                }
              ],
              "type": {
                "text": "Array<Record<string, any>>"
              }
            },
            {
              "kind": "method",
              "name": "#syncSelectedRows",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "default": "this.value",
                  "type": {
                    "text": "string"
                  },
                  "description": "The value to be set"
                }
              ],
              "description": "Sync the selected rows in the dataGrid",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "dataGridSettings",
              "description": "Set any number of dataGrid settings",
              "parameters": [
                {
                  "description": "The settings to use",
                  "name": "settings",
                  "type": {
                    "text": "object"
                  }
                }
              ],
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "validate",
              "description": "Sets the validation check to use",
              "parameters": [
                {
                  "description": "The `validate` attribute",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "validationEvents",
              "description": "Set `validation-events` attribute",
              "parameters": [
                {
                  "description": "The `validation-events` attribute",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "#title",
              "privacy": "private",
              "description": "Set the modal title",
              "parameters": [
                {
                  "description": "The modal title attribute",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "field",
              "description": "Set the field to use when populating the input",
              "parameters": [
                {
                  "description": "The field name",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Set the dropdown size",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "delimiter",
              "description": "Set the string delimiter on selection",
              "parameters": [
                {
                  "description": "The field name",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "return": {
                "type": {
                  "text": "IdsTriggerField"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "clearable",
              "description": "Sets the clearable x button",
              "parameters": [
                {
                  "description": "If true will set to clearable",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "onFieldHeightChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "the new field height setting"
                }
              ],
              "description": "Push field-height/compact to the container element"
            },
            {
              "kind": "method",
              "name": "#setInputValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the value in the input for the selected row(s)",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#handleEvents",
              "description": "Establish Internal Event Handlers",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#handleKeys",
              "description": "Establish Internal Keyboard shortcuts",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "object"
              },
              "default": "{\n      ...this.state,\n      clearable: true,\n      dataGridSettings: { rowSelection: 'multiple' },\n      value: ''\n    }"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-lookup/ids-lookup.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsLookup",
            "module": "src/components/ids-lookup/ids-lookup.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-mask/ids-mask-api.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "MaskAPI",
          "members": [
            {
              "kind": "method",
              "name": "process",
              "parameters": [
                {
                  "name": "rawValue",
                  "type": {
                    "text": "string"
                  },
                  "description": "the original, unmasked value"
                },
                {
                  "name": "opts",
                  "default": "{}",
                  "type": {
                    "text": "object"
                  },
                  "description": "process options",
                  "optional": true
                }
              ],
              "description": "Process a string against the masking algorithm",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "conformToMask",
              "parameters": [
                {
                  "name": "rawValue",
                  "type": {
                    "text": "string"
                  },
                  "description": "incoming full text string to process."
                },
                {
                  "name": "maskObj",
                  "type": {
                    "text": "object"
                  },
                  "description": "containing the mask to be used for modifying the raw value,\nalong with some meta-data calculated about the mask"
                },
                {
                  "name": "settings",
                  "type": {
                    "text": "object"
                  },
                  "description": "incoming settings for mask parsing.",
                  "optional": true
                }
              ],
              "description": "Processes a raw string value against a masking algorithm and removes unfavorable chracters.",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "processCaretTraps",
              "parameters": [
                {
                  "name": "mask",
                  "type": {
                    "text": "Array<string|RegExp>"
                  },
                  "description": "the mask being checked"
                }
              ],
              "description": "Detects Caret Traps inside of a Mask Array and identifies them with a rich object",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "convertMaskToPlaceholder",
              "parameters": [
                {
                  "name": "mask",
                  "type": {
                    "text": "Array<string|RegExp>"
                  },
                  "description": "contains string \"literal\" characters and Regex matchers."
                },
                {
                  "name": "placeholderChar",
                  "default": "PLACEHOLDER_CHAR",
                  "description": "a character that will be used as the placeholder.",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Converts an array-based mask into a placeholder string.",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "adjustCaretPosition",
              "parameters": [
                {
                  "name": "opts",
                  "type": {
                    "text": "object"
                  },
                  "description": "information about the caret placement."
                }
              ],
              "description": "Takes an index representing a caret and changes it based on mask modifications",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "getSafeRawValue",
              "parameters": [
                {
                  "name": "inputValue",
                  "type": {
                    "text": "any"
                  },
                  "description": "the original value that came from an input field or other source"
                }
              ],
              "description": "Gets the safe raw value of an input field",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "MaskAPI",
            "module": "src/components/ids-mask/ids-mask-api.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-mask/ids-mask-common.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "EMPTY_STRING",
          "type": {
            "text": "string"
          },
          "default": "''"
        },
        {
          "kind": "variable",
          "name": "PLACEHOLDER_CHAR",
          "type": {
            "text": "string"
          },
          "default": "'_'"
        },
        {
          "kind": "variable",
          "name": "CARET_TRAP",
          "type": {
            "text": "string"
          },
          "default": "'[]'"
        },
        {
          "kind": "variable",
          "name": "NON_DIGITS_REGEX",
          "default": "/[^\\u0660-\\u06690-9\\u0966-\\u096F\\u2E80-\\u2FD5\\u3190-\\u319f\\u3400-\\u4DBF\\u4E00-\\u9FCC\\uF900-\\uFAAD]/g"
        },
        {
          "kind": "variable",
          "name": "DIGITS_REGEX",
          "default": "/[\\u0660-\\u06690-9\\u0966-\\u096F\\u2E80-\\u2FD5\\u3190-\\u319f\\u3400-\\u4DBF\\u4E00-\\u9FCC\\uF900-\\uFAAD]/"
        },
        {
          "kind": "variable",
          "name": "ALPHAS_REGEX",
          "default": "/[\\u00C0-\\u017Fa-zA-Z]/"
        },
        {
          "kind": "variable",
          "name": "ANY_REGEX",
          "default": "/[\\u00C0-\\u017Fa-zA-Z0-9]/"
        },
        {
          "kind": "variable",
          "name": "DEFAULT_CONFORM_OPTIONS",
          "type": {
            "text": "object"
          },
          "default": "{\n  caretTrapIndexes: [],\n  guide: false,\n  previousMaskResult: EMPTY_STRING,\n  placeholderChar: PLACEHOLDER_CHAR,\n  placeholder: EMPTY_STRING,\n  selection: {\n    start: 0\n  },\n  keepCharacterPositions: false\n}",
          "description": "Default options that get passed for the `maskAPI.conformToMask()` method."
        },
        {
          "kind": "function",
          "name": "convertPatternFromString",
          "parameters": [
            {
              "name": "pattern",
              "type": {
                "text": "string"
              },
              "description": "a string containing a pattern that needs parsing"
            }
          ],
          "return": {
            "type": {
              "text": "Array<string|RegExp>|undefined"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "EMPTY_STRING",
          "declaration": {
            "name": "EMPTY_STRING",
            "module": "src/components/ids-mask/ids-mask-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "PLACEHOLDER_CHAR",
          "declaration": {
            "name": "PLACEHOLDER_CHAR",
            "module": "src/components/ids-mask/ids-mask-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "CARET_TRAP",
          "declaration": {
            "name": "CARET_TRAP",
            "module": "src/components/ids-mask/ids-mask-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "NON_DIGITS_REGEX",
          "declaration": {
            "name": "NON_DIGITS_REGEX",
            "module": "src/components/ids-mask/ids-mask-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "DIGITS_REGEX",
          "declaration": {
            "name": "DIGITS_REGEX",
            "module": "src/components/ids-mask/ids-mask-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "ALPHAS_REGEX",
          "declaration": {
            "name": "ALPHAS_REGEX",
            "module": "src/components/ids-mask/ids-mask-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "ANY_REGEX",
          "declaration": {
            "name": "ANY_REGEX",
            "module": "src/components/ids-mask/ids-mask-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "DEFAULT_CONFORM_OPTIONS",
          "declaration": {
            "name": "DEFAULT_CONFORM_OPTIONS",
            "module": "src/components/ids-mask/ids-mask-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "convertPatternFromString",
          "declaration": {
            "name": "convertPatternFromString",
            "module": "src/components/ids-mask/ids-mask-common.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-mask/ids-mask-global.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "maskAPI",
          "default": "new MaskAPI()"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "maskAPI",
            "module": "src/components/ids-mask/ids-mask-global.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-mask/ids-masks.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "DEFAULT_NUMBER_MASK_OPTIONS",
          "type": {
            "text": "object"
          },
          "default": "{\n  prefix: EMPTY_STRING,\n  suffix: EMPTY_STRING,\n  allowThousandsSeparator: true,\n  symbols: {\n    currency: '$',\n    decimal: '.',\n    negative: '-',\n    thousands: ','\n  },\n  allowDecimal: false,\n  decimalLimit: 0,\n  locale: '',\n  requireDecimal: false,\n  allowNegative: false,\n  allowLeadingZeros: false,\n  integerLimit: null,\n}"
        },
        {
          "kind": "function",
          "name": "numberMask",
          "return": {
            "type": {
              "text": "IdsMaskGeneratorResult"
            }
          },
          "parameters": [
            {
              "name": "rawValue",
              "default": "''",
              "description": "the un-formatted value that will eventually be masked.",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "default": "{}",
              "type": {
                "text": "IdsMaskOptions"
              },
              "description": "masking options"
            }
          ],
          "description": "Number Mask Function"
        },
        {
          "kind": "variable",
          "name": "DEFAULT_DATETIME_MASK_OPTIONS",
          "type": {
            "text": "object"
          },
          "default": "{\n  format: 'M/d/yyyy',\n  symbols: {\n    timeSeparator: ':',\n    dayPeriodSeparator: ' ',\n    dateSeparator: '/'\n  }\n}"
        },
        {
          "kind": "function",
          "name": "dateMask",
          "return": {
            "type": {
              "text": "IdsMaskGeneratorResult"
            }
          },
          "parameters": [
            {
              "name": "rawValue",
              "default": "''",
              "description": "the un-formatted value that will eventually be masked.",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "default": "{}",
              "type": {
                "text": "IdsMaskOptions"
              },
              "description": "masking options"
            }
          ],
          "description": "Soho Date Mask Function"
        },
        {
          "kind": "function",
          "name": "rangeDateMask",
          "return": {
            "type": {
              "text": "IdsMaskGeneratorResult"
            }
          },
          "parameters": [
            {
              "name": "rawValue",
              "default": "''",
              "description": "the un-formatted value that will eventually be masked.",
              "type": {
                "text": "string"
              }
            },
            {
              "name": "options",
              "default": "{}",
              "type": {
                "text": "IdsMaskOptions"
              },
              "description": "masking options"
            }
          ],
          "description": "Range Date Mask"
        },
        {
          "kind": "function",
          "name": "autoCorrectedDatePipe",
          "parameters": [
            {
              "name": "processResult",
              "type": {
                "text": "@param {object} processResult.conformedValue the value after being conformed to the mask\n * @param {object} processResult.placeholderChar the placeholder char to use\n * @param {object} processResult.placeholder the placeholder text to use\n * "
              },
              "description": "the results object of a mask process"
            },
            {
              "name": "options",
              "type": {
                "text": "@param {object} options.dateFormat the dateFormat text to use\n * "
              },
              "description": "settings for the date pipe function"
            }
          ],
          "description": "Generates a pipe function that can be applied to a Mask API that will correct\nshorthand numeric dates.\nNOTE: DOES NOT WORK FOR DATES WITH ALPHABETIC CONTENT. Do not use this if your\ndates contain \"MMM\" or the full month name.",
          "return": {
            "type": {
              "text": "object"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DEFAULT_NUMBER_MASK_OPTIONS",
          "declaration": {
            "name": "DEFAULT_NUMBER_MASK_OPTIONS",
            "module": "src/components/ids-mask/ids-masks.ts"
          }
        },
        {
          "kind": "js",
          "name": "numberMask",
          "declaration": {
            "name": "numberMask",
            "module": "src/components/ids-mask/ids-masks.ts"
          }
        },
        {
          "kind": "js",
          "name": "DEFAULT_DATETIME_MASK_OPTIONS",
          "declaration": {
            "name": "DEFAULT_DATETIME_MASK_OPTIONS",
            "module": "src/components/ids-mask/ids-masks.ts"
          }
        },
        {
          "kind": "js",
          "name": "dateMask",
          "declaration": {
            "name": "dateMask",
            "module": "src/components/ids-mask/ids-masks.ts"
          }
        },
        {
          "kind": "js",
          "name": "rangeDateMask",
          "declaration": {
            "name": "rangeDateMask",
            "module": "src/components/ids-mask/ids-masks.ts"
          }
        },
        {
          "kind": "js",
          "name": "autoCorrectedDatePipe",
          "declaration": {
            "name": "autoCorrectedDatePipe",
            "module": "src/components/ids-mask/ids-masks.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-loading-indicator/ids-loading-indicator-attributes.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "getPercentageTextHtml",
          "parameters": [
            {
              "name": "{ progress, type = 'circular' }",
              "type": {
                "text": "{ progress:any, type?:string }"
              }
            }
          ]
        },
        {
          "kind": "function",
          "name": "getInnerIndicatorHtml",
          "parameters": [
            {
              "name": "{\n  progress, type, percentageVisible, inline\n}",
              "type": {
                "text": "{ progress:any, type:string, percentageVisible:boolean | string, inline:boolean | string }"
              }
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "getPercentageTextHtml",
          "declaration": {
            "name": "getPercentageTextHtml",
            "module": "src/components/ids-loading-indicator/ids-loading-indicator-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "getInnerIndicatorHtml",
          "declaration": {
            "name": "getInnerIndicatorHtml",
            "module": "src/components/ids-loading-indicator/ids-loading-indicator-attributes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-loading-indicator/ids-loading-indicator.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Loading Indicator Component",
          "name": "IdsLoadingIndicator",
          "cssParts": [
            {
              "description": "the loader svg container element",
              "name": "container"
            },
            {
              "description": "the percentage complete or active part of indeterminate section",
              "name": "progress"
            },
            {
              "description": "the \"circle\" area, which includes percentage and what 100% would cover on indeterminate",
              "name": "circle"
            },
            {
              "description": "the percentage text shown (when flag is set)",
              "name": "percentage-text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the Template for the contents"
            },
            {
              "kind": "field",
              "name": "inline",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "Flag indicating whether or not this component\nwill be nested as a sub-part of another component (e.g. input);\nrenders a smaller variant.",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "progress",
              "return": {
                "type": {
                  "text": "number|undefined"
                }
              },
              "parameters": [
                {
                  "description": "Represents the percentage completed for the indicator;\nif not specified, the indicator is set into indeterminate mode (e.g. no specific\nprogress with an animation)",
                  "name": "value",
                  "type": {
                    "text": "number|undefined"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#setProgress"
            },
            {
              "kind": "field",
              "name": "sticky",
              "parameters": [
                {
                  "description": "Flags the indicator as being an sticky indicator\ntype; causes the indicator to stick to the top of the innermost IdsElement parent\nand span it horizontally. If set, will unflag this indicator with any other\nflag types set.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean|string"
                }
              }
            },
            {
              "kind": "field",
              "name": "percentageVisible",
              "parameters": [
                {
                  "description": "Whether the percentage text should be visible\n(not applicable to `sticky` loading indicators).",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "updatePercentageVisible",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "linear",
              "parameters": [
                {
                  "description": "Flags the indicator as a linear indicator type;\ncauses the indicator to span its parent component horizontally and\nbe represented as a horizontal/linear bar. If set, removes current\nflag types that may be set.",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "type",
              "return": {
                "type": {
                  "text": "'circular'|'linear'|'sticky'"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#type",
              "privacy": "private",
              "type": {
                "text": "'circular'|'linear'|'sticky'"
              },
              "description": "type-flag set based on attributes"
            },
            {
              "kind": "method",
              "name": "#onUpdateTypeFlag",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "attribute",
                  "type": {
                    "text": "*"
                  },
                  "description": "attribute of flag set"
                },
                {
                  "name": "value",
                  "type": {
                    "text": "*"
                  },
                  "description": "value of attribute passed to flag"
                }
              ],
              "description": "updates type based on attribute setter passed"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-loading-indicator/ids-loading-indicator.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsLoadingIndicator",
            "module": "src/components/ids-loading-indicator/ids-loading-indicator.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-masthead/ids-masthead.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Masthead Component",
          "name": "IdsMasthead",
          "members": [
            {
              "kind": "field",
              "name": "#cachedSlots",
              "privacy": "private",
              "type": {
                "text": "MastheadSlots | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "#cachedBreakpoints",
              "privacy": "private",
              "type": {
                "text": "MastheadBreakpoints | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "elements",
              "description": "Get a list of element dependencies for this component",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "slots",
              "type": {
                "text": "MastheadSlots"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "field",
              "name": "breakpoints",
              "type": {
                "text": "MastheadBreakpoints"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "field",
              "name": "isMobile",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "isTablet",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "isDesktop",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Gets the icon attribute",
              "parameters": [
                {
                  "description": "the icon name",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "method",
              "name": "logo",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the HTML template for the logo"
            },
            {
              "kind": "method",
              "name": "renderBreakpoint",
              "description": "Rearranges user's slots in masthead according to desktop, tablet and mobile viewports.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onTitleChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "title value"
                }
              ],
              "description": "Handles title attribute changes"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "description": "Attach desktop, mobile and table breakpoint listeners for masthead",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#restyleButtons",
              "description": "Helper method to give nested buttons transparent backgrounds",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-masthead/ids-masthead.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsMasthead",
            "module": "src/components/ids-masthead/ids-masthead.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-menu/ids-menu-attributes.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "MENU_GROUP_SELECT_TYPES",
          "type": {
            "text": "array"
          },
          "default": "[\n  'none',\n  'single',\n  'multiple'\n]"
        },
        {
          "kind": "variable",
          "name": "MENU_ITEM_ICON_SIZE",
          "type": {
            "text": "string"
          },
          "default": "'small'"
        },
        {
          "kind": "variable",
          "name": "MENU_DEFAULTS",
          "type": {
            "text": "any"
          },
          "default": "{\n  disabled: false,\n  icon: null,\n  selected: false,\n  shortcutKeys: null,\n  submenu: null,\n  tabIndex: 0,\n  value: null,\n}"
        },
        {
          "kind": "function",
          "name": "safeForAttribute",
          "parameters": [
            {
              "name": "value",
              "type": {
                "text": "any"
              },
              "description": "the value to be checked"
            }
          ],
          "description": "Determines if a menu item's stored value can safely be described by its attribute inside the DOM.",
          "return": {
            "type": {
              "text": "boolean"
            }
          }
        },
        {
          "kind": "function",
          "name": "isValidGroup",
          "parameters": [
            {
              "name": "menuGroup",
              "type": {
                "text": "string|HTMLElement"
              },
              "description": "the group to search for"
            },
            {
              "name": "idsMenu",
              "type": {
                "text": "HTMLElement"
              },
              "description": "the parent menu element"
            }
          ],
          "privacy": "private",
          "return": {
            "type": {
              "text": "HTMLElement|undefined"
            }
          }
        },
        {
          "kind": "function",
          "name": "isUsableItem",
          "parameters": [
            {
              "name": "item",
              "type": {
                "text": "HTMLElement"
              },
              "description": "the element to be checked"
            },
            {
              "name": "idsMenu",
              "type": {
                "text": "HTMLElement"
              },
              "description": "the parent menu element"
            }
          ],
          "privacy": "private",
          "return": {
            "type": {
              "text": "boolean"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MENU_GROUP_SELECT_TYPES",
          "declaration": {
            "name": "MENU_GROUP_SELECT_TYPES",
            "module": "src/components/ids-menu/ids-menu-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "MENU_ITEM_ICON_SIZE",
          "declaration": {
            "name": "MENU_ITEM_ICON_SIZE",
            "module": "src/components/ids-menu/ids-menu-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "MENU_DEFAULTS",
          "declaration": {
            "name": "MENU_DEFAULTS",
            "module": "src/components/ids-menu/ids-menu-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "safeForAttribute",
          "declaration": {
            "name": "safeForAttribute",
            "module": "src/components/ids-menu/ids-menu-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "isValidGroup",
          "declaration": {
            "name": "isValidGroup",
            "module": "src/components/ids-menu/ids-menu-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "isUsableItem",
          "declaration": {
            "name": "isUsableItem",
            "module": "src/components/ids-menu/ids-menu-attributes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-menu/ids-menu-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Menu Group Component",
          "name": "IdsMenuGroup",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "refresh",
              "description": "Updates some attributes after changes to the component are made.",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#getGeneratedLabel"
            },
            {
              "kind": "field",
              "name": "menu",
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "Array<IdsMenuItem>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<IdsMenuItem>"
                }
              }
            },
            {
              "kind": "method",
              "name": "updateIconAlignment",
              "description": "Sets/Remove an alignment CSS class",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "header",
              "type": {
                "text": "IdsMenuHeader | null"
              },
              "description": "Gets this groups descriptive header, if one is defined.",
              "readonly": true,
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "select",
              "return": {
                "type": {
                  "text": "string|undefined"
                }
              },
              "parameters": [
                {
                  "description": "the type of selection to set this group",
                  "name": "val",
                  "type": {
                    "text": "string|undefined"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "keepOpen",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "true if the menu should close when an item in this group is selected",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "updateSelectability",
              "description": "Forces items in the group to re-render the checkmark/checkbox to be in-sync with\nthe group's `select` property.",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "deselectAllExcept",
              "parameters": [
                {
                  "name": "keptItems",
                  "type": {
                    "text": "HTMLElement|Array<HTMLElement>"
                  },
                  "description": "a single item or list of items\nwhose selection will be ignored."
                }
              ],
              "description": "Causes all menu items except for those provided to become deselected.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-menu/ids-menu-group.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsMenuGroup",
            "module": "src/components/ids-menu/ids-menu-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-menu/ids-menu-header.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Menu Header Component",
          "name": "IdsMenuHeader",
          "cssParts": [
            {
              "description": "the menu header element",
              "name": "header"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "menu",
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "method",
              "name": "template"
            },
            {
              "kind": "method",
              "name": "decorateForIcon",
              "parameters": [
                {
                  "name": "doShow",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            }
          ],
          "mixins": [
            {
              "name": "IdsEventsMixin",
              "module": "/src/mixins/ids-events-mixin/ids-events-mixin"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsMenuHeader",
            "module": "src/components/ids-menu/ids-menu-header.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-menu/ids-menu-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Menu Item Component",
          "name": "IdsMenuItem",
          "cssParts": [
            {
              "description": "the menu item element",
              "name": "menu-item"
            },
            {
              "description": "the text element",
              "name": "text"
            },
            {
              "description": "the icon element",
              "name": "icon"
            },
            {
              "description": "the selected check element",
              "name": "check"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "shouldUpdate",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Inner template contents",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "templateCheck"
            },
            {
              "kind": "method",
              "name": "templateDisplayIcon",
              "parameters": [
                {
                  "name": "icon",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "templateShortcutKeys",
              "parameters": [
                {
                  "name": "shortcutText",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "templateSubmenuIcon"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "array"
              },
              "default": "['beforeselected', 'beforedeselected']",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "refresh",
              "description": "Updates the visual state of this menu item",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "a",
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLAnchorElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "IdsMenu | IdsPopupMenu | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "group",
              "readonly": true,
              "return": {
                "type": {
                  "text": "IdsMenuGroup"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Retrieve the disabled state of the inner button element",
              "parameters": [
                {
                  "description": "true if the button will be disabled",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "onHiddenChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "hidden value"
                }
              ],
              "description": "Handles global html hidden attribute changes"
            },
            {
              "kind": "field",
              "name": "highlighted",
              "parameters": [
                {
                  "description": "true if the menu item should appear highlighted",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "highlight",
              "description": "Causes a menu item to become focused (and therefore highlighted).",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "unhighlight",
              "description": "Causes a menu item to become unhighlighted.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "parameters": [
                {
                  "description": "representing the icon to set",
                  "name": "val",
                  "type": {
                    "text": "string | undefined"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string | undefined"
                }
              }
            },
            {
              "kind": "field",
              "name": "iconEl",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "appendIcon",
              "parameters": [
                {
                  "name": "iconName",
                  "type": {
                    "text": "string"
                  },
                  "description": "The icon name to check"
                }
              ],
              "description": "Check if an icon exists, and adds the icon if it's missing",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeIcon",
              "description": "Check if an icon exists, and removes the icon if it's present",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "decorateForIcon",
              "parameters": [
                {
                  "name": "doShow",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if the menu item should be decorated"
                }
              ],
              "description": "Updates the alignment of text/icon content in the menu item to account for icons\nthat are present either on this menu item, or another one inside this menu item's group.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "detectHidden"
            },
            {
              "kind": "field",
              "name": "submenu",
              "type": {
                "text": "IdsMenu | IdsPopupMenu | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "hasSubmenu",
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "detectSubmenu",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "decorateSubmenu",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean|string"
                  },
                  "description": "true if a submenu is present and should be identified\nwith icons and correct aria attributes"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "isSelectable",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "detectSelectability",
              "description": "Decorates the menu for selectability, adding/removing a checkmark",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "true if the item should be selected",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "select",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "deselect",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "shortcutKeys",
              "parameters": [
                {
                  "description": "representing the shortcut key text",
                  "name": "val",
                  "type": {
                    "text": "string | undefined"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string | undefined"
                }
              }
            },
            {
              "kind": "field",
              "name": "shortcutKeyEl",
              "return": {
                "type": {
                  "text": "HTMLSpanElement | undefined"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "appendShortcuts",
              "parameters": [
                {
                  "name": "shortcutText",
                  "type": {
                    "text": "string"
                  },
                  "description": "The icon name to check"
                }
              ],
              "description": "Check if an icon exists, and adds the icon if it's missing",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeShortcuts",
              "description": "Check if an icon exists, and removes the icon if it's present",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#tabIndex",
              "privacy": "private",
              "description": "Passes a tabindex attribute from the custom element to the hyperlink",
              "parameters": [
                {
                  "description": "[number|string] the tabindex value",
                  "name": "val",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "field",
              "name": "#target",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "target",
              "parameters": [
                {
                  "description": "an element reference to use for triggering/responding to elements",
                  "name": "element",
                  "type": {
                    "text": "HTMLElement|undefined"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "HTMLElement|undefined"
                }
              }
            },
            {
              "kind": "field",
              "name": "text",
              "readonly": true,
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "textAlign",
              "description": "Set the value of the text align attribute",
              "parameters": [
                {
                  "description": "start / center / end",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "readonly": true,
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "value",
              "parameters": [
                {
                  "description": "the value for this menu item",
                  "name": "val",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "showSubmenu",
              "description": "Displays this menu item's submenu, if one is present.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hideSubmenu",
              "description": "Hides this menu item's submenu, if one is present.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Correctly focuses the menu item.  In this case, override the browser's default\nfocus routine and force focusing to occur on the anchor.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "viewbox",
              "description": "Return the viewbox",
              "parameters": [
                {
                  "description": "for icon viewbox",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "toggleable",
              "description": "Return the viewbox",
              "parameters": [
                {
                  "description": "for icon viewbox",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "object"
              },
              "default": "{}"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-menu/ids-menu-item.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsMenuItem",
            "module": "src/components/ids-menu/ids-menu-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-menu/ids-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Menu Component",
          "name": "IdsMenu",
          "cssParts": [
            {
              "description": "the menu element",
              "name": "menu"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "datasource",
              "default": "new IdsDataSource()"
            },
            {
              "kind": "field",
              "name": "lastHovered",
              "type": {
                "text": "any | undefined"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "lastNavigated",
              "type": {
                "text": "any | undefined"
              },
              "default": "undefined"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "childElements",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "privacy": "protected",
              "description": "Safely retrieves child elements of the menu without regard\nfor whether or not they are direct descendants, or slotted",
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "attachEventHandlers",
              "description": "Sets up event handlers used in this menu.",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "attachKeyboardListeners",
              "description": "Sets up the connection to the global keyboard handler",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Inner template contents",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "menuContentTemplate",
              "parameters": [
                {
                  "name": "contentsObj",
                  "type": {
                    "text": "any"
                  },
                  "description": "a plain object structure with Popupmenu Contents"
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "renderFromData",
              "description": "Rerender the list by re applying the template",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Set the data array of the menu",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "IdsMenuData"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "IdsMenuData"
                }
              }
            },
            {
              "kind": "field",
              "name": "groups",
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<any>"
                }
              }
            },
            {
              "kind": "field",
              "name": "headers",
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<any>"
                }
              }
            },
            {
              "kind": "field",
              "name": "items",
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              }
            },
            {
              "kind": "field",
              "name": "focused",
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement|undefined"
                }
              }
            },
            {
              "kind": "field",
              "name": "focusTarget",
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "highlighted",
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              }
            },
            {
              "kind": "field",
              "name": "parentMenu",
              "readonly": true,
              "return": {
                "type": {
                  "text": "IdsMenu"
                }
              }
            },
            {
              "kind": "field",
              "name": "parentMenuItem",
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "submenus",
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<IdsMenu>"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "parameters": [
                {
                  "description": "true if the component should be disabled",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#disableItems",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#enableItems",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "highlightItem",
              "parameters": [
                {
                  "name": "menuItem",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "reference to the menu item that will be highlighted"
                }
              ],
              "description": "Unhighlights all menu items, then highlights a specified item.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "navigate",
              "parameters": [
                {
                  "name": "amt",
                  "default": "0",
                  "description": "the amount of items to navigate",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "doFocus",
                  "default": "false",
                  "description": "if true, causes the new item to become focused.",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Uses a currently-highlighted menu item to \"navigate\" a specified number\nof steps to another menu item, highlighting it.",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "method",
              "name": "detectTabbable",
              "description": "Gets the current item that should be used as the \"tabbable\" item\n(item that receives focus when the menu is \"focused\").",
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              }
            },
            {
              "kind": "method",
              "name": "makeTabbable",
              "parameters": [
                {
                  "name": "elem",
                  "default": "this.items[0]",
                  "description": "an element residing within the menu that can accept",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getFirstAvailableItem",
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              }
            },
            {
              "kind": "method",
              "name": "getSelectedItems",
              "parameters": [
                {
                  "name": "menuGroup",
                  "optional": true,
                  "type": {
                    "text": "string|HTMLElement"
                  },
                  "description": "a string representing an ID, or an IdsMenuGroup\ndirectly, that optionally limits results to within a specified menu group."
                }
              ],
              "description": "Retrieves a list of selected items in this menu.",
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              }
            },
            {
              "kind": "method",
              "name": "getSelectedValues",
              "parameters": [
                {
                  "name": "menuGroup",
                  "type": {
                    "text": "string|HTMLElement"
                  },
                  "description": "a string representing an ID, or an IdsMenuGroup\ndirectly, that optionally limits results to within a specified menu group.",
                  "optional": true
                }
              ],
              "return": {
                "type": {
                  "text": "Array<any>"
                }
              }
            },
            {
              "kind": "method",
              "name": "setSelectedValues",
              "parameters": [
                {
                  "name": "values",
                  "type": {
                    "text": "Array<any>|string"
                  },
                  "description": "array|string of menu item value(s)"
                },
                {
                  "name": "menuGroup",
                  "type": {
                    "text": "string|HTMLElement"
                  },
                  "description": "a string representing an ID, or an IdsMenuGroup",
                  "optional": true
                }
              ],
              "description": "Selects menu items containing the value(s) provided",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "selectItem",
              "parameters": [
                {
                  "name": "menuItem",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "the item to be selected"
                }
              ],
              "description": "Selects a menu item contained by this menu.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "clearSelectedItems",
              "parameters": [
                {
                  "name": "menuGroup",
                  "type": {
                    "text": "string|HTMLElement"
                  },
                  "description": "a string representing an ID, or an IdsMenuGroup\ndirectly, that optionally limits results to within a specified menu group.",
                  "optional": true
                }
              ],
              "description": "Clears any selected items in the menu, or specified group",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "hasIcons",
              "type": {
                "text": "boolean"
              },
              "privacy": "protected",
              "parameters": [
                {
                  "description": "true if the menu contains items displaying icons",
                  "name": "hasIcons",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "default": "false"
            },
            {
              "kind": "method",
              "name": "detectIcons",
              "description": "Determines if this menu (not including its submenus) contains icons inside its visible menu items",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "refreshIconAlignment",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Refreshes the state of alignment of icons inside this menu"
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "object"
              },
              "default": "{}"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-menu/ids-menu.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsMenu",
            "module": "src/components/ids-menu/ids-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-menu-button/ids-menu-button-attributes.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "MENU_BUTTON_ATTRIBUTES",
          "type": {
            "text": "array"
          },
          "default": "[\n  'dropdown-icon',\n  'formatter-width',\n  attributes.ID,\n  attributes.MENU\n]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MENU_BUTTON_ATTRIBUTES",
          "declaration": {
            "name": "MENU_BUTTON_ATTRIBUTES",
            "module": "src/components/ids-menu-button/ids-menu-button-attributes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-menu-button/ids-menu-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Menu Button Component",
          "name": "IdsMenuButton",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "protoClasses",
              "description": "Figure out the classes",
              "privacy": "private",
              "readonly": true,
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Passes a disabled attribute from the custom element to the button",
              "parameters": [
                {
                  "description": "true if the component should be disabledd",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "#configureDropdownIcon",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "doShow",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "displaySelectedText",
              "parameters": [
                {
                  "description": "true if the menu button should adopt a selected menu item's text content when chosen",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "dropdownIcon",
              "parameters": [
                {
                  "description": "referencing an icon string name to use",
                  "name": "val",
                  "type": {
                    "text": "string|undefined"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string|undefined"
                }
              }
            },
            {
              "kind": "field",
              "name": "dropdownIconEl",
              "return": {
                "type": {
                  "text": "HTMLElement|null"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "menu",
              "return": {
                "type": {
                  "text": "string|null"
                }
              },
              "parameters": [
                {
                  "description": "an ID selector string",
                  "name": "val",
                  "type": {
                    "text": "string|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Set menu's selected items by value",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "description": "array|string of value(s) contained in menu items",
                  "name": "values",
                  "type": {
                    "text": "Array<any>|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "menuEl",
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "#initMenuPopup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set popup menu initially",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "configureMenu",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setActiveState",
              "parameters": [
                {
                  "name": "isActive",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true when menu is open"
                }
              ],
              "description": "Set button's active state"
            },
            {
              "kind": "method",
              "name": "resizeMenu",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "setPopupArrow",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "formatterWidth",
              "description": "Set the formatter width for menu button",
              "parameters": [
                {
                  "description": "The formatter width value",
                  "name": "value",
                  "type": {
                    "text": "string | number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "shouldUpdate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setInitialState",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['alternate', 'alternate-formatter']",
              "description": "Inherited from `IdsColorVariantMixin`",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "refreshProtoClasses",
              "description": "Refreshes this button's prototype CSS class",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Inner template contents",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "onHiddenChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "true if hidden"
                }
              ],
              "description": "Handles hidden attribute changes",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "setAriaText",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLButtonElement"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "cssClass",
              "parameters": [
                {
                  "description": "containing CSS classes that will be applied to the button\nStrings will be split into an array and separated by whitespace.",
                  "name": "val",
                  "type": {
                    "text": "Array<string>|string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "#tabIndex",
              "privacy": "private",
              "description": "Passes a tabIndex attribute from the custom element to the button",
              "parameters": [
                {
                  "description": "the tabIndex value",
                  "name": "val",
                  "type": {
                    "text": "number | string | null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Gets the current icon used on the button",
              "parameters": [
                {
                  "description": "representing the icon to set",
                  "name": "val",
                  "type": {
                    "text": "string | undefined"
                  }
                }
              ],
              "type": {
                "text": "string | undefined | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "iconEl",
              "type": {
                "text": "HTMLElement | null"
              },
              "description": "Gets the current icon element",
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement | null"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "iconAlign",
              "description": "Sets the automatic alignment of an existing icon to the 'start' or 'end' of the text",
              "parameters": [
                {
                  "description": "automatic icon alignment setting, if applicable (defaults to undefined).",
                  "name": "val",
                  "type": {
                    "text": "IdsButtonIconAlignment"
                  }
                }
              ],
              "type": {
                "text": "IdsButtonIconAlignment"
              },
              "return": {
                "type": {
                  "text": "IdsButtonIconAlignment"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "string | null"
              },
              "description": "Set width of button",
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "parameters": [
                {
                  "description": "100%, 90px, 50rem etc.",
                  "name": "w",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "appendIcon",
              "parameters": [
                {
                  "name": "iconName",
                  "type": {
                    "text": "string"
                  },
                  "description": "The icon name to check"
                }
              ],
              "description": "Check if an icon exists, and adds the icon if it's missing",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeIcon",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Check if an icon exists, and removes the icon if it's present",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "setIconAlignment",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Adds/Removes Icon Alignment CSS classes to/from the inner button component.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasIncorrectStartElement",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasIncorrectEndElement",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "text",
              "parameters": [
                {
                  "description": "the text value",
                  "name": "val",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "type": {
                "text": "string | null"
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "appendText",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "New text contents"
                }
              ],
              "description": "Check if the text slot exists, and appends it if it's missing",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeText",
              "description": "Checks if the text slot exists, and removes it if necessary",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "appearance",
              "description": "Set the button appearance between 'default', 'primary', 'secondary', 'tertiary', or 'destructive'",
              "parameters": [
                {
                  "description": "a valid button \"appearance\"",
                  "name": "val",
                  "type": {
                    "text": "IdsButtonAppearance | null"
                  }
                }
              ],
              "type": {
                "text": "IdsButtonAppearance"
              },
              "return": {
                "type": {
                  "text": "IdsButtonAppearance"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Sets the HTMLButtonElement 'type' attribute",
              "type": {
                "text": "IdsButtonType"
              },
              "return": {
                "type": {
                  "text": "IdsButtonType"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "noMargins",
              "description": "Sets the no margins attribute",
              "parameters": [
                {
                  "description": "string value from the no margins attribute",
                  "name": "n",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "noPadding",
              "parameters": [
                {
                  "description": "true if the button should not have standard padding rules applied",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              },
              "return": {
                "type": {
                  "text": "boolean | string"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "square",
              "parameters": [
                {
                  "description": "whether the corners of the button as an icon-button should be angled/90°",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "setAppearanceClass",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string | null"
                  },
                  "description": "desired appearance class"
                }
              ],
              "description": "Sets the correct appearance class on the ShadowRoot button.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides the standard \"focus\" behavior to instead pass focus to the inner HTMLButton element.",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Implements callback from IdsColorVariantMixin used to\nupdate the color variant on children components",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            }
          ],
          "superclass": {
            "name": "IdsButton",
            "module": "/src/components/ids-button/ids-button"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsMenuButton",
            "module": "src/components/ids-menu-button/ids-menu-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-message/ids-message-attributes.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "MESSAGE_STATUSES",
          "type": {
            "text": "string[]"
          },
          "default": "[\n  'none', 'default', 'error', 'alert', 'success', 'info', 'warning'\n]"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "MESSAGE_STATUSES",
            "module": "src/components/ids-message/ids-message-attributes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-message/ids-message.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Message Component",
          "name": "IdsMessage",
          "cssParts": [
            {
              "description": "the popup outer element",
              "name": "popup"
            },
            {
              "description": "the inner overlay element",
              "name": "overlay"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "ariaLabelContent",
              "type": {
                "text": "string"
              },
              "description": "Used for ARIA Labels and other content",
              "readonly": true,
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "message",
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "the desired contents of the message element",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "''"
            },
            {
              "kind": "field",
              "name": "opacity",
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "the desired opacity of the overlay",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#refreshMessage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "content",
                  "type": {
                    "text": "string"
                  },
                  "description": "the new message content element"
                }
              ],
              "description": "Refreshes the state of the Message's Content"
            },
            {
              "kind": "field",
              "name": "status",
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "the message's new status type",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "MESSAGE_STATUSES[0]"
            },
            {
              "kind": "method",
              "name": "#refreshStatus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "the value of the status icon"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#setIconColor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "iconEl",
                  "type": {
                    "text": "Element"
                  },
                  "description": "the icon element to update"
                },
                {
                  "name": "thisStatus",
                  "type": {
                    "text": "string"
                  },
                  "description": "the status string to apply as a CSS class"
                }
              ],
              "description": "Changes the color of the Status Icon"
            },
            {
              "kind": "field",
              "name": "shouldUpdate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "onButtonClick",
              "type": {
                "text": "(target: any) => void | undefined"
              },
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "globalKeydownListener",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "Array<string>"
              },
              "default": "['beforeshow', 'beforehide']",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttons",
              "type": {
                "text": "NodeListOf<IdsModalButton>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "NodeListOf<IdsModalButton>"
                }
              },
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "fullsize",
              "type": {
                "text": "IdsModalFullsizeAttributeValue"
              },
              "return": {
                "type": {
                  "text": "IdsModalFullsizeAttributeValue"
                }
              },
              "parameters": [
                {
                  "description": "the breakpoint at which\nthe Modal will change from normal mode to fullsize mode",
                  "name": "val",
                  "type": {
                    "text": "IdsModalFullsizeAttributeValue"
                  }
                }
              ],
              "default": "''",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#clearBreakpointResponse",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes established callbacks for responding to breakpoints, if set",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setFullsizeDefault",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Runs on connectedCallback or any refresh to adjust the `fullsize` attribute, if set",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "overlay",
              "type": {
                "text": "any"
              },
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "description": "an overlay element",
                  "name": "val",
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "default": "null",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "messageTitle",
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "the new content to be used as the message's title",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "null",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#refreshModalHeader",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "hasTitle",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if the title should be rendered"
                }
              ],
              "description": "Refreshes the state of the Modal header, either adding its slot/contents or removing it",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "refreshAriaLabel",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Renders or Removes a correct `aria-label` attribute on the Modal about its contents.",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#refreshModalFooter",
              "description": "Refreshes the state of the Modal footer, hiding/showing it",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "#visible",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "true if the Modal is visible.",
                  "name": "val",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "show",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Shows the modal with possibity to veto the promise",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Hides the modal with possibity to veto the promise",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "addOpenEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides `addOpenEvents` from the OpenEvents mixin to add additional \"Escape\" key handling",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeOpenEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides `removeOpenEvents` from the OpenEvents mixin to remove \"Escape\" key handling",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#refreshOverlay",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "if true, uses an external overlay"
                }
              ],
              "description": "Refreshes the state of the overlay used behind the modal.  If a shared overlay isn't applied,\nan internal one is generated and applied to the ShadowRoot.",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#refreshVisibility",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "if true, makes the Modal visible to the user"
                }
              ],
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setTargetFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Focuses the defined target element, if applicable",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "field",
              "name": "#setFocusIfVisible",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets up overall events",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleButtonClick",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  },
                  "description": "the original event object"
                }
              ],
              "description": "Handles when Modal Button is clicked.",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "onTriggerClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle `onTriggerClick` from IdsPopupInteractionsMixin",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            },
            {
              "kind": "method",
              "name": "onOutsideClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "the original click event"
                }
              ],
              "description": "Handle `onOutsideClick` from IdsPopupOpenEventsMixin",
              "inheritedFrom": {
                "name": "IdsModal",
                "module": "src/components/ids-modal/ids-modal.ts"
              }
            }
          ],
          "superclass": {
            "name": "IdsModal",
            "module": "/src/components/ids-modal/ids-modal"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsMessage",
            "module": "src/components/ids-message/ids-message.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-modal/ids-modal-z-counter.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "zCounter",
          "default": "new IdsModalZCounter()"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "zCounter",
            "module": "src/components/ids-modal/ids-modal-z-counter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-modal/ids-modal.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Modal Component",
          "name": "IdsModal",
          "cssParts": [
            {
              "description": "the popup outer element",
              "name": "popup"
            },
            {
              "description": "the inner overlay element",
              "name": "overlay"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "shouldUpdate",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "onButtonClick",
              "type": {
                "text": "(target: any) => void | undefined"
              }
            },
            {
              "kind": "field",
              "name": "globalKeydownListener"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "Array<string>"
              },
              "default": "['beforeshow', 'beforehide']",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "field",
              "name": "ariaLabelContent",
              "type": {
                "text": "string"
              },
              "description": "Used for ARIA Labels and other content",
              "readonly": true,
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "buttons",
              "type": {
                "text": "NodeListOf<IdsModalButton>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "NodeListOf<IdsModalButton>"
                }
              }
            },
            {
              "kind": "field",
              "name": "fullsize",
              "type": {
                "text": "IdsModalFullsizeAttributeValue"
              },
              "return": {
                "type": {
                  "text": "IdsModalFullsizeAttributeValue"
                }
              },
              "parameters": [
                {
                  "description": "the breakpoint at which\nthe Modal will change from normal mode to fullsize mode",
                  "name": "val",
                  "type": {
                    "text": "IdsModalFullsizeAttributeValue"
                  }
                }
              ],
              "default": "''"
            },
            {
              "kind": "method",
              "name": "#clearBreakpointResponse",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Removes established callbacks for responding to breakpoints, if set"
            },
            {
              "kind": "method",
              "name": "#setFullsizeDefault",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Runs on connectedCallback or any refresh to adjust the `fullsize` attribute, if set"
            },
            {
              "kind": "field",
              "name": "overlay",
              "type": {
                "text": "any"
              },
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "description": "an overlay element",
                  "name": "val",
                  "type": {
                    "text": "HTMLElement | undefined"
                  }
                }
              ],
              "default": "null"
            },
            {
              "kind": "field",
              "name": "messageTitle",
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "the new content to be used as the message's title",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "default": "null"
            },
            {
              "kind": "method",
              "name": "#refreshModalHeader",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "hasTitle",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if the title should be rendered"
                }
              ],
              "description": "Refreshes the state of the Modal header, either adding its slot/contents or removing it"
            },
            {
              "kind": "method",
              "name": "refreshAriaLabel",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Renders or Removes a correct `aria-label` attribute on the Modal about its contents."
            },
            {
              "kind": "method",
              "name": "#refreshModalFooter",
              "description": "Refreshes the state of the Modal footer, hiding/showing it",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "#visible",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "true if the Modal is visible.",
                  "name": "val",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "show",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Shows the modal with possibity to veto the promise"
            },
            {
              "kind": "method",
              "name": "hide",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Hides the modal with possibity to veto the promise"
            },
            {
              "kind": "method",
              "name": "addOpenEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides `addOpenEvents` from the OpenEvents mixin to add additional \"Escape\" key handling",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeOpenEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides `removeOpenEvents` from the OpenEvents mixin to remove \"Escape\" key handling",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#refreshOverlay",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "if true, uses an external overlay"
                }
              ],
              "description": "Refreshes the state of the overlay used behind the modal.  If a shared overlay isn't applied,\nan internal one is generated and applied to the ShadowRoot."
            },
            {
              "kind": "method",
              "name": "#refreshVisibility",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "if true, makes the Modal visible to the user"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#setTargetFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Focuses the defined target element, if applicable"
            },
            {
              "kind": "field",
              "name": "#setFocusIfVisible",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets up overall events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleButtonClick",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  },
                  "description": "the original event object"
                }
              ],
              "description": "Handles when Modal Button is clicked."
            },
            {
              "kind": "method",
              "name": "onTriggerClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle `onTriggerClick` from IdsPopupInteractionsMixin"
            },
            {
              "kind": "method",
              "name": "onOutsideClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "the original click event"
                }
              ],
              "description": "Handle `onOutsideClick` from IdsPopupOpenEventsMixin"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-modal/ids-modal.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsModal",
            "module": "src/components/ids-modal/ids-modal.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-modal/ids-overlay.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Overlay Component",
          "name": "IdsOverlay",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "true if the overlay should be made visible",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "opacity",
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "description": "a percentage number for setting overlay transparency",
                  "name": "val",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#changeOpacity",
              "return": {
                "type": {
                  "text": "Promise"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "number"
                  },
                  "description": "the opacity value to set on the overlay"
                }
              ],
              "description": "Changes the amount of opacity on the overlay"
            },
            {
              "kind": "method",
              "name": "#smoothlyAnimateVisibility",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "if true, shows the overlay.  If false, hides the overlay."
                }
              ],
              "description": "Animates in/out the visibility of the overlay"
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "object"
              },
              "default": "{\n      opacity: 0.5,\n      visible: false,\n    }"
            }
          ],
          "mixins": [
            {
              "name": "IdsEventsMixin",
              "module": "/src/mixins/ids-events-mixin/ids-events-mixin"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsOverlay",
            "module": "src/components/ids-modal/ids-overlay.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-modal-button/ids-modal-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Modal Button Component",
          "name": "IdsModalButton",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "protoClasses",
              "description": "Figure out the classes",
              "privacy": "private",
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "type": {
                "text": "Array<string>"
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "cancel",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "true if the button should be able to cancel the Modal",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "shouldUpdate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setInitialState",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['alternate', 'alternate-formatter']",
              "description": "Inherited from `IdsColorVariantMixin`",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "refreshProtoClasses",
              "description": "Refreshes this button's prototype CSS class",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Inner template contents",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "onHiddenChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "true if hidden"
                }
              ],
              "description": "Handles hidden attribute changes",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "setAriaText",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLButtonElement"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "cssClass",
              "parameters": [
                {
                  "description": "containing CSS classes that will be applied to the button\nStrings will be split into an array and separated by whitespace.",
                  "name": "val",
                  "type": {
                    "text": "Array<string>|string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Passes a disabled attribute from the custom element to the button",
              "parameters": [
                {
                  "description": "true if the button will be disabled",
                  "name": "val",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "#tabIndex",
              "privacy": "private",
              "description": "Passes a tabIndex attribute from the custom element to the button",
              "parameters": [
                {
                  "description": "the tabIndex value",
                  "name": "val",
                  "type": {
                    "text": "number | string | null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Gets the current icon used on the button",
              "parameters": [
                {
                  "description": "representing the icon to set",
                  "name": "val",
                  "type": {
                    "text": "string | undefined"
                  }
                }
              ],
              "type": {
                "text": "string | undefined | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "iconEl",
              "type": {
                "text": "HTMLElement | null"
              },
              "description": "Gets the current icon element",
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement | null"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "iconAlign",
              "description": "Sets the automatic alignment of an existing icon to the 'start' or 'end' of the text",
              "parameters": [
                {
                  "description": "automatic icon alignment setting, if applicable (defaults to undefined).",
                  "name": "val",
                  "type": {
                    "text": "IdsButtonIconAlignment"
                  }
                }
              ],
              "type": {
                "text": "IdsButtonIconAlignment"
              },
              "return": {
                "type": {
                  "text": "IdsButtonIconAlignment"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "string | null"
              },
              "description": "Set width of button",
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "parameters": [
                {
                  "description": "100%, 90px, 50rem etc.",
                  "name": "w",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "appendIcon",
              "parameters": [
                {
                  "name": "iconName",
                  "type": {
                    "text": "string"
                  },
                  "description": "The icon name to check"
                }
              ],
              "description": "Check if an icon exists, and adds the icon if it's missing",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeIcon",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Check if an icon exists, and removes the icon if it's present",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "setIconAlignment",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Adds/Removes Icon Alignment CSS classes to/from the inner button component.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasIncorrectStartElement",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasIncorrectEndElement",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "text",
              "parameters": [
                {
                  "description": "the text value",
                  "name": "val",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "type": {
                "text": "string | null"
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "appendText",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "New text contents"
                }
              ],
              "description": "Check if the text slot exists, and appends it if it's missing",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeText",
              "description": "Checks if the text slot exists, and removes it if necessary",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "appearance",
              "description": "Set the button appearance between 'default', 'primary', 'secondary', 'tertiary', or 'destructive'",
              "parameters": [
                {
                  "description": "a valid button \"appearance\"",
                  "name": "val",
                  "type": {
                    "text": "IdsButtonAppearance | null"
                  }
                }
              ],
              "type": {
                "text": "IdsButtonAppearance"
              },
              "return": {
                "type": {
                  "text": "IdsButtonAppearance"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Sets the HTMLButtonElement 'type' attribute",
              "type": {
                "text": "IdsButtonType"
              },
              "return": {
                "type": {
                  "text": "IdsButtonType"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "noMargins",
              "description": "Sets the no margins attribute",
              "parameters": [
                {
                  "description": "string value from the no margins attribute",
                  "name": "n",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "noPadding",
              "parameters": [
                {
                  "description": "true if the button should not have standard padding rules applied",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              },
              "return": {
                "type": {
                  "text": "boolean | string"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "square",
              "parameters": [
                {
                  "description": "whether the corners of the button as an icon-button should be angled/90°",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "setAppearanceClass",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string | null"
                  },
                  "description": "desired appearance class"
                }
              ],
              "description": "Sets the correct appearance class on the ShadowRoot button.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides the standard \"focus\" behavior to instead pass focus to the inner HTMLButton element.",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Implements callback from IdsColorVariantMixin used to\nupdate the color variant on children components",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            }
          ],
          "superclass": {
            "name": "IdsButton",
            "module": "/src/components/ids-button/ids-button"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsModalButton",
            "module": "src/components/ids-modal-button/ids-modal-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-month-view/ids-month-view-attribute-mixin.ts",
      "declarations": [
        {
          "kind": "mixin",
          "description": "A mixin that adds shared attribute setters/getters/callbacks related to IdsMonthView behaviors.",
          "name": "IdsMonthViewAttributeMixin",
          "members": [
            {
              "kind": "field",
              "name": "#disableSettings",
              "privacy": "private",
              "type": {
                "text": "IdsDisableSettings"
              },
              "default": "{\n    dates: [],\n    years: [],\n    minDate: '',\n    maxDate: '',\n    dayOfWeek: [],\n    isEnable: false\n  }"
            },
            {
              "kind": "field",
              "name": "#currentLegend",
              "privacy": "private",
              "type": {
                "text": "IdsLegendSettings"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "#rangeSettings",
              "privacy": "private",
              "type": {
                "text": "IdsRangeSettings"
              },
              "default": "{\n    start: null,\n    end: null,\n    separator: ' - ',\n    minDays: 0,\n    maxDays: 0,\n    selectForward: false,\n    selectBackward: false,\n    includeDisabled: false,\n    selectWeek: false\n  }"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "disableSettings",
              "type": {
                "text": "IdsDisableSettings"
              },
              "return": {
                "type": {
                  "text": "IdsDisableSettings"
                }
              },
              "description": "Set disable settings",
              "parameters": [
                {
                  "description": "settings to be assigned to default disable settings",
                  "name": "val",
                  "type": {
                    "text": "IdsDisableSettings"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "legend",
              "type": {
                "text": "IdsLegendSettings"
              },
              "return": {
                "type": {
                  "text": "IdsLegendSettings"
                }
              },
              "description": "Set array of legend items to month view component\nValidation of data is provided by the month view component",
              "parameters": [
                {
                  "description": "array of legend items",
                  "name": "val",
                  "type": {
                    "text": "IdsLegendSettings"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "getLegendByDate",
              "return": {
                "type": {
                  "text": "IdsLegend | undefined"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  },
                  "description": "to check if has any legend"
                }
              ],
              "description": "Find legend object by date provided"
            },
            {
              "kind": "field",
              "name": "rangeSettings",
              "type": {
                "text": "IdsRangeSettings"
              },
              "return": {
                "type": {
                  "text": "IdsRangeSettings"
                }
              },
              "description": "Set range selection settings",
              "parameters": [
                {
                  "description": "settings to be assigned to default range settings",
                  "name": "val",
                  "type": {
                    "text": "IdsRangeSettings"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "resetRangeSettings",
              "description": "Sets the `rangeSettings` object back to its original defaults"
            },
            {
              "kind": "field",
              "name": "useRange",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not the component should be a range picker",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "useRange param value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            }
          ],
          "parameters": [
            {
              "name": "superclass",
              "type": {
                "text": "any"
              },
              "description": "Accepts a superclass and creates a new subclass from it."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsMonthViewAttributeMixin",
            "module": "src/components/ids-month-view/ids-month-view-attribute-mixin.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-month-view/ids-month-view-common.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "MIN_MONTH",
          "type": {
            "text": "number"
          },
          "default": "0"
        },
        {
          "kind": "variable",
          "name": "MAX_MONTH",
          "type": {
            "text": "number"
          },
          "default": "11"
        },
        {
          "kind": "variable",
          "name": "WEEK_LENGTH",
          "type": {
            "text": "number"
          },
          "default": "7"
        },
        {
          "kind": "variable",
          "name": "BASE_Y_OFFSET",
          "type": {
            "text": "number"
          },
          "default": "35"
        },
        {
          "kind": "variable",
          "name": "MAX_EVENT_COUNT",
          "type": {
            "text": "number"
          },
          "default": "3"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "MIN_MONTH",
          "declaration": {
            "name": "MIN_MONTH",
            "module": "src/components/ids-month-view/ids-month-view-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "MAX_MONTH",
          "declaration": {
            "name": "MAX_MONTH",
            "module": "src/components/ids-month-view/ids-month-view-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "WEEK_LENGTH",
          "declaration": {
            "name": "WEEK_LENGTH",
            "module": "src/components/ids-month-view/ids-month-view-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "BASE_Y_OFFSET",
          "declaration": {
            "name": "BASE_Y_OFFSET",
            "module": "src/components/ids-month-view/ids-month-view-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "MAX_EVENT_COUNT",
          "declaration": {
            "name": "MAX_EVENT_COUNT",
            "module": "src/components/ids-month-view/ids-month-view-common.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-month-view/ids-month-view.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Month View Component",
          "name": "IdsMonthView",
          "cssParts": [
            {
              "description": "the container of the component",
              "name": "container"
            },
            {
              "description": "the container of the calendar table",
              "name": "table-container"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#isCustom",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "description": "Establish internal event handlers",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "onLanguageChange"
            },
            {
              "kind": "field",
              "name": "onLocaleChange"
            },
            {
              "kind": "method",
              "name": "#attachKeyboardListeners",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Establish Internal Keyboard shortcuts"
            },
            {
              "kind": "method",
              "name": "#renderLegend",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Add/remove legend HTML to the container"
            },
            {
              "kind": "method",
              "name": "changeDate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "string"
                  },
                  "description": "of event to be called"
                },
                {
                  "name": "limitMonth",
                  "default": "false",
                  "description": "date changing is limited only to the current month",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Change month/year/day by event type"
            },
            {
              "kind": "method",
              "name": "#daySelectClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "The element."
                }
              ],
              "description": "Day cell clicked"
            },
            {
              "kind": "method",
              "name": "#setRangeSelection",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "year",
                  "type": {
                    "text": "number"
                  },
                  "description": "to add to the range selection"
                },
                {
                  "name": "month",
                  "type": {
                    "text": "number"
                  },
                  "description": "to add to the range selection"
                },
                {
                  "name": "day",
                  "type": {
                    "text": "number"
                  },
                  "description": "to add to the range selection"
                }
              ],
              "description": "Add given year, month, day to the range selection"
            },
            {
              "kind": "method",
              "name": "#clearRangeClasses",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Helper to clear range selection CSS classes"
            },
            {
              "kind": "method",
              "name": "#renderRangeSelection",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Add CSS classes and selected attrs to tables cells when range selection is completed"
            },
            {
              "kind": "method",
              "name": "#isRangeByDate",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  },
                  "description": "to check if is in range selection"
                }
              ],
              "description": "Helper to check if date is in the range selection"
            },
            {
              "kind": "method",
              "name": "#rangeSelectWeek",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "year",
                  "type": {
                    "text": "string|number"
                  },
                  "description": "to add to the range selection"
                },
                {
                  "name": "month",
                  "type": {
                    "text": "string|number"
                  },
                  "description": "to add to the range selection"
                },
                {
                  "name": "day",
                  "type": {
                    "text": "string|number"
                  },
                  "description": "to add to the range selection"
                }
              ],
              "description": "Helper to handle week selection"
            },
            {
              "kind": "method",
              "name": "#rangePropagation",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "year",
                  "type": {
                    "text": "string|number"
                  },
                  "description": "to add to the range selection"
                },
                {
                  "name": "month",
                  "type": {
                    "text": "string|number"
                  },
                  "description": "to add to the range selection"
                },
                {
                  "name": "day",
                  "type": {
                    "text": "string|number"
                  },
                  "description": "to add to the range selection"
                }
              ],
              "description": "Add CSS classes to table cells when range selection is in progress\nStarting from the range settings start"
            },
            {
              "kind": "method",
              "name": "isDisabledByDate",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  },
                  "description": "to check"
                }
              ],
              "description": "Defines if a date is in disabled settings"
            },
            {
              "kind": "method",
              "name": "#monthInDayFormat",
              "return": {
                "type": {
                  "text": "string|undefined"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  },
                  "description": "date to check"
                },
                {
                  "name": "rangeStartsOn",
                  "type": {
                    "text": "Date"
                  },
                  "description": "very first day of the display range"
                }
              ],
              "description": "Helper to get month format for first day of a month or first day of the display range"
            },
            {
              "kind": "method",
              "name": "#getCellTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "weekIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "number of week in month starting from 0"
                }
              ],
              "description": "Table cell HTML template with locale, data attributes"
            },
            {
              "kind": "method",
              "name": "#renderWeekDays",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Add week days HTML to the table"
            },
            {
              "kind": "method",
              "name": "#renderMonth",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Add month HTML to the table"
            },
            {
              "kind": "method",
              "name": "getActiveDayEvents",
              "return": {
                "type": {
                  "text": "CalendarEventData[]"
                }
              },
              "description": "Gets calendar events within the selected/active day"
            },
            {
              "kind": "method",
              "name": "#triggerSelectedEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Trigger selected event with current params"
            },
            {
              "kind": "method",
              "name": "selectDay",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "year",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "a given year"
                },
                {
                  "name": "month",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "a given month"
                },
                {
                  "name": "day",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "a given day"
                }
              ],
              "description": "Add selectable attribute to active day"
            },
            {
              "kind": "method",
              "name": "#makeSelected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "elem",
                  "type": {
                    "text": "HTMLTableCellElement"
                  },
                  "description": "the element to make appear \"selected\""
                }
              ],
              "description": "Makes a specified day in the Month View table appear \"selected\""
            },
            {
              "kind": "method",
              "name": "#makeDeselected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "elem",
                  "type": {
                    "text": "HTMLTableCellElement"
                  },
                  "description": "the element to make appear \"selected\""
                }
              ],
              "description": "Makes a specified day in the Month View table appear \"selected\""
            },
            {
              "kind": "method",
              "name": "#makeAllDeselected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Clears all previously-selected days from the Month View"
            },
            {
              "kind": "method",
              "name": "#isDisplayRange",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Whether or not it should show range of dates instead of one month view"
            },
            {
              "kind": "method",
              "name": "#getDayInMonth",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "day",
                  "type": {
                    "text": "number"
                  },
                  "description": "to check"
                }
              ],
              "description": "Helper to check if the month has a day"
            },
            {
              "kind": "method",
              "name": "#colorToVar",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Iterate legend items with color data and add color css variable"
            },
            {
              "kind": "method",
              "name": "getSelectedDay",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "description": "Queries selected day cell element"
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Focuses the active/selected day"
            },
            {
              "kind": "method",
              "name": "onFirstDayOfWeekChange",
              "description": "Inherited from `IdsDateAttributeMixin`",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onMonthChange",
              "description": "Inherited from `IdsDateAttributeMixin`",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onYearChange",
              "description": "Inherited from `IdsDateAttributeMixin`",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onDayChange",
              "parameters": [
                {
                  "name": "numberVal",
                  "type": {
                    "text": "number"
                  },
                  "description": "new value"
                },
                {
                  "name": "validates",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if the new value passed is valid"
                }
              ],
              "description": "Inherited from `IdsDateAttributeMixin`",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "startDate",
              "type": {
                "text": "Date | null"
              },
              "description": "Set start of the range to show",
              "return": {
                "type": {
                  "text": "Date | null"
                }
              },
              "parameters": [
                {
                  "description": "startDate param value",
                  "name": "val",
                  "type": {
                    "text": "string | Date | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "endDate",
              "type": {
                "text": "Date | null"
              },
              "description": "Set end of the range to show",
              "return": {
                "type": {
                  "text": "Date|null"
                }
              },
              "parameters": [
                {
                  "description": "endDate param value",
                  "name": "val",
                  "type": {
                    "text": "Date | string | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "compact",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not the component should be compact view",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "compact param value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showWeekNumbers",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "isDatePicker",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not the component is used in datepicker popup",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "compact param value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onDisableSettingsChange"
            },
            {
              "kind": "method",
              "name": "onLegendSettingsChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "IdsLegendSettings"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onRangeSettingsChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "IdsRangeSettings"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onUseRangeChange",
              "parameters": [
                {
                  "name": "newValue",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showPicklistYear",
              "type": {
                "text": "boolean"
              },
              "description": "Whether or not to show a list of years in the toolbar datepicker picklist",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "value to be set as show-picklist-year attribute converted to boolean",
                  "name": "val",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showPicklistMonth",
              "type": {
                "text": "boolean"
              },
              "description": "Whether or not to show a list of months in the toolbar datepicker picklist",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "value to be set as show-picklist-month attribute converted to boolean",
                  "name": "val",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showPicklistWeek",
              "type": {
                "text": "boolean"
              },
              "description": "Whether or not to show week numbers in the toolbar datepicker picklist",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "value to be set as show-picklist-week attribute converted to boolean",
                  "name": "val",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "removeAllEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Remove month view calendar events and overflow elements"
            },
            {
              "kind": "method",
              "name": "#groupEventsByDay",
              "return": {
                "type": {
                  "text": "Record<string, Array<CalendarEventData>>"
                }
              },
              "parameters": [
                {
                  "name": "events",
                  "type": {
                    "text": "CalendarEventData[]"
                  },
                  "description": "calendar events data"
                }
              ],
              "description": "Groups calendar events by day using dateKey as key"
            },
            {
              "kind": "method",
              "name": "filterEventsByMonth",
              "return": {
                "type": {
                  "text": "CalendarEventData[]"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "default": "[]",
                  "type": {
                    "text": "CalendarEventData[]"
                  },
                  "description": "calendar events data"
                }
              ],
              "description": "Filter calendar events data by current month"
            },
            {
              "kind": "method",
              "name": "renderEventsData",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "parameters": [
                {
                  "name": "forceRender",
                  "default": "false",
                  "description": "skip data fetch",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Render Calendar Events data inside month view"
            },
            {
              "kind": "method",
              "name": "#countDays",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "start",
                  "type": {
                    "text": "Date"
                  },
                  "description": "start date"
                },
                {
                  "name": "end",
                  "type": {
                    "text": "Date"
                  },
                  "description": "end date"
                }
              ],
              "description": "Counts number of days for calendar events"
            },
            {
              "kind": "method",
              "name": "#renderDayEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "dateKey",
                  "type": {
                    "text": "string"
                  },
                  "description": "generated date key"
                },
                {
                  "name": "events",
                  "type": {
                    "text": "CalendarEventData[]"
                  },
                  "description": "calendar events"
                },
                {
                  "name": "customCalendarEvent",
                  "optional": true,
                  "type": {
                    "text": "any"
                  },
                  "description": "custom calendar events"
                }
              ],
              "description": "Renders calendar events within corresponding date's table cell"
            },
            {
              "kind": "method",
              "name": "#renderEventsOverflow",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "eventsContainer",
                  "type": {
                    "text": "Element"
                  },
                  "description": "date specific event container elemeent"
                },
                {
                  "name": "dateKey",
                  "type": {
                    "text": "string"
                  },
                  "description": "generated date key"
                }
              ],
              "description": "Renders clickable event overflow element\nSpecifies number of calendar events overflowing the container"
            },
            {
              "kind": "method",
              "name": "#newCalendarEvent",
              "return": {
                "type": {
                  "text": "IdsCalendarEvent"
                }
              },
              "parameters": [
                {
                  "name": "customCalendarEvent",
                  "optional": true,
                  "type": {
                    "text": "IdsCalendarEvent"
                  },
                  "description": "optional custom event to use instead of default"
                }
              ],
              "description": "Generates new IdsCalendarEvent"
            },
            {
              "kind": "method",
              "name": "selectDayFromValue",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "string representation of a date"
                }
              ],
              "description": "Selects the Month View's current day from a stringified date"
            },
            {
              "kind": "field",
              "name": "onDayRender",
              "privacy": "public",
              "description": "Function that fires as the day cell is rendered.",
              "return": {
                "type": {
                  "text": "Function"
                }
              }
            },
            {
              "kind": "method",
              "name": "generateYOffset",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "IdsCalendarEvent"
                  },
                  "description": "IdsCalendarEvent"
                }
              ],
              "description": "Calculates the event Y_OFFSET value to set the event pill top position"
            },
            {
              "kind": "method",
              "name": "isEventOverflowing",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "IdsCalendarEvent"
                  },
                  "description": "IdsCalendarEvent"
                }
              ],
              "description": "Checks if the event pills exceed the MAX_EVENT_COUNT in a day cell"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-month-view/ids-month-view.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsMonthView",
            "module": "src/components/ids-month-view/ids-month-view.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-multiselect/ids-multiselect.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Multiselect Component",
          "name": "IdsMultiselect",
          "cssParts": [
            {
              "description": "the container element",
              "name": "container"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "#selectedList",
              "privacy": "private",
              "type": {
                "text": "Array<string>"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "#optionsData",
              "privacy": "private",
              "type": {
                "text": "IdsDropdownOptions"
              },
              "default": "[]",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters and setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Gets the value of the disabled property",
              "parameters": [
                {
                  "description": "string value from the disabled attribute",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "tags",
              "description": "returns whether the multiselect is set to display selections as tags",
              "parameters": [
                {
                  "description": "string or boolean that sets the use of tag attribute",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "max",
              "description": "returns the maximum number of allowed selections",
              "parameters": [
                {
                  "description": "the max number of selections allowed",
                  "name": "value",
                  "type": {
                    "text": "string|number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "returns an array of the values that have been selected",
              "parameters": [
                {
                  "description": "the array of values to set as selected",
                  "name": "value",
                  "type": {
                    "text": "Array"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "attachClickEvent",
              "description": "Rewriting dropdown click events",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "attachKeyboardSelectionEvent",
              "description": "Establish selection event for keyboard interactions.\nOverrides a similiar method from IdsDropdown for Multiselect-specific behavior.",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "close",
              "parameters": [
                {
                  "name": "noFocus",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "if true do not focus on close"
                }
              ],
              "description": "Close the dropdown popup\nRewriting it to add multiselect value update",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "#handleTagRemove",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "click event"
                }
              ],
              "description": "Triggers when dismissible tag is removed"
            },
            {
              "kind": "method",
              "name": "#optionChecked",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "selected ids-list-box-option element"
                }
              ],
              "description": "Check option checkbox and update selected list"
            },
            {
              "kind": "method",
              "name": "#updateDisplay",
              "description": "Update value in the input visually"
            },
            {
              "kind": "method",
              "name": "#updateList",
              "description": "Render dropdown list with selected options on top"
            },
            {
              "kind": "method",
              "name": "#templatelistBoxOption",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "IdsDropdownOption"
                  },
                  "description": "id, value, label object"
                }
              ],
              "description": "Create the list box option template.",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "#populateSelected",
              "description": "Update options list on the component mount with classes/attributes"
            },
            {
              "kind": "method",
              "name": "#setOptionsData",
              "description": "Map slotted ids-list-box-option elements to the dataset",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "isFormComponent",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "hasIcons",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "dropdownList",
              "type": {
                "text": "IdsDropdownList | null | undefined"
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "IdsTriggerButton | null | undefined"
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "listBox",
              "type": {
                "text": "IdsListBox | null | undefined"
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelClicked",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelEl",
              "type": {
                "text": "HTMLLabelElement | null | undefined"
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "openedByKeyboard",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets to true when a keyboard operation opens the dropdown (prevents extraneous event triggering)",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "closedByKeyboard",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Sets to true when a keyboard operation closes the dropdown (prevents extraneous event triggering)",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "#isMultiSelect",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "Array<string>"
              },
              "default": "['alternate-formatter', 'borderless', 'in-cell']",
              "description": "List of available color variants for this component",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Push color variant to the container element",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "onLabelChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "onLabelStateChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Push label-state to the container element",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "onLabelRequiredChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "onFieldHeightChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "the new field height setting"
                }
              ],
              "description": "Push field-height/compact to the container element",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateDropdownList",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "#addAria",
              "description": "Add internal aria attributes",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "popup",
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedOption",
              "type": {
                "text": "HTMLElement | null"
              },
              "description": "Returns the selected Listbox option based on the Dropdown's value.",
              "return": {
                "type": {
                  "text": "HTMLElement| null"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "HTMLElement | null"
              },
              "description": "Returns the currently-selected Listbox option\n(may be different from the Dropdown's value because of user input)",
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement|null"
                }
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "selectedIndex",
              "description": "Set the selected option by index",
              "parameters": [
                {
                  "description": "the index to use",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "options",
              "description": "Returns the currently available options",
              "return": {
                "type": {
                  "text": "Array<IdsListBoxOption>"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "description": "Sets the readonly attribute",
              "parameters": [
                {
                  "description": "string value from the readonly attribute",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "onAllowBlankChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectOption",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "the option to select"
                }
              ],
              "description": "Set the aria and state on the element",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "deselectOption",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "element to remove attributes"
                }
              ],
              "description": "Removes selected attributes from an option",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectIcon",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "the option to select"
                }
              ],
              "description": "Set the icon to be visible (if used)",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "selectTooltip",
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "the option to select"
                }
              ],
              "description": "Set the tooltip to be visible for the selected option",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "clearSelected",
              "description": "Remove the aria and state from the currently selected element",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "configurePopup",
              "description": "Configures the Dropdown component's attached IdsDropdownList/IdsPopup",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "open",
              "parameters": [
                {
                  "name": "shouldSelect",
                  "default": "false",
                  "description": "whether or not the input text should be selected",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Open the dropdown list",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "loadDataSet",
              "parameters": [
                {
                  "name": "dataset",
                  "type": {
                    "text": "IdsDropdownOptions"
                  },
                  "description": "The dataset to use with value, label ect..."
                }
              ],
              "description": "Populate the DOM with the dataset",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "beforeShow",
              "description": "An async function that fires as the dropdown is opening allowing you to set contents.",
              "parameters": [
                {
                  "description": "The async function",
                  "name": "func",
                  "type": {
                    "text": "Function"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "shouldSelect",
                  "default": "false",
                  "description": "whether or not the input text should be selected",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Toggle the dropdown list open/closed state",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "description": "Establish Internal Event Handlers",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "attachKeyboardOpenEvent",
              "privacy": "private",
              "description": "Attach a keyboard event for Enter/Spacebar that opens the dropdown.\nThis needs to happen separately from the other event handlers because this\none is rebound every time the list is closed.",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "onLanguageChange",
              "description": "Handle the Locale Change",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "attachOpenEvents",
              "privacy": "private",
              "description": "Connects interaction events that should only be present when the\ndropdown list is open",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeOpenEvents",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "#attachKeyboardListeners",
              "description": "Establish Internal Keyboard shortcuts",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "#typeAhead",
              "parameters": [
                {
                  "name": "text",
                  "type": {
                    "text": "string"
                  },
                  "description": "keydownend event detail keys"
                }
              ],
              "description": "Handle typeahead functionality",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "#selectMatch",
              "parameters": [
                {
                  "name": "input",
                  "type": {
                    "text": "string"
                  },
                  "description": "the text to find by"
                }
              ],
              "description": "Find and select the only option by input text provided",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "#triggerIconChange",
              "parameters": [
                {
                  "name": "icon",
                  "type": {
                    "text": "string"
                  },
                  "description": "ids-icon icon value"
                }
              ],
              "description": "Helper to replace trigger button icon",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "#selectFirstOption",
              "description": "Select first no blank with value option",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "#getGroupIndex",
              "parameters": [
                {
                  "name": "groupLabels",
                  "type": {
                    "text": "Array<number>"
                  },
                  "description": "group label indexes in the options list"
                },
                {
                  "name": "optionIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "option index in the options list"
                }
              ],
              "description": "Helper to get group index for given option index in the options list",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "#getGroupLabelOption",
              "return": {
                "type": {
                  "text": "IdsDropdownOption | undefined"
                }
              },
              "parameters": [
                {
                  "name": "optionIndex",
                  "type": {
                    "text": "number"
                  },
                  "description": "option index in the options list"
                }
              ],
              "description": "Helper to get group option for given option index in the options list",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "#findMatches",
              "return": {
                "type": {
                  "text": "IdsDropdownOptions"
                }
              },
              "parameters": [
                {
                  "name": "inputValue",
                  "type": {
                    "text": "string"
                  },
                  "description": "value of the input field"
                }
              ],
              "description": "Find matches between the input value and the dataset",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "#sanitizeOption",
              "return": {
                "type": {
                  "text": "IdsDropdownOption"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "type": {
                    "text": "IdsDropdownOption"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "validate",
              "description": "Pass down `validate` attribute into IdsTriggerField",
              "parameters": [
                {
                  "description": "The `validate` attribute",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "validationEvents",
              "description": "Pass down `validation-events` attribute into IdsTriggerField",
              "parameters": [
                {
                  "description": "The `validation-events` attribute",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "configureDropdownList",
              "privacy": "private",
              "description": "Configures the connected Dropdown list component",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "list",
              "description": "Defines the existence of an external IdsDropdownList component, and connects this IdsDropdown\nto the component via events.",
              "parameters": [
                {
                  "description": "ID attribute name",
                  "name": "val",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "noMargins",
              "description": "Sets the no margins attribute",
              "parameters": [
                {
                  "description": "The value for no margins attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "onSizeChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "typeahead",
              "description": "Get the typeahead attribute",
              "parameters": [
                {
                  "description": "typeahead value",
                  "name": "value",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "onClearableTextChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Get the placeholder attribute",
              "parameters": [
                {
                  "description": "the placeholder's text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Pass focus internally",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "showLoadingIndicator",
              "description": "show-loading-indicator attribute",
              "parameters": [
                {
                  "description": "show-loading-indicator attribute value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string|null"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "object"
              },
              "default": "{ selectedIndex: 0 }",
              "inheritedFrom": {
                "name": "IdsDropdown",
                "module": "src/components/ids-dropdown/ids-dropdown.ts"
              }
            }
          ],
          "superclass": {
            "name": "IdsDropdown",
            "module": "/src/components/ids-dropdown/ids-dropdown"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsMultiselect",
            "module": "src/components/ids-multiselect/ids-multiselect.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-notification-banner/ids-notification-attributes.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "TYPES",
          "type": {
            "text": "any"
          },
          "default": "{\n  success: {\n    type: 'success'\n  },\n  warning: {\n    type: 'warning'\n  },\n  caution: {\n    type: 'caution'\n  },\n  info: {\n    type: 'info',\n  },\n  error: {\n    type: 'error'\n  }\n}"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "TYPES",
          "declaration": {
            "name": "TYPES",
            "module": "src/components/ids-notification-banner/ids-notification-attributes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-notification-banner/ids-notification-banner.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Notification Banner",
          "name": "IdsNotificationBanner",
          "cssParts": [
            {
              "description": "the notification banner element",
              "name": "container"
            },
            {
              "description": "the message inside the container element",
              "name": "message"
            },
            {
              "description": "the link inside the container element",
              "name": "link"
            },
            {
              "description": "the close button inside the container element",
              "name": "button"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<any>"
              },
              "static": true,
              "description": "Return the properties we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Set the type of the Notification Banner",
              "parameters": [
                {
                  "description": "the type value\nsuccess, alert, info, error",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "link",
              "description": "Set the link inside the Notification Banner",
              "parameters": [
                {
                  "description": "the link value",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "linkText",
              "description": "Set the custom link text of the Notification Banner",
              "parameters": [
                {
                  "description": "the link-text value",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "messageText",
              "description": "Set the message text of the Notification Banner",
              "parameters": [
                {
                  "description": "the link-text value",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Establish Internal Event Handlers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachKeyboardListeners",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Establish Internal Keyboard shortcuts",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "add",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "notification",
                  "type": {
                    "text": "object"
                  },
                  "description": "Object passed in for notification creation"
                }
              ],
              "description": "Shows a notification banner dynamically"
            },
            {
              "kind": "method",
              "name": "dismiss",
              "description": "Remove the notification from the page"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-notification-banner/ids-notification-banner.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsNotificationBanner",
            "module": "src/components/ids-notification-banner/ids-notification-banner.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-pager/ids-pager-attributes.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "buttonTypes",
          "type": {
            "text": "array"
          },
          "default": "['first', 'last', 'next', 'previous']"
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "buttonTypes",
          "declaration": {
            "name": "buttonTypes",
            "module": "src/components/ids-pager/ids-pager-attributes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-pager/ids-pager-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS PagerButton Component",
          "name": "IdsPagerButton",
          "cssParts": [
            {
              "description": "the `ids-button` component",
              "name": "button"
            },
            {
              "description": "the `ids-icon` component",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "DEFAULT_PAGE_SIZE",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "10"
            },
            {
              "kind": "field",
              "name": "rootNode",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "IdsButton | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "type": {
                "text": "IdsIcon | null | undefined"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "pager",
              "type": {
                "text": "IdsPager"
              },
              "description": "Reference to the pager parent",
              "return": {
                "type": {
                  "text": "IdsPager"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "pageCount",
              "type": {
                "text": "number | null"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "first",
              "parameters": [
                {
                  "description": "designates this as a nav to first page button",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "last",
              "parameters": [
                {
                  "description": "designates this as a nav to last page button",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "next",
              "parameters": [
                {
                  "description": "A flag which designates this as a nav to next page button",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "previous",
              "parameters": [
                {
                  "description": "A flag which designates this as a nav to previous\npage button",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean | string"
              },
              "return": {
                "type": {
                  "text": "boolean|string"
                }
              },
              "parameters": [
                {
                  "description": "A whether to disable input at app-specified-level",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "type",
              "type": {
                "text": "undefined | string"
              },
              "return": {
                "type": {
                  "text": "string|undefined"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "total",
              "parameters": [
                {
                  "description": "The number of items to track",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "navDisabled",
              "parameters": [
                {
                  "description": "A flag indicating whether button is disabled\nfor nav reasons",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ],
              "type": {
                "text": "string | boolean"
              },
              "return": {
                "type": {
                  "text": "string|boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "parentDisabled",
              "parameters": [
                {
                  "description": "A flag indicating if button is disabled\nthrough parent pager's disabled attribute",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ],
              "type": {
                "text": "string | boolean"
              },
              "return": {
                "type": {
                  "text": "string|boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "pageNumber",
              "parameters": [
                {
                  "description": "A 1-based page number shown",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "pageSize",
              "parameters": [
                {
                  "description": "The number of items shown per page",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "#validPageSize",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "number | string | null"
                  },
                  "description": "The value"
                }
              ],
              "description": "Check given page size value, if not a number return default",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Set the aria label text",
              "parameters": [
                {
                  "description": "The label text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#triggerPageNumberChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "source",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#onClick",
              "description": "Handles click functionality dependent on whether this\nbutton is disabled and the type of button it is set to;\nwill bubble up an appropriate event to parent ids-pager\nin order to update the page-number value via\n'pagenumberchange' if applicable"
            },
            {
              "kind": "method",
              "name": "#setTypeAttribute",
              "parameters": [
                {
                  "name": "attribute",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string | boolean"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#updateNavDisabled",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates nav-disabled attribute based\non page number, size and total to\nprevent nav actions/disable the component\nbased on these factors"
            },
            {
              "kind": "method",
              "name": "#updateDisabledState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Update visible button disabled state\ndependent on current page nav and\nuser-provided disabled state"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-pager/ids-pager-button.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsPagerButton",
            "module": "src/components/ids-pager/ids-pager-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-pager/ids-pager-dropdown.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Pager Component",
          "name": "IdsPagerDropdown",
          "cssParts": [
            {
              "description": "the overall ids-pager-dropdown container",
              "name": "container"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "rootNode",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "DEFAULT_PAGE_SIZE",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "10"
            },
            {
              "kind": "field",
              "name": "pager",
              "type": {
                "text": "IdsPager"
              },
              "description": "Reference to the pager parent",
              "return": {
                "type": {
                  "text": "IdsPager"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "menuButton",
              "type": {
                "text": "any"
              },
              "description": "Reference to ids-menu-button#pager-size-menu-button",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "popupMenu",
              "type": {
                "text": "any"
              },
              "description": "Reference to ids-popup-menu#pager-size-menu",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#itemsTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "pageSize",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "The page size value"
                }
              ],
              "description": "Get items template",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Get the label for the pager-dropdown button",
              "parameters": [
                {
                  "description": "the pager-dropdown's button label",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "pageSize",
              "description": "Get the page-size attribute",
              "parameters": [
                {
                  "description": "new the page-size",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "#validPageSize",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "number | string | null"
                  },
                  "description": "The value"
                }
              ],
              "description": "Check given page size value, if not a number return default",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventListeners"
            }
          ],
          "mixins": [
            {
              "name": "IdsEventsMixin",
              "module": "/src/mixins/ids-events-mixin/ids-events-mixin"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsPagerDropdown",
            "module": "src/components/ids-pager/ids-pager-dropdown.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-pager/ids-pager-input.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS PagerInput Component",
          "name": "IdsPagerInput",
          "cssParts": [
            {
              "description": "ids-pager-button container",
              "name": "container"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "DEFAULT_PAGE_SIZE",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "10"
            },
            {
              "kind": "field",
              "name": "rootNode",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "IdsInput | null | undefined"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#inputChanged",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "Track and use to prvent multiple input change events"
            },
            {
              "kind": "field",
              "name": "pager",
              "type": {
                "text": "IdsPager"
              },
              "description": "Reference to the pager parent",
              "return": {
                "type": {
                  "text": "IdsPager"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "pageSize",
              "parameters": [
                {
                  "description": "The number of items to show per page",
                  "name": "value",
                  "type": {
                    "text": "string|number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "#validPageSize",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "number | string | null"
                  },
                  "description": "The value"
                }
              ],
              "description": "Check given page size value, if not a number return default",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "pageNumber",
              "parameters": [
                {
                  "description": "A 1-based page number shown",
                  "name": "value",
                  "type": {
                    "text": "string|number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "total",
              "parameters": [
                {
                  "description": "The number of items to track",
                  "name": "value",
                  "type": {
                    "text": "string|number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "pageCount",
              "type": {
                "text": "number | null"
              },
              "return": {
                "type": {
                  "text": "number|null"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "parameters": [
                {
                  "description": "Whether or not to disable input at app-specified-level",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              },
              "return": {
                "type": {
                  "text": "string|boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "parentDisabled",
              "parameters": [
                {
                  "description": "A flag indicating if the input is disabled\nthrough parent pager's disabled attribute",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              },
              "return": {
                "type": {
                  "text": "string|boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabledOverall",
              "type": {
                "text": "boolean | string"
              },
              "return": {
                "type": {
                  "text": "string|boolean"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#handleInputChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle innput change",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#updatePageCountShown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates text found in page-count within ids-text span"
            },
            {
              "kind": "method",
              "name": "#updateDisabledState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Update visible button disabled state\nbased on parentDisabled and disabled attribs"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-pager/ids-pager-input.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsPagerInput",
            "module": "src/components/ids-pager/ids-pager-input.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-pager/ids-pager-number-list.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS PagerNumberList Component",
          "name": "IdsPagerNumberList",
          "cssParts": [
            {
              "description": "selectable number among the list",
              "name": "number"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "DEFAULT_STEP",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "3"
            },
            {
              "kind": "field",
              "name": "DEFAULT_PAGE_SIZE",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "10"
            },
            {
              "kind": "field",
              "name": "rootNode",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "pager",
              "type": {
                "text": "IdsPager"
              },
              "description": "Reference to the pager parent",
              "return": {
                "type": {
                  "text": "IdsPager"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "pageSize",
              "parameters": [
                {
                  "description": "The number of items shown per page",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "#validPageSize",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "number | string | null"
                  },
                  "description": "The value"
                }
              ],
              "description": "Check given page size value, if not a number return default",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "pageNumber",
              "parameters": [
                {
                  "description": "A value 1-based page number shown",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "total",
              "parameters": [
                {
                  "description": "The number of items to track",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "string|number"
                }
              }
            },
            {
              "kind": "field",
              "name": "pageCount",
              "type": {
                "text": "number | null"
              },
              "return": {
                "type": {
                  "text": "number|null"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "parameters": [
                {
                  "description": "Whether to disable input at app-specified-level",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              },
              "return": {
                "type": {
                  "text": "boolean | string"
                }
              }
            },
            {
              "kind": "field",
              "name": "parentDisabled",
              "parameters": [
                {
                  "description": "A flag indicating if button is disabled through parent pager's\ndisabled attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              },
              "return": {
                "type": {
                  "text": "string|boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabledOverall",
              "type": {
                "text": "boolean | string"
              },
              "return": {
                "type": {
                  "text": "string|boolean"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Set the aria label text",
              "parameters": [
                {
                  "description": "The label text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "step",
              "description": "Set the number of step for page number list",
              "parameters": [
                {
                  "description": "The number of steps",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "#updateDisabledState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "update visible button disabled state\nbased on parentDisabled and disabled attribs"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Establish Internal Event Handlers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachAria",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#populatePageNumberButtons",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-pager/ids-pager-number-list.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsPagerNumberList",
            "module": "src/components/ids-pager/ids-pager-number-list.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-pager/ids-pager.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Pager Component",
          "name": "IdsPager",
          "cssParts": [
            {
              "description": "the overall ids-pager container",
              "name": "container"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "DEFAULT_STEP",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "3"
            },
            {
              "kind": "field",
              "name": "DEFAULT_PAGE_SIZE",
              "type": {
                "text": "number"
              },
              "readonly": true,
              "default": "10"
            },
            {
              "kind": "field",
              "name": "elements",
              "type": {
                "text": "any"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "templatePagerButtons",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "templatePagerList",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Set the pager template for listview"
            },
            {
              "kind": "method",
              "name": "#syncChildren",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "attribute",
                  "type": {
                    "text": "string"
                  },
                  "description": "attribute to sync"
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "value to sync"
                }
              ],
              "description": "Sync children with the given attribute",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "disabled",
              "parameters": [
                {
                  "description": "Whether or not to disable the pager overall",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "pageSize",
              "parameters": [
                {
                  "description": "The number of items shown per page",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "#validPageSize",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "number | string | null"
                  },
                  "description": "The value"
                }
              ],
              "description": "Check given page size value, if not a number return default",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "pageNumber",
              "parameters": [
                {
                  "description": "A 1-based index for the page number displayed",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "pageCount",
              "type": {
                "text": "number | null"
              },
              "return": {
                "type": {
                  "text": "number|null"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "step",
              "description": "Set the number of step for page number list",
              "parameters": [
                {
                  "description": "The number of steps",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ],
              "type": {
                "text": "number | string"
              },
              "return": {
                "type": {
                  "text": "number|string"
                }
              }
            },
            {
              "kind": "field",
              "name": "total",
              "parameters": [
                {
                  "description": "The number of items to track",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "type",
              "parameters": [
                {
                  "description": "The number of items to track",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "'buttons' | 'list'"
              },
              "return": {
                "type": {
                  "text": "'buttons' | 'list'"
                }
              }
            },
            {
              "kind": "method",
              "name": "sync",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "this",
                  "type": {
                    "text": "object"
                  },
                  "description": "The related component reference"
                }
              ],
              "description": "Sync to refresh, must be called with related component reference as: `this.pager?.sync?.apply(this)`"
            },
            {
              "kind": "method",
              "name": "#keepPageNumberInBounds",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "IdsEventsMixin",
              "module": "/src/mixins/ids-events-mixin/ids-events-mixin"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsPager",
            "module": "src/components/ids-pager/ids-pager.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-picker-popup/ids-picker-popup-common.ts",
      "declarations": [
        {
          "kind": "function",
          "name": "onPickerPopupXYSwitch",
          "parameters": [
            {
              "name": "results",
              "type": {
                "text": "IdsPopupXYSwitchResult"
              },
              "description": "contains settings related to the x/y adjustment."
            }
          ],
          "description": "Runs on the Picker Popup's `onXYSwitch` callback, and makes minor\ncorrections to IdsPopup placement to account for IdsInput/IdsTriggerField labels,\nwhich aren't symmetrical for placement purposes.",
          "return": {
            "type": {
              "text": "IdsPopupXYSwitchResult"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "onPickerPopupXYSwitch",
          "declaration": {
            "name": "onPickerPopupXYSwitch",
            "module": "src/components/ids-picker-popup/ids-picker-popup-common.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-picker-popup/ids-picker-popup.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "",
          "name": "IdsPickerPopup",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "Array<string>"
              },
              "default": "['beforeshow']",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "field",
              "name": "visible",
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "onHide",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "doFocus",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "if true, instructs the listening component that focus should change to a different element"
                }
              ],
              "description": "Hides this menu and any of its submenus."
            },
            {
              "kind": "method",
              "name": "onShow",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "show",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "toggleVisibility",
              "description": "Toggles visibility of the popup on/off depending on its current state",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onOutsideClick",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onTriggerClick",
              "parameters": [
                {
                  "name": "_",
                  "type": {
                    "text": "Event"
                  },
                  "description": "the original click event"
                }
              ],
              "description": "Inherited from `IdsPopupInteractionsMixin`"
            },
            {
              "kind": "method",
              "name": "onTriggerImmediate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Inherited from the Popup Interactions Mixin.\nRuns as soon as the Popup is connected to the DOM."
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-picker-popup/ids-picker-popup.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsPickerPopup",
            "module": "src/components/ids-picker-popup/ids-picker-popup.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-pie-chart/ids-pie-chart.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Pie Chart Component",
          "name": "IdsPieChart",
          "cssParts": [
            {
              "description": "the outside container element",
              "name": "container"
            },
            {
              "description": "the svg outer element",
              "name": "chart"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "initialized",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "svg",
              "type": {
                "text": "SVGElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "svgContainer",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "emptyMessage",
              "type": {
                "text": "IdsEmptyMessage | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "legend",
              "type": {
                "text": "HTMLSlotElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "percents",
              "type": {
                "text": "PercentData[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "totals",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "datasource",
              "default": "new IdsDataSource()",
              "description": "Reference to datasource API"
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "array"
              },
              "default": "[\n    'beforeselected',\n    'beforedeselected'\n  ]",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "onSelectableChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "On selectable change"
            },
            {
              "kind": "method",
              "name": "redraw",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Invoked when redrawing the chart",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes handled as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the template chart"
            },
            {
              "kind": "field",
              "name": "onLocaleChange"
            },
            {
              "kind": "field",
              "name": "onLanguageChange"
            },
            {
              "kind": "method",
              "name": "#calculate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Get the percentages as rounded and total",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "legendTemplate",
              "description": "Calculate the legend markup and return it",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "legendFormatter",
              "description": "Set the format on the legend items",
              "parameters": [
                {
                  "description": "A function for legend customization",
                  "name": "value",
                  "type": {
                    "text": "Function"
                  }
                }
              ],
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "method",
              "name": "#addColorVariables",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "chartTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the inner chart template"
            },
            {
              "kind": "method",
              "name": "#patterns",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the definition markup for svg patterns",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "viewBoxSize",
              "type": {
                "text": "number"
              },
              "description": "Viewbox size (square)",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectionElements",
              "type": {
                "text": "Array<SVGElement>"
              },
              "description": "Return chart elements that get selection",
              "return": {
                "type": {
                  "text": "Array<SVGElement>"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "tooltipElements",
              "return": {
                "type": {
                  "text": "Array<SVGElement>"
                }
              },
              "description": "Return chart elements that get tooltips",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "tooltipTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Return the tooltip template"
            },
            {
              "kind": "method",
              "name": "#degreeToRadians",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "degree",
                  "type": {
                    "text": "number"
                  },
                  "description": "The degree"
                }
              ],
              "description": "Convert angle degree to radians",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#sliceAngles",
              "privacy": "private",
              "type": {
                "text": "{ startAngle: number, endAngle: number, midAngle: number }[]"
              },
              "default": "[]",
              "description": "Hold the angles for each slice"
            },
            {
              "kind": "method",
              "name": "#setSliceAngles",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the angles for each slice",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#midPosition",
              "return": {
                "type": {
                  "text": "{ x: number, y: number, midAngle: number }"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "The slice index"
                },
                {
                  "name": "extra",
                  "default": "0",
                  "description": "Any extra desired padding",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Get the midpoint position for given slice index",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#tooltipDotSize",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "2",
              "description": "Hold the size for tooltip dot"
            },
            {
              "kind": "field",
              "name": "#tooltipDots",
              "privacy": "private",
              "type": {
                "text": "HTMLSpanElement[]"
              },
              "default": "[]",
              "description": "Hold the tooltip dots"
            },
            {
              "kind": "method",
              "name": "#adjustTooltipDots",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Adjust the position of tooltip dots and add if run first time.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachTooltipEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Setup handlers on tooltip elements"
            },
            {
              "kind": "method",
              "name": "#detachTooltipEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Detatch tooltip handlers on elements"
            },
            {
              "kind": "method",
              "name": "#positionTooltip",
              "parameters": [
                {
                  "name": "tooltip",
                  "type": {
                    "text": "SVGElement"
                  },
                  "description": "the tooltip component"
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the index"
                }
              ],
              "description": "Return the data for a tooltip accessed by index",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "tooltipData",
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the data groupIndex"
                }
              ],
              "description": "Return the data for a tooltip accessible by index",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "#tooltipContent",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "elem",
                  "type": {
                    "text": "SVGElement"
                  },
                  "description": "The svg element we will inspect for content"
                }
              ],
              "description": "Return the tooltip content",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#showEmptyMessage",
              "description": "Show an empty message with settings configuration",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#hideEmptyMessage",
              "description": "Hide the empty message",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#preSelected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set initially selected",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getSelected",
              "return": {
                "type": {
                  "text": "IdsPieChartSelected"
                }
              },
              "description": "Get currently selected"
            },
            {
              "kind": "method",
              "name": "setSelected",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opt",
                  "type": {
                    "text": "IdsPieChartSelectedBy"
                  },
                  "description": "The in comeing options"
                }
              ],
              "description": "Set selected by give indexes"
            },
            {
              "kind": "method",
              "name": "setSelection",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number|string"
                  },
                  "description": "The index value"
                }
              ],
              "description": "Set the selection for given index",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onTitleChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "title value"
                }
              ],
              "description": "Handles title attribute changes"
            },
            {
              "kind": "field",
              "name": "donut",
              "description": "Sets the chart to donut chart",
              "parameters": [
                {
                  "description": "True to make a donut chart",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "donutText",
              "description": "Sets the charts middle text",
              "parameters": [
                {
                  "description": "The text to use",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The width of the chart (in pixels) or 'inherit' from the parent",
              "parameters": [
                {
                  "description": "The height value",
                  "name": "value",
                  "type": {
                    "text": "number | string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "width",
              "description": "The width of the chart (in pixels) or 'inherit' from the parent",
              "parameters": [
                {
                  "description": "The width value",
                  "name": "value",
                  "type": {
                    "text": "number | string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Set the data array of the chart",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array<unknown>"
                  }
                }
              ],
              "type": {
                "text": "Array<IdsPieChartData>"
              }
            },
            {
              "kind": "field",
              "name": "colors",
              "type": {
                "text": "Array<string>"
              },
              "description": "Utility function to get the colors series being used in this chart",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "color",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "The current index"
                }
              ],
              "description": "Get the color to use based on the index for sequential and custom colors",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "animated",
              "description": "Set the animation on/off",
              "parameters": [
                {
                  "description": "True if animation is on",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "suppressTooltips",
              "description": "Set the tooltips on/off",
              "parameters": [
                {
                  "description": "True if animation is on",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "DEFAULT_SELECTABLE",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-pie-chart/ids-pie-chart.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsPieChart",
            "module": "src/components/ids-pie-chart/ids-pie-chart.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-popup/ids-popup-attributes.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "CENTER",
          "type": {
            "text": "string"
          },
          "default": "'center'"
        },
        {
          "kind": "variable",
          "name": "DEFAULT_ALIGN_EDGE",
          "default": "CENTER"
        },
        {
          "kind": "variable",
          "name": "ALIGNMENT_EDGES",
          "type": {
            "text": "array"
          },
          "default": "[CENTER, 'bottom', 'top', 'left', 'right']"
        },
        {
          "kind": "variable",
          "name": "ALIGNMENTS_X",
          "type": {
            "text": "array"
          },
          "default": "[CENTER, 'left', 'right']"
        },
        {
          "kind": "variable",
          "name": "ALIGNMENTS_Y",
          "type": {
            "text": "array"
          },
          "default": "[CENTER, 'top', 'bottom']"
        },
        {
          "kind": "variable",
          "name": "ALIGNMENTS_EDGES_X"
        },
        {
          "kind": "variable",
          "name": "ALIGNMENTS_EDGES_Y"
        },
        {
          "kind": "variable",
          "name": "ANIMATION_STYLES",
          "type": {
            "text": "array"
          },
          "default": "[\n  'fade',\n  'scale-in'\n]"
        },
        {
          "kind": "variable",
          "name": "ARROW_TYPES",
          "type": {
            "text": "array"
          },
          "default": "['none', 'bottom', 'top', 'left', 'right']"
        },
        {
          "kind": "variable",
          "name": "POSITION_STYLES",
          "type": {
            "text": "array"
          },
          "default": "['fixed', 'absolute', 'viewport']"
        },
        {
          "kind": "variable",
          "name": "TYPES",
          "type": {
            "text": "array"
          },
          "default": "['none', 'menu', 'menu-alt', 'modal', 'tooltip', 'tooltip-alt', 'custom', 'dropdown']"
        },
        {
          "kind": "variable",
          "name": "POPUP_PROPERTIES",
          "type": {
            "text": "array"
          },
          "default": "[\n  attributes.ALIGN,\n  attributes.ALIGN_X,\n  attributes.ALIGN_Y,\n  attributes.ALIGN_EDGE,\n  attributes.ALIGN_TARGET,\n  attributes.ARROW,\n  attributes.ARROW_TARGET,\n  attributes.ANIMATED,\n  attributes.ANIMATION_STYLE,\n  attributes.BLEED,\n  attributes.HEIGHT,\n  attributes.MAX_HEIGHT,\n  attributes.POSITION_STYLE,\n  attributes.TYPE,\n  attributes.VISIBLE,\n  attributes.WIDTH,\n  attributes.X,\n  attributes.Y\n]"
        },
        {
          "kind": "variable",
          "name": "POPUP_MAXHEIGHT_PROPNAME",
          "type": {
            "text": "string"
          },
          "default": "'--ids-popup-maxheight'"
        },
        {
          "kind": "function",
          "name": "formatAlignAttribute",
          "return": {
            "type": {
              "text": "string"
            }
          },
          "parameters": [
            {
              "name": "alignX",
              "type": {
                "text": "string"
              },
              "description": "matches a value from the ALIGNMENTS_X array"
            },
            {
              "name": "alignY",
              "type": {
                "text": "string"
              },
              "description": "matches a value from the ALIGNMENTS_Y array"
            },
            {
              "name": "edge",
              "type": {
                "text": "string"
              },
              "description": "matches a value from the ALIGNMENT_EDGES array"
            }
          ],
          "description": "Formats the text value of the `align` attribute.",
          "privacy": "private"
        },
        {
          "kind": "function",
          "name": "onPlace",
          "return": {
            "type": {
              "text": "object"
            }
          },
          "parameters": [
            {
              "name": "popupRect",
              "type": {
                "text": "DOMRect"
              },
              "description": "a Rect object representing the current state of the popup."
            }
          ],
          "description": "Optional callback that can be used to adjust the Popup's placement\nafter all internal adjustments are made."
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "CENTER",
          "declaration": {
            "name": "CENTER",
            "module": "src/components/ids-popup/ids-popup-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "ALIGNMENT_EDGES",
          "declaration": {
            "name": "ALIGNMENT_EDGES",
            "module": "src/components/ids-popup/ids-popup-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "ALIGNMENTS_X",
          "declaration": {
            "name": "ALIGNMENTS_X",
            "module": "src/components/ids-popup/ids-popup-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "ALIGNMENTS_Y",
          "declaration": {
            "name": "ALIGNMENTS_Y",
            "module": "src/components/ids-popup/ids-popup-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "ALIGNMENTS_EDGES_X",
          "declaration": {
            "name": "ALIGNMENTS_EDGES_X",
            "module": "src/components/ids-popup/ids-popup-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "ALIGNMENTS_EDGES_Y",
          "declaration": {
            "name": "ALIGNMENTS_EDGES_Y",
            "module": "src/components/ids-popup/ids-popup-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "ANIMATION_STYLES",
          "declaration": {
            "name": "ANIMATION_STYLES",
            "module": "src/components/ids-popup/ids-popup-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "ARROW_TYPES",
          "declaration": {
            "name": "ARROW_TYPES",
            "module": "src/components/ids-popup/ids-popup-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "DEFAULT_ALIGN_EDGE",
          "declaration": {
            "name": "DEFAULT_ALIGN_EDGE",
            "module": "src/components/ids-popup/ids-popup-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "POSITION_STYLES",
          "declaration": {
            "name": "POSITION_STYLES",
            "module": "src/components/ids-popup/ids-popup-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "TYPES",
          "declaration": {
            "name": "TYPES",
            "module": "src/components/ids-popup/ids-popup-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "POPUP_MAXHEIGHT_PROPNAME",
          "declaration": {
            "name": "POPUP_MAXHEIGHT_PROPNAME",
            "module": "src/components/ids-popup/ids-popup-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "POPUP_PROPERTIES",
          "declaration": {
            "name": "POPUP_PROPERTIES",
            "module": "src/components/ids-popup/ids-popup-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "formatAlignAttribute",
          "declaration": {
            "name": "formatAlignAttribute",
            "module": "src/components/ids-popup/ids-popup-attributes.ts"
          }
        },
        {
          "kind": "js",
          "name": "onPlace",
          "declaration": {
            "name": "onPlace",
            "module": "src/components/ids-popup/ids-popup-attributes.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-popup/ids-popup.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Popup Component",
          "name": "IdsPopup",
          "cssParts": [
            {
              "description": "the popup outer element",
              "name": "popup"
            },
            {
              "description": "the arrow element",
              "name": "arrow"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "shouldUpdate",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isFlipped",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "scrollParentElem",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "field",
              "name": "#mo",
              "privacy": "private",
              "type": {
                "text": "MutationObserver | undefined"
              },
              "description": "Watches for changes"
            },
            {
              "kind": "field",
              "name": "#ro",
              "privacy": "private",
              "type": {
                "text": "ResizeObserver | undefined"
              },
              "description": "Watches for resizing that occurs whenever the page changes dimensions, and re-applies some\ncoordinate-specific values to the Popup's inner container."
            },
            {
              "kind": "method",
              "name": "#fixPlacementOnResize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Places the Popup and performs an adjustment to its `transform: matrix3d()`\nCSS property, if applicable."
            },
            {
              "kind": "method",
              "name": "#fix3dMatrixOnResize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Performs an adjustment to the Popup's `transform: matrix3d()`\nCSS property, if applicable."
            },
            {
              "kind": "method",
              "name": "#setInitialState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Cycles through all available props and checks the DOM for their presence"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attaches event handlers for the duration of the lifespan of this component"
            },
            {
              "kind": "field",
              "name": "innerRect",
              "type": {
                "text": "DOMRect"
              },
              "return": {
                "type": {
                  "text": "DOMRect"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "wrapper",
              "type": {
                "text": "HTMLElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "#alignTarget",
              "privacy": "private",
              "type": {
                "text": "IdsPopupElementRef"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "alignTarget",
              "description": "Sets the element to align with via a css selector",
              "parameters": [
                {
                  "description": "a CSS selector string",
                  "name": "val",
                  "type": {
                    "text": "IdsPopupElementRef | string"
                  }
                }
              ],
              "type": {
                "text": "IdsPopupElementRef"
              },
              "return": {
                "type": {
                  "text": "IdsPopupElementRef"
                }
              }
            },
            {
              "kind": "method",
              "name": "#refreshAlignTarget",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "#align",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "CENTER"
            },
            {
              "kind": "field",
              "name": "align",
              "parameters": [
                {
                  "description": "a comma-delimited set of alignment types `direction1, direction2`",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "#alignX",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "ALIGNMENTS_X[0]"
            },
            {
              "kind": "field",
              "name": "alignX",
              "description": "Strategy for the parent X alignment (see the ALIGNMENTS_X array)",
              "parameters": [
                {
                  "description": "the strategy to use",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "#alignY",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "ALIGNMENTS_Y[0]"
            },
            {
              "kind": "field",
              "name": "alignY",
              "parameters": [
                {
                  "description": "alignment strategy for the current parent Y alignment",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "#alignEdge",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "ALIGNMENT_EDGES[0]"
            },
            {
              "kind": "field",
              "name": "#targetAlignEdge",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "description": "Updates when the popup changing its primary align edge",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "alignEdge",
              "description": "Specifies the edge of the parent element to be placed adjacent,\nin configurations where a relative placement occurs",
              "parameters": [
                {
                  "description": "The edge to align to",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "oppositeAlignEdge",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "maxHeight",
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "description": "Set the max height value",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string | number | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#updateMaxHeightProp",
              "parameters": [
                {
                  "name": "val",
                  "optional": true,
                  "type": {
                    "text": "string | number | null"
                  },
                  "description": "how to define the property"
                }
              ],
              "description": "Defines an internal CSS variable used for defining a `max-height` attribute\nin the ShadowRoot of this component"
            },
            {
              "kind": "method",
              "name": "#getOppositeEdge",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "currentEdge",
                  "optional": true,
                  "type": {
                    "text": "string|undefined"
                  },
                  "description": "current align edge"
                }
              ],
              "description": "Helper to get opposite align edge"
            },
            {
              "kind": "method",
              "name": "#getNearestEdge",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "currentEdge",
                  "optional": true,
                  "type": {
                    "text": "string|undefined"
                  },
                  "description": "current align edge"
                }
              ],
              "description": "Helper to get nearest side to the align edge"
            },
            {
              "kind": "field",
              "name": "#animated",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "animated",
              "description": "Whether or not the component should animate its movement",
              "parameters": [
                {
                  "description": "true if animation should occur on the Popup",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#refreshAnimated",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Refreshes whether or not animations can be applied"
            },
            {
              "kind": "field",
              "name": "#animationStyle",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "ANIMATION_STYLES[0]"
            },
            {
              "kind": "field",
              "name": "animationStyle",
              "parameters": [
                {
                  "description": "the style of animation this popup uses to show/hide",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#refreshAnimationStyle",
              "parameters": [
                {
                  "name": "currentStyle",
                  "type": {
                    "text": "string"
                  },
                  "description": "the type of animation"
                },
                {
                  "name": "newStyle",
                  "type": {
                    "text": "string"
                  },
                  "description": "the type of animation"
                }
              ],
              "description": "Changes the CSS class controlling the animation style of the Popup",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "#bleed",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "bleed",
              "parameters": [
                {
                  "description": "true if bleeds should be respected by the Popup",
                  "name": "val",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "string | boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "#containingElem",
              "privacy": "private",
              "type": {
                "text": "IdsPopupElementRef"
              }
            },
            {
              "kind": "field",
              "name": "containingElem",
              "parameters": [
                {
                  "description": "an element that will appear to \"contain\" the Popup",
                  "name": "val",
                  "type": {
                    "text": "IdsPopupElementRef"
                  }
                }
              ],
              "type": {
                "text": "IdsPopupElementRef"
              },
              "return": {
                "type": {
                  "text": "IdsPopupElementRef"
                }
              }
            },
            {
              "kind": "field",
              "name": "#arrow",
              "privacy": "private",
              "default": "ARROW_TYPES[0]"
            },
            {
              "kind": "field",
              "name": "arrow",
              "description": "Specifies whether to show the Popup Arrow, and in which direction.\nThe direction is in relation to the alignment setting. So for example of you align: top\nyou want arrow: top as well.",
              "parameters": [
                {
                  "description": "the arrow direction.  Defaults to `none`",
                  "name": "val",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string|null"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setArrowDirection",
              "parameters": [
                {
                  "name": "currentDir",
                  "type": {
                    "text": "string"
                  },
                  "description": "a CSS class representing a Popup Arrow direction"
                },
                {
                  "name": "newDir",
                  "type": {
                    "text": "string"
                  },
                  "description": "a CSS class representing a Popup Arrow direction"
                }
              ],
              "description": "Show/Hide Arrow pointing in a direction, if applicable"
            },
            {
              "kind": "field",
              "name": "arrowEl",
              "type": {
                "text": "HTMLElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "#arrowTarget",
              "privacy": "private",
              "type": {
                "text": "IdsPopupElementRef"
              },
              "parameters": [
                {
                  "name": "arrowTarget",
                  "type": {
                    "text": "IdsPopupElementRef"
                  }
                }
              ],
              "default": "null"
            },
            {
              "kind": "field",
              "name": "arrowTarget",
              "description": "Sets the element to align with via a css selector",
              "parameters": [
                {
                  "description": "a CSS selector string",
                  "name": "val",
                  "type": {
                    "text": "IdsPopupElementRef"
                  }
                }
              ],
              "type": {
                "text": "IdsPopupElementRef"
              },
              "return": {
                "type": {
                  "text": "IdsPopupElementRef"
                }
              }
            },
            {
              "kind": "field",
              "name": "#positionStyle",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "POSITION_STYLES[1]"
            },
            {
              "kind": "field",
              "name": "positionStyle",
              "parameters": [
                {
                  "description": "the position style string",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#refreshPositionStyle",
              "parameters": [
                {
                  "name": "currentStyle",
                  "type": {
                    "text": "string"
                  },
                  "description": "the current position type"
                },
                {
                  "name": "newStyle",
                  "type": {
                    "text": "string"
                  },
                  "description": "the new position type"
                }
              ],
              "description": "Changes the CSS class controlling the position style of the Popup",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#checkViewportPositionScrolling",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Runs on viewport resize to correct a CSS class that controls scrolling behavior within viewport-positioned popups"
            },
            {
              "kind": "field",
              "name": "#type",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "TYPES[0]"
            },
            {
              "kind": "field",
              "name": "type",
              "parameters": [
                {
                  "description": "The popup type",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#refreshPopupTypeClass",
              "parameters": [
                {
                  "name": "currentType",
                  "type": {
                    "text": "string"
                  },
                  "description": "the current type CSS class to remove"
                },
                {
                  "name": "newType",
                  "type": {
                    "text": "string"
                  },
                  "description": "the new type CSS class to apply"
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "open",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#visible",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "visible",
              "description": "Whether or not the component should be displayed",
              "parameters": [
                {
                  "description": "a boolean for displaying or hiding the popup",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "refreshVisibility",
              "description": "Runs the show/hide routines of the Popup based on current visiblity state.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "#x",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "x",
              "description": "Sets the X (left) coordinate of the Popup",
              "parameters": [
                {
                  "description": "the coordinate's value",
                  "name": "val",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "#y",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0"
            },
            {
              "kind": "field",
              "name": "y",
              "description": "Sets the Y (top) coordinate of the Popup",
              "parameters": [
                {
                  "description": "the coordinate's value",
                  "name": "val",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "method",
              "name": "setPosition",
              "parameters": [
                {
                  "name": "x",
                  "default": "null",
                  "type": {
                    "text": "number"
                  },
                  "description": "the x coordinate/offset value"
                },
                {
                  "name": "y",
                  "default": "null",
                  "type": {
                    "text": "number"
                  },
                  "description": "the y coordinate/offset value"
                },
                {
                  "name": "doShow",
                  "default": "null",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if the Popup should be displayed before placing"
                },
                {
                  "name": "doPlacement",
                  "default": "null",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if the component should run its placement routine"
                }
              ],
              "description": "Sets an X/Y position and optionally shows/places the Popup"
            },
            {
              "kind": "method",
              "name": "show",
              "description": "Shows the Popup",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "description": "Hides the Popup",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "place",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Runs the configured placement routine for the Popup"
            },
            {
              "kind": "method",
              "name": "#placeAtCoords",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Places the Popup using numeric x/y coordinates as a starting point.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#placeAgainstTarget",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Places the Popup using an external element as a starting point.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onPlace",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "parameters": [
                {
                  "name": "popupRect",
                  "type": {
                    "text": "DOMRect"
                  },
                  "description": "a Rect object representing the current state of the popup."
                }
              ],
              "description": "Optional callback that can be used to adjust the Popup's placement\nafter all internal adjustments are made."
            },
            {
              "kind": "method",
              "name": "onXYSwitch",
              "parameters": [
                {
                  "name": "result",
                  "type": {
                    "text": "IdsPopupXYSwitchResult"
                  },
                  "description": "contains settings related to the x/y adjustment."
                }
              ],
              "description": "Optional callback that can be used to further adjust the Popup's x/y offsets\nif a flip or other modification is made to the alignment edge\nwhen being placed in alignment mode.",
              "return": {
                "type": {
                  "text": "IdsPopupXYSwitchResult"
                }
              }
            },
            {
              "kind": "method",
              "name": "#nudge",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "parameters": [
                {
                  "name": "popupRect",
                  "type": {
                    "text": "DOMRect"
                  },
                  "description": "a Rect object representing the current state of the popup."
                }
              ],
              "description": "Further adjusts placement of a popup based on defined strategies."
            },
            {
              "kind": "method",
              "name": "#getPlacementEdge",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "popupRect",
                  "type": {
                    "text": "DOMRect"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#renderPlacementInPixels",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "popupRect",
                  "type": {
                    "text": "DOMRect"
                  },
                  "description": "representing approximated new placement values"
                }
              ],
              "description": "Renders the position of the Popup using offsets/coordinates in Pixels."
            },
            {
              "kind": "method",
              "name": "correct3dMatrix",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "In cases where 3D CSS transforms are used for Popup positioning,\ncorrects the placement of the Popup after rendering so that it doesn't\nreside on half-pixels, causing blurriness to text, icons, etc.\nAdapted from https://stackoverflow.com/a/42256897"
            },
            {
              "kind": "method",
              "name": "#remove3dMatrix",
              "description": "Removes a previously-modified 3D Matrix",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#removeRelativeParentDistance",
              "return": {
                "type": {
                  "text": "DOMRect"
                }
              },
              "parameters": [
                {
                  "name": "elem",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "the element to measure"
                },
                {
                  "name": "rect",
                  "type": {
                    "text": "DOMRect"
                  },
                  "description": "optionally pass in an existing rect and correct it",
                  "optional": true
                },
                {
                  "name": "containerElem",
                  "optional": true,
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "optionally pass a container element for this one to check scrolling distance"
                }
              ],
              "description": "Returns a DOMRect from `getBoundingClientRect` from an element, with the values adjusted\nby subtracting the left/top values from the closest relative-positioned parent"
            },
            {
              "kind": "method",
              "name": "placeArrow",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "alignEdge",
                  "optional": true,
                  "type": {
                    "text": "string | undefined"
                  },
                  "description": "align edge to place the arrow"
                }
              ],
              "description": "Handles alignment of an optional arrow element. If an arrow target is specified,\nthe arrow is placed to align correctly against the target."
            },
            {
              "kind": "field",
              "name": "height",
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "string"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-popup/ids-popup.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsPopup",
            "module": "src/components/ids-popup/ids-popup.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-popup-menu/ids-popup-menu.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Popup Menu Component",
          "name": "IdsPopupMenu",
          "members": [
            {
              "kind": "field",
              "name": "container",
              "type": {
                "text": "IdsPopup | null | undefined"
              },
              "default": "null",
              "description": "Component's first child element (in IdsPopupMenu, this is always an IdsPopup component)"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "method",
              "name": "renderFromData",
              "description": "Override `renderFromData()` from the IdsMenu base to also re-apply Popup Menu event handlers"
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "Array<string>"
              },
              "default": "['beforeshow']",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "setInitialFocus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets up event handlers used in this menu."
            },
            {
              "kind": "method",
              "name": "hideOtherMenus",
              "description": "Hide any older (enterprise) menus"
            },
            {
              "kind": "field",
              "name": "#mo",
              "privacy": "private",
              "type": {
                "text": "MutationObserver | undefined"
              },
              "default": "undefined"
            },
            {
              "kind": "method",
              "name": "attachKeyboardListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets up the connection to the global keyboard handler"
            },
            {
              "kind": "field",
              "name": "parentMenu",
              "readonly": true,
              "return": {
                "type": {
                  "text": "IdsPopupMenu"
                }
              }
            },
            {
              "kind": "field",
              "name": "align",
              "description": "Retrieves the `align` setting from the internal IdsPopup",
              "parameters": [
                {
                  "description": "a comma-delimited set of alignment types `direction1, direction2`",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "visible",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "hide",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Hides this menu and any of its submenus."
            },
            {
              "kind": "method",
              "name": "#removeMutationObservers",
              "description": "Clean up any Mutation observers",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "show",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setVisibleARIA",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#removeVisibleARIA",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "showIfAble",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Shows the Popupmenu if allowed"
            },
            {
              "kind": "method",
              "name": "hideSubmenus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "focusedMenuItem",
                  "default": "undefined",
                  "type": {
                    "text": "any"
                  },
                  "description": "[IdsMenuItem] if provided, will be ignored and considered the\n\"currently open\" menu.",
                  "optional": true
                }
              ],
              "description": "Hides any \"open\" submenus within this menu structure, optionally ingorning a single\nmenu to \"keep open\"."
            },
            {
              "kind": "method",
              "name": "hideAndFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "focusParent",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if focus should be placed on a parent menu item"
                }
              ],
              "description": "Hides the popup menu and focuses a target element, if applicable"
            },
            {
              "kind": "field",
              "name": "maxHeight",
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "description": "Set the max height value",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string | number | null"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "width",
              "description": "Gets width",
              "parameters": [
                {
                  "description": "css width value",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string | null"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setMenuWidth",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "targetWidth",
                  "type": {
                    "text": "string | null"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onOutsideClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Inherited from the Popup Open Events Mixin.\nRuns when a click event is propagated to the window."
            },
            {
              "kind": "method",
              "name": "onTriggerClick",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "the original mouse event"
                }
              ],
              "description": "Inherited from the Popup Interactions Mixin.\nRuns when a Popup Menu has a triggering element, and that element is clicked."
            },
            {
              "kind": "method",
              "name": "onContextMenu",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "the original `contextmenu` event"
                }
              ],
              "description": "Inherited from the Popup Interactions Mixin.\nRuns when a `contextmenu` event is triggered from the page."
            },
            {
              "kind": "method",
              "name": "onTriggerImmediate",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Inherited from the Popup Interactions Mixin.\nRuns as soon as the Popup is connected to the DOM."
            },
            {
              "kind": "method",
              "name": "onTriggerHover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Inherited from the Popup Interactions Mixin.\nRuns on a delayed `mouseenter` event and fires when that delay completes"
            },
            {
              "kind": "method",
              "name": "onCancelTriggerHover",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  },
                  "description": "IDS `sloped-mouseleave`"
                }
              ],
              "description": "Inherited from the Popup Interactions Mixin.\nRuns after a `mouseleave` event occurs from this menu"
            },
            {
              "kind": "method",
              "name": "onTriggerHoverClick",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "MouseEvent"
                  },
                  "description": "the original click event"
                }
              ],
              "description": "Use the same click event type"
            },
            {
              "kind": "method",
              "name": "setOnPlace",
              "privacy": "private",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if the `onPlace` method should account for a parent menu's placement"
                }
              ],
              "description": "Sets the `onPlace` method for submenus to account for the host element's position"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-popup-menu/ids-popup-menu.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsPopupMenu",
            "module": "src/components/ids-popup-menu/ids-popup-menu.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-process-indicator/ids-process-indicator-step.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Process Step Component",
          "name": "IdsProcessStep",
          "cssParts": [
            {
              "name": "label"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "method",
              "name": "#setString",
              "parameters": [
                {
                  "name": "attribute",
                  "type": {
                    "text": "string"
                  },
                  "description": "attribute name"
                },
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "attribute value"
                }
              ],
              "description": "Set the string attribute",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#hide",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "html element"
                }
              ],
              "description": "Hide the step",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#show",
              "parameters": [
                {
                  "name": "element",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "html element"
                }
              ],
              "description": "show the step",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#updateLabelVisibility",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the step label visibility",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#getLabelElement",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "description": "Get the label element",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#getStatusIcon",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "status",
                  "type": {
                    "text": "string"
                  },
                  "description": "step status"
                }
              ],
              "description": "Get step icon based on status"
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Sets the label for the step",
              "parameters": [
                {
                  "description": "The step name",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Sets the status for the step which determines the icon",
              "parameters": [
                {
                  "description": "The step status",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-process-indicator/ids-process-indicator-step.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsProcessStep",
            "module": "src/components/ids-process-indicator/ids-process-indicator-step.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-process-indicator/ids-process-indicator.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Process Indicator Component",
          "name": "IdsProcessIndicator",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#setActiveStepLabel",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the active step label for xs heading",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-process-indicator/ids-process-indicator.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsProcessIndicator",
            "module": "src/components/ids-process-indicator/ids-process-indicator.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-progress-bar/ids-progress-bar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Progress Bar Component",
          "name": "IdsProgressBar",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "method",
              "name": "#updateValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "the value"
                }
              ],
              "description": "Update value",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "completed",
              "type": {
                "text": "string"
              },
              "description": "Get calculated completed value",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets the component to disabled",
              "parameters": [
                {
                  "description": "If true will set `disabled` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Set the `label` text",
              "parameters": [
                {
                  "description": "of the `label` text property",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "labelAudible",
              "description": "Sets to label text as audible",
              "parameters": [
                {
                  "description": "If true will set `label-audible` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "max",
              "description": "Set the `max` attribute of progress",
              "parameters": [
                {
                  "description": "of the `max` property",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Set the `value` attribute of progress",
              "parameters": [
                {
                  "description": "the value property",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-progress-bar/ids-progress-bar.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsProgressBar",
            "module": "src/components/ids-progress-bar/ids-progress-bar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-progress-chart/ids-progress-chart.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Progress Chart Component",
          "name": "IdsProgressChart",
          "members": [
            {
              "kind": "field",
              "name": "percentage",
              "default": "NaN"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Sets the icon inside the label",
              "parameters": [
                {
                  "description": "The icon name",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "color",
              "description": "Set the color of the bar",
              "parameters": [
                {
                  "description": "The color value, this can be a hex code with the #",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "method",
              "name": "#updateColor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates the UI when color attribute is set",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#updateLabel",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "labelType",
                  "type": {
                    "text": "string"
                  },
                  "description": "The type of label being set"
                }
              ],
              "description": "Updates the UI when the main/progress/total label is set",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#updateProgress",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates the UI when the progress value/total is set",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#updateSize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates the UI when the chart size is set",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "progress",
              "description": "Set the numeric value of progress that has been completed",
              "parameters": [
                {
                  "description": "The progress value, between 0 and the total",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "total",
              "description": "Set the total value of possible progress that can be completed",
              "parameters": [
                {
                  "description": "The total value, must be greater than or equal to the progress value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Set the label title of the bar",
              "parameters": [
                {
                  "description": "The title value, whatever you want to name the bar",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "progressLabel",
              "description": "Set the label of completed progress--useful for displaying units",
              "parameters": [
                {
                  "description": "The label for completed progress (i.e. 13 hours)",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "totalLabel",
              "description": "Set the label of total possible progress--useful for displaying units",
              "parameters": [
                {
                  "description": "The label for total progress (i.e. 26 hours)",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Set the size of the progress bar (small, or normal (default)",
              "parameters": [
                {
                  "description": "The size of the progress bar",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-progress-chart/ids-progress-chart.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsProgressChart",
            "module": "src/components/ids-progress-chart/ids-progress-chart.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-radio/ids-radio-group.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Radio Group Component",
          "name": "IdsRadioGroup",
          "members": [
            {
              "kind": "field",
              "name": "isFormComponent",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "labelEl",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "type": {
                "text": "any"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "method",
              "name": "afterChildrenReady",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set after children ready",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set value for group",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "clear",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Clear the group as checked, validation etc."
            },
            {
              "kind": "method",
              "name": "handleDisabled",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set disabled for each radio in group."
            },
            {
              "kind": "method",
              "name": "handleHorizontal",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set horizontal for each radio in group."
            },
            {
              "kind": "method",
              "name": "makeChecked",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "radio",
                  "type": {
                    "text": "object"
                  },
                  "description": "to make checked"
                },
                {
                  "name": "isFocus",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "if true will set focus"
                }
              ],
              "description": "Make given radio as checked.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "attachRadioGroupChangeEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle radio group change event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "attachRadioGroupKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle keydown event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "attachInternalEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle events",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets checkbox to disabled",
              "parameters": [
                {
                  "description": "If true will set `disabled` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "horizontal",
              "description": "Flips the checkbox orientation to horizontal",
              "parameters": [
                {
                  "description": "If true will set `horizontal` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Set the `label` text",
              "parameters": [
                {
                  "description": "of the `label` text property",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "labelRequired",
              "description": "Sets the checkbox to required",
              "parameters": [
                {
                  "description": "The `label-required` attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Sets the checkbox `value` attribute",
              "parameters": [
                {
                  "description": "the value property",
                  "name": "val",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-radio/ids-radio-group.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsRadioGroup",
            "module": "src/components/ids-radio/ids-radio-group.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-radio/ids-radio.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Radio Component",
          "name": "IdsRadio",
          "cssParts": [
            {
              "description": "the actual radio input element",
              "name": "radio"
            },
            {
              "description": "the visible circle element",
              "name": "circle"
            },
            {
              "description": "the label text element",
              "name": "label"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "labelEl",
              "type": {
                "text": "HTMLLabelElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "rootEl",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "method",
              "name": "#attachRadioChangeEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attach radio change event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachRadioClickEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attach radio click event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachNativeEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Establish Internal Event Handlers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attach events",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "checked",
              "description": "Set `checked` attribute",
              "parameters": [
                {
                  "description": "If true will set `checked` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "color",
              "description": "Set `color` attribute",
              "parameters": [
                {
                  "description": "If true will set `color` attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Set `disabled` attribute",
              "parameters": [
                {
                  "description": "If true will set `disabled` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "groupDisabled",
              "description": "Set `group-disabled` attribute",
              "parameters": [
                {
                  "description": "If true will set `group-disabled` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "horizontal",
              "description": "Set `horizontal` attribute `inline|block`, default as `block`",
              "parameters": [
                {
                  "description": "If true will set `horizontal` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Set the `label` text",
              "parameters": [
                {
                  "description": "of the `label` text property",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "validationHasError",
              "description": "Set `validation-has-error` attribute",
              "parameters": [
                {
                  "description": "If true will set `validation-has-error` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Set the `value` attribute",
              "parameters": [
                {
                  "description": "the value property",
                  "name": "val",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides the standard \"focus\" behavior to instead pass focus to the inner HTMLInput element."
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-radio/ids-radio.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsRadio",
            "module": "src/components/ids-radio/ids-radio.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-rating/ids-rating.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Rating Component",
          "name": "IdsRating",
          "members": [
            {
              "kind": "field",
              "name": "ratingArr",
              "type": {
                "text": "Array<any>"
              },
              "default": "[]"
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the template for the rating contents"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Sets the value attribute",
              "parameters": [
                {
                  "description": "string value from the value attribute",
                  "name": "val",
                  "type": {
                    "text": "string|number"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "stars",
              "description": "Sets the stars attribute",
              "parameters": [
                {
                  "description": "string value from the stars attribute",
                  "name": "num",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | number | any"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets the disabled state",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "description": "Sets the readonly attribute",
              "parameters": [
                {
                  "description": "string value from the readonly attribute",
                  "name": "ro",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Sets the size attribute",
              "parameters": [
                {
                  "description": "string value from the size attribute",
                  "name": "s",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateStars",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  },
                  "description": "event target"
                }
              ],
              "description": "Sets star state, active class and icon attribute"
            },
            {
              "kind": "method",
              "name": "updateValue",
              "parameters": [
                {
                  "name": "arr",
                  "type": {
                    "text": "any"
                  },
                  "description": "NodeList"
                }
              ],
              "description": "Sets and updates value attribute"
            },
            {
              "kind": "method",
              "name": "#updateHalfStar",
              "parameters": [
                {
                  "name": "arr",
                  "type": {
                    "text": "any"
                  },
                  "description": "NodeList"
                }
              ],
              "description": "Sets and updates value attribute for halfstar"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-rating/ids-rating.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsRating",
            "module": "src/components/ids-rating/ids-rating.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-scroll-view/ids-scroll-view.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Scroll View Component",
          "name": "IdsScrollView",
          "cssParts": [
            {
              "description": "the parent container element",
              "name": "container"
            },
            {
              "description": "the scrolling container",
              "name": "scroll-view"
            },
            {
              "description": "the control button area",
              "name": "controls"
            },
            {
              "description": "the individual circle buttons in the scroll view",
              "name": "button"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the template for the contents"
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "array"
              },
              "default": "[\n    'beforefirst',\n    'beforeprevious',\n    'beforenext',\n    'beforelast',\n    'beforeslideto'\n  ]",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "field",
              "name": "#activeNumber",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Current active slide index"
            },
            {
              "kind": "field",
              "name": "#isClickOrKey",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "description": "State of action by click or keyboard"
            },
            {
              "kind": "field",
              "name": "circleButtons",
              "type": {
                "text": "IdsButton[]"
              },
              "description": "Get the list of circle buttons",
              "return": {
                "type": {
                  "text": "IdsButton[]"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "controls",
              "type": {
                "text": "HTMLElement | null | undefined"
              },
              "description": "Get the controls container",
              "return": {
                "type": {
                  "text": "HTMLElement|null"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "loop",
              "description": "Set the loop, true will loop back after next/previous reached to end",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "showTooltip",
              "description": "Set the tooltip for circle buttons",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "suppressControls",
              "description": "Set suppress controls for circle buttons",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "first",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Move to first slide"
            },
            {
              "kind": "method",
              "name": "previous",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Move to previous slide"
            },
            {
              "kind": "method",
              "name": "next",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Move to next slide"
            },
            {
              "kind": "method",
              "name": "last",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Move to lst slide"
            },
            {
              "kind": "method",
              "name": "slideTo",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "slideNumber",
                  "optional": true,
                  "type": {
                    "text": "number|string"
                  },
                  "description": "The slide number"
                }
              ],
              "description": "Slide to given slide number"
            },
            {
              "kind": "method",
              "name": "currentSlideNumber",
              "return": {
                "type": {
                  "text": "number | undefined"
                }
              },
              "description": "Get the current slide number"
            },
            {
              "kind": "method",
              "name": "#moveTo",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "slideNumber",
                  "optional": true,
                  "type": {
                    "text": "number|string"
                  },
                  "description": "The slide number to move"
                }
              ],
              "description": "Move to the given slide number",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setTooltip",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set tooltips for circle buttons",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#renderCircleButtons",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Render the circle buttons",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setActive",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "slideNumber",
                  "optional": true,
                  "type": {
                    "text": "number | string"
                  },
                  "description": "The slide number"
                },
                {
                  "name": "isMove",
                  "default": "false",
                  "description": "If true, set to move",
                  "type": {
                    "text": "boolean"
                  }
                },
                {
                  "name": "isFocus",
                  "default": "false",
                  "description": "If true, set to focus",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Set as active slide and optionly set focus",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Establish Internal Event Handlers",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-scroll-view/ids-scroll-view.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsScrollView",
            "module": "src/components/ids-scroll-view/ids-scroll-view.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-search-field/ids-search-field.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Search Field Component",
          "name": "IdsSearchField",
          "members": [
            {
              "kind": "field",
              "name": "isFormComponent",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['alternate', 'app-menu', 'card']",
              "description": "Inherited from `IdsColorVariantMixin`",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "variantName",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "the new color variant being applied to the Search Field"
                }
              ],
              "description": "Inherited from `IdsColorVariantMixin`. If the Color Variant on Search Fields are changed,\nswitch trigger buttons to the \"alternate\" style instead of an `app-menu` style.",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true,
              "description": "Return the attributes we handle as getters/setters",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Creates the Template for rendering an IdsTriggerField's contents",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateCategoriesButton",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "templateCategoriesMenu",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#updateCategoriesMenu"
            },
            {
              "kind": "field",
              "name": "#categoriesPopup",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#categoriesMenuButton",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#categoriesActionButton",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#categories",
              "privacy": "private",
              "type": {
                "text": "string[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "categories",
              "type": {
                "text": "string[]"
              },
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "parameters": [
                {
                  "description": "= sets a list of categories that should appear in the category dropdown",
                  "name": "value",
                  "type": {
                    "text": "string[]"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "category",
              "parameters": [
                {
                  "description": "sets the initial text that appears in the categories dropdown menu",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "selectedCategories",
              "type": {
                "text": "string[]"
              },
              "return": {
                "type": {
                  "text": "string[]"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "action",
              "parameters": [
                {
                  "description": "sets title on the search field action-button",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "multiple",
              "parameters": [
                {
                  "description": "allows multiple categories to be selected",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "search",
              "return": {
                "type": {
                  "text": "Array<any>"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "any"
                  },
                  "description": "the incoming value to search for"
                }
              ],
              "description": "Programmatically sets the search field's value and performs an optional search function"
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Set the `value` attribute of input",
              "parameters": [
                {
                  "description": "the new value to set",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "onSearch",
              "return": {
                "type": {
                  "text": "Array<any>"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "default": "undefined",
                  "type": {
                    "text": "any"
                  },
                  "description": "the value to be searched for",
                  "optional": true
                }
              ],
              "description": "Define this method to carry out search functionality\n(override this method when implementing an IdsSearchField)."
            },
            {
              "kind": "field",
              "name": "#previousSearchValue",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "default": "null",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Adds Search Field specific event handlers",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#attachKeyboardListener",
              "description": "Listen for enter key to perform search function"
            },
            {
              "kind": "method",
              "name": "#triggerCategoriesEvent",
              "parameters": [
                {
                  "name": "eventType",
                  "type": {
                    "text": "'input' | 'search' | 'deselected' | 'selected'"
                  },
                  "description": "the type of event to trigger"
                }
              ],
              "description": "Helper to trigger CustomEvent for various event-types"
            },
            {
              "kind": "method",
              "name": "#rerender"
            },
            {
              "kind": "field",
              "name": "elements",
              "description": "Get a list of element dependencies for this component",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsTriggerField",
                "module": "src/components/ids-trigger-field/ids-trigger-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttons",
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              },
              "inheritedFrom": {
                "name": "IdsTriggerField",
                "module": "src/components/ids-trigger-field/ids-trigger-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "tabbable",
              "parameters": [
                {
                  "description": "true if this trigger field's buttons should be made accessible using the tab key",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsTriggerField",
                "module": "src/components/ids-trigger-field/ids-trigger-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets the disabled attribute",
              "parameters": [
                {
                  "description": "string value from the disabled attribute",
                  "name": "d",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "description": "Sets the readonly attribute",
              "parameters": [
                {
                  "description": "string value from the read only attribute",
                  "name": "r",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "format",
              "description": "Return format",
              "parameters": [
                {
                  "description": "date, time format",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#attachTriggerButtonEvents",
              "description": "Establish Internal Event Handlers",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsTriggerField",
                "module": "src/components/ids-trigger-field/ids-trigger-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setFieldHeight",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set field height and compact attributes",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsTriggerField",
                "module": "src/components/ids-trigger-field/ids-trigger-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "onFieldHeightChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "the new field height setting"
                }
              ],
              "description": "Updates trigger buttons when the trigger field's fieldHeight property is updated",
              "inheritedFrom": {
                "name": "IdsTriggerField",
                "module": "src/components/ids-trigger-field/ids-trigger-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "trigger",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Fire the trigger event and action.",
              "inheritedFrom": {
                "name": "IdsTriggerField",
                "module": "src/components/ids-trigger-field/ids-trigger-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "generatedId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "triggeredByChange",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateHostAttributes",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Uses current IdsInput state to set some attributes on its host element",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateVariables",
              "return": {
                "type": {
                  "text": "IdsInputTemplateVariables"
                }
              },
              "description": "Uses current IdsInput state to generate strings used in its template.",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "isPasswordVisible",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateShowHide",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateCapsLock",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "capsLockIcon",
              "type": {
                "text": "HTMLElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "fieldContainer",
              "type": {
                "text": "HTMLElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelEl",
              "type": {
                "text": "HTMLLabelElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLLabelElement"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "revealablePassword",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "sets whether password reveal functionality is available",
              "parameters": [
                {
                  "description": "boolean value sets whether reveal functionality is toggled on or off",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "capsLock",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "sets whether capslock indicatoris enabled or disabled",
              "parameters": [
                {
                  "description": "sets whether capslock indicator functionality is toggled on or off",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "passwordVisible",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "sets whether the password is currently visible",
              "parameters": [
                {
                  "description": "toggles the visibility of the password on or off",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInputState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  },
                  "description": "The property."
                }
              ],
              "description": "Set input state for disabled or readonly",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLabelText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "of label"
                }
              ],
              "description": "Set the label text",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleAutoselect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle autoselect",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleInputFocusEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "optional": true,
                  "type": {
                    "text": "string | null"
                  },
                  "description": "If 'remove', will remove attached events"
                }
              ],
              "description": "Handle input focus event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#capsLockEventSetUp",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "indicates whether to turn events on or off"
                }
              ],
              "description": "handles teardown and set up for capslock detection events",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#attachNativeEvents",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "description": "Setup event handlers that trigger on the host element during native events from the internal HTMLInputElement\nThese trigg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#togglePasswordEventSetUp",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "whether to toggle events on or off"
                }
              ],
              "description": "handles event set up and teardown for password indicator",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#passwordVisibilityHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "toggles the visibility of the password by changing field type",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "description": "When set the input will add a CSS class `is-active` that simulates the text input being \"focused\".",
              "parameters": [
                {
                  "description": "If true will set `text-ellipsis` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoselect",
              "description": "When set the input will select all text on focus",
              "parameters": [
                {
                  "description": "If true will set `autoselect` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "bgTransparent",
              "description": "When set the input will add css class `bg-transparent`",
              "parameters": [
                {
                  "description": "If true will set `bg-transparent` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "textEllipsis",
              "description": "When set the input will add css class `text-ellipsis`",
              "parameters": [
                {
                  "description": "If true will set `text-ellipsis` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "#labelEl",
              "privacy": "private",
              "type": {
                "text": "HTMLLabelElement | undefined"
              },
              "description": "internal reference to a label element a user provides",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Set the `placeholder` of input",
              "parameters": [
                {
                  "description": "of the `placeholder` property",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonlyBackground",
              "parameters": [
                {
                  "description": "If true, causes an IdsInput set to `readonly` to appear\nto use its standard field background color instead of the \"readonly\" state color",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setReadonlyBackground",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelWrap",
              "description": "Set the label wrap setting of input",
              "parameters": [
                {
                  "description": "['ellipsis', 'wrap', 'no-stretch-ellipsis', 'no-stretch-wrap']",
                  "name": "value",
                  "type": {
                    "text": "IdsInputLabelWrap"
                  }
                }
              ],
              "type": {
                "text": "IdsInputLabelWrap"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Set the size (width) of input",
              "parameters": [
                {
                  "description": "[xs, sm, mm, md, lg, full]",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "textAlign",
              "description": "Sets the text alignment",
              "parameters": [
                {
                  "description": "[start, center, end]",
                  "name": "value",
                  "type": {
                    "text": "IdsInputAlignment"
                  }
                }
              ],
              "type": {
                "text": "IdsInputAlignment"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Sets the input type",
              "parameters": [
                {
                  "description": "[text, password, number, phone, email]",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "#id",
              "privacy": "private",
              "description": "set the id of the input, which will also determine the\ninput id for labels at #${id}-input",
              "parameters": [
                {
                  "description": "id",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "cursor",
              "description": "Set the css cursor property to something other than text",
              "parameters": [
                {
                  "description": "the css cursor value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "noMargins",
              "description": "Sets the no margins attribute",
              "parameters": [
                {
                  "description": "true or false or as a string",
                  "name": "n",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "padding",
              "description": "Sets the inner padding (inline-start and end)",
              "parameters": [
                {
                  "description": "string value for the padding",
                  "name": "n",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | number"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides the standard \"blur\" behavior to instead tell the inner HTMLInput element to blur.",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides the standard \"focus\" behavior to instead pass focus to the inner HTMLInput element.",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            }
          ],
          "superclass": {
            "name": "IdsTriggerField",
            "module": "/src/components/ids-trigger-field/ids-trigger-field"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsSearchField",
            "module": "src/components/ids-search-field/ids-search-field.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-separator/ids-separator.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Separator Component",
          "name": "IdsSeparator",
          "cssParts": [
            {
              "description": "the menu separator element",
              "name": "separator"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "Array<string>"
              },
              "default": "['alternate-formatter']",
              "description": "Inherited from `IdsColorVariantMixin`",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "vertical",
              "description": "Set the separator to be vertical",
              "type": {
                "text": "boolean"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-separator/ids-separator.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsSeparator",
            "module": "src/components/ids-separator/ids-separator.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-skip-link/ids-skip-link.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS IdsSkipLink Component",
          "name": "IdsSkiplink",
          "cssParts": [
            {
              "description": "the link element",
              "name": "link"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "field",
              "name": "href",
              "description": "Set the link href",
              "parameters": [
                {
                  "description": "Set the link's href to some link",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            }
          ],
          "mixins": [
            {
              "name": "IdsEventsMixin",
              "module": "/src/mixins/ids-events-mixin/ids-events-mixin"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsSkiplink",
            "module": "src/components/ids-skip-link/ids-skip-link.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-slider/ids-slider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Slider Component",
          "name": "IdsSlider",
          "members": [
            {
              "kind": "field",
              "name": "DEFAULT_MIN",
              "default": "0",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "DEFAULT_MAX",
              "default": "100",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "DEFAULT_TYPE",
              "default": "TYPES[0]"
            },
            {
              "kind": "field",
              "name": "#trackBounds",
              "privacy": "private",
              "type": {
                "text": "IdsSliderTrackBounds"
              },
              "default": "{\n  BOTTOM: NaN,\n  LEFT: NaN,\n  RIGHT: NaN,\n  TOP: NaN\n}"
            },
            {
              "kind": "field",
              "name": "#label",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "#labelSecondary",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "#labels",
              "privacy": "private",
              "type": {
                "text": "string[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "#isRTL",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#mouseHover",
              "privacy": "private",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "#percent",
              "privacy": "private",
              "default": "NaN"
            },
            {
              "kind": "field",
              "name": "#percentSecondary",
              "privacy": "private",
              "default": "NaN"
            },
            {
              "kind": "field",
              "name": "slider",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "trackArea",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "progressTrack",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "track",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "tickContainer",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "thumb",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "thumbDraggable",
              "type": {
                "text": "IdsDraggable | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "thumbShadow",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "tooltip",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "tooltipText",
              "type": {
                "text": "IdsText | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "tooltipPin",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "firstTick",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "lastTick",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "thumbSecondary",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "thumbDraggableSecondary",
              "type": {
                "text": "IdsDraggable | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "thumbShadowSecondary",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "thumbSecondaryDraggable",
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "tooltipSecondary",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "tooltipTextSecondary",
              "type": {
                "text": "IdsText | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "tooltipPinSecondary",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<any>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Controls Slider disabled state",
              "parameters": [
                {
                  "description": "If true, will set `disabled` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "description": "Controls Slider readonly state",
              "parameters": [
                {
                  "description": "If true, will set `readonly` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Modifies the primary Slider thumb's label contents",
              "parameters": [
                {
                  "description": "the label text contents",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "labelSecondary",
              "description": "Modifies the primary Slider thumb's label contents",
              "parameters": [
                {
                  "description": "the label text contents",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "vertical",
              "description": "Set the orientation of the slider",
              "parameters": [
                {
                  "description": "Whether the orientation is vertical or horizontal",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setVertical"
            },
            {
              "kind": "field",
              "name": "isRTL",
              "description": "Keep track of RTL",
              "parameters": [
                {
                  "description": "Whether or not RTL is in effect",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "onLanguageChange",
              "description": "Handle Languages Changes"
            },
            {
              "kind": "method",
              "name": "#updateTooltip",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "the text the tooltip should display"
                },
                {
                  "name": "primaryOrSecondary",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "which tooltip to update"
                }
              ],
              "description": "Helper method to update the UI of the tooltip and its text",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#updateProgressBar",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Helper method to update the UI of the progress track bar",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "labels",
              "description": "Set the labels to display on each step/tick mark (only applicable to step sliders)",
              "parameters": [
                {
                  "description": "the list of labels to set",
                  "name": "array",
                  "type": {
                    "text": "Array<string>"
                  }
                }
              ],
              "type": {
                "text": "Array<string>"
              }
            },
            {
              "kind": "method",
              "name": "#setStepLabels",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Helper method to update the labels on the UI according to stepNumber and labels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#generateNumericalLabels",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "description": "Helper method for setLabels and initialization of labels"
            },
            {
              "kind": "field",
              "name": "stepNumber",
              "description": "Sets the interval between slider ticks (only applicable to step sliders)",
              "parameters": [
                {
                  "description": "the amount of steps",
                  "name": "value",
                  "type": {
                    "text": "string | number | any"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setStepNumber"
            },
            {
              "kind": "field",
              "name": "percentSecondary",
              "description": "Sets the secondary slider thumb value based on percentage (range slider only)",
              "parameters": [
                {
                  "description": "the secondary thumb value as a percentage",
                  "name": "value",
                  "type": {
                    "text": "number | string"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "percent",
              "description": "Sets the primary slider thumb value based on percentage",
              "parameters": [
                {
                  "description": "the secondary thumb value as a percentage",
                  "name": "value",
                  "type": {
                    "text": "number | string"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "#sanitizeValue",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | number | any"
                  },
                  "description": "incoming value to set"
                },
                {
                  "name": "secondary",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if this value represents the secondary slider thumb (range slider only)"
                }
              ],
              "description": "Sanitizes a value to be applied to the slider, and doesn't allow the value\nto pass beyond the min/max values.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "valueSecondary",
              "description": "Set the secondary value of the slider (range slider only)",
              "parameters": [
                {
                  "description": "The secondary input value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Set the primary value of the slider",
              "parameters": [
                {
                  "description": "The primary input value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "#triggerChangeEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string | number | any"
                  },
                  "description": "the value of the slider handle"
                },
                {
                  "name": "thumb",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "the slider thumb causing the change"
                }
              ],
              "description": "Triggers a Change Event"
            },
            {
              "kind": "field",
              "name": "min",
              "description": "Sets the minimum-possible value of the slider",
              "parameters": [
                {
                  "description": "The desired minimum",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "max",
              "description": "Sets the maximum-possible value of the slider",
              "parameters": [
                {
                  "description": "The desired max",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Sets the slider type",
              "parameters": [
                {
                  "description": "The type of slider",
                  "name": "value",
                  "type": {
                    "text": "IdsSliderType"
                  }
                }
              ],
              "type": {
                "text": "IdsSliderType"
              },
              "return": {
                "type": {
                  "text": "IdsSliderType"
                }
              }
            },
            {
              "kind": "field",
              "name": "showTooltip",
              "description": "Enables a tooltip displaying thumb values when either thumb is focused",
              "parameters": [
                {
                  "description": "true if the thumb should display tooltips",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "color",
              "description": "Set the color of the bar",
              "parameters": [
                {
                  "description": "The color, this can be a hex code with the #, a native css color, or an ids-status color",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#shouldApplyColor",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#updateColor",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates the thumb and tick colors on the slider based on the `color` attribute and other settings",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#updateTooltipDisplay",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "hide",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "whether or not to hide it"
                },
                {
                  "name": "primaryOrSecondary",
                  "optional": true,
                  "type": {
                    "text": "primaryOrSecondary"
                  },
                  "description": "which tooltip to hide"
                }
              ],
              "description": "Hide/show the tooltip of the value",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#updateThumbShadow",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "hide",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "whether or not to hide it"
                },
                {
                  "name": "primaryOrSecondary",
                  "type": {
                    "text": "string"
                  },
                  "description": "which thumb to hide"
                }
              ],
              "description": "Hide/show the spotlight/box-shadow of the thumb",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#calcPercentFromClick",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "x",
                  "type": {
                    "text": "number"
                  },
                  "description": "coordinate of mouse click"
                },
                {
                  "name": "y",
                  "type": {
                    "text": "number"
                  },
                  "description": "coordinate of mouse click"
                }
              ],
              "description": "Helper method to calculate the percentage of slider from mouse click; not a pure function",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#calculateUIFromClick",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "x",
                  "type": {
                    "text": "number"
                  },
                  "description": "coordinate of mouse click"
                },
                {
                  "name": "y",
                  "type": {
                    "text": "number"
                  },
                  "description": "coordnate of mouse click"
                },
                {
                  "name": "labelValueClicked",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "if label was clicked or not"
                },
                {
                  "name": "primaryOrSecondary",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "string representing the primary/secondary label for range sliders"
                }
              ],
              "description": "Perform the calculations to update the UI and value(s)/percent(s) accordingly",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#moveThumb",
              "parameters": [
                {
                  "name": "primaryOrSecondary",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "which thumb to move"
                }
              ],
              "description": "Translate the thumb(s) according to the percent values",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#calcValueFromPercent",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "percent",
                  "type": {
                    "text": "number"
                  },
                  "description": "the percent value to convert to numerical value btw min and max"
                }
              ],
              "description": "Calculate the true value based on the percent value",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#calcTranslateFromPercent",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "nStart",
                  "type": {
                    "text": "number"
                  },
                  "description": "the starting x or y coordinate of the slider"
                },
                {
                  "name": "nEnd",
                  "type": {
                    "text": "number"
                  },
                  "description": "the ending x or y coordinate of the slider"
                },
                {
                  "name": "percent",
                  "type": {
                    "text": "number"
                  },
                  "description": "the percent/location of the thumb relative to the slider"
                },
                {
                  "name": "centered",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "whether or not the thumb(s) or progress track is centered or not\nif notCentered is true, it will translate from 0\nif notCentered is false, it will translate negatively and positively with 0 being the center"
                }
              ],
              "description": "Calculate the pixels to translate thumb(s) or progress track based on percent value",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#calcPercentFromRange",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "n",
                  "type": {
                    "text": "number"
                  },
                  "description": "the mouse x or y coordinate"
                },
                {
                  "name": "nStart",
                  "type": {
                    "text": "number"
                  },
                  "description": "the starting x or y coordinate of the slider"
                },
                {
                  "name": "nEnd",
                  "type": {
                    "text": "number"
                  },
                  "description": "the ending x or y coordinate of the slider"
                }
              ],
              "description": "Calculate the percent value based on mouse click location",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attaches all necessary event listeners",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#calculateTrackBounds",
              "return": {
                "type": {
                  "text": "IdsSliderTrackBounds"
                }
              },
              "description": "Calculates the x,y coordinates of the bounding box of the clickable track area",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#toggleAnimations",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "toggleOn",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if slider elements should be animated"
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachUIStyles",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets initial slider styles and element placement",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachARIA",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attaches ARIA attributes to some slider elements",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#refreshTrackBounds",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Recalculates and updates the track bounds",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachResizeObserver",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Checks if the window changes sizes and updates UI accordingly",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachClickListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Add event listeners for clicking the track area",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachDragEventListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "primaryOrSecondary",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "the primary or secondary thumb"
                }
              ],
              "description": "Add event listeners for dragging the slider thumbs",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachKeyboardListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Add event listeners for arrow keys to move thumbs",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachFocusListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attaches events to the component related to focusin/focusout behavior",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#decreaseValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "primaryOrSecondary",
                  "type": {
                    "text": "string"
                  },
                  "description": "the primary or secondary value"
                }
              ],
              "description": "Helper method for arrow key actions",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#increaseValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "primaryOrSecondary",
                  "type": {
                    "text": "string"
                  },
                  "description": "the primary or secondary value"
                }
              ],
              "description": "Helper method for arrow key actions",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-slider/ids-slider.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsSlider",
            "module": "src/components/ids-slider/ids-slider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-spinbox/ids-spinbox.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Spinbox Component",
          "name": "IdsSpinbox",
          "cssParts": [
            {
              "description": "the overall container of the spinbox",
              "name": "container"
            },
            {
              "description": "increment/decrement button",
              "name": "button"
            },
            {
              "description": "input containing value/placeholder",
              "name": "input"
            },
            {
              "description": "label text above the input",
              "name": "label"
            },
            {
              "description": "validation message when there is an error",
              "name": "validation"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "isFormComponent",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true,
              "description": "Return the attributes we handle as getters/setters",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateHostAttributes",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Uses current IdsInput state to set some attributes on its host element",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#appendTriggerButtons"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets up all internal event handling",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "decrementButton",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "incrementButton",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "max",
              "parameters": [
                {
                  "description": "maximum value of the spinbox",
                  "name": "newValue",
                  "type": {
                    "text": "number|null"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "number|null"
                }
              }
            },
            {
              "kind": "field",
              "name": "min",
              "parameters": [
                {
                  "description": "minimum value aof the spinbox",
                  "name": "newValue",
                  "type": {
                    "text": "number|null"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "number|null"
                }
              }
            },
            {
              "kind": "field",
              "name": "step",
              "parameters": [
                {
                  "description": "step value on which the spinbox should count increments/decrements",
                  "name": "newValue",
                  "type": {
                    "text": "number|null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number | string"
                }
              }
            },
            {
              "kind": "field",
              "name": "tabbable",
              "parameters": [
                {
                  "description": "True of false depending if the trigger field is tabbable",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Override tabbable to simplify and ignore trigger buttons (never should be tabbable)",
              "inheritedFrom": {
                "name": "IdsTriggerField",
                "module": "src/components/ids-trigger-field/ids-trigger-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Set the `value` attribute of input",
              "parameters": [
                {
                  "description": "spinbox' input value",
                  "name": "value",
                  "type": {
                    "text": "number | string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "number | string"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setValueWithinLimits",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number | string"
                  },
                  "description": "the incoming value"
                }
              ],
              "description": "Takes an incoming value and \"corrects\" it to match multiples of the step value,\nas well as remain within the min/max boundaries, if defined",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets the disabled attribute",
              "parameters": [
                {
                  "description": "whether or not spinbox\ninteraction is disabled",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "'true'|null"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "description": "Sets the readonly attribute",
              "parameters": [
                {
                  "description": "whether or not spinbox is readonly",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#onStep",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "'up'|'down'"
                  },
                  "description": "direction of step"
                }
              ],
              "description": "callback to increment/decrement value by step",
              "type": {
                "text": "Function"
              }
            },
            {
              "kind": "method",
              "name": "#updateDisabledButtonStates",
              "description": "updates state of whether increment button is disabled",
              "type": {
                "text": "Function"
              }
            },
            {
              "kind": "field",
              "name": "#stepDirection",
              "privacy": "private",
              "type": {
                "text": "'up'|'down'|undefined"
              },
              "description": "represents the direction a user is holding for\nthe spinbox; works to enable long press intervals"
            },
            {
              "kind": "field",
              "name": "#stepCycleTimeout",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "description": "stores a timeout related to value cycling"
            },
            {
              "kind": "method",
              "name": "#getStepButtonCycler",
              "parameters": [
                {
                  "name": "direction",
                  "type": {
                    "text": "'up'|'down'"
                  },
                  "description": "which direction to step towards"
                }
              ],
              "description": "return a handler which begins incrementing/decrementing value in steps",
              "return": {
                "type": {
                  "text": "Function"
                }
              }
            },
            {
              "kind": "method",
              "name": "#onStepButtonUnpressed",
              "parameters": [
                {
                  "name": "e",
                  "optional": true,
                  "type": {
                    "text": "*"
                  },
                  "description": "optional mouse event"
                }
              ],
              "description": "unbinds timers associated with value cycling"
            },
            {
              "kind": "method",
              "name": "#configureMask",
              "description": "Configure the IdsMask settings"
            },
            {
              "kind": "field",
              "name": "elements",
              "description": "Get a list of element dependencies for this component",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsTriggerField",
                "module": "src/components/ids-trigger-field/ids-trigger-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Push color variant to the container element",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttons",
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              },
              "inheritedFrom": {
                "name": "IdsTriggerField",
                "module": "src/components/ids-trigger-field/ids-trigger-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "format",
              "description": "Return format",
              "parameters": [
                {
                  "description": "date, time format",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#attachTriggerButtonEvents",
              "description": "Establish Internal Event Handlers",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsTriggerField",
                "module": "src/components/ids-trigger-field/ids-trigger-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setFieldHeight",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set field height and compact attributes",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsTriggerField",
                "module": "src/components/ids-trigger-field/ids-trigger-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "onFieldHeightChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "the new field height setting"
                }
              ],
              "description": "Updates trigger buttons when the trigger field's fieldHeight property is updated",
              "inheritedFrom": {
                "name": "IdsTriggerField",
                "module": "src/components/ids-trigger-field/ids-trigger-field.ts"
              }
            },
            {
              "kind": "method",
              "name": "trigger",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Fire the trigger event and action.",
              "inheritedFrom": {
                "name": "IdsTriggerField",
                "module": "src/components/ids-trigger-field/ids-trigger-field.ts"
              }
            },
            {
              "kind": "field",
              "name": "generatedId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "triggeredByChange",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['alternate', 'alternate-formatter', 'borderless', 'in-cell', 'list-builder']",
              "description": "Inherited from `IdsColorVariantMixin`",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateVariables",
              "return": {
                "type": {
                  "text": "IdsInputTemplateVariables"
                }
              },
              "description": "Uses current IdsInput state to generate strings used in its template.",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "isPasswordVisible",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateShowHide",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateCapsLock",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "capsLockIcon",
              "type": {
                "text": "HTMLElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "fieldContainer",
              "type": {
                "text": "HTMLElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelEl",
              "type": {
                "text": "HTMLLabelElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLLabelElement"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "revealablePassword",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "sets whether password reveal functionality is available",
              "parameters": [
                {
                  "description": "boolean value sets whether reveal functionality is toggled on or off",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "capsLock",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "sets whether capslock indicatoris enabled or disabled",
              "parameters": [
                {
                  "description": "sets whether capslock indicator functionality is toggled on or off",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "passwordVisible",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "sets whether the password is currently visible",
              "parameters": [
                {
                  "description": "toggles the visibility of the password on or off",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInputState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  },
                  "description": "The property."
                }
              ],
              "description": "Set input state for disabled or readonly",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLabelText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "of label"
                }
              ],
              "description": "Set the label text",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleAutoselect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle autoselect",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleInputFocusEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "optional": true,
                  "type": {
                    "text": "string | null"
                  },
                  "description": "If 'remove', will remove attached events"
                }
              ],
              "description": "Handle input focus event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#capsLockEventSetUp",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "indicates whether to turn events on or off"
                }
              ],
              "description": "handles teardown and set up for capslock detection events",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#attachNativeEvents",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "description": "Setup event handlers that trigger on the host element during native events from the internal HTMLInputElement\nThese trigg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#togglePasswordEventSetUp",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "whether to toggle events on or off"
                }
              ],
              "description": "handles event set up and teardown for password indicator",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#passwordVisibilityHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "toggles the visibility of the password by changing field type",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "description": "When set the input will add a CSS class `is-active` that simulates the text input being \"focused\".",
              "parameters": [
                {
                  "description": "If true will set `text-ellipsis` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoselect",
              "description": "When set the input will select all text on focus",
              "parameters": [
                {
                  "description": "If true will set `autoselect` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "bgTransparent",
              "description": "When set the input will add css class `bg-transparent`",
              "parameters": [
                {
                  "description": "If true will set `bg-transparent` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "textEllipsis",
              "description": "When set the input will add css class `text-ellipsis`",
              "parameters": [
                {
                  "description": "If true will set `text-ellipsis` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "#labelEl",
              "privacy": "private",
              "type": {
                "text": "HTMLLabelElement | undefined"
              },
              "description": "internal reference to a label element a user provides",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Set the `placeholder` of input",
              "parameters": [
                {
                  "description": "of the `placeholder` property",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonlyBackground",
              "parameters": [
                {
                  "description": "If true, causes an IdsInput set to `readonly` to appear\nto use its standard field background color instead of the \"readonly\" state color",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setReadonlyBackground",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelWrap",
              "description": "Set the label wrap setting of input",
              "parameters": [
                {
                  "description": "['ellipsis', 'wrap', 'no-stretch-ellipsis', 'no-stretch-wrap']",
                  "name": "value",
                  "type": {
                    "text": "IdsInputLabelWrap"
                  }
                }
              ],
              "type": {
                "text": "IdsInputLabelWrap"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Set the size (width) of input",
              "parameters": [
                {
                  "description": "[xs, sm, mm, md, lg, full]",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "textAlign",
              "description": "Sets the text alignment",
              "parameters": [
                {
                  "description": "[start, center, end]",
                  "name": "value",
                  "type": {
                    "text": "IdsInputAlignment"
                  }
                }
              ],
              "type": {
                "text": "IdsInputAlignment"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Sets the input type",
              "parameters": [
                {
                  "description": "[text, password, number, phone, email]",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "#id",
              "privacy": "private",
              "description": "set the id of the input, which will also determine the\ninput id for labels at #${id}-input",
              "parameters": [
                {
                  "description": "id",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "cursor",
              "description": "Set the css cursor property to something other than text",
              "parameters": [
                {
                  "description": "the css cursor value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "noMargins",
              "description": "Sets the no margins attribute",
              "parameters": [
                {
                  "description": "true or false or as a string",
                  "name": "n",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "padding",
              "description": "Sets the inner padding (inline-start and end)",
              "parameters": [
                {
                  "description": "string value for the padding",
                  "name": "n",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | number"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides the standard \"blur\" behavior to instead tell the inner HTMLInput element to blur.",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides the standard \"focus\" behavior to instead pass focus to the inner HTMLInput element.",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            }
          ],
          "superclass": {
            "name": "IdsTriggerField",
            "module": "/src/components/ids-trigger-field/ids-trigger-field"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsSpinbox",
            "module": "src/components/ids-spinbox/ids-spinbox.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-splitter/ids-splitter-local-storage.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Splitter Local Storage",
          "name": "IdsSplitterLocalStorage",
          "members": [
            {
              "kind": "field",
              "name": "root",
              "type": {
                "text": "any"
              },
              "default": "root"
            },
            {
              "kind": "method",
              "name": "#canUseLocalStorage",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Returns true if local storage may be used / is available",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#canSavePosition",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "Check if save position, is valid.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "savePosition",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Save position.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "restorePosition",
              "return": {
                "type": {
                  "text": "IdsSplitterSaved|null"
                }
              },
              "description": "Restore the saved position from local storage",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "clearPosition",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "uniqueId",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "If undefined, will use Internal attached."
                }
              ],
              "description": "Clear the saved position from local storage"
            },
            {
              "kind": "method",
              "name": "clearPositionAll",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Clear all related saved position from local storage"
            },
            {
              "kind": "method",
              "name": "idTobeUse",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "uniqueId",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "The uniqueId."
                },
                {
                  "name": "suffix",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "Optional suffix string to make the id more unique."
                },
                {
                  "name": "prefix",
                  "optional": true,
                  "type": {
                    "text": "string"
                  },
                  "description": "Optional prefix string to make the id more unique."
                }
              ],
              "description": "Get the id to be use."
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsSplitterLocalStorage",
            "module": "src/components/ids-splitter/ids-splitter-local-storage.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-splitter/ids-splitter-pane.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS SplitterPane Component",
          "name": "IdsSplitterPane",
          "cssParts": [
            {
              "description": "the splitter pane container element",
              "name": "pane"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-splitter/ids-splitter-pane.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsSplitterPane",
            "module": "src/components/ids-splitter/ids-splitter-pane.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-splitter/ids-splitter.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Splitter Component",
          "name": "IdsSplitter",
          "cssParts": [
            {
              "description": "the splitter container element",
              "name": "splitter"
            },
            {
              "description": "the split bar element",
              "name": "split-bar"
            },
            {
              "description": "the split bar icon element",
              "name": "split-bar-icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "method",
              "name": "sizes",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "description": "Get list of current pane sizes."
            },
            {
              "kind": "method",
              "name": "minSizes",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "description": "Get list of current pane minimum sizes."
            },
            {
              "kind": "method",
              "name": "maxSizes",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "description": "Get list of current pane maximum sizes, limited to single split."
            },
            {
              "kind": "method",
              "name": "collapse",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "default": "{}",
                  "type": {
                    "text": "@param {HTMLElement|string} [options.startPane] The start pane.\n   * @param {HTMLElement|string} [options.endPane] The end pane.\n   * @param {object} [options.pair] The pair.\n   * "
                  },
                  "description": "The collapse options.",
                  "optional": true
                }
              ],
              "description": "Collapse start pane size for given start/end panes or panes css selector."
            },
            {
              "kind": "method",
              "name": "expand",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "default": "{}",
                  "type": {
                    "text": "@param {HTMLElement|string} [options.startPane] The start pane.\n   * @param {HTMLElement|string} [options.endPane] The end pane.\n   * @param {object} [options.pair] The pair.\n   * "
                  },
                  "description": "The expand options.",
                  "optional": true
                }
              ],
              "description": "Expand start pane size for given start/end panes or panes css selector."
            },
            {
              "kind": "method",
              "name": "getAllPairs",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "description": "Get list of all pairs."
            },
            {
              "kind": "method",
              "name": "getPair",
              "return": {
                "type": {
                  "text": "object|undefined"
                }
              },
              "parameters": [
                {
                  "name": "options",
                  "default": "{}",
                  "type": {
                    "text": "@param {HTMLElement|string} [options.startPane] The start pane.\n   * @param {HTMLElement|string} [options.endPane] The end pane.\n   * "
                  },
                  "description": "The expand options.",
                  "optional": true
                }
              ],
              "description": "Get pair for given start/end panes or panes css selector."
            },
            {
              "kind": "field",
              "name": "#container",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "default": "{ size: 0 }",
              "description": "Container width."
            },
            {
              "kind": "field",
              "name": "#prop",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "default": "{}",
              "description": "Store some properties based on current axis."
            },
            {
              "kind": "field",
              "name": "#moving",
              "privacy": "private",
              "type": {
                "text": "any"
              },
              "default": "{}",
              "description": "Track while moving."
            },
            {
              "kind": "field",
              "name": "#panes",
              "privacy": "private",
              "type": {
                "text": "Array<any>"
              },
              "default": "[]",
              "description": "List of pane elements attached."
            },
            {
              "kind": "field",
              "name": "#pairs",
              "privacy": "private",
              "type": {
                "text": "Array<any>"
              },
              "default": "[]",
              "description": "List of pair elements attached."
            },
            {
              "kind": "field",
              "name": "#defaultsSize",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Defaults pane size."
            },
            {
              "kind": "field",
              "name": "#expandSizes",
              "privacy": "private",
              "type": {
                "text": "Array<number>"
              },
              "default": "[]",
              "description": "List of pane expand sizes."
            },
            {
              "kind": "field",
              "name": "#sizes",
              "privacy": "private",
              "type": {
                "text": "Array<number>"
              },
              "default": "[]",
              "description": "List of pane sizes."
            },
            {
              "kind": "field",
              "name": "#minSizes",
              "privacy": "private",
              "type": {
                "text": "Array<number>"
              },
              "default": "[]",
              "description": "List of pane minimun sizes."
            },
            {
              "kind": "field",
              "name": "#maxSizes",
              "privacy": "private",
              "type": {
                "text": "Array<number>"
              },
              "default": "[]",
              "description": "List of pane maximum sizes."
            },
            {
              "kind": "field",
              "name": "#resizeObserver",
              "privacy": "private",
              "default": "new ResizeObserver(() => this.#resize())",
              "description": "Attach the resize observer."
            },
            {
              "kind": "method",
              "name": "#initObserverCallback",
              "description": "Attach the initialize observer.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "#initObserver",
              "privacy": "private",
              "description": "Attach the initialize observer."
            },
            {
              "kind": "field",
              "name": "#ls",
              "privacy": "private",
              "default": "new IdsSplitterLocalStorage(this)",
              "description": "Local storage instance attached to component."
            },
            {
              "kind": "field",
              "name": "clearPosition",
              "description": "Clear the saved position from local storage",
              "parameters": [
                {
                  "description": "If undefined, will use Internal attached.",
                  "name": "uniqueId",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "clearPositionAll",
              "description": "Clear all related saved position from local storage",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "idTobeUse",
              "description": "Get the id to be use.",
              "parameters": [
                {
                  "description": "The uniqueId.",
                  "name": "uniqueId",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "description": "Optional suffix string to make the id more unique.",
                  "name": "suffix",
                  "type": {
                    "text": "string"
                  }
                },
                {
                  "description": "Optional prefix string to make the id more unique.",
                  "name": "prefix",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#init",
              "description": "Initialize the component",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#resize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Resize the component",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setProp",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Set to store properties based on current axis.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setContainer",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Set container size width/height value based on current axis.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#initialSizes",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Set initial sizes, min-sizes and pane elements",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#splitId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  },
                  "description": "The value to be use as id."
                }
              ],
              "description": "Get splitId prefix with given value, use for each split bar element.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#addSplitBars",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Add split bar elements.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#moveDragHandle",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "CustomEvent"
                  },
                  "description": "the event from the handler"
                }
              ],
              "description": "Adjust the position of the handle",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setPairs",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Each pair has reference to start/end panes and each split bar.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#positionSplitBars",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Adjust split bars position",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setInitialCollapsed",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Set initial collapsed panes.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setCollapsedAttribute",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "parameters": [
                {
                  "name": "pair",
                  "type": {
                    "text": "any"
                  },
                  "description": "The pair object."
                }
              ],
              "description": "Set collapsed attribute to given start pane based start pane size.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setDisabled",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Set disabled state to container and for each split bars.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#moveStart",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "pair",
                  "type": {
                    "text": "any"
                  },
                  "description": "The pair object."
                }
              ],
              "description": "Set pair and moving values to go with move.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#moveEnd",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "pair",
                  "type": {
                    "text": "object"
                  },
                  "description": "The pair object."
                }
              ],
              "description": "Adjust moving difference to apply with pair.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#move",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "pair",
                  "type": {
                    "text": "object"
                  },
                  "description": "The pair object."
                }
              ],
              "description": "Move split bar and adjust panes for given difference.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#adjustDiff",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "pair",
                  "type": {
                    "text": "object"
                  },
                  "description": "The start object in pair."
                }
              ],
              "description": "Adjust given difference and ignore out of bound value.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#updateSize",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "parameters": [
                {
                  "name": "pair",
                  "type": {
                    "text": "object"
                  },
                  "description": "The pair."
                }
              ],
              "description": "Update pair size with given difference percentages value.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#triggerEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "evt",
                  "type": {
                    "text": "string"
                  },
                  "description": "The event to be trigger."
                },
                {
                  "name": "pair",
                  "type": {
                    "text": "object"
                  },
                  "description": "The pair."
                },
                {
                  "name": "res",
                  "optional": true,
                  "type": {
                    "text": "object"
                  },
                  "description": "The veto response method."
                }
              ],
              "description": "Trigger given event with current params.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#updateSizeAndSplitBar",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "pair",
                  "type": {
                    "text": "object"
                  },
                  "description": "The pair."
                }
              ],
              "description": "Update given pair size and adjust split bars min/max positions.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#percentageVal",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string|number|null"
                  },
                  "description": "The value"
                }
              ],
              "description": "Get given value as percentages",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#toPercentage",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string|number|null"
                  },
                  "description": "The value"
                }
              ],
              "description": "Convert given value to percentages",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#toPixel",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string|number|null"
                  },
                  "description": "The value"
                }
              ],
              "description": "Convert given value to pixels",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#uniquePaneId",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Generate unique pane id.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Establish Internal Event Handlers",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onLanguageChange",
              "description": "Handle Languages Changes - for switching between RTL to LTR"
            },
            {
              "kind": "method",
              "name": "#destroy",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Destroy added elements and unbind events."
            },
            {
              "kind": "field",
              "name": "isHorizontal",
              "type": {
                "text": "boolean"
              },
              "description": "Check if current orientation is horizontal",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "axis",
              "description": "Set the splitter axis direction x: horizontal or y: vertical",
              "parameters": [
                {
                  "description": "of the axis x or y",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets the splitter to disabled",
              "parameters": [
                {
                  "description": "If true will set disabled attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Set the aria-label text for each split bar.",
              "parameters": [
                {
                  "description": "of the label text.",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "resizeOnDragEnd",
              "description": "Sets the splitter to resize on drag end",
              "parameters": [
                {
                  "description": "If true will set to resize on drag end",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "savePosition",
              "description": "Set splitter save position to local storage.",
              "parameters": [
                {
                  "description": "if true, will allow to save position to local storage.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "uniqueId",
              "description": "Set uniqueId to save to local storage.",
              "parameters": [
                {
                  "description": "A uniqueId use to save to local storage.",
                  "name": "value",
                  "type": {
                    "text": "number|string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "object"
              },
              "default": "{\n      ...this.state,\n      ...SPLITTER_DEFAULTS\n    }"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-splitter/ids-splitter.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsSplitter",
            "module": "src/components/ids-splitter/ids-splitter.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-step-chart/ids-step-chart.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Step Chart Component",
          "name": "IdsStepChart",
          "cssParts": [
            {
              "description": "slot for completed message icons",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "internalStepsInProgress",
              "type": {
                "text": "number[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "color",
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "sets the color variable that is used to fill\ncompleted steps",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "completedLabel",
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "set the text for the secondary label",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets the disabled state",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "set the primary label for the step chart",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "progressColor",
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "sets the ids color variable that in progress steps use",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "stepNumber",
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "description": "sets the number of steps in the step chart",
                  "name": "value",
                  "type": {
                    "text": "string|number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "stepsInProgress",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "parameters": [
                {
                  "description": "updates the list of steps that are marked as\nin progress",
                  "name": "value",
                  "type": {
                    "text": "Array"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "value",
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "description": "sets the number of the last step in the array to be filled in",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "method",
              "name": "#updateColor",
              "description": "updates the colors and classes of the step divs"
            }
          ],
          "mixins": [
            {
              "name": "IdsEventsMixin",
              "module": "/src/mixins/ids-events-mixin/ids-events-mixin"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsStepChart",
            "module": "src/components/ids-step-chart/ids-step-chart.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-swaplist/ids-swaplist.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS SwapList Component",
          "name": "IdsSwapList",
          "members": [
            {
              "kind": "field",
              "name": "datasource",
              "default": "new IdsDataSource()"
            },
            {
              "kind": "field",
              "name": "defaultTemplate",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Set the data array of the swaplist",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "any | null"
                  }
                }
              ],
              "type": {
                "text": "any | null"
              }
            },
            {
              "kind": "method",
              "name": "#swapToNextList",
              "parameters": [
                {
                  "name": "button",
                  "type": {
                    "text": "any"
                  },
                  "description": "htmlElement"
                }
              ],
              "description": "Swap the list item to the next list",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#swapToPreviousList",
              "parameters": [
                {
                  "name": "button",
                  "type": {
                    "text": "any"
                  },
                  "description": "htmlElement"
                }
              ],
              "description": "Swap the list item to the previous list",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "selectedItems",
              "type": {
                "text": "any"
              },
              "description": "Get all selected ids-swappable-item",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "count",
              "description": "Get the count of lists",
              "parameters": [
                {
                  "description": "number of lists",
                  "name": "value",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "buttonTemplate",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "parameters": [
                {
                  "name": "i",
                  "type": {
                    "text": "number"
                  },
                  "description": "index of the list"
                }
              ],
              "description": "Setup the next/prev button template"
            },
            {
              "kind": "method",
              "name": "itemTemplateFunc",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Item template function that will generate the swappable items"
            },
            {
              "kind": "method",
              "name": "itemTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "any"
                  },
                  "description": "The item to generate"
                }
              ],
              "description": "Return an item's html injecting any values from the dataset as needed."
            },
            {
              "kind": "method",
              "name": "listTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Set up the list view template"
            },
            {
              "kind": "method",
              "name": "#handleItemSwap",
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  },
                  "description": "event paramater"
                }
              ],
              "description": "Handle the item swap logic",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "attachEventHandlers",
              "description": "Attach event handlers"
            },
            {
              "kind": "method",
              "name": "render"
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Create the Template for the contents",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-swaplist/ids-swaplist.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsSwapList",
            "module": "src/components/ids-swaplist/ids-swaplist.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-swappable/ids-swappable-item.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Swappable Item Component",
          "name": "IdsSwappableItem",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "dragMode",
              "type": {
                "text": "IdsSwappableDragMode | null"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "Get the selected attribute",
              "parameters": [
                {
                  "description": "boolean value",
                  "name": "value",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectedItems",
              "type": {
                "text": "NodeListOf<IdsSwappableItem> | undefined"
              },
              "description": "Get all selected swappable items",
              "return": {
                "type": {
                  "text": "NodeListOf<IdsSwappableItem>"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "allItems",
              "type": {
                "text": "NodeListOf<IdsSwappableItem> | undefined"
              },
              "description": "Get all swappable items",
              "return": {
                "type": {
                  "text": "NodeListOf<IdsSwappableItem>"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "originalText",
              "description": "Get the originalText attribute",
              "parameters": [
                {
                  "description": "text value of the item",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selection",
              "type": {
                "text": "string | undefined | null"
              },
              "description": "Get the selection attribute",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "tabbable",
              "description": "Get whether the item currently allows tabbing.",
              "parameters": [
                {
                  "description": "True of false depending if the item is tabbable",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#dragStart",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  },
                  "description": "dragstart event"
                }
              ],
              "description": "Handle functionality for the dragstart event"
            },
            {
              "kind": "method",
              "name": "#dragEnd",
              "description": "Handle functionality for the dragend event"
            },
            {
              "kind": "method",
              "name": "#dragOver",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  },
                  "description": "dragstart event"
                }
              ],
              "description": "Handle functionality for the dragover event"
            },
            {
              "kind": "method",
              "name": "#dragLeave",
              "description": "Handle functionality for the dragleave event"
            },
            {
              "kind": "method",
              "name": "#toggleSelect",
              "description": "Toggles the select attribute when\nids-swappable is not set to selection"
            },
            {
              "kind": "method",
              "name": "#toggleMultiSelect",
              "description": "Toggles the select attribute when\nids-swappable is set to selection"
            },
            {
              "kind": "method",
              "name": "#handleKeyEvents",
              "description": "Handle the keyboard events"
            },
            {
              "kind": "method",
              "name": "#handleClickEvents",
              "description": "Handle the click events"
            },
            {
              "kind": "method",
              "name": "#handleDragEvents",
              "description": "Handle the drag events"
            },
            {
              "kind": "method",
              "name": "attachEventListeners",
              "description": "Attach all event listeners"
            },
            {
              "kind": "method",
              "name": "#addCssClasses",
              "description": "Adding CSS classes to the component with a name of slotted element\nAllows to style the component for different cases"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-swappable/ids-swappable-item.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsSwappableItem",
            "module": "src/components/ids-swappable/ids-swappable-item.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-swappable/ids-swappable.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Swappable Component",
          "name": "IdsSwappable",
          "members": [
            {
              "kind": "field",
              "name": "draggingElements",
              "type": {
                "text": "Array<IdsSwappableItem>"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "overElement",
              "type": {
                "text": "IdsSwappableItem | null"
              },
              "description": "Get the item that is dragged over",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "selectedItems",
              "type": {
                "text": "any"
              },
              "description": "Get all the selected ids-swappable-items in the current list",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "#startY",
              "privacy": "private",
              "type": {
                "text": "null | number"
              },
              "default": "null",
              "description": "Holds the current start `y` position for drag element"
            },
            {
              "kind": "method",
              "name": "#dzDragStart",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  },
                  "description": "drag event"
                }
              ],
              "description": "Handle functionality for the dragstart event"
            },
            {
              "kind": "method",
              "name": "#dzDrag",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  },
                  "description": "drag event"
                }
              ],
              "description": "Handle functionality for the drag event"
            },
            {
              "kind": "field",
              "name": "getDragAfterElement",
              "description": "Calculate the position of the dragging element relative to the container",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "description": "ids-swappable container",
                  "name": "container",
                  "type": {
                    "text": "any"
                  }
                },
                {
                  "description": "position of the dragging element",
                  "name": "y",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#dzDropHandler",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "object"
                  },
                  "description": "drop"
                }
              ],
              "description": "Handle functionality for the list container once an item has been dropped"
            },
            {
              "kind": "method",
              "name": "#dzDragLeave",
              "description": "Handle functionality for the dragleave event"
            },
            {
              "kind": "method",
              "name": "#dzDragover",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  },
                  "description": "drop"
                }
              ],
              "description": "Functionality for the list container once we are hovering over the list"
            },
            {
              "kind": "method",
              "name": "#hideDraggingItems",
              "parameters": [
                {
                  "name": "event",
                  "type": {
                    "text": "any"
                  },
                  "description": "object"
                },
                {
                  "name": "el",
                  "type": {
                    "text": "any"
                  },
                  "description": "all dragging elements"
                }
              ],
              "description": "Hide the dragging items during drag event"
            },
            {
              "kind": "method",
              "name": "#resetDraggingItems",
              "parameters": [
                {
                  "name": "el",
                  "type": {
                    "text": "any"
                  },
                  "description": "all selected elements"
                }
              ],
              "description": "Reset the selected items after drop event"
            },
            {
              "kind": "method",
              "name": "#dzDragEnd",
              "description": "Handle functionality for the dragend event"
            },
            {
              "kind": "method",
              "name": "attachEventListeners",
              "description": "Attach all event listeners"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-swappable/ids-swappable.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsSwappable",
            "module": "src/components/ids-swappable/ids-swappable.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-swipe-action/ids-swipe-action.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS SwipeAction Component",
          "name": "IdsSwipeAction",
          "cssParts": [
            {
              "description": "the contents",
              "name": "container"
            },
            {
              "description": "the left action",
              "name": "action-left"
            },
            {
              "description": "the right  action",
              "name": "action-right"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "leftButton",
              "type": {
                "text": "IdsButton | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "rightButton",
              "type": {
                "text": "IdsButton | null"
              },
              "default": "null"
            },
            {
              "kind": "method",
              "name": "#afterConnectedCallback",
              "description": "Scroll to the center container on render",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "description": "Establish Internal Event Handlers",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "swipeType",
              "description": "Set the swipe interaction method between continuous and reveal (default)",
              "parameters": [
                {
                  "description": "The swipe interation type",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-swipe-action/ids-swipe-action.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsSwipeAction",
            "module": "src/components/ids-swipe-action/ids-swipe-action.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-switch/ids-switch.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Switch Component",
          "name": "IdsSwitch",
          "cssParts": [
            {
              "description": "the checkbox input element",
              "name": "checkbox"
            },
            {
              "description": "the sliding part of the switch",
              "name": "slider"
            },
            {
              "description": "the label text",
              "name": "label"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "labelEl",
              "type": {
                "text": "HTMLLabelElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "isFormComponent",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "method",
              "name": "#attachSwitchChangeEvent",
              "parameters": [
                {
                  "name": "option",
                  "default": "''",
                  "description": "If 'remove', will remove attached events",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Handle switch change event",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "attachNativeEvents",
              "parameters": [
                {
                  "name": "option",
                  "default": "''",
                  "description": "If 'remove', will remove attached events",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Establish Internal Event Handlers",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "description": "Handle events",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "checked",
              "description": "Sets the checked state to true or false",
              "parameters": [
                {
                  "description": "If true will set `checked` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets checkbox to disabled",
              "parameters": [
                {
                  "description": "If true will set `disabled` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Set the `label` text",
              "parameters": [
                {
                  "description": "of the `label` text property",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Sets the checkbox `value` attribute",
              "parameters": [
                {
                  "description": "the value property",
                  "name": "val",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Overrides the standard \"focus\" behavior to instead pass focus to the inner HTMLInput element."
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-switch/ids-switch.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsSwitch",
            "module": "src/components/ids-switch/ids-switch.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-tabs/ids-tab-content.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS TabContent Component",
          "name": "IdsTabContent",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template"
            },
            {
              "kind": "field",
              "name": "value",
              "parameters": [
                {
                  "description": "representing associated tab",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "active",
              "parameters": [
                {
                  "description": "Whether or not this tab will be flagged as active/visible",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "boolean|string"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-tabs/ids-tab-content.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsTabContent",
            "module": "src/components/ids-tabs/ids-tab-content.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-tabs/ids-tab-divider.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Tab Divider Component",
          "name": "IdsTabDivider",
          "cssParts": [
            {
              "description": "the tab divider",
              "name": "divider"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "template",
              "description": "Create the Template for the contents",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsTabDivider",
            "module": "src/components/ids-tabs/ids-tab-divider.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-tabs/ids-tab-more.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Tab Component",
          "name": "IdsTabMore",
          "cssParts": [
            {
              "description": "the tab container itself",
              "name": "container"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents",
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "any"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "moreActionsGroup",
              "type": {
                "text": "any"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "predefinedMenuItems",
              "type": {
                "text": "Array<any>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              }
            },
            {
              "kind": "field",
              "name": "overflowMenuItems",
              "type": {
                "text": "Array<any>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              }
            },
            {
              "kind": "field",
              "name": "availableOverflowTabs",
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<any>"
                }
              }
            },
            {
              "kind": "method",
              "name": "#moreActionsMenuTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#moreActionsItemTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "an element from inside the Tab List that will be mirrored in the More Actions menu"
                },
                {
                  "name": "isSubmenuItem",
                  "default": "false",
                  "description": "true if the item provided is a submenu item",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "refreshOverflowedItems",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Refreshes the visible state of menu items representing \"overflowed\" elements,\nand hides/shows this component from view"
            },
            {
              "kind": "method",
              "name": "renderOverflowedItems",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Re-renders the overflowed items",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "overflow",
              "parameters": [
                {
                  "description": "truthy if this More Actions menu should display overflowed Tabs from the Tab List",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "hasVisibleActions",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "hasEnabledActions",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "isOverflowed",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "reference to the Tab to be checked for overflow"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#configureMenu"
            },
            {
              "kind": "method",
              "name": "#attachMoreMenuEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "onAction",
              "type": {
                "text": "IdsTabOnActionCallback | undefined"
              },
              "parameters": [
                {
                  "description": "a user-defined callback function that can be applied to a Tab",
                  "name": "onAction",
                  "type": {
                    "text": "IdsTabOnActionCallback"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['alternate', 'module']",
              "description": "Inherited from `IdsColorVariantMixin`",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "array"
              },
              "default": "[\n    'beforetabremove',\n  ]",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "#templateDismissible",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "#getDismissibleVariant",
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "#afterConnectedCallback",
              "description": "Refresh component's bindings after render",
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "actionable",
              "parameters": [
                {
                  "description": "true if this Tab should be displayed as an \"action\" (small, low padding, no flex)",
                  "name": "isActionable",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "dismissible",
              "parameters": [
                {
                  "description": "true if this Tab should contain an \"X\" icon used for dismissal",
                  "name": "isDismissible",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "dismissibleBtnEl",
              "type": {
                "text": "any"
              },
              "description": "Provides a reference to a close button, if applicable",
              "return": {
                "type": {
                  "text": "HTMLElement | null"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "parameters": [
                {
                  "description": "true if the tab should become disabled",
                  "name": "isDisabled",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "parameters": [
                {
                  "description": "Whether or not this tab is selected.",
                  "name": "isSelected",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "#select",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "isSelected",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if the tab has been selected"
                }
              ],
              "description": "Triggers the `tabselect` event",
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "parameters": [
                {
                  "description": "The value which becomes selected by ids-tabs component",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "#valueChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "The value which becomes selected by ids-tabs component"
                }
              ],
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "count",
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "The number of items represented in the tab (may or may not apply)",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "#getReadableAriaLabel",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "sets aria readable label by\ngrabbing all ids-text nodes in order\nthey appear in the DOM",
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "field",
              "name": "#setDataTextForBoldFix",
              "privacy": "private",
              "description": "Sets the data-text of nested ids-text to it's slot\ntext content. Fixes issue with bold moving around\nwhen we edit content.",
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "#detectSwappable",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets/removes CSS classes on this tab that control \"swappable\" display",
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "dismiss",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Dismisses this tab, if possible",
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Causes the tab to become focused",
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IdsTab",
                "module": "src/components/ids-tabs/ids-tab.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "IdsLocaleMixin",
              "module": "/src/mixins/ids-locale-mixin/ids-locale-mixin"
            }
          ],
          "superclass": {
            "name": "IdsTab",
            "module": "/src/components/ids-tabs/ids-tab"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsTabMore",
            "module": "src/components/ids-tabs/ids-tab-more.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-tabs/ids-tab.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Tab Component",
          "name": "IdsTab",
          "cssParts": [
            {
              "description": "the tab container itself",
              "name": "container"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "onAction",
              "type": {
                "text": "IdsTabOnActionCallback | undefined"
              },
              "parameters": [
                {
                  "description": "a user-defined callback function that can be applied to a Tab",
                  "name": "onAction",
                  "type": {
                    "text": "IdsTabOnActionCallback"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['alternate', 'module']",
              "description": "Inherited from `IdsColorVariantMixin`",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "array"
              },
              "default": "[\n    'beforetabremove',\n  ]",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "method",
              "name": "#templateDismissible",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#getDismissibleVariant"
            },
            {
              "kind": "method",
              "name": "#afterConnectedCallback",
              "description": "Refresh component's bindings after render"
            },
            {
              "kind": "field",
              "name": "actionable",
              "parameters": [
                {
                  "description": "true if this Tab should be displayed as an \"action\" (small, low padding, no flex)",
                  "name": "isActionable",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "dismissible",
              "parameters": [
                {
                  "description": "true if this Tab should contain an \"X\" icon used for dismissal",
                  "name": "isDismissible",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "dismissibleBtnEl",
              "type": {
                "text": "any"
              },
              "description": "Provides a reference to a close button, if applicable",
              "return": {
                "type": {
                  "text": "HTMLElement | null"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "parameters": [
                {
                  "description": "true if the tab should become disabled",
                  "name": "isDisabled",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "parameters": [
                {
                  "description": "Whether or not this tab is selected.",
                  "name": "isSelected",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#select",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "isSelected",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if the tab has been selected"
                }
              ],
              "description": "Triggers the `tabselect` event"
            },
            {
              "kind": "field",
              "name": "value",
              "parameters": [
                {
                  "description": "The value which becomes selected by ids-tabs component",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#valueChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "The value which becomes selected by ids-tabs component"
                }
              ]
            },
            {
              "kind": "field",
              "name": "count",
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "description": "The number of items represented in the tab (may or may not apply)",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#getReadableAriaLabel",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "sets aria readable label by\ngrabbing all ids-text nodes in order\nthey appear in the DOM"
            },
            {
              "kind": "field",
              "name": "#setDataTextForBoldFix",
              "privacy": "private",
              "description": "Sets the data-text of nested ids-text to it's slot\ntext content. Fixes issue with bold moving around\nwhen we edit content."
            },
            {
              "kind": "method",
              "name": "#detectSwappable",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets/removes CSS classes on this tab that control \"swappable\" display"
            },
            {
              "kind": "method",
              "name": "dismiss",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Dismisses this tab, if possible"
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Causes the tab to become focused"
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-tabs/ids-tab.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsTab",
            "module": "src/components/ids-tabs/ids-tab.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-tabs/ids-tabs-context.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Tabs Context Component",
          "name": "IdsTabsContext",
          "cssParts": [
            {
              "description": "the container of all tabs",
              "name": "container"
            }
          ],
          "members": [
            {
              "kind": "method",
              "name": "#afterConnectedCallback"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template"
            },
            {
              "kind": "field",
              "name": "value",
              "parameters": [
                {
                  "description": "The value representing a currently selected tab",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "#changeContentPane",
              "parameters": [
                {
                  "name": "currentValue",
                  "type": {
                    "text": "string"
                  },
                  "description": "the value of the current pane, used to make it inactive"
                },
                {
                  "name": "newValue",
                  "type": {
                    "text": "string"
                  },
                  "description": "the value of the new pane, used to make it active"
                }
              ],
              "description": "Switches the \"Active\" content pane associated with this Tabs Context"
            }
          ],
          "mixins": [
            {
              "name": "IdsEventsMixin",
              "module": "/src/mixins/ids-events-mixin/ids-events-mixin"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsTabsContext",
            "module": "src/components/ids-tabs/ids-tabs-context.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-tabs/ids-tabs.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Tabs Component",
          "name": "IdsTabs",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<any>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "#ro",
              "privacy": "private",
              "default": "new ResizeObserver((entries) => {\n    for (const entry of entries) {\n      if (entry.target.classList.contains('ids-tabs-container')) {\n        this.#resize();\n      }\n    }\n  })",
              "description": "Watches for changes to the Tab List size and recalculates overflowed tabs, if applicable"
            },
            {
              "kind": "method",
              "name": "#resize",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Runs whenever the Tab List's size is altered"
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['alternate', 'module']",
              "description": "Inherited from `IdsColorVariantMixin`",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "field",
              "name": "#value",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "default": "''"
            },
            {
              "kind": "field",
              "name": "value",
              "parameters": [
                {
                  "description": "A value which represents a currently selected tab",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "tabListContainer",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "moreContainer",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "tabListElements",
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "lastTab",
              "type": {
                "text": "IdsTab | undefined"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "lastNavigableTab",
              "type": {
                "text": "any"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "hasTab",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "the tab value to scan"
                }
              ],
              "description": "Reference to the currently-selected tab, if applicable"
            },
            {
              "kind": "method",
              "name": "#detectParentColorVariant",
              "description": "Traverses parent nodes and scans for parent IdsHeader components.\nIf an IdsHeader is found, adjusts this component's ColorVariant accordingly.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "description": "When a child value or this component value changes,\ncalled to rebind onclick callbacks to each child",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#attachAfterRenderEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attaches event handlers that should be applied after rendering occurs"
            },
            {
              "kind": "method",
              "name": "#connectMoreTabs",
              "description": "Configures any slotted `ids-tab-more` components present"
            },
            {
              "kind": "method",
              "name": "nextTab",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "currentTab",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "an contained element (usually an IdsTab) to check for siblings"
                }
              ],
              "description": "Navigates from a specified Tab to the next-available Tab in the list"
            },
            {
              "kind": "method",
              "name": "prevTab",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "currentTab",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "an contained element (usually an IdsTab) to check for siblings"
                }
              ],
              "description": "Navigates from a specified Tab to the previously-available Tab in the list"
            },
            {
              "kind": "method",
              "name": "#selectTab",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "any"
                  },
                  "description": "the new tab to select"
                }
              ],
              "description": "Selects a tab and syncs the entire tab list with the new selection"
            },
            {
              "kind": "method",
              "name": "#dismissTab",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "tab",
                  "type": {
                    "text": "any"
                  },
                  "description": "the new tab to select"
                }
              ],
              "description": "Dismisses (removes) a Tab from the Tab List"
            },
            {
              "kind": "method",
              "name": "#correctSelectedTab",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Detects if a Tab no longer exists and selects an available one"
            },
            {
              "kind": "method",
              "name": "#refreshOverflowedTabs",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attempts to refresh state of the Tab List related to overflowed tabs, if applicable"
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Listen for changes to color variant, which updates each child tab."
            },
            {
              "kind": "method",
              "name": "onOrientationRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Listen for changes to orientation, which updates each child tab."
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-tabs/ids-tabs.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsTabs",
            "module": "src/components/ids-tabs/ids-tabs.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-tag/ids-tag.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Tag Component",
          "name": "IdsTag",
          "cssParts": [
            {
              "description": "the tag element",
              "name": "tag"
            },
            {
              "description": "the icon element",
              "name": "icon"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "field",
              "name": "color",
              "description": "Set the tag color",
              "parameters": [
                {
                  "description": "The color to use between\nsecondary (white), error, success, warning, caution, info or a hex code with the #",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "method",
              "name": "#setContainerColor",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "The color value"
                }
              ],
              "description": "Set the tag color on the element style"
            },
            {
              "kind": "method",
              "name": "#appendIcon",
              "parameters": [
                {
                  "name": "iconName",
                  "type": {
                    "text": "string"
                  },
                  "description": "The icon name to check"
                }
              ],
              "description": "Check if an icon exists if not add it",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#removeIcon",
              "parameters": [
                {
                  "name": "iconName",
                  "type": {
                    "text": "string"
                  },
                  "description": "The icon name to check"
                }
              ],
              "description": "Check if an icon exists if so, remove it",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "dismissible",
              "description": "If set to true the tag has an x to dismiss",
              "parameters": [
                {
                  "description": "true of false depending if the tag is dismissed",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "#addDimissibleIcon",
              "description": "Add the dismissible icon if the tag is dismissible",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "clickable",
              "description": "Gets clickable state",
              "parameters": [
                {
                  "description": "true or false depending if the tag is clickable",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Establish Internal Event Handlers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachKeyboardListeners",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Establish Internal Keyboard shortcuts",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "dismiss",
              "description": "Remove the tag from the page"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-tag/ids-tag.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsTag",
            "module": "src/components/ids-tag/ids-tag.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-text/ids-text.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Text Component",
          "name": "IdsText",
          "cssParts": [
            {
              "description": "the text element",
              "name": "text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['alternate']",
              "description": "Inherited from `IdsColorVariantMixin`",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "description": "Handle internal events",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "fontSize",
              "description": "Set the font size of the text with a class.",
              "parameters": [
                {
                  "description": "The font size in the font scheme\ni.e. 10, 12, 16 ect increasing by increments of 4",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "fontWeight",
              "description": "Adjust font weight; can be either \"bold\" or \"lighter\"",
              "parameters": [
                {
                  "description": "(if bold)",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "FontWeightClasses | null"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Set the type of element it is (h1-h6, span (default))",
              "parameters": [
                {
                  "description": "The type of element",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "method",
              "name": "#setTypeClass",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "the class type to check/add"
                }
              ],
              "description": "Sets a CSS Class on the container element for some Text types"
            },
            {
              "kind": "field",
              "name": "color",
              "description": "If set to \"unset\", color can be controlled by parent container\nIf set to \"muted\" will apply as disabled color",
              "parameters": [
                {
                  "description": "\"unset\" or undefined/null",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "audible",
              "description": "Set audible as screen reader only text",
              "parameters": [
                {
                  "description": "The audible value",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Set the text to disabled color.",
              "parameters": [
                {
                  "description": "True if disabled",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "description": "Set the text to error color.",
              "parameters": [
                {
                  "description": "True if error text",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Set the text to label color.",
              "parameters": [
                {
                  "description": "True if label text",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Set the text to data color.",
              "parameters": [
                {
                  "description": "True if data text",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "overflow",
              "description": "Set how content overflows; can specify 'ellipsis', or undefined or 'none'",
              "parameters": [
                {
                  "description": "how content is overflow",
                  "name": "value",
                  "optional": true,
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "textAlign",
              "description": "Set the given text align",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "textAlignClass",
              "return": {
                "type": {
                  "text": "string|Array<string>"
                }
              },
              "parameters": [
                {
                  "name": "isAll",
                  "optional": true,
                  "type": {
                    "text": "boolean|undefined"
                  },
                  "description": "If true, will return all classes as array"
                }
              ],
              "description": "Get text-align class name/s with prefixed value"
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Set the given status",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "method",
              "name": "statusClass",
              "return": {
                "type": {
                  "text": "string|Array<string>"
                }
              },
              "parameters": [
                {
                  "name": "isAll",
                  "optional": true,
                  "type": {
                    "text": "boolean|undefined"
                  },
                  "description": "If true, will return all classes as array"
                }
              ],
              "description": "Get status class name/s with prefixed value"
            },
            {
              "kind": "field",
              "name": "translateText",
              "description": "If set to true the value in the text will be considered a key and\nsent to the translation function",
              "parameters": [
                {
                  "description": "If true translate this value",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "method",
              "name": "#translateAsync",
              "description": "Translate the contents asyncronously",
              "privacy": "private"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-text/ids-text.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsText",
            "module": "src/components/ids-text/ids-text.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-textarea/ids-textarea.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Textarea Component",
          "name": "IdsTextarea",
          "cssParts": [
            {
              "description": "the textarea element",
              "name": "textarea"
            },
            {
              "description": "the label element",
              "name": "label"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "autogrowProcessing",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isSafari",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "isFormComponent",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLTextAreaElement | null"
              },
              "return": {
                "type": {
                  "text": "HTMLTextAreaElement"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "fieldContainer",
              "type": {
                "text": "HTMLElement | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "method",
              "name": "setTextareaState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  },
                  "description": "The property."
                }
              ],
              "description": "Set state for disabled or readonly",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleAutoselect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle autoselect",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleAutogrow",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle autogrow",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setBrowser",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set Browser\nwill remove this soon get environment utils setup",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getMaxValue",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "of textarea"
                }
              ],
              "description": "Get the max text value, trim extra",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setLabelText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "of label"
                }
              ],
              "description": "Set the label text",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setAutogrow",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set autogrow",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "adjustHeight",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "oldHeight",
                  "type": {
                    "text": "number"
                  },
                  "description": "old height"
                },
                {
                  "name": "maxHeight",
                  "type": {
                    "text": "number"
                  },
                  "description": "max height"
                },
                {
                  "name": "input",
                  "default": "null",
                  "type": {
                    "text": "HTMLElement|null"
                  },
                  "description": "The textarea input element"
                }
              ],
              "description": "Adjust height to given element",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleCharacterCounter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle character-counter",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handlePrintable",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean|string|null"
                  },
                  "description": "of printable"
                }
              ],
              "description": "Handle printable",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSlotchangeEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle slotchange event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleTextareaFocusEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "default": "''",
                  "type": {
                    "text": "string | undefined | null"
                  },
                  "description": "If 'remove', will remove attached events"
                }
              ],
              "description": "Handle focus event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleTextareaChangeEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle change event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleNativeEvents",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "description": "Establish Internal Event Handlers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updatePrintarea",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates the printarea with current value.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "countLinebreaks",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "s",
                  "type": {
                    "text": "string"
                  },
                  "description": "The string to test."
                }
              ],
              "description": "Counts the number of line breaks in a string",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "updateCounter",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Updates the descriptive markup (counter, etc) to notify the user how many\ncharacters can be typed.",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "autogrow",
              "description": "Set textarea height to be autogrow",
              "parameters": [
                {
                  "description": "If true will set `autogrow` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "autogrowMaxHeight",
              "description": "Set textarea height to be autogrow-max-height",
              "parameters": [
                {
                  "description": "of `autogrow-max-height` attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "autoselect",
              "description": "When set the textarea will select all text on focus",
              "parameters": [
                {
                  "description": "If true will set `autoselect` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "charMaxText",
              "description": "Set `char-max-text` text for character counter",
              "parameters": [
                {
                  "description": "of the `char-max-text` property",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "charRemainingText",
              "description": "Set `char-remaining-text` text for character counter",
              "parameters": [
                {
                  "description": "of the `char-remaining-text` property",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "characterCounter",
              "description": "Set the `character-counter` feature",
              "parameters": [
                {
                  "description": "If true will set `character-counter` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets textarea to disabled",
              "parameters": [
                {
                  "description": "If true will set `disabled` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "#labelEl",
              "privacy": "private",
              "type": {
                "text": "HTMLLabelElement | undefined"
              },
              "description": "internal reference to a label element a user provides"
            },
            {
              "kind": "field",
              "name": "labelEl",
              "type": {
                "text": "HTMLLabelElement | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLLabelElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "maxlength",
              "description": "Set the `maxlength` of textarea",
              "parameters": [
                {
                  "description": "of the `maxlength` property",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Set the `placeholder` of textarea",
              "parameters": [
                {
                  "description": "of the `placeholder` property",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "printable",
              "description": "Set the `printable` of textarea",
              "parameters": [
                {
                  "description": "If true will set `printable` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "description": "Set the textarea to readonly state",
              "parameters": [
                {
                  "description": "If true will set `readonly` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "resizable",
              "description": "Set the textarea to resizable state",
              "parameters": [
                {
                  "description": "If true will set `resizable` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "rows",
              "description": "Set the rows for textarea",
              "parameters": [
                {
                  "description": "If true will set `rows` attribute",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Set the size (width) of textarea",
              "parameters": [
                {
                  "description": "[sm, md, lg, full]",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "textAlign",
              "description": "Sets the text alignment",
              "parameters": [
                {
                  "description": "[left, center, right]",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Set the `value` of textarea",
              "parameters": [
                {
                  "description": "the value property",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-textarea/ids-textarea.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsTextarea",
            "module": "src/components/ids-textarea/ids-textarea.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-theme-switcher/ids-theme-switcher.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Theme Switcher Component",
          "name": "IdsThemeSwitcher",
          "members": [
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "IdsPopupMenu | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "menuButton",
              "type": {
                "text": "IdsMenuButton | null | undefined"
              }
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "description": "Establish Internal Event Handlers",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onLocaleChange"
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "method",
              "name": "menuTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the popup part of the template for the contents"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<any>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "Array<string>"
              },
              "default": "['alternate']",
              "description": "Inherited from `IdsColorVariantMixin`",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "field",
              "name": "mode",
              "description": "Set the mode of the current theme",
              "parameters": [
                {
                  "description": "The mode value for example: light, dark, or high-contrast",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "selfManaged",
              "description": "If true the themes are self managed by eh developer (no fetches will be attempted)",
              "parameters": [
                {
                  "description": "Set to true to include the themes manually",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "theme",
              "description": "Set the theme",
              "parameters": [
                {
                  "description": "The mode value for example: light, dark, or high-contrast",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Implements callback from IdsColorVariantMixin used to\nupdate the color variant setting on children components"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-theme-switcher/ids-theme-switcher.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsThemeSwitcher",
            "module": "src/components/ids-theme-switcher/ids-theme-switcher.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-time-picker/ids-time-picker-common.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "IdsTimePickerCommonAttributes",
          "type": {
            "text": "array"
          },
          "default": "[\n  attributes.AUTOSELECT,\n  attributes.AUTOUPDATE,\n  attributes.DISABLED,\n  attributes.EMBEDDABLE,\n  attributes.ID,\n  attributes.LABEL,\n  attributes.NO_MARGINS,\n  attributes.PLACEHOLDER,\n  attributes.READONLY,\n  attributes.SIZE,\n  attributes.TABBABLE,\n  attributes.VALIDATE,\n  attributes.VALIDATION_EVENTS,\n  attributes.VALUE,\n]"
        },
        {
          "kind": "variable",
          "name": "IdsTimePickerMixinAttributes",
          "type": {
            "text": "array"
          },
          "default": "[\n  attributes.END_HOUR,\n  attributes.FORMAT,\n  attributes.HOURS,\n  attributes.MINUTES,\n  attributes.MINUTE_INTERVAL,\n  attributes.PERIOD,\n  attributes.SECONDS,\n  attributes.SECOND_INTERVAL,\n  attributes.START_HOUR,\n  attributes.USE_CURRENT_TIME,\n]"
        },
        {
          "kind": "function",
          "name": "range",
          "parameters": [
            {
              "name": "start",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "stop",
              "type": {
                "text": "any"
              }
            },
            {
              "name": "step",
              "default": "1"
            }
          ]
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "IdsTimePickerCommonAttributes",
          "declaration": {
            "name": "IdsTimePickerCommonAttributes",
            "module": "src/components/ids-time-picker/ids-time-picker-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "IdsTimePickerMixinAttributes",
          "declaration": {
            "name": "IdsTimePickerMixinAttributes",
            "module": "src/components/ids-time-picker/ids-time-picker-common.ts"
          }
        },
        {
          "kind": "js",
          "name": "range",
          "declaration": {
            "name": "range",
            "module": "src/components/ids-time-picker/ids-time-picker-common.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-time-picker/ids-time-picker-popup.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Time Picker Popup Component",
          "name": "IdsTimePickerPopup",
          "members": [
            {
              "kind": "field",
              "name": "isRendering",
              "type": {
                "text": "boolean"
              },
              "privacy": "private",
              "default": "true"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "method",
              "name": "#dropdowns",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Creates the HTML the timepicker's dropdown fields"
            },
            {
              "kind": "method",
              "name": "renderDropdowns",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Attaches Time Picker dropdowns to the shadow root"
            },
            {
              "kind": "method",
              "name": "updateValue",
              "privacy": "private",
              "description": "Updates the value from attribute setters"
            },
            {
              "kind": "method",
              "name": "attachEventListeners",
              "privacy": "private",
              "description": "Attaches event listeners for inner elements"
            },
            {
              "kind": "method",
              "name": "#getHourOptions",
              "return": {
                "type": {
                  "text": "Array<number>"
                }
              },
              "description": "Get options list for hours dropdown"
            },
            {
              "kind": "method",
              "name": "#hasHourRange",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#hasSeconds",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#hasPeriod",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#is12Hours",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#is24Hours",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#getPeriodStartHour",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "#getPeriodEndHour",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "#getDayPeriodsWithRange",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "onFormatChange"
            },
            {
              "kind": "method",
              "name": "removeRipples",
              "privacy": "private",
              "description": "Removes all button ripples in the component",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#roundToInterval",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  },
                  "description": "minutes or seconds to be rounded"
                },
                {
                  "name": "interval",
                  "type": {
                    "text": "number"
                  },
                  "description": "for value to be rounded to"
                }
              ]
            },
            {
              "kind": "method",
              "name": "syncTimeAttributes",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "time attribute string"
                }
              ],
              "description": "Parse input date and populate dropdowns"
            },
            {
              "kind": "method",
              "name": "triggerSelectedEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "optional": true,
                  "type": {
                    "text": "CustomEvent"
                  },
                  "description": "optional event handler to pass arguments"
                }
              ],
              "description": "Triggers the same `timeselected` event on the Popup's target element that came from the internal Dropdowns"
            },
            {
              "kind": "field",
              "name": "autoupdate",
              "description": "Gets the autoupdate attribute",
              "parameters": [
                {
                  "description": "true or false",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "applyButtonEl",
              "readonly": true,
              "return": {
                "type": {
                  "text": "IdsModalButton"
                }
              }
            },
            {
              "kind": "field",
              "name": "buttons",
              "readonly": true,
              "return": {
                "type": {
                  "text": "NodeList<IdsTimePickerPopupButton>"
                }
              }
            },
            {
              "kind": "field",
              "name": "dropdownContainerEl",
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLDivElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "embeddable",
              "description": "embeddable attribute",
              "parameters": [
                {
                  "description": "embeddable param value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "hours",
              "description": "hours attribute, default is 1",
              "parameters": [
                {
                  "description": "hours param value",
                  "name": "value",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "minutes",
              "description": "minutes attribute, default is 0",
              "parameters": [
                {
                  "description": "minutes param value",
                  "name": "value",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "minuteInterval",
              "description": "minute-interval attribute, default is 5",
              "parameters": [
                {
                  "description": "minute-interval attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "seconds",
              "description": "seconds attribute, default is 0",
              "parameters": [
                {
                  "description": "seconds param value",
                  "name": "value",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "secondInterval",
              "description": "second-interval attribute, default is 5",
              "parameters": [
                {
                  "description": "second-interval attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "period",
              "description": "period attribute, default is first day period in locale calendar",
              "parameters": [
                {
                  "description": "period param value",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "startHour",
              "description": "start-hour attribute, default is 0",
              "parameters": [
                {
                  "description": "to be set as end-hour attribute",
                  "name": "val",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "endHour",
              "description": "end-hour attribute, default is 24",
              "parameters": [
                {
                  "description": "to be set as end-hour attribute",
                  "name": "val",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "useCurrentTime",
              "description": "use-current-time attribute",
              "parameters": [
                {
                  "description": "useCurrentTime param value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "#value",
              "privacy": "private",
              "type": {
                "text": "string"
              },
              "description": "Stored timestring-value of the timepickers input-field",
              "default": "''"
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Gets a timestring that matches the format specified by this.format()",
              "parameters": [
                {
                  "description": "a timestring value for the input-field",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "description": "Focuses the first available dropdown element"
            },
            {
              "kind": "method",
              "name": "getFormattedTime",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "onHide"
            },
            {
              "kind": "method",
              "name": "onShow"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-time-picker/ids-time-picker-popup.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsTimePickerPopup",
            "module": "src/components/ids-time-picker/ids-time-picker-popup.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-time-picker/ids-time-picker.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS TimePicker Component",
          "name": "IdsTimePicker",
          "cssParts": [
            {
              "description": "the container of the component",
              "name": "container"
            },
            {
              "description": "the trigger button",
              "name": "trigger-button"
            },
            {
              "description": "the icon in the trigger button",
              "name": "icon"
            },
            {
              "description": "the input element",
              "name": "input"
            },
            {
              "description": "the popup with dropdowns",
              "name": "popup"
            },
            {
              "description": "the set button in the popup",
              "name": "btn-set"
            },
            {
              "description": "the hours dropdown",
              "name": "hours"
            },
            {
              "description": "the minutes dropdown",
              "name": "minutes"
            },
            {
              "description": "the seconds dropdown",
              "name": "seconds"
            },
            {
              "description": "the period dropdown",
              "name": "period"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "isFormComponent",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "triggerButton",
              "type": {
                "text": "IdsTriggerButton | null | undefined"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "picker",
              "type": {
                "text": "IdsTimePickerPopup | null | undefined"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['alternate-formatter', 'borderless', 'in-cell']",
              "description": "List of available color variants for this component",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Push color variant to the trigger-field element"
            },
            {
              "kind": "method",
              "name": "onLabelStateChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Push label-state to the trigger-field element"
            },
            {
              "kind": "method",
              "name": "onFieldHeightChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "the new field height setting"
                }
              ],
              "description": "Push field-height/compact to the trigger-field element"
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Create the Template for the contents",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "onDirtyTrackerChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "The changed value"
                }
              ],
              "description": "Callback for dirty tracker setting change",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "configurePickerPopup",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#attachKeyboardListeners",
              "return": {
                "type": {
                  "text": "IdsTimePicker"
                }
              },
              "description": "Establish Internal Keyboard shortcuts",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "IdsTimePicker"
                }
              },
              "description": "Establish Internal Event Handlers",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onLocaleChange",
              "description": "Respond to changing locale"
            },
            {
              "kind": "field",
              "name": "onLanguageChange",
              "description": "Respond to changing language"
            },
            {
              "kind": "method",
              "name": "#parseInputValue",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Parse input date and populate dropdowns"
            },
            {
              "kind": "method",
              "name": "#hasPeriod",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#is12Hours",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#is24Hours",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#getHourOptions",
              "return": {
                "type": {
                  "text": "Array<number>"
                }
              },
              "description": "Get options list for hours dropdown"
            },
            {
              "kind": "method",
              "name": "#hasHourRange",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#getPeriodStartHour",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "#getPeriodEndHour",
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "method",
              "name": "#getDayPeriodsWithRange",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "#getTimeOnField",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Get the input-field's timestring value"
            },
            {
              "kind": "method",
              "name": "#setTimeOnField",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the input-field's timestring value"
            },
            {
              "kind": "method",
              "name": "#setTimeValidation",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Valid time validation extend validation mixin"
            },
            {
              "kind": "method",
              "name": "#roundToInterval",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  },
                  "description": "minutes or seconds to be rounded"
                },
                {
                  "name": "interval",
                  "type": {
                    "text": "number"
                  },
                  "description": "for value to be rounded to"
                }
              ]
            },
            {
              "kind": "method",
              "name": "#applyMask",
              "description": "Applying ids-mask to the input when changing locale or format"
            },
            {
              "kind": "method",
              "name": "open",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Public method to open timepicker popup"
            },
            {
              "kind": "method",
              "name": "close",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Public method to close timepicker popup"
            },
            {
              "kind": "method",
              "name": "onHide",
              "description": "Close the timepicker's popup window"
            },
            {
              "kind": "method",
              "name": "onShow",
              "description": "Open the timepicker's popup window"
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "IdsPopup | null"
              },
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "IdsTriggerField | null"
              },
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "format",
              "description": "Gets the time format to use in the picker. Defaults to the current locale's time format or english (\"hh:mm a\")",
              "parameters": [
                {
                  "description": "a variation of \"hh:mm:ss a\"",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Gets a timestring that matches the format specified by this.format()",
              "parameters": [
                {
                  "description": "a timestring value for the input-field",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "autoselect",
              "description": "Gets the autoselect attribute",
              "parameters": [
                {
                  "description": "true or false",
                  "name": "value",
                  "type": {
                    "text": "boolean|string|null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "autoupdate",
              "description": "Gets the autoupdate attribute",
              "parameters": [
                {
                  "description": "true or false",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Gets the disabled attribute",
              "parameters": [
                {
                  "description": "true or false",
                  "name": "value",
                  "type": {
                    "text": "boolean|string|null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "description": "Gets the readonly attribute",
              "parameters": [
                {
                  "description": "true or false",
                  "name": "value",
                  "type": {
                    "text": "boolean|string|null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "onLabelChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "label value"
                }
              ],
              "description": "Handles label attribute changes"
            },
            {
              "kind": "method",
              "name": "onIdChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "id value"
                }
              ],
              "description": "Handles id attribute changes"
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Get the placeholder attribute",
              "parameters": [
                {
                  "description": "the placeholder's text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "noMargins",
              "description": "no-margins attribute",
              "parameters": [
                {
                  "description": "The value for no margins attribute",
                  "name": "value",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Get the size attribute",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "minuteInterval",
              "description": "minute-interval attribute, default is 5",
              "parameters": [
                {
                  "description": "minute-interval attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "secondInterval",
              "description": "second-interval attribute, default is 5",
              "parameters": [
                {
                  "description": "second-interval attribute value",
                  "name": "val",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "embeddable",
              "description": "embeddable attribute",
              "parameters": [
                {
                  "description": "embeddable param value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "hours",
              "description": "hours attribute, default is 1",
              "parameters": [
                {
                  "description": "hours param value",
                  "name": "value",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "hours24",
              "type": {
                "text": "number"
              },
              "description": "Gets hours in 24 hour format",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "minutes",
              "description": "minutes attribute, default is 0",
              "parameters": [
                {
                  "description": "minutes param value",
                  "name": "value",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "seconds",
              "description": "seconds attribute, default is 0",
              "parameters": [
                {
                  "description": "seconds param value",
                  "name": "value",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "period",
              "description": "period attribute, default is first day period in locale calendar",
              "parameters": [
                {
                  "description": "period param value",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "validate",
              "description": "validate attribute",
              "parameters": [
                {
                  "description": "validate param",
                  "name": "val",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string|null"
                }
              }
            },
            {
              "kind": "field",
              "name": "validationEvents",
              "description": "validation-events attributes",
              "parameters": [
                {
                  "description": "validation-events attribute",
                  "name": "val",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "tabbable",
              "description": "tabbable attribute",
              "parameters": [
                {
                  "description": "true or false depending if the trigger field is tabbable",
                  "name": "val",
                  "type": {
                    "text": "boolean|string|null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "startHour",
              "description": "start-hour attribute, default is 0",
              "parameters": [
                {
                  "description": "to be set as end-hour attribute",
                  "name": "val",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "endHour",
              "description": "end-hour attribute, default is 24",
              "parameters": [
                {
                  "description": "to be set as end-hour attribute",
                  "name": "val",
                  "type": {
                    "text": "string|number|null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "useCurrentTime",
              "description": "use-current-time attribute",
              "parameters": [
                {
                  "description": "useCurrentTime param value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "mask",
              "description": "mask attribute",
              "parameters": [
                {
                  "description": "mask param value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean|null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-time-picker/ids-time-picker.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsTimePicker",
            "module": "src/components/ids-time-picker/ids-time-picker.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-toast/ids-toast-message.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Toast Message Component",
          "name": "IdsToastMessage",
          "cssParts": [
            {
              "description": "the toast element",
              "name": "toast"
            },
            {
              "description": "the toast title element",
              "name": "title"
            },
            {
              "description": "the toast message element",
              "name": "message"
            },
            {
              "description": "the close button element",
              "name": "close-button"
            },
            {
              "description": "the icon element for close button",
              "name": "close-button-icon"
            },
            {
              "description": "the toast progress bar element",
              "name": "progress-bar"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the properties we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "field",
              "name": "progressBarEl",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#configureTimeout",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the toast timer",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "removeToastMessage",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Remove the toast message and animate"
            },
            {
              "kind": "method",
              "name": "#updatePlaybackStatus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "isPaused",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "true if playback on the toast message timeout has been paused."
                }
              ],
              "description": "Controls playback status of the Toast Message's progress bar"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Establish Internal Event Handlers",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "audible",
              "description": "Set as invisible on the screen, but still read out lout by screen readers.",
              "parameters": [
                {
                  "description": "If true, causes the toast to be invisible on the screen.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              }
            },
            {
              "kind": "field",
              "name": "progressBar",
              "description": "Set toast to have a visible progress bar.",
              "parameters": [
                {
                  "description": "if true, will show progress with toast.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              }
            },
            {
              "kind": "field",
              "name": "timeout",
              "description": "Set the amount of time, the toast should be present on-screen.",
              "parameters": [
                {
                  "description": "The amount of time in milliseconds.",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ],
              "type": {
                "text": "number | string"
              }
            },
            {
              "kind": "field",
              "name": "messageId",
              "description": "Set toast-id to manage each toast.",
              "parameters": [
                {
                  "description": "A toast-id use.",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-toast/ids-toast-message.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsToastMessage",
            "module": "src/components/ids-toast/ids-toast-message.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-toast/ids-toast-shared.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "DEFAULTS",
          "type": {
            "text": "any"
          },
          "default": "{\n  // Slots default text\n  closeButtonLabel: 'Close',\n  message: '(Content)',\n  title: '(Title)',\n\n  // Api default settings\n  allowLink: false,\n  audible: false,\n  destroyOnComplete: true,\n  draggable: false,\n  position: 'top-end',\n  progressBar: true,\n  savePosition: false,\n  timeout: 6000,\n  uniqueId: null\n}",
          "description": "Default settings"
        },
        {
          "kind": "variable",
          "name": "AUDIBLE_TIMEOUT",
          "type": {
            "text": "number"
          },
          "default": "100"
        },
        {
          "kind": "variable",
          "name": "ATTRIBUTE_MESSAGE_ID",
          "type": {
            "text": "string"
          },
          "default": "'message-id'"
        },
        {
          "kind": "variable",
          "name": "ATTRIBUTE_TOAST_DESTROY_ON_COMPLETE",
          "type": {
            "text": "string"
          },
          "default": "'destroy-on-complete'"
        },
        {
          "kind": "variable",
          "name": "TOAST_MESSAGE_CLASSES",
          "type": {
            "text": "object"
          },
          "default": "{ start: 'effect-scale', end: 'effect-scale-hide' }"
        },
        {
          "kind": "variable",
          "name": "POSITIONS",
          "type": {
            "text": "array"
          },
          "default": "['bottom-end', 'bottom-start', 'top-end', 'top-start']"
        },
        {
          "kind": "variable",
          "name": "EVENTS",
          "type": {
            "text": "object"
          },
          "default": "{\n  addMessage: 'add-message',\n  removeMessage: 'remove-message',\n  savePosition: 'save-position',\n  clearPosition: 'clear-position',\n  removeContainer: 'remove-container',\n}"
        },
        {
          "kind": "function",
          "name": "id",
          "parameters": [
            {
              "name": "uniqueId",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "The uniqueId."
            },
            {
              "name": "suffix",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "Optional suffix string to make the id more unique."
            },
            {
              "name": "prefix",
              "optional": true,
              "type": {
                "text": "string"
              },
              "description": "Optional prefix string to make the id more unique."
            }
          ],
          "description": "Get the id to be use with current container.",
          "privacy": "private",
          "return": {
            "type": {
              "text": "string"
            }
          }
        },
        {
          "kind": "function",
          "name": "messageId",
          "parameters": [
            {
              "name": "uniqueId",
              "type": {
                "text": "string"
              },
              "description": "The uniqueId."
            },
            {
              "name": "idSegment",
              "type": {
                "text": "string"
              },
              "description": "The id part with out the uniqueId."
            }
          ],
          "description": "Get the Message ID to be use with current message in current container.",
          "privacy": "private",
          "return": {
            "type": {
              "text": "string"
            }
          }
        },
        {
          "kind": "function",
          "name": "slotVal",
          "parameters": [
            {
              "name": "root",
              "type": {
                "text": "object"
              },
              "description": "The shadow root."
            },
            {
              "name": "slotName",
              "type": {
                "text": "string"
              },
              "description": "The slot name."
            }
          ],
          "description": "Get the value for given slot.",
          "privacy": "private",
          "return": {
            "type": {
              "text": "string"
            }
          }
        },
        {
          "kind": "function",
          "name": "getBoolVal",
          "return": {
            "type": {
              "text": "boolean"
            }
          },
          "parameters": [
            {
              "name": "elem",
              "type": {
                "text": "HTMLElement"
              },
              "description": "The element."
            },
            {
              "name": "attr",
              "type": {
                "text": "string"
              },
              "description": "The attribute name to get the value."
            }
          ],
          "description": "Get the boolean value for given attribute."
        },
        {
          "kind": "function",
          "name": "isBool",
          "parameters": [
            {
              "name": "val",
              "type": {
                "text": "boolean|string"
              },
              "description": "The value."
            }
          ],
          "description": "Check the given value is boolean.",
          "return": {
            "type": {
              "text": "boolean"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "DEFAULTS",
          "declaration": {
            "name": "DEFAULTS",
            "module": "src/components/ids-toast/ids-toast-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "AUDIBLE_TIMEOUT",
          "declaration": {
            "name": "AUDIBLE_TIMEOUT",
            "module": "src/components/ids-toast/ids-toast-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "ATTRIBUTE_MESSAGE_ID",
          "declaration": {
            "name": "ATTRIBUTE_MESSAGE_ID",
            "module": "src/components/ids-toast/ids-toast-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "ATTRIBUTE_TOAST_DESTROY_ON_COMPLETE",
          "declaration": {
            "name": "ATTRIBUTE_TOAST_DESTROY_ON_COMPLETE",
            "module": "src/components/ids-toast/ids-toast-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "TOAST_MESSAGE_CLASSES",
          "declaration": {
            "name": "TOAST_MESSAGE_CLASSES",
            "module": "src/components/ids-toast/ids-toast-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "POSITIONS",
          "declaration": {
            "name": "POSITIONS",
            "module": "src/components/ids-toast/ids-toast-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "EVENTS",
          "declaration": {
            "name": "EVENTS",
            "module": "src/components/ids-toast/ids-toast-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "id",
          "declaration": {
            "name": "id",
            "module": "src/components/ids-toast/ids-toast-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "messageId",
          "declaration": {
            "name": "messageId",
            "module": "src/components/ids-toast/ids-toast-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "slotVal",
          "declaration": {
            "name": "slotVal",
            "module": "src/components/ids-toast/ids-toast-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "getBoolVal",
          "declaration": {
            "name": "getBoolVal",
            "module": "src/components/ids-toast/ids-toast-shared.ts"
          }
        },
        {
          "kind": "js",
          "name": "isBool",
          "declaration": {
            "name": "isBool",
            "module": "src/components/ids-toast/ids-toast-shared.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-toast/ids-toast.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Toast Component",
          "name": "IdsToast",
          "cssParts": [
            {
              "description": "the toast element",
              "name": "toast"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "ls",
              "type": {
                "text": "any | undefined"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the properties we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "field",
              "name": "#toastsMap",
              "privacy": "private",
              "default": "new Map()",
              "description": "Map of toast massages added in container, to keep track each toast.",
              "type": {
                "text": "Map<HTMLElement, object>"
              }
            },
            {
              "kind": "field",
              "name": "#toastsCounter",
              "privacy": "private",
              "type": {
                "text": "number"
              },
              "default": "0",
              "description": "Toatl number of toast massages added in container."
            },
            {
              "kind": "method",
              "name": "clearPosition",
              "parameters": [
                {
                  "name": "uniqueId",
                  "optional": true,
                  "type": {
                    "text": "string|undefined"
                  },
                  "description": "If undefined, will use Internal attached."
                }
              ],
              "description": "Clear the saved position from local storage",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "clearPositionAll",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Clear all toast related saved position from local storage"
            },
            {
              "kind": "method",
              "name": "messageElem",
              "parameters": [
                {
                  "name": "elemId",
                  "type": {
                    "text": "string"
                  },
                  "description": "A message id to use."
                }
              ],
              "description": "Get message element by given message id.",
              "return": {
                "type": {
                  "text": "HTMLElement|undefined"
                }
              }
            },
            {
              "kind": "method",
              "name": "show",
              "parameters": [
                {
                  "name": "options",
                  "optional": true,
                  "type": {
                    "text": "@param {string} [options.title] Text that is displayed in the Toast's title.\n   * @param {string} [options.message] Text that's displayed in the Toast's body.\n   * @param {string} [options.messageId] The toast message id.\n   * @param {string} [options.closeButtonLabel] Text that's use for close button label.\n   * @param {boolean} [options.allowLink] allows user to put links in the toast message.\n   * @param {boolean} [options.audible] Let toast to be invisible on the screen.\n   * @param {boolean} [options.progressBar] To have a visible progress bar.\n   * @param {number} [options.timeout] The amount of time, the toast should be present on-screen.\n   * "
                  },
                  "description": "incoming options"
                }
              ],
              "description": "Show the toast message.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "toastContainer",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "description": "Get toast container"
            },
            {
              "kind": "method",
              "name": "#title",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "The text value."
                }
              ],
              "description": "Create title slot element",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "method",
              "name": "#message",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "The text value."
                },
                {
                  "name": "isAllowLink",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "The option for allow link."
                }
              ],
              "description": "Create message slot element",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "method",
              "name": "#closeButtonLabel",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "The text value."
                }
              ],
              "description": "Create close button label slot element",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "method",
              "name": "#toast",
              "parameters": [
                {
                  "name": "options",
                  "type": {
                    "text": "@param {string} [options.title] Text that is displayed in the Toast's title.\n   * @param {string} [options.message] Text that's displayed in the Toast's body.\n   * @param {string} [options.closeButtonLabel] Text that's use for close button label.\n   * @param {string} [options.messageId] The toast message id.\n   * @param {boolean} [options.allowLink] allows user to put links in the toast message.\n   * @param {boolean} [options.audible] Let toast to be invisible on the screen.\n   * @param {boolean} [options.progressBar] To have a visible progress bar.\n   * @param {number} [options.timeout] The amount of time, the toast should be present on-screen.\n   * "
                  },
                  "description": "incoming options",
                  "optional": true
                }
              ],
              "description": "Create toast message element",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "method",
              "name": "#messageId",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "A message id to use."
                }
              ],
              "description": "Create current message id to manage each message in container.",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#slotVal",
              "parameters": [
                {
                  "name": "slotName",
                  "type": {
                    "text": "string"
                  },
                  "description": "The slot name."
                }
              ],
              "description": "Get the value for given slot.",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#removeFromDom",
              "description": "Remove from DOM the host element.",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#handleRemoveToastMessage",
              "parameters": [
                {
                  "name": "toast",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "The toast message element"
                }
              ],
              "description": "Handle on remove-toast-message",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#canSavePosition",
              "description": "Check if save toast container position, is valid.",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#savePosition",
              "description": "Save toast container position.",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#restorePosition",
              "description": "Restore the saved transform position from local storage",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "#canUseLocalStorage",
              "description": "Returns true if local storage may be used / is available",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#isPosInViewport",
              "parameters": [
                {
                  "name": "pos",
                  "type": {
                    "text": "object"
                  },
                  "description": "The postion to check"
                }
              ],
              "description": "Check if given postion in the viewport",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#createDraggable",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "object"
                  },
                  "description": "the container element"
                }
              ],
              "description": "Create draggable",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "allowLink",
              "description": "Set to put links in the toast message.",
              "parameters": [
                {
                  "description": "If true, allows user to put links in the toast message.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "audible",
              "description": "Set as invisible on the screen, but still read out loud by screen readers.",
              "parameters": [
                {
                  "description": "If true, causes the toast to be invisible on the screen.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "destroyOnComplete",
              "description": "Set to destroy after complete all the toasts.\nwill remove from DOM host element.",
              "parameters": [
                {
                  "description": "if true, will remove from dom.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "draggable",
              "description": "Set user to allows drag/drop the toast container.",
              "parameters": [
                {
                  "description": "if true, allows the drag/drop toast container.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "position",
              "description": "Set position of the toast container in specific place.\nOptions: 'bottom-end', 'bottom-start', 'top-end', 'top-start'",
              "parameters": [
                {
                  "description": "The position value to be use, default use as `top-end`",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "progressBar",
              "description": "Set toast to have a visible progress bar.",
              "parameters": [
                {
                  "description": "if true, will show progress with toast.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              }
            },
            {
              "kind": "field",
              "name": "savePosition",
              "description": "Set toast container to save position to local storage.",
              "parameters": [
                {
                  "description": "if true, will allow to save position to local storage.",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              }
            },
            {
              "kind": "field",
              "name": "timeout",
              "description": "Set the amount of time, the toast should be present on-screen.",
              "parameters": [
                {
                  "description": "The amount of time in milliseconds.",
                  "name": "value",
                  "type": {
                    "text": "number|number"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              }
            },
            {
              "kind": "field",
              "name": "uniqueId",
              "description": "Set uniqueId to save to local storage, so same saved position can be use for whole app.",
              "parameters": [
                {
                  "description": "A uniqueId use to save to local storage.",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ],
              "type": {
                "text": "number | string"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-toast/ids-toast.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsToast",
            "module": "src/components/ids-toast/ids-toast.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-toggle-button/ids-toggle-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Toggle Button Component",
          "name": "IdsToggleButton",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "pressed",
              "description": "Set the pressed (on/off) state",
              "parameters": [
                {
                  "description": "if true, the \"toggle\" is activated",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "appearance",
              "description": "Override setting the \"appearance\" on Toggle Buttons, since they can only be the default style",
              "parameters": [
                {
                  "description": "a valid appearance attribute",
                  "name": "val",
                  "type": {
                    "text": "IdsButtonAppearance | null"
                  }
                }
              ],
              "type": {
                "text": "IdsButtonAppearance"
              },
              "return": {
                "type": {
                  "text": "IdsButtonAppearance"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "iconOff",
              "description": "Defines the `unpressed/off` toggle state icon.",
              "parameters": [
                {
                  "description": "corresponds to an IdsIcon's `icon` property",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "iconOn",
              "description": "Defines the `pressed/on` toggle state icon.",
              "parameters": [
                {
                  "description": "corresponds to an IdsIcon's `icon` property",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "textOff",
              "description": "Defines the `unpressed/off` toggle state text.",
              "parameters": [
                {
                  "description": "`unpressed/off` description text",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "textOn",
              "description": "Defines the `pressed/on` toggle state icon.",
              "parameters": [
                {
                  "description": "corresponds to an IdsIcon's `icon` property",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "method",
              "name": "refreshIcon",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets (or creates) a slotted icon that represents the pressed state",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "refreshText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets (or creates) a slotted span that contains text",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggle",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Toggles the \"pressed\" state of the button"
            },
            {
              "kind": "field",
              "name": "shouldUpdate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setInitialState",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['alternate', 'alternate-formatter']",
              "description": "Inherited from `IdsColorVariantMixin`",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "protoClasses",
              "description": "Figure out the classes",
              "privacy": "private",
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "refreshProtoClasses",
              "description": "Refreshes this button's prototype CSS class",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Inner template contents",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "onHiddenChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "true if hidden"
                }
              ],
              "description": "Handles hidden attribute changes",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "setAriaText",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLButtonElement"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "cssClass",
              "parameters": [
                {
                  "description": "containing CSS classes that will be applied to the button\nStrings will be split into an array and separated by whitespace.",
                  "name": "val",
                  "type": {
                    "text": "Array<string>|string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Passes a disabled attribute from the custom element to the button",
              "parameters": [
                {
                  "description": "true if the button will be disabled",
                  "name": "val",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "#tabIndex",
              "privacy": "private",
              "description": "Passes a tabIndex attribute from the custom element to the button",
              "parameters": [
                {
                  "description": "the tabIndex value",
                  "name": "val",
                  "type": {
                    "text": "number | string | null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Gets the current icon used on the button",
              "parameters": [
                {
                  "description": "representing the icon to set",
                  "name": "val",
                  "type": {
                    "text": "string | undefined"
                  }
                }
              ],
              "type": {
                "text": "string | undefined | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "iconEl",
              "type": {
                "text": "HTMLElement | null"
              },
              "description": "Gets the current icon element",
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement | null"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "iconAlign",
              "description": "Sets the automatic alignment of an existing icon to the 'start' or 'end' of the text",
              "parameters": [
                {
                  "description": "automatic icon alignment setting, if applicable (defaults to undefined).",
                  "name": "val",
                  "type": {
                    "text": "IdsButtonIconAlignment"
                  }
                }
              ],
              "type": {
                "text": "IdsButtonIconAlignment"
              },
              "return": {
                "type": {
                  "text": "IdsButtonIconAlignment"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "string | null"
              },
              "description": "Set width of button",
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "parameters": [
                {
                  "description": "100%, 90px, 50rem etc.",
                  "name": "w",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "appendIcon",
              "parameters": [
                {
                  "name": "iconName",
                  "type": {
                    "text": "string"
                  },
                  "description": "The icon name to check"
                }
              ],
              "description": "Check if an icon exists, and adds the icon if it's missing",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeIcon",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Check if an icon exists, and removes the icon if it's present",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "setIconAlignment",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Adds/Removes Icon Alignment CSS classes to/from the inner button component.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasIncorrectStartElement",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasIncorrectEndElement",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "text",
              "parameters": [
                {
                  "description": "the text value",
                  "name": "val",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "type": {
                "text": "string | null"
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "appendText",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "New text contents"
                }
              ],
              "description": "Check if the text slot exists, and appends it if it's missing",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeText",
              "description": "Checks if the text slot exists, and removes it if necessary",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Sets the HTMLButtonElement 'type' attribute",
              "type": {
                "text": "IdsButtonType"
              },
              "return": {
                "type": {
                  "text": "IdsButtonType"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "noMargins",
              "description": "Sets the no margins attribute",
              "parameters": [
                {
                  "description": "string value from the no margins attribute",
                  "name": "n",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "noPadding",
              "parameters": [
                {
                  "description": "true if the button should not have standard padding rules applied",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              },
              "return": {
                "type": {
                  "text": "boolean | string"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "square",
              "parameters": [
                {
                  "description": "whether the corners of the button as an icon-button should be angled/90°",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "setAppearanceClass",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string | null"
                  },
                  "description": "desired appearance class"
                }
              ],
              "description": "Sets the correct appearance class on the ShadowRoot button.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides the standard \"focus\" behavior to instead pass focus to the inner HTMLButton element.",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Implements callback from IdsColorVariantMixin used to\nupdate the color variant on children components",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            }
          ],
          "superclass": {
            "name": "IdsButton",
            "module": "/src/components/ids-button/ids-button"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsToggleButton",
            "module": "src/components/ids-toggle-button/ids-toggle-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-toolbar/ids-toolbar-more-actions.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Toolbar Section Component",
          "name": "IdsToolbarMoreActions",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template"
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['alternate-formatter']"
            },
            {
              "kind": "method",
              "name": "#renderActionsComponents"
            },
            {
              "kind": "method",
              "name": "#moreActionsMenuTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#moreActionsItemTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "an element from inside one of the Toolbar sections\nthat will be mirrored in the More Actions menu"
                },
                {
                  "name": "isSubmenuItem",
                  "default": "false",
                  "description": "true if the item provided is a submenu item",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "IdsMenuButton | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "menu",
              "type": {
                "text": "IdsPopupMenu | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "predefinedMenuItems",
              "type": {
                "text": "Array<any>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              }
            },
            {
              "kind": "field",
              "name": "overflowMenuItems",
              "type": {
                "text": "Array<any>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              }
            },
            {
              "kind": "field",
              "name": "toolbar",
              "type": {
                "text": "any"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "parameters": [
                {
                  "description": "true if the More Actions menu should be disabled",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "overflow",
              "parameters": [
                {
                  "description": "truthy if this More Actions menu should display overflowed items from the toolbar",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "toolbarType",
              "parameters": [
                {
                  "description": "the type of toolbar",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Overrides the standard toolbar section \"type\" getter, which always returns \"more\" in this case.",
              "parameters": [
                {
                  "description": "the type value",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "visible",
              "parameters": [
                {
                  "description": "alters whether the More Actions menu is displayed/hidden",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#refresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Refreshes the state of the More Actions button"
            },
            {
              "kind": "method",
              "name": "refreshOverflowedItems",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Refreshes the visible state of menu items representing \"overflowed\" elements"
            },
            {
              "kind": "method",
              "name": "#connectOverflowedItems",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Connects each overflowed menu item to a real Toolbar element",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Passes focus from the main element into the inner Ids Menu Button"
            },
            {
              "kind": "method",
              "name": "hasVisibleActions",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "hasEnabledActions",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "isOverflowed",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "reference to the toolbar item to be checked for overflow"
                }
              ]
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-toolbar/ids-toolbar-more-actions.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsToolbarMoreActions",
            "module": "src/components/ids-toolbar/ids-toolbar-more-actions.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-toolbar/ids-toolbar-section.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "TOOLBAR_ITEM_TAGNAMES",
          "type": {
            "text": "array"
          },
          "default": "[\n  'ids-button',\n  'ids-checkbox',\n  'ids-input',\n  'ids-menu-button',\n  'ids-radio',\n  'ids-toolbar-more-actions'\n]"
        },
        {
          "kind": "class",
          "description": "IDS Toolbar Section Component",
          "name": "IdsToolbarSection",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "Array<any>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<any>"
                }
              }
            },
            {
              "kind": "field",
              "name": "textElems",
              "type": {
                "text": "Array<any>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<any>"
                }
              }
            },
            {
              "kind": "field",
              "name": "separators",
              "type": {
                "text": "Array<any>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<any>"
                }
              }
            },
            {
              "kind": "field",
              "name": "toolbar",
              "type": {
                "text": "HTMLElement"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              }
            },
            {
              "kind": "field",
              "name": "align",
              "parameters": [
                {
                  "description": "the alignment type to set",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "favor",
              "parameters": [
                {
                  "description": "true if this toolbar section should be marked \"favor\"\n(will try not to be collapsed/shrunk if the parent toolbar size shrinks)",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "inactive",
              "parameters": [
                {
                  "description": "truthy if this toolbar section should be made \"inactive\"\n(takes up space, but items are not visible)",
                  "name": "value",
                  "type": {
                    "text": "string | boolean | null"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "type",
              "parameters": [
                {
                  "description": "the type of section",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "toolbarType",
              "parameters": [
                {
                  "description": "the type of toolbar",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              }
            }
          ],
          "mixins": [
            {
              "name": "IdsEventsMixin",
              "module": "/src/mixins/ids-events-mixin/ids-events-mixin"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsToolbarSection",
            "module": "src/components/ids-toolbar/ids-toolbar-section.ts"
          }
        },
        {
          "kind": "js",
          "name": "TOOLBAR_ITEM_TAGNAMES",
          "declaration": {
            "name": "TOOLBAR_ITEM_TAGNAMES",
            "module": "src/components/ids-toolbar/ids-toolbar-section.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-toolbar/ids-toolbar.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Toolbar Component",
          "name": "IdsToolbar",
          "members": [
            {
              "kind": "field",
              "name": "#resizeObserver",
              "privacy": "private",
              "type": {
                "text": "ResizeObserver | null | undefined"
              },
              "description": "Watches for Toolbar size changes"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "readonly": true
            },
            {
              "kind": "method",
              "name": "#configureResizeObserver",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Configures the resize observer.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets up event handlers assigned to the Toolbar and its child elements",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachKeyboardListeners",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Sets up the connection to the global keyboard handler",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "navigate",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "amt",
                  "default": "0",
                  "description": "the amount of items to navigate",
                  "optional": true,
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "name": "doFocus",
                  "default": "false",
                  "description": "if true, causes the new item to become focused.",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Uses a currently-highlighted toolbar item to \"navigate\" a specified number\nof steps to another toolbar item, highlighting it."
            },
            {
              "kind": "method",
              "name": "template"
            },
            {
              "kind": "field",
              "name": "disabled",
              "parameters": [
                {
                  "description": "sets the disabled state of the entire toolbar",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "refreshOverflowedItems",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Refreshes the overflow state of toolbar items"
            },
            {
              "kind": "field",
              "name": "focused",
              "type": {
                "text": "any | undefined"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "any | undefined"
                }
              }
            },
            {
              "kind": "field",
              "name": "items",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              }
            },
            {
              "kind": "field",
              "name": "textElems",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              }
            },
            {
              "kind": "field",
              "name": "separators",
              "type": {
                "text": "Array<HTMLElement>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              }
            },
            {
              "kind": "field",
              "name": "sections",
              "type": {
                "text": "Array<any>"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              }
            },
            {
              "kind": "field",
              "name": "tabbable",
              "description": "If true, sets the Toolbar mode to allow ALL items to have a usable tabIndex.\nDefault is false, which means one Toolbar element is focusable at a time.",
              "parameters": [
                {
                  "description": "sets the tabbable state of the toolbar",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Set the type for toolbar",
              "parameters": [
                {
                  "description": "of toolbar type",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "padding",
              "description": "If set to number the container will have padding added (in pixels)",
              "parameters": [
                {
                  "description": "sets the padding to the container",
                  "name": "value",
                  "type": {
                    "text": "string | number"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "method",
              "name": "#setType",
              "parameters": [
                {
                  "name": "oldType",
                  "type": {
                    "text": "string|null"
                  },
                  "description": "the type class to remove"
                },
                {
                  "name": "newType",
                  "type": {
                    "text": "string|null"
                  },
                  "description": "the type class to add"
                }
              ],
              "description": "Set the toolbar type to each section",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "detectTabbable",
              "description": "Gets the current item that should be used as the \"tabbable\" item\n(item that receives focus when the toolbar overall is \"focused\").",
              "return": {
                "type": {
                  "text": "HTMLElement | undefined"
                }
              }
            },
            {
              "kind": "method",
              "name": "makeTabbable",
              "parameters": [
                {
                  "name": "elem",
                  "default": "this.items[0]",
                  "description": "an element residing within the toolbar that can accept",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#resize"
            },
            {
              "kind": "method",
              "name": "triggerSelectedEvent",
              "parameters": [
                {
                  "name": "elem",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "the specified Toolbar item"
                },
                {
                  "name": "triggeredFromOverflow",
                  "default": "false",
                  "description": "if true, notifies the event handler that this\n`selected` event originated from the Overflow menu",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Triggers a `selected` event on a specified Toolbar item",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-toolbar/ids-toolbar.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsToolbar",
            "module": "src/components/ids-toolbar/ids-toolbar.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-tooltip/ids-tooltip.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Tooltip Component",
          "name": "IdsTooltip",
          "cssParts": [
            {
              "description": "the tooltip container",
              "name": "tooltip"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Returns the properties/settings we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the component contents"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Bind Internal Event Handlers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#bindEvents",
              "parameters": [
                {
                  "name": "targetElem",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "The element to attach events to"
                }
              ],
              "description": "Bind the events to a tooltip target.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#configurePopup",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Setup the popup",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#updateAria",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Update the aria attributes with the correct contents",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#show",
              "return": {
                "type": {
                  "text": "Promise<void>"
                }
              },
              "description": "Show the tooltip (use visible for public API)",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#hide",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Show the tooltip  (use visible for public API)"
            },
            {
              "kind": "method",
              "name": "onHide",
              "description": "Callback for when hide is triggered",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "popup",
              "type": {
                "text": "IdsPopup | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "IdsPopup | undefined | null"
                }
              }
            },
            {
              "kind": "field",
              "name": "beforeShow",
              "description": "An async function that fires as the tooltip is showing allowing you to set contents.",
              "parameters": [
                {
                  "description": "The async function",
                  "name": "func",
                  "type": {
                    "text": "Function"
                  }
                }
              ],
              "type": {
                "text": "() => Promise<string>"
              }
            },
            {
              "kind": "field",
              "name": "delay",
              "description": "Set how long after hover you should delay before showing",
              "parameters": [
                {
                  "description": "The amount in ms to delay",
                  "name": "value",
                  "type": {
                    "text": "string | number"
                  }
                }
              ],
              "type": {
                "text": "string | number"
              }
            },
            {
              "kind": "field",
              "name": "placement",
              "description": "Sets the tooltip placement between left, right, top, bottom",
              "parameters": [
                {
                  "description": "The placement of the tooltip",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "target",
              "description": "Set the target element for the tooltip",
              "parameters": [
                {
                  "description": "The target element selector",
                  "name": "value",
                  "type": {
                    "text": "HTMLElement"
                  }
                }
              ],
              "type": {
                "text": "any"
              }
            },
            {
              "kind": "field",
              "name": "trigger",
              "description": "Set trigger agains the target between hover, click and focus",
              "parameters": [
                {
                  "description": "The trigger mode to use",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "visible",
              "description": "Set tooltip immediately to visible/invisible",
              "parameters": [
                {
                  "description": "The target element selector",
                  "name": "value",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ],
              "type": {
                "text": "string | boolean"
              }
            },
            {
              "kind": "field",
              "name": "state",
              "type": {
                "text": "object"
              },
              "default": "{\n      target: null,\n      trigger: 'hover',\n      visible: false,\n    }"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-tooltip/ids-tooltip.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsTooltip",
            "module": "src/components/ids-tooltip/ids-tooltip.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-tree/ids-tree-node.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Tree Node Component",
          "name": "IdsTreeNode",
          "cssParts": [
            {
              "description": "the group node element",
              "name": "group-node"
            },
            {
              "description": "the node element",
              "name": "node"
            },
            {
              "description": "the node container element",
              "name": "node-container"
            },
            {
              "description": "the icon element",
              "name": "icon"
            },
            {
              "description": "the toggle icon element",
              "name": "toggle-icon"
            },
            {
              "description": "the text element",
              "name": "text"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "nodeContainer",
              "type": {
                "text": "HTMLElement | null | undefined"
              },
              "default": "null",
              "description": "Main node container"
            },
            {
              "kind": "field",
              "name": "groupNodesEl",
              "type": {
                "text": "HTMLElement | null | undefined"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "tree",
              "type": {
                "text": "IdsTree | null | undefined"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "isGroup",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Create the Template for the contents",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "getTemplate",
              "parameters": [
                {
                  "name": "isGroup",
                  "optional": true,
                  "type": {
                    "text": "boolean|undefined"
                  },
                  "description": "If true node type is group"
                }
              ],
              "description": "Select node",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "treeAttribute",
              "parameters": [
                {
                  "name": "selector",
                  "type": {
                    "text": "string"
                  },
                  "description": "The selector string"
                }
              ],
              "description": "Get tree attribute value for given selector",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string|null"
                }
              }
            },
            {
              "kind": "method",
              "name": "setFocus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set focus to node container"
            },
            {
              "kind": "method",
              "name": "#setExpandCollapse",
              "description": "Set the node to be expanded/collapsed",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#rotatePlusminus",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "object"
                  },
                  "description": "to set values."
                }
              ],
              "description": "Rotate class for plusminus icons.",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setNodeIcon",
              "description": "Set the node icon",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setToggleIconElement",
              "description": "Set toggle icon element",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setSelection",
              "description": "Set node selection",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setTabbable",
              "description": "Set node as tabbable or not",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#attachEventListeners",
              "description": "Attach event listeners"
            },
            {
              "kind": "field",
              "name": "toggleIconHtml",
              "type": {
                "text": "any"
              },
              "description": "Gets toggle icon html",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "nodeIcon",
              "type": {
                "text": "any"
              },
              "description": "Gets the current node icon or expand/collapse icon",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "isSelected",
              "description": "Gets the current state is selected or not",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "checkbox",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "isTabbable",
              "description": "Gets the current state is tabbable or not",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "isMultiSelect",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "toggleClass",
              "type": {
                "text": "string"
              },
              "description": "Gets the current toggle css class name",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "toggleIcon",
              "type": {
                "text": "string"
              },
              "description": "Sets the tree group toggle icon",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "collapseIcon",
              "description": "Sets the tree group collapse icon",
              "parameters": [
                {
                  "description": "The icon name",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets the tree node to disabled",
              "parameters": [
                {
                  "description": "If true will set disabled attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "expandIcon",
              "description": "Sets the tree group expand icon",
              "parameters": [
                {
                  "description": "The icon name",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "expanded",
              "description": "Sets the tree group to be expanded",
              "parameters": [
                {
                  "description": "If true will set expanded attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Sets the tree node icon",
              "parameters": [
                {
                  "description": "The icon name",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Set the node label text",
              "parameters": [
                {
                  "description": "of the label text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "selectable",
              "description": "Sets the tree node to be selectable 'single', 'multiple'",
              "parameters": [
                {
                  "description": "The icon name",
                  "name": "value",
                  "type": {
                    "text": "string | null | boolean"
                  }
                }
              ],
              "type": {
                "text": "string | null | boolean"
              }
            },
            {
              "kind": "field",
              "name": "selected",
              "description": "Sets the tree node to be selected",
              "parameters": [
                {
                  "description": "If true will set selected attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              }
            },
            {
              "kind": "field",
              "name": "tabbable",
              "description": "Set if the node is tabbable",
              "parameters": [
                {
                  "description": "The tabbable",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              }
            },
            {
              "kind": "field",
              "name": "useToggleTarget",
              "description": "Sets the tree to use toggle target",
              "parameters": [
                {
                  "description": "If true will set to use toggle target",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-tree/ids-tree-node.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsTreeNode",
            "module": "src/components/ids-tree/ids-tree-node.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-tree/ids-tree-shared.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "IdsTreeShared",
          "type": {
            "text": "object"
          },
          "default": "{\n  /**\n   * Default settings\n   */\n  DEFAULTS: {\n    collapseIcon: 'closed-folder',\n    expandIcon: 'open-folder',\n    expanded: true,\n    icon: 'tree-node',\n    selectable: 'single',\n    useToggleTarget: false,\n    toggleCollapseIcon: 'plusminus-folder-closed',\n    toggleExpandIcon: 'plusminus-folder-open',\n    toggleIconRotate: true\n  },\n\n  SELECTABLE: ['single', 'multiple', 'false'],\n\n  EVENTS: {\n    beforeselected: 'beforeselected',\n    selected: 'selected',\n    beforeunselected: 'beforeunselected',\n    unselected: 'unselected',\n    beforecollapsed: 'beforecollapsed',\n    collapsed: 'collapsed',\n    beforeexpanded: 'beforeexpanded',\n    expanded: 'expanded'\n  },\n\n  TOGGLE_CLASSES: {\n    collapsed: 'collapsed',\n    expanded: 'expanded'\n  },\n\n  TREE_ARIA_LABEL: 'IDS Tree',\n\n  /**\n   * Get the value for given attribute.\n   * @param {HTMLElement} elem The element.\n   * @param {string} attr The attribute name to get the value.\n   * @returns {string|null} The value or default value\n   */\n  getVal(elem: any, attr: string) {\n    const value = elem?.getAttribute(attr);\n    return value !== null ? value : (this.DEFAULTS as any)[camelCase(attr)];\n  },\n\n  /**\n   * Get the boolean value for given attribute.\n   * @param {HTMLElement} elem The element.\n   * @param {string} attr The attribute name to get the value.\n   * @returns {boolean} The value\n   */\n  getBoolVal(elem: any, attr: string) {\n    const value = elem?.getAttribute(attr);\n    return value !== null\n      ? stringToBool(value) : (this.DEFAULTS as any)[camelCase(attr)];\n  },\n\n  /**\n   * Check the given value is boolean.\n   * @param {boolean|string} val The value.\n   * @returns {boolean} true if the value boolean\n   */\n  isBool(val: boolean | string): boolean {\n    return val === true || val === 'true' || val === false || val === 'false';\n  }\n}",
          "description": "Shared in between tree.",
          "privacy": "private",
          "return": {
            "type": {
              "text": "void"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsTreeShared",
            "module": "src/components/ids-tree/ids-tree-shared.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-tree/ids-tree.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Tree Component",
          "name": "IdsTree",
          "cssParts": [
            {
              "description": "the tree element",
              "name": "tree"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Create the Template for the contents",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "datasource",
              "type": {
                "text": "object"
              },
              "default": "new IdsDataSource()",
              "description": "Tree datasource."
            },
            {
              "kind": "method",
              "name": "collapseAll",
              "description": "Collapse all attached nodes to the tree",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "expandAll",
              "description": "Expand all attached nodes to the tree",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "collapse",
              "parameters": [
                {
                  "name": "selector",
                  "type": {
                    "text": "string"
                  },
                  "description": "The selector string to use"
                }
              ],
              "description": "Collapse a tree node by given CSS selector.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "expand",
              "parameters": [
                {
                  "name": "selector",
                  "type": {
                    "text": "string"
                  },
                  "description": "The selector string to use"
                }
              ],
              "description": "Expand a tree node by given CSS selector.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "toggle",
              "parameters": [
                {
                  "name": "selector",
                  "type": {
                    "text": "string"
                  },
                  "description": "The selector string to use"
                }
              ],
              "description": "Toggle a tree node by given CSS selector.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "select",
              "parameters": [
                {
                  "name": "selector",
                  "type": {
                    "text": "string"
                  },
                  "description": "The selector string to use"
                }
              ],
              "description": "Selects a tree node by given CSS selector.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "unselect",
              "parameters": [
                {
                  "name": "selector",
                  "type": {
                    "text": "string"
                  },
                  "description": "The selector string to use"
                }
              ],
              "description": "UnSelects a tree node by given CSS selector.",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "isSelected",
              "parameters": [
                {
                  "name": "selector",
                  "type": {
                    "text": "string"
                  },
                  "description": "The selector string to use"
                }
              ],
              "description": "Ckeck if related node is selected or not, by given CSS selector.",
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "getNode",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "parameters": [
                {
                  "name": "selector",
                  "type": {
                    "text": "string"
                  },
                  "description": "The selector string to use"
                }
              ],
              "description": "Get a tree node by given CSS selector."
            },
            {
              "kind": "field",
              "name": "#active",
              "privacy": "private",
              "type": {
                "text": "object"
              },
              "default": "{\n    old: null,\n    current: null,\n    selectedOld: null,\n    selectedCurrent: null,\n  }",
              "description": "Active node elements."
            },
            {
              "kind": "field",
              "name": "#nodes",
              "privacy": "private",
              "type": {
                "text": "Array<object>"
              },
              "default": "[]",
              "description": "List of node elements attached to tree."
            },
            {
              "kind": "field",
              "name": "#nodesData",
              "privacy": "private",
              "type": {
                "text": "Array<object>"
              },
              "default": "[]",
              "description": "The current flatten data array."
            },
            {
              "kind": "method",
              "name": "#htmlAndData",
              "description": "Build nodes html and flatten data array",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#redraw",
              "description": "Rerender by re applying the data",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#init",
              "description": "Set all the attached nodes to tree",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setNodes",
              "description": "Set all the attached nodes to tree",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#initIcons",
              "description": "Initialize tree settings",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#initTabbable",
              "description": "Initialize tabable to first focusable node as tabable",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#initSelection",
              "description": "Initialize selection\nsingle selectable: first selected only, if end user set more than one",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#current",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "The target node element"
                }
              ],
              "description": "Get the current node element and index",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#next",
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "@param {HTMLElement} [current.elem] The current node element\n   * @param {number} [current.idx] The current node Index\n   * "
                  },
                  "description": "The current node.",
                  "optional": true
                }
              ],
              "description": "Get the next node element and index",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#nextInGroup",
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "@param {HTMLElement} [current.elem] The current node element\n   * @param {number} [current.idx] The current node Index\n   * "
                  },
                  "description": "The current node.",
                  "optional": true
                }
              ],
              "description": "Get the next node element and index in group",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#previous",
              "parameters": [
                {
                  "name": "current",
                  "type": {
                    "text": "@param {HTMLElement} [current.elem] The current node element\n   * @param {number} [current.idx] The current node Index\n   * "
                  },
                  "description": "The current node.",
                  "optional": true
                }
              ],
              "description": "Get the previous node element and index",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "object"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setFocus",
              "parameters": [
                {
                  "name": "target",
                  "type": {
                    "text": "object"
                  },
                  "description": "The target node element"
                }
              ],
              "description": "Set the focus to given node, and set as active node",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setSelected",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "object"
                  },
                  "description": "The target node element"
                }
              ],
              "description": "Set the selected to given node",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setMultiSelected",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "HTMLElement | any"
                  },
                  "description": "tree node"
                }
              ],
              "description": "Set the selection when multi-select enabled",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setUnSelected",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "HTMLElement | any"
                  },
                  "description": "The target node element"
                }
              ],
              "description": "Set unselected to given node",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setMultiUnSelected",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "HTMLElement | any"
                  },
                  "description": "The target node element"
                }
              ],
              "description": "Set unselected to given node",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "getParentNode",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "HTMLElement | any"
                  },
                  "description": "ids-tree-node"
                }
              ],
              "description": "Gets the parent node of the currently selected node.",
              "return": {
                "type": {
                  "text": "HTMLElement | any"
                }
              }
            },
            {
              "kind": "method",
              "name": "getAllChildNodes",
              "return": {
                "type": {
                  "text": "object | HTMLElement | any"
                }
              },
              "parameters": [
                {
                  "name": "parent",
                  "type": {
                    "text": "HTMLElement | any"
                  },
                  "description": "node"
                }
              ],
              "description": "Get all child nodes of given parent"
            },
            {
              "kind": "method",
              "name": "selectParentNodes",
              "parameters": [
                {
                  "name": "parent",
                  "type": {
                    "text": "HTMLElement | any"
                  },
                  "description": "node(s)"
                }
              ],
              "description": "Set the correct selection of parent nodes"
            },
            {
              "kind": "method",
              "name": "selectNestedNodes",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "HTMLElement | any"
                  },
                  "description": "element"
                }
              ],
              "description": "Select nodes under given parent node"
            },
            {
              "kind": "method",
              "name": "unselectNestedNodes",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "HTMLElement | any"
                  },
                  "description": "element"
                }
              ],
              "description": "Unselect nodes under given parent node"
            },
            {
              "kind": "method",
              "name": "#collapse",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "object"
                  },
                  "description": "The target node element"
                }
              ],
              "description": "Collapse the given node",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#expand",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "object"
                  },
                  "description": "The target node element"
                }
              ],
              "description": "Expand the given node",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#toggle",
              "parameters": [
                {
                  "name": "node",
                  "type": {
                    "text": "object"
                  },
                  "description": "The target node element"
                }
              ],
              "description": "Toggle the expand/collapse",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setToggleIcon",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set toggle icon",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#updateNodeAttribute",
              "parameters": [
                {
                  "name": "attr",
                  "type": {
                    "text": "string"
                  },
                  "description": "The attribute name"
                },
                {
                  "name": "mustUpdate",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "if true, will must update"
                }
              ],
              "description": "Update the given node attribute",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Establish Internal Event Handlers",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "selected",
              "type": {
                "text": "object | null"
              },
              "description": "The currently selected",
              "return": {
                "type": {
                  "text": "object|null"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "collapseIcon",
              "description": "Sets the tree group collapse icon",
              "parameters": [
                {
                  "description": "The icon name",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Set the data array of the tree",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "Array"
                  }
                }
              ],
              "type": {
                "text": "Array<any>"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets the tree to disabled",
              "parameters": [
                {
                  "description": "If true will set disabled attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "string | boolean"
              }
            },
            {
              "kind": "field",
              "name": "expandIcon",
              "description": "Sets the tree group expand icon",
              "parameters": [
                {
                  "description": "The icon name",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "expanded",
              "description": "Sets the tree to be expanded",
              "parameters": [
                {
                  "description": "If true will set expanded attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Sets the tree node icon",
              "parameters": [
                {
                  "description": "The icon name",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "label",
              "description": "Set the tree aria label text",
              "parameters": [
                {
                  "description": "of the label text",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "selectable",
              "description": "Sets the tree group to be selectable 'single', 'multiple'",
              "parameters": [
                {
                  "description": "The selectable",
                  "name": "value",
                  "type": {
                    "text": "string | null| boolean"
                  }
                }
              ],
              "type": {
                "text": "string | null | boolean"
              }
            },
            {
              "kind": "field",
              "name": "isMultiSelect",
              "readonly": true
            },
            {
              "kind": "field",
              "name": "toggleCollapseIcon",
              "description": "Sets the tree group toggle collapse icon",
              "parameters": [
                {
                  "description": "The icon name",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "toggleExpandIcon",
              "description": "Sets the tree group toggle expand icon",
              "parameters": [
                {
                  "description": "The icon name",
                  "name": "value",
                  "type": {
                    "text": "string|null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "toggleIconRotate",
              "description": "Sets the tree to use toggle icon rotate",
              "parameters": [
                {
                  "description": "If false will set to use toggle icon to be false",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              }
            },
            {
              "kind": "field",
              "name": "useToggleTarget",
              "description": "Sets the tree to use toggle target",
              "parameters": [
                {
                  "description": "If true will set to use toggle target",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-tree/ids-tree.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsTree",
            "module": "src/components/ids-tree/ids-tree.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-treemap/ids-treemap.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Tree Component\nBased on Treemap Squarify: https://github.com/clementbat/treemap",
          "name": "IdsTreeMap",
          "cssParts": [
            {
              "description": "the tree element",
              "name": "tree"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "d",
              "type": {
                "text": "TreemapDataSet[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "height",
              "default": "300",
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "default": "NaN"
            },
            {
              "kind": "field",
              "name": "Rectangle",
              "type": {
                "text": "TreemapRectangle"
              },
              "default": "{\n    data: [],\n    xBeginning: 0,\n    yBeginning: 0,\n    totalWidth: NaN,\n    totalHeight: DEFAULT_HEIGHT\n  }"
            },
            {
              "kind": "field",
              "name": "initialData",
              "type": {
                "text": "Data[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Get the data attribute",
              "parameters": [
                {
                  "description": "of the treemap data object",
                  "name": "value",
                  "type": {
                    "text": "TreemapDataSet[]"
                  }
                }
              ],
              "type": {
                "text": "TreemapDataSet[]"
              },
              "return": {
                "type": {
                  "text": "TreemapDataSet[]"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "onTitleChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "title value"
                }
              ],
              "description": "Handles title attribute changes"
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "method",
              "name": "templateSvg",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "data",
                  "type": {
                    "text": "TreemapDataSet[]"
                  },
                  "description": "data array"
                }
              ],
              "description": "Render SVG markup"
            },
            {
              "kind": "method",
              "name": "templateGroups",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "rect",
                  "type": {
                    "text": "TreemapDataSet"
                  },
                  "description": "item in the data array"
                }
              ],
              "description": "Render the group markup"
            },
            {
              "kind": "method",
              "name": "templateTitle",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Render the title markup"
            },
            {
              "kind": "field",
              "name": "#getMaximum",
              "privacy": "private",
              "description": "Get max number",
              "parameters": [
                {
                  "description": "row",
                  "name": "array",
                  "type": {
                    "text": "number[]"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "#getMinimum",
              "privacy": "private",
              "description": "Get min number",
              "parameters": [
                {
                  "description": "row",
                  "name": "array",
                  "type": {
                    "text": "number[]"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "#sumReducer",
              "privacy": "private",
              "description": "Sum Reducer",
              "parameters": [
                {
                  "description": "row",
                  "name": "acc",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "description": "row",
                  "name": "cur",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "Array"
                }
              }
            },
            {
              "kind": "field",
              "name": "#roundValue",
              "privacy": "private",
              "description": "Round Value and preserve 2 decimals",
              "parameters": [
                {
                  "description": "row",
                  "name": "number",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "#validateArguments",
              "privacy": "private",
              "description": "Validate the treemap object.",
              "parameters": [
                {
                  "description": "{ data, height }",
                  "name": "treemap",
                  "type": {
                    "text": "TreemapDataSet"
                  }
                },
                {
                  "description": "array that contains the treemap block definitions",
                  "name": "treemap.data",
                  "type": {
                    "text": "Data[]"
                  }
                },
                {
                  "description": "total hieght of the treemap",
                  "name": "treemap.height",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#worstRatio",
              "privacy": "private",
              "description": "Calculate worst ratio",
              "parameters": [
                {
                  "description": "array",
                  "name": "row",
                  "type": {
                    "text": "number[]"
                  }
                },
                {
                  "description": "of row",
                  "name": "width",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "number"
                }
              }
            },
            {
              "kind": "field",
              "name": "#getMinWidth",
              "privacy": "private",
              "description": "Get the min width",
              "return": {
                "type": {
                  "text": "RectMinWidth"
                }
              }
            },
            {
              "kind": "field",
              "name": "#layoutRow",
              "privacy": "private",
              "description": "Layout Row",
              "parameters": [
                {
                  "description": "array",
                  "name": "row",
                  "type": {
                    "text": "number[]"
                  }
                },
                {
                  "description": "number",
                  "name": "width",
                  "type": {
                    "text": "number"
                  }
                },
                {
                  "description": "boolean",
                  "name": "vertical",
                  "type": {
                    "text": "boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#layoutLastRow",
              "privacy": "private",
              "description": "Layout last row",
              "parameters": [
                {
                  "description": "array",
                  "name": "rows",
                  "type": {
                    "text": "number[]"
                  }
                },
                {
                  "description": "array",
                  "name": "children",
                  "type": {
                    "text": "number[]"
                  }
                },
                {
                  "description": "number",
                  "name": "width",
                  "type": {
                    "text": "number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "#squarify",
              "privacy": "private",
              "description": "Squarify",
              "parameters": [
                {
                  "description": "array",
                  "name": "children",
                  "type": {
                    "text": "number[]"
                  }
                },
                {
                  "description": "array",
                  "name": "row",
                  "type": {
                    "text": "number[]"
                  }
                },
                {
                  "description": "number",
                  "name": "width",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "any"
                }
              }
            },
            {
              "kind": "method",
              "name": "treeMap",
              "return": {
                "type": {
                  "text": "TreemapDataSet[]"
                }
              },
              "parameters": [
                {
                  "name": "treemap",
                  "type": {
                    "text": "TreemapDataSet"
                  },
                  "description": "object that contains config for the treemap"
                },
                {
                  "description": "array that contains the treemap block definitions",
                  "name": "treemap.data",
                  "type": {
                    "text": "Data[]"
                  }
                },
                {
                  "description": "total hieght of the treemap",
                  "name": "treemap.height",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "description": "Create the Treemap"
            },
            {
              "kind": "method",
              "name": "resizeTreemap",
              "description": "Resize the treemap based on screen size"
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-treemap/ids-treemap.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsTreeMap",
            "module": "src/components/ids-treemap/ids-treemap.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-trigger-field/ids-trigger-button.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Trigger Button Component",
          "name": "IdsTriggerButton",
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "readonly": true,
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "protoClasses",
              "description": "Figure out the classes",
              "privacy": "private",
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "type": {
                "text": "Array<string>"
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "tabbable",
              "description": "Set if the trigger field is tabbable",
              "parameters": [
                {
                  "description": "True of false depending if the trigger field is tabbable",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "description": "Set the trigger button to readonly color",
              "parameters": [
                {
                  "description": "True of false depending if the trigger button is readonly",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "inlineCssClass",
              "type": {
                "text": "string"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "field",
              "name": "inline",
              "parameters": [
                {
                  "description": "true if this trigger button should display \"inline\" instead of having its own full border",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "method",
              "name": "#setBorderClass"
            },
            {
              "kind": "method",
              "name": "#removeBorderClass"
            },
            {
              "kind": "field",
              "name": "inheritColor",
              "parameters": [
                {
                  "description": "true if this trigger button should inherit a parent component's text color for use internally",
                  "name": "val",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "shouldUpdate",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setInitialState",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['alternate', 'alternate-formatter']",
              "description": "Inherited from `IdsColorVariantMixin`",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "refreshProtoClasses",
              "description": "Refreshes this button's prototype CSS class",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Inner template contents",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "onHiddenChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "true if hidden"
                }
              ],
              "description": "Handles hidden attribute changes",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "setAriaText",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "button",
              "type": {
                "text": "HTMLButtonElement | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLButtonElement"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "cssClass",
              "parameters": [
                {
                  "description": "containing CSS classes that will be applied to the button\nStrings will be split into an array and separated by whitespace.",
                  "name": "val",
                  "type": {
                    "text": "Array<string>|string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Passes a disabled attribute from the custom element to the button",
              "parameters": [
                {
                  "description": "true if the button will be disabled",
                  "name": "val",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "#tabIndex",
              "privacy": "private",
              "description": "Passes a tabIndex attribute from the custom element to the button",
              "parameters": [
                {
                  "description": "the tabIndex value",
                  "name": "val",
                  "type": {
                    "text": "number | string | null"
                  }
                }
              ],
              "type": {
                "text": "number"
              },
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Gets the current icon used on the button",
              "parameters": [
                {
                  "description": "representing the icon to set",
                  "name": "val",
                  "type": {
                    "text": "string | undefined"
                  }
                }
              ],
              "type": {
                "text": "string | undefined | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "iconEl",
              "type": {
                "text": "HTMLElement | null"
              },
              "description": "Gets the current icon element",
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement | null"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "iconAlign",
              "description": "Sets the automatic alignment of an existing icon to the 'start' or 'end' of the text",
              "parameters": [
                {
                  "description": "automatic icon alignment setting, if applicable (defaults to undefined).",
                  "name": "val",
                  "type": {
                    "text": "IdsButtonIconAlignment"
                  }
                }
              ],
              "type": {
                "text": "IdsButtonIconAlignment"
              },
              "return": {
                "type": {
                  "text": "IdsButtonIconAlignment"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "width",
              "type": {
                "text": "string | null"
              },
              "description": "Set width of button",
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "parameters": [
                {
                  "description": "100%, 90px, 50rem etc.",
                  "name": "w",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "appendIcon",
              "parameters": [
                {
                  "name": "iconName",
                  "type": {
                    "text": "string"
                  },
                  "description": "The icon name to check"
                }
              ],
              "description": "Check if an icon exists, and adds the icon if it's missing",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeIcon",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Check if an icon exists, and removes the icon if it's present",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "setIconAlignment",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Adds/Removes Icon Alignment CSS classes to/from the inner button component.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasIncorrectStartElement",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "hasIncorrectEndElement",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "text",
              "parameters": [
                {
                  "description": "the text value",
                  "name": "val",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "return": {
                "type": {
                  "text": "string | null"
                }
              },
              "type": {
                "text": "string | null"
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "appendText",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "New text contents"
                }
              ],
              "description": "Check if the text slot exists, and appends it if it's missing",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "removeText",
              "description": "Checks if the text slot exists, and removes it if necessary",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "appearance",
              "description": "Set the button appearance between 'default', 'primary', 'secondary', 'tertiary', or 'destructive'",
              "parameters": [
                {
                  "description": "a valid button \"appearance\"",
                  "name": "val",
                  "type": {
                    "text": "IdsButtonAppearance | null"
                  }
                }
              ],
              "type": {
                "text": "IdsButtonAppearance"
              },
              "return": {
                "type": {
                  "text": "IdsButtonAppearance"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Sets the HTMLButtonElement 'type' attribute",
              "type": {
                "text": "IdsButtonType"
              },
              "return": {
                "type": {
                  "text": "IdsButtonType"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "noMargins",
              "description": "Sets the no margins attribute",
              "parameters": [
                {
                  "description": "string value from the no margins attribute",
                  "name": "n",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "noPadding",
              "parameters": [
                {
                  "description": "true if the button should not have standard padding rules applied",
                  "name": "val",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              },
              "return": {
                "type": {
                  "text": "boolean | string"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "field",
              "name": "square",
              "parameters": [
                {
                  "description": "whether the corners of the button as an icon-button should be angled/90°",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "setAppearanceClass",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string | null"
                  },
                  "description": "desired appearance class"
                }
              ],
              "description": "Sets the correct appearance class on the ShadowRoot button.",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides the standard \"focus\" behavior to instead pass focus to the inner HTMLButton element.",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Implements callback from IdsColorVariantMixin used to\nupdate the color variant on children components",
              "inheritedFrom": {
                "name": "IdsButton",
                "module": "src/components/ids-button/ids-button.ts"
              }
            }
          ],
          "mixins": [
            {
              "name": "IdsFieldHeightMixin",
              "module": "/src/mixins/ids-field-height-mixin/ids-field-height-mixin"
            }
          ],
          "superclass": {
            "name": "IdsButton",
            "module": "/src/components/ids-button/ids-button"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsTriggerButton",
            "module": "src/components/ids-trigger-field/ids-trigger-button.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-trigger-field/ids-trigger-field.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Trigger Field Component",
          "name": "IdsTriggerField",
          "cssParts": [
            {
              "description": "the field container",
              "name": "field"
            },
            {
              "description": "the content with trigger buttons and input element",
              "name": "content"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "elements",
              "description": "Get a list of element dependencies for this component",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true,
              "description": "Return the attributes we handle as getters/setters",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "description": "Push color variant to the container element",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Creates the Template for rendering an IdsTriggerField's contents",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "buttons",
              "readonly": true,
              "return": {
                "type": {
                  "text": "Array<HTMLElement>"
                }
              }
            },
            {
              "kind": "field",
              "name": "tabbable",
              "parameters": [
                {
                  "description": "true if this trigger field's buttons should be made accessible using the tab key",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets the disabled attribute",
              "parameters": [
                {
                  "description": "string value from the disabled attribute",
                  "name": "d",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "description": "Sets the readonly attribute",
              "parameters": [
                {
                  "description": "string value from the read only attribute",
                  "name": "r",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "format",
              "description": "Return format",
              "parameters": [
                {
                  "description": "date, time format",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#attachTriggerButtonEvents",
              "description": "Establish Internal Event Handlers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#setFieldHeight",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set field height and compact attributes",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "onFieldHeightChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "the new field height setting"
                }
              ],
              "description": "Updates trigger buttons when the trigger field's fieldHeight property is updated"
            },
            {
              "kind": "method",
              "name": "trigger",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Fire the trigger event and action."
            },
            {
              "kind": "field",
              "name": "generatedId",
              "type": {
                "text": "string"
              },
              "default": "''",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "triggeredByChange",
              "type": {
                "text": "boolean"
              },
              "default": "false",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "isFormComponent",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "array"
              },
              "default": "['alternate', 'alternate-formatter', 'borderless', 'in-cell', 'list-builder']",
              "description": "Inherited from `IdsColorVariantMixin`",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateHostAttributes",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Uses current IdsInput state to set some attributes on its host element",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateVariables",
              "return": {
                "type": {
                  "text": "IdsInputTemplateVariables"
                }
              },
              "description": "Uses current IdsInput state to generate strings used in its template.",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "isPasswordVisible",
              "type": {
                "text": "boolean"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateShowHide",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "templateCapsLock",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "input",
              "type": {
                "text": "HTMLInputElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLInputElement"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "capsLockIcon",
              "type": {
                "text": "HTMLElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "fieldContainer",
              "type": {
                "text": "HTMLElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelEl",
              "type": {
                "text": "HTMLLabelElement | undefined | null"
              },
              "readonly": true,
              "return": {
                "type": {
                  "text": "HTMLLabelElement"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "revealablePassword",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "sets whether password reveal functionality is available",
              "parameters": [
                {
                  "description": "boolean value sets whether reveal functionality is toggled on or off",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "capsLock",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "sets whether capslock indicatoris enabled or disabled",
              "parameters": [
                {
                  "description": "sets whether capslock indicator functionality is toggled on or off",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "passwordVisible",
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "description": "sets whether the password is currently visible",
              "parameters": [
                {
                  "description": "toggles the visibility of the password on or off",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "setInputState",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "prop",
                  "type": {
                    "text": "string"
                  },
                  "description": "The property."
                }
              ],
              "description": "Set input state for disabled or readonly",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "setLabelText",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "string"
                  },
                  "description": "of label"
                }
              ],
              "description": "Set the label text",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleAutoselect",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle autoselect",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "handleInputFocusEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "option",
                  "optional": true,
                  "type": {
                    "text": "string | null"
                  },
                  "description": "If 'remove', will remove attached events"
                }
              ],
              "description": "Handle input focus event",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#capsLockEventSetUp",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "indicates whether to turn events on or off"
                }
              ],
              "description": "handles teardown and set up for capslock detection events",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#attachNativeEvents",
              "return": {
                "type": {
                  "text": "this"
                }
              },
              "description": "Setup event handlers that trigger on the host element during native events from the internal HTMLInputElement\nThese trigg",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle events",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#togglePasswordEventSetUp",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "whether to toggle events on or off"
                }
              ],
              "description": "handles event set up and teardown for password indicator",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#passwordVisibilityHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "toggles the visibility of the password by changing field type",
              "privacy": "private",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "active",
              "description": "When set the input will add a CSS class `is-active` that simulates the text input being \"focused\".",
              "parameters": [
                {
                  "description": "If true will set `text-ellipsis` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "autoselect",
              "description": "When set the input will select all text on focus",
              "parameters": [
                {
                  "description": "If true will set `autoselect` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "bgTransparent",
              "description": "When set the input will add css class `bg-transparent`",
              "parameters": [
                {
                  "description": "If true will set `bg-transparent` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "textEllipsis",
              "description": "When set the input will add css class `text-ellipsis`",
              "parameters": [
                {
                  "description": "If true will set `text-ellipsis` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "#labelEl",
              "privacy": "private",
              "type": {
                "text": "HTMLLabelElement | undefined"
              },
              "description": "internal reference to a label element a user provides",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Set the `placeholder` of input",
              "parameters": [
                {
                  "description": "of the `placeholder` property",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "readonlyBackground",
              "parameters": [
                {
                  "description": "If true, causes an IdsInput set to `readonly` to appear\nto use its standard field background color instead of the \"readonly\" state color",
                  "name": "value",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "#setReadonlyBackground",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "labelWrap",
              "description": "Set the label wrap setting of input",
              "parameters": [
                {
                  "description": "['ellipsis', 'wrap', 'no-stretch-ellipsis', 'no-stretch-wrap']",
                  "name": "value",
                  "type": {
                    "text": "IdsInputLabelWrap"
                  }
                }
              ],
              "type": {
                "text": "IdsInputLabelWrap"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Set the size (width) of input",
              "parameters": [
                {
                  "description": "[xs, sm, mm, md, lg, full]",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "textAlign",
              "description": "Sets the text alignment",
              "parameters": [
                {
                  "description": "[start, center, end]",
                  "name": "value",
                  "type": {
                    "text": "IdsInputAlignment"
                  }
                }
              ],
              "type": {
                "text": "IdsInputAlignment"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "type",
              "description": "Sets the input type",
              "parameters": [
                {
                  "description": "[text, password, number, phone, email]",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Set the `value` attribute of input",
              "parameters": [
                {
                  "description": "the value property",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "#id",
              "privacy": "private",
              "description": "set the id of the input, which will also determine the\ninput id for labels at #${id}-input",
              "parameters": [
                {
                  "description": "id",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "cursor",
              "description": "Set the css cursor property to something other than text",
              "parameters": [
                {
                  "description": "the css cursor value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "noMargins",
              "description": "Sets the no margins attribute",
              "parameters": [
                {
                  "description": "true or false or as a string",
                  "name": "n",
                  "type": {
                    "text": "boolean | string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "field",
              "name": "padding",
              "description": "Sets the inner padding (inline-start and end)",
              "parameters": [
                {
                  "description": "string value for the padding",
                  "name": "n",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | number"
              },
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "blur",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides the standard \"blur\" behavior to instead tell the inner HTMLInput element to blur.",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            },
            {
              "kind": "method",
              "name": "focus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Overrides the standard \"focus\" behavior to instead pass focus to the inner HTMLInput element.",
              "inheritedFrom": {
                "name": "IdsInput",
                "module": "src/components/ids-input/ids-input.ts"
              }
            }
          ],
          "superclass": {
            "name": "IdsInput",
            "module": "/src/components/ids-input/ids-input"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsTriggerField",
            "module": "src/components/ids-trigger-field/ids-trigger-field.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-upload/ids-upload.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Upload Component",
          "name": "IdsUpload",
          "cssParts": [
            {
              "description": "the main container element",
              "name": "container"
            },
            {
              "description": "the label element",
              "name": "label"
            },
            {
              "description": "the visible input element",
              "name": "input"
            },
            {
              "description": "the trigger input element",
              "name": "button"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "isFormComponent",
              "type": {
                "text": "boolean"
              },
              "default": "true"
            },
            {
              "kind": "field",
              "name": "isFilePickerOpened",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "trigger",
              "type": {
                "text": "IdsTriggerButton | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "fileInput",
              "type": {
                "text": "HTMLInputElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "files",
              "type": {
                "text": "FileList | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "colorVariants",
              "type": {
                "text": "Array<string>"
              },
              "default": "['alternate-formatter']",
              "description": "List of available color variants for this component",
              "return": {
                "type": {
                  "text": "Array<string>"
                }
              }
            },
            {
              "kind": "method",
              "name": "onColorVariantRefresh",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Push color variant to the trigger-field element"
            },
            {
              "kind": "method",
              "name": "onLabelChange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onLabelStateChange",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Push label-state to the trigger-field element"
            },
            {
              "kind": "method",
              "name": "onLabelRequiredChange",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "onFieldHeightChange",
              "parameters": [
                {
                  "name": "val",
                  "type": {
                    "text": "string"
                  },
                  "description": "the new field height setting"
                }
              ],
              "description": "Push field-height/compact to the trigger-field element"
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "method",
              "name": "onDirtyTrackerChange",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "The changed value"
                }
              ],
              "description": "Callback for dirty tracker setting change",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "field",
              "name": "input",
              "readonly": true
            },
            {
              "kind": "method",
              "name": "clear",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Clear the value"
            },
            {
              "kind": "method",
              "name": "open",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Open file picker window"
            },
            {
              "kind": "method",
              "name": "dispatchChangeEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "object"
                  },
                  "description": "Actual event"
                }
              ],
              "description": "Dispatch change event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleWindowFocusEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle window focus event, track file picker window cancel button",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFileInputChangeEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle fileInput change event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFileInputCancelEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle fileInput filescancel event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleTextInputDragDrop",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle drag-drop event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleTextInputKeydown",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle keydown event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleTriggerClickEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle trigger click event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleInputClearedEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle input cleared event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle events",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "textInput",
              "type": {
                "text": "any"
              },
              "description": "Get trigger field element as textInput",
              "return": {
                "type": {
                  "text": "any"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "labelFiletypeDefault",
              "type": {
                "text": "string"
              },
              "description": "Default label for filetype",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "triggerLabelDefault",
              "type": {
                "text": "string"
              },
              "description": "Default label for trigger button",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "validationEventsDefault",
              "type": {
                "text": "string"
              },
              "description": "Default validation events",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "hasAccess",
              "type": {
                "text": "boolean"
              },
              "description": "Has access to use, if not disabled or readonly",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "accept",
              "description": "Set `accept` attribute",
              "parameters": [
                {
                  "description": "`accept` attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Set `disabled` attribute",
              "parameters": [
                {
                  "description": "If true will set `disabled` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "labelFiletype",
              "description": "Set the label for filetype",
              "parameters": [
                {
                  "description": "The label for filetype",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "multiple",
              "description": "Set the `multiple` attribute for filetype",
              "parameters": [
                {
                  "description": "of the `multiple` property",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "noMargins",
              "description": "Sets the no margins attribute",
              "parameters": [
                {
                  "description": "The value for no margins attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "textEllipsis",
              "description": "Set the text ellipsis for input text",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "placeholder",
              "description": "Set the `placeholder` of input",
              "parameters": [
                {
                  "description": "of the `placeholder` property",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "readonly",
              "description": "Set the `readonly` of input",
              "parameters": [
                {
                  "description": "If true will set `readonly` attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean | string"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Set the size of input",
              "parameters": [
                {
                  "description": "[xs, sm, mm, md, lg, full]",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "tabbable",
              "description": "Set if the upload is tabbable",
              "parameters": [
                {
                  "description": "True of false depending if the upload is tabbable",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "triggerLabel",
              "description": "Set the label for trigger button",
              "parameters": [
                {
                  "description": "The label for trigger button",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "validate",
              "description": "Set `validate` attribute",
              "parameters": [
                {
                  "description": "The `validate` attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "validationEvents",
              "description": "Sets which events to fire validation on",
              "parameters": [
                {
                  "description": "The `validation-events` attribute",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Set the `value` for text input and file input",
              "parameters": [
                {
                  "description": "the value property",
                  "name": "val",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-upload/ids-upload.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsUpload",
            "module": "src/components/ids-upload/ids-upload.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-upload-advanced/ids-upload-advanced-file.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS UploadAdvancedFile Component",
          "name": "IdsUploadAdvancedFile",
          "cssParts": [
            {
              "description": "the main container element",
              "name": "container"
            },
            {
              "description": "the file row element",
              "name": "file-row"
            },
            {
              "description": "the status element",
              "name": "status"
            },
            {
              "description": "the not started icon element",
              "name": "not-started-icon"
            },
            {
              "description": "the in process icon element",
              "name": "in-process-icon"
            },
            {
              "description": "the completed icon element",
              "name": "completed-icon"
            },
            {
              "description": "the errored icon element",
              "name": "errored-icon"
            },
            {
              "description": "the file name element",
              "name": "file-name"
            },
            {
              "description": "the file progress element",
              "name": "file-progress"
            },
            {
              "description": "the  close button element",
              "name": "btn-close"
            },
            {
              "description": "the  close button icon element",
              "name": "btn-close-icone"
            },
            {
              "description": "the progress row element",
              "name": "progress-row"
            },
            {
              "description": "the error row element",
              "name": "error-row"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "description": "Inner template contents",
              "return": {
                "type": {
                  "text": "string"
                }
              }
            },
            {
              "kind": "method",
              "name": "dispatchChangeEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "eventName",
                  "type": {
                    "text": "string"
                  },
                  "description": "The event name"
                },
                {
                  "name": "e",
                  "default": "null",
                  "type": {
                    "text": "object"
                  },
                  "description": "Actual event"
                }
              ],
              "description": "Dispatch event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "toggleDisabled",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  },
                  "description": "If true will set `disabled`"
                }
              ],
              "description": "Toggle disabled",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setStatus",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set current status",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "start",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Start uploading process"
            },
            {
              "kind": "method",
              "name": "cancel",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Cancel upload and remove from files list"
            },
            {
              "kind": "method",
              "name": "abortHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "default": "null",
                  "description": "The event",
                  "type": {
                    "text": "any"
                  }
                }
              ],
              "description": "Abort handler"
            },
            {
              "kind": "method",
              "name": "progressHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  },
                  "description": "The event"
                }
              ],
              "description": "Progress handler"
            },
            {
              "kind": "method",
              "name": "completeHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  },
                  "description": "The event"
                }
              ],
              "description": "Complete handler"
            },
            {
              "kind": "method",
              "name": "errorHandler",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "any"
                  },
                  "description": "The event"
                }
              ],
              "description": "Error handler"
            },
            {
              "kind": "field",
              "name": "loaded",
              "type": {
                "text": "number"
              },
              "description": "Get the bytes of the file is uploaded",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "loadedFormatted",
              "type": {
                "text": "string"
              },
              "description": "Get the bytes loaded value formatted (for example 10M)",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "sizeFormatted",
              "type": {
                "text": "string"
              },
              "description": "Get formatted size value",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "closeButtonText",
              "type": {
                "text": "string"
              },
              "description": "Get text for close button",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startButtonText",
              "type": {
                "text": "string"
              },
              "description": "Get text for start button",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "progressLabelText",
              "type": {
                "text": "string"
              },
              "description": "Get text for progress label",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "errorHtml",
              "type": {
                "text": "string"
              },
              "description": "Get error html",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets the whole file element to disabled",
              "parameters": [
                {
                  "description": "If true will set disabled attribute",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "error",
              "description": "Sets the file state to show there was an error during the file operations",
              "parameters": [
                {
                  "description": "error attribute",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "fileName",
              "description": "Sets the file name",
              "parameters": [
                {
                  "description": "file-name attribute",
                  "name": "value",
                  "type": {
                    "text": "string | null"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "size",
              "description": "Sets the file size in bytes",
              "parameters": [
                {
                  "description": "size attribute",
                  "name": "value",
                  "type": {
                    "text": "string|number"
                  }
                }
              ],
              "type": {
                "text": "string | number | null"
              }
            },
            {
              "kind": "field",
              "name": "status",
              "description": "Sets the file status",
              "parameters": [
                {
                  "description": "status attribute",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "value",
              "description": "Sets the progress bar value",
              "parameters": [
                {
                  "description": "value attribute",
                  "name": "val",
                  "type": {
                    "text": "string|number| null"
                  }
                }
              ],
              "type": {
                "text": "string | number | null"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-upload-advanced/ids-upload-advanced-file.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsUploadAdvancedFile",
            "module": "src/components/ids-upload-advanced/ids-upload-advanced-file.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-upload-advanced/ids-upload-advanced-shared.ts",
      "declarations": [
        {
          "kind": "variable",
          "name": "IdsUploadAdvancedShared",
          "type": {
            "text": "object"
          },
          "default": "{\n  DEFAULTS: {\n    autoStart: true, // allow automatic start upload, after files have been dropped or added\n    paramName: 'myfile', // variable name to read from server\n    icon: 'upload', // Droparea icon\n    maxFileSize: -1, // max file size in bytes, -1 for unlimited\n    maxFiles: 99999, // max files can be upload\n    maxFilesInProcess: 99999, // max files can be upload while in process,\n    method: 'POST', // Sets the method to use component XMLHttpRequest method to send files\n    showBrowseLink: true, // Browse files to upload\n\n    // Text strings\n    textBtnCancel: 'Cancel uploading this file',\n    textBtnCancelAll: 'Cancel',\n    textBtnCloseError: 'Close this error',\n    textBtnRemove: 'Remove this file from UI list',\n    textBtnStart: 'Start uploading this file',\n    textBtnStartAll: 'Start',\n    textDroparea: 'Drag and Drop Files to Upload',\n    textDropareaWithBrowse: 'Drag and Drop or {browseLink} to Upload',\n    textDropareaWithBrowseLink: 'Select Files',\n    textProgressLabel: '{file-name} uploaded {loaded} out of {size} ({percent}%)',\n\n    // Error strings\n    errorMaxFiles: '<em>Error</em>: Cannot upload more than the maximum number of files ({maxFiles}).',\n    errorMaxFilesInProcess: '<em>Error</em>: Exceeded maximum files allowed limit',\n    errorAcceptFileType: '<em>Error</em>: File type is not allowed',\n    errorMaxFileSize: '<em>Error</em>: Exceeded file size limit',\n    errorUrl: '<em>Error</em>: Url not found!',\n    errorXhrHeaders: '<em>Error</em>: XHR Headers must be a valid JSON string contains array of name/value objects.',\n\n    // Extra headers to use with XMLHttpRequest (JSON)\n    xhrHeaders: ''\n  },\n  ERRORS: {\n    errorMaxFiles: 'error-max-files',\n    errorMaxFilesInProcess: 'error-max-files-in-process',\n    errorAcceptFileType: 'error-accept-file-type',\n    errorMaxFileSize: 'error-max-file-size',\n    errorUrl: 'error-url',\n    errorXhrHeaders: 'error-xhr-headers'\n  },\n  STATUS: {\n    notStarted: 'not-started',\n    inProcess: 'in-process',\n    aborted: 'aborted',\n    errored: 'errored',\n    completed: 'completed'\n  },\n\n  /**\n   * Formats the file size to human readable.\n   * @private\n   * @param {number} bytes The size value in bytes.\n   * @param {number} decimals The decimal point.\n   * @returns {string} formated to use in ui.\n   */\n  formatBytes(bytes: number, decimals = 2) {\n    const units = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n    if (typeof bytes !== 'number') {\n      return '';\n    }\n    let index;\n    const multiplier = 1000;\n    let val = bytes;\n    for (index = 0; val > multiplier; index++) {\n      val /= multiplier;\n    }\n    return `${parseFloat(val.toFixed(decimals))} ${units[index]}`;\n  },\n\n  /**\n   * Get the value for given slot.\n   * @private\n   * @param {object} shadowRoot The shadow root.\n   * @param {string} slotName The slot name.\n   * @returns {string} The slot val.\n   */\n  slotVal(shadowRoot: any, slotName: string) {\n    const d: any = this.DEFAULTS;\n    const html = (slot: any) => slot?.assignedNodes()[0]?.innerHTML;\n    const slot = shadowRoot?.querySelector(`slot[name=\"${slotName}\"]`);\n    return html(slot) || d[camelCase(slotName)];\n  }\n}",
          "description": "Shared in between upload advanced.",
          "privacy": "private",
          "return": {
            "type": {
              "text": "void"
            }
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsUploadAdvancedShared",
            "module": "src/components/ids-upload-advanced/ids-upload-advanced-shared.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-upload-advanced/ids-upload-advanced.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS UploadAdvanced Component",
          "name": "IdsUploadAdvanced",
          "cssParts": [
            {
              "description": "the main container element",
              "name": "container"
            },
            {
              "description": "the label element",
              "name": "label"
            },
            {
              "description": "the hyperlink element",
              "name": "link"
            },
            {
              "description": "the files area element",
              "name": "filesarea"
            },
            {
              "description": "the error area element",
              "name": "errorarea"
            },
            {
              "description": "the error status element",
              "name": "error-status"
            },
            {
              "description": "the error status icon element",
              "name": "error-status-icon"
            },
            {
              "description": "the error row element",
              "name": "error-row"
            },
            {
              "description": "the close error button element",
              "name": "btn-close-error"
            },
            {
              "description": "the error data container element",
              "name": "error-data-container"
            },
            {
              "description": "the toolbar area element",
              "name": "toolbararea"
            },
            {
              "description": "the start all button element",
              "name": "btn-start-all"
            },
            {
              "description": "the cancel all button element",
              "name": "btn-cancel-all"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "fileInput",
              "type": {
                "text": "HTMLInputElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "droparea",
              "type": {
                "text": "HTMLElement | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "files",
              "type": {
                "text": "any[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "xhrHeaders",
              "type": {
                "text": "any[] | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "send",
              "type": {
                "text": "(formData: any, uiElem: HTMLElement) => void | undefined"
              }
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "method",
              "name": "sendByXHR",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "formData",
                  "type": {
                    "text": "object"
                  },
                  "description": "Contains the form data / file data."
                },
                {
                  "name": "uiElem",
                  "type": {
                    "text": "object"
                  },
                  "description": "The ui element"
                }
              ],
              "description": "Send file to server, by XMLHttpRequest\nMust have url value",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setXhrHeaders",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set xhr headers value",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "dispatchFileEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "eventName",
                  "type": {
                    "text": "string"
                  },
                  "description": "The event name"
                },
                {
                  "name": "e",
                  "type": {
                    "text": "object"
                  },
                  "description": "Actual event"
                },
                {
                  "name": "id",
                  "type": {
                    "text": "string"
                  },
                  "description": "The id"
                },
                {
                  "name": "file",
                  "type": {
                    "text": "string"
                  },
                  "description": "The file"
                }
              ],
              "description": "Dispatch event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getDropareaLabel",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "hasBrowse",
                  "optional": true,
                  "type": {
                    "text": "boolean"
                  },
                  "description": "if true, use with browse link"
                }
              ],
              "description": "Get droparea label html",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setDropareaLabel",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set droparea label html",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setError",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opt",
                  "default": "{}",
                  "type": {
                    "text": "any"
                  },
                  "description": "The error message options."
                }
              ],
              "description": "Set an arbitrary error message"
            },
            {
              "kind": "method",
              "name": "errorMessage",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "opt",
                  "type": {
                    "text": "any"
                  },
                  "description": "The error message options."
                }
              ],
              "description": "Show/Hide given error message",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "statusFiles",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "parameters": [
                {
                  "name": "status",
                  "type": {
                    "text": "string"
                  },
                  "description": "The status"
                }
              ],
              "description": "Get status filter files",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setDisabled",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set Disabled\nNOTE: Making Disabled while In-Process uploading, will NOT stop uploading files.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "getErrorValue",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "error",
                  "type": {
                    "text": "string"
                  },
                  "description": "The error"
                }
              ],
              "description": "Get error value",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "validateAcceptFile",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "file",
                  "type": {
                    "text": "any"
                  },
                  "description": "to check types"
                }
              ],
              "description": "Check if file type or extension is allowed to accept",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "validation",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "parameters": [
                {
                  "name": "file",
                  "type": {
                    "text": "any"
                  },
                  "description": "The file to check"
                }
              ],
              "description": "Check for all type of validation requird before upload",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "startInProcess",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "fileNode",
                  "type": {
                    "text": "object"
                  },
                  "description": "Filenode related to file element."
                }
              ],
              "description": "Start given file node in to process",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFileUpload",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "files",
                  "type": {
                    "text": "object"
                  },
                  "description": "File object containing uploaded files."
                }
              ],
              "description": "Read the file contents using HTML5 FormData()",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "setToolbar",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set toolbar",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleSlotchangeEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle slotchange event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleLabelClickEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle label click event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFileInputChangeEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle fileInput change event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDropareaDragenterEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle droparea dragenter event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDropareaDragoverEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle droparea dragover event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDropareaDropEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle droparea drop event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleDocumentDragDropEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle document drag-drop events\nIf the files are dropped outside the div, files will open in the browser window.\nTo avoid this prevent 'drop' event on document.",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleFileEvent",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "uiElem",
                  "type": {
                    "text": "object"
                  },
                  "description": "The ui element"
                }
              ],
              "description": "Handle file event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "handleToolbarEvents",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle toolbar events",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Handle events",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "all",
              "type": {
                "text": "Array<unknown>"
              },
              "description": "Get list of all added files",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "notStarted",
              "type": {
                "text": "Array<unknown>"
              },
              "description": "Get list of not started files",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "inProcess",
              "type": {
                "text": "Array<unknown>"
              },
              "description": "Get list of in process files",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "aborted",
              "type": {
                "text": "Array<unknown>"
              },
              "description": "Get list of aborted files",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "errored",
              "type": {
                "text": "Array<unknown>"
              },
              "description": "Get list of errored files",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "completed",
              "type": {
                "text": "Array<unknown>"
              },
              "description": "Get list of completed files",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "fileSlotsTemplate",
              "type": {
                "text": "string"
              },
              "description": "Get template for current slots to use in file element",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "fileTemplate",
              "type": {
                "text": "string"
              },
              "description": "Get template for file element",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "toolbarTemplate",
              "type": {
                "text": "string"
              },
              "description": "Get template for toolbar element",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "errorMaxFilesVal",
              "type": {
                "text": "string"
              },
              "description": "Get error max files value",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "showBrowseLinkVal",
              "type": {
                "text": "boolean"
              },
              "description": "Get show browse link value",
              "privacy": "private",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "accept",
              "description": "Sets limit the file types to be uploaded",
              "parameters": [
                {
                  "description": "The accept value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "autoStart",
              "description": "Allow automatic start upload, after files have been dropped or added",
              "parameters": [
                {
                  "description": "The value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string|undefined"
                  }
                }
              ],
              "type": {
                "text": "boolean"
              }
            },
            {
              "kind": "field",
              "name": "disabled",
              "description": "Sets the whole element to disabled",
              "parameters": [
                {
                  "description": "The disabled value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "icon",
              "description": "Sets the icon to be use in main drop area",
              "parameters": [
                {
                  "description": "The icon value",
                  "name": "value",
                  "type": {
                    "text": "string | undefined"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "iconSize",
              "description": "Sets the icon size to be use in main drop area",
              "parameters": [
                {
                  "description": "The icon size value",
                  "name": "value",
                  "type": {
                    "text": "string | undefined | null"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "maxFileSize",
              "description": "Sets the max file size in bytes",
              "parameters": [
                {
                  "description": "The max-file-size value",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ],
              "type": {
                "text": "string | number"
              }
            },
            {
              "kind": "field",
              "name": "maxFiles",
              "description": "Sets the max number of files can be uploaded",
              "parameters": [
                {
                  "description": "The max-files value",
                  "name": "value",
                  "type": {
                    "text": "string | number | null"
                  }
                }
              ],
              "type": {
                "text": "string | number"
              }
            },
            {
              "kind": "field",
              "name": "maxFilesInProcess",
              "description": "Sets the max number of files can be uploaded while in process",
              "parameters": [
                {
                  "description": "The max-files-in-process value",
                  "name": "value",
                  "type": {
                    "text": "string | number | null"
                  }
                }
              ],
              "type": {
                "text": "string | number"
              }
            },
            {
              "kind": "field",
              "name": "method",
              "description": "Sets the method to use component XMLHttpRequest method to send files",
              "parameters": [
                {
                  "description": "The method value",
                  "name": "value",
                  "type": {
                    "text": "string | undefined"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "paramName",
              "description": "Sets the variable name to read from server",
              "parameters": [
                {
                  "description": "The param-name value",
                  "name": "value",
                  "type": {
                    "text": "string | undefined"
                  }
                }
              ],
              "type": {
                "text": "string"
              }
            },
            {
              "kind": "field",
              "name": "showBrowseLink",
              "description": "Sets a link to browse files to upload",
              "parameters": [
                {
                  "description": "The show-browse-link value",
                  "name": "value",
                  "type": {
                    "text": "boolean|string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            },
            {
              "kind": "field",
              "name": "url",
              "description": "Sets the url to use component XMLHttpRequest method to send files",
              "parameters": [
                {
                  "description": "The url value",
                  "name": "value",
                  "type": {
                    "text": "string"
                  }
                }
              ],
              "type": {
                "text": "string | null"
              }
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-upload-advanced/ids-upload-advanced.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsUploadAdvanced",
            "module": "src/components/ids-upload-advanced/ids-upload-advanced.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-virtual-scroll/ids-virtual-scroll.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Virtual Scroll Component",
          "name": "IdsVirtualScroll",
          "members": [
            {
              "kind": "field",
              "name": "datasource",
              "type": {
                "text": "IdsDataSource | Record<string, any>"
              },
              "default": "{}"
            },
            {
              "kind": "field",
              "name": "timeout",
              "type": {
                "text": "number | null | undefined"
              }
            },
            {
              "kind": "field",
              "name": "initialized",
              "type": {
                "text": "boolean"
              },
              "default": "false"
            },
            {
              "kind": "field",
              "name": "lastStart",
              "default": "NaN"
            },
            {
              "kind": "field",
              "name": "lastEnd",
              "default": "NaN"
            },
            {
              "kind": "field",
              "name": "eventTarget",
              "type": {
                "text": "HTMLElement | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "onAfterVirtualScroll",
              "type": {
                "text": "(data: OnAfterVirtualScrollArgs) => void | undefined"
              }
            },
            {
              "kind": "field",
              "name": "stringTemplate",
              "type": {
                "text": "string"
              },
              "default": "'<div class=\"ids-virtual-scroll-item\" part=\"list-item\">${productName}</div>'"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "description": "Establish Internal Event Handlers",
              "return": {
                "type": {
                  "text": "void"
                }
              }
            },
            {
              "kind": "method",
              "name": "handleScroll",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "parameters": [
                {
                  "name": "e",
                  "type": {
                    "text": "Event"
                  },
                  "description": "The scroll event data"
                }
              ],
              "description": "Handle the scrolling event",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "renderItems",
              "parameters": [
                {
                  "name": "allowZero",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "Allow a zero length dataset (render empty)"
                }
              ],
              "description": "Render the visible section plus the cached data",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "applyHeight",
              "return": {
                "type": {
                  "text": "void"
                }
              },
              "description": "Set the height of the containers",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "visibleItemCount",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "description": "Render the visible section plus the cached data",
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "attributes",
              "type": {
                "text": "Array<string>"
              },
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "field",
              "name": "height",
              "description": "The height of the virtual scroll container",
              "parameters": [
                {
                  "description": "the height for css",
                  "name": "value",
                  "type": {
                    "text": "number|string|null"
                  }
                }
              ],
              "type": {
                "text": "number | string"
              }
            },
            {
              "kind": "field",
              "name": "itemHeight",
              "description": "The height of each item in the scroller. TODO: support dynamic heights",
              "parameters": [
                {
                  "description": "the height of each item in pixels",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "bufferSize",
              "description": "Extra padding at the top and bottom so that the data transition smoothly",
              "parameters": [
                {
                  "description": "The number of extra top and bottom elements",
                  "name": "value",
                  "type": {
                    "text": "number"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "field",
              "name": "#scrollTop",
              "privacy": "private",
              "description": "Set the scroll top position and scroll down to that location",
              "parameters": [
                {
                  "description": "The number of pixels from the top",
                  "name": "value",
                  "type": {
                    "text": "number | string"
                  }
                }
              ],
              "type": {
                "text": "number"
              }
            },
            {
              "kind": "method",
              "name": "scrollToIndex",
              "parameters": [
                {
                  "name": "value",
                  "type": {
                    "text": "number"
                  },
                  "description": "The index to scroll to"
                }
              ],
              "description": "Scroll to a indexed item bring it into center view."
            },
            {
              "kind": "field",
              "name": "contentHeight",
              "type": {
                "text": "number"
              },
              "description": "The height of the content behind the viewport",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "itemCount",
              "type": {
                "text": "number"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "offsetY",
              "type": {
                "text": "number"
              },
              "readonly": true
            },
            {
              "kind": "field",
              "name": "startIndex",
              "type": {
                "text": "number"
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "itemTemplate",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "parameters": [
                {
                  "name": "item",
                  "type": {
                    "text": "object"
                  },
                  "description": "The item to generate"
                },
                {
                  "name": "index",
                  "type": {
                    "text": "number"
                  },
                  "description": "the index for the template"
                },
                {
                  "name": "ariaIndex",
                  "optional": true,
                  "type": {
                    "text": "number"
                  },
                  "description": "the aria index for the template (not used here but used in some implementations)"
                }
              ],
              "description": "Return a item's html injecting any values from the dataset as needed."
            },
            {
              "kind": "field",
              "name": "data",
              "description": "Set the data array of the listview",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "array",
                  "type": {
                    "text": "Array|null"
                  }
                }
              ],
              "type": {
                "text": "Array<any>"
              }
            },
            {
              "kind": "field",
              "name": "scrollTarget",
              "description": "Set the scroll target to a external parent",
              "parameters": [
                {
                  "description": "The array to use",
                  "name": "value",
                  "type": {
                    "text": "HTMLElement|null"
                  }
                }
              ],
              "type": {
                "text": "HTMLElement | null"
              }
            }
          ],
          "mixins": [
            {
              "name": "IdsEventsMixin",
              "module": "/src/mixins/ids-events-mixin/ids-events-mixin"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsVirtualScroll",
            "module": "src/components/ids-virtual-scroll/ids-virtual-scroll.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-week-view/ids-week-view.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Week View Component",
          "name": "IdsWeekView",
          "members": [
            {
              "kind": "field",
              "name": "dayMap",
              "type": {
                "text": "DayMapData[]"
              },
              "default": "[]"
            },
            {
              "kind": "field",
              "name": "vetoableEventTypes",
              "type": {
                "text": "array"
              },
              "default": "['beforeweekrendered']"
            },
            {
              "kind": "field",
              "name": "ro",
              "type": {
                "text": "ResizeObserver | null"
              },
              "default": "null"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Inner template contents"
            },
            {
              "kind": "method",
              "name": "#attachEventHandlers",
              "description": "Establish internal event handlers",
              "return": {
                "type": {
                  "text": "object"
                }
              },
              "privacy": "private"
            },
            {
              "kind": "field",
              "name": "onLocaleChange",
              "description": "Respond to locale changes"
            },
            {
              "kind": "field",
              "name": "onLanguageChange",
              "description": "Respond to language changes"
            },
            {
              "kind": "method",
              "name": "changeDate",
              "parameters": [
                {
                  "name": "type",
                  "type": {
                    "text": "'next'|'previous'|'today'"
                  },
                  "description": "of event to be called"
                }
              ],
              "description": "Change startDate/endDate by event type"
            },
            {
              "kind": "method",
              "name": "#batchBeforeRender",
              "parameters": [
                {
                  "name": "fn",
                  "type": {
                    "text": "Function"
                  },
                  "description": "Function containg batched operations"
                }
              ],
              "description": "Allows execution of multiple operations before rendering week\nEx. setting startDate & endDate before triggering #renderWeek"
            },
            {
              "kind": "method",
              "name": "#renderWeek",
              "description": "Add week HTML to shadow including day/weekday header, hour rows, event cells"
            },
            {
              "kind": "method",
              "name": "#renderTimeline",
              "description": "Add/remove timeline HTML to hour row\nUpdate timeline position every 30 seconds"
            },
            {
              "kind": "method",
              "name": "#clearInterval",
              "description": "Removes a previously-set interval that controls timeline position"
            },
            {
              "kind": "field",
              "name": "#timelinePositionInterval",
              "privacy": "private",
              "type": {
                "text": "FrameRequestLoopHandler | undefined"
              },
              "description": "Stored interval used to control timeline position"
            },
            {
              "kind": "method",
              "name": "#attachOffsetTop",
              "description": "Add CSS variable of the container offset top\nto be used in CSS to fit the component to the viewport height"
            },
            {
              "kind": "method",
              "name": "#getDateHours",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "name": "date",
                  "type": {
                    "text": "Date"
                  },
                  "description": "Date object"
                },
                {
                  "name": "rounded",
                  "type": {
                    "text": "boolean"
                  },
                  "description": "If true, rounds down to nearest half hour"
                }
              ],
              "description": "Gets number of hours of Date (ex. 3:15am => 3.25)"
            },
            {
              "kind": "method",
              "name": "renderEventsData",
              "parameters": [
                {
                  "name": "forceRender",
                  "default": "false",
                  "description": "if true, skips beforeEventRender",
                  "type": {
                    "text": "boolean"
                  }
                }
              ],
              "description": "Renders all events currently set or returned in beforeEventsRender function"
            },
            {
              "kind": "method",
              "name": "#findHourContainer",
              "return": {
                "type": {
                  "text": "HTMLTableCellElement | null"
                }
              },
              "parameters": [
                {
                  "name": "eventData",
                  "type": {
                    "text": "CalendarEventData"
                  },
                  "description": "event data"
                }
              ],
              "description": "Finds week view table cell element for intraday event"
            },
            {
              "kind": "method",
              "name": "#createCalendarEvent",
              "return": {
                "type": {
                  "text": "IdsCalendarEvent"
                }
              },
              "parameters": [
                {
                  "name": "eventData",
                  "type": {
                    "text": "CalendarEventData"
                  },
                  "description": "event data for calendar event"
                },
                {
                  "name": "cssClass",
                  "optional": true,
                  "type": {
                    "text": "Array<string>"
                  },
                  "description": "optional css classes for calendar event"
                }
              ],
              "description": "Creates IdsCalendarEvent and assigns event data and event type"
            },
            {
              "kind": "method",
              "name": "#renderEvent",
              "parameters": [
                {
                  "name": "eventData",
                  "type": {
                    "text": "CalendarEventData"
                  },
                  "description": "Data to create calendar event"
                }
              ],
              "description": "Creates IdsCalendarEvent and finds its appropriate container"
            },
            {
              "kind": "method",
              "name": "#appendIntradayEvent",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "HTMLElement containing calendar event"
                },
                {
                  "name": "calendarEvent",
                  "type": {
                    "text": "IdsCalendarEvent"
                  },
                  "description": "IdsCalendarEvent component"
                }
              ],
              "description": "Appends IdsCalendarEvent to hour container\nAdjust styles to reflect event duration and accomodate multiple events"
            },
            {
              "kind": "method",
              "name": "#appendAllDayEvent",
              "parameters": [
                {
                  "name": "container",
                  "type": {
                    "text": "HTMLElement"
                  },
                  "description": "HTMLElement containing calendar event"
                },
                {
                  "name": "calendarEvent",
                  "type": {
                    "text": "IdsCalendarEvent"
                  },
                  "description": "IdsCalendarEvent component"
                }
              ],
              "description": "Appends IdsCalendarEvent to all day section of week view\nAdjust styles to accomodate multiple calendar events"
            },
            {
              "kind": "field",
              "name": "showToday",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not the today button should be shown",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "showToday param value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "startDate",
              "type": {
                "text": "Date"
              },
              "description": "Set start of the week to show",
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "parameters": [
                {
                  "description": "startDate param value",
                  "name": "val",
                  "type": {
                    "text": "string|Date"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "endDate",
              "type": {
                "text": "Date"
              },
              "description": "Set end of the week to show",
              "return": {
                "type": {
                  "text": "Date"
                }
              },
              "parameters": [
                {
                  "description": "endDate param value",
                  "name": "val",
                  "type": {
                    "text": "string|Date"
                  }
                }
              ]
            },
            {
              "kind": "method",
              "name": "onFirstDayOfWeekChange"
            },
            {
              "kind": "field",
              "name": "startHour",
              "type": {
                "text": "number"
              },
              "description": "Set start hour of the day (0-24)",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "description": "startHour param value",
                  "name": "val",
                  "type": {
                    "text": "string|number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "endHour",
              "type": {
                "text": "number"
              },
              "description": "Set end hour of the day (0-24)",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "description": "endHour param value",
                  "name": "val",
                  "type": {
                    "text": "string|number"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "showTimeline",
              "type": {
                "text": "boolean"
              },
              "description": "Set whether or not to show a bar across the current time",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "description": "showTimeline param value",
                  "name": "val",
                  "type": {
                    "text": "string|boolean"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "timelineInterval",
              "type": {
                "text": "number"
              },
              "description": "Set how often timeline should update it's position (in milliseconds)",
              "return": {
                "type": {
                  "text": "number"
                }
              },
              "parameters": [
                {
                  "description": "timelineInterval param value",
                  "name": "val",
                  "type": {
                    "text": "number|string"
                  }
                }
              ]
            }
          ],
          "superclass": {
            "name": "Base",
            "module": "src/components/ids-week-view/ids-week-view.ts"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsWeekView",
            "module": "src/components/ids-week-view/ids-week-view.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-wizard/ids-wizard-step.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS WizardStep Component",
          "name": "IdsWizardStep",
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsWizardStep",
            "module": "src/components/ids-wizard/ids-wizard-step.ts"
          }
        }
      ]
    },
    {
      "kind": "javascript-module",
      "path": "src/components/ids-wizard/ids-wizard.ts",
      "declarations": [
        {
          "kind": "class",
          "description": "IDS Wizard Component",
          "name": "IdsWizard",
          "cssParts": [
            {
              "description": "the overall wizard container",
              "name": "wizard"
            },
            {
              "description": "a step on the wizard",
              "name": "step"
            },
            {
              "description": "the line between a step and another",
              "name": "path-segment"
            }
          ],
          "members": [
            {
              "kind": "field",
              "name": "shouldUpdateCallbacks",
              "type": {
                "text": "boolean"
              },
              "default": "true",
              "description": "whether to update callbacks after\na render() event"
            },
            {
              "kind": "field",
              "name": "stepObserver",
              "default": "new MutationObserver((mutations) => {\n    for (const { type } of mutations) {\n      if (type === 'childList') {\n        this.shouldUpdateCallbacks = true;\n        this.render(true);\n      }\n    }\n  })"
            },
            {
              "kind": "field",
              "name": "resizeObserver",
              "default": "new ResizeObserver(() => {\n    this.fitAndSizeElements();\n  })"
            },
            {
              "kind": "method",
              "name": "fitAndSizeElements",
              "description": "fits and resizes all labels to fit\nwithin the space available"
            },
            {
              "kind": "method",
              "name": "areRectsHColliding",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "r1",
                  "type": {
                    "text": "DOMRect"
                  },
                  "description": "elem1's bounding box"
                },
                {
                  "name": "r2",
                  "type": {
                    "text": "DOMRect"
                  },
                  "description": "elem2's bounding box"
                }
              ],
              "description": "Checks whether bounding box/rects retrieved\nfrom elem's bounding box are colliding horizontally"
            },
            {
              "kind": "field",
              "name": "attributes",
              "static": true,
              "description": "Return the attributes we handle as getters/setters",
              "return": {
                "type": {
                  "text": "Array"
                }
              },
              "readonly": true
            },
            {
              "kind": "method",
              "name": "isStepClickable",
              "return": {
                "type": {
                  "text": "boolean"
                }
              },
              "parameters": [
                {
                  "name": "stepNumber",
                  "type": {
                    "text": "number"
                  },
                  "description": "the step number to check"
                }
              ],
              "description": "whether or not a step is clickable",
              "privacy": "private"
            },
            {
              "kind": "method",
              "name": "template",
              "return": {
                "type": {
                  "text": "string"
                }
              },
              "description": "Create the Template for the contents"
            },
            {
              "kind": "field",
              "name": "stepNumber",
              "type": {
                "text": "number | string"
              },
              "description": "Set the step number",
              "return": {
                "type": {
                  "text": "number|string"
                }
              },
              "parameters": [
                {
                  "description": "step number (1-based)",
                  "name": "value",
                  "type": {
                    "text": "number|string"
                  }
                }
              ]
            },
            {
              "kind": "field",
              "name": "clickable"
            },
            {
              "kind": "method",
              "name": "rendered",
              "description": "Binds associated callbacks\nold handlers when template refreshes"
            },
            {
              "kind": "method",
              "name": "getStepEl",
              "return": {
                "type": {
                  "text": "HTMLElement"
                }
              },
              "parameters": [
                {
                  "name": "wizardEl",
                  "type": {
                    "text": "*"
                  },
                  "description": "source Wizard"
                },
                {
                  "name": "stepNumber",
                  "type": {
                    "text": "*"
                  },
                  "description": "step number"
                }
              ],
              "description": "retrieves a step marker element within\na wizard's shadow DOM"
            },
            {
              "kind": "method",
              "name": "resizeStepLabelRects",
              "return": {
                "type": {
                  "text": "Array<DOMRect>"
                }
              },
              "parameters": [
                {
                  "name": "args",
                  "type": {
                    "text": "Array"
                  },
                  "description": "the arguments; should be IdsWizard element as only\nuser-defined element"
                }
              ],
              "description": "Recursively resize steps for an element so they don't collide;\n(only pass the wizard element to args)"
            }
          ],
          "mixins": [
            {
              "name": "IdsEventsMixin",
              "module": "/src/mixins/ids-events-mixin/ids-events-mixin"
            }
          ],
          "superclass": {
            "name": "IdsElement",
            "module": "/src/core/ids-element"
          }
        }
      ],
      "exports": [
        {
          "kind": "js",
          "name": "default",
          "declaration": {
            "name": "IdsWizard",
            "module": "src/components/ids-wizard/ids-wizard.ts"
          }
        }
      ]
    }
  ]
}

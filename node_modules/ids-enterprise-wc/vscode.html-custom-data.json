{"$schema":"https://raw.githubusercontent.com/microsoft/vscode-html-languageservice/main/docs/customData.schema.json","version":1.1,"tags":[{"name":"ids-about","attributes":[{"name":"ariaLabelContent","description":"Used for ARIA Labels and other content","values":[]},{"name":"productName","description":"Set the product name property","values":[]},{"name":"productVersion","description":"Set the product version property","values":[]},{"name":"deviceSpecs","description":"Sets whether or not to display device information.","values":[]},{"name":"copyrightYear","description":"Set the copyright year property","values":[]},{"name":"useDefaultCopyright","description":"Sets whether or not to display Legal Approved Infor Copyright Text","values":[]}],"description":{"kind":"markdown","value":"# Ids About Component\n\nProvides information about an application / product with copyright and browser information.\n\nThe IDS About Component builds on top of the [Modal](../ids-modal/README.md)\n\n## Use Cases\n\n- Display application name, product name and product version\n- Display copyright information\n- Display browser and device information\n\n## Settings (Attributes)\n\n- `product-name` {string} product name information to display\n- `product-version` {string} semantic product version number\n- `copyright-year` {string} the year displayed in the copyright, defaults to current year\n- `use-default-copyright` {boolean} whether or not to display legal approved Infor copyright text\n- `device-specs` {boolean} whether or not to display device / browser information\n\n## Slots\n\n- `slot=\"icon\"` - appears at the top of the modal, centered\n- `slot=\"appName\"` - appears at the top of the modal, below icon, centered\n- `slot=\"content\"` - additional content appears below product name/version, about copyright\n\n## Features (With Code Examples)\n\nExample with application name, product name, product version and logo\n\n```html\n<ids-about id=\"about-example\" product-name=\"Product\" product-version=\"4.0.0\">\n  <ids-icon slot=\"icon\" icon=\"logo\" viewbox=\"0 0 35 34\" size=\"xxl\" /></ids-icon>\n  <ids-text id=\"about-example-name\" slot=\"appName\" type=\"h1\" font-size=\"24\" font-weight=\"semi-bold\">Application Name</ids-text>\n  <ids-text id=\"about-example-content\" slot=\"content\" type=\"p\">Additional content</ids-text>\n</ids-about>\n```\n\nExample with only copyright text and browser/device information\n\n```html\n<ids-about id=\"about-example\">\n</ids-about>\n```\n\nExample with custom copyright year, no application name or product information\n\n```html\n<ids-about id=\"about-example\" copyright-year=\"2020\">\n</ids-about>\n```\n\nExample with no copyright info and no browser/device information, but with application name and product name/version\n\n```html\n<ids-about\n  id=\"about-example\"\n  device-specs=\"false\"\n  use-default-copyright=\"false\"\n  product-name=\"Product\"\n  product-version=\"4.0.0\"\n>\n  <ids-text id=\"about-example-name\" slot=\"appName\" type=\"h1\" font-size=\"24\" font-weight=\"semi-bold\">Application Name</ids-text>\n</ids-about>\n```\n\nThe component can be controlled with Javascript\n\n```js\nconst about = document.querySelector('#about-example');\n\nabout.productVersion = 'Changed version';\nabout.productName = 'Changed product';\nabout.copyrightYear = '2020';\nabout.deviceSpecs = false;\nabout.useDefaultCopyright = false;\n```\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Replace `.inforAboutDialog()` with `.about()` and notice that many of the names of the settings (e.g. productName to appName) to have changed so must be updated to the new settings.\n\n**4.x to 5.x**\n- About now uses all new markup and classes for web components (see above)\n- Cookies and full OS information (like version) has been removed to adhere to more modern browser standards and lack of availability of these features in modern browsers.\n- The `version` has been renamed to `productVersion`\n- The `close` method has been removed use `$('ids-about').visible = false` instead\n- The `destroy` method has been removed since everything is now cleaned up when removing the DOM element\n- The `close/open` events have been named to `show/hide`\n"}},{"name":"ids-action-panel","attributes":[{"name":"toolbar","values":[]},{"name":"shouldUpdate","values":[]},{"name":"onButtonClick","values":[]},{"name":"globalKeydownListener","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"ariaLabelContent","description":"Used for ARIA Labels and other content","values":[]},{"name":"buttons","values":[]},{"name":"fullsize","values":[]},{"name":"overlay","values":[]},{"name":"messageTitle","values":[]},{"name":"#visible","values":[]},{"name":"visible","values":[]},{"name":"#setFocusIfVisible","values":[]}],"description":{"kind":"markdown","value":"# Ids Action Panel\n\nThe IDS Action Panel (formerly known as Contextual Action panel or CAP) is used to display complex forms inside of a [Modal](../ids-modal/README.md) area.  The intended use of this component is to temporarily draw user attention away from a primary workflow to handle a complicated function, eventually returning its result back to the main workflow.\n\n## Use Cases\n\n- creating a new shipping order\n- filling out a small form and submitting to a list.\n- searching a table of data, selecting a record, and returning the record to a [trigger field]('../ids-trigger-field/README.md'), similar to what occurs in the [IdsLookup](../ids-lookup/README.md)\n\n## Terminology\n\n- **\"CAP\"** - IDS's old abbreviation for the old name \"Contextual Action Panel\"\n\n## Features (With Code Examples)\n\nAction Panels with no content present look similar to [Modals]('../ids-modal/README.md'), presenting just a floating content area over top of the page:\n\n```html\n<ids-action-panel id=\"my-cap\"></ids-action-panel>\n```\n\nOne main difference between the Modal and CAP is the `toolbar` slot, which will be placed where the Modal's title would normally appear, and is styled similarly to [Headers]('../ids-header/README.md).  The contents of this slot should be an [IdsToolbar]('../ids-toolbar/README.md) marked for the `toolbar` slot:\n\n```html\n<ids-action-panel id=\"my-cap\">\n    <ids-toolbar id=\"cap-toolbar\" slot=\"toolbar\">\n        <ids-toolbar-section type=\"title\">\n            <ids-text font-size=\"20\" type=\"h2\">Company Information</ids-text>\n        </ids-toolbar-section>\n\n        <ids-toolbar-section type=\"buttonset\" align=\"end\">\n            <ids-button id=\"btn-save\" icon=\"save\" no-padding>\n                <ids-text font-weight=\"semi-bold\">Save</ids-text>\n            </ids-button>\n            <ids-separator vertical=\"true\"></ids-separator>\n            <ids-button id=\"btn-close\" icon=\"close\" no-padding>\n                <ids-text font-weight=\"semi-bold\">Close</ids-text>\n            </ids-button>\n        </ids-toolbar-section>\n    </ids-toolbar>\n</ids-action-panel>\n```\n\nSimilar to the Modal, any content not marked for a slot will be present inside the main content area of the CAP:\n\n```html\n<ids-action-panel id=\"my-cap\">\n    <form>\n        <ids-dropdown id=\"cap-dd-template\" label=\"Template\" value=\"1\">\n            <ids-list-box>\n                <ids-list-box-option value=\"\">None</ids-list-box-option>\n                <ids-list-box-option value=\"1\" selected>Template #1</ids-list-box-option>\n                <ids-list-box-option value=\"2\">3568</ids-list-box-option>\n            </ids-list-box>\n        </ids-dropdown>\n\n        <ids-textarea id=\"cap-textarea-notes\" label=\"Notes\"></ids-textarea>\n    </form>\n</ids-action-panel>\n```\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Did not exist in 3.X, but any complex modals should be changed to use this.\n\n**4.x to 5.x**\n\n- 5.x: CAP is now a web component, and is functionally similar to [IdsModal](../ids-modal/README.md), using the same API and events.  The construction of the Modal is declarative and done mostly through HTML markup.\n- Markup has changed to a custom element `<ids-action-panel></ids-action-panel>`\n- Component is now fully defined in HTML Markup and using slots\n- To hide and show the CAP, use the `visible` property `$('ids-action-panel').visible = false`\n"}},{"name":"ids-accordion-common","description":{"kind":"markdown","value":"# Ids Accordion Component\n\n## Description\n\nThe IDS Accordion component is a UI pattern that is comprised of a stacked list of elements. A basic accordion will consist of a `ids-accordion-header` which shows a title or summary of the `ids-accordion-panel` and acts as a control for expanding and collapsing. Note: Standalone Css is not available for this component.\n\n## Use Cases\n\n- Can be used to conserve space, by hiding information until needed. Accordions can be commonly seen on mobile sites and applications. It can help tell the user what the page is about and allows the user to select and see what is needed.\n- Can be used for navigation.  The accordion is the main interactive element inside of the [App Menu](../ids-app-menu/README.md)\n\n## Terminology\n\n- **ids-accordion** Parent container for all accordions\n- **ids-accordion-panel** First child of and accordion. Contains the header and content area. Contains 2 slots, the `header` and the `pane`.\n- **ids-accordion-header** Typically used in the header slot, contains the title and acts as the control for expanding and collapsing.\n\n## Features (With Code Examples)\n\nStandard accordion, most commonly used:\n\n```html\n<ids-accordion>\n    <ids-accordion-panel>\n        <ids-accordion-header slot=\"header\">\n            <ids-text font-size=\"16\">Warehouse Location</ids-text>\n        </ids-accordion-header>\n        <ids-text slot=\"content\">\n            Remix, optimize, \"B2B, iterate?\" Best-of-breed efficient beta-test; social cutting-edge: rich magnetic tagclouds\n            front-end infomediaries viral authentic incentivize sexy extensible functionalities incentivize. Generate killer\n            authentic grow vertical blogospheres, functionalities ecologies harness, \"tag solutions synergies exploit data-driven B2C open-source e-markets optimize create, enhance convergence create.\" Out-of-the-box strategize best-of-breed back-end, deploy design markets metrics. Content web services enhance leading-edge Cluetrain, deliverables dot-com scalable. User-centric morph, back-end, synthesize mesh, frictionless, exploit next-generation tag portals, e-commerce channels; integrate; recontextualize distributed revolutionize innovative eyeballs.\n        </ids-text>\n    </ids-accordion-panel>\n    <ids-accordion-panel>\n        <ids-accordion-header slot=\"header\">\n            <ids-text font-size=\"16\">Sort By</ids-text>\n        </ids-accordion-header>\n        <ids-text slot=\"content\">\n            Remix, optimize, \"B2B, iterate?\" Best-of-breed efficient beta-test; social cutting-edge: rich magnetic tagclouds\n            front-end infomediaries viral authentic incentivize sexy extensible functionalities incentivize. Generate killer\n            authentic grow vertical blogospheres, functionalities ecologies harness, \"tag solutions synergies exploit\n            data-driven B2C open-source e-markets optimize create, enhance convergence create.\" Out-of-the-box strategize\n            best-of-breed back-end, deploy design markets metrics. Content web services enhance leading-edge Cluetrain,\n            deliverables dot-com scalable. User-centric morph, back-end, synthesize mesh, frictionless, exploit next-generation\n            tag portals, e-commerce channels; integrate; recontextualize distributed revolutionize innovative eyeballs.\n        </ids-text>\n    </ids-accordion-panel>\n    <ids-accordion-panel>\n        <ids-accordion-header slot=\"header\">\n            <ids-text font-size=\"16\">Brand Name</ids-text>\n        </ids-accordion-header>\n        <ids-text slot=\"content\">\n            Remix, optimize, \"B2B, iterate?\" Best-of-breed efficient beta-test; social cutting-edge: rich magnetic tagclouds\n            front-end infomediaries viral authentic incentivize sexy extensible functionalities incentivize. Generate killer\n            authentic grow vertical blogospheres, functionalities ecologies harness, \"tag solutions synergies exploit\n            data-driven B2C open-source e-markets optimize create, enhance convergence create.\" Out-of-the-box strategize\n            best-of-breed back-end, deploy design markets metrics. Content web services enhance leading-edge Cluetrain,\n            deliverables dot-com scalable. User-centric morph, back-end, synthesize mesh, frictionless, exploit next-generation\n            tag portals, e-commerce channels; integrate; recontextualize distributed revolutionize innovative eyeballs.\n        </ids-text>\n    </ids-accordion-panel>\n    <ids-accordion-panel>\n        <ids-accordion-header slot=\"header\">\n            <ids-text font-size=\"16\">Material</ids-text>\n        </ids-accordion-header>\n        <ids-text slot=\"content\">\n            Remix, optimize, \"B2B, iterate?\" Best-of-breed efficient beta-test; social cutting-edge: rich magnetic tagclouds\n            front-end infomediaries viral authentic incentivize sexy extensible functionalities incentivize. Generate killer\n            authentic grow vertical blogospheres, functionalities ecologies harness, \"tag solutions synergies exploit\n            data-driven B2C open-source e-markets optimize create, enhance convergence create.\" Out-of-the-box strategize\n            best-of-breed back-end, deploy design markets metrics. Content web services enhance leading-edge Cluetrain,\n            deliverables dot-com scalable. User-centric morph, back-end, synthesize mesh, frictionless, exploit next-generation\n            tag portals, e-commerce channels; integrate; recontextualize distributed revolutionize innovative eyeballs.\n        </ids-text>\n    </ids-accordion-panel>\n</ids-accordion>\n```\n\n### Nested Accordions\n\nIt's possible to nest accordion structures.  This is common in accordions used for navigation purposes, such as the ones applied to the [App Menu](../ids-app-menu/README.md).\n\nIn the example below, the \"My Benefits\", \"Dependents and Beneficiaries\", \"Life Events\", and \"Benefits Information\" panels are nested beneath the \"Benefits\" panel, which is nested beneath the \"Employee\" panel.\n\n```html\n<ids-accordion id=\"app-menu-style\">\n    <ids-accordion-panel id=\"employee\">\n        <ids-accordion-header slot=\"header\">\n            <ids-icon icon=\"user\" size=\"medium\"></ids-icon>\n            <ids-text font-size=\"16\">Employee</ids-text>\n        </ids-accordion-header>\n        <ids-accordion-panel slot=\"content\" id=\"benefits\">\n            <ids-accordion-header slot=\"header\" expander-type=\"plus-minus\">\n                <ids-text font-size=\"14\">Benefits</ids-text>\n            </ids-accordion-header>\n            <ids-accordion-panel slot=\"content\" id=\"my-benefits\">\n                <ids-accordion-header slot=\"header\">\n                    <ids-text font-size=\"14\">My Benefits</ids-text>\n                </ids-accordion-header>\n            </ids-accordion-panel>\n            <ids-accordion-panel slot=\"content\" id=\"dependents-beneficiaries\">\n                <ids-accordion-header slot=\"header\">\n                    <ids-text font-size=\"14\">Dependents and Beneficiaries</ids-text>\n                </ids-accordion-header>\n            </ids-accordion-panel>\n            <ids-accordion-panel slot=\"content\" id=\"life-events\">\n                <ids-accordion-header slot=\"header\">\n                    <ids-text font-size=\"14\">Life Events</ids-text>\n                </ids-accordion-header>\n            </ids-accordion-panel>\n            <ids-accordion-panel slot=\"content\" id=\"benefits-information\">\n                <ids-accordion-header slot=\"header\">\n                    <ids-text font-size=\"14\">Benefits Information</ids-text>\n                </ids-accordion-header>\n            </ids-accordion-panel>\n        </ids-accordion-panel>\n    </ids-accordion-panel>\n</ids-accordion>\n```\n\n## Class Hierarchy\n\n- IdsAccordion\n  - IdsElement\n- Mixins\n  IdsColorVariantMixin\n  IdsEventsMixin\n  IdsKeyboardMixin\n  IdsLocaleMixin\n- IdsAccordionHeader\n  - IdsElement\n- Mixins\n  IdsColorVariantMixin\n  IdsEventsMixin\n- IdsAccordionPanel\n  - IdsElement\n- Mixins\n  IdsColorVariantMixin\n  IdsKeyboardMixin\n  IdsLocaleMixin\n  IdsEventsMixin\n\n## Settings (Attributes)\n\nWhen used as an attribute the settings are kebab case, when used in the JS they are camel case.\n\n- `headers` {Array<IdsAccordionHeader>} Reference to all inner Accordion Headers.\n- `panels` {Array<IdsAccordionPanel>} Reference to all inner Accordion Panels.\n- `focused` {HTMLElement} Reference to the currently-focused element within the accordion, if applicable.\n- `allowOnePane` {boolean} Sets Accordion to allow only one inner Accordion Panel to be expanded at a time.\n\n## Events\n\n- `selected` Fire at the time the ids-accordion-panel element is selected, used for App-Menu,\nDetail contains the element `elem`\n- `expanded` Fires at the time the ids-accordion-panel is expanded. Detail contains the element `elem`\n- `collapsed` Fires at the time the ids-accordion-panel is collapsed. Detail contains the element `elem`\n\n## Methods\n\n- IdsAccordion\n  - `navigate` Navigate to the next/prev panel\n- IdsAccordionPanel\n  - `collapsePane` Collapse pane\n  - `expandPane` Expand pane\n  - `select` Select header and focus it\n  - `focus` Set focus on header\n\n## Themeable Parts\n\n- `accordion` Accordion root element\n\n## States and Variations\n\nThe Accordion's headers support the following states:\n\n- Normal/Default: This is the default of an accordion.\n- Hover: Roll over an interactive element inside the accordion\n- Disabled: Disabled elements can be inside an accordion. These cards cannot be clicked, hovered or focused.\n- Focus: For accessibility. To give a user guidance when using a screen reader.\n- Active/Selected: After the pressed/clicked state, users are taken to the active state. This includes expanding or closing an accordion.\n\n## Keyboard Guidelines\n\n- **Shift+Tab**: Works the same as Tab, but in the opposite direction. When focus is on the tab or accordion header, a press of down/right will move focus to the next logical accordion Header or Tab page. When focus reaches the last header/tab page, further key presses will have optionally wrap to the first header\n- **Up Arrow or Left Arrow**: When focus is on the tab or accordion header, a press of up/left will move focus to the previous logical accordion header or tab page. When focus reaches the first header/tab page, further key presses will optionally wrap to the last header.  This keystroke is also aware of how to traverse different levels of nested accordion panels.\n- **Down Arrow or Right Arrow**: When focus is on the tab or accordion header, a press of down/right will move focus to the next logical accordion header or tab page. When focus reaches the last header/tab page, further key presses will optionally wrap to the first header.  This keystroke is also aware of how to traverse different levels of nested accordion panels.\n- **Enter or Space**: When focus is on an accordion header, this keystroke toggles the expansion of the corresponding panel. If collapsed, the panel is expanded, and its aria-expanded state is set to true. If expanded, the panel is collapsed and its aria-expanded state is set to false.\n\n## Accessibility\n\nThe IDS Accordion component has a `role=\"region\"` and a unique `title` is generated for each instance.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Replace `.inforAboutDialog()` with `.about()` and notice that many of the names of the settings (e.g. productName to appName) to have changed so must be updated to the new settings.\n- The initial markup is changed considerably from the previous version. Sync the markup using the markup above\n- Initialize the accordion plugin with .accordion() as opposed to `.inforAccordion()` or by using the page initializer\nonExpanded and onCollapsed option are done with events (expanded and collapsed)\n\n**4.x to 5.x**\n- Accordion now uses all new markup and classes for web components (see above)\n- Now called IdsAccordion with a namespace\n- The \"Panels\" examples are removed and deprecated as they should rarely be used.\n- The deprecated `displayChevron` setting is removed.\n- The `enableTooltips` removed and deprecated as not added as it seems no longer relevant.\n- The `expanderDisplay` option was removed and deprecated as it was used only by IdsAppMenu and is no longer needed.\n- The `rerouteOnLinkClick` option was removed and deprecated as is no longer needed as there are no links in the markup now.\n- The `source` option was removed and deprecated as it was used only by IdsAppMenu and is no longer needed in accordion but will be added to IdsAppMenu.\n- The `destroy` method has been removed since everything is now cleaned up when removing the DOM element\n"}},{"name":"ids-accordion-header","attributes":[{"name":"colorVariants","values":[]},{"name":"panel","values":[]},{"name":"expanded","values":[]},{"name":"expanderType","values":[]},{"name":"icon","values":[]},{"name":"selected","values":[]},{"name":"hiddenByFilter","values":[]},{"name":"childFilterMatch","values":[]},{"name":"disabled","description":"Sets disabled property","values":[]}],"description":{"kind":"markdown","value":"# Ids Accordion Component\n\n## Description\n\nThe IDS Accordion component is a UI pattern that is comprised of a stacked list of elements. A basic accordion will consist of a `ids-accordion-header` which shows a title or summary of the `ids-accordion-panel` and acts as a control for expanding and collapsing. Note: Standalone Css is not available for this component.\n\n## Use Cases\n\n- Can be used to conserve space, by hiding information until needed. Accordions can be commonly seen on mobile sites and applications. It can help tell the user what the page is about and allows the user to select and see what is needed.\n- Can be used for navigation.  The accordion is the main interactive element inside of the [App Menu](../ids-app-menu/README.md)\n\n## Terminology\n\n- **ids-accordion** Parent container for all accordions\n- **ids-accordion-panel** First child of and accordion. Contains the header and content area. Contains 2 slots, the `header` and the `pane`.\n- **ids-accordion-header** Typically used in the header slot, contains the title and acts as the control for expanding and collapsing.\n\n## Features (With Code Examples)\n\nStandard accordion, most commonly used:\n\n```html\n<ids-accordion>\n    <ids-accordion-panel>\n        <ids-accordion-header slot=\"header\">\n            <ids-text font-size=\"16\">Warehouse Location</ids-text>\n        </ids-accordion-header>\n        <ids-text slot=\"content\">\n            Remix, optimize, \"B2B, iterate?\" Best-of-breed efficient beta-test; social cutting-edge: rich magnetic tagclouds\n            front-end infomediaries viral authentic incentivize sexy extensible functionalities incentivize. Generate killer\n            authentic grow vertical blogospheres, functionalities ecologies harness, \"tag solutions synergies exploit data-driven B2C open-source e-markets optimize create, enhance convergence create.\" Out-of-the-box strategize best-of-breed back-end, deploy design markets metrics. Content web services enhance leading-edge Cluetrain, deliverables dot-com scalable. User-centric morph, back-end, synthesize mesh, frictionless, exploit next-generation tag portals, e-commerce channels; integrate; recontextualize distributed revolutionize innovative eyeballs.\n        </ids-text>\n    </ids-accordion-panel>\n    <ids-accordion-panel>\n        <ids-accordion-header slot=\"header\">\n            <ids-text font-size=\"16\">Sort By</ids-text>\n        </ids-accordion-header>\n        <ids-text slot=\"content\">\n            Remix, optimize, \"B2B, iterate?\" Best-of-breed efficient beta-test; social cutting-edge: rich magnetic tagclouds\n            front-end infomediaries viral authentic incentivize sexy extensible functionalities incentivize. Generate killer\n            authentic grow vertical blogospheres, functionalities ecologies harness, \"tag solutions synergies exploit\n            data-driven B2C open-source e-markets optimize create, enhance convergence create.\" Out-of-the-box strategize\n            best-of-breed back-end, deploy design markets metrics. Content web services enhance leading-edge Cluetrain,\n            deliverables dot-com scalable. User-centric morph, back-end, synthesize mesh, frictionless, exploit next-generation\n            tag portals, e-commerce channels; integrate; recontextualize distributed revolutionize innovative eyeballs.\n        </ids-text>\n    </ids-accordion-panel>\n    <ids-accordion-panel>\n        <ids-accordion-header slot=\"header\">\n            <ids-text font-size=\"16\">Brand Name</ids-text>\n        </ids-accordion-header>\n        <ids-text slot=\"content\">\n            Remix, optimize, \"B2B, iterate?\" Best-of-breed efficient beta-test; social cutting-edge: rich magnetic tagclouds\n            front-end infomediaries viral authentic incentivize sexy extensible functionalities incentivize. Generate killer\n            authentic grow vertical blogospheres, functionalities ecologies harness, \"tag solutions synergies exploit\n            data-driven B2C open-source e-markets optimize create, enhance convergence create.\" Out-of-the-box strategize\n            best-of-breed back-end, deploy design markets metrics. Content web services enhance leading-edge Cluetrain,\n            deliverables dot-com scalable. User-centric morph, back-end, synthesize mesh, frictionless, exploit next-generation\n            tag portals, e-commerce channels; integrate; recontextualize distributed revolutionize innovative eyeballs.\n        </ids-text>\n    </ids-accordion-panel>\n    <ids-accordion-panel>\n        <ids-accordion-header slot=\"header\">\n            <ids-text font-size=\"16\">Material</ids-text>\n        </ids-accordion-header>\n        <ids-text slot=\"content\">\n            Remix, optimize, \"B2B, iterate?\" Best-of-breed efficient beta-test; social cutting-edge: rich magnetic tagclouds\n            front-end infomediaries viral authentic incentivize sexy extensible functionalities incentivize. Generate killer\n            authentic grow vertical blogospheres, functionalities ecologies harness, \"tag solutions synergies exploit\n            data-driven B2C open-source e-markets optimize create, enhance convergence create.\" Out-of-the-box strategize\n            best-of-breed back-end, deploy design markets metrics. Content web services enhance leading-edge Cluetrain,\n            deliverables dot-com scalable. User-centric morph, back-end, synthesize mesh, frictionless, exploit next-generation\n            tag portals, e-commerce channels; integrate; recontextualize distributed revolutionize innovative eyeballs.\n        </ids-text>\n    </ids-accordion-panel>\n</ids-accordion>\n```\n\n### Nested Accordions\n\nIt's possible to nest accordion structures.  This is common in accordions used for navigation purposes, such as the ones applied to the [App Menu](../ids-app-menu/README.md).\n\nIn the example below, the \"My Benefits\", \"Dependents and Beneficiaries\", \"Life Events\", and \"Benefits Information\" panels are nested beneath the \"Benefits\" panel, which is nested beneath the \"Employee\" panel.\n\n```html\n<ids-accordion id=\"app-menu-style\">\n    <ids-accordion-panel id=\"employee\">\n        <ids-accordion-header slot=\"header\">\n            <ids-icon icon=\"user\" size=\"medium\"></ids-icon>\n            <ids-text font-size=\"16\">Employee</ids-text>\n        </ids-accordion-header>\n        <ids-accordion-panel slot=\"content\" id=\"benefits\">\n            <ids-accordion-header slot=\"header\" expander-type=\"plus-minus\">\n                <ids-text font-size=\"14\">Benefits</ids-text>\n            </ids-accordion-header>\n            <ids-accordion-panel slot=\"content\" id=\"my-benefits\">\n                <ids-accordion-header slot=\"header\">\n                    <ids-text font-size=\"14\">My Benefits</ids-text>\n                </ids-accordion-header>\n            </ids-accordion-panel>\n            <ids-accordion-panel slot=\"content\" id=\"dependents-beneficiaries\">\n                <ids-accordion-header slot=\"header\">\n                    <ids-text font-size=\"14\">Dependents and Beneficiaries</ids-text>\n                </ids-accordion-header>\n            </ids-accordion-panel>\n            <ids-accordion-panel slot=\"content\" id=\"life-events\">\n                <ids-accordion-header slot=\"header\">\n                    <ids-text font-size=\"14\">Life Events</ids-text>\n                </ids-accordion-header>\n            </ids-accordion-panel>\n            <ids-accordion-panel slot=\"content\" id=\"benefits-information\">\n                <ids-accordion-header slot=\"header\">\n                    <ids-text font-size=\"14\">Benefits Information</ids-text>\n                </ids-accordion-header>\n            </ids-accordion-panel>\n        </ids-accordion-panel>\n    </ids-accordion-panel>\n</ids-accordion>\n```\n\n## Class Hierarchy\n\n- IdsAccordion\n  - IdsElement\n- Mixins\n  IdsColorVariantMixin\n  IdsEventsMixin\n  IdsKeyboardMixin\n  IdsLocaleMixin\n- IdsAccordionHeader\n  - IdsElement\n- Mixins\n  IdsColorVariantMixin\n  IdsEventsMixin\n- IdsAccordionPanel\n  - IdsElement\n- Mixins\n  IdsColorVariantMixin\n  IdsKeyboardMixin\n  IdsLocaleMixin\n  IdsEventsMixin\n\n## Settings (Attributes)\n\nWhen used as an attribute the settings are kebab case, when used in the JS they are camel case.\n\n- `headers` {Array<IdsAccordionHeader>} Reference to all inner Accordion Headers.\n- `panels` {Array<IdsAccordionPanel>} Reference to all inner Accordion Panels.\n- `focused` {HTMLElement} Reference to the currently-focused element within the accordion, if applicable.\n- `allowOnePane` {boolean} Sets Accordion to allow only one inner Accordion Panel to be expanded at a time.\n\n## Events\n\n- `selected` Fire at the time the ids-accordion-panel element is selected, used for App-Menu,\nDetail contains the element `elem`\n- `expanded` Fires at the time the ids-accordion-panel is expanded. Detail contains the element `elem`\n- `collapsed` Fires at the time the ids-accordion-panel is collapsed. Detail contains the element `elem`\n\n## Methods\n\n- IdsAccordion\n  - `navigate` Navigate to the next/prev panel\n- IdsAccordionPanel\n  - `collapsePane` Collapse pane\n  - `expandPane` Expand pane\n  - `select` Select header and focus it\n  - `focus` Set focus on header\n\n## Themeable Parts\n\n- `accordion` Accordion root element\n\n## States and Variations\n\nThe Accordion's headers support the following states:\n\n- Normal/Default: This is the default of an accordion.\n- Hover: Roll over an interactive element inside the accordion\n- Disabled: Disabled elements can be inside an accordion. These cards cannot be clicked, hovered or focused.\n- Focus: For accessibility. To give a user guidance when using a screen reader.\n- Active/Selected: After the pressed/clicked state, users are taken to the active state. This includes expanding or closing an accordion.\n\n## Keyboard Guidelines\n\n- **Shift+Tab**: Works the same as Tab, but in the opposite direction. When focus is on the tab or accordion header, a press of down/right will move focus to the next logical accordion Header or Tab page. When focus reaches the last header/tab page, further key presses will have optionally wrap to the first header\n- **Up Arrow or Left Arrow**: When focus is on the tab or accordion header, a press of up/left will move focus to the previous logical accordion header or tab page. When focus reaches the first header/tab page, further key presses will optionally wrap to the last header.  This keystroke is also aware of how to traverse different levels of nested accordion panels.\n- **Down Arrow or Right Arrow**: When focus is on the tab or accordion header, a press of down/right will move focus to the next logical accordion header or tab page. When focus reaches the last header/tab page, further key presses will optionally wrap to the first header.  This keystroke is also aware of how to traverse different levels of nested accordion panels.\n- **Enter or Space**: When focus is on an accordion header, this keystroke toggles the expansion of the corresponding panel. If collapsed, the panel is expanded, and its aria-expanded state is set to true. If expanded, the panel is collapsed and its aria-expanded state is set to false.\n\n## Accessibility\n\nThe IDS Accordion component has a `role=\"region\"` and a unique `title` is generated for each instance.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Replace `.inforAboutDialog()` with `.about()` and notice that many of the names of the settings (e.g. productName to appName) to have changed so must be updated to the new settings.\n- The initial markup is changed considerably from the previous version. Sync the markup using the markup above\n- Initialize the accordion plugin with .accordion() as opposed to `.inforAccordion()` or by using the page initializer\nonExpanded and onCollapsed option are done with events (expanded and collapsed)\n\n**4.x to 5.x**\n- Accordion now uses all new markup and classes for web components (see above)\n- Now called IdsAccordion with a namespace\n- The \"Panels\" examples are removed and deprecated as they should rarely be used.\n- The deprecated `displayChevron` setting is removed.\n- The `enableTooltips` removed and deprecated as not added as it seems no longer relevant.\n- The `expanderDisplay` option was removed and deprecated as it was used only by IdsAppMenu and is no longer needed.\n- The `rerouteOnLinkClick` option was removed and deprecated as is no longer needed as there are no links in the markup now.\n- The `source` option was removed and deprecated as it was used only by IdsAppMenu and is no longer needed in accordion but will be added to IdsAppMenu.\n- The `destroy` method has been removed since everything is now cleaned up when removing the DOM element\n"}},{"name":"ids-accordion-panel","attributes":[{"name":"paneOpenListener","values":[]},{"name":"paneCloseListener","values":[]},{"name":"colorVariants","values":[]},{"name":"contentAlignment","description":"Sets a CSS class containing alignment rules for text/icons/images on this accordion panel","values":[]},{"name":"accordion","values":[]},{"name":"header","values":[]},{"name":"expander","values":[]},{"name":"pane","values":[]},{"name":"hasParentPanel","values":[]},{"name":"parentExpanded","values":[]},{"name":"isExpandable","values":[]},{"name":"expanded","description":"Get the expanded property","values":[]},{"name":"nested","values":[]},{"name":"disabled","description":"Sets disabled property","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# Ids Accordion Component\n\n## Description\n\nThe IDS Accordion component is a UI pattern that is comprised of a stacked list of elements. A basic accordion will consist of a `ids-accordion-header` which shows a title or summary of the `ids-accordion-panel` and acts as a control for expanding and collapsing. Note: Standalone Css is not available for this component.\n\n## Use Cases\n\n- Can be used to conserve space, by hiding information until needed. Accordions can be commonly seen on mobile sites and applications. It can help tell the user what the page is about and allows the user to select and see what is needed.\n- Can be used for navigation.  The accordion is the main interactive element inside of the [App Menu](../ids-app-menu/README.md)\n\n## Terminology\n\n- **ids-accordion** Parent container for all accordions\n- **ids-accordion-panel** First child of and accordion. Contains the header and content area. Contains 2 slots, the `header` and the `pane`.\n- **ids-accordion-header** Typically used in the header slot, contains the title and acts as the control for expanding and collapsing.\n\n## Features (With Code Examples)\n\nStandard accordion, most commonly used:\n\n```html\n<ids-accordion>\n    <ids-accordion-panel>\n        <ids-accordion-header slot=\"header\">\n            <ids-text font-size=\"16\">Warehouse Location</ids-text>\n        </ids-accordion-header>\n        <ids-text slot=\"content\">\n            Remix, optimize, \"B2B, iterate?\" Best-of-breed efficient beta-test; social cutting-edge: rich magnetic tagclouds\n            front-end infomediaries viral authentic incentivize sexy extensible functionalities incentivize. Generate killer\n            authentic grow vertical blogospheres, functionalities ecologies harness, \"tag solutions synergies exploit data-driven B2C open-source e-markets optimize create, enhance convergence create.\" Out-of-the-box strategize best-of-breed back-end, deploy design markets metrics. Content web services enhance leading-edge Cluetrain, deliverables dot-com scalable. User-centric morph, back-end, synthesize mesh, frictionless, exploit next-generation tag portals, e-commerce channels; integrate; recontextualize distributed revolutionize innovative eyeballs.\n        </ids-text>\n    </ids-accordion-panel>\n    <ids-accordion-panel>\n        <ids-accordion-header slot=\"header\">\n            <ids-text font-size=\"16\">Sort By</ids-text>\n        </ids-accordion-header>\n        <ids-text slot=\"content\">\n            Remix, optimize, \"B2B, iterate?\" Best-of-breed efficient beta-test; social cutting-edge: rich magnetic tagclouds\n            front-end infomediaries viral authentic incentivize sexy extensible functionalities incentivize. Generate killer\n            authentic grow vertical blogospheres, functionalities ecologies harness, \"tag solutions synergies exploit\n            data-driven B2C open-source e-markets optimize create, enhance convergence create.\" Out-of-the-box strategize\n            best-of-breed back-end, deploy design markets metrics. Content web services enhance leading-edge Cluetrain,\n            deliverables dot-com scalable. User-centric morph, back-end, synthesize mesh, frictionless, exploit next-generation\n            tag portals, e-commerce channels; integrate; recontextualize distributed revolutionize innovative eyeballs.\n        </ids-text>\n    </ids-accordion-panel>\n    <ids-accordion-panel>\n        <ids-accordion-header slot=\"header\">\n            <ids-text font-size=\"16\">Brand Name</ids-text>\n        </ids-accordion-header>\n        <ids-text slot=\"content\">\n            Remix, optimize, \"B2B, iterate?\" Best-of-breed efficient beta-test; social cutting-edge: rich magnetic tagclouds\n            front-end infomediaries viral authentic incentivize sexy extensible functionalities incentivize. Generate killer\n            authentic grow vertical blogospheres, functionalities ecologies harness, \"tag solutions synergies exploit\n            data-driven B2C open-source e-markets optimize create, enhance convergence create.\" Out-of-the-box strategize\n            best-of-breed back-end, deploy design markets metrics. Content web services enhance leading-edge Cluetrain,\n            deliverables dot-com scalable. User-centric morph, back-end, synthesize mesh, frictionless, exploit next-generation\n            tag portals, e-commerce channels; integrate; recontextualize distributed revolutionize innovative eyeballs.\n        </ids-text>\n    </ids-accordion-panel>\n    <ids-accordion-panel>\n        <ids-accordion-header slot=\"header\">\n            <ids-text font-size=\"16\">Material</ids-text>\n        </ids-accordion-header>\n        <ids-text slot=\"content\">\n            Remix, optimize, \"B2B, iterate?\" Best-of-breed efficient beta-test; social cutting-edge: rich magnetic tagclouds\n            front-end infomediaries viral authentic incentivize sexy extensible functionalities incentivize. Generate killer\n            authentic grow vertical blogospheres, functionalities ecologies harness, \"tag solutions synergies exploit\n            data-driven B2C open-source e-markets optimize create, enhance convergence create.\" Out-of-the-box strategize\n            best-of-breed back-end, deploy design markets metrics. Content web services enhance leading-edge Cluetrain,\n            deliverables dot-com scalable. User-centric morph, back-end, synthesize mesh, frictionless, exploit next-generation\n            tag portals, e-commerce channels; integrate; recontextualize distributed revolutionize innovative eyeballs.\n        </ids-text>\n    </ids-accordion-panel>\n</ids-accordion>\n```\n\n### Nested Accordions\n\nIt's possible to nest accordion structures.  This is common in accordions used for navigation purposes, such as the ones applied to the [App Menu](../ids-app-menu/README.md).\n\nIn the example below, the \"My Benefits\", \"Dependents and Beneficiaries\", \"Life Events\", and \"Benefits Information\" panels are nested beneath the \"Benefits\" panel, which is nested beneath the \"Employee\" panel.\n\n```html\n<ids-accordion id=\"app-menu-style\">\n    <ids-accordion-panel id=\"employee\">\n        <ids-accordion-header slot=\"header\">\n            <ids-icon icon=\"user\" size=\"medium\"></ids-icon>\n            <ids-text font-size=\"16\">Employee</ids-text>\n        </ids-accordion-header>\n        <ids-accordion-panel slot=\"content\" id=\"benefits\">\n            <ids-accordion-header slot=\"header\" expander-type=\"plus-minus\">\n                <ids-text font-size=\"14\">Benefits</ids-text>\n            </ids-accordion-header>\n            <ids-accordion-panel slot=\"content\" id=\"my-benefits\">\n                <ids-accordion-header slot=\"header\">\n                    <ids-text font-size=\"14\">My Benefits</ids-text>\n                </ids-accordion-header>\n            </ids-accordion-panel>\n            <ids-accordion-panel slot=\"content\" id=\"dependents-beneficiaries\">\n                <ids-accordion-header slot=\"header\">\n                    <ids-text font-size=\"14\">Dependents and Beneficiaries</ids-text>\n                </ids-accordion-header>\n            </ids-accordion-panel>\n            <ids-accordion-panel slot=\"content\" id=\"life-events\">\n                <ids-accordion-header slot=\"header\">\n                    <ids-text font-size=\"14\">Life Events</ids-text>\n                </ids-accordion-header>\n            </ids-accordion-panel>\n            <ids-accordion-panel slot=\"content\" id=\"benefits-information\">\n                <ids-accordion-header slot=\"header\">\n                    <ids-text font-size=\"14\">Benefits Information</ids-text>\n                </ids-accordion-header>\n            </ids-accordion-panel>\n        </ids-accordion-panel>\n    </ids-accordion-panel>\n</ids-accordion>\n```\n\n## Class Hierarchy\n\n- IdsAccordion\n  - IdsElement\n- Mixins\n  IdsColorVariantMixin\n  IdsEventsMixin\n  IdsKeyboardMixin\n  IdsLocaleMixin\n- IdsAccordionHeader\n  - IdsElement\n- Mixins\n  IdsColorVariantMixin\n  IdsEventsMixin\n- IdsAccordionPanel\n  - IdsElement\n- Mixins\n  IdsColorVariantMixin\n  IdsKeyboardMixin\n  IdsLocaleMixin\n  IdsEventsMixin\n\n## Settings (Attributes)\n\nWhen used as an attribute the settings are kebab case, when used in the JS they are camel case.\n\n- `headers` {Array<IdsAccordionHeader>} Reference to all inner Accordion Headers.\n- `panels` {Array<IdsAccordionPanel>} Reference to all inner Accordion Panels.\n- `focused` {HTMLElement} Reference to the currently-focused element within the accordion, if applicable.\n- `allowOnePane` {boolean} Sets Accordion to allow only one inner Accordion Panel to be expanded at a time.\n\n## Events\n\n- `selected` Fire at the time the ids-accordion-panel element is selected, used for App-Menu,\nDetail contains the element `elem`\n- `expanded` Fires at the time the ids-accordion-panel is expanded. Detail contains the element `elem`\n- `collapsed` Fires at the time the ids-accordion-panel is collapsed. Detail contains the element `elem`\n\n## Methods\n\n- IdsAccordion\n  - `navigate` Navigate to the next/prev panel\n- IdsAccordionPanel\n  - `collapsePane` Collapse pane\n  - `expandPane` Expand pane\n  - `select` Select header and focus it\n  - `focus` Set focus on header\n\n## Themeable Parts\n\n- `accordion` Accordion root element\n\n## States and Variations\n\nThe Accordion's headers support the following states:\n\n- Normal/Default: This is the default of an accordion.\n- Hover: Roll over an interactive element inside the accordion\n- Disabled: Disabled elements can be inside an accordion. These cards cannot be clicked, hovered or focused.\n- Focus: For accessibility. To give a user guidance when using a screen reader.\n- Active/Selected: After the pressed/clicked state, users are taken to the active state. This includes expanding or closing an accordion.\n\n## Keyboard Guidelines\n\n- **Shift+Tab**: Works the same as Tab, but in the opposite direction. When focus is on the tab or accordion header, a press of down/right will move focus to the next logical accordion Header or Tab page. When focus reaches the last header/tab page, further key presses will have optionally wrap to the first header\n- **Up Arrow or Left Arrow**: When focus is on the tab or accordion header, a press of up/left will move focus to the previous logical accordion header or tab page. When focus reaches the first header/tab page, further key presses will optionally wrap to the last header.  This keystroke is also aware of how to traverse different levels of nested accordion panels.\n- **Down Arrow or Right Arrow**: When focus is on the tab or accordion header, a press of down/right will move focus to the next logical accordion header or tab page. When focus reaches the last header/tab page, further key presses will optionally wrap to the first header.  This keystroke is also aware of how to traverse different levels of nested accordion panels.\n- **Enter or Space**: When focus is on an accordion header, this keystroke toggles the expansion of the corresponding panel. If collapsed, the panel is expanded, and its aria-expanded state is set to true. If expanded, the panel is collapsed and its aria-expanded state is set to false.\n\n## Accessibility\n\nThe IDS Accordion component has a `role=\"region\"` and a unique `title` is generated for each instance.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Replace `.inforAboutDialog()` with `.about()` and notice that many of the names of the settings (e.g. productName to appName) to have changed so must be updated to the new settings.\n- The initial markup is changed considerably from the previous version. Sync the markup using the markup above\n- Initialize the accordion plugin with .accordion() as opposed to `.inforAccordion()` or by using the page initializer\nonExpanded and onCollapsed option are done with events (expanded and collapsed)\n\n**4.x to 5.x**\n- Accordion now uses all new markup and classes for web components (see above)\n- Now called IdsAccordion with a namespace\n- The \"Panels\" examples are removed and deprecated as they should rarely be used.\n- The deprecated `displayChevron` setting is removed.\n- The `enableTooltips` removed and deprecated as not added as it seems no longer relevant.\n- The `expanderDisplay` option was removed and deprecated as it was used only by IdsAppMenu and is no longer needed.\n- The `rerouteOnLinkClick` option was removed and deprecated as is no longer needed as there are no links in the markup now.\n- The `source` option was removed and deprecated as it was used only by IdsAppMenu and is no longer needed in accordion but will be added to IdsAppMenu.\n- The `destroy` method has been removed since everything is now cleaned up when removing the DOM element\n"}},{"name":"ids-accordion","attributes":[{"name":"header","values":[]},{"name":"colorVariants","values":[]},{"name":"#contentObserver","description":"Observes changes in the accordion tree","values":[]},{"name":"headers","values":[]},{"name":"panels","values":[]},{"name":"focused","values":[]},{"name":"allowOnePane","description":"Sets allowOnePane property","values":[]},{"name":"disabled","description":"Sets disabled property","values":[]},{"name":"onLanguageChange","description":"Respond to language changes","values":[]}],"description":{"kind":"markdown","value":"# Ids Accordion Component\n\n## Description\n\nThe IDS Accordion component is a UI pattern that is comprised of a stacked list of elements. A basic accordion will consist of a `ids-accordion-header` which shows a title or summary of the `ids-accordion-panel` and acts as a control for expanding and collapsing. Note: Standalone Css is not available for this component.\n\n## Use Cases\n\n- Can be used to conserve space, by hiding information until needed. Accordions can be commonly seen on mobile sites and applications. It can help tell the user what the page is about and allows the user to select and see what is needed.\n- Can be used for navigation.  The accordion is the main interactive element inside of the [App Menu](../ids-app-menu/README.md)\n\n## Terminology\n\n- **ids-accordion** Parent container for all accordions\n- **ids-accordion-panel** First child of and accordion. Contains the header and content area. Contains 2 slots, the `header` and the `pane`.\n- **ids-accordion-header** Typically used in the header slot, contains the title and acts as the control for expanding and collapsing.\n\n## Features (With Code Examples)\n\nStandard accordion, most commonly used:\n\n```html\n<ids-accordion>\n    <ids-accordion-panel>\n        <ids-accordion-header slot=\"header\">\n            <ids-text font-size=\"16\">Warehouse Location</ids-text>\n        </ids-accordion-header>\n        <ids-text slot=\"content\">\n            Remix, optimize, \"B2B, iterate?\" Best-of-breed efficient beta-test; social cutting-edge: rich magnetic tagclouds\n            front-end infomediaries viral authentic incentivize sexy extensible functionalities incentivize. Generate killer\n            authentic grow vertical blogospheres, functionalities ecologies harness, \"tag solutions synergies exploit data-driven B2C open-source e-markets optimize create, enhance convergence create.\" Out-of-the-box strategize best-of-breed back-end, deploy design markets metrics. Content web services enhance leading-edge Cluetrain, deliverables dot-com scalable. User-centric morph, back-end, synthesize mesh, frictionless, exploit next-generation tag portals, e-commerce channels; integrate; recontextualize distributed revolutionize innovative eyeballs.\n        </ids-text>\n    </ids-accordion-panel>\n    <ids-accordion-panel>\n        <ids-accordion-header slot=\"header\">\n            <ids-text font-size=\"16\">Sort By</ids-text>\n        </ids-accordion-header>\n        <ids-text slot=\"content\">\n            Remix, optimize, \"B2B, iterate?\" Best-of-breed efficient beta-test; social cutting-edge: rich magnetic tagclouds\n            front-end infomediaries viral authentic incentivize sexy extensible functionalities incentivize. Generate killer\n            authentic grow vertical blogospheres, functionalities ecologies harness, \"tag solutions synergies exploit\n            data-driven B2C open-source e-markets optimize create, enhance convergence create.\" Out-of-the-box strategize\n            best-of-breed back-end, deploy design markets metrics. Content web services enhance leading-edge Cluetrain,\n            deliverables dot-com scalable. User-centric morph, back-end, synthesize mesh, frictionless, exploit next-generation\n            tag portals, e-commerce channels; integrate; recontextualize distributed revolutionize innovative eyeballs.\n        </ids-text>\n    </ids-accordion-panel>\n    <ids-accordion-panel>\n        <ids-accordion-header slot=\"header\">\n            <ids-text font-size=\"16\">Brand Name</ids-text>\n        </ids-accordion-header>\n        <ids-text slot=\"content\">\n            Remix, optimize, \"B2B, iterate?\" Best-of-breed efficient beta-test; social cutting-edge: rich magnetic tagclouds\n            front-end infomediaries viral authentic incentivize sexy extensible functionalities incentivize. Generate killer\n            authentic grow vertical blogospheres, functionalities ecologies harness, \"tag solutions synergies exploit\n            data-driven B2C open-source e-markets optimize create, enhance convergence create.\" Out-of-the-box strategize\n            best-of-breed back-end, deploy design markets metrics. Content web services enhance leading-edge Cluetrain,\n            deliverables dot-com scalable. User-centric morph, back-end, synthesize mesh, frictionless, exploit next-generation\n            tag portals, e-commerce channels; integrate; recontextualize distributed revolutionize innovative eyeballs.\n        </ids-text>\n    </ids-accordion-panel>\n    <ids-accordion-panel>\n        <ids-accordion-header slot=\"header\">\n            <ids-text font-size=\"16\">Material</ids-text>\n        </ids-accordion-header>\n        <ids-text slot=\"content\">\n            Remix, optimize, \"B2B, iterate?\" Best-of-breed efficient beta-test; social cutting-edge: rich magnetic tagclouds\n            front-end infomediaries viral authentic incentivize sexy extensible functionalities incentivize. Generate killer\n            authentic grow vertical blogospheres, functionalities ecologies harness, \"tag solutions synergies exploit\n            data-driven B2C open-source e-markets optimize create, enhance convergence create.\" Out-of-the-box strategize\n            best-of-breed back-end, deploy design markets metrics. Content web services enhance leading-edge Cluetrain,\n            deliverables dot-com scalable. User-centric morph, back-end, synthesize mesh, frictionless, exploit next-generation\n            tag portals, e-commerce channels; integrate; recontextualize distributed revolutionize innovative eyeballs.\n        </ids-text>\n    </ids-accordion-panel>\n</ids-accordion>\n```\n\n### Nested Accordions\n\nIt's possible to nest accordion structures.  This is common in accordions used for navigation purposes, such as the ones applied to the [App Menu](../ids-app-menu/README.md).\n\nIn the example below, the \"My Benefits\", \"Dependents and Beneficiaries\", \"Life Events\", and \"Benefits Information\" panels are nested beneath the \"Benefits\" panel, which is nested beneath the \"Employee\" panel.\n\n```html\n<ids-accordion id=\"app-menu-style\">\n    <ids-accordion-panel id=\"employee\">\n        <ids-accordion-header slot=\"header\">\n            <ids-icon icon=\"user\" size=\"medium\"></ids-icon>\n            <ids-text font-size=\"16\">Employee</ids-text>\n        </ids-accordion-header>\n        <ids-accordion-panel slot=\"content\" id=\"benefits\">\n            <ids-accordion-header slot=\"header\" expander-type=\"plus-minus\">\n                <ids-text font-size=\"14\">Benefits</ids-text>\n            </ids-accordion-header>\n            <ids-accordion-panel slot=\"content\" id=\"my-benefits\">\n                <ids-accordion-header slot=\"header\">\n                    <ids-text font-size=\"14\">My Benefits</ids-text>\n                </ids-accordion-header>\n            </ids-accordion-panel>\n            <ids-accordion-panel slot=\"content\" id=\"dependents-beneficiaries\">\n                <ids-accordion-header slot=\"header\">\n                    <ids-text font-size=\"14\">Dependents and Beneficiaries</ids-text>\n                </ids-accordion-header>\n            </ids-accordion-panel>\n            <ids-accordion-panel slot=\"content\" id=\"life-events\">\n                <ids-accordion-header slot=\"header\">\n                    <ids-text font-size=\"14\">Life Events</ids-text>\n                </ids-accordion-header>\n            </ids-accordion-panel>\n            <ids-accordion-panel slot=\"content\" id=\"benefits-information\">\n                <ids-accordion-header slot=\"header\">\n                    <ids-text font-size=\"14\">Benefits Information</ids-text>\n                </ids-accordion-header>\n            </ids-accordion-panel>\n        </ids-accordion-panel>\n    </ids-accordion-panel>\n</ids-accordion>\n```\n\n## Class Hierarchy\n\n- IdsAccordion\n  - IdsElement\n- Mixins\n  IdsColorVariantMixin\n  IdsEventsMixin\n  IdsKeyboardMixin\n  IdsLocaleMixin\n- IdsAccordionHeader\n  - IdsElement\n- Mixins\n  IdsColorVariantMixin\n  IdsEventsMixin\n- IdsAccordionPanel\n  - IdsElement\n- Mixins\n  IdsColorVariantMixin\n  IdsKeyboardMixin\n  IdsLocaleMixin\n  IdsEventsMixin\n\n## Settings (Attributes)\n\nWhen used as an attribute the settings are kebab case, when used in the JS they are camel case.\n\n- `headers` {Array<IdsAccordionHeader>} Reference to all inner Accordion Headers.\n- `panels` {Array<IdsAccordionPanel>} Reference to all inner Accordion Panels.\n- `focused` {HTMLElement} Reference to the currently-focused element within the accordion, if applicable.\n- `allowOnePane` {boolean} Sets Accordion to allow only one inner Accordion Panel to be expanded at a time.\n\n## Events\n\n- `selected` Fire at the time the ids-accordion-panel element is selected, used for App-Menu,\nDetail contains the element `elem`\n- `expanded` Fires at the time the ids-accordion-panel is expanded. Detail contains the element `elem`\n- `collapsed` Fires at the time the ids-accordion-panel is collapsed. Detail contains the element `elem`\n\n## Methods\n\n- IdsAccordion\n  - `navigate` Navigate to the next/prev panel\n- IdsAccordionPanel\n  - `collapsePane` Collapse pane\n  - `expandPane` Expand pane\n  - `select` Select header and focus it\n  - `focus` Set focus on header\n\n## Themeable Parts\n\n- `accordion` Accordion root element\n\n## States and Variations\n\nThe Accordion's headers support the following states:\n\n- Normal/Default: This is the default of an accordion.\n- Hover: Roll over an interactive element inside the accordion\n- Disabled: Disabled elements can be inside an accordion. These cards cannot be clicked, hovered or focused.\n- Focus: For accessibility. To give a user guidance when using a screen reader.\n- Active/Selected: After the pressed/clicked state, users are taken to the active state. This includes expanding or closing an accordion.\n\n## Keyboard Guidelines\n\n- **Shift+Tab**: Works the same as Tab, but in the opposite direction. When focus is on the tab or accordion header, a press of down/right will move focus to the next logical accordion Header or Tab page. When focus reaches the last header/tab page, further key presses will have optionally wrap to the first header\n- **Up Arrow or Left Arrow**: When focus is on the tab or accordion header, a press of up/left will move focus to the previous logical accordion header or tab page. When focus reaches the first header/tab page, further key presses will optionally wrap to the last header.  This keystroke is also aware of how to traverse different levels of nested accordion panels.\n- **Down Arrow or Right Arrow**: When focus is on the tab or accordion header, a press of down/right will move focus to the next logical accordion header or tab page. When focus reaches the last header/tab page, further key presses will optionally wrap to the first header.  This keystroke is also aware of how to traverse different levels of nested accordion panels.\n- **Enter or Space**: When focus is on an accordion header, this keystroke toggles the expansion of the corresponding panel. If collapsed, the panel is expanded, and its aria-expanded state is set to true. If expanded, the panel is collapsed and its aria-expanded state is set to false.\n\n## Accessibility\n\nThe IDS Accordion component has a `role=\"region\"` and a unique `title` is generated for each instance.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Replace `.inforAboutDialog()` with `.about()` and notice that many of the names of the settings (e.g. productName to appName) to have changed so must be updated to the new settings.\n- The initial markup is changed considerably from the previous version. Sync the markup using the markup above\n- Initialize the accordion plugin with .accordion() as opposed to `.inforAccordion()` or by using the page initializer\nonExpanded and onCollapsed option are done with events (expanded and collapsed)\n\n**4.x to 5.x**\n- Accordion now uses all new markup and classes for web components (see above)\n- Now called IdsAccordion with a namespace\n- The \"Panels\" examples are removed and deprecated as they should rarely be used.\n- The deprecated `displayChevron` setting is removed.\n- The `enableTooltips` removed and deprecated as not added as it seems no longer relevant.\n- The `expanderDisplay` option was removed and deprecated as it was used only by IdsAppMenu and is no longer needed.\n- The `rerouteOnLinkClick` option was removed and deprecated as is no longer needed as there are no links in the markup now.\n- The `source` option was removed and deprecated as it was used only by IdsAppMenu and is no longer needed in accordion but will be added to IdsAppMenu.\n- The `destroy` method has been removed since everything is now cleaned up when removing the DOM element\n"}},{"name":"ids-action-sheet","attributes":[{"name":"overlay","values":[]},{"name":"cancelBtn","values":[]},{"name":"visible","description":"Set the visible attribute","values":[]},{"name":"cancelBtnText","description":"Set the btn text attribute","values":[]}],"description":{"kind":"markdown","value":"# Ids Action Sheet Component\n\n## Description\n\nThe IDS Action Sheet `ids-action-sheet` component displays a mobile-friendly view of a menu, which appears to roll out from the bottom of the viewport and can easily be selected by touch.\n\n## Use Cases\n\nThe main use case for the IDS Action Sheet component is to display a mobile-friendly menu. By default the action sheet only show on screens at the `sm` (600px) breakpoint. This could be expanded in the future or possibly disabled to allow for the action sheet to show on desktop screens.\n\n## Terminology\n\n- **ids-action-sheet**: The action sheet container. Consists of an `ids-overlay` and an unnamed `slot` which will contain the menu.\n- **cancel-button**: The cancel button will close the action sheet. The default text of the button is \"Cancel\", but can be override with the `cancelBtnText` attribute.\n\n## Features (With Code Examples)\n\n```html\n<ids-action-sheet id=\"icon-menu\">\n    <ids-menu>\n        <ids-menu-group>\n            <ids-menu-item text-align=\"center\">Option One</ids-menu-item>\n            <ids-menu-item text-align=\"center\">Option Two</ids-menu-item>\n            <ids-menu-item text-align=\"center\">Option Three</ids-menu-item>\n        </ids-menu-group>\n    </ids-menu>\n</ids-action-sheet>\n```\n\n## States and Variations\n\n- **visible**: The state where the action sheet is visible. Can be set by the `visible` attribute.\n\n## Keyboard Guidelines\n\n- **Enter or Space**: The menu items as well as the cancel btn are actionable via the `Enter` and `Space` keys\n\n## Converting from Previous Versions (Breaking Changes)\n\n**4.x to 5.x**\n- Action Sheet now uses all new markup and classes for web components (see above)\n- Now called IdsActionSheet with a namespace\n- The tray feature has not been added it is now replaced by a floating action button.\n"}},{"name":"ids-alert","attributes":[{"name":"color","description":"Set the alert color","values":[]},{"name":"disabled","description":"Sets to disabled","values":[]},{"name":"icon","description":"Set the icon","values":[]},{"name":"size","description":"Return the size. May be large, normal/medium or small","values":[]}],"description":{"kind":"markdown","value":"# Ids Alert Component\n\n## Description\n\nThe IDS Alert component used to communicate as part of a display message that gives users attention, affects an application, feature or a page. This component consists of different types such as `error`, `warning`, `success`, and `info` that represents its color.\n\n## Use Cases\n\nTypically, these alerts are mostly effective to gain attention of the status of your application. Try to use text along with the alert so that users that cant understand the color difference get the important alert information.\n\n## Terminology\n\n- **Type**: Type is basically the status of an alert.\n- **Icon**: Icon is the symbol of the alert.\n- **Color**: The type of alert color.\n\n## Feature (With the Code Examples)\n\nAn alert is created by using the `ids-alert` html custom element. It has a `icon` property to set the desire alert icon to use.\n\n```html\n<ids-alert icon=\"info\"></ids-alert>\n<ids-alert icon=\"success\"></ids-alert>\n<ids-alert icon=\"warning\"></ids-alert>\n```\n\nAn alert can be used in a disabled situation so comes with a disabled style\n\n```html\n<ids-alert icon=\"info\" disabled=\"true\"></ids-alert>\n```\n\nAn alert can have a tooltip\n\n```html\n<ids-alert icon=\"error\" tooltip=\"Info about the error\"></ids-alert>\n```\n\nAn alert can use any icon, use the color setting with it to control the icon color\n\n```html\n<ids-alert icon=\"calendar\" color=\"info\" tooltip=\"Calendar Alert\"></ids-alert\n```\n\nAn alert can use any icon size\n\n```html\n<ids-alert icon=\"error\" tooltip=\"Info about the error\"  size=\"small\"></ids-alert>\n```\n\n## Class Hierarchy\n\n- IdsAlert\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n\n## Settings (Attributes)\n\n- `icon` {boolean} Set the type of icon / alert to show options include  'alert' | 'success' | 'dirty' | 'error' | 'info' |'pending' | 'new' | 'in-progress' or any other icon in the icon set. For these other icons set the color property as well\n- `disabled` {boolean} Set alert to disabled\n- `tooltip` {string} Sets the string content for a tooltip, for error, success, info, alert the color of the tooltip will change\n- `color` {string} Sets the icon color between error, success, info, warning, caution, amber, amethyst\n\n## Themeable Parts\n\n- `icon` allows you to further style the icon element\n\n## States and Variations\n\n- Color\n- Size\n- Alert\n\n## Keyboard Guidelines\n\nAlert icons do not have tab stops or keyboard interaction on their own. However, they may be placed in a grid cell or other object that has tab focus.\n\n## Responsive Guidelines\n\n- Flows within its parent/placement and is usually centered vertically.\n\n## Accessibility\n\nThe traffic light colors are accessibility violations for contrast, however, the high contrast theme provides an alternative that passes. In addition, in context text should be used as color alone cannot provide the meaning. i.e. Do not use color alone to indicate a state.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**4.x to 5.x**\n- Alert now uses all new markup and classes for web components (see above)\n- The yellow alert is no longer available due to having poor contrast with the background.\n- The names of some alerts (icon setting) have changed\n"}},{"name":"ids-app-menu","attributes":[{"name":"globalKeydownListener","values":[]},{"name":"#container","values":[]},{"name":"accordion","values":[]},{"name":"isFiltered","values":[]},{"name":"filterAccordion","description":"Performs a filter operation on accordion panels","values":[]}],"description":{"kind":"markdown","value":"# Ids App Menu\n\nThe Ids App Menu serves as primary navigation for an Infor Application, combining top level functions of the application with user authentication and access to changing roles.\n\nThe App Menu is built on top of `[IdsDrawer](../ids-drawer/README.md) and generally utilizes an [IdsAccordion](../ids-accordion/README.md) and/or [IdsToolbar](../ids-toolbar/README.md) for its navigation features.\n\n## Use Cases\n\n- Top-level navigation for your application\n- Access to application-wide features\n- Access to different user roles\n\n## Terminology\n\n- **App Menu Branding** - A slotted area that can be used for application branding info, such as a logo. Its recommended to use the customer logo, not the infor logo.\n- **App Menu Content** - The primary slotted area that usually houses an [IdsAccordion](../ids-accordion/README.md) or some other navigation structure.\n- **App Menu Header** - A slotted area that can be used for extra navigation or text content that sits above the main App Menu content area.\n- **App Menu Footer** - A slotted area that can be used for extra navigation or text content that sits below the main App Menu content area.\n- **App Menu Search** - A slotted area that can be used for adding a search feature for App Menu functionality.\n- **App Menu User Info** - A slotted area that can contain information specific to the \"User\" accessing the application.\n\n## Features (with code samples)\n\nA barebones App Menu can consist of only an accordion for navigation:\n\n```html\n<ids-app-menu id=\"app-menu\">\n    <ids-accordion>\n        <ids-accordion-panel>\n            <ids-accordion-header slot=\"header\" icon=\"user\">\n                <ids-text font-size=\"16\">Employee</ids-text>\n            </ids-accordion-header>\n        </ids-accordion-panel>\n        <ids-accordion-panel>\n            <ids-accordion-header slot=\"header\" icon=\"distribution\">\n                <ids-text font-size=\"16\">Manager</ids-text>\n            </ids-accordion-header>\n        </ids-accordion-panel>\n        <ids-accordion-panel>\n            <ids-accordion-header slot=\"header\" icon=\"roles\">\n                <ids-text font-size=\"16\">Recruiter</ids-text>\n            </ids-accordion-header>\n        </ids-accordion-panel>\n    </ids-accordion>\n</ids-app-menu>\n```\n\nFor more examples of Accordion customization, please see [the Accordion documentation](../ids-accordion/README.md)\n\n### Toolbars\n\nApp Menus can contain small [Toolbars](../ids-toolbar/README.md) that sit above and below the main navigation area.  These toolbars will ideally contain supporting functions that are application-specific, but not necessarily the most important top-level features of the application.\n\nTo include these Toolbars, simply add them to the App Menu's markup with `[slot=\"header\"]` or `[slot=\"footer\"]`:\n\n```html\n<ids-app-menu id=\"app-menu\">\n  <ids-toolbar slot=\"header\">\n    <ids-toolbar-section align=\"center-even\" type=\"fluid\">\n      <ids-button id=\"header-btn-download\" icon=\"download\">\n        <ids-text audible>Download</ids-text>\n      </ids-button>\n      <ids-button id=\"header-btn-print\" icon=\"print\">\n        <ids-text audible>Print</ids-text>\n      </ids-button>\n      <ids-button id=\"header-btn-purchasing\" icon=\"purchasing\">\n        <ids-text audible>Purchasing</ids-text>\n      </ids-button>\n    </ids-toolbar-section>\n  </ids-toolbar>\n\n  <!-- ... -->\n  <ids-toolbar slot=\"footer\">\n    <ids-toolbar-section align=\"center-even\" type=\"fluid\">\n      <ids-button id=\"footer-btn-settings\">\n        <ids-icon icon=\"settings\"></ids-icon>\n        <span>Settings</span>\n      </ids-button>\n      <ids-button id=\"footer-btn-proxy\" icon=\"employee-directory\">\n        <ids-text audible>Proxy as User</ids-text>\n      </ids-button>\n      <ids-button id=\"footer-btn-about\" icon=\"info-linear\">\n        <ids-text audible>About This Application</ids-text>\n      </ids-button>\n      <ids-button id=\"footer-btn-logout\" icon=\"logout\">\n        <ids-text audible>Logout</ids-text>\n      </ids-button>\n    </ids-toolbar-section>\n  </ids-toolbar>\n</ids-app-menu>\n```\n\n### User Information and Roles\n\nApp Menus reserve two slots for specific user information:\n\n- Avatars (User photos)\n- Name\n\n```html\n<ids-app-menu id=\"app-menu\">\n  <!-- Avatar/Username Area -->\n  <img slot=\"avatar\" src=\"../assets/images/avatar-placeholder.jpg\" alt=\"Picture of Richard Fairbanks\" />\n  <ids-text slot=\"username\" font-size=\"24\" font-weight=\"semi-bold\">Richard Fairbanks</ids-text>\n</ids-app-menu>\n```\n\n### Search Field\n\nApp Menus can apply filtering capability to their navigation accordion elements by adding an [IdsSearchField](../ids-search-field/README.md) component with `slot=\"search\"` applied:\n\n```html\n<ids-app-menu id=\"app-menu\">\n    <!-- Search Area -->\n    <ids-search-field id=\"search\" slot=\"search\" label=\"\"></ids-search-field>\n\n    <!-- Accordion Nav -->\n    <ids-accordion>\n        <ids-accordion-panel>\n            <ids-accordion-header slot=\"header\" icon=\"user\">\n                <ids-text font-size=\"16\">Employee</ids-text>\n            </ids-accordion-header>\n        </ids-accordion-panel>\n        <ids-accordion-panel>\n            <ids-accordion-header slot=\"header\" icon=\"distribution\">\n                <ids-text font-size=\"16\">Manager</ids-text>\n            </ids-accordion-header>\n        </ids-accordion-panel>\n        <ids-accordion-panel>\n            <ids-accordion-header slot=\"header\" icon=\"roles\">\n                <ids-text font-size=\"16\">Recruiter</ids-text>\n            </ids-accordion-header>\n        </ids-accordion-panel>\n    </ids-accordion>\n</ids-app-menu>\n```\n\nIn the previous example, when typing \"Re\" into the search field, the \"Employee\" and \"Manager\" accordion headers will be visually hidden.  Removing the search field's value causes the filter to be reset, and all headers will be visible again.\n\nWhile a filter is applied, accordion headers that do not match the filter are tagged with a `hidden-by-filter` attribute.\n\nThis feature is also applied to nested accordion navigation.  While filtered, headers that don't match the filter will be completely hidden if they have no matching children, but will appear \"faded out\" if they do contain at least one matching child.  These headers are also tagged with a `child-filter-match` attribute.\n\n## States and Variations\n\nThe App Menu doesn't contain any states or variants of its own, but applies the following to its extensions and sub-components:\n\n- App Menu uses the `app-menu` style of [IdsDrawer]('../ids-drawer/README.md').\n- Any \"Top-Level\" [IdsAccordion](../ids-accordion/README.md) panels added to the App Menu receive the `app-menu` color variant\n- Any \"nested\" IdsAccordion panels added to the App Menu receive the `sub-app-menu` color variant.\n- Any [IdsButton](../ids-button/README.md) components inside the App Menu in any slot will be converted to the `alternate` color variant.\n\n## Keyboard Guidelines\n\n- **Escape**: When focus is on an element inside an open App Menu, the App Menu will close.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**4.x to 5.x**\n- Markup has changed to a custom element `<ids-app-menu></ids-app-menu`>\nSections are now slotted for easier use.  Accordion is the main slot, and other areas (toolbars, user info, etc) are named slots.\n- Can now be imported as a single JS file and used with encapsulated styles\n- The names of some alerts (icon setting) have changed\n"}},{"name":"ids-area-chart","attributes":[{"name":"selectionElements","description":"Return chart elements that get selection","values":[]},{"name":"DEFAULT_SELECTABLE","values":[]},{"name":"markerSize","description":"Set the size of the markers (aka dots/ticks) in the chart","values":[]},{"name":"initialized","values":[]},{"name":"svg","values":[]},{"name":"canvas","values":[]},{"name":"emptyMessage","values":[]},{"name":"legend","values":[]},{"name":"sectionWidths","values":[]},{"name":"sectionWidth","values":[]},{"name":"sectionHeights","values":[]},{"name":"sectionHeight","values":[]},{"name":"resizeToParentHeight","values":[]},{"name":"resizeToParentWidth","values":[]},{"name":"parentWidth","values":[]},{"name":"parentHeight","values":[]},{"name":"datasource","description":"Reference to datasource API","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"#xMaxTextWidth","description":"Max width for x-labels text","values":[]},{"name":"#yMaxTextWidth","description":"Max width for y-labels text","values":[]},{"name":"#resizeObserver","description":"Holds the resize observer object","values":[]},{"name":"isGrouped","values":[]},{"name":"markerData","description":"The marker data to use to draw the chart","values":[]},{"name":"#axisLabelsText","description":"Holds the axis labels text object","values":[]},{"name":"height","description":"The width of the chart (in pixels) or 'inherit' from the parent","values":[]},{"name":"horizontal","description":"Flips the orientation to horizontal\nsupported `Axis` and `Bar` type charts","values":[]},{"name":"width","description":"The width of the chart (in pixels) or 'inherit' from the parent","values":[]},{"name":"margins","description":"Set the left, right, top, bottom margins","values":[]},{"name":"bottomRotateMargin","description":"Get bottom rotate margin","values":[]},{"name":"axisLabelsMargin","description":"Get axis labels margin","values":[]},{"name":"textWidths","description":"Set the width the text labels/axes take up on each side.","values":[]},{"name":"data","description":"Set the data array of the chart","values":[]},{"name":"yAxisMin","description":"Set the minimum value on the y axis","values":[]},{"name":"showVerticalGridLines","description":"Show the vertical axis grid lines","values":[]},{"name":"showHorizontalGridLines","description":"Show the horizontal axis grid lines","values":[]},{"name":"colors","description":"Utility function to get the colors series being used in this chart","values":[]},{"name":"xAxisFormatter","description":"Set the format on the x axis items","values":[]},{"name":"yAxisFormatter","description":"Set the format on the y axis items","values":[]},{"name":"cubicBezier","description":"Get a reusable snippet to ease the animation","values":[]},{"name":"animated","description":"Set the animation on/off","values":[]},{"name":"animationSpeed","description":"Set the animation speed in s","values":[]},{"name":"alignXLabels","description":"Set the x axis label alignment between start, middle and end","values":[]},{"name":"stacked","description":"Stack the data forming a stacked bar chart","values":[]},{"name":"axisLabelBottom","description":"Set the bottom axis label text","values":[]},{"name":"axisLabelEnd","description":"Set the end axis label text","values":[]},{"name":"axisLabelMargin","description":"Set the margin for axis label text","values":[]},{"name":"axisLabelStart","description":"Set the start axis label text","values":[]},{"name":"axisLabelTop","description":"Set the top axis label text","values":[]},{"name":"rotateNameLabels","description":"Set the rotation for the axis name label text (eg 45deg)","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# Ids Area Chart Component\n\n## Description\n\nAn area chart like a line chart is used to displays information as a series of data points connected by straight line segments. Often area charts are used to show trends. Area charts should generally have more than one series to make a comparison. Users can interact by clicking or tapping on areas to drill in on a certain series of data. Users can also interact by hovering data points to reveal additional information in a tooltip.\n\nIt may be easier to see and understand the data with the more colorful area chart instead of a line chart if the differences between your data values are large enough to be displayed visually.\n\n## Use Cases\n\n- Display large differences between your data points\n- Show multiple values over time\n- Plot data over a longer period of time\n- Explain how multiple data points relate to the total value\n\n## Usage Considerations\n\n- Do not show too many areas at once as it may be difficult to interpret.\n- Hover tooltips should only be used to reveal additional non-critical information.\n- Area (and line) charts should not be used not show different groups of data.\n\n## Terminology\n\n- **Marker**: A UI embellishments that shows the data points (i.e. the dots on a line chart).\n- **Area**: The filled / colored area of the lines below the marker\n- **Domain**: The domain is all x-values (the values of the graph from left to right)\n- **Range**: The domain is all y-values (the values of the graph from down to up)\n- **Scale**: The range of values in the graph (the values of the graph from down to up) and the amount of steps between each value.\n\n## Features (With Code Examples)\n\nAn area chart is defined with the custom element and width and height.\n\n```html\n<ids-area-chart title=\"An area chart showing component usage\" width=\"800\" height=\"500\"></ids-area-chart>\n```\n\nDatasets can be added to the area chart by passing in an array of objects. Each object must have a `data` and object with `name` and `values` to form the data points. Also a name should be given for each data object which will be used as the legend text. The `shortName` is used to show the short name of the legend text and the `abbrName` is used to show an even shorter name of the legend text in responsive situations.\n\n```js\nconst lineData2 = [{\n  data: [{\n    name: 'Jan',\n    value: 1\n  }, {\n    name: 'Feb',\n    value: 2\n  }, {\n    name: 'Mar',\n    value: 3\n  }, {\n    name: 'Apr',\n    value: 5\n  }, {\n    name: 'May',\n    value: 7\n  }, {\n    name: 'Jun',\n    value: 10\n  }],\n  name: 'Component A',\n  shortName: 'Comp A',\n  abbrName: 'A',\n}, {\n  data: [{\n    name: 'Jan',\n    value: 0\n  }, {\n    name: 'Feb',\n    value: 4\n  }, {\n    name: 'Mar',\n    value: 2\n  }, {\n    name: 'Apr',\n    value: 6\n  }, {\n    name: 'May',\n    value: 8\n  }, {\n    name: 'Jun',\n    value: 20\n  }],\n  name: 'Component B',\n  shortName: 'Comp B',\n  abbrName: 'B',\n}];\n\ndocument.querySelector('ids-line-chart').data = lineData;\n```\n\nAnother type of chart you can use is a sequential color chart. A sequence of colors is used to represent various concepts of range in low-high density, quantity, and concentration situations. I.E. The data is highly related and should be represented with a single color.\n\nTo achieve this it is recommended to use the `color` setting and pick one of the Ids Colors in the color palette and use variables in its range. For example:\n\n```js\n[{\n   \"data\": [],\n   \"name\": \"Component A\",\n   \"color\": \"var(--ids-color-azure-60)\n }, {\n   \"data\": [],\n   \"name\": \"Component B\",\n   \"shortName\": \"Comp B\",\n   \"abbreviatedName\": \"B\",\n   \"color\": \"var(--ids-color-azure-40)\"\n }, {\n   \"data\": [{\n   ],\n   \"name\": \"Component C\",\n   \"color\": \"var(--ids-color-azure-20)\"\n }]\n```\n\n## Class Hierarchy\n\n- IdsAreaChart\n  - IdsLineChart\n    - IdsAxisChart\n      - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Data Settings\n\n(See Line Chart and Axis Chart Settings for more information)\n\n## Settings\n\n(See Line Chart and Axis Chart Settings for more information)\n\n## Events\n\n(See Line Chart and Axis Chart Settings for more information)\n\n## Methods\n\n(See Line Chart and Axis Chart Settings for more information)\n\n## Themeable Parts\n\n- `svg` the outside svg element\n- `marker` each dots/marker element in the chart\n- `lines` each line element in the chart\n\n## Animation\n\nThe line rise along the y-axis from 0 to the appropriate values. The area below the line fills up as the line rises.\n\n## States and Variations\n\n(See Line Chart and Axis Chart Settings for more information)\n\n## Keyboard Guidelines\n\n(See Line Chart and Axis Chart Settings for more information)\n\n## Responsive Guidelines\n\n- The area chart will fill the size of its parent container and readjust when the window is resized.\n\n## Converting from Previous Versions (Breaking Changes)\n\n- 4.x: The area chart was added after version 3.6 so new in 4.x\n- 5.x: Area Chart have all new markup and classes for web components but the data is still the same except for a few changes.\n  - `shortName` is now `shortName`\n  - `abbreviatedName` is now `abbrName`\n\n## Accessibility Guidelines\n\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. Ensure the color tags that indicate state like OK, cancel, ect have other ways to indicate that information.\n\n## Regional Considerations\n\nChart labels should be localized in the current language. The chart will flip in RTL mode. For some color blind users the svg patterns can be used.\n"}},{"name":"ids-axis-chart","attributes":[{"name":"initialized","values":[]},{"name":"svg","values":[]},{"name":"canvas","values":[]},{"name":"emptyMessage","values":[]},{"name":"legend","values":[]},{"name":"sectionWidths","values":[]},{"name":"sectionWidth","values":[]},{"name":"sectionHeights","values":[]},{"name":"sectionHeight","values":[]},{"name":"resizeToParentHeight","values":[]},{"name":"resizeToParentWidth","values":[]},{"name":"parentWidth","values":[]},{"name":"parentHeight","values":[]},{"name":"datasource","description":"Reference to datasource API","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"#xMaxTextWidth","description":"Max width for x-labels text","values":[]},{"name":"#yMaxTextWidth","description":"Max width for y-labels text","values":[]},{"name":"#resizeObserver","description":"Holds the resize observer object","values":[]},{"name":"isGrouped","values":[]},{"name":"markerData","description":"The marker data to use to draw the chart","values":[]},{"name":"#axisLabelsText","description":"Holds the axis labels text object","values":[]},{"name":"height","description":"The width of the chart (in pixels) or 'inherit' from the parent","values":[]},{"name":"horizontal","description":"Flips the orientation to horizontal\nsupported `Axis` and `Bar` type charts","values":[]},{"name":"width","description":"The width of the chart (in pixels) or 'inherit' from the parent","values":[]},{"name":"margins","description":"Set the left, right, top, bottom margins","values":[]},{"name":"bottomRotateMargin","description":"Get bottom rotate margin","values":[]},{"name":"axisLabelsMargin","description":"Get axis labels margin","values":[]},{"name":"textWidths","description":"Set the width the text labels/axes take up on each side.","values":[]},{"name":"data","description":"Set the data array of the chart","values":[]},{"name":"yAxisMin","description":"Set the minimum value on the y axis","values":[]},{"name":"showVerticalGridLines","description":"Show the vertical axis grid lines","values":[]},{"name":"showHorizontalGridLines","description":"Show the horizontal axis grid lines","values":[]},{"name":"colors","description":"Utility function to get the colors series being used in this chart","values":[]},{"name":"xAxisFormatter","description":"Set the format on the x axis items","values":[]},{"name":"yAxisFormatter","description":"Set the format on the y axis items","values":[]},{"name":"cubicBezier","description":"Get a reusable snippet to ease the animation","values":[]},{"name":"animated","description":"Set the animation on/off","values":[]},{"name":"animationSpeed","description":"Set the animation speed in s","values":[]},{"name":"alignXLabels","description":"Set the x axis label alignment between start, middle and end","values":[]},{"name":"stacked","description":"Stack the data forming a stacked bar chart","values":[]},{"name":"axisLabelBottom","description":"Set the bottom axis label text","values":[]},{"name":"axisLabelEnd","description":"Set the end axis label text","values":[]},{"name":"axisLabelMargin","description":"Set the margin for axis label text","values":[]},{"name":"axisLabelStart","description":"Set the start axis label text","values":[]},{"name":"axisLabelTop","description":"Set the top axis label text","values":[]},{"name":"rotateNameLabels","description":"Set the rotation for the axis name label text (eg 45deg)","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# Ids Axis Chart Component\n\n## Description\n\nThe axis chart is a chart with an x-axis and y-axis. This is the base chart object used to make line, area, column and other charts. Generally it should not be used on its own but if you have a case of making some other chart it could be used.\n\n## Use Cases\n\n- When you want a chart with x and y axis and control over whats rendered in it.\n\n## Usage Considerations\n\n- Do not show too many lines at once as it may be difficult to interpret.\n- Hover tooltips should only be used to reveal additional non-critical information.\n\n## Terminology\n\n- **Marker**: A UI embellishments that shows the data points (i.e. the dots on a line chart).\n- **Domain**: The domain is all x-values (the values of the graph from left to right)\n- **Range**: The domain is all y-values (the values of the graph from down to up)\n- **Scale**: The range of values in the graph (the values of the graph from down to up) and the amount of steps between each value.\n- **Axis**: Charts typically have two axes that are used to measure and categorize data: a vertical axis (also known as value axis or y axis), and a horizontal axis (also known as category axis or x axis).\n\n## Features (With Code Examples)\n\nA axis chart is defined with a custom element with a width and height.\n\n```html\n<ids-axis-chart title=\"A line chart showing component usage\" width=\"800\" height=\"500\"></ids-axis-chart>\n```\n\nDatasets can be added to the line chart by passing in an array of objects. Each object must have a `data` and object with `name` and `values` from the data points. Also a name should be given for each data object which will be used as the legend text. The `shortName` is used to show the short name of the legend text and the `abbrName` is used to show an even shorter name of the legend text in responsive situations.\n\n```html\nconst dataset = [{\n  data: [{\n    name: 'Jan',\n    value: 1\n  }, {\n    name: 'Feb',\n    value: 2\n  }, {\n    name: 'Mar',\n    value: 3\n  }, {\n    name: 'Apr',\n    value: 5\n  }, {\n    name: 'May',\n    value: 7\n  }, {\n    name: 'Jun',\n    value: 10\n  }],\n  name: 'Component A',\n  shortName: 'Comp A',\n  abbrName: 'A',\n}];\n\ndocument.querySelector('ids-axis-chart').data = dataset;\n```\n\nInside the chart you should provide a chartTemplate that returns the inside (markers) of the chart as svg. The `lineMarkers` element will contain the correct points and position of the markers to use based on the data/height/width/margins of the chart.\n\n```js\nchartTemplate() {\n  return `<g class=\"markers\">\n    ${this.lineMarkers().markers}\n  </g>\n  <g class=\"marker-lines\">\n    ${this.lineMarkers().lines}\n  </g>\n  <g class=\"areas\">\n    ${this.#areas()}\n  </g>`;\n}\n```\n\nYou can also customize the empty message contents but adding an `ids-empty-element` to the slot.\n\n```html\n<ids-axis-chart title=\"A line chart showing component usage\" width=\"800\" height=\"500\">\n    <ids-empty-message slot=\"empty-message\"icon=\"empty-no-data\" hidden>\n        <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">No Data Right Now</ids-text>\n    </ids-empty-message>\n</ids-axis-chart>\n```\n\nAnother type of chart you can use is a sequential color chart. A sequence of colors is used to represent various concepts of range in low-high density, quantity, and concentration situations. I.E. The data is highly related and should be represented with a single color.\n\nTo achieve this it is recommended to use the `color` setting and pick one of the Ids Colors in the color palette and use variables in its range. For example:\n\n```js\n[{\n   \"data\": [],\n   \"name\": \"Component A\",\n   \"color\": \"var(--ids-color-azure-60)\n }, {\n   \"data\": [],\n   \"name\": \"Component B\",\n   \"shortName\": \"Comp B\",\n   \"abbreviatedName\": \"B\",\n   \"color\": \"var(--ids-color-azure-40)\"\n }, {\n   \"data\": [{\n   ],\n   \"name\": \"Component C\",\n   \"color\": \"var(--ids-color-azure-20)\"\n }]\n```\n\nYou can add axis labels all around (bottom, end, start, top).\n\n```html\n<ids-axis-chart\n  axis-label-bottom=\"Bottom axis label\"\n  axis-label-end=\"End axis label\"\n  axis-label-start=\"Start axis label\"\n  axis-label-top=\"Top axis label\"\n  width=\"700\"\n  height=\"400\"\n  id=\"axis-label-example\"\n  title=\"A axis chart showing component usage with axis-label\"\n></ids-axis-chart>\n```\n\nShowing component as horizontal orientation.\n\n```html\n<ids-axis-chart\n  horizontal\n  width=\"700\"\n  height=\"400\"\n  id=\"axis-horizontal-example\"\n  title=\"Horizontal example\"\n></ids-axis-chart>\n```\n\n## Class Hierarchy\n\n- IdsAxisChart\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n  IdsChartLegendMixin\n  IdsChartSelectionMixin\n\n## Data Settings\n\nThe following data attributes can be used on the data passed to a chart.\n\n- `data` {object} A data group with one or more `name` and `value` pairs.\n- `name` {string} The name for the legend text and tooltip representing the slice.\n- `shortName` {string} The short name of the legend text.\n- `abbrName` {string} A very short name of the legend text (one or two characters).\n- `color` {string} The color of this axis group. This can be either a hex value for example `#FF0000` or a color name like `red` or an ids variable like `var(--ids-color-azure-20)`.\n- `tooltip` {string} The custom tooltip string (as static text). See the tooltip section for more information.\n\n## Settings\n\n- `title` {string} Sets the internal title of the chart (for accessibility). It is recommended to mention the chart type for accessibility readout. For example: `Line chart showing invoice history`.\n- `height` {number} Generally this is calculated automatically but can be used to set a specific height.\n- `width` {number} Generally this is calculated automatically but can be used to set a specific width.\n- `textWidths` {object} Generally this is calculated automatically but can be overridden by setting the amount of space to allocate for margins on the `{ left, right, top, bottom }` sides.\n- `textWidths` {object} Generally this is calculated automatically but can be overridden by setting the amount of space to allocate for text on the `{ left, right, top, bottom }` sides.\n- `xAxisMin` {number}  Set the minimum value on the x axis  (default: 0)\n- `yAxisMin` {number}  Set the minimum value on the y axis  (default: 0)\n- `showVerticalGridLines` {boolean}  Show the vertical axis grid lines (default: false)\n- `showHorizontalGridLines` {boolean}  Show the horizontal axis grid lines (default: true)\n- `yAxisFormatter` {object | Function} Sets the format on the y axis items. This can either be settings that are passed to `Intl.NumberFormat` or a formatter function. The formatter function will get three parameters (value, data, api) and should return a string based on the axis value. The y axis is not always a number so it does not default to `Intl.NumberFormat`. The default is `{ notation: 'compact', compactDisplay: 'short' }`.\n- `xAxisFormatter` {Function} Sets the format on the x axis items. The formatter function will get three parameters (value, data, api) and should return a string based on the axis value. The x axis is not always a number so it does not default to `Intl.NumberFormat`. See the [Intl.NumberFormat api](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) for more details and examples on formatting options.\n- `horizontal` {boolean} Flips the orientation to horizontal, supported `Axis` and `Bar` type charts.\n- `selectable` {boolean} Sets the selection mode.\n- `axisLabelBottom` {string} Option to add bottom axis label.\n- `axisLabelEnd` {string} Option to add horizontally end side axis label.\n- `axisLabelStart` {string} Option to add horizontally start side axis label.\n- `axisLabelTop` {string} Option to add top axis label.\n- `axisLabelMargin` {string|number} Axis label margin value.\n- `rotateNameLabels` {string|number} Sets the rotation of the labels on the name axis (style guide recommends -60 but you may want to tweak it based on labels. The `shortName` and `abbreviatedName` labels do not work with this setting.\n\n## Events\n\n- `rendered` Fires each time the chart is rendered or rerendered (on resize).\n- `beforeselected` Fires before selected, you can return false in the response to veto.\n- `selected` Fires after selected.\n- `beforedeselected` Fires before deselected, you can return false in the response to veto.\n- `deselected` Fires after deselected.\n\n## Themeable Parts\n\n- `container` the outer container div element\n- `chart` the svg outer element\n\n## States and Variations\n\n- Theme\n- Legends\n- Selectable\n\n## Responsive Guidelines\n\n- Sizes to the given width/height defaulting to that of the immediate parent.\n\n## Tooltip Customizations\n\nYou can customize the tooltip by changing some of the API settings. For just a static tooltip you can use the `tooltip` setting in the data at the same place as the `name` property.\n\nIf you need to change which items get tooltips you can override `tooltipElements` getter.\n\n```js\ntooltipElements() {\n  return this.container.querySelectorAll('rect.bar');\n}\n\nIf you need to change the tooltip contents you can override the `tooltipTemplate` function.\n\n```js\ntooltipTemplate() {\n  return '<b>${label}</b> ${value}';\n}\n```\n\nOr you can modify the tooltip in the slot.\n\n## Why Not Canvas?\n\nWe decided to use SVG over Canvas because of the following reasons:\n\n- Canvas is not part of the DOM thus not accessible by screen readers.\n- Canvas is more difficult to make interactive and responsive.\n- Would be generally more maintainable.\n- SVG output is easier to debug.\n"}},{"name":"ids-chart-colors","description":{"kind":"markdown","value":"# Ids Axis Chart Component\n\n## Description\n\nThe axis chart is a chart with an x-axis and y-axis. This is the base chart object used to make line, area, column and other charts. Generally it should not be used on its own but if you have a case of making some other chart it could be used.\n\n## Use Cases\n\n- When you want a chart with x and y axis and control over whats rendered in it.\n\n## Usage Considerations\n\n- Do not show too many lines at once as it may be difficult to interpret.\n- Hover tooltips should only be used to reveal additional non-critical information.\n\n## Terminology\n\n- **Marker**: A UI embellishments that shows the data points (i.e. the dots on a line chart).\n- **Domain**: The domain is all x-values (the values of the graph from left to right)\n- **Range**: The domain is all y-values (the values of the graph from down to up)\n- **Scale**: The range of values in the graph (the values of the graph from down to up) and the amount of steps between each value.\n- **Axis**: Charts typically have two axes that are used to measure and categorize data: a vertical axis (also known as value axis or y axis), and a horizontal axis (also known as category axis or x axis).\n\n## Features (With Code Examples)\n\nA axis chart is defined with a custom element with a width and height.\n\n```html\n<ids-axis-chart title=\"A line chart showing component usage\" width=\"800\" height=\"500\"></ids-axis-chart>\n```\n\nDatasets can be added to the line chart by passing in an array of objects. Each object must have a `data` and object with `name` and `values` from the data points. Also a name should be given for each data object which will be used as the legend text. The `shortName` is used to show the short name of the legend text and the `abbrName` is used to show an even shorter name of the legend text in responsive situations.\n\n```html\nconst dataset = [{\n  data: [{\n    name: 'Jan',\n    value: 1\n  }, {\n    name: 'Feb',\n    value: 2\n  }, {\n    name: 'Mar',\n    value: 3\n  }, {\n    name: 'Apr',\n    value: 5\n  }, {\n    name: 'May',\n    value: 7\n  }, {\n    name: 'Jun',\n    value: 10\n  }],\n  name: 'Component A',\n  shortName: 'Comp A',\n  abbrName: 'A',\n}];\n\ndocument.querySelector('ids-axis-chart').data = dataset;\n```\n\nInside the chart you should provide a chartTemplate that returns the inside (markers) of the chart as svg. The `lineMarkers` element will contain the correct points and position of the markers to use based on the data/height/width/margins of the chart.\n\n```js\nchartTemplate() {\n  return `<g class=\"markers\">\n    ${this.lineMarkers().markers}\n  </g>\n  <g class=\"marker-lines\">\n    ${this.lineMarkers().lines}\n  </g>\n  <g class=\"areas\">\n    ${this.#areas()}\n  </g>`;\n}\n```\n\nYou can also customize the empty message contents but adding an `ids-empty-element` to the slot.\n\n```html\n<ids-axis-chart title=\"A line chart showing component usage\" width=\"800\" height=\"500\">\n    <ids-empty-message slot=\"empty-message\"icon=\"empty-no-data\" hidden>\n        <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">No Data Right Now</ids-text>\n    </ids-empty-message>\n</ids-axis-chart>\n```\n\nAnother type of chart you can use is a sequential color chart. A sequence of colors is used to represent various concepts of range in low-high density, quantity, and concentration situations. I.E. The data is highly related and should be represented with a single color.\n\nTo achieve this it is recommended to use the `color` setting and pick one of the Ids Colors in the color palette and use variables in its range. For example:\n\n```js\n[{\n   \"data\": [],\n   \"name\": \"Component A\",\n   \"color\": \"var(--ids-color-azure-60)\n }, {\n   \"data\": [],\n   \"name\": \"Component B\",\n   \"shortName\": \"Comp B\",\n   \"abbreviatedName\": \"B\",\n   \"color\": \"var(--ids-color-azure-40)\"\n }, {\n   \"data\": [{\n   ],\n   \"name\": \"Component C\",\n   \"color\": \"var(--ids-color-azure-20)\"\n }]\n```\n\nYou can add axis labels all around (bottom, end, start, top).\n\n```html\n<ids-axis-chart\n  axis-label-bottom=\"Bottom axis label\"\n  axis-label-end=\"End axis label\"\n  axis-label-start=\"Start axis label\"\n  axis-label-top=\"Top axis label\"\n  width=\"700\"\n  height=\"400\"\n  id=\"axis-label-example\"\n  title=\"A axis chart showing component usage with axis-label\"\n></ids-axis-chart>\n```\n\nShowing component as horizontal orientation.\n\n```html\n<ids-axis-chart\n  horizontal\n  width=\"700\"\n  height=\"400\"\n  id=\"axis-horizontal-example\"\n  title=\"Horizontal example\"\n></ids-axis-chart>\n```\n\n## Class Hierarchy\n\n- IdsAxisChart\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n  IdsChartLegendMixin\n  IdsChartSelectionMixin\n\n## Data Settings\n\nThe following data attributes can be used on the data passed to a chart.\n\n- `data` {object} A data group with one or more `name` and `value` pairs.\n- `name` {string} The name for the legend text and tooltip representing the slice.\n- `shortName` {string} The short name of the legend text.\n- `abbrName` {string} A very short name of the legend text (one or two characters).\n- `color` {string} The color of this axis group. This can be either a hex value for example `#FF0000` or a color name like `red` or an ids variable like `var(--ids-color-azure-20)`.\n- `tooltip` {string} The custom tooltip string (as static text). See the tooltip section for more information.\n\n## Settings\n\n- `title` {string} Sets the internal title of the chart (for accessibility). It is recommended to mention the chart type for accessibility readout. For example: `Line chart showing invoice history`.\n- `height` {number} Generally this is calculated automatically but can be used to set a specific height.\n- `width` {number} Generally this is calculated automatically but can be used to set a specific width.\n- `textWidths` {object} Generally this is calculated automatically but can be overridden by setting the amount of space to allocate for margins on the `{ left, right, top, bottom }` sides.\n- `textWidths` {object} Generally this is calculated automatically but can be overridden by setting the amount of space to allocate for text on the `{ left, right, top, bottom }` sides.\n- `xAxisMin` {number}  Set the minimum value on the x axis  (default: 0)\n- `yAxisMin` {number}  Set the minimum value on the y axis  (default: 0)\n- `showVerticalGridLines` {boolean}  Show the vertical axis grid lines (default: false)\n- `showHorizontalGridLines` {boolean}  Show the horizontal axis grid lines (default: true)\n- `yAxisFormatter` {object | Function} Sets the format on the y axis items. This can either be settings that are passed to `Intl.NumberFormat` or a formatter function. The formatter function will get three parameters (value, data, api) and should return a string based on the axis value. The y axis is not always a number so it does not default to `Intl.NumberFormat`. The default is `{ notation: 'compact', compactDisplay: 'short' }`.\n- `xAxisFormatter` {Function} Sets the format on the x axis items. The formatter function will get three parameters (value, data, api) and should return a string based on the axis value. The x axis is not always a number so it does not default to `Intl.NumberFormat`. See the [Intl.NumberFormat api](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) for more details and examples on formatting options.\n- `horizontal` {boolean} Flips the orientation to horizontal, supported `Axis` and `Bar` type charts.\n- `selectable` {boolean} Sets the selection mode.\n- `axisLabelBottom` {string} Option to add bottom axis label.\n- `axisLabelEnd` {string} Option to add horizontally end side axis label.\n- `axisLabelStart` {string} Option to add horizontally start side axis label.\n- `axisLabelTop` {string} Option to add top axis label.\n- `axisLabelMargin` {string|number} Axis label margin value.\n- `rotateNameLabels` {string|number} Sets the rotation of the labels on the name axis (style guide recommends -60 but you may want to tweak it based on labels. The `shortName` and `abbreviatedName` labels do not work with this setting.\n\n## Events\n\n- `rendered` Fires each time the chart is rendered or rerendered (on resize).\n- `beforeselected` Fires before selected, you can return false in the response to veto.\n- `selected` Fires after selected.\n- `beforedeselected` Fires before deselected, you can return false in the response to veto.\n- `deselected` Fires after deselected.\n\n## Themeable Parts\n\n- `container` the outer container div element\n- `chart` the svg outer element\n\n## States and Variations\n\n- Theme\n- Legends\n- Selectable\n\n## Responsive Guidelines\n\n- Sizes to the given width/height defaulting to that of the immediate parent.\n\n## Tooltip Customizations\n\nYou can customize the tooltip by changing some of the API settings. For just a static tooltip you can use the `tooltip` setting in the data at the same place as the `name` property.\n\nIf you need to change which items get tooltips you can override `tooltipElements` getter.\n\n```js\ntooltipElements() {\n  return this.container.querySelectorAll('rect.bar');\n}\n\nIf you need to change the tooltip contents you can override the `tooltipTemplate` function.\n\n```js\ntooltipTemplate() {\n  return '<b>${label}</b> ${value}';\n}\n```\n\nOr you can modify the tooltip in the slot.\n\n## Why Not Canvas?\n\nWe decided to use SVG over Canvas because of the following reasons:\n\n- Canvas is not part of the DOM thus not accessible by screen readers.\n- Canvas is more difficult to make interactive and responsive.\n- Would be generally more maintainable.\n- SVG output is easier to debug.\n"}},{"name":"ids-nice-scale","attributes":[{"name":"#minPoint","description":"The calculated or provided min value to show","values":[]},{"name":"#maxPoint","description":"The calculated or provided max value","values":[]},{"name":"#maxTicks","description":"The calculated or provided max ticks","values":[]},{"name":"#range","description":"The calculated tick spacing","values":[]},{"name":"tickSpacing","description":"The calculated tick spacing","values":[]},{"name":"niceMin","description":"The calculated nice min value","values":[]},{"name":"niceMax","description":"The calculated nice max value","values":[]}],"description":{"kind":"markdown","value":"# Ids Axis Chart Component\n\n## Description\n\nThe axis chart is a chart with an x-axis and y-axis. This is the base chart object used to make line, area, column and other charts. Generally it should not be used on its own but if you have a case of making some other chart it could be used.\n\n## Use Cases\n\n- When you want a chart with x and y axis and control over whats rendered in it.\n\n## Usage Considerations\n\n- Do not show too many lines at once as it may be difficult to interpret.\n- Hover tooltips should only be used to reveal additional non-critical information.\n\n## Terminology\n\n- **Marker**: A UI embellishments that shows the data points (i.e. the dots on a line chart).\n- **Domain**: The domain is all x-values (the values of the graph from left to right)\n- **Range**: The domain is all y-values (the values of the graph from down to up)\n- **Scale**: The range of values in the graph (the values of the graph from down to up) and the amount of steps between each value.\n- **Axis**: Charts typically have two axes that are used to measure and categorize data: a vertical axis (also known as value axis or y axis), and a horizontal axis (also known as category axis or x axis).\n\n## Features (With Code Examples)\n\nA axis chart is defined with a custom element with a width and height.\n\n```html\n<ids-axis-chart title=\"A line chart showing component usage\" width=\"800\" height=\"500\"></ids-axis-chart>\n```\n\nDatasets can be added to the line chart by passing in an array of objects. Each object must have a `data` and object with `name` and `values` from the data points. Also a name should be given for each data object which will be used as the legend text. The `shortName` is used to show the short name of the legend text and the `abbrName` is used to show an even shorter name of the legend text in responsive situations.\n\n```html\nconst dataset = [{\n  data: [{\n    name: 'Jan',\n    value: 1\n  }, {\n    name: 'Feb',\n    value: 2\n  }, {\n    name: 'Mar',\n    value: 3\n  }, {\n    name: 'Apr',\n    value: 5\n  }, {\n    name: 'May',\n    value: 7\n  }, {\n    name: 'Jun',\n    value: 10\n  }],\n  name: 'Component A',\n  shortName: 'Comp A',\n  abbrName: 'A',\n}];\n\ndocument.querySelector('ids-axis-chart').data = dataset;\n```\n\nInside the chart you should provide a chartTemplate that returns the inside (markers) of the chart as svg. The `lineMarkers` element will contain the correct points and position of the markers to use based on the data/height/width/margins of the chart.\n\n```js\nchartTemplate() {\n  return `<g class=\"markers\">\n    ${this.lineMarkers().markers}\n  </g>\n  <g class=\"marker-lines\">\n    ${this.lineMarkers().lines}\n  </g>\n  <g class=\"areas\">\n    ${this.#areas()}\n  </g>`;\n}\n```\n\nYou can also customize the empty message contents but adding an `ids-empty-element` to the slot.\n\n```html\n<ids-axis-chart title=\"A line chart showing component usage\" width=\"800\" height=\"500\">\n    <ids-empty-message slot=\"empty-message\"icon=\"empty-no-data\" hidden>\n        <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">No Data Right Now</ids-text>\n    </ids-empty-message>\n</ids-axis-chart>\n```\n\nAnother type of chart you can use is a sequential color chart. A sequence of colors is used to represent various concepts of range in low-high density, quantity, and concentration situations. I.E. The data is highly related and should be represented with a single color.\n\nTo achieve this it is recommended to use the `color` setting and pick one of the Ids Colors in the color palette and use variables in its range. For example:\n\n```js\n[{\n   \"data\": [],\n   \"name\": \"Component A\",\n   \"color\": \"var(--ids-color-azure-60)\n }, {\n   \"data\": [],\n   \"name\": \"Component B\",\n   \"shortName\": \"Comp B\",\n   \"abbreviatedName\": \"B\",\n   \"color\": \"var(--ids-color-azure-40)\"\n }, {\n   \"data\": [{\n   ],\n   \"name\": \"Component C\",\n   \"color\": \"var(--ids-color-azure-20)\"\n }]\n```\n\nYou can add axis labels all around (bottom, end, start, top).\n\n```html\n<ids-axis-chart\n  axis-label-bottom=\"Bottom axis label\"\n  axis-label-end=\"End axis label\"\n  axis-label-start=\"Start axis label\"\n  axis-label-top=\"Top axis label\"\n  width=\"700\"\n  height=\"400\"\n  id=\"axis-label-example\"\n  title=\"A axis chart showing component usage with axis-label\"\n></ids-axis-chart>\n```\n\nShowing component as horizontal orientation.\n\n```html\n<ids-axis-chart\n  horizontal\n  width=\"700\"\n  height=\"400\"\n  id=\"axis-horizontal-example\"\n  title=\"Horizontal example\"\n></ids-axis-chart>\n```\n\n## Class Hierarchy\n\n- IdsAxisChart\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n  IdsChartLegendMixin\n  IdsChartSelectionMixin\n\n## Data Settings\n\nThe following data attributes can be used on the data passed to a chart.\n\n- `data` {object} A data group with one or more `name` and `value` pairs.\n- `name` {string} The name for the legend text and tooltip representing the slice.\n- `shortName` {string} The short name of the legend text.\n- `abbrName` {string} A very short name of the legend text (one or two characters).\n- `color` {string} The color of this axis group. This can be either a hex value for example `#FF0000` or a color name like `red` or an ids variable like `var(--ids-color-azure-20)`.\n- `tooltip` {string} The custom tooltip string (as static text). See the tooltip section for more information.\n\n## Settings\n\n- `title` {string} Sets the internal title of the chart (for accessibility). It is recommended to mention the chart type for accessibility readout. For example: `Line chart showing invoice history`.\n- `height` {number} Generally this is calculated automatically but can be used to set a specific height.\n- `width` {number} Generally this is calculated automatically but can be used to set a specific width.\n- `textWidths` {object} Generally this is calculated automatically but can be overridden by setting the amount of space to allocate for margins on the `{ left, right, top, bottom }` sides.\n- `textWidths` {object} Generally this is calculated automatically but can be overridden by setting the amount of space to allocate for text on the `{ left, right, top, bottom }` sides.\n- `xAxisMin` {number}  Set the minimum value on the x axis  (default: 0)\n- `yAxisMin` {number}  Set the minimum value on the y axis  (default: 0)\n- `showVerticalGridLines` {boolean}  Show the vertical axis grid lines (default: false)\n- `showHorizontalGridLines` {boolean}  Show the horizontal axis grid lines (default: true)\n- `yAxisFormatter` {object | Function} Sets the format on the y axis items. This can either be settings that are passed to `Intl.NumberFormat` or a formatter function. The formatter function will get three parameters (value, data, api) and should return a string based on the axis value. The y axis is not always a number so it does not default to `Intl.NumberFormat`. The default is `{ notation: 'compact', compactDisplay: 'short' }`.\n- `xAxisFormatter` {Function} Sets the format on the x axis items. The formatter function will get three parameters (value, data, api) and should return a string based on the axis value. The x axis is not always a number so it does not default to `Intl.NumberFormat`. See the [Intl.NumberFormat api](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) for more details and examples on formatting options.\n- `horizontal` {boolean} Flips the orientation to horizontal, supported `Axis` and `Bar` type charts.\n- `selectable` {boolean} Sets the selection mode.\n- `axisLabelBottom` {string} Option to add bottom axis label.\n- `axisLabelEnd` {string} Option to add horizontally end side axis label.\n- `axisLabelStart` {string} Option to add horizontally start side axis label.\n- `axisLabelTop` {string} Option to add top axis label.\n- `axisLabelMargin` {string|number} Axis label margin value.\n- `rotateNameLabels` {string|number} Sets the rotation of the labels on the name axis (style guide recommends -60 but you may want to tweak it based on labels. The `shortName` and `abbreviatedName` labels do not work with this setting.\n\n## Events\n\n- `rendered` Fires each time the chart is rendered or rerendered (on resize).\n- `beforeselected` Fires before selected, you can return false in the response to veto.\n- `selected` Fires after selected.\n- `beforedeselected` Fires before deselected, you can return false in the response to veto.\n- `deselected` Fires after deselected.\n\n## Themeable Parts\n\n- `container` the outer container div element\n- `chart` the svg outer element\n\n## States and Variations\n\n- Theme\n- Legends\n- Selectable\n\n## Responsive Guidelines\n\n- Sizes to the given width/height defaulting to that of the immediate parent.\n\n## Tooltip Customizations\n\nYou can customize the tooltip by changing some of the API settings. For just a static tooltip you can use the `tooltip` setting in the data at the same place as the `name` property.\n\nIf you need to change which items get tooltips you can override `tooltipElements` getter.\n\n```js\ntooltipElements() {\n  return this.container.querySelectorAll('rect.bar');\n}\n\nIf you need to change the tooltip contents you can override the `tooltipTemplate` function.\n\n```js\ntooltipTemplate() {\n  return '<b>${label}</b> ${value}';\n}\n```\n\nOr you can modify the tooltip in the slot.\n\n## Why Not Canvas?\n\nWe decided to use SVG over Canvas because of the following reasons:\n\n- Canvas is not part of the DOM thus not accessible by screen readers.\n- Canvas is more difficult to make interactive and responsive.\n- Would be generally more maintainable.\n- SVG output is easier to debug.\n"}},{"name":"ids-pattern-data","description":{"kind":"markdown","value":"# Ids Axis Chart Component\n\n## Description\n\nThe axis chart is a chart with an x-axis and y-axis. This is the base chart object used to make line, area, column and other charts. Generally it should not be used on its own but if you have a case of making some other chart it could be used.\n\n## Use Cases\n\n- When you want a chart with x and y axis and control over whats rendered in it.\n\n## Usage Considerations\n\n- Do not show too many lines at once as it may be difficult to interpret.\n- Hover tooltips should only be used to reveal additional non-critical information.\n\n## Terminology\n\n- **Marker**: A UI embellishments that shows the data points (i.e. the dots on a line chart).\n- **Domain**: The domain is all x-values (the values of the graph from left to right)\n- **Range**: The domain is all y-values (the values of the graph from down to up)\n- **Scale**: The range of values in the graph (the values of the graph from down to up) and the amount of steps between each value.\n- **Axis**: Charts typically have two axes that are used to measure and categorize data: a vertical axis (also known as value axis or y axis), and a horizontal axis (also known as category axis or x axis).\n\n## Features (With Code Examples)\n\nA axis chart is defined with a custom element with a width and height.\n\n```html\n<ids-axis-chart title=\"A line chart showing component usage\" width=\"800\" height=\"500\"></ids-axis-chart>\n```\n\nDatasets can be added to the line chart by passing in an array of objects. Each object must have a `data` and object with `name` and `values` from the data points. Also a name should be given for each data object which will be used as the legend text. The `shortName` is used to show the short name of the legend text and the `abbrName` is used to show an even shorter name of the legend text in responsive situations.\n\n```html\nconst dataset = [{\n  data: [{\n    name: 'Jan',\n    value: 1\n  }, {\n    name: 'Feb',\n    value: 2\n  }, {\n    name: 'Mar',\n    value: 3\n  }, {\n    name: 'Apr',\n    value: 5\n  }, {\n    name: 'May',\n    value: 7\n  }, {\n    name: 'Jun',\n    value: 10\n  }],\n  name: 'Component A',\n  shortName: 'Comp A',\n  abbrName: 'A',\n}];\n\ndocument.querySelector('ids-axis-chart').data = dataset;\n```\n\nInside the chart you should provide a chartTemplate that returns the inside (markers) of the chart as svg. The `lineMarkers` element will contain the correct points and position of the markers to use based on the data/height/width/margins of the chart.\n\n```js\nchartTemplate() {\n  return `<g class=\"markers\">\n    ${this.lineMarkers().markers}\n  </g>\n  <g class=\"marker-lines\">\n    ${this.lineMarkers().lines}\n  </g>\n  <g class=\"areas\">\n    ${this.#areas()}\n  </g>`;\n}\n```\n\nYou can also customize the empty message contents but adding an `ids-empty-element` to the slot.\n\n```html\n<ids-axis-chart title=\"A line chart showing component usage\" width=\"800\" height=\"500\">\n    <ids-empty-message slot=\"empty-message\"icon=\"empty-no-data\" hidden>\n        <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">No Data Right Now</ids-text>\n    </ids-empty-message>\n</ids-axis-chart>\n```\n\nAnother type of chart you can use is a sequential color chart. A sequence of colors is used to represent various concepts of range in low-high density, quantity, and concentration situations. I.E. The data is highly related and should be represented with a single color.\n\nTo achieve this it is recommended to use the `color` setting and pick one of the Ids Colors in the color palette and use variables in its range. For example:\n\n```js\n[{\n   \"data\": [],\n   \"name\": \"Component A\",\n   \"color\": \"var(--ids-color-azure-60)\n }, {\n   \"data\": [],\n   \"name\": \"Component B\",\n   \"shortName\": \"Comp B\",\n   \"abbreviatedName\": \"B\",\n   \"color\": \"var(--ids-color-azure-40)\"\n }, {\n   \"data\": [{\n   ],\n   \"name\": \"Component C\",\n   \"color\": \"var(--ids-color-azure-20)\"\n }]\n```\n\nYou can add axis labels all around (bottom, end, start, top).\n\n```html\n<ids-axis-chart\n  axis-label-bottom=\"Bottom axis label\"\n  axis-label-end=\"End axis label\"\n  axis-label-start=\"Start axis label\"\n  axis-label-top=\"Top axis label\"\n  width=\"700\"\n  height=\"400\"\n  id=\"axis-label-example\"\n  title=\"A axis chart showing component usage with axis-label\"\n></ids-axis-chart>\n```\n\nShowing component as horizontal orientation.\n\n```html\n<ids-axis-chart\n  horizontal\n  width=\"700\"\n  height=\"400\"\n  id=\"axis-horizontal-example\"\n  title=\"Horizontal example\"\n></ids-axis-chart>\n```\n\n## Class Hierarchy\n\n- IdsAxisChart\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n  IdsChartLegendMixin\n  IdsChartSelectionMixin\n\n## Data Settings\n\nThe following data attributes can be used on the data passed to a chart.\n\n- `data` {object} A data group with one or more `name` and `value` pairs.\n- `name` {string} The name for the legend text and tooltip representing the slice.\n- `shortName` {string} The short name of the legend text.\n- `abbrName` {string} A very short name of the legend text (one or two characters).\n- `color` {string} The color of this axis group. This can be either a hex value for example `#FF0000` or a color name like `red` or an ids variable like `var(--ids-color-azure-20)`.\n- `tooltip` {string} The custom tooltip string (as static text). See the tooltip section for more information.\n\n## Settings\n\n- `title` {string} Sets the internal title of the chart (for accessibility). It is recommended to mention the chart type for accessibility readout. For example: `Line chart showing invoice history`.\n- `height` {number} Generally this is calculated automatically but can be used to set a specific height.\n- `width` {number} Generally this is calculated automatically but can be used to set a specific width.\n- `textWidths` {object} Generally this is calculated automatically but can be overridden by setting the amount of space to allocate for margins on the `{ left, right, top, bottom }` sides.\n- `textWidths` {object} Generally this is calculated automatically but can be overridden by setting the amount of space to allocate for text on the `{ left, right, top, bottom }` sides.\n- `xAxisMin` {number}  Set the minimum value on the x axis  (default: 0)\n- `yAxisMin` {number}  Set the minimum value on the y axis  (default: 0)\n- `showVerticalGridLines` {boolean}  Show the vertical axis grid lines (default: false)\n- `showHorizontalGridLines` {boolean}  Show the horizontal axis grid lines (default: true)\n- `yAxisFormatter` {object | Function} Sets the format on the y axis items. This can either be settings that are passed to `Intl.NumberFormat` or a formatter function. The formatter function will get three parameters (value, data, api) and should return a string based on the axis value. The y axis is not always a number so it does not default to `Intl.NumberFormat`. The default is `{ notation: 'compact', compactDisplay: 'short' }`.\n- `xAxisFormatter` {Function} Sets the format on the x axis items. The formatter function will get three parameters (value, data, api) and should return a string based on the axis value. The x axis is not always a number so it does not default to `Intl.NumberFormat`. See the [Intl.NumberFormat api](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat) for more details and examples on formatting options.\n- `horizontal` {boolean} Flips the orientation to horizontal, supported `Axis` and `Bar` type charts.\n- `selectable` {boolean} Sets the selection mode.\n- `axisLabelBottom` {string} Option to add bottom axis label.\n- `axisLabelEnd` {string} Option to add horizontally end side axis label.\n- `axisLabelStart` {string} Option to add horizontally start side axis label.\n- `axisLabelTop` {string} Option to add top axis label.\n- `axisLabelMargin` {string|number} Axis label margin value.\n- `rotateNameLabels` {string|number} Sets the rotation of the labels on the name axis (style guide recommends -60 but you may want to tweak it based on labels. The `shortName` and `abbreviatedName` labels do not work with this setting.\n\n## Events\n\n- `rendered` Fires each time the chart is rendered or rerendered (on resize).\n- `beforeselected` Fires before selected, you can return false in the response to veto.\n- `selected` Fires after selected.\n- `beforedeselected` Fires before deselected, you can return false in the response to veto.\n- `deselected` Fires after deselected.\n\n## Themeable Parts\n\n- `container` the outer container div element\n- `chart` the svg outer element\n\n## States and Variations\n\n- Theme\n- Legends\n- Selectable\n\n## Responsive Guidelines\n\n- Sizes to the given width/height defaulting to that of the immediate parent.\n\n## Tooltip Customizations\n\nYou can customize the tooltip by changing some of the API settings. For just a static tooltip you can use the `tooltip` setting in the data at the same place as the `name` property.\n\nIf you need to change which items get tooltips you can override `tooltipElements` getter.\n\n```js\ntooltipElements() {\n  return this.container.querySelectorAll('rect.bar');\n}\n\nIf you need to change the tooltip contents you can override the `tooltipTemplate` function.\n\n```js\ntooltipTemplate() {\n  return '<b>${label}</b> ${value}';\n}\n```\n\nOr you can modify the tooltip in the slot.\n\n## Why Not Canvas?\n\nWe decided to use SVG over Canvas because of the following reasons:\n\n- Canvas is not part of the DOM thus not accessible by screen readers.\n- Canvas is more difficult to make interactive and responsive.\n- Would be generally more maintainable.\n- SVG output is easier to debug.\n"}},{"name":"ids-badge","attributes":[{"name":"shape","description":"Set the shape of the badge","values":[]},{"name":"color","description":"Set the color","values":[]},{"name":"disabled","description":"Sets the disabled state","values":[]}],"description":{"kind":"markdown","value":"# Ids Badge Component\n\n## Description\n\nThe IDS Badge Compoment consists of a small circle containing alphanumeric or icon that appears to another object. Badges are used to display alphanumeric values. A User can easily skim object-related values.\n\n## Use Cases\n\n- Badges can be use to give a non-critical status update on a piece of information or action to your application.\n- Badges can be used to provide users with information about an object that is worthy of attention.\n\n## Terminology\n\n- **Badge**: used to inform users of the status of an object or of an action.\n- **Color**: This is the color of the badge.\n- **Shape**: This is the shape of the badge. It can be round or rounded rectangle.\n\n## Themeable Parts\n\n- `badge` allows you to further style the badge element\n\n## Features (With Code Examples)\n\nA normal/ no properties badge used as a web component.\n\n```html\n<ids-badge>5</ids-badge>\n```\n\nA colored badge is done by adding a `color` attribute and one of the following:\nalert, error, info, warning, and success.\n\n```html\n<ids-badge color=\"alert\">10</ids-badge>\n<ids-badge color=\"error\">1500</ids-badge>\n<ids-badge color=\"info\">25k+</ids-badge>\n<ids-badge color=\"warning\">16</ids-badge>\n<ids-badge color=\"success\">5</ids-badge>\n```\n\nA shape badge is done by adding a `shape` attribute and one of the following: normal, and round. When you don't set the shape, normal will be the default value.\n\n```html\n<ids-badge color=\"alert\" shape=\"round\">10</ids-badge>\n```\n\nA badge with an icon can be configure by adding the `<ids-icon></ids-icon>` component inside of the badge.\n\n```html\n<ids-badge color=\"alert\" shape=\"round\"><ids-icon icon=\"pending\" size=\"normal\"></ids-icon></ids-badge>\n```\n\nAudible span can de configure by adding `<ids-text audible=\"true\"></ids-text>` inside of the badge.\n\n```html\n<ids-badge color=\"error\">404 <ids-text audible=\"true\">In Error Condition</ids-text></ids-badge>\n```\n\n## Settings and Attributes\n\n- `color` {string} Sets the color of the badge e.g. `alert`, `error`, or `info`.\n- `disabled` {boolean} Sets the disabled state.\n- `shape` {string} `normal` is the default value of the shape, you can also change it to `round`.\n\n## States and Variations\n\n- Color\n- Disabled\n- Shape\n\n## Keyboard Guidelines\n\nBadges do not have tab stops and have no keyboard interaction on their own, but they may be placed in a grid cell or object that has tab focus.\n\n## Accessibility Guidelines\n\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. Ensure the color tags that indicate state like OK, cancel, ect have other ways to indicate that information. This is failing.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and images of text has a contrast ratio of at least 4.5:1 Ensure the color badges pass contrast.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**4.x to 5.x**\n- Markup has changed to a custom element `<ids-badge></ids-badge>\n- Can now be imported as a single JS file and used with encapsulated styles\n- The names of some badge types have changed.\n- The yellow warning is removed in favor of just the orange warning.\n- Some of the types/settings are changed.\n"}},{"name":"ids-bar-chart","attributes":[{"name":"selectionElements","description":"Return chart elements that get selection","values":[]},{"name":"groupCount","description":"Number of groups count","values":[]},{"name":"alignXLabels","description":"Adjust the default for the x labels","values":[]},{"name":"barPercentage","description":"Percent (0-1) of the available width each bar should be within the category width.\n1.0 will take the whole category width and put the bars right next to each other.\nif `isGrouped` this value, will use as whole group percentage.","values":[]},{"name":"categoryPercentage","description":"Percent (0-1) of the available width each category (group) section.","values":[]},{"name":"DEFAULT_SELECTABLE","values":[]},{"name":"initialized","values":[]},{"name":"svg","values":[]},{"name":"canvas","values":[]},{"name":"emptyMessage","values":[]},{"name":"legend","values":[]},{"name":"sectionWidths","values":[]},{"name":"sectionWidth","values":[]},{"name":"sectionHeights","values":[]},{"name":"sectionHeight","values":[]},{"name":"resizeToParentHeight","values":[]},{"name":"resizeToParentWidth","values":[]},{"name":"parentWidth","values":[]},{"name":"parentHeight","values":[]},{"name":"datasource","description":"Reference to datasource API","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"#xMaxTextWidth","description":"Max width for x-labels text","values":[]},{"name":"#yMaxTextWidth","description":"Max width for y-labels text","values":[]},{"name":"#resizeObserver","description":"Holds the resize observer object","values":[]},{"name":"isGrouped","values":[]},{"name":"markerData","description":"The marker data to use to draw the chart","values":[]},{"name":"#axisLabelsText","description":"Holds the axis labels text object","values":[]},{"name":"height","description":"The width of the chart (in pixels) or 'inherit' from the parent","values":[]},{"name":"horizontal","description":"Flips the orientation to horizontal\nsupported `Axis` and `Bar` type charts","values":[]},{"name":"width","description":"The width of the chart (in pixels) or 'inherit' from the parent","values":[]},{"name":"margins","description":"Set the left, right, top, bottom margins","values":[]},{"name":"bottomRotateMargin","description":"Get bottom rotate margin","values":[]},{"name":"axisLabelsMargin","description":"Get axis labels margin","values":[]},{"name":"textWidths","description":"Set the width the text labels/axes take up on each side.","values":[]},{"name":"data","description":"Set the data array of the chart","values":[]},{"name":"yAxisMin","description":"Set the minimum value on the y axis","values":[]},{"name":"showVerticalGridLines","description":"Show the vertical axis grid lines","values":[]},{"name":"showHorizontalGridLines","description":"Show the horizontal axis grid lines","values":[]},{"name":"colors","description":"Utility function to get the colors series being used in this chart","values":[]},{"name":"xAxisFormatter","description":"Set the format on the x axis items","values":[]},{"name":"yAxisFormatter","description":"Set the format on the y axis items","values":[]},{"name":"cubicBezier","description":"Get a reusable snippet to ease the animation","values":[]},{"name":"animated","description":"Set the animation on/off","values":[]},{"name":"animationSpeed","description":"Set the animation speed in s","values":[]},{"name":"stacked","description":"Stack the data forming a stacked bar chart","values":[]},{"name":"axisLabelBottom","description":"Set the bottom axis label text","values":[]},{"name":"axisLabelEnd","description":"Set the end axis label text","values":[]},{"name":"axisLabelMargin","description":"Set the margin for axis label text","values":[]},{"name":"axisLabelStart","description":"Set the start axis label text","values":[]},{"name":"axisLabelTop","description":"Set the top axis label text","values":[]},{"name":"rotateNameLabels","description":"Set the rotation for the axis name label text (eg 45deg)","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# Ids Bar Chart Component\n\n## Description\n\nAn bar chart is used to display relational information quickly for a quantity across a particular category. Users can interact by clicking or tapping on bars to drill in on a certain series of data. Users can also interact by hovering bars to reveal additional information in a tooltip. The x-axis could be any variable, such as time, or the category that is being measured.\n\nGrouped bar graphs, also called clustered bar graphs, represent discrete values for more than one item that share the same category. For example a grouped bar graph could display several categories within each main category such as male and female, within certain traits on the x-axis. To make a grouped bar chart provide the appropriately formatted data.\n\nStacked bar graphs or composite bar graphs divide an aggregate total into parts. Each segment adds to the total of the bar and are separated by different colors. To make a stacked bar chart use `stacked=\"true\"` and provide the appropriately formatted data.\n\n## Use Cases\n\n- Display an earnings per share (EPS)\n- Compare revenue or cash flow over time\n- Compares series through a visual representation of data in columns.\n- Quickly compares trends in a variety of ways\n\n## Usage Considerations\n\n- Do not show too many bars or too many categories or segments or the data may be hard to read.\n- Hover tooltips should only be used to reveal additional non-critical information.\n\n## Terminology\n\n- **Bar**: The UI element that represents a concrete value in a color.\n- **Category**: The section for each bar when grouping.\n- **Segment**: The section for each bar value when stacking\n\n## Features (With Code Examples)\n\nAn bar chart is defined with the custom element and width and height.\n\n```html\n  <ids-bar-chart title=\"A bar chart showing component usage\" show-vertical-grid-lines=\"true\" width=\"800\" height=\"500\" id=\"index-example\"></ids-bar-chart>\n```\n\nDatasets can be added to the bar chart by passing in an array of objects. Each object must have a `data` and object with `name` and `values` to form the data points. Also a name should be given for each data object which will be used as the legend text. The `shortName` is used to show the short name of the legend text and the `abbrName` is used to show an even shorter name of the legend text in responsive situations.\n\n```js\nconst dataset = [{\n  data: [{\n    name: 'Jan',\n    value: 1\n  }, {\n    name: 'Feb',\n    value: 2\n  }, {\n    name: 'Mar',\n    value: 3\n  }, {\n    name: 'Apr',\n    value: 5\n  }, {\n    name: 'May',\n    value: 7\n  }, {\n    name: 'Jun',\n    value: 10\n  }],\n  name: 'Component A',\n  shortName: 'Comp A',\n  abbrName: 'A',\n}];\n\ndocument.querySelector('ids-bar-chart').data = dataset;\n```\n\nA chart can also be `stacked` or `grouped`. Stacked bar graphs or composite bar graphs divide an aggregate total into parts. Each segment adds to the total of the bar and are separated by different colors.\n\nTo make a stacked bar chart use `stacked=\"true\"` and provide the appropriately formatted data.\n\n## Class Hierarchy\n\n- IdsBarChart\n  - IdsAxisChart\n    - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Data Settings\n\n(See  Axis Chart Settings for more information)\n\n## Settings\n\n- `barPercentage` {number} A percent (0-1) of the available width each bar should be within the category width. 1.0 will take the whole category width and put the bars right next to each other. In a grouped chart the barPercentage value, will use as whole category percentage. We change the defaults depending on stacked or grouped bar charts but this can be adjusted to change the bar sizes.\n- `categoryPercentage` {number} Percent (0-1) of the available width for each category section. We change the defaults depending on stacked or grouped bar charts.\n- `horizontal` {boolean} Flips the orientation to horizontal.\n\nThe following shows the relationship between the bar percentage option and the category percentage option.\n\n```sh\n// categoryPercentage: 1.0\n// barPercentage: 1.0\nBar:        | 1.0 | 1.0 |\nCategory:   |    1.0    |\nSection:    |===========|\n\n// categoryPercentage: 1.0\n// barPercentage: 0.5\nBar:          |.5|  |.5|\nCategory:  |      1.0     |\nSection:   |==============|\n\n// categoryPercentage: 0.5\n// barPercentage: 1.0\nBar:             |1.0||1.0|\nCategory:        |   .5   |\nSection:    |==================|\n```\n\n- `stacked` {boolean} Set to true to make a stacked bar chart.\n- `grouped` {boolean} Set to true to make a grouped bar chart.\n\n(See Axis Chart Settings for other shared settings)\n\n## Patterns\n\nThe bar chart includes patterns that can be used for color blind users. We plan on adding this to other charts as well.\nTo use a pattern specify it on the `pattern` attribute it in the data. You can also set a `patternColor` otherwise it will use the default color for that item in the series.\n\n```js\nconst data = [{\n  data: [{\n    name: 'Jan',\n    value: 1\n  }, {\n    name: 'Feb',\n    value: 2\n  }],\n  name: 'Component A',\n  pattern: 'circles',\n  patternColor: '#DA1217'\n}];\n```\n\nThe following patterns are supported:\n\n```sh\narrows\nboxes\ncheckers\npatches\ncircles\nexes\ndiamonds\ndots\nstars\nmixed\nsquares\nhex\nbig-hex\nintersect\nlines\nbars\npipes\nmesh\npluses\nwaves\nbig-waves\n```\n\nShowing component as horizontal orientation.\n\n```html\n<ids-bar-chart\n  horizontal\n  width=\"700\"\n  height=\"400\"\n  id=\"bar-horizontal-example\"\n  title=\"Horizontal example\"\n></ids-bar-chart>\n```\n\n## Events\n\n(See Axis Chart Settings for more information)\n\n## Methods\n\n(See Axis Chart Settings for more information)\n\n## Themeable Parts\n\n- `svg` the outside svg element\n- `bar` each bar element  in the chart\n- `lines` each line element in the chart\n\n## Animation\n\nThe bars rise along the y-axis from 0 to the appropriate values.\n\n## States and Variations\n\n(See Line Chart and Axis Chart Settings for more information)\n\n## Keyboard Guidelines\n\n(See Line Chart and Axis Chart Settings for more information)\n\n## Responsive Guidelines\n\n- The area chart will fill the size of its parent container and readjust when the window is resized.\n\n## Converting from Previous Versions (Breaking Changes)\n\n- 4.x: The area chart was added after version 3.6 so new in 4.x\n- 5.x: Bar Chart have all new markup and classes for web components but the data is still the same except for a few changes.\n  - `shortName` is now `shortName`\n  - `abbreviatedName` is now `abbrName`\n\n## Accessibility Guidelines\n\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. Ensure the color tags that indicate state like OK, cancel, ect have other ways to indicate that information.\n- Approach is to treat the bar items as a list `role=\"list\"`. The bar items are `role=\"listitem\"`. The tab index is not visible to the user as it is not needed and can be navigated with a screen reader.\n- Using voice over the sequence is to\n  - Navigate to the parent element above it  or parent page\n  - Hold <kbd>caps lock + left/right arrow</kbd>\n  - You will hear the title , followed by number of items and then each list item\n  - Proceed to use <kbd>caps lock + left/right arrow</kbd> will move through the list items announcing the values\n\n## Regional Considerations\n\nChart labels should be localized in the current language. The chart will flip in RTL mode. For some color blind users the svg patterns can be used.\n"}},{"name":"ids-block-grid-item","attributes":[{"name":"checkboxHasFocus","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# Ids Block Grid Component\n\n## Description\n\nThe IDS Block Grid Component displays data as selectable blocks within a simple grid. It gives a way of evenly split contents of a list within a grid.\n\n## Use Cases\n\nUse when you wanted to create rows of images with paragraphs/links that need to stay evenly spaced.\n\n## Terminology\n\n- **Align**: The position of the block grid. You can set it to be center, left, or right.\n\n## Feature (With the Code Examples)\n\nA block grid is created by using the `ids-block-grid` as the main container, and `ids-block-grid-item` for the item inside of it.\n\n```html\n<ids-block-grid>\n  <ids-blockgrid-item>\n    Content Here...\n  </ids-blockgrid-item>\n</ids-block-grid>\n```\n\nYou can set the alignment of the block grid by setting the `align` property with these three options `left`, `centered` or `right`. By default, the position is set to `centered` align.\n\n```html\n<ids-block-grid align=\"centered\">\n  <ids-blockgrid-item>\n    Content Here...\n  </ids-blockgrid-item>\n</ids-block-grid>\n```\n\n## Settings and Attributes\n\n- `align` {string} Sets the position of the block grid and it's contents.\n\n## States and Variations\n\n- Align\n\n## Responsive Guidelines\n\n- The block grid uses flex container to be able to fill available free space and shrinks them to prevent overflow, while the block grid item has a width of 200px. It automatically sets the height depends on how many the block grid item is.\n\n## Accessibility\n\nThe use of this component is not recommended for Accessibility since the lack of elements in the page may pose issues for screen reader and other assistive technology. Consider a way to disable this functionality.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- New Component in 4.x\n\n**4.x to 5.x**\n- Block Grid now uses all new markup and classes for web components (see above)\n- The way paging and selection are applied have changes to the api\n"}},{"name":"ids-block-grid","attributes":[{"name":"datasource","description":"Reference to datasource API","values":[]},{"name":"data","description":"Set the data array of the blockgrid","values":[]},{"name":"align","description":"Set the alignment of blockgrid","values":[]},{"name":"selection","description":"Set the selection to a block-grid and it will add selection to all items","values":[]}],"description":{"kind":"markdown","value":"# Ids Block Grid Component\n\n## Description\n\nThe IDS Block Grid Component displays data as selectable blocks within a simple grid. It gives a way of evenly split contents of a list within a grid.\n\n## Use Cases\n\nUse when you wanted to create rows of images with paragraphs/links that need to stay evenly spaced.\n\n## Terminology\n\n- **Align**: The position of the block grid. You can set it to be center, left, or right.\n\n## Feature (With the Code Examples)\n\nA block grid is created by using the `ids-block-grid` as the main container, and `ids-block-grid-item` for the item inside of it.\n\n```html\n<ids-block-grid>\n  <ids-blockgrid-item>\n    Content Here...\n  </ids-blockgrid-item>\n</ids-block-grid>\n```\n\nYou can set the alignment of the block grid by setting the `align` property with these three options `left`, `centered` or `right`. By default, the position is set to `centered` align.\n\n```html\n<ids-block-grid align=\"centered\">\n  <ids-blockgrid-item>\n    Content Here...\n  </ids-blockgrid-item>\n</ids-block-grid>\n```\n\n## Settings and Attributes\n\n- `align` {string} Sets the position of the block grid and it's contents.\n\n## States and Variations\n\n- Align\n\n## Responsive Guidelines\n\n- The block grid uses flex container to be able to fill available free space and shrinks them to prevent overflow, while the block grid item has a width of 200px. It automatically sets the height depends on how many the block grid item is.\n\n## Accessibility\n\nThe use of this component is not recommended for Accessibility since the lack of elements in the page may pose issues for screen reader and other assistive technology. Consider a way to disable this functionality.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- New Component in 4.x\n\n**4.x to 5.x**\n- Block Grid now uses all new markup and classes for web components (see above)\n- The way paging and selection are applied have changes to the api\n"}},{"name":"ids-breadcrumb","attributes":[{"name":"onBreadcrumbActivate","values":[]},{"name":"#resizeObserver","description":"Attach the resize observer.","values":[]},{"name":"colorVariants","values":[]},{"name":"current","values":[]},{"name":"buttonEl","values":[]},{"name":"menuContainerEl","values":[]},{"name":"navElem","values":[]},{"name":"overflowMenuItems","values":[]},{"name":"popupMenuEl","values":[]},{"name":"popupMenuGroupEl","values":[]},{"name":"truncate","description":"Set if breadcrumb will be truncated if there isn't enough space","values":[]},{"name":"padding","description":"If set to number the breadcrumb container will have padding added (in pixels)","values":[]}],"description":{"kind":"markdown","value":"# Ids Breadcrumb Component\n\n## Description\n\nA breadcrumb is a navigational element that shows a user their current location in the hierarchical context of an application and allows them to navigate back through page levels.\n\nA user can navigate between views using a breadcrumb. It is best for presenting hierarchical paths in a system and showing the user the location.\n\nBreadcrumbs show the user's location within the context of a site’s navigational hierarchy. Since it only displays the navigational path from a single point of origin, it does not reflect the user's previous site history. While multi-line breadcrumbs are supported and sometimes necessary, truncated or single-line breadcrumbs are preferred, as they are less content-dense.\n\n## Use Cases\n\n- Breadcrumbs give users a way to view and trace their steps back through various levels within a hierarchy. Breadcrumbs help to minimize confusion in applications that contain a deep navigational hierarchy.\n\n## Features (With Code Examples)\n\nA normal breadcrumb component with an disabled item. The last item is considered the current link and has bolded styling.\n\n```html\n<ids-breadcrumb>\n  <ids-hyperlink font-size=\"14\" color=\"unset\">First Item</ids-hyperlink>\n  <ids-hyperlink font-size=\"14\" color=\"unset\">Second Item</ids-hyperlink>\n  <ids-hyperlink font-size=\"14\" color=\"unset\" disabled>Disabled Item</ids-hyperlink>\n  <ids-hyperlink font-size=\"14\" color=\"unset\">Current Item</ids-hyperlink>\n</ids-breadcrumb>\n```\n\n## Settings and Attributes\n\nInside the breadcrumb you can have either ids-text of ids-hyperlink elements depending if the text is linkable or not.\n\nThe following ids-hyperlink attributes should be considered\n\n- `color` {string} Set to unset to disable the hyperlink color and get the default coloring to work.\n- `disabled` Use leave blank or set to 'true' to set disabled color.\n- `font-size` {number} Will be 14 by default.\n- `href` {string} The url that the hyperlink component links to.\n- `truncate` {boolean} true if the breadcrumb list can become \"truncated\", hiding some links behind an overflow menu\n\n## States and Variations (With Code Examples)\n\n- Default: The default state of breadcrumb text.\n- Hover: Indicates that the user is hovering over a text item in the breadcrumb, and can click on the item to navigate to a level that is higher in the navigational hierarchy. Since the last item in the breadcrumb represents the user’s current page, it is typically non-interactive and does not include a hover state.\n- Focus: Indicates that the user has highlighted the hyperlink through tab key navigation.\n\n## Themeable Parts\n\n- `checkbox` allows you to further style the checkbox input element\n- `slider` allows you to further style the sliding part of the switch\n- `label` allows you to further style the label text\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>: If the bread crumb item is focus is focusable this will focus or unfocus the link.\n- <kbd>Enter</kbd>: If a link this will follow the link.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- \"Collapsing Lists\" was deprecated but later added as truncate feature.\n- Markup has entirely changed, see the updated code example\n\n**4.x to 5.x**\n- Markup has changed to a custom element `<ids-breadcrumb></ids-breadcrumb>`\n- Markup Uses `ids-hyperlink` instead of `<a>`\n- Can now be imported as a single JS file and used with encapsulated styles\n"}},{"name":"ids-button-common","description":{"kind":"markdown","value":"# Ids Button Component\n\n## Description\n\nThe IDS Button component is a simple wrapper around a standard HTMLButtonElement that is styled with Infor branding, and contains some additional API that makes it easy to set text, icons, and functionality.\n\n## Use Cases\n\n- Create standalone buttons\n- Create multiple buttons, each with different styling to provide context for actions that are primary, secondary, and tertiary.\n\n## Terminology\n\n**Primary**: A primary action that is the definitive \"use\" of a particular feature.  For example, after doing data entry on a form, the primary action might be to \"Save\" the contents of that form to a record.\n**Secondary**: A secondary action is one that might be related to the primary action, but alternative in nature.  For example, a secondary action that might sit next to our above primary action could be \"reset\", which would remove the user-entered contents of the form and start from scratch.\n**Tertiary**: Sometimes also called \"destructive\" in IDS, a tertiary action is one that might \"undo\" or be completely separate from the primary/secondary actions, but labelled with enough importance to be displayed aside them. Building on the above examples, a tertiary action might be \"cancel\" or \"close\", which would cause the form to close, and return the user to the previous workflow.\n\n## Themeable Parts\n\n- `button` allows you to further style the internal button element\n- `icon` allows you to further style the internal icon element (used in some types of buttons)\n- `text` allows you to further style the internal icon element (used in some types of buttons)\n\n## Features (With Code Samples)\n\nStandalone primary buttons could be built this way:\n\n```html\n<ids-button id=\"my-button\" appearance=\"primary\">\n  <span>My Button</span>\n</ids-button>\n```\n\nAdd an icon to the button using the `icon` attribute:\n\n```html\n<ids-button id=\"my-button\" appearance=\"primary\" icon=\"settings\">\n  <span>My Button</span>\n</ids-button>\n```\n\nIDS Buttons can be designed to make the icon appear by itself, without any visible text.  For accessibility reasons, descriptive text explaining the button's function should always be present.  In this scenario, the text span can have an \"audible\" class added, which will visually hide the text, but keep it accessible to screen readers:\n\n```html\n<ids-button id=\"my-button\" appearance=\"primary\" icon=\"settings\">\n  <span class=\"audible\">My Button</span>\n</ids-button>\n```\n\n### Color Variants\n\nIf placing a button inside a container with a contrasting background color, sometimes the \"base\" styles for Ids Button appearances aren't adequate for passing contrast checks. To resolve this problem, the `color-variant` property can be used by way of the [IdsColorVariantMixin](../../mixins/ids-color-variant-mixin/README.md):\n\n```html\n<!-- Generates a default (Tertiary) Button with white text and focus/hover states --->\n<ids-button id=\"my-button-1\" color-variant=\"alternate\">\n  <span>My Button</span>\n</ids-button>\n\n<!-- Generates a Primary Button with a slightly more bright Azure --->\n<ids-button id=\"my-button-2\" appearance=\"primary\" color-variant=\"alternate\">\n  <span>My Button</span>\n</ids-button>\n\n<!-- Generates a Secondary Button with a slightly more bright Slate --->\n<ids-button id=\"my-button-3\" appearance=\"primary\" color-variant=\"alternate\">\n  <span>My Button</span>\n</ids-button>\n\n<!-- Generates a button to use with toolbar formatter type --->\n<ids-button id=\"my-button-4\" color-variant=\"alternate-formatter\">\n  <span>My Button</span>\n</ids-button>\n```\n\n## States and Variations\n\nStandard button states include:\n\n- Normal\n- Hover\n- Focus\n- Active (pressed)\n- Disabled\n- Color Variant - alternate colors for each button appearance are available via the [IdsColorVariantMixin](../../src/mixins/ids-color-variant/README.md)\n\nIDS button appearances include:\n\n- `default` (not displayed as a \"appearance\" attribute when set)\n- `primary`\n- `primary-destructive`\n- `secondary`\n- `tertiary`\n- `tertiary-destructive`\n\n### Alignment\n\nBy default, alignment of text/icons within an IDS Button will occur based on the DOM order of those elements.  However, if the `icon-align` attribute is specified, the alignment order of the inner elements can be forced.\n\nThe example below will result in the icon appearing after the text, even though the DOM order is the opposite:\n\n```html\n<ids-button id=\"my-button\" appearance=\"primary\" icon=\"settings\" icon-align=\"end\">\n  <span>My Button</span>\n</ids-button>\n```\n\nThe attribute has the following effects:\n\n| prop value | LTR (default) Icon Location | RTL Icon Location |\n| :--------- | :-------------------------- | :---------------- |\n| undefined  | n/a | n/a |\n| 'start'    | icon to the left of text | icon to the right of text |\n| 'end'      | icon to the right of text | icon to the left of text |\n\n### Type\n\nIdsButton's type attribute simply passes through to the Shadow Root's HTMLButtonElement and defines its usage.  For example, this is how you would define a form's `submit` button:\n\n```html\n<ids-button id=\"my-button\" type=\"submit\">\n  <span>My Button</span>\n</ids-button>\n```\n\n## Settings and Attributes\n\n- `appearance` {string} The visual style defining the purpose of the button\n- `colorVariant` {'alternate' | 'alternate-formatter'} Set the variants theme styles\n- `cssClass` {Array<string> | string | null} Contains space-delimited CSS classes (or an array of CSS classes) that will be passed to the Shadow Root button\n- `disabled` {boolean} Sets the internal Button element's `disabled` property to enable/disable the button\n- `icon` {string | null} A string representing an icon to display inside the button.  This string is passed to a slotted [IdsIcon](../ids-icon/README.md) element's `icon` setting to set the desired icon type.\n- `iconAlign` {string} Defines which side to align the Button's icon against, can be 'start' or 'end'\n- `tabIndex` {string | number} Sets the internal Button element's `tabIndex` property for controlling focus\n- `text` {string} API-level method of setting a button's text content. This will become the content of the slotted text node when set\n- `type` {string} Passes a 'type' attribute for a standard HTMLButtonElement into the IdsButton's ShadowRoot-contained button element\n- `tooltip` {string} Sets up a string based tooltip\n- `square` {boolean} whether the corners of the button as an icon-button are angled/90°\n- `width` {string} Sets width of button. Accepts percent, pixels, rem, etc.\n\n## Keyboard Guidelines\n\nThe IDS Button doesn't contain any interactions beyond a standard HTMLButtonElement:\n\n- <kbd>Spacebar</kbd> or <kbd>Enter</kbd> keys execute the action for that button. If the button activation closes the containing entity or launches another entity, then focus moves to the newly-opened entity. If the button activation does not close or dismiss the containing entity, then focus remains on the button. An example might be an \"Apply\" or \"Recalculate\" button.\n- <kbd>Tab</kbd> or <kbd>Shift</kbd>/<kbd>Tab<kbd> causes focus to move away from the button forward or backward one element/set respectively.\n\n## Responsive Guidelines\n\n- Buttons can optionally be 100% width of their parent container on mobile breakpoints\n\n## Accessibility Guidelines\n\n- All buttons, including icon-only buttons, should have some kind of text description inside the button for explaining its action to a visually-impaired user. This text can be hidden visually by way of using an `audible` CSS class on the text content.\n\n## Regional Considerations\n\nBe conscious of the layout of content within your buttons when they are present in RTL situations.\n\n## Converting from Previous Versions\n\n**3.x to 4.x**\n- Change class `inforFormButton` default to `btn-primary`\n- Change class `inforFormButton` to `btn-secondary\n\n**4.x to 5.x**\nThe IDS Button component is now a WebComponent.  Instead of using classes to define a button's purpose or visual style, it's now done directly with an \"appearance\" attribute:\n\n```html\n<!-- 4.x button example -->\n<button class=\"btn-primary\" id=\"my-button\">\n  <svg class=\"icon\" role=\"presentation\">\n    <use href=\"#settings\"></use>\n  </svg>\n  <span>My Button</span>\n</button>\n\n<!-- this is the same button using the WebComponent -->\n<ids-button id=\"my-button\" appearance=\"primary\" icon=\"settings\">\n  <span>My Button</span>\n</ids-button>\n```\n\n- Markup has changed to a custom element `<ids-button id=\"my-button\" appearance=\"primary\"></ids-button>`\n- Can now be imported as a single JS file and used with encapsulated styles.\n- Some button properties are now attributes - \"appearance\", \"text\", \"icon\", \"disabled\", etc.\n- Some components now extend IdsButton, such as [IdsToggleButton](../ids-toggle-button/README.md) and [IdsMenuButton](../ids-menu-button/README.md)...\n"}},{"name":"ids-button","attributes":[{"name":"shouldUpdate","values":[]},{"name":"colorVariants","description":"Inherited from `IdsColorVariantMixin`","values":[]},{"name":"protoClasses","description":"Figure out the classes","values":[]},{"name":"button","values":[]},{"name":"cssClass","values":[]},{"name":"disabled","description":"Passes a disabled attribute from the custom element to the button","values":[]},{"name":"#tabIndex","description":"Passes a tabIndex attribute from the custom element to the button","values":[]},{"name":"icon","description":"Gets the current icon used on the button","values":[]},{"name":"iconEl","description":"Gets the current icon element","values":[]},{"name":"iconAlign","description":"Sets the automatic alignment of an existing icon to the 'start' or 'end' of the text","values":[]},{"name":"width","description":"Set width of button","values":[]},{"name":"text","values":[]},{"name":"appearance","description":"Set the button appearance between 'default', 'primary', 'secondary', 'tertiary', or 'destructive'","values":[]},{"name":"type","description":"Sets the HTMLButtonElement 'type' attribute","values":[]},{"name":"noMargins","description":"Sets the no margins attribute","values":[]},{"name":"noPadding","values":[]},{"name":"square","values":[]}],"description":{"kind":"markdown","value":"# Ids Button Component\n\n## Description\n\nThe IDS Button component is a simple wrapper around a standard HTMLButtonElement that is styled with Infor branding, and contains some additional API that makes it easy to set text, icons, and functionality.\n\n## Use Cases\n\n- Create standalone buttons\n- Create multiple buttons, each with different styling to provide context for actions that are primary, secondary, and tertiary.\n\n## Terminology\n\n**Primary**: A primary action that is the definitive \"use\" of a particular feature.  For example, after doing data entry on a form, the primary action might be to \"Save\" the contents of that form to a record.\n**Secondary**: A secondary action is one that might be related to the primary action, but alternative in nature.  For example, a secondary action that might sit next to our above primary action could be \"reset\", which would remove the user-entered contents of the form and start from scratch.\n**Tertiary**: Sometimes also called \"destructive\" in IDS, a tertiary action is one that might \"undo\" or be completely separate from the primary/secondary actions, but labelled with enough importance to be displayed aside them. Building on the above examples, a tertiary action might be \"cancel\" or \"close\", which would cause the form to close, and return the user to the previous workflow.\n\n## Themeable Parts\n\n- `button` allows you to further style the internal button element\n- `icon` allows you to further style the internal icon element (used in some types of buttons)\n- `text` allows you to further style the internal icon element (used in some types of buttons)\n\n## Features (With Code Samples)\n\nStandalone primary buttons could be built this way:\n\n```html\n<ids-button id=\"my-button\" appearance=\"primary\">\n  <span>My Button</span>\n</ids-button>\n```\n\nAdd an icon to the button using the `icon` attribute:\n\n```html\n<ids-button id=\"my-button\" appearance=\"primary\" icon=\"settings\">\n  <span>My Button</span>\n</ids-button>\n```\n\nIDS Buttons can be designed to make the icon appear by itself, without any visible text.  For accessibility reasons, descriptive text explaining the button's function should always be present.  In this scenario, the text span can have an \"audible\" class added, which will visually hide the text, but keep it accessible to screen readers:\n\n```html\n<ids-button id=\"my-button\" appearance=\"primary\" icon=\"settings\">\n  <span class=\"audible\">My Button</span>\n</ids-button>\n```\n\n### Color Variants\n\nIf placing a button inside a container with a contrasting background color, sometimes the \"base\" styles for Ids Button appearances aren't adequate for passing contrast checks. To resolve this problem, the `color-variant` property can be used by way of the [IdsColorVariantMixin](../../mixins/ids-color-variant-mixin/README.md):\n\n```html\n<!-- Generates a default (Tertiary) Button with white text and focus/hover states --->\n<ids-button id=\"my-button-1\" color-variant=\"alternate\">\n  <span>My Button</span>\n</ids-button>\n\n<!-- Generates a Primary Button with a slightly more bright Azure --->\n<ids-button id=\"my-button-2\" appearance=\"primary\" color-variant=\"alternate\">\n  <span>My Button</span>\n</ids-button>\n\n<!-- Generates a Secondary Button with a slightly more bright Slate --->\n<ids-button id=\"my-button-3\" appearance=\"primary\" color-variant=\"alternate\">\n  <span>My Button</span>\n</ids-button>\n\n<!-- Generates a button to use with toolbar formatter type --->\n<ids-button id=\"my-button-4\" color-variant=\"alternate-formatter\">\n  <span>My Button</span>\n</ids-button>\n```\n\n## States and Variations\n\nStandard button states include:\n\n- Normal\n- Hover\n- Focus\n- Active (pressed)\n- Disabled\n- Color Variant - alternate colors for each button appearance are available via the [IdsColorVariantMixin](../../src/mixins/ids-color-variant/README.md)\n\nIDS button appearances include:\n\n- `default` (not displayed as a \"appearance\" attribute when set)\n- `primary`\n- `primary-destructive`\n- `secondary`\n- `tertiary`\n- `tertiary-destructive`\n\n### Alignment\n\nBy default, alignment of text/icons within an IDS Button will occur based on the DOM order of those elements.  However, if the `icon-align` attribute is specified, the alignment order of the inner elements can be forced.\n\nThe example below will result in the icon appearing after the text, even though the DOM order is the opposite:\n\n```html\n<ids-button id=\"my-button\" appearance=\"primary\" icon=\"settings\" icon-align=\"end\">\n  <span>My Button</span>\n</ids-button>\n```\n\nThe attribute has the following effects:\n\n| prop value | LTR (default) Icon Location | RTL Icon Location |\n| :--------- | :-------------------------- | :---------------- |\n| undefined  | n/a | n/a |\n| 'start'    | icon to the left of text | icon to the right of text |\n| 'end'      | icon to the right of text | icon to the left of text |\n\n### Type\n\nIdsButton's type attribute simply passes through to the Shadow Root's HTMLButtonElement and defines its usage.  For example, this is how you would define a form's `submit` button:\n\n```html\n<ids-button id=\"my-button\" type=\"submit\">\n  <span>My Button</span>\n</ids-button>\n```\n\n## Settings and Attributes\n\n- `appearance` {string} The visual style defining the purpose of the button\n- `colorVariant` {'alternate' | 'alternate-formatter'} Set the variants theme styles\n- `cssClass` {Array<string> | string | null} Contains space-delimited CSS classes (or an array of CSS classes) that will be passed to the Shadow Root button\n- `disabled` {boolean} Sets the internal Button element's `disabled` property to enable/disable the button\n- `icon` {string | null} A string representing an icon to display inside the button.  This string is passed to a slotted [IdsIcon](../ids-icon/README.md) element's `icon` setting to set the desired icon type.\n- `iconAlign` {string} Defines which side to align the Button's icon against, can be 'start' or 'end'\n- `tabIndex` {string | number} Sets the internal Button element's `tabIndex` property for controlling focus\n- `text` {string} API-level method of setting a button's text content. This will become the content of the slotted text node when set\n- `type` {string} Passes a 'type' attribute for a standard HTMLButtonElement into the IdsButton's ShadowRoot-contained button element\n- `tooltip` {string} Sets up a string based tooltip\n- `square` {boolean} whether the corners of the button as an icon-button are angled/90°\n- `width` {string} Sets width of button. Accepts percent, pixels, rem, etc.\n\n## Keyboard Guidelines\n\nThe IDS Button doesn't contain any interactions beyond a standard HTMLButtonElement:\n\n- <kbd>Spacebar</kbd> or <kbd>Enter</kbd> keys execute the action for that button. If the button activation closes the containing entity or launches another entity, then focus moves to the newly-opened entity. If the button activation does not close or dismiss the containing entity, then focus remains on the button. An example might be an \"Apply\" or \"Recalculate\" button.\n- <kbd>Tab</kbd> or <kbd>Shift</kbd>/<kbd>Tab<kbd> causes focus to move away from the button forward or backward one element/set respectively.\n\n## Responsive Guidelines\n\n- Buttons can optionally be 100% width of their parent container on mobile breakpoints\n\n## Accessibility Guidelines\n\n- All buttons, including icon-only buttons, should have some kind of text description inside the button for explaining its action to a visually-impaired user. This text can be hidden visually by way of using an `audible` CSS class on the text content.\n\n## Regional Considerations\n\nBe conscious of the layout of content within your buttons when they are present in RTL situations.\n\n## Converting from Previous Versions\n\n**3.x to 4.x**\n- Change class `inforFormButton` default to `btn-primary`\n- Change class `inforFormButton` to `btn-secondary\n\n**4.x to 5.x**\nThe IDS Button component is now a WebComponent.  Instead of using classes to define a button's purpose or visual style, it's now done directly with an \"appearance\" attribute:\n\n```html\n<!-- 4.x button example -->\n<button class=\"btn-primary\" id=\"my-button\">\n  <svg class=\"icon\" role=\"presentation\">\n    <use href=\"#settings\"></use>\n  </svg>\n  <span>My Button</span>\n</button>\n\n<!-- this is the same button using the WebComponent -->\n<ids-button id=\"my-button\" appearance=\"primary\" icon=\"settings\">\n  <span>My Button</span>\n</ids-button>\n```\n\n- Markup has changed to a custom element `<ids-button id=\"my-button\" appearance=\"primary\"></ids-button>`\n- Can now be imported as a single JS file and used with encapsulated styles.\n- Some button properties are now attributes - \"appearance\", \"text\", \"icon\", \"disabled\", etc.\n- Some components now extend IdsButton, such as [IdsToggleButton](../ids-toggle-button/README.md) and [IdsMenuButton](../ids-menu-button/README.md)...\n"}},{"name":"ids-calendar-event","attributes":[{"name":"#order","values":[]},{"name":"#cssClass","values":[]},{"name":"#dateKey","values":[]},{"name":"cachedEvent","values":[]},{"name":"cachedEventType","values":[]},{"name":"onLanguageChange","description":"Respond to language changes","values":[]},{"name":"eventData","description":"Gets calendar event data","values":[]},{"name":"eventTypeData","description":"Gets calendar event type","values":[]},{"name":"yOffset","description":"Gets y offset","values":[]},{"name":"xOffset","description":"Sets horizontal position of calendar event\nStyles left or right depending on rtl flag","values":[]},{"name":"height","description":"Gets height","values":[]},{"name":"width","description":"Gets width","values":[]},{"name":"cssClass","description":"Sets extra css classes to calendar event","values":[]},{"name":"startDate","description":"Gets start date of calendar event","values":[]},{"name":"endDate","description":"Gets end date of calendar event","values":[]},{"name":"duration","description":"Gets duration of event in hours","values":[]},{"name":"displayTime","description":"Gets displayTime setting value","values":[]},{"name":"overflow","description":"Gets overflow value of IdsText","values":[]},{"name":"order","description":"Gets order property","values":[]},{"name":"color","description":"Gets color property from event type data","values":[]},{"name":"dateKey","description":"Gets dateKey property","values":[]}],"description":{"kind":"markdown","value":"# Ids Calendar Component\n\n## Description\nThe `ids-calendar` component is a web component that provides calendar view that displays month, week, and day views.\nUser can switch between month, week, and day views using menu button inside the toolbar.\n\n## Use Cases\n- Displays month view in selected date\n- Display a week calendar in selected date\n- Display one day calendar in selected date\n\n## Settings (Attributes)\n- `date` `{string|null}` - Specifies active date in a string date format. Defaults to current date.\n- `show-details` `{string|null}` - Specifies whether detail pane is shown\n- `show-legend` `{string|null}` - Specifies whether legend pane is shown\n\n## Settings (Properties)\n- `eventsData` `{Array<CalendarEventData>}` - Array of calendar event data to populate the week view\n- `eventTypesData` `{Array<CalendarEventTypeData>}` - Array of calendar event types used to categorize calendar events\n\n## Events\n- `eventadded` - Fires when new event is added to calendar. Detail contains new event and calendar element.\n- `eventupdated` - Fires when existing event is updated. Detail contains updated event and calendar element.\n- `beforeeventrendered` Fires for each event rendered (full day or in day) before the element is added to the DOM. This event can fire frequently or more than expected as the component does re-rendering.\n- `aftereventrendered` Fires for each event rendered (full day or in day) after the element is added to the DOM. This event can fire frequently or more than expected as the component does re-rendering.\n\n## Features (With Code Examples)\n\nWith no settings. Calendar shows month view set to current date without legend or detail panes.\n\n```html\n<ids-calendar></ids-calendar>\n```\n\nWith `date` setting. Calendar shows month/week/day view of provided date.\n\n```html\n<ids-calendar date=\"11/11/2021\"></ids-calendar>\n```\n\nWith `show-legend` setting. Calendar shows legend pane. By default, legend pane contains calendar event type checkboxes\nused to filter populated calendar events by event type.\n\n```html\n<ids-calendar\n  date=\"11/11/2021\"\n  show-legend=\"true\"\n></ids-calendar>\n```\n\nWith `show-details` setting. Calendar shows details pane. Detail pane shows detailed list of calendar event within the active date.\nDetail pane is only visible when month view is active.\n\n```html\n<ids-calendar\n  date=\"11/01/2021\"\n  show-details=\"true\"\n></ids-calendar>\n```\n\nThe component can be controlled dynamically\n\n```js\nconst calendar = document.querySelector('ids-calendar');\n\n// Changing date\ncalendar.date = 'Tue Nov 16 2021';\ncalendar.date = '11/17/2021';\n\n// Changing pane visibility\ncalendar.showLegend = false;\ncalendar.showDetails = true;\n\n// Setting calendar event data\ncalendar.eventsData = [...eventsData];\ncalendar.eventsData = [];\n\n// Setting calendar event types data\ncalendar.eventTypesData = [...eventTypesData];\ncalendar.eventTypesData = [];\n```\n"}},{"name":"ids-calendar","attributes":[{"name":"#mobileBreakpoint","values":[]},{"name":"#resizeObserver","values":[]},{"name":"#selectedEventId","values":[]},{"name":"showDetails","description":"Setting for calendar details pane","values":[]},{"name":"showLegend","description":"Setting for calendar legend pane","values":[]},{"name":"showToday","description":"Set whether or not the today button should be shown","values":[]},{"name":"date","description":"Returns active date","values":[]},{"name":"onLocaleChange","values":[]},{"name":"startDate","values":[]},{"name":"endDate","values":[]}],"description":{"kind":"markdown","value":"# Ids Calendar Component\n\n## Description\nThe `ids-calendar` component is a web component that provides calendar view that displays month, week, and day views.\nUser can switch between month, week, and day views using menu button inside the toolbar.\n\n## Use Cases\n- Displays month view in selected date\n- Display a week calendar in selected date\n- Display one day calendar in selected date\n\n## Settings (Attributes)\n- `date` `{string|null}` - Specifies active date in a string date format. Defaults to current date.\n- `show-details` `{string|null}` - Specifies whether detail pane is shown\n- `show-legend` `{string|null}` - Specifies whether legend pane is shown\n\n## Settings (Properties)\n- `eventsData` `{Array<CalendarEventData>}` - Array of calendar event data to populate the week view\n- `eventTypesData` `{Array<CalendarEventTypeData>}` - Array of calendar event types used to categorize calendar events\n\n## Events\n- `eventadded` - Fires when new event is added to calendar. Detail contains new event and calendar element.\n- `eventupdated` - Fires when existing event is updated. Detail contains updated event and calendar element.\n- `beforeeventrendered` Fires for each event rendered (full day or in day) before the element is added to the DOM. This event can fire frequently or more than expected as the component does re-rendering.\n- `aftereventrendered` Fires for each event rendered (full day or in day) after the element is added to the DOM. This event can fire frequently or more than expected as the component does re-rendering.\n\n## Features (With Code Examples)\n\nWith no settings. Calendar shows month view set to current date without legend or detail panes.\n\n```html\n<ids-calendar></ids-calendar>\n```\n\nWith `date` setting. Calendar shows month/week/day view of provided date.\n\n```html\n<ids-calendar date=\"11/11/2021\"></ids-calendar>\n```\n\nWith `show-legend` setting. Calendar shows legend pane. By default, legend pane contains calendar event type checkboxes\nused to filter populated calendar events by event type.\n\n```html\n<ids-calendar\n  date=\"11/11/2021\"\n  show-legend=\"true\"\n></ids-calendar>\n```\n\nWith `show-details` setting. Calendar shows details pane. Detail pane shows detailed list of calendar event within the active date.\nDetail pane is only visible when month view is active.\n\n```html\n<ids-calendar\n  date=\"11/01/2021\"\n  show-details=\"true\"\n></ids-calendar>\n```\n\nThe component can be controlled dynamically\n\n```js\nconst calendar = document.querySelector('ids-calendar');\n\n// Changing date\ncalendar.date = 'Tue Nov 16 2021';\ncalendar.date = '11/17/2021';\n\n// Changing pane visibility\ncalendar.showLegend = false;\ncalendar.showDetails = true;\n\n// Setting calendar event data\ncalendar.eventsData = [...eventsData];\ncalendar.eventsData = [];\n\n// Setting calendar event types data\ncalendar.eventTypesData = [...eventTypesData];\ncalendar.eventTypesData = [];\n```\n"}},{"name":"ids-card-action","attributes":[],"description":{"kind":"markdown","value":"# Ids Card Component\n\n## Description\n\nA card is a UI design pattern that groups related information in a flexible-size container visually resembling a playing card. Cards are also known as widgets when used in a home page tile layout. The card's actions in the toolbar should depend on what is inside the card.\n\n## Use Cases\n\n- Cards are good for grouping information, for example in a homepage dashboard layout\n- Cards allow for flexible layout, and can be used in smaller and larger sizes.\n- Cards contain various forms of content and actions. Elements like input texts, images, charts, can be displayed inside a card.\n\n## Dos and Don'ts\n\n- Don't use a card on a popup like a modal or a contextual action panel. The popup itself should be able to stand alone.\n\n## Terminology\n\n- **Card**: UI design pattern that groups related information that resembles a card\n- **Widget**: Card and widget are sometimes used interchangeably.\n- **Group Action**: A special toolbar inside the card content area that can be used to act on the content.\n\n## Themeable Parts\n\n- `card` allows you to further style the main card element\n- `header` allows you to further style the card header element\n- `content` allows you to further style the card content element\n- `footer` allows you to further style the card footer element\n\n## Features (With Code Examples)\n\nA card is created by using the custom `ids-card` element. A card has two content slots, one for the header area which usually contains title and a small number of action buttons. The card content area can contain whatever content you like. This content should be responsive.\n\n```html\n<ids-card>\n  <div slot=\"card-header\">\n    <ids-text font-size=\"20\" type=\"h2\">Card Title One</ids-text>\n  </div>\n  <div slot=\"card-content\">\n  </div>\n</ids-card>\n```\n\nA card can be an actionable with the behavior of a button.\n\n```html\n<ids-card actionable=\"true\">\n  <div slot=\"actionable-text\">\n    <ids-text font-size=\"16\" type=\"p\">Actionable Button Card</ids-text>\n  </div>\n</ids-card>\n```\n\nA card with footer element.\n\n```html\n<ids-card>\n  <div slot=\"card-header\">\n    <ids-text font-size=\"20\" type=\"h2\">Card Title One</ids-text>\n  </div>\n  <div slot=\"card-content\">\n  </div>\n  <div slot=\"card-footer\">\n  </div>\n</ids-card>\n```\n\nA card with footer element and vertical no-padding.\n\n```html\n<ids-card>\n  <div slot=\"card-header\">\n    <ids-text font-size=\"20\" type=\"h2\">Card Title One</ids-text>\n  </div>\n  <div slot=\"card-content\">\n  </div>\n  <div slot=\"card-footer\" no-padding>\n  </div>\n</ids-card>\n```\n\n## Settings and Attributes\n\n- `autoHeight` {boolean} Makes the card the same height as its inner content\n- `actionable` {boolean} It will make the card act as a button\n- `height` {number} It will make the card have a fixed height (used primarily on actionable cards)\n\n## States and Variations (With Code Examples)\n\n- Group Action\n- Sizes\n- Hover\n- Disabled\n- Focus\n- Pressed/Active/Selected\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>: If the card has focusable elements, tab will toggle through them in the general form order. If the header contains a toolbar. Arrow keys should be used between buttons on the toolbars\n\n## Responsive Guidelines\n\n- Depending on the container in the responsive grid, the width of the card follows the layout of the grid. However, when using in a home page a special algorithm is used to both keep the tab order and fill in the gaps most efficiently depending on the card dimensions.\n\n## Accessibility Guidelines\n\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. Ensure the color tags that indicate state like OK, cancel, ect have other ways to indicate that information. This is failing.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and images of text has a contrast ratio of at least 4.5:1.   Ensure the color tags pass contrast.\n\n## Regional Considerations\n\nTitles should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Cards have all new markup and classes.\n\n**4.x to 5.x**\n- Markup has changed to a custom element `<ids-card></ids-card>` and has slots for the header and body content\n- Can now be imported as a single JS file and used with encapsulated styles.\n- The Card/Widget component has been changed to a web component and renamed to ids-card.\n- The expandable card feature is deprecated\n"}},{"name":"ids-card","attributes":[{"name":"autoFit","description":"Set the card to auto fit to its parent size","values":[]},{"name":"autoHeight","description":"Set the card to auto height","values":[]},{"name":"borderless","description":"Set the card to borderless","values":[]},{"name":"actionable","description":"Set the card to be actionable button.","values":[]},{"name":"overflow","description":"Set how the container overflows, can be hidden or auto (default)","values":[]},{"name":"href","description":"Set href for actionable link card","values":[]},{"name":"height","description":"Set a height and center the card","values":[]},{"name":"target","description":"Set target for an actionable link card","values":[]},{"name":"noHeader","description":"Set to true to hide the header space","values":[]}],"description":{"kind":"markdown","value":"# Ids Card Component\n\n## Description\n\nA card is a UI design pattern that groups related information in a flexible-size container visually resembling a playing card. Cards are also known as widgets when used in a home page tile layout. The card's actions in the toolbar should depend on what is inside the card.\n\n## Use Cases\n\n- Cards are good for grouping information, for example in a homepage dashboard layout\n- Cards allow for flexible layout, and can be used in smaller and larger sizes.\n- Cards contain various forms of content and actions. Elements like input texts, images, charts, can be displayed inside a card.\n\n## Dos and Don'ts\n\n- Don't use a card on a popup like a modal or a contextual action panel. The popup itself should be able to stand alone.\n\n## Terminology\n\n- **Card**: UI design pattern that groups related information that resembles a card\n- **Widget**: Card and widget are sometimes used interchangeably.\n- **Group Action**: A special toolbar inside the card content area that can be used to act on the content.\n\n## Themeable Parts\n\n- `card` allows you to further style the main card element\n- `header` allows you to further style the card header element\n- `content` allows you to further style the card content element\n- `footer` allows you to further style the card footer element\n\n## Features (With Code Examples)\n\nA card is created by using the custom `ids-card` element. A card has two content slots, one for the header area which usually contains title and a small number of action buttons. The card content area can contain whatever content you like. This content should be responsive.\n\n```html\n<ids-card>\n  <div slot=\"card-header\">\n    <ids-text font-size=\"20\" type=\"h2\">Card Title One</ids-text>\n  </div>\n  <div slot=\"card-content\">\n  </div>\n</ids-card>\n```\n\nA card can be an actionable with the behavior of a button.\n\n```html\n<ids-card actionable=\"true\">\n  <div slot=\"actionable-text\">\n    <ids-text font-size=\"16\" type=\"p\">Actionable Button Card</ids-text>\n  </div>\n</ids-card>\n```\n\nA card with footer element.\n\n```html\n<ids-card>\n  <div slot=\"card-header\">\n    <ids-text font-size=\"20\" type=\"h2\">Card Title One</ids-text>\n  </div>\n  <div slot=\"card-content\">\n  </div>\n  <div slot=\"card-footer\">\n  </div>\n</ids-card>\n```\n\nA card with footer element and vertical no-padding.\n\n```html\n<ids-card>\n  <div slot=\"card-header\">\n    <ids-text font-size=\"20\" type=\"h2\">Card Title One</ids-text>\n  </div>\n  <div slot=\"card-content\">\n  </div>\n  <div slot=\"card-footer\" no-padding>\n  </div>\n</ids-card>\n```\n\n## Settings and Attributes\n\n- `autoHeight` {boolean} Makes the card the same height as its inner content\n- `actionable` {boolean} It will make the card act as a button\n- `height` {number} It will make the card have a fixed height (used primarily on actionable cards)\n\n## States and Variations (With Code Examples)\n\n- Group Action\n- Sizes\n- Hover\n- Disabled\n- Focus\n- Pressed/Active/Selected\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>: If the card has focusable elements, tab will toggle through them in the general form order. If the header contains a toolbar. Arrow keys should be used between buttons on the toolbars\n\n## Responsive Guidelines\n\n- Depending on the container in the responsive grid, the width of the card follows the layout of the grid. However, when using in a home page a special algorithm is used to both keep the tab order and fill in the gaps most efficiently depending on the card dimensions.\n\n## Accessibility Guidelines\n\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. Ensure the color tags that indicate state like OK, cancel, ect have other ways to indicate that information. This is failing.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and images of text has a contrast ratio of at least 4.5:1.   Ensure the color tags pass contrast.\n\n## Regional Considerations\n\nTitles should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Cards have all new markup and classes.\n\n**4.x to 5.x**\n- Markup has changed to a custom element `<ids-card></ids-card>` and has slots for the header and body content\n- Can now be imported as a single JS file and used with encapsulated styles.\n- The Card/Widget component has been changed to a web component and renamed to ids-card.\n- The expandable card feature is deprecated\n"}},{"name":"ids-checkbox","attributes":[{"name":"labelAudible","values":[]},{"name":"isFormComponent","values":[]},{"name":"#triggeredChange","description":"Internal change event detection trigger.","values":[]},{"name":"input","values":[]},{"name":"labelEl","values":[]},{"name":"checked","description":"Sets the checked state to true or false","values":[]},{"name":"color","description":"Sets the checkbox color to one of the colors in our color palette for example emerald","values":[]},{"name":"disabled","description":"Sets input to disabled","values":[]},{"name":"horizontal","description":"Flips the checkbox orientation to horizontal","values":[]},{"name":"indeterminate","description":"Sets the checkbox to the indeterminate state","values":[]},{"name":"value","description":"Set the checkbox `value` attribute","values":[]},{"name":"noAnimation","description":"Disable the check animation","values":[]}],"description":{"kind":"markdown","value":"# Ids Checkbox Component\n\n## Description\n\nThe IDS Checkbox component is a simple wrapper around a standard HTMLInputElement that is styled with Infor branding, and contains some additional API that makes it easy to set checkbox, label, and functionality. Checkboxes can also be grouped with a label.\n\n## Use Cases\n\n- Checkboxes are particularly useful in allowing users to make choices on lists of selectable options. In contrast with radio buttons, which are included in lists where options are mutually exclusive, checkboxes allow users to toggle multiple responses to “on” and “off” states.\n- Create checkbox, each with different styling to provide context for actions that are checked, unchecked, indeterminate, value, disabled and colored.\n- Checkboxes allow users to make zero, one, or multiple selections in a list with multiple items.\n\n## Terminology\n\n**Checkbox**: A standard basic checkbox element. It can set to checked, unchecked, indeterminate and disabled. IDS checkbox will add `aria-required` for required elements.\n**Label**: HTMLLabelElement to keep matching with HTMLInputElement. Make sure the label has a meaningful relative. IDS Checkbox will add sudo ui `*` for required elements.\n\n## Themeable Parts\n\n- `label` allows you to further style the label element\n- `input` allows you to further style the checkbox input element\n- `label-text` allows you to further style the text element in the label\n\n## Features (With Code Samples)\n\nA standard Checkbox unchecked element:\n\n```html\n<ids-checkbox label=\"Unchecked\"></ids-checkbox>\n```\n\nSet as Checked, the checkbox.\n\n```html\n<ids-checkbox label=\"Checked\" checked=\"true\"></ids-checkbox>\n```\n\nSet the Dirty Tracking to Checkbox this way:\n\n```html\n<ids-checkbox label=\"Dirty tracking\" dirty-tracker=\"true\"></ids-checkbox>\n```\n\nSet the Hitbox to Checkbox this way:\n\n```html\n<ids-checkbox label=\"Checkbox with Hitbox\" hitbox=\"true\"></ids-checkbox>\n```\n\nAdd an Disabled Checkbox as unchecked:\n\n```html\n<ids-checkbox label=\"Disabled and unchecked\" disabled=\"true\"></ids-checkbox>\n```\n\nAdd an Disabled Checkbox as checked:\n\n```html\n<ids-checkbox label=\"Disabled and checked\" checked=\"true\" disabled=\"true\"></ids-checkbox>\n```\n\nSet validation `required` to Checkbox this way:\n\n```html\n<ids-checkbox label=\"Required\" validate=\"required\"></ids-checkbox>\n```\n\nSet validation `required` to Checkbox without label required indicator:\n\n```html\n<ids-checkbox label=\"Required (No indicator)\" label-required=\"false\" validate=\"required\"></ids-checkbox>\n```\n\nAdd an Colored checked:\n\n```html\n<ids-checkbox checked=\"true\" color=\"emerald\" label=\"Emerald\"></ids-checkbox>\n<ids-checkbox checked=\"true\" color=\"caution\" label=\"Caution\"></ids-checkbox>\n```\n\nSet as Indeterminate the checkbox. This `indeterminate` attribute will remove on every time checkbox `change` it's state `checked/unchecked`, so it must be added every time it need to set.\n\n```html\n<ids-checkbox label=\"Indeterminate\" indeterminate=\"true\"></ids-checkbox>\n```\n\nHide label and show only checkbox:\n\n```html\n<ids-checkbox label=\"UnChecked\" label-state=\"hidden\"></ids-checkbox>\n```\n\n## Settings (Attributes)\n\n- `checked` {boolean} set checked state.\n- `color` {string} set the color for checkbox.\n- `dirty-tracker` {boolean} set dirty tracker.\n- `disabled` {boolean} set disabled state.\n- `horizontal` {boolean} set checkbox layout inline as horizontal.\n- `indeterminate` {boolean} This set to neither checked nor unchecked.\n- `label` {string} set the label text.\n- `label-state` {string} sets the checkbox label state -- can be `hidden`, or omitted.\n- `label-required` {boolean} set validation `required` indicator, default is set to `true`.\n- `validate` {string} set the validation rule `required`.\n- `validation-events` {string} set the validation events, use `space` to add multiple default is set to `change`.\n- `value` {string} set the checkbox value.\n- `noAnimation` {boolean} disable the checkbox animation\n\n## Events\n\n- `change` The change event is fired when a checkbox element's value is committed by the user. Unlike the input event, the change event is not necessarily fired for each alteration to an element's value.\n- `input` The input event fires when the value of a checkbox element has been changed.\n\n## States\n\n- disabled\n- dirty\n- validation/error\n- focused\n- active\n- unchecked/checked/partially selected\n\n## Keyboard Guidelines\n\nThe IDS Checkbox doesn't contain any interactions beyond a standard HTMLInputElement:\n\n- <kbd>Tab</kbd> and <kbd>Shift Tab</kbd> moves focus into the edit field to/from the next focusable item in the tab order.\n- <kbd>Space</kbd> toggle the checked/unchecked state.\n\n## Responsive Guidelines\n\n- Default display set as `block`, but can change to `inline-block` by use of `horizontal` attribute as `true`.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Wrap the input in an element with the class field\n- Change class `inforCheckbox` to checkbox\n- Change class `inforCheckboxLabel` to checkbox-label\n\n**4.x to 5.x**\n- Markup has changed to a custom element `<ids-checkbox></ids-checkbox>`\n- Can now be imported as a single JS file and used with encapsulated styles.\n- If using events, events are now plain JS events (change/input ect)\n- Can now use the hitbox styles by adding the setting to the ids-checkbox component\n\nThe IDS Checkbox component is now a WebComponent. Instead of using classes to define, it is done directly:\n\n```html\n<!-- 4.x checkbox example -->\n<div class=\"field\">\n  <input type=\"checkbox\" class=\"checkbox\" name=\"checkbox1\" id=\"checkbox1\"/>\n  <label for=\"checkbox1\" class=\"checkbox-label\">Unchecked</label>\n</div>\n\n<!-- this is the same checkbox using the web component version -->\n<ids-checkbox label=\"Unchecked\"></ids-checkbox>\n```\n"}},{"name":"ids-checkbox-group","attributes":[{"name":"label","description":"Set the label of checkbox-group","values":[]}],"description":{"kind":"markdown","value":"# Ids Checkbox Group Component\n\n## Description\n\nThe IDS Checkbox Group Component consists of group of checkboxes with label. Its useful if you need to group a set of checkbox under a legend or category.\n\n## Features (With Code Examples)\n\nOnly has `label` property and `ids-checkbox` elements as a slot\n\n```html\n<ids-checkbox-group label=\"Checkbox Group\">\n  <ids-checkbox label=\"Option 1\" checked=\"false\"></ids-checkbox>\n  <ids-checkbox label=\"Option 2\" checked=\"true\"></ids-checkbox>\n  <ids-checkbox label=\"Option 3\" checked=\"true\"></ids-checkbox>\n</ids-checkbox-group>\n```\n\n## Settings and Attributes\n\n- `label` {string} Sets the label for the checkbox group\n"}},{"name":"ids-color","attributes":[{"name":"swatch","values":[]},{"name":"icon","values":[]},{"name":"popup","values":[]},{"name":"disabled","description":"Gets the disabled attribute","values":[]},{"name":"hex","values":[]},{"name":"label","values":[]},{"name":"showLabel","values":[]},{"name":"tooltip","values":[]},{"name":"size","values":[]},{"name":"clickable","values":[]},{"name":"color","values":[]}],"description":{"kind":"markdown","value":"# Ids Color\n\n## Description\n\nThe color consists of a custom element `<ids-color></ids-color>`. Once initialized, it functions to display a color setting using a hex attribute. The IDS color palette consists of two types of colors:\n\nStatus Colors: Specific colors within the color palette are associated with different statuses across products. We tend to use 5 different categories of statuses.\nNeutral Colors: Specific grey based colors of which there is 11 including white which all the components are comprised of.\nColorful Colors: Six more color sets based of ten colors that are used to communicate status, states, theming and charts.\n\n## Settings and Attributes\n\n- `hex` {string} Sets the hex attribute to display a colors hex value `hex=\"#b94e4e\"`\n- `size` {string} The color swatch's size between `(xs, sm, mm, md, lg, full)`\n- `color` {string} Sets the background color to a color css variable\n- `clickable` {boolean} If set to false the checkbox will not be added (checkbox is used in the color picker).\n- `label` {string} Sets a label under the color swatch\n\n## Code Examples\n\nA basic use case of the color picker with a hex color option.\n\n```html\n<ids-color hex=\"#b94e4e\"></ids-color>\n```\n\nA basic use case of the color picker to show a color palette item in larger size.\n\n```html\n<ids-color size=\"full\" color=\"--ids-color-ruby-10\" clickable=\"false\" label=\"--ids-color-ruby-10\"></ids-color>\n```\n## Theme Variables\n\nFor a list of css variables added at the `:root` you can used [see the theme information](rc/themes/default/).\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>\n- <kbd>Enter</kbd>\n"}},{"name":"ids-color-picker","attributes":[{"name":"colorInput","values":[]},{"name":"colorPreview","values":[]},{"name":"triggerBtn","values":[]},{"name":"textInput","values":[]},{"name":"isFormComponent","values":[]},{"name":"useDefaultSwatches","values":[]},{"name":"initialized","values":[]},{"name":"colorPreviewHtml","description":"HTML for Color Picker Previw Swatch","values":[]},{"name":"popup","values":[]},{"name":"colorPickerAdvancedHtml","description":"HTML for Advanced Color Picker Popup","values":[]},{"name":"swatches","description":"Available color swatches within this color-picker","values":[]},{"name":"defaultSwatches","description":"Default color swatches for this color-picker if no children provided","values":[]},{"name":"value","description":"Gets the value attribute","values":[]},{"name":"placeholder","values":[]},{"name":"size","values":[]},{"name":"validate","values":[]},{"name":"tabbable","values":[]},{"name":"tooltip","values":[]},{"name":"advanced","description":"Gets the advanced attribute","values":[]},{"name":"disabled","description":"Gets the disabled attribute","values":[]},{"name":"readonly","description":"Gets the readonly attribute","values":[]},{"name":"suppressLabels","description":"Gets the labels attribute","values":[]},{"name":"suppressTooltips","description":"Gets the tooltips attribute","values":[]},{"name":"compact","values":[]}],"description":{"kind":"markdown","value":"# Ids Color Picker\n\n## Description\n\nThe color picker consists of a custom element `<ids-color-picker></ids-color-picker>`. Once initialized, it functions similarly to a dropdown except that the list shows a color palette in the popup. After selecting a color selection, the hex code and swatch will be updated with the new value.\n\n## Behavior Guidelines\n\nThe Color Picker by default supports colors within a pre-configured palette of IDS colors. You can optionally add your own list of colors by nesting a `<ids-color></ids-color>` custom element inside `<ids-color-picker></ids-color-picker>`.\n\n## Settings and Attributes\n- `value` {string} Sets the value attribute to displayed the color of selected `value=\"#b94e4e\"`\n- `label` {string} Sets the label attribute which will be displayed above the color picker web component `label=\"Color Picker\"`\n- `clearable` {boolean} Sets the clearable attribute which will add the empty color swatch to the list of colors `clearable=\"true\"` Valid values are 'true' | 'false'\n- `disabled` {boolean} Sets the disabled attribute which will disabled the entire color picker web component `disabled=\"true\"` Valid values are 'true' | 'false'\n- `readonly` {boolean} Sets the readonly attribute. Valid values are 'true' | 'false'\n- `suppress-labels` {boolean} If true, the color-swatches will display hex-values instead of labels. Valid values are 'true' | 'false'\n- `suppress-tooltips` {boolean} If true, the color-swatches will not display tooltips on mouseover. Valid values are 'true' | 'false'\n- `validate` {string} set the validation rule `required`.\n- `advanced` {boolean} If set, the component will provide a browser's visual color picker interface, the input will be masked allowing only `#rrggbb` hexadecimal format.\n\n## Code Examples\n\nA basic use case of the color picker with a few color options.\n```html\n<ids-color-picker></ids-color-picker>\n```\n\nThe basic color-picker with labels and tooltips disabled\n```html\n<ids-color-picker suppress-labels suppress-tooltips></ids-color-picker>\n```\n\nA basic use case of the color picker with custom color options.\n```html\n<ids-color-picker>\n  <ids-color hex=\"#b94e4e\"></ids-color>\n  <ids-color hex=\"#000000\"></ids-color>\n  <ids-color hex=\"#ffffff\"></ids-color>\n  <ids-color hex=\"#333333\"></ids-color>\n  <ids-color hex=\"#f5f5f5\"></ids-color>\n  <ids-color hex=\"#cccccc\"></ids-color>\n</ids-color-picker>\n```\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Adjust the markup to use fields and inputs and labels\n```html\n<div class=\"field\">\n  <label for=\"background-color\">Background Color</label>\n  <input class=\"colorpicker\" value=\"#ffa800\" id=\"background-color\" type=\"text\" />\n</div>\n```\n\n**3.x to 5.x**\n- Markup has changed to a custom element `<ids-checkbox></ids-checkbox>`\n- Can now be imported as a single JS file and used with encapsulated styles.\n- If using events, events are now plain JS events (change/input ect)\n\nThe IDS Color Picker component is now a WebComponent. The custom colors are the slot items.\n\n```html\n<ids-color-picker id=\"color-picker-1\" disabled=\"false\" label=\"Ids Color Picker\">\n  <ids-color hex=\"#1A1A1A\"></ids-color>\n  <ids-color hex=\"#292929\"></ids-color>\n  <ids-color hex=\"#383838\"></ids-color>\n  <ids-color hex=\"#454545\"></ids-color>\n  <ids-color hex=\"#5C5C5C\"></ids-color>\n  <ids-color hex=\"#737373\"></ids-color>\n  <ids-color hex=\"#999999\"></ids-color>\n  <ids-color hex=\"#BDBDBD\"></ids-color>\n</ids-color-picker>\n```\n\n## Keyboard Guidelines\n\n- <kbd>Tab / Shift+Tab</kbd>: To navigate color swatches\n- <kbd>ArrowDown / ArrowLeft / ArrowRight / ArrowUp</kbd>: To navigate color swatches\n- <kbd>Enter / Space</kbd>: To select currently focuses color-swatch\n"}},{"name":"ids-container","attributes":[{"name":"colorVariants","description":"Inherited from `IdsColorVariantMixin`","values":[]},{"name":"padding","description":"If set to number the container will have padding added (in pixels)","values":[]},{"name":"scrollable","description":"If set to true the container is scrollable","values":[]},{"name":"reset","description":"If set to true body element will get reset","values":[]}],"description":{"kind":"markdown","value":"# Ids Container Component\n\n## Description\n\nWe created a root container component. This is used currently for theming the page and reseting the browser styles. In addition the container is the parent element for the locale and language, all components that are in it will use this locale/language.\n\n## Use Cases\n\n- When you need to use components that will not overflow the page boundary\n- When you need a root container for IDS components\n- When you need to style the page background\n- When you need a locale and language\n\n## Terminology\n\n- **Page Container**: The older term for ids-container\n\n## Features (With Code Examples)\n\nA normal container used as a web component.\n\n```html\n<ids-container scrollable=\"true\">\n  <!-- ids components -->\n</ids-container>\n```\n\nA normal container with a set padding.\n```html\n<ids-container scrollable=\"true\" padding=\"8\">\n  <!-- ids components -->\n</ids-container>\n```\n\n## Settings and Attributes\n\n- `scrollable` {boolean} Turns on the overflow to allow for scroll\n- `padding` {number} Sets the padding in px around the container (defaults to 0 / none)\n- `color-variant` {string} can be set to \"alternate\" to display contrasting color for text/icons via the [IdsColorVariantMixin](../../src/mixins/ids-color-variant/README.md)\n\n## States and Variations (With Code Examples)\n\n- Color\n- Scrollable\n- Padding\n\n## Keyboard Guidelines\n\n- <kbd>Down Arrow/Up Arrow</kbd>: Scrolls the container\n\n## Responsive Guidelines\n\n- This component will be 100% width and height in the page / parent\n\n## Converting from Previous Versions\n\n- 3.x: Did not exist\n- 4.x: Replaces a div with the page-container class\n"}},{"name":"ids-counts","attributes":[{"name":"color","description":"Set the color of the counts","values":[]},{"name":"compact","description":"Set the compact attribute","values":[]},{"name":"href","description":"Set the href attribute","values":[]}],"description":{"kind":"markdown","value":"# Ids Counts Component\n\n## Description\n\nCounts are distinctive elements used to highlight high level numbers or metrics.\n\n## Use Cases\n\n- Use counts in dashboards and visualizations for summarizing key numeric takeaways.\n- Use counts as a concise numeric data point that can link to underlying detail elsewhere on the page or site.\n\n## Terminology\n\n- **Counts**: UI embellishments for summarizing high level numeric information.\n- **Value**: The numeric value displayed on the count component.\n- **Text**:  The name or brief description of the value.\n- **Compact**: When compact, the count value appears slightly smaller than usual.\n\n## Features (With Code Examples)\n\nA card is created using the custom `ids-counts` element. A user can place elements inside of the component to represent text. It is recommended to use ids-text components as ids-counts has functionality to manage that input specifically.\n\nA normal Counts component\n\n```html\n<ids-counts href=\"#\">\n  <ids-text count-value>7</ids-text>\n  <ids-text count-text>Active <br /> Opportunities</ids-text>\n</ids-counts>\n```\n\nThe same component could be made \"Not Actionable\" by removing the href attribute\n\n```html\n<ids-counts>\n  <ids-text count-value>7</ids-text>\n  <ids-text count-text>Active <br /> Opportunities</ids-text>\n</ids-counts>\n```\n\nSetting the optional \"Compact\" attribute to \"true\" decreases the font size of the value\n\n```html\n<ids-counts compact=\"true\" href=\"#\">\n  <ids-text count-value>7</ids-text>\n  <ids-text count-text>Active <br /> Opportunities</ids-text>\n</ids-counts>\n```\n\nThe counts component also supports an optional \"Color\" attribute. The options for color are base (blue), caution, error, success, warning, or a hex code with the \"#\"\n\n```html\n<ids-counts href=\"#\" color=\"base\">\n  <ids-text count-value>7</ids-text>\n  <ids-text count-text>Active <br /> Opportunities</ids-text>\n</ids-counts>\n```\n\nCounts using just the css. Use the anchor tag for normal counts and span for non-actionable.\n\n```html\n<a class=\"ids-counts\" color=\"base\" href=\"#\">\n  <div class=\"text\">7</div>\n  <div class=\"value\">Active<br>Opportunities</div>\n</a>\n<span class=\"ids-counts\" color=\"base\">\n  <div class=\"text\">7</div>\n  <div class=\"value\">Active<br>Opportunities</div>\n</span>\n```\n\n## Settings and Attributes\n\n- `color` {string} Sets the color to an internal color such as `azure`. Can also a hexadecimal color code beginning with `#`.\n- `compact` {string} Use \"true\" to set the value font-size to 40. Omitting this attribute or using any will result in the default value of 48.\n- `href` {string} The url that the count component links to.\n\n## States and Variations (With Code Examples)\n\n- Actionable\n- Color\n- Compact\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>: If the count is actionable (default) this will toggle through them in the general form order. Non-actionable counts do not get selected.\n- <kbd>Enter</kbd>: This will follow the tag link.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Counts have all new markup and classes.\n\n**4.x to 5.x**\n- The counts component has been changed to a web component and renamed to ids-counts.\n- Text is now contained in an ids-text element `<ids-text></ids-text>`\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Accessibility Guidelines\n\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. Ensure the color tags that indicate state like OK, cancel, ect have other ways to indicate that information. This is failing.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and images of text has a contrast ratio of at least 4.5:1.   Ensure the color tags pass contrast.\n\n## Regional Considerations\n\nText should be localized in the current language. Consider that in some languages text may be longer (German) and in some cases it can't be wrapped (Thai).\n"}},{"name":"ids-data-grid-cell","attributes":[{"name":"rootNode","values":[]},{"name":"isInValid","values":[]},{"name":"dataGrid","description":"Reference to the data grid parent","values":[]},{"name":"column","description":"Get the column definition","values":[]},{"name":"row","description":"Get row of table cell","values":[]},{"name":"originalValue","description":"Previous Value before Editing","values":[]},{"name":"previousInvalidState","description":"Previous Invalid state before reseting","values":[]},{"name":"editor","description":"The editor element","values":[]},{"name":"isEditing","description":"If currently in edit mode","values":[]},{"name":"cellCache","values":[]}],"description":{"kind":"markdown","value":"# Ids Data Grid\n\n## Description\n\nThe data grid component (ids-data-grid) is used to arrange tabular data in rows and columns for easier scanning and comparison. Data grids are very configurable in both design and functionality and they can be found within almost every product/app.\n\nYou should pass an array of objects in to the grid on the `dataset` object. Also pass the `columns` array which contains the column configuration. There are a number of events described in the events and API section, as well as the column settings.\n\nA Read-Only data grid uses \"Formatters\" to render cell content. A number of these are listed in the API section and it is possible to create your own.\n\n## Use Cases\n\n- The data grid component is most useful when it is used for categorically sorting dense and repetitive information. Each individual item is listed down the Y axis of the chart, and their shared attribute categories are listed along the X axis. The resulting cells are filled with information that is relevant to the corresponding item and attribute.\n\n## Terminology\n\n- **Title**: The name of the data grid optionally appearing above the grid and describing the contents.\n- **Options**: An optionally actions menu button with functionality that operates on the entire data grid.\n- **Cell**: Body elements of the data grid that contain an object's value or attribute. Cells should only contain one type of content or it can be confusing and hurt accessibility.\n- **Header Cell**: These cells contain the names of the columns in the grid and related functions like filtering and sorting. All cells below the header cell will hold values related to the attribute in the header cell.\n- **Column**: Cells stacked vertically that contain values relate to the attribute found on the top header cell.\n- **Row**: Each row contains one cell per column in the data grid, and each cell displays a single value in the bound data item.\n- **Tree**: Denotes the use of hierarchical data, with an expandable and collapsible hierarchy.\n\n## Themeable Parts\n\n- `table` allows you to further style the table main element\n- `container` allows you to further style the container element\n- `body` allows you to further style the body element\n- `header` allows you to further style the header element\n- `headerCell` allows you to further style the header cells\n- `row` allows you to further style the rows\n- `cell` allows you to further style the row cells\n- `cell-selected` allows you to further style row cells that are selected (in mixed-selection mode, activated cells are also styled)\n- `tooltip-popup` allows you to further style or adjust the outer tooltip popup element\n- `tooltip-arrow` allows you to adjust the tooltip arrow element\n\n## Features (With Code Examples)\n\nA data grid is created by adding an `ids-data-grid` html element in the page and setting the options either inline in the markup or in the JS part of the code. You can only use simple types (string, boolean ect) for inline markup so passing the data and column arrangement is always done in the JS part. The data will be an array of objects so its in the correct tabular form. The columns are also an array of objects but with defined options and types. See more about columns in next section.\n\n```html\n<ids-data-grid id=\"data-grid-1\"></ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-1');\ndataGrid.data = dataset;\ndataGrid.columns = columns;\n```\n\n### Column Groups\n\nSetting column groups allows you to add a second level of columns in your header and the ability to group the first level. This is useful for when you have a large number of columns and you want to group them into logical or related sections.\n\nColumn groups are achieved by providing an array to the `columnGroups` setting. Only one level of column groups can be defined.\n\n```js\ndataGrid.columnGroups = [\n{\n  colspan: 3,\n  id: 'group1',\n  name: 'Column Group One',\n  align: 'center'\n},\n{\n  colspan: 2,\n  id: 'group2',\n  name: 'Column Group Two'\n},\n{\n  colspan: 2,\n  id: 'group3',\n  name: 'Column Group Three',\n  align: 'right'\n},\n{\n  colspan: 11,\n  id: 'group4',\n  name: 'Column Group Four',\n  align: 'left'\n}\n];\n```\n\nIf the column is hidden it will be automatically removed from the `colspan`. If in the last group you didn't provided a bug enough `colspan` it will be set to the remaining columns. The `name` text can be right or left aligned and given an id. The only required property is `colspan`.\n\n### Selection\n\nThe data grid selection feature involves the setting `rowSelection`. This can be one of several values.\n\n- `false` No selection enabled.\n- `multiple` Allows multiple rows to be selected. When doing this it is recommended to add a `formatters.selectionCheckbox` for the first column.\n- `single` Allows a single row to be selected. When doing this you can optionally to add a `formatters.selectionRadio` for the first column. You can use the `suppressRowDeselection` if you want one row to always be selected.\n- `mixed` Allows multiple rows to be selected by clicking only on the checkbox or <kbd>Space</kbd> key. If clicking a row then that row is activated, meaning it is the current row and something might be shown based on the data of that row. You can use the `suppressRowDeactivation` if you want one row to always be selected.\n\nHere is a code example for multi select\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" row-selection=\"multiple\">\n</ids-data-grid>\n```\n\n```js\n  dataGrid.addEventListener('rowselected', (e) => {\n    console.info(`Row Selected`, e.detail);\n  });\n\n  dataGrid.addEventListener('rowdeselected', (e) => {\n    console.info(`Row Deselected`, e.detail);\n  });\n\n  dataGrid.addEventListener('selectionchanged', (e) => {\n    console.info(`Selection Changed`, e.detail);\n  });\n```\n\nThe following events are relevant to selection/activation.\n\n`rowselected` Fires when an individual row is activation and gives information about that row.\n`rowdeselected` Fires when an individual row is deselected and gives information about that row.\n`selectionchanged` Fires once for each time selection changes and gives information about all selected rows.\n\n`rowactivated` Fires when an individual row is activated and gives information about that row.\n`rowdeactivated` Fires when an individual row is deactivated and gives information about that row.\n`activationchanged` Fires once for each time activation changes and gives information about the active row.\n\n### Tree Grid\n\nThe tree grid feature involves the setting `treeGrid` to true. In addition the data passed to the tree grid should contain a field called `children`. That contains the child rows. This can by unlimited levels but 2-4 is recommended as a max for a more usable UI. In addition you can preset some states by adding `rowExpanded: false` to the parent elements (default is expanded). And also set `rowHidden: false` for child rows that are expanded. You also need a `Expander` formatter on a cell (usually the first visible cell.\n\nHere is a code example for a tree grid.\n\n```html\n<ids-data-grid id=\"tree-grid\" label=\"Buildings\" tree-grid=\"true\" group-selects-children=\"true\"></ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to selection/activation.\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `groupSelectsChildren` {boolean} If the tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `suppressRowClickSelection` {boolean} If using selection you might want to set this so clicking a row will not select it.\n### Expandable Row\n\nThe Expandable Row feature involves the setting `expandableRow` to true. In addition a row template should be provided via an id that points to the `expandableRowTemplate` which is a `template` element. You can preset the expandable state by adding `rowExpanded: true` to the row element you want to expand. The default is collapsed.\n\nHere is a code example for an expandable row\n\n```html\n<ids-data-grid\n    id=\"data-grid-expandable-row\"\n    expandable-row=\"true\"\n    expandable-row-template=\"expandable-row-tmpl\"\n    label=\"Books\">\n    <template id=\"expandable-row-tmpl\">\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"16\" type=\"span\">${convention}</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">${price} USD</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">Lorem Ipsum is simply sample text of the printing and typesetting industry. Lorem Ipsum has been the industry standard sample text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only...</ids-text>\n        </ids-layout-grid>\n    </template>\n</ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to expandable rows\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRowTemplate` {string} Should point to the row `template` element.\n\n### Editing\n\nThe Editing features start by setting `editable` to true. In addition you should add editors to columns and enable features of each of the editors. The features differ depending on the component used for editing. See the Keyboard section for information on which keys can be used when editing..\n\nHere is a code example for an editable text cell.\n\n```js\ncolumns.push({\n    id: 'description',\n    name: 'Description',\n    field: 'description',\n    sortable: true,\n    resizable: true,\n    reorderable: true,\n    formatter: dataGrid.formatters.text,\n    editor: {\n      type: 'input',\n      inline: true,\n      editorSettings: {\n        autoselect: true,\n        dirtyTracker: true\n      }\n    }\n  });\n```\n\nHere is a code example for an editable dropdown cell\n\n```js\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  resizable: true,\n  reorderable: true,\n  formatter: dataGrid.formatters.dropdown,\n  editor: {\n    type: 'dropdown',\n    editorSettings: {\n      dirtyTracker: true,\n      validate: 'required',\n      options: [\n        {\n          label: 'Option 1',\n          value: 'opt1'\n        },\n        {\n          label: 'Option 2',\n          value: 'opt2'\n        }\n      ]\n    }\n  }\n});\n```\n\nTo cancel or disabled editing there are a few ways:\n\n- setting the column `editor` setting to undefined will disable editing on the column (as will not having an editor setting at all).\n- adding a `readonly` or `disabled` function which returned true for some cells based on a condition will disable or mark the cell readonly.\n- return false in the `beforecelledit` event in the response function\n\nThe following settings are available on editors.\n\n`type` As of now can be `checkbox`, `input`, `datepicker`, `timepicker`, or `dropdown` but more will be added.\n`inline` Default is false. If true the editor (for example an input) will be visible in a field.\n`editorSettings` Is an object that is loosely typed that lets you pass any option the editor supports in. For example any of the IdsInput or IdsCheckbox options can be passing in. Some special ones are:\n`editorSettings.autoselect` Text will be selected when entering edit mode\n`editorSettings.dirtyTracker` Enables the dirty tracker that marks changed cells.\n`editorSettings.validate` Text will be selected when entering edit mode\n`editorSettings.mask` Will pass mask settings to the input (if supported).\n`editorSettings.maskOptions` Will pass maskOptions settings to the input (if supported).\n`editorSettings.options` Dataset used for dropdown editor's list box options.\n\nWhen the use clicks in the cell or activates editing with the keyboard with the Enter key and types. The following events will fire.\n\n`beforecelledit` Fires before a cell is being edit (before edit is started). Can be vetoed by returning false as shown below.\n`celledit` Fires exactly when a cell is being edited.\n`endcelledit` Fires when a cell edit is completed and changed.\n`cancelcelledit` Fires when an edit is cancelled via the <kbd>Esc</kbd> key.\n\nTo cancel editing based on some condition or if editing is not allowed you can veto the `beforecelledit` event.\n\n```js\n  dataGrid.addEventListener('beforecelledit', (e: Event) => {\n    (<CustomEvent>e).detail.response(false);\n  });\n```\n\nThere are a few utility functions for editing the data grid mentioned in the Methods section.\n\n## Settings and Attributes\n\nWhen used as an attribute in the DOM the settings are kebab case, when used in JS they are camel case.\n\n- `virtualScroll` {boolean} When virtual scroll is used the grid can render many thousands of rows and only the rows visible in the scroll area are rendered for performance. This setting has limitations such as the rows need to be fixed size.\n- `addNewAtEnd` {boolean} Automatically append rows while keyboard navigating data grid in edit mode.\n- `alternateRowShading` {boolean} For better scan-ability you can shade alternate rows.\n- `listStyle` {boolean} Sets the style of the grid to list style for simple readonly lists.\n- `columns` {Array<object>} Sets the columns array of the data grid. See column settings.\n- `columnGroups` {Array<object>} Allows you to group columns together in logical sets. See section below for details.\n- `rowHeight` {string | `'xxs'` | `'xs'` | `'sm'` | `'md'` | `'lg'`} Sets the height and padding of each row. In smaller row heights the font is lowered.\n- `data` {Array<object>} Sets the data to show in the data grid. This can be a JSON Array.\n- `disableClientFilter` {boolean} Disables the filter logic client side in situations you want to filter server side.\n- `filterable` {boolean} Turns on or off the filter functionality.\n- `filterRowDisabled` {boolean} Disables the filter row.\n- `headerMenuData` {Array<object>} Dataset to build context menu for header and header group cells.\n- `headerMenuId` {string} ID of the popupmenu to use as context menu for header and header group cells.\n- `menuData` {Array<object>} Dataset to build context menu for body cells.\n- `menuId` {string} ID of the popupmenu to use as context menu for body cells.\n- `rowNavigation` {boolean} If using row navigation, the row will be focused when navigating the data grid via clicks and keyboard events.\n- `rowSelection` {string|boolean} Set the row selection mode between false, 'single', 'multiple' and 'mixed\n- `suppressRowClickSelection` {boolean} If using selection setting this will require clicking a checkbox or radio to select the row. Clicking other cells will not select the row.\n- `suppressRowDeactivation` {boolean} Set to true to prevent rows from being deactivated if clicked. i.e. once a row is activated, it remains activated until another row is activated in its place.\n- `suppressRowDeselection`  {boolean} Set to true to prevent rows from being deselected if click or space bar the row. i.e. once a row is selected, it remains selected until another row is selected in its place.\n- `suppressTooltips`  {boolean} Set to true to prevent display tooltips.\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRow` {boolean} Indicates expandable rows will be used in the data grid.  See the expandable row section for more details.\n- `expandableRowTemplate` {string} Should point to the row `template` element for expandable rows.\n- `treeGrid` {boolean} Indicates a tree grid will be used  in the data grid. See the tree grid section for more details.\n- `showHeaderExpander` {boolean} Set to show header expander icon for expandable and tree rows.\n- `groupSelectsChildren` {boolean} If a tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `saveActivePage` {boolean} If set the active page on the pager will be saved to local storage.\n- `saveColumns` {boolean} If set columns will be saved to local storage.\n- `saveFilter` {boolean} If set filter will be saved to local storage.\n- `savePageSize` {boolean} If set the page size on the pager will be saved to local storage.\n- `saveRowHeight` {boolean} If set the row height will be saved to local storage.\n- `saveSortOrder` {boolean} If set column sort order will be saved to local storage.\n- `saveUserSettings` {boolean} If set all settings will be saved to local storage.\n- `emptyMessageDescription` {string} Set empty message description text.\n- `emptyMessageIcon` {string} Set empty message icon name.\n- `emptyMessageLabel` {string} Set empty message label text.\n- `suppressEmptyMessage` {boolean} Set to true to prevent display empty message.\n- `editable` {boolean} If true in addition to adding editors to columns the data grid is editable.\n- `editNextOnEnterPress` {boolean} If enabled when editing using <kbd>ENTER</kbd> will finish editing and start editing the same cell in next row and <kbd>SHIFT + ENTER</kbd> will edit the previous row.\n\n## Column Settings (General)\n\n|Setting|Type|Description|\n|---|---|---|\n|`id` | {string} | The unique id of the column. Each column in the grid should have some unique id.|\n|`name` | {string} | The text to show on the header.|\n|`field` | {string} | The name of the field (column) in the data array attached to the grid for example `description`. This can also be nested in an object for example `children.name`. |\n|`sortable` | {boolean} | If false, the column cannot be sorted. When completed a `sorted` event will fire.|\n|`resizable` | {boolean} | If false the column will not be resizable, thus is a fixed size and can never be changed by the user by dragging the left and right edge.  When completed a `columnresized` event will fire. See the `columns-resizable` example for a working example. |\n|`reorderable` | {boolean} | If true the column can be dragged into another position with adjacent columns. When completed a `columnmoved` event will fire. See the `columns-reorderable` example for a working example. This currently does not work with grouped columns. |\n|`readonly` | {boolean or Function} | If true the cell will be set to readonly color, indicating no editing.|\n|`disabled` | {boolean or Function} | If true the cell will be set to disabled color, indicating no editing.|\n|`formatter`| {Function} | Controls how the data is rendered in the cell.|\n|`hidden` | {boolean} | Excludes the column from being added to the DOM.|\n|`align` | {string} | Can be `left` or `right` or `center` to align both the cell and the header. Left is the default so does not need to be specified. |\n|`headerAlign` | {string} | Can be `left` or `right` or `center` to align just the header. Left is the default so does not need to be specified. |\n|`minWidth` | {number} | The minimum width used to prevent resizing a column below this size. |\n|`maxWidth` | {number} | The maximum width used to prevent resizing a column above this size. |\n|`cssPart` | {string} | Allows you to set the name of a css part that can be used to customize the cell's css. This can be a string or a function. See the columns-custom-css example. The default cssPart for cells is called `cell` and it also can be used for more global changes.  |\n|`frozen` | {string} | Sets the column to be frozen on either left or right side by passing `left` or `right`. See the `columns-frozen` example for a working example. Frozen columns currently have some limitations to be addressed in the future. |<!--lint disable maximum-line-length definition-case-->\n|`width` | {number or string} | The column width, this can be an integer for fixed pixel width or a percent for example `10%`, if left off the columns will be sized to contents and to fit the width of the grid using the css table browsers handling (this is known as `auto` columns). I.E. There are three column configurations: `auto`, `fixed` and `percent`. <br /><br />In addition one can specify any css grid column setting like `fr` or `ch`. In order to make what was called a `stretchColumn` in previous versions you can set the width to`minmax(130px, 4fr)`. This is some minimum width and a `fr` unit equal to the remaining number of columns (see example columns-stretch.html). For a spacer column you just need to specify one extra column at the end (see example columns-fixed.html) but this is not recommended for how it looks. |<!--lint enable maximum-line-length definition-case-->\n|`headerIcon` | {string} | Allows you to set the name of the header icon. |\n|`tooltipOptions` | {Object or Function} | Allows you to set the tooltip options. See the tooltip example. |\n|`tooltip` | {string or Function} | Let you set the tooltip content. |\n|`headerTooltip` | {string} | Let you set the header title tooltip content. |\n|`headerIconTooltip` | {string} | Let you set the header icon tooltip content. |\n|`filterButtonTooltip` | {string} | Let you set the header filter button tooltip content. |\n|`tooltipCssPart` | {string or Function} | Allows you to set the name of a tooltip css part that can be used to customize the tooltip css. This can be a string or a function. See the columns-custom-css example.\n|`headerTooltipCssPart` | {string} | Allows you to sets the header tooltip css part.\n|`headerIconTooltipCssPart` | {string} | Allows you to sets the header icon tooltip css part.\n|`filterButtonTooltipCssPart` | {string} | Allows you to sets the filter button tooltip css part.\n|`cellSelectedCssPart` | {string} | Allows customization of a selected cell's background color.\n|`editor` | {object} | Adds an editor to the column if editable is set on the grid. See editing section for more details.\n\n## Column Settings (Specific)\n\n|Setting|Type|Description|\n|---|---|---|\n|`href` | {string|Function} | Used to create the href for hyperlink formatters. This can be a string or a function that can work dynamically. It can also replace `{{value}}` with the current value. |\n|`text` | {string} | Used to create the txt value for hyperlink formatters if a hard coded link text is needed. |\n|`disabled` | {boolean|Function} | Sets the cell contents to disabled, can also use a callback to determine this dynamically. Only checkboxes, radios, buttons and link columns can be disabled at this time. Selection columns require disabled rows in order to not be clickable/selectable. |\n|`uppercase` | {boolean} | Allows you to set the text as uppercase. |\n\n## Formatters\n\n|Formatter|Description|\n|---|---|\n|`text` | (Default) Formats the column value as a direct text element using toString in the grid cell. Undefined or Null values will be shown as empty.|\n|`password` | Formats the column value masking the string length with stars. Undefined or Null values will be shown as empty. This is good for private data. |\n|`rowNumber` | Formats the cell with a row number column that is shown 1 to n no matter what the sort order is. |\n|`date` | Formats date data as a date string in the desired format, by default it will use `dateStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`time` | Formats date data as a time string in the desired format, by default it will use `timeStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`decimal` | Formats number data as a decimal string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`integer` | Formats number data as a integer string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`selectionCheckbox` | Displays a checkbox column for selection when using `rowSelection=\"mixed\"` or `rowSelection=\"multiple\"`|\n|`selectionRadio` | Displays a checkbox column for selection when using `rowSelection=\"single\"` |\n| `button` | Displays an `ids-button`. Other column settings like `type` can be used to set the button type as can `icon` by set for icon only buttons. Use the `click` setting/function to get an callback handler. |\n| `hyperlink` | Displays an `ids-hyperlink`. Other column settings like `href` can be used to set the link href and `text` can be used to set the text to specific text. Use the `click` setting/function to get an callback handler. |\n| `checkbox` | Displays an `ids-checkbox`. The value will be checked depending on if the attached field is true or `\"true\"`. |\n| `badge` | Displays an `ids-badge`. The associated field will be placed in the badge. The `color` option can also be set to set the ids-badge color setting. |\n| `alert` | Displays `ids-alert` element, and the field value will appear in a tooltip. An `icon` option can be provided as an override.|\n| `color` | Displays `ids-color` element. If a `color` option is provided as an override, the field's value will appear in a tooltip. |\n| `icon` | Displays the field value as an `ids-icon`. An `icon` option can be provided as an override, and the field value will appear beside this `icon` override. A `size` option can also be provided. |\n| `favorite` | Displays the field value as a `star-filled` if true or `star-outlined` if false. A `size` option can be provided as an override. |\n| `tag` | Displays the field value as an `ids-tag`. A `color` option can be provided as an override. |\n| `progress` | Displays the field value as an `ids-progress`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `rating` | Displays the field value as an `ids-rating`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `slider` | Displays the field value as an `ids-slider`. A `text` option can be provided to customize the label. A `color`, `max`, `min` and `type` option can be provided as overrides. |\n| `stepChart` | Displays the field value as an `ids-step-chart`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `image` | Displays the field value as an `ids-image`. A `text` option can be provided to the `alt` and `title` attributes. |\n\n### Deprecated Formatters (Deprecated from 4.x)\n\n- `Input` No longer suggested to use, use simple list instead or a Text Formatter.\n- `Status, Color` No longer used, but badges can be used.\n- `Placeholder` Can now be set on the column and used with other formatters\n- `Ellipsis` Is now always enabled.\n- `Readonly` Can now be set on the column and used with other formatters\n- `Drilldown` Use button formatter with an icon.\n- `Template` is now deprecated for performance reasons, use a custom formatter now.\n- `ClassRange` Use column cssClass function or string\n- `Autocomplete, Lookup, TargetedAchievement, ProcessIndicator, Spinbox, Fileupload, Dropdown, Colorpicker, Tree, SummaryRow, GroupFooterRow, GroupRow, Expander, Editor, Textarea, Actions, RowReorder` May be added later\n\n## Custom Formatters\n\nIt is possible to create your own custom formatter. The idea behind the formatter is it takes the cell value and does processing on it to return the correct markup for the cell. The simplest custom formatter would be this example.\n\n```js\ncolumns.push({\n  id: 'custom',\n  name: 'Custom',\n  field: 'price',\n  formatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n    const value = `Custom: ${rowData[columnData.field] || '0'}`;\n    return `<span class=\"text-ellipsis\">${value}</span>`;\n  }\n});\n```\n\nTo style a custom formatter you may need to add a css part for the element. For example:\n\n```js\nformatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n  const value = `${rowData[columnData.field] || ''}`;\n  return `<a part=\"custom-link\" href=\"#\" class=\"text-ellipsis\">${escapeHTML(value)}</a>`;\n},\n```\n\nThen in the style sheet you add for you page you put the styles.\n\n```css\nids-data-grid::part(custom-link) {\n  color: #da1217;\n}\n\nids-data-grid::part(custom-link):hover {\n  color: #6c080b;\n}\n```\n\nThe formatter is then linked via the column on the formatter setting. When the grid cell is rendered the formatter function is called and the following arguments are passed in.\n\n- `rowData` The current row's data from the data array.\n- `columnData` The column object with all of the column configuration for this cell.\n\n## Events\n\n- `activecellchanged` Fires when the active cell changes with the keyboard or by click.\n- `sorted` Fires when the sort column is changed.\n- `selectionchanged` Fires any time the selection changes.\n- `activationchanged` Fires any time the active row changes.\n- `rowselected` Fires for each row that is selected.\n- `rowdeselected` Fires for each row that is deselected.\n- `rowactivated` Fires for each row that is activated.\n- `rowdeactivated` Fires for each row that is deactivated.\n- `rowclick` Fires for each row that is clicked.\n- `dblclick` Fires each time double clicked on body cells or header cells. Based on where it clicked details can be capture like `type: 'body-cell'|'header-title'|'header-filter'` etc.\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n- `columnresized` Fires when a column is resized or setColumnWidth is called.\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto\n- `rowExpanded` Fires when a tree or expandable row is expanded or collapsed\n- `rowCollapsed` Fires when a tree or expandable row is expanded or collapsed\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called.\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto.\n- `beforemenushow` Fires before context menu show, you can return false in the response to veto.\n- `menushow` Fires after context menu show.\n- `menuselected` Fires after context menu item selected.\n- `settingschanged` Fires after settings are changed in some way.\n- `scrollstart` Fires when data-grid reaches the topmost row.\n- `scrollend` Fires when data-grid reaches the bottommost row.\n- `afterrendered` Fires after rendered the data grid.\n\n## Methods\n\n- `setColumnWidth` Can be used to set the width of a column.\n- `setColumnVisibility` Can be used to set the visibility of a column.\n- `setActivateCell(cell, row)` Can be used to set focus of a cell.\n- `selectedRows` Lists the indexes of the currently selected rows.\n- `saveSetting(setting: string)` Save the given setting to local storage.\n- `saveAllSettings` Save all user settings to local storage.\n- `savedSetting(setting: string)` Get saved given setting value from local storage.\n- `allSavedSettings` Get saved all user settings from local storage.\n- `clearSetting(setting: string, key?: string)` Clear the given saved setting from local storage.\n- `clearAllSettings(userKeys: unknown)` Clear saved all user settings from local storage.\n- `restoreSetting(setting: string, value?: unknown)` Restore the given saved setting from local storage.\n- `editFirstCell` Puts the first cell on the active row into edit mode.\n- `appendData(data: Record<string, unknown>)` Use this to add more data to the datagrid's existing dataset.  This will automatically render additional rows in the datagrid.\n- `addRow(data: Record<string, unknown>, index?: number)` Adds a new row at optional row index and defaults the values to all those provided in the data\n- `addRows(data: Array<Record<string, unknown>>, index?: number)` Adds multiple new rows at optional row index and defaults the values to all those provided in the data\n- `removeRow(index: number)` Removed the provided row index from the dataset and visual datagrid\n- `clearRow(index: number)` Clears all values on the given row.\n- `commitCellEdit` Stops editing and commits the value in the active editor.\n- `cancelCellEdit` Stops editing and reverts the value in the active editor.\n- `resetDirtyCells` Clears all dirty cell indicators.\n- `dirtyCells` Gives a list of all currently dirty cells.\n- `exportToExcel(format: 'csv' | 'xlsx', filename: string, keepGridFormatting: boolean)` Export datagrid datasource to an excel file. This keeps grid formatting by default.\n- `collapseAll()` Collapse all expandable or tree rows.\n- `expandAll()` Expand all expandable or tree rows.\n- `toggleAll(opt: boolean)` Toggle collapse/expand all expandable or tree rows. `opt false`: will expand all, `opt: true`: will collapse all\n- `refreshRow` IdsDataGridRow method to refresh row element and its cells.\n- `refreshCell` IdsDataGridCell method to refresh cell element.\n- `updateDataset(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row.\n- `updateDatasetAndRefresh(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row and refreshes row/cells UI.\n\n## Filters\n\nData rows can be filter based on one or several criteria. Whole filter row can turned on/off by the api setting `filterable` and can be disabled by the api setting `filter-row-disabled`. The filter conditions can be applied thru the UI or programmatically. Each column can have its own filter type and turn on/off by columns setting.\n\n### Filter Columns Setting\n\nAll the filter settings can be passed thru columns data.\n\n|Setting|Type|Description|\n|---|---|---|\n|`filterType` | Function | Data grid built-in filter method, see the dedicated section below. |\n|`filterConditions` | Array | List of items to be use as operators in menu-button or options in dropdown. |\n|`filterFunction` | Function | User defined filter method, it must return a boolean. |\n|`filterOptions` | Object | Setting for components are in use, for example: `label, placeholder, disabled`. |\n|`isChecked` | Function | User defined filter method, it must return a boolean. This method use along built-in `checkbox` only, when filter data value is not boolean type. |\n\n### Built-in Filter Methods\n\n|Method|Description|\n|---|---|\n|`text` | It filter as text comparison. Contains input and menu-button with list of default operators. |\n|`integer` | It filter as integer comparison. Contains input and menu-button with list of default operators. |\n|`decimal` | It filter as decimal comparison. Contains input and menu-button with list of default operators. |\n|`contents` | It filter as text comparison. Contains dropdown and auto generate list of items based on column data. |\n|`dropdown` | It filter as text comparison. Contains dropdown and must pass list of item by setting `filterConditions`. |\n|`checkbox` | It filter as boolean comparison. Contains menu-button with list of default operators. |\n|`date` | It filter as date comparison. Contains date-picker and menu-button with list of default operators. |\n|`time` | It filter as time comparison. Contains time-picker and menu-button with list of default operators. |\n\n### Custom Filter\n\nIf the built-in filters are not enough, creating a custom filter is an option. There are two parts you can create both parts custom or mix-match with built-in.\n\n1. `UI Only` In order to do custom UI part of filter, add as html markup thru a slot. It must use slot and column-id attributes for example: `<div slot=\"filter-n\" column-id=\"n\">...</div>` where n is the columnId same passed in the columns.\n1. `filterFunction` This is a user defined filter method which must return a boolean. It determines if a cell value should be considered as a valid filtered value.\n1. `disableClientFilter` This is an api setting to disable filter logic client side. It will set filter conditions and fire an event `filtered` which can listen for custom logic.\n\n### Filter Code Examples\n\nBasic text filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nNo filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"false\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisabled filter row, will disabled all attached filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\" filter-row-disabled=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nHyperlink, integer, decimal, date and time filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'hyperlink',\n  name: 'Hyperlink',\n  field: 'description',\n  href: '#',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.hyperlink\n});\ncolumns.push({\n  id: 'integer',\n  name: 'Integer',\n  field: 'price',\n  filterType: dataGrid.filters.integer,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'decimal',\n  name: 'Decimal',\n  field: 'price',\n  filterType: dataGrid.filters.decimal,\n  formatter: dataGrid.formatters.decimal,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'date',\n  name: 'Date',\n  field: 'publishDate',\n  filterType: dataGrid.filters.date,\n  formatter: dataGrid.formatters.date\n});\ncolumns.push({\n  id: 'time',\n  name: 'Time',\n  field: 'publishDate',\n  filterType: dataGrid.filters.time,\n  formatter: dataGrid.formatters.time\n});\n```\n\nSome filter options label, placeholder, disabled.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterOptions: {\n    label: 'Label text for description input',\n    placeholder: 'Placeholder text for description input',\n    disabled: true\n  }\n});\n```\n\nCustom operators items for menu-button.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterConditions: [{\n    value: 'contains',\n    label: 'Contains',\n    icon: 'filter-contains'\n  },\n  {\n    value: 'equals',\n    label: 'Equals',\n    icon: 'filter-equals',\n    selected: true\n  }]\n});\n```\n\nContents and dropdown type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'location',\n  name: 'Location',\n  field: 'location',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.contents,\n  filterOptions: {\n    notFilteredItem: { value: 'not-filtered', label: 'Not Filtered' }\n  }\n});\ncolumns.push({\n  id: 'useForEmployee',\n  name: 'NotFilterdItem (shown as blank)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\ncolumns.push({\n  id: 'useForEmployeeCustomNotFilterdItem',\n  name: 'NotFilterdItem (show as custom text)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'not-filtered', label: 'Not Filtered' },\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\n```\n\nCheckbox type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'checkbox',\n  name: 'Checkbox',\n  field: 'inStock',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox\n});\ncolumns.push({\n  id: 'customCheckMethod',\n  name: 'Custom check method',\n  field: 'active',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox,\n  isChecked: (value) => value === 'Yes'\n});\n```\n\nCustom filter method.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\n// Custom filter checking\nconst myCustomFilter = (opt) => {\n  const { operator, columnId, value } = opt.condition;\n  const val = {\n    condition: Number.parseInt(value, 10),\n    data: Number.parseInt(opt.data[columnId], 10)\n  };\n  let isMatch = false;\n  if (Number.isNaN(val.condition) || Number.isNaN(val.data)) return isMatch;\n\n  if (operator === 'equals') isMatch = (val.data === val.condition);\n  if (operator === 'greater-than') isMatch = (val.data > val.condition);\n  if (operator === 'greater-equals') isMatch = (val.data >= val.condition);\n  if (operator === 'less-than') isMatch = (val.data < val.condition);\n  if (operator === 'less-equals') isMatch = (val.data <= val.condition);\n\n  return isMatch;\n};\n\nconst columns = [];\ncolumns.push({\n  id: 'customFilterMethod',\n  name: 'Custom Filter Method',\n  field: 'price',\n  filterFunction: myCustomFilter,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\n```\n\nCustom filter UI part.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n  <div slot=\"filter-description\" column-id=\"description\">\n    <ids-menu-button id=\"btn-filter-description\" icon=\"filter-greater-equals\" menu=\"menu-filter-description\" dropdown-icon>\n      <span class=\"audible\">Greater Than Or Equals</span>\n    </ids-menu-button>\n    <ids-popup-menu id=\"menu-filter-description\" target=\"#btn-filter-description\">\n      <ids-menu-group select=\"single\">\n        <ids-menu-item value=\"equals\" icon=\"filter-equals\">Equals</ids-menu-item>\n        <ids-menu-item value=\"greater-than\" icon=\"filter-greater-than\">Greater Than</ids-menu-item>\n        <ids-menu-item value=\"greater-equals\" icon=\"filter-greater-equals\" selected=\"true\">Greater Than Or Equals</ids-menu-item>\n        <ids-menu-item value=\"less-than\" icon=\"filter-less-than\">Less Than</ids-menu-item>\n        <ids-menu-item value=\"less-equals\" icon=\"filter-less-equals\">Less Than Or Equals</ids-menu-item>\n      </ids-menu-group>\n    </ids-popup-menu>\n    <ids-input id=\"input-filter-description\" type=\"text\" size=\"full\" placeholder=\"Slotted description\" label=\"Slotted description input\">\n    </ids-input>\n  </div>\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisable client filter\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" disable-client-filter=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n\ndataGrid.addEventListener('filtered', (e: any) => {\n  console.info('filtered:', e.detail);\n});\n```\n\n### Filter rows programmatically\n\n```js\n// Filter rows\nconst conditions = [{ columnId: 'description', operator: 'contains', value: '5' }];\ndataGrid.applyFilter(conditions);\n\n// Reset all filters\ndataGrid.applyFilter([]);\n```\n\n### Filter Events\n\nThe following events are relevant to data-grid filters.\n\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n\n## Custom cell colors\n\nIn some cases, it may be desirable to customize the background color of cells.  This can be done with the `cssPart` column setting:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell'\n});\n```\n\nThe `cssPart` property is translated into a `part` attribute that is applied to every cell in the column.  In the event the color needs to be conditional based on the row index or other logic, a function can be used:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2')\n  // ...\n});\n```\n\nAfter this is defined, accompanying CSS can be written to target the parts `custom-cell`, `custom-cell-1`, and `custom-cell-2` to change background color or other CSS properties of the cell:\n\n```css\nids-data-grid::part(cell) {\n  background-color: #ebf9f1;\n}\n\nids-data-grid::part(cell-selected) {\n  background-color: #c9dad0;\n}\n```\n\n### Changing selected cell colors\n\nAnother column setting, `cellSelectedCssPart` can be used alongside `cssPart` to customize the selected color of the row in a similar way.  When using `mixed` selection, this color is also applied to activated rows:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell',\n  cellSelectedCssPart: 'custom-cell-selected'\n});\n```\n\nThis column setting can also be a function, just like `cssPart`:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2'),\n  cellSelectedCssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-selected-1' : 'custom-cell-selected-2')\n  // ...\n});\n```\n\n## Tooltip Code Examples\n\nSet suppress tooltips to turn off.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" suppress-tooltips>\n</ids-data-grid>\n```\n\nSet custom tooltip strings.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: 'This is a product Id',\n  headerTooltip: 'This is the product Id header title',\n  headerIconTooltip: 'This is product Id header icon',\n  filterButtonTooltip: 'This is the product Id filterButton'\n});\n```\n\nSet tooltip as callback.\n\n```js\nconst tooltipCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return `Text: ${text}<br/>Header Row: ${rowIndex}, Cell: ${columnIndex}`;\n  } else if (type === 'filter-button') {\n    return `Text: ${text}<br/>FilterButton Row: ${rowIndex}, Cell: ${columnIndex}`;\n  }\n  return `Text: ${text}<br/>for Row: ${rowIndex}, Cell: ${columnIndex}`;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: tooltipCallback\n});\n```\n\nSet tooltip custom options.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: {\n    placement: 'top',\n    headerPlacement: 'top',\n    headerIconPlacement: 'top',\n    filterButtonPlacement: 'bottom',\n    x: 0,\n    y: 10,\n    headerX: 0,\n    headerIconX: 0,\n    headerY: 10,\n    headerIconY: 10,\n    filterButtonX: 0,\n    filterButtonY: 22\n  }\n});\n```\n\nSet tooltip options as callback.\n\n```js\nconst tooltipOptionsCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return { headerPlacement: 'top', headerX: 0, headerY: 10 };\n  } else if (type === 'header-icon') {\n    return { headerIconPlacement: 'top', headerIconX: 0, headerIconY: 10 };\n  } else if (type === 'filter-button') {\n    return { filterButtonPlacement: 'bottom', filterButtonX: 0, filterButtonY: 22 };\n  }\n  return { placement: 'top', x: 0, y: 10 };\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: tooltipOptionsCallback\n});\n```\n\nSet tooltip custom css.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: 'custom-turquoise',\n  headerTooltipCssPart: 'custom-turquoise',\n  headerIconTooltipCssPart: 'custom-turquoise',\n  filterButtonTooltipCssPart: 'custom-turquoise'\n});\n```\n```css\n/* tooltip css part `custom-turquoise` */\nids-data-grid::part(custom-turquoise-tooltip-arrow-top)::after {\n  border-top-color: #2f8d8e;\n}\nids-data-grid::part(custom-turquoise-tooltip-popup) {\n  background-color: #2f8d8e;\n}\n```\n\nSet tooltip custom css as callback.\n\n```js\nconst tooltipCssPartCallback = (args: { type: string }): string => {\n  const { type } = args;\n  let cssPart = '';\n  // Set random css part each time, for `body-cell` tooltips\n  if (type === 'body-cell') {\n    const parts = ['azure', 'ruby'];\n    const randomIndex = Math.floor(Math.random() * parts.length);\n    cssPart = parts[randomIndex];\n  }\n  return cssPart;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: tooltipCssPartCallback\n});\n```\n```css\n/* tooltip css part `azure` */\nids-data-grid::part(azure-tooltip-arrow-top)::after {\n  border-top-color: #0066d4;\n}\nids-data-grid::part(azure-tooltip-popup) {\n  background-color: #0066d4;\n}\n\n/* tooltip css part `ruby` */\nids-data-grid::part(ruby-tooltip-arrow-top)::after {\n  border-top-color: #c31014;\n}\nids-data-grid::part(ruby-tooltip-popup) {\n  background-color: #c31014;\n}\n```\n\n## context menu Code Examples\n\nThe context menus can be set via the dataset.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n</ids-data-grid>\n```\n```js\n// Dataset for header cells context menu\nconst headerMenuData = {\n  id: 'grid-header-context menu',\n  contents: [{\n    id: 'header-actions-group',\n    items: [\n      { id: 'actions-split', value: 'actions-split', text: 'Split' },\n      { id: 'actions-sort', value: 'actions-sort', text: 'Sort' },\n    ]\n  }],\n};\n\n// Dataset for body cells context menu\nconst menuData = {\n  id: 'grid-context menu',\n  contents: [{\n    id: 'actions-group',\n    items: [\n      { id: 'item-1', value: 'item-1', text: 'Item One' },\n      { id: 'item-2', value: 'item-2', text: 'Item Two' },\n      { id: 'item-3', value: 'item-3', text: 'Item Three' }\n    ]\n  }],\n};\n\n// Set context menu data with data-grid\ndataGrid.menuData = menuData;\ndataGrid.headerMenuData = headerMenuData;\n\n// Set to return true/false in the response to veto before context menu show.\ndataGrid.addEventListener('beforemenushow', (e: any) => {\n  console.info('before context menu show', e.detail);\n  // e.detail.response(false);\n});\n\n// Set to watch after context menu show.\ndataGrid.addEventListener('menushow', (e: any) => {\n  console.info('After context menu show', e.detail);\n});\n\n// Set to watch after context menu item selected.\ndataGrid.addEventListener('menuselected', (e: any) => {\n  console.info('context menu item selected', e.detail);\n});\n```\n\nSet context menu thru Slot.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n  <!-- context menu header cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"header-context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n      <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n  <!-- context menu body cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n      <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n      <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n      <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n</ids-data-grid>\n```\n\nSet context menu thru ID.\n\n```html\n<ids-data-grid\n  header-menu-id=\"grid-header-context menu\"\n  menu-id=\"grid-context menu\"\n  id=\"data-grid-1\"\n  label=\"Books\"\n></ids-data-grid>\n\n<!-- context menu header cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-header-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n    <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n\n<!-- context menu body cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n    <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n    <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n    <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n```\n\n## Empty Message\n\nSet empty message thru slot (markup).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-slot\" label=\"Books\">\n  <ids-empty-message hidden icon=\"empty-search-data-new\" slot=\"empty-message\">\n    <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">No Data</ids-text>\n    <ids-text hidden label=\"true\" slot=\"description\">There is no data available.</ids-text>\n  </ids-empty-message>\n</ids-data-grid>\n```\n\nSet empty message thru settings (markup).\n\n```html\n<ids-data-grid\n  id=\"data-grid-em-thru-settings\"\n  label=\"Books\"\n  empty-message-icon=\"empty-error-loading-new\"\n  empty-message-label=\"No Data\"\n  empty-message-description=\"There is no data available.\"\n></ids-data-grid>\n```\n\nSet empty message thru settings (javascript).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-settings-js\" label=\"Books\">\n</ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-em-thru-settings-js');\ndataGrid.emptyMessageIcon = 'empty-error-loading-new';\ndataGrid.emptyMessageLabel = 'No Data';\ndataGrid.emptyMessageDescription = 'There is no data available.';\n```\n\n## Row Height\n\nAs mentioned in the settings section you can change the row height by setting the rowHeight option.\n\n```html\n     <ids-data-grid id=\"data-grid-row-height\" row-height=\"md\"></ids-data-grid>\n```\n\nIts worth mentioning the characteristics and usage for each one.\n\nLarge (`row-height=\"lg\"`) - Row Height is 50. The default row height, header is 16px and body cells are 16px. 16px padding on cells and header. You should use this most of the time if there is plenty of room on the UI and to avoid the UI looking crowded.\nMedium (`row-height=\"md\"`) - Row Height is 40. Header is 16px and body cells are 16px. 12px padding on cells and header. If you need to see a few more rows but still want to avoid a crowded UI, this is the next best option.\nSmall (`row-height=\"sm\"`) - Row Height is 35. Header is 16px and body cells are 16px. 8px padding on cells and header. This is the smallest option that is recommended for readability and spacing.\nExtra Small (`row-height=\"xs\"`) - Row Height is 30. Header is 14px and body cells are 14px. 8px padding on cells and header. If you need a very compressed data grid with a lot of data you can use this option. But there is a trade off of bad readability and spacing.\nExtra Extra Small (`row-height=\"xxs\"`) - Row Height is 25. Header is 14px and body cells are 14px. 2px padding on cells and header. Avoid this option as it is very crowded but it is included for edge cases.\n\n## States and Variations\n\n**Rows**\n- Hover\n- Selected\n- Disabled\n- Readonly\n- Activated\n\n**Columns**\n- Focus\n- Hover\n- Sorted\n- Selected\n- Disabled\n- Filtered\n\n**Cells**\n- Hover (sometimes a cursor change)\n- Readonly\n- Focus\n- Checked/Not Checked (Checkboxes)\n\n## Keyboard Guidelines\n\n- <kbd>Tab</kbd>The initial tab enters the grid with focus on the first cell of the first row, often a header. A second tab moves out of the grid to the next tab stop on the page. Once focus is established in the grid, a TAB into or a Shift Tab into the grid will return to the cell which last had focus. If in edit mode will finish editing and start editing the next cell.\n- <kbd>Shift + Tab</kbd> Moves the reverse of tab. If in edit mode will finish editing and start editing the previous cell.\n- <kbd>Left</kbd> and <kbd>Right</kbd> Move focus to the adjacent column's cell. There is no wrap at the end or beginning of columns.\n- <kbd>Up</kbd> and <kbd>Down</kbd> Move focus to the adjacent row's cell. There is no wrap at the first or last row.\n- <kbd>Home</kbd> moves focus to the first cell of the current row\n- <kbd>End</kbd> moves focus to the last cell of the current row\n- <kbd>Page Up</kbd> moves focus to the first cell in the current column\n- <kbd>Page Down</kbd> moves focus to the last cell in the current column\n- <kbd>Space</kbd> Toggles selection the activate row. If suppressRowDeselection is set it will be ignored on deselect. If the cell contains an expandable element then the row will toggle the expanded state. If the cell contains a checkbox editor, will toggle the checkbox state.\n- <kbd>F2</kbd> toggles actionable mode. Pressing the <kbd>Tab</kbd> key while in actionable mode moves focus to the next actionable cell. While in actionable mode you can do things like type + enter. This will move you down a row when you hit enter. If the cell has a control that uses down arrow (like the drop downs or lookups that are editable). Then the user needs to hit enter to enable the edit mode on that cell.\n- <kbd>Triple Click</kbd> Not a keyboard shortcut, but if you have text in a cell that is overflowed a triple click will select all the text even the part that is invisible.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Enter</kbd> Activates edit mode on the cell if it is editable. There is also an \"auto edit detection\". If the user starts typing then edit mode will happen automatically without enter. If in edit mode already <kbd>Enter</kbd> will finish edit mode. If `editNextOnEnterPress` is enabled then editing will start on the same column in next row.\n- <kbd>Shift + Enter</kbd> Same as enter but if `editNextOnEnterPress` is enabled then editing will start on the same column in previous row.\n- <kbd>F2</kbd> Finish editing same as Enter. But if `editNextOnEnterPress` is enabled, will stay in same cell. `cancelEditMode` will fire.\n- <kbd>CMD/CTRL + Enter</kbd> Finish editing same as Enter.\n- <kbd>ESC</kbd> Revert to the previous value and cancel editing. `cancelEditMode` will fire.\n\n## Responsive Guidelines\n\n- By default, data grid grows depending on the amount of contents within and will scroll if necessary under the header. It stops growing when it reaches the size of the parent container.\n- `autoFit` property or `auto-fit` attribute can be set manually to make the data grid size fill and be responsive to the size of the screen, regardless of the amount of contents.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Counts have all new markup and classes.\n\n**4.x to 5.x**\n- Data grid has all new markup and a custom element but some similarly named options\n- Still uses same columns and data set options. Some column options enhanced and changed.\n- If using events events are now plain JS events for example: sorted, rendered\n- Some Api Functions have changed\n- If using properties/settings these are now attributes or as plain properties for example: data, virtual-scroll\n- Markup has changed to a custom element `<ids-data-grid></ids-data-grid>`\n- Can now be imported as a single JS file and used with encapsulated styles\n- `Drill Down` Formatter is now covered by `Button` formatter with `icon=\"drilldown\"`\n- `textOverflow` setting is now by default\n- `rowNavigation` setting has replaced `cellNavigation`. Cell navigation is the default behavior.\n- `stretchColumn` is now more flexible and can be achieved by setting a column width to `minmax(130px, 4fr)`. I.E. some min width and a `fr` unit equal to the remaining number of columns (or similar variations).\n- split columns are not supported anymore but could be done with a custom formatter if needed\n- `frozenColumns` setting is now set on each column by adding `frozen: 'left'` or `frozen: 'right'` to the column definition.\n- Some events are renamed see the events section for more details, also the signature of the events has changed.\n- Custom formatter functions can now be any type of function and have a different signature.\n- The `expanded` column option for tree was renamed to `rowExpanded`.\n- The `expandrow/collapserow` events are renamed to `rowexpanded/rowcollapsed`\n- The `beforeentereditmode/entereditmode/exiteditmode` event is renamed to `beforecelledit/celledit/endcelledit/cancelcelledit`\n- The `actionablemode` feature has been replaced with simply tabbing to the next editable field when in edit mode.\n\n## Accessibility Guidelines\n\n1.1.1 Non-text Content - All images, links and icons have text labels for screen readers when the formatters are used.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and links and images of text has a contrast ratio of at least 4.5:1.\n- 2.1.1 Keyboard - Make all functionality available from a keyboard. The grid has keyboard shortcuts and is usable with a screen reader due to the addition of aria tags.\n- A datagrid in general including this one uses the following aria tags\n  - `aria-label` labels the enter table on the main table\n  - `aria-rowcount` lists the visible row count on the main table\n  - `aria-colindex` the index of each column on the column elements\n  - `aria-rwindex` the index of each row on the row elements\n  - `aria-setsize` for tree grid lists the number of elements in each level (group)\n  - `aria-level` the level of indentation\n  - `aria-posinset` the depth into each set\n  - `aria-expanded` on the row it indicates if the row is expanded (for tree and expandable row)\n  - `aria-sort` indicates the sort direction on the sortable columns\n  - `aria-checked` indicates if the element is checked on checkbox columns and headers\n\n## Regional Considerations\n\nTitles and labels should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n\n## Code Separation (For Developers)\n\nThe code is divided into several files. Here is a description of where everything is.\n\n- `ids-data-grid-cell.ts` creates a non-shadow root `ids-data-grid-cell`, and handles its own selection, and activation.\n- `ids-data-grid-cell.scss` contains all css related to `.ids-data-grid-cell` and its children\n- `ids-data-grid-contextmenu.ts` contains code in the form of export functions, that adds ability to get right click menus on headers and cells\n- `ids-data-grid-filter.scss` contains all css related to the filter row and its children\n- `ids-data-grid-filter.ts` contains code to implement the filtering functionality and its ui (some functions are in ids-data-source)\n- `ids-data-grid-formatters.ts` contains all formatter functions and some supporting code like data extraction\n- `ids-data-grid-header.ts` contains most header functionality, the header template, and code related to header actions like sort, reorder and selection.\n- `ids-data-grid-header.scss` contains all css related to `.ids-data-grid-header` and its children\n- `ids-data-grid-row.ts` contains most row functionality, the row template, and code related to row actions like expand, collapse, select, activate\n- `ids-data-grid-row.scss` contains all css related to `.ids-data-grid-row` and its children\n- `ids-data-grid-tooltip-mixin.js` contains a tooltip mixin that adds tooltip functionality to cells and headers, its different from `ids-tooltip-mixin` (more specific)\n- `ids-data-grid.js` contains all main data grid code, the api and settings and the main generator loop for the data grid\n"}},{"name":"ids-data-grid-column","description":{"kind":"markdown","value":"# Ids Data Grid\n\n## Description\n\nThe data grid component (ids-data-grid) is used to arrange tabular data in rows and columns for easier scanning and comparison. Data grids are very configurable in both design and functionality and they can be found within almost every product/app.\n\nYou should pass an array of objects in to the grid on the `dataset` object. Also pass the `columns` array which contains the column configuration. There are a number of events described in the events and API section, as well as the column settings.\n\nA Read-Only data grid uses \"Formatters\" to render cell content. A number of these are listed in the API section and it is possible to create your own.\n\n## Use Cases\n\n- The data grid component is most useful when it is used for categorically sorting dense and repetitive information. Each individual item is listed down the Y axis of the chart, and their shared attribute categories are listed along the X axis. The resulting cells are filled with information that is relevant to the corresponding item and attribute.\n\n## Terminology\n\n- **Title**: The name of the data grid optionally appearing above the grid and describing the contents.\n- **Options**: An optionally actions menu button with functionality that operates on the entire data grid.\n- **Cell**: Body elements of the data grid that contain an object's value or attribute. Cells should only contain one type of content or it can be confusing and hurt accessibility.\n- **Header Cell**: These cells contain the names of the columns in the grid and related functions like filtering and sorting. All cells below the header cell will hold values related to the attribute in the header cell.\n- **Column**: Cells stacked vertically that contain values relate to the attribute found on the top header cell.\n- **Row**: Each row contains one cell per column in the data grid, and each cell displays a single value in the bound data item.\n- **Tree**: Denotes the use of hierarchical data, with an expandable and collapsible hierarchy.\n\n## Themeable Parts\n\n- `table` allows you to further style the table main element\n- `container` allows you to further style the container element\n- `body` allows you to further style the body element\n- `header` allows you to further style the header element\n- `headerCell` allows you to further style the header cells\n- `row` allows you to further style the rows\n- `cell` allows you to further style the row cells\n- `cell-selected` allows you to further style row cells that are selected (in mixed-selection mode, activated cells are also styled)\n- `tooltip-popup` allows you to further style or adjust the outer tooltip popup element\n- `tooltip-arrow` allows you to adjust the tooltip arrow element\n\n## Features (With Code Examples)\n\nA data grid is created by adding an `ids-data-grid` html element in the page and setting the options either inline in the markup or in the JS part of the code. You can only use simple types (string, boolean ect) for inline markup so passing the data and column arrangement is always done in the JS part. The data will be an array of objects so its in the correct tabular form. The columns are also an array of objects but with defined options and types. See more about columns in next section.\n\n```html\n<ids-data-grid id=\"data-grid-1\"></ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-1');\ndataGrid.data = dataset;\ndataGrid.columns = columns;\n```\n\n### Column Groups\n\nSetting column groups allows you to add a second level of columns in your header and the ability to group the first level. This is useful for when you have a large number of columns and you want to group them into logical or related sections.\n\nColumn groups are achieved by providing an array to the `columnGroups` setting. Only one level of column groups can be defined.\n\n```js\ndataGrid.columnGroups = [\n{\n  colspan: 3,\n  id: 'group1',\n  name: 'Column Group One',\n  align: 'center'\n},\n{\n  colspan: 2,\n  id: 'group2',\n  name: 'Column Group Two'\n},\n{\n  colspan: 2,\n  id: 'group3',\n  name: 'Column Group Three',\n  align: 'right'\n},\n{\n  colspan: 11,\n  id: 'group4',\n  name: 'Column Group Four',\n  align: 'left'\n}\n];\n```\n\nIf the column is hidden it will be automatically removed from the `colspan`. If in the last group you didn't provided a bug enough `colspan` it will be set to the remaining columns. The `name` text can be right or left aligned and given an id. The only required property is `colspan`.\n\n### Selection\n\nThe data grid selection feature involves the setting `rowSelection`. This can be one of several values.\n\n- `false` No selection enabled.\n- `multiple` Allows multiple rows to be selected. When doing this it is recommended to add a `formatters.selectionCheckbox` for the first column.\n- `single` Allows a single row to be selected. When doing this you can optionally to add a `formatters.selectionRadio` for the first column. You can use the `suppressRowDeselection` if you want one row to always be selected.\n- `mixed` Allows multiple rows to be selected by clicking only on the checkbox or <kbd>Space</kbd> key. If clicking a row then that row is activated, meaning it is the current row and something might be shown based on the data of that row. You can use the `suppressRowDeactivation` if you want one row to always be selected.\n\nHere is a code example for multi select\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" row-selection=\"multiple\">\n</ids-data-grid>\n```\n\n```js\n  dataGrid.addEventListener('rowselected', (e) => {\n    console.info(`Row Selected`, e.detail);\n  });\n\n  dataGrid.addEventListener('rowdeselected', (e) => {\n    console.info(`Row Deselected`, e.detail);\n  });\n\n  dataGrid.addEventListener('selectionchanged', (e) => {\n    console.info(`Selection Changed`, e.detail);\n  });\n```\n\nThe following events are relevant to selection/activation.\n\n`rowselected` Fires when an individual row is activation and gives information about that row.\n`rowdeselected` Fires when an individual row is deselected and gives information about that row.\n`selectionchanged` Fires once for each time selection changes and gives information about all selected rows.\n\n`rowactivated` Fires when an individual row is activated and gives information about that row.\n`rowdeactivated` Fires when an individual row is deactivated and gives information about that row.\n`activationchanged` Fires once for each time activation changes and gives information about the active row.\n\n### Tree Grid\n\nThe tree grid feature involves the setting `treeGrid` to true. In addition the data passed to the tree grid should contain a field called `children`. That contains the child rows. This can by unlimited levels but 2-4 is recommended as a max for a more usable UI. In addition you can preset some states by adding `rowExpanded: false` to the parent elements (default is expanded). And also set `rowHidden: false` for child rows that are expanded. You also need a `Expander` formatter on a cell (usually the first visible cell.\n\nHere is a code example for a tree grid.\n\n```html\n<ids-data-grid id=\"tree-grid\" label=\"Buildings\" tree-grid=\"true\" group-selects-children=\"true\"></ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to selection/activation.\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `groupSelectsChildren` {boolean} If the tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `suppressRowClickSelection` {boolean} If using selection you might want to set this so clicking a row will not select it.\n### Expandable Row\n\nThe Expandable Row feature involves the setting `expandableRow` to true. In addition a row template should be provided via an id that points to the `expandableRowTemplate` which is a `template` element. You can preset the expandable state by adding `rowExpanded: true` to the row element you want to expand. The default is collapsed.\n\nHere is a code example for an expandable row\n\n```html\n<ids-data-grid\n    id=\"data-grid-expandable-row\"\n    expandable-row=\"true\"\n    expandable-row-template=\"expandable-row-tmpl\"\n    label=\"Books\">\n    <template id=\"expandable-row-tmpl\">\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"16\" type=\"span\">${convention}</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">${price} USD</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">Lorem Ipsum is simply sample text of the printing and typesetting industry. Lorem Ipsum has been the industry standard sample text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only...</ids-text>\n        </ids-layout-grid>\n    </template>\n</ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to expandable rows\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRowTemplate` {string} Should point to the row `template` element.\n\n### Editing\n\nThe Editing features start by setting `editable` to true. In addition you should add editors to columns and enable features of each of the editors. The features differ depending on the component used for editing. See the Keyboard section for information on which keys can be used when editing..\n\nHere is a code example for an editable text cell.\n\n```js\ncolumns.push({\n    id: 'description',\n    name: 'Description',\n    field: 'description',\n    sortable: true,\n    resizable: true,\n    reorderable: true,\n    formatter: dataGrid.formatters.text,\n    editor: {\n      type: 'input',\n      inline: true,\n      editorSettings: {\n        autoselect: true,\n        dirtyTracker: true\n      }\n    }\n  });\n```\n\nHere is a code example for an editable dropdown cell\n\n```js\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  resizable: true,\n  reorderable: true,\n  formatter: dataGrid.formatters.dropdown,\n  editor: {\n    type: 'dropdown',\n    editorSettings: {\n      dirtyTracker: true,\n      validate: 'required',\n      options: [\n        {\n          label: 'Option 1',\n          value: 'opt1'\n        },\n        {\n          label: 'Option 2',\n          value: 'opt2'\n        }\n      ]\n    }\n  }\n});\n```\n\nTo cancel or disabled editing there are a few ways:\n\n- setting the column `editor` setting to undefined will disable editing on the column (as will not having an editor setting at all).\n- adding a `readonly` or `disabled` function which returned true for some cells based on a condition will disable or mark the cell readonly.\n- return false in the `beforecelledit` event in the response function\n\nThe following settings are available on editors.\n\n`type` As of now can be `checkbox`, `input`, `datepicker`, `timepicker`, or `dropdown` but more will be added.\n`inline` Default is false. If true the editor (for example an input) will be visible in a field.\n`editorSettings` Is an object that is loosely typed that lets you pass any option the editor supports in. For example any of the IdsInput or IdsCheckbox options can be passing in. Some special ones are:\n`editorSettings.autoselect` Text will be selected when entering edit mode\n`editorSettings.dirtyTracker` Enables the dirty tracker that marks changed cells.\n`editorSettings.validate` Text will be selected when entering edit mode\n`editorSettings.mask` Will pass mask settings to the input (if supported).\n`editorSettings.maskOptions` Will pass maskOptions settings to the input (if supported).\n`editorSettings.options` Dataset used for dropdown editor's list box options.\n\nWhen the use clicks in the cell or activates editing with the keyboard with the Enter key and types. The following events will fire.\n\n`beforecelledit` Fires before a cell is being edit (before edit is started). Can be vetoed by returning false as shown below.\n`celledit` Fires exactly when a cell is being edited.\n`endcelledit` Fires when a cell edit is completed and changed.\n`cancelcelledit` Fires when an edit is cancelled via the <kbd>Esc</kbd> key.\n\nTo cancel editing based on some condition or if editing is not allowed you can veto the `beforecelledit` event.\n\n```js\n  dataGrid.addEventListener('beforecelledit', (e: Event) => {\n    (<CustomEvent>e).detail.response(false);\n  });\n```\n\nThere are a few utility functions for editing the data grid mentioned in the Methods section.\n\n## Settings and Attributes\n\nWhen used as an attribute in the DOM the settings are kebab case, when used in JS they are camel case.\n\n- `virtualScroll` {boolean} When virtual scroll is used the grid can render many thousands of rows and only the rows visible in the scroll area are rendered for performance. This setting has limitations such as the rows need to be fixed size.\n- `addNewAtEnd` {boolean} Automatically append rows while keyboard navigating data grid in edit mode.\n- `alternateRowShading` {boolean} For better scan-ability you can shade alternate rows.\n- `listStyle` {boolean} Sets the style of the grid to list style for simple readonly lists.\n- `columns` {Array<object>} Sets the columns array of the data grid. See column settings.\n- `columnGroups` {Array<object>} Allows you to group columns together in logical sets. See section below for details.\n- `rowHeight` {string | `'xxs'` | `'xs'` | `'sm'` | `'md'` | `'lg'`} Sets the height and padding of each row. In smaller row heights the font is lowered.\n- `data` {Array<object>} Sets the data to show in the data grid. This can be a JSON Array.\n- `disableClientFilter` {boolean} Disables the filter logic client side in situations you want to filter server side.\n- `filterable` {boolean} Turns on or off the filter functionality.\n- `filterRowDisabled` {boolean} Disables the filter row.\n- `headerMenuData` {Array<object>} Dataset to build context menu for header and header group cells.\n- `headerMenuId` {string} ID of the popupmenu to use as context menu for header and header group cells.\n- `menuData` {Array<object>} Dataset to build context menu for body cells.\n- `menuId` {string} ID of the popupmenu to use as context menu for body cells.\n- `rowNavigation` {boolean} If using row navigation, the row will be focused when navigating the data grid via clicks and keyboard events.\n- `rowSelection` {string|boolean} Set the row selection mode between false, 'single', 'multiple' and 'mixed\n- `suppressRowClickSelection` {boolean} If using selection setting this will require clicking a checkbox or radio to select the row. Clicking other cells will not select the row.\n- `suppressRowDeactivation` {boolean} Set to true to prevent rows from being deactivated if clicked. i.e. once a row is activated, it remains activated until another row is activated in its place.\n- `suppressRowDeselection`  {boolean} Set to true to prevent rows from being deselected if click or space bar the row. i.e. once a row is selected, it remains selected until another row is selected in its place.\n- `suppressTooltips`  {boolean} Set to true to prevent display tooltips.\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRow` {boolean} Indicates expandable rows will be used in the data grid.  See the expandable row section for more details.\n- `expandableRowTemplate` {string} Should point to the row `template` element for expandable rows.\n- `treeGrid` {boolean} Indicates a tree grid will be used  in the data grid. See the tree grid section for more details.\n- `showHeaderExpander` {boolean} Set to show header expander icon for expandable and tree rows.\n- `groupSelectsChildren` {boolean} If a tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `saveActivePage` {boolean} If set the active page on the pager will be saved to local storage.\n- `saveColumns` {boolean} If set columns will be saved to local storage.\n- `saveFilter` {boolean} If set filter will be saved to local storage.\n- `savePageSize` {boolean} If set the page size on the pager will be saved to local storage.\n- `saveRowHeight` {boolean} If set the row height will be saved to local storage.\n- `saveSortOrder` {boolean} If set column sort order will be saved to local storage.\n- `saveUserSettings` {boolean} If set all settings will be saved to local storage.\n- `emptyMessageDescription` {string} Set empty message description text.\n- `emptyMessageIcon` {string} Set empty message icon name.\n- `emptyMessageLabel` {string} Set empty message label text.\n- `suppressEmptyMessage` {boolean} Set to true to prevent display empty message.\n- `editable` {boolean} If true in addition to adding editors to columns the data grid is editable.\n- `editNextOnEnterPress` {boolean} If enabled when editing using <kbd>ENTER</kbd> will finish editing and start editing the same cell in next row and <kbd>SHIFT + ENTER</kbd> will edit the previous row.\n\n## Column Settings (General)\n\n|Setting|Type|Description|\n|---|---|---|\n|`id` | {string} | The unique id of the column. Each column in the grid should have some unique id.|\n|`name` | {string} | The text to show on the header.|\n|`field` | {string} | The name of the field (column) in the data array attached to the grid for example `description`. This can also be nested in an object for example `children.name`. |\n|`sortable` | {boolean} | If false, the column cannot be sorted. When completed a `sorted` event will fire.|\n|`resizable` | {boolean} | If false the column will not be resizable, thus is a fixed size and can never be changed by the user by dragging the left and right edge.  When completed a `columnresized` event will fire. See the `columns-resizable` example for a working example. |\n|`reorderable` | {boolean} | If true the column can be dragged into another position with adjacent columns. When completed a `columnmoved` event will fire. See the `columns-reorderable` example for a working example. This currently does not work with grouped columns. |\n|`readonly` | {boolean or Function} | If true the cell will be set to readonly color, indicating no editing.|\n|`disabled` | {boolean or Function} | If true the cell will be set to disabled color, indicating no editing.|\n|`formatter`| {Function} | Controls how the data is rendered in the cell.|\n|`hidden` | {boolean} | Excludes the column from being added to the DOM.|\n|`align` | {string} | Can be `left` or `right` or `center` to align both the cell and the header. Left is the default so does not need to be specified. |\n|`headerAlign` | {string} | Can be `left` or `right` or `center` to align just the header. Left is the default so does not need to be specified. |\n|`minWidth` | {number} | The minimum width used to prevent resizing a column below this size. |\n|`maxWidth` | {number} | The maximum width used to prevent resizing a column above this size. |\n|`cssPart` | {string} | Allows you to set the name of a css part that can be used to customize the cell's css. This can be a string or a function. See the columns-custom-css example. The default cssPart for cells is called `cell` and it also can be used for more global changes.  |\n|`frozen` | {string} | Sets the column to be frozen on either left or right side by passing `left` or `right`. See the `columns-frozen` example for a working example. Frozen columns currently have some limitations to be addressed in the future. |<!--lint disable maximum-line-length definition-case-->\n|`width` | {number or string} | The column width, this can be an integer for fixed pixel width or a percent for example `10%`, if left off the columns will be sized to contents and to fit the width of the grid using the css table browsers handling (this is known as `auto` columns). I.E. There are three column configurations: `auto`, `fixed` and `percent`. <br /><br />In addition one can specify any css grid column setting like `fr` or `ch`. In order to make what was called a `stretchColumn` in previous versions you can set the width to`minmax(130px, 4fr)`. This is some minimum width and a `fr` unit equal to the remaining number of columns (see example columns-stretch.html). For a spacer column you just need to specify one extra column at the end (see example columns-fixed.html) but this is not recommended for how it looks. |<!--lint enable maximum-line-length definition-case-->\n|`headerIcon` | {string} | Allows you to set the name of the header icon. |\n|`tooltipOptions` | {Object or Function} | Allows you to set the tooltip options. See the tooltip example. |\n|`tooltip` | {string or Function} | Let you set the tooltip content. |\n|`headerTooltip` | {string} | Let you set the header title tooltip content. |\n|`headerIconTooltip` | {string} | Let you set the header icon tooltip content. |\n|`filterButtonTooltip` | {string} | Let you set the header filter button tooltip content. |\n|`tooltipCssPart` | {string or Function} | Allows you to set the name of a tooltip css part that can be used to customize the tooltip css. This can be a string or a function. See the columns-custom-css example.\n|`headerTooltipCssPart` | {string} | Allows you to sets the header tooltip css part.\n|`headerIconTooltipCssPart` | {string} | Allows you to sets the header icon tooltip css part.\n|`filterButtonTooltipCssPart` | {string} | Allows you to sets the filter button tooltip css part.\n|`cellSelectedCssPart` | {string} | Allows customization of a selected cell's background color.\n|`editor` | {object} | Adds an editor to the column if editable is set on the grid. See editing section for more details.\n\n## Column Settings (Specific)\n\n|Setting|Type|Description|\n|---|---|---|\n|`href` | {string|Function} | Used to create the href for hyperlink formatters. This can be a string or a function that can work dynamically. It can also replace `{{value}}` with the current value. |\n|`text` | {string} | Used to create the txt value for hyperlink formatters if a hard coded link text is needed. |\n|`disabled` | {boolean|Function} | Sets the cell contents to disabled, can also use a callback to determine this dynamically. Only checkboxes, radios, buttons and link columns can be disabled at this time. Selection columns require disabled rows in order to not be clickable/selectable. |\n|`uppercase` | {boolean} | Allows you to set the text as uppercase. |\n\n## Formatters\n\n|Formatter|Description|\n|---|---|\n|`text` | (Default) Formats the column value as a direct text element using toString in the grid cell. Undefined or Null values will be shown as empty.|\n|`password` | Formats the column value masking the string length with stars. Undefined or Null values will be shown as empty. This is good for private data. |\n|`rowNumber` | Formats the cell with a row number column that is shown 1 to n no matter what the sort order is. |\n|`date` | Formats date data as a date string in the desired format, by default it will use `dateStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`time` | Formats date data as a time string in the desired format, by default it will use `timeStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`decimal` | Formats number data as a decimal string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`integer` | Formats number data as a integer string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`selectionCheckbox` | Displays a checkbox column for selection when using `rowSelection=\"mixed\"` or `rowSelection=\"multiple\"`|\n|`selectionRadio` | Displays a checkbox column for selection when using `rowSelection=\"single\"` |\n| `button` | Displays an `ids-button`. Other column settings like `type` can be used to set the button type as can `icon` by set for icon only buttons. Use the `click` setting/function to get an callback handler. |\n| `hyperlink` | Displays an `ids-hyperlink`. Other column settings like `href` can be used to set the link href and `text` can be used to set the text to specific text. Use the `click` setting/function to get an callback handler. |\n| `checkbox` | Displays an `ids-checkbox`. The value will be checked depending on if the attached field is true or `\"true\"`. |\n| `badge` | Displays an `ids-badge`. The associated field will be placed in the badge. The `color` option can also be set to set the ids-badge color setting. |\n| `alert` | Displays `ids-alert` element, and the field value will appear in a tooltip. An `icon` option can be provided as an override.|\n| `color` | Displays `ids-color` element. If a `color` option is provided as an override, the field's value will appear in a tooltip. |\n| `icon` | Displays the field value as an `ids-icon`. An `icon` option can be provided as an override, and the field value will appear beside this `icon` override. A `size` option can also be provided. |\n| `favorite` | Displays the field value as a `star-filled` if true or `star-outlined` if false. A `size` option can be provided as an override. |\n| `tag` | Displays the field value as an `ids-tag`. A `color` option can be provided as an override. |\n| `progress` | Displays the field value as an `ids-progress`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `rating` | Displays the field value as an `ids-rating`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `slider` | Displays the field value as an `ids-slider`. A `text` option can be provided to customize the label. A `color`, `max`, `min` and `type` option can be provided as overrides. |\n| `stepChart` | Displays the field value as an `ids-step-chart`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `image` | Displays the field value as an `ids-image`. A `text` option can be provided to the `alt` and `title` attributes. |\n\n### Deprecated Formatters (Deprecated from 4.x)\n\n- `Input` No longer suggested to use, use simple list instead or a Text Formatter.\n- `Status, Color` No longer used, but badges can be used.\n- `Placeholder` Can now be set on the column and used with other formatters\n- `Ellipsis` Is now always enabled.\n- `Readonly` Can now be set on the column and used with other formatters\n- `Drilldown` Use button formatter with an icon.\n- `Template` is now deprecated for performance reasons, use a custom formatter now.\n- `ClassRange` Use column cssClass function or string\n- `Autocomplete, Lookup, TargetedAchievement, ProcessIndicator, Spinbox, Fileupload, Dropdown, Colorpicker, Tree, SummaryRow, GroupFooterRow, GroupRow, Expander, Editor, Textarea, Actions, RowReorder` May be added later\n\n## Custom Formatters\n\nIt is possible to create your own custom formatter. The idea behind the formatter is it takes the cell value and does processing on it to return the correct markup for the cell. The simplest custom formatter would be this example.\n\n```js\ncolumns.push({\n  id: 'custom',\n  name: 'Custom',\n  field: 'price',\n  formatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n    const value = `Custom: ${rowData[columnData.field] || '0'}`;\n    return `<span class=\"text-ellipsis\">${value}</span>`;\n  }\n});\n```\n\nTo style a custom formatter you may need to add a css part for the element. For example:\n\n```js\nformatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n  const value = `${rowData[columnData.field] || ''}`;\n  return `<a part=\"custom-link\" href=\"#\" class=\"text-ellipsis\">${escapeHTML(value)}</a>`;\n},\n```\n\nThen in the style sheet you add for you page you put the styles.\n\n```css\nids-data-grid::part(custom-link) {\n  color: #da1217;\n}\n\nids-data-grid::part(custom-link):hover {\n  color: #6c080b;\n}\n```\n\nThe formatter is then linked via the column on the formatter setting. When the grid cell is rendered the formatter function is called and the following arguments are passed in.\n\n- `rowData` The current row's data from the data array.\n- `columnData` The column object with all of the column configuration for this cell.\n\n## Events\n\n- `activecellchanged` Fires when the active cell changes with the keyboard or by click.\n- `sorted` Fires when the sort column is changed.\n- `selectionchanged` Fires any time the selection changes.\n- `activationchanged` Fires any time the active row changes.\n- `rowselected` Fires for each row that is selected.\n- `rowdeselected` Fires for each row that is deselected.\n- `rowactivated` Fires for each row that is activated.\n- `rowdeactivated` Fires for each row that is deactivated.\n- `rowclick` Fires for each row that is clicked.\n- `dblclick` Fires each time double clicked on body cells or header cells. Based on where it clicked details can be capture like `type: 'body-cell'|'header-title'|'header-filter'` etc.\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n- `columnresized` Fires when a column is resized or setColumnWidth is called.\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto\n- `rowExpanded` Fires when a tree or expandable row is expanded or collapsed\n- `rowCollapsed` Fires when a tree or expandable row is expanded or collapsed\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called.\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto.\n- `beforemenushow` Fires before context menu show, you can return false in the response to veto.\n- `menushow` Fires after context menu show.\n- `menuselected` Fires after context menu item selected.\n- `settingschanged` Fires after settings are changed in some way.\n- `scrollstart` Fires when data-grid reaches the topmost row.\n- `scrollend` Fires when data-grid reaches the bottommost row.\n- `afterrendered` Fires after rendered the data grid.\n\n## Methods\n\n- `setColumnWidth` Can be used to set the width of a column.\n- `setColumnVisibility` Can be used to set the visibility of a column.\n- `setActivateCell(cell, row)` Can be used to set focus of a cell.\n- `selectedRows` Lists the indexes of the currently selected rows.\n- `saveSetting(setting: string)` Save the given setting to local storage.\n- `saveAllSettings` Save all user settings to local storage.\n- `savedSetting(setting: string)` Get saved given setting value from local storage.\n- `allSavedSettings` Get saved all user settings from local storage.\n- `clearSetting(setting: string, key?: string)` Clear the given saved setting from local storage.\n- `clearAllSettings(userKeys: unknown)` Clear saved all user settings from local storage.\n- `restoreSetting(setting: string, value?: unknown)` Restore the given saved setting from local storage.\n- `editFirstCell` Puts the first cell on the active row into edit mode.\n- `appendData(data: Record<string, unknown>)` Use this to add more data to the datagrid's existing dataset.  This will automatically render additional rows in the datagrid.\n- `addRow(data: Record<string, unknown>, index?: number)` Adds a new row at optional row index and defaults the values to all those provided in the data\n- `addRows(data: Array<Record<string, unknown>>, index?: number)` Adds multiple new rows at optional row index and defaults the values to all those provided in the data\n- `removeRow(index: number)` Removed the provided row index from the dataset and visual datagrid\n- `clearRow(index: number)` Clears all values on the given row.\n- `commitCellEdit` Stops editing and commits the value in the active editor.\n- `cancelCellEdit` Stops editing and reverts the value in the active editor.\n- `resetDirtyCells` Clears all dirty cell indicators.\n- `dirtyCells` Gives a list of all currently dirty cells.\n- `exportToExcel(format: 'csv' | 'xlsx', filename: string, keepGridFormatting: boolean)` Export datagrid datasource to an excel file. This keeps grid formatting by default.\n- `collapseAll()` Collapse all expandable or tree rows.\n- `expandAll()` Expand all expandable or tree rows.\n- `toggleAll(opt: boolean)` Toggle collapse/expand all expandable or tree rows. `opt false`: will expand all, `opt: true`: will collapse all\n- `refreshRow` IdsDataGridRow method to refresh row element and its cells.\n- `refreshCell` IdsDataGridCell method to refresh cell element.\n- `updateDataset(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row.\n- `updateDatasetAndRefresh(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row and refreshes row/cells UI.\n\n## Filters\n\nData rows can be filter based on one or several criteria. Whole filter row can turned on/off by the api setting `filterable` and can be disabled by the api setting `filter-row-disabled`. The filter conditions can be applied thru the UI or programmatically. Each column can have its own filter type and turn on/off by columns setting.\n\n### Filter Columns Setting\n\nAll the filter settings can be passed thru columns data.\n\n|Setting|Type|Description|\n|---|---|---|\n|`filterType` | Function | Data grid built-in filter method, see the dedicated section below. |\n|`filterConditions` | Array | List of items to be use as operators in menu-button or options in dropdown. |\n|`filterFunction` | Function | User defined filter method, it must return a boolean. |\n|`filterOptions` | Object | Setting for components are in use, for example: `label, placeholder, disabled`. |\n|`isChecked` | Function | User defined filter method, it must return a boolean. This method use along built-in `checkbox` only, when filter data value is not boolean type. |\n\n### Built-in Filter Methods\n\n|Method|Description|\n|---|---|\n|`text` | It filter as text comparison. Contains input and menu-button with list of default operators. |\n|`integer` | It filter as integer comparison. Contains input and menu-button with list of default operators. |\n|`decimal` | It filter as decimal comparison. Contains input and menu-button with list of default operators. |\n|`contents` | It filter as text comparison. Contains dropdown and auto generate list of items based on column data. |\n|`dropdown` | It filter as text comparison. Contains dropdown and must pass list of item by setting `filterConditions`. |\n|`checkbox` | It filter as boolean comparison. Contains menu-button with list of default operators. |\n|`date` | It filter as date comparison. Contains date-picker and menu-button with list of default operators. |\n|`time` | It filter as time comparison. Contains time-picker and menu-button with list of default operators. |\n\n### Custom Filter\n\nIf the built-in filters are not enough, creating a custom filter is an option. There are two parts you can create both parts custom or mix-match with built-in.\n\n1. `UI Only` In order to do custom UI part of filter, add as html markup thru a slot. It must use slot and column-id attributes for example: `<div slot=\"filter-n\" column-id=\"n\">...</div>` where n is the columnId same passed in the columns.\n1. `filterFunction` This is a user defined filter method which must return a boolean. It determines if a cell value should be considered as a valid filtered value.\n1. `disableClientFilter` This is an api setting to disable filter logic client side. It will set filter conditions and fire an event `filtered` which can listen for custom logic.\n\n### Filter Code Examples\n\nBasic text filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nNo filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"false\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisabled filter row, will disabled all attached filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\" filter-row-disabled=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nHyperlink, integer, decimal, date and time filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'hyperlink',\n  name: 'Hyperlink',\n  field: 'description',\n  href: '#',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.hyperlink\n});\ncolumns.push({\n  id: 'integer',\n  name: 'Integer',\n  field: 'price',\n  filterType: dataGrid.filters.integer,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'decimal',\n  name: 'Decimal',\n  field: 'price',\n  filterType: dataGrid.filters.decimal,\n  formatter: dataGrid.formatters.decimal,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'date',\n  name: 'Date',\n  field: 'publishDate',\n  filterType: dataGrid.filters.date,\n  formatter: dataGrid.formatters.date\n});\ncolumns.push({\n  id: 'time',\n  name: 'Time',\n  field: 'publishDate',\n  filterType: dataGrid.filters.time,\n  formatter: dataGrid.formatters.time\n});\n```\n\nSome filter options label, placeholder, disabled.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterOptions: {\n    label: 'Label text for description input',\n    placeholder: 'Placeholder text for description input',\n    disabled: true\n  }\n});\n```\n\nCustom operators items for menu-button.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterConditions: [{\n    value: 'contains',\n    label: 'Contains',\n    icon: 'filter-contains'\n  },\n  {\n    value: 'equals',\n    label: 'Equals',\n    icon: 'filter-equals',\n    selected: true\n  }]\n});\n```\n\nContents and dropdown type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'location',\n  name: 'Location',\n  field: 'location',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.contents,\n  filterOptions: {\n    notFilteredItem: { value: 'not-filtered', label: 'Not Filtered' }\n  }\n});\ncolumns.push({\n  id: 'useForEmployee',\n  name: 'NotFilterdItem (shown as blank)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\ncolumns.push({\n  id: 'useForEmployeeCustomNotFilterdItem',\n  name: 'NotFilterdItem (show as custom text)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'not-filtered', label: 'Not Filtered' },\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\n```\n\nCheckbox type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'checkbox',\n  name: 'Checkbox',\n  field: 'inStock',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox\n});\ncolumns.push({\n  id: 'customCheckMethod',\n  name: 'Custom check method',\n  field: 'active',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox,\n  isChecked: (value) => value === 'Yes'\n});\n```\n\nCustom filter method.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\n// Custom filter checking\nconst myCustomFilter = (opt) => {\n  const { operator, columnId, value } = opt.condition;\n  const val = {\n    condition: Number.parseInt(value, 10),\n    data: Number.parseInt(opt.data[columnId], 10)\n  };\n  let isMatch = false;\n  if (Number.isNaN(val.condition) || Number.isNaN(val.data)) return isMatch;\n\n  if (operator === 'equals') isMatch = (val.data === val.condition);\n  if (operator === 'greater-than') isMatch = (val.data > val.condition);\n  if (operator === 'greater-equals') isMatch = (val.data >= val.condition);\n  if (operator === 'less-than') isMatch = (val.data < val.condition);\n  if (operator === 'less-equals') isMatch = (val.data <= val.condition);\n\n  return isMatch;\n};\n\nconst columns = [];\ncolumns.push({\n  id: 'customFilterMethod',\n  name: 'Custom Filter Method',\n  field: 'price',\n  filterFunction: myCustomFilter,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\n```\n\nCustom filter UI part.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n  <div slot=\"filter-description\" column-id=\"description\">\n    <ids-menu-button id=\"btn-filter-description\" icon=\"filter-greater-equals\" menu=\"menu-filter-description\" dropdown-icon>\n      <span class=\"audible\">Greater Than Or Equals</span>\n    </ids-menu-button>\n    <ids-popup-menu id=\"menu-filter-description\" target=\"#btn-filter-description\">\n      <ids-menu-group select=\"single\">\n        <ids-menu-item value=\"equals\" icon=\"filter-equals\">Equals</ids-menu-item>\n        <ids-menu-item value=\"greater-than\" icon=\"filter-greater-than\">Greater Than</ids-menu-item>\n        <ids-menu-item value=\"greater-equals\" icon=\"filter-greater-equals\" selected=\"true\">Greater Than Or Equals</ids-menu-item>\n        <ids-menu-item value=\"less-than\" icon=\"filter-less-than\">Less Than</ids-menu-item>\n        <ids-menu-item value=\"less-equals\" icon=\"filter-less-equals\">Less Than Or Equals</ids-menu-item>\n      </ids-menu-group>\n    </ids-popup-menu>\n    <ids-input id=\"input-filter-description\" type=\"text\" size=\"full\" placeholder=\"Slotted description\" label=\"Slotted description input\">\n    </ids-input>\n  </div>\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisable client filter\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" disable-client-filter=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n\ndataGrid.addEventListener('filtered', (e: any) => {\n  console.info('filtered:', e.detail);\n});\n```\n\n### Filter rows programmatically\n\n```js\n// Filter rows\nconst conditions = [{ columnId: 'description', operator: 'contains', value: '5' }];\ndataGrid.applyFilter(conditions);\n\n// Reset all filters\ndataGrid.applyFilter([]);\n```\n\n### Filter Events\n\nThe following events are relevant to data-grid filters.\n\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n\n## Custom cell colors\n\nIn some cases, it may be desirable to customize the background color of cells.  This can be done with the `cssPart` column setting:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell'\n});\n```\n\nThe `cssPart` property is translated into a `part` attribute that is applied to every cell in the column.  In the event the color needs to be conditional based on the row index or other logic, a function can be used:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2')\n  // ...\n});\n```\n\nAfter this is defined, accompanying CSS can be written to target the parts `custom-cell`, `custom-cell-1`, and `custom-cell-2` to change background color or other CSS properties of the cell:\n\n```css\nids-data-grid::part(cell) {\n  background-color: #ebf9f1;\n}\n\nids-data-grid::part(cell-selected) {\n  background-color: #c9dad0;\n}\n```\n\n### Changing selected cell colors\n\nAnother column setting, `cellSelectedCssPart` can be used alongside `cssPart` to customize the selected color of the row in a similar way.  When using `mixed` selection, this color is also applied to activated rows:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell',\n  cellSelectedCssPart: 'custom-cell-selected'\n});\n```\n\nThis column setting can also be a function, just like `cssPart`:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2'),\n  cellSelectedCssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-selected-1' : 'custom-cell-selected-2')\n  // ...\n});\n```\n\n## Tooltip Code Examples\n\nSet suppress tooltips to turn off.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" suppress-tooltips>\n</ids-data-grid>\n```\n\nSet custom tooltip strings.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: 'This is a product Id',\n  headerTooltip: 'This is the product Id header title',\n  headerIconTooltip: 'This is product Id header icon',\n  filterButtonTooltip: 'This is the product Id filterButton'\n});\n```\n\nSet tooltip as callback.\n\n```js\nconst tooltipCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return `Text: ${text}<br/>Header Row: ${rowIndex}, Cell: ${columnIndex}`;\n  } else if (type === 'filter-button') {\n    return `Text: ${text}<br/>FilterButton Row: ${rowIndex}, Cell: ${columnIndex}`;\n  }\n  return `Text: ${text}<br/>for Row: ${rowIndex}, Cell: ${columnIndex}`;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: tooltipCallback\n});\n```\n\nSet tooltip custom options.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: {\n    placement: 'top',\n    headerPlacement: 'top',\n    headerIconPlacement: 'top',\n    filterButtonPlacement: 'bottom',\n    x: 0,\n    y: 10,\n    headerX: 0,\n    headerIconX: 0,\n    headerY: 10,\n    headerIconY: 10,\n    filterButtonX: 0,\n    filterButtonY: 22\n  }\n});\n```\n\nSet tooltip options as callback.\n\n```js\nconst tooltipOptionsCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return { headerPlacement: 'top', headerX: 0, headerY: 10 };\n  } else if (type === 'header-icon') {\n    return { headerIconPlacement: 'top', headerIconX: 0, headerIconY: 10 };\n  } else if (type === 'filter-button') {\n    return { filterButtonPlacement: 'bottom', filterButtonX: 0, filterButtonY: 22 };\n  }\n  return { placement: 'top', x: 0, y: 10 };\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: tooltipOptionsCallback\n});\n```\n\nSet tooltip custom css.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: 'custom-turquoise',\n  headerTooltipCssPart: 'custom-turquoise',\n  headerIconTooltipCssPart: 'custom-turquoise',\n  filterButtonTooltipCssPart: 'custom-turquoise'\n});\n```\n```css\n/* tooltip css part `custom-turquoise` */\nids-data-grid::part(custom-turquoise-tooltip-arrow-top)::after {\n  border-top-color: #2f8d8e;\n}\nids-data-grid::part(custom-turquoise-tooltip-popup) {\n  background-color: #2f8d8e;\n}\n```\n\nSet tooltip custom css as callback.\n\n```js\nconst tooltipCssPartCallback = (args: { type: string }): string => {\n  const { type } = args;\n  let cssPart = '';\n  // Set random css part each time, for `body-cell` tooltips\n  if (type === 'body-cell') {\n    const parts = ['azure', 'ruby'];\n    const randomIndex = Math.floor(Math.random() * parts.length);\n    cssPart = parts[randomIndex];\n  }\n  return cssPart;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: tooltipCssPartCallback\n});\n```\n```css\n/* tooltip css part `azure` */\nids-data-grid::part(azure-tooltip-arrow-top)::after {\n  border-top-color: #0066d4;\n}\nids-data-grid::part(azure-tooltip-popup) {\n  background-color: #0066d4;\n}\n\n/* tooltip css part `ruby` */\nids-data-grid::part(ruby-tooltip-arrow-top)::after {\n  border-top-color: #c31014;\n}\nids-data-grid::part(ruby-tooltip-popup) {\n  background-color: #c31014;\n}\n```\n\n## context menu Code Examples\n\nThe context menus can be set via the dataset.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n</ids-data-grid>\n```\n```js\n// Dataset for header cells context menu\nconst headerMenuData = {\n  id: 'grid-header-context menu',\n  contents: [{\n    id: 'header-actions-group',\n    items: [\n      { id: 'actions-split', value: 'actions-split', text: 'Split' },\n      { id: 'actions-sort', value: 'actions-sort', text: 'Sort' },\n    ]\n  }],\n};\n\n// Dataset for body cells context menu\nconst menuData = {\n  id: 'grid-context menu',\n  contents: [{\n    id: 'actions-group',\n    items: [\n      { id: 'item-1', value: 'item-1', text: 'Item One' },\n      { id: 'item-2', value: 'item-2', text: 'Item Two' },\n      { id: 'item-3', value: 'item-3', text: 'Item Three' }\n    ]\n  }],\n};\n\n// Set context menu data with data-grid\ndataGrid.menuData = menuData;\ndataGrid.headerMenuData = headerMenuData;\n\n// Set to return true/false in the response to veto before context menu show.\ndataGrid.addEventListener('beforemenushow', (e: any) => {\n  console.info('before context menu show', e.detail);\n  // e.detail.response(false);\n});\n\n// Set to watch after context menu show.\ndataGrid.addEventListener('menushow', (e: any) => {\n  console.info('After context menu show', e.detail);\n});\n\n// Set to watch after context menu item selected.\ndataGrid.addEventListener('menuselected', (e: any) => {\n  console.info('context menu item selected', e.detail);\n});\n```\n\nSet context menu thru Slot.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n  <!-- context menu header cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"header-context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n      <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n  <!-- context menu body cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n      <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n      <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n      <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n</ids-data-grid>\n```\n\nSet context menu thru ID.\n\n```html\n<ids-data-grid\n  header-menu-id=\"grid-header-context menu\"\n  menu-id=\"grid-context menu\"\n  id=\"data-grid-1\"\n  label=\"Books\"\n></ids-data-grid>\n\n<!-- context menu header cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-header-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n    <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n\n<!-- context menu body cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n    <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n    <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n    <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n```\n\n## Empty Message\n\nSet empty message thru slot (markup).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-slot\" label=\"Books\">\n  <ids-empty-message hidden icon=\"empty-search-data-new\" slot=\"empty-message\">\n    <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">No Data</ids-text>\n    <ids-text hidden label=\"true\" slot=\"description\">There is no data available.</ids-text>\n  </ids-empty-message>\n</ids-data-grid>\n```\n\nSet empty message thru settings (markup).\n\n```html\n<ids-data-grid\n  id=\"data-grid-em-thru-settings\"\n  label=\"Books\"\n  empty-message-icon=\"empty-error-loading-new\"\n  empty-message-label=\"No Data\"\n  empty-message-description=\"There is no data available.\"\n></ids-data-grid>\n```\n\nSet empty message thru settings (javascript).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-settings-js\" label=\"Books\">\n</ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-em-thru-settings-js');\ndataGrid.emptyMessageIcon = 'empty-error-loading-new';\ndataGrid.emptyMessageLabel = 'No Data';\ndataGrid.emptyMessageDescription = 'There is no data available.';\n```\n\n## Row Height\n\nAs mentioned in the settings section you can change the row height by setting the rowHeight option.\n\n```html\n     <ids-data-grid id=\"data-grid-row-height\" row-height=\"md\"></ids-data-grid>\n```\n\nIts worth mentioning the characteristics and usage for each one.\n\nLarge (`row-height=\"lg\"`) - Row Height is 50. The default row height, header is 16px and body cells are 16px. 16px padding on cells and header. You should use this most of the time if there is plenty of room on the UI and to avoid the UI looking crowded.\nMedium (`row-height=\"md\"`) - Row Height is 40. Header is 16px and body cells are 16px. 12px padding on cells and header. If you need to see a few more rows but still want to avoid a crowded UI, this is the next best option.\nSmall (`row-height=\"sm\"`) - Row Height is 35. Header is 16px and body cells are 16px. 8px padding on cells and header. This is the smallest option that is recommended for readability and spacing.\nExtra Small (`row-height=\"xs\"`) - Row Height is 30. Header is 14px and body cells are 14px. 8px padding on cells and header. If you need a very compressed data grid with a lot of data you can use this option. But there is a trade off of bad readability and spacing.\nExtra Extra Small (`row-height=\"xxs\"`) - Row Height is 25. Header is 14px and body cells are 14px. 2px padding on cells and header. Avoid this option as it is very crowded but it is included for edge cases.\n\n## States and Variations\n\n**Rows**\n- Hover\n- Selected\n- Disabled\n- Readonly\n- Activated\n\n**Columns**\n- Focus\n- Hover\n- Sorted\n- Selected\n- Disabled\n- Filtered\n\n**Cells**\n- Hover (sometimes a cursor change)\n- Readonly\n- Focus\n- Checked/Not Checked (Checkboxes)\n\n## Keyboard Guidelines\n\n- <kbd>Tab</kbd>The initial tab enters the grid with focus on the first cell of the first row, often a header. A second tab moves out of the grid to the next tab stop on the page. Once focus is established in the grid, a TAB into or a Shift Tab into the grid will return to the cell which last had focus. If in edit mode will finish editing and start editing the next cell.\n- <kbd>Shift + Tab</kbd> Moves the reverse of tab. If in edit mode will finish editing and start editing the previous cell.\n- <kbd>Left</kbd> and <kbd>Right</kbd> Move focus to the adjacent column's cell. There is no wrap at the end or beginning of columns.\n- <kbd>Up</kbd> and <kbd>Down</kbd> Move focus to the adjacent row's cell. There is no wrap at the first or last row.\n- <kbd>Home</kbd> moves focus to the first cell of the current row\n- <kbd>End</kbd> moves focus to the last cell of the current row\n- <kbd>Page Up</kbd> moves focus to the first cell in the current column\n- <kbd>Page Down</kbd> moves focus to the last cell in the current column\n- <kbd>Space</kbd> Toggles selection the activate row. If suppressRowDeselection is set it will be ignored on deselect. If the cell contains an expandable element then the row will toggle the expanded state. If the cell contains a checkbox editor, will toggle the checkbox state.\n- <kbd>F2</kbd> toggles actionable mode. Pressing the <kbd>Tab</kbd> key while in actionable mode moves focus to the next actionable cell. While in actionable mode you can do things like type + enter. This will move you down a row when you hit enter. If the cell has a control that uses down arrow (like the drop downs or lookups that are editable). Then the user needs to hit enter to enable the edit mode on that cell.\n- <kbd>Triple Click</kbd> Not a keyboard shortcut, but if you have text in a cell that is overflowed a triple click will select all the text even the part that is invisible.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Enter</kbd> Activates edit mode on the cell if it is editable. There is also an \"auto edit detection\". If the user starts typing then edit mode will happen automatically without enter. If in edit mode already <kbd>Enter</kbd> will finish edit mode. If `editNextOnEnterPress` is enabled then editing will start on the same column in next row.\n- <kbd>Shift + Enter</kbd> Same as enter but if `editNextOnEnterPress` is enabled then editing will start on the same column in previous row.\n- <kbd>F2</kbd> Finish editing same as Enter. But if `editNextOnEnterPress` is enabled, will stay in same cell. `cancelEditMode` will fire.\n- <kbd>CMD/CTRL + Enter</kbd> Finish editing same as Enter.\n- <kbd>ESC</kbd> Revert to the previous value and cancel editing. `cancelEditMode` will fire.\n\n## Responsive Guidelines\n\n- By default, data grid grows depending on the amount of contents within and will scroll if necessary under the header. It stops growing when it reaches the size of the parent container.\n- `autoFit` property or `auto-fit` attribute can be set manually to make the data grid size fill and be responsive to the size of the screen, regardless of the amount of contents.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Counts have all new markup and classes.\n\n**4.x to 5.x**\n- Data grid has all new markup and a custom element but some similarly named options\n- Still uses same columns and data set options. Some column options enhanced and changed.\n- If using events events are now plain JS events for example: sorted, rendered\n- Some Api Functions have changed\n- If using properties/settings these are now attributes or as plain properties for example: data, virtual-scroll\n- Markup has changed to a custom element `<ids-data-grid></ids-data-grid>`\n- Can now be imported as a single JS file and used with encapsulated styles\n- `Drill Down` Formatter is now covered by `Button` formatter with `icon=\"drilldown\"`\n- `textOverflow` setting is now by default\n- `rowNavigation` setting has replaced `cellNavigation`. Cell navigation is the default behavior.\n- `stretchColumn` is now more flexible and can be achieved by setting a column width to `minmax(130px, 4fr)`. I.E. some min width and a `fr` unit equal to the remaining number of columns (or similar variations).\n- split columns are not supported anymore but could be done with a custom formatter if needed\n- `frozenColumns` setting is now set on each column by adding `frozen: 'left'` or `frozen: 'right'` to the column definition.\n- Some events are renamed see the events section for more details, also the signature of the events has changed.\n- Custom formatter functions can now be any type of function and have a different signature.\n- The `expanded` column option for tree was renamed to `rowExpanded`.\n- The `expandrow/collapserow` events are renamed to `rowexpanded/rowcollapsed`\n- The `beforeentereditmode/entereditmode/exiteditmode` event is renamed to `beforecelledit/celledit/endcelledit/cancelcelledit`\n- The `actionablemode` feature has been replaced with simply tabbing to the next editable field when in edit mode.\n\n## Accessibility Guidelines\n\n1.1.1 Non-text Content - All images, links and icons have text labels for screen readers when the formatters are used.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and links and images of text has a contrast ratio of at least 4.5:1.\n- 2.1.1 Keyboard - Make all functionality available from a keyboard. The grid has keyboard shortcuts and is usable with a screen reader due to the addition of aria tags.\n- A datagrid in general including this one uses the following aria tags\n  - `aria-label` labels the enter table on the main table\n  - `aria-rowcount` lists the visible row count on the main table\n  - `aria-colindex` the index of each column on the column elements\n  - `aria-rwindex` the index of each row on the row elements\n  - `aria-setsize` for tree grid lists the number of elements in each level (group)\n  - `aria-level` the level of indentation\n  - `aria-posinset` the depth into each set\n  - `aria-expanded` on the row it indicates if the row is expanded (for tree and expandable row)\n  - `aria-sort` indicates the sort direction on the sortable columns\n  - `aria-checked` indicates if the element is checked on checkbox columns and headers\n\n## Regional Considerations\n\nTitles and labels should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n\n## Code Separation (For Developers)\n\nThe code is divided into several files. Here is a description of where everything is.\n\n- `ids-data-grid-cell.ts` creates a non-shadow root `ids-data-grid-cell`, and handles its own selection, and activation.\n- `ids-data-grid-cell.scss` contains all css related to `.ids-data-grid-cell` and its children\n- `ids-data-grid-contextmenu.ts` contains code in the form of export functions, that adds ability to get right click menus on headers and cells\n- `ids-data-grid-filter.scss` contains all css related to the filter row and its children\n- `ids-data-grid-filter.ts` contains code to implement the filtering functionality and its ui (some functions are in ids-data-source)\n- `ids-data-grid-formatters.ts` contains all formatter functions and some supporting code like data extraction\n- `ids-data-grid-header.ts` contains most header functionality, the header template, and code related to header actions like sort, reorder and selection.\n- `ids-data-grid-header.scss` contains all css related to `.ids-data-grid-header` and its children\n- `ids-data-grid-row.ts` contains most row functionality, the row template, and code related to row actions like expand, collapse, select, activate\n- `ids-data-grid-row.scss` contains all css related to `.ids-data-grid-row` and its children\n- `ids-data-grid-tooltip-mixin.js` contains a tooltip mixin that adds tooltip functionality to cells and headers, its different from `ids-tooltip-mixin` (more specific)\n- `ids-data-grid.js` contains all main data grid code, the api and settings and the main generator loop for the data grid\n"}},{"name":"ids-data-grid-container-arguments","description":{"kind":"markdown","value":"# Ids Data Grid\n\n## Description\n\nThe data grid component (ids-data-grid) is used to arrange tabular data in rows and columns for easier scanning and comparison. Data grids are very configurable in both design and functionality and they can be found within almost every product/app.\n\nYou should pass an array of objects in to the grid on the `dataset` object. Also pass the `columns` array which contains the column configuration. There are a number of events described in the events and API section, as well as the column settings.\n\nA Read-Only data grid uses \"Formatters\" to render cell content. A number of these are listed in the API section and it is possible to create your own.\n\n## Use Cases\n\n- The data grid component is most useful when it is used for categorically sorting dense and repetitive information. Each individual item is listed down the Y axis of the chart, and their shared attribute categories are listed along the X axis. The resulting cells are filled with information that is relevant to the corresponding item and attribute.\n\n## Terminology\n\n- **Title**: The name of the data grid optionally appearing above the grid and describing the contents.\n- **Options**: An optionally actions menu button with functionality that operates on the entire data grid.\n- **Cell**: Body elements of the data grid that contain an object's value or attribute. Cells should only contain one type of content or it can be confusing and hurt accessibility.\n- **Header Cell**: These cells contain the names of the columns in the grid and related functions like filtering and sorting. All cells below the header cell will hold values related to the attribute in the header cell.\n- **Column**: Cells stacked vertically that contain values relate to the attribute found on the top header cell.\n- **Row**: Each row contains one cell per column in the data grid, and each cell displays a single value in the bound data item.\n- **Tree**: Denotes the use of hierarchical data, with an expandable and collapsible hierarchy.\n\n## Themeable Parts\n\n- `table` allows you to further style the table main element\n- `container` allows you to further style the container element\n- `body` allows you to further style the body element\n- `header` allows you to further style the header element\n- `headerCell` allows you to further style the header cells\n- `row` allows you to further style the rows\n- `cell` allows you to further style the row cells\n- `cell-selected` allows you to further style row cells that are selected (in mixed-selection mode, activated cells are also styled)\n- `tooltip-popup` allows you to further style or adjust the outer tooltip popup element\n- `tooltip-arrow` allows you to adjust the tooltip arrow element\n\n## Features (With Code Examples)\n\nA data grid is created by adding an `ids-data-grid` html element in the page and setting the options either inline in the markup or in the JS part of the code. You can only use simple types (string, boolean ect) for inline markup so passing the data and column arrangement is always done in the JS part. The data will be an array of objects so its in the correct tabular form. The columns are also an array of objects but with defined options and types. See more about columns in next section.\n\n```html\n<ids-data-grid id=\"data-grid-1\"></ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-1');\ndataGrid.data = dataset;\ndataGrid.columns = columns;\n```\n\n### Column Groups\n\nSetting column groups allows you to add a second level of columns in your header and the ability to group the first level. This is useful for when you have a large number of columns and you want to group them into logical or related sections.\n\nColumn groups are achieved by providing an array to the `columnGroups` setting. Only one level of column groups can be defined.\n\n```js\ndataGrid.columnGroups = [\n{\n  colspan: 3,\n  id: 'group1',\n  name: 'Column Group One',\n  align: 'center'\n},\n{\n  colspan: 2,\n  id: 'group2',\n  name: 'Column Group Two'\n},\n{\n  colspan: 2,\n  id: 'group3',\n  name: 'Column Group Three',\n  align: 'right'\n},\n{\n  colspan: 11,\n  id: 'group4',\n  name: 'Column Group Four',\n  align: 'left'\n}\n];\n```\n\nIf the column is hidden it will be automatically removed from the `colspan`. If in the last group you didn't provided a bug enough `colspan` it will be set to the remaining columns. The `name` text can be right or left aligned and given an id. The only required property is `colspan`.\n\n### Selection\n\nThe data grid selection feature involves the setting `rowSelection`. This can be one of several values.\n\n- `false` No selection enabled.\n- `multiple` Allows multiple rows to be selected. When doing this it is recommended to add a `formatters.selectionCheckbox` for the first column.\n- `single` Allows a single row to be selected. When doing this you can optionally to add a `formatters.selectionRadio` for the first column. You can use the `suppressRowDeselection` if you want one row to always be selected.\n- `mixed` Allows multiple rows to be selected by clicking only on the checkbox or <kbd>Space</kbd> key. If clicking a row then that row is activated, meaning it is the current row and something might be shown based on the data of that row. You can use the `suppressRowDeactivation` if you want one row to always be selected.\n\nHere is a code example for multi select\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" row-selection=\"multiple\">\n</ids-data-grid>\n```\n\n```js\n  dataGrid.addEventListener('rowselected', (e) => {\n    console.info(`Row Selected`, e.detail);\n  });\n\n  dataGrid.addEventListener('rowdeselected', (e) => {\n    console.info(`Row Deselected`, e.detail);\n  });\n\n  dataGrid.addEventListener('selectionchanged', (e) => {\n    console.info(`Selection Changed`, e.detail);\n  });\n```\n\nThe following events are relevant to selection/activation.\n\n`rowselected` Fires when an individual row is activation and gives information about that row.\n`rowdeselected` Fires when an individual row is deselected and gives information about that row.\n`selectionchanged` Fires once for each time selection changes and gives information about all selected rows.\n\n`rowactivated` Fires when an individual row is activated and gives information about that row.\n`rowdeactivated` Fires when an individual row is deactivated and gives information about that row.\n`activationchanged` Fires once for each time activation changes and gives information about the active row.\n\n### Tree Grid\n\nThe tree grid feature involves the setting `treeGrid` to true. In addition the data passed to the tree grid should contain a field called `children`. That contains the child rows. This can by unlimited levels but 2-4 is recommended as a max for a more usable UI. In addition you can preset some states by adding `rowExpanded: false` to the parent elements (default is expanded). And also set `rowHidden: false` for child rows that are expanded. You also need a `Expander` formatter on a cell (usually the first visible cell.\n\nHere is a code example for a tree grid.\n\n```html\n<ids-data-grid id=\"tree-grid\" label=\"Buildings\" tree-grid=\"true\" group-selects-children=\"true\"></ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to selection/activation.\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `groupSelectsChildren` {boolean} If the tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `suppressRowClickSelection` {boolean} If using selection you might want to set this so clicking a row will not select it.\n### Expandable Row\n\nThe Expandable Row feature involves the setting `expandableRow` to true. In addition a row template should be provided via an id that points to the `expandableRowTemplate` which is a `template` element. You can preset the expandable state by adding `rowExpanded: true` to the row element you want to expand. The default is collapsed.\n\nHere is a code example for an expandable row\n\n```html\n<ids-data-grid\n    id=\"data-grid-expandable-row\"\n    expandable-row=\"true\"\n    expandable-row-template=\"expandable-row-tmpl\"\n    label=\"Books\">\n    <template id=\"expandable-row-tmpl\">\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"16\" type=\"span\">${convention}</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">${price} USD</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">Lorem Ipsum is simply sample text of the printing and typesetting industry. Lorem Ipsum has been the industry standard sample text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only...</ids-text>\n        </ids-layout-grid>\n    </template>\n</ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to expandable rows\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRowTemplate` {string} Should point to the row `template` element.\n\n### Editing\n\nThe Editing features start by setting `editable` to true. In addition you should add editors to columns and enable features of each of the editors. The features differ depending on the component used for editing. See the Keyboard section for information on which keys can be used when editing..\n\nHere is a code example for an editable text cell.\n\n```js\ncolumns.push({\n    id: 'description',\n    name: 'Description',\n    field: 'description',\n    sortable: true,\n    resizable: true,\n    reorderable: true,\n    formatter: dataGrid.formatters.text,\n    editor: {\n      type: 'input',\n      inline: true,\n      editorSettings: {\n        autoselect: true,\n        dirtyTracker: true\n      }\n    }\n  });\n```\n\nHere is a code example for an editable dropdown cell\n\n```js\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  resizable: true,\n  reorderable: true,\n  formatter: dataGrid.formatters.dropdown,\n  editor: {\n    type: 'dropdown',\n    editorSettings: {\n      dirtyTracker: true,\n      validate: 'required',\n      options: [\n        {\n          label: 'Option 1',\n          value: 'opt1'\n        },\n        {\n          label: 'Option 2',\n          value: 'opt2'\n        }\n      ]\n    }\n  }\n});\n```\n\nTo cancel or disabled editing there are a few ways:\n\n- setting the column `editor` setting to undefined will disable editing on the column (as will not having an editor setting at all).\n- adding a `readonly` or `disabled` function which returned true for some cells based on a condition will disable or mark the cell readonly.\n- return false in the `beforecelledit` event in the response function\n\nThe following settings are available on editors.\n\n`type` As of now can be `checkbox`, `input`, `datepicker`, `timepicker`, or `dropdown` but more will be added.\n`inline` Default is false. If true the editor (for example an input) will be visible in a field.\n`editorSettings` Is an object that is loosely typed that lets you pass any option the editor supports in. For example any of the IdsInput or IdsCheckbox options can be passing in. Some special ones are:\n`editorSettings.autoselect` Text will be selected when entering edit mode\n`editorSettings.dirtyTracker` Enables the dirty tracker that marks changed cells.\n`editorSettings.validate` Text will be selected when entering edit mode\n`editorSettings.mask` Will pass mask settings to the input (if supported).\n`editorSettings.maskOptions` Will pass maskOptions settings to the input (if supported).\n`editorSettings.options` Dataset used for dropdown editor's list box options.\n\nWhen the use clicks in the cell or activates editing with the keyboard with the Enter key and types. The following events will fire.\n\n`beforecelledit` Fires before a cell is being edit (before edit is started). Can be vetoed by returning false as shown below.\n`celledit` Fires exactly when a cell is being edited.\n`endcelledit` Fires when a cell edit is completed and changed.\n`cancelcelledit` Fires when an edit is cancelled via the <kbd>Esc</kbd> key.\n\nTo cancel editing based on some condition or if editing is not allowed you can veto the `beforecelledit` event.\n\n```js\n  dataGrid.addEventListener('beforecelledit', (e: Event) => {\n    (<CustomEvent>e).detail.response(false);\n  });\n```\n\nThere are a few utility functions for editing the data grid mentioned in the Methods section.\n\n## Settings and Attributes\n\nWhen used as an attribute in the DOM the settings are kebab case, when used in JS they are camel case.\n\n- `virtualScroll` {boolean} When virtual scroll is used the grid can render many thousands of rows and only the rows visible in the scroll area are rendered for performance. This setting has limitations such as the rows need to be fixed size.\n- `addNewAtEnd` {boolean} Automatically append rows while keyboard navigating data grid in edit mode.\n- `alternateRowShading` {boolean} For better scan-ability you can shade alternate rows.\n- `listStyle` {boolean} Sets the style of the grid to list style for simple readonly lists.\n- `columns` {Array<object>} Sets the columns array of the data grid. See column settings.\n- `columnGroups` {Array<object>} Allows you to group columns together in logical sets. See section below for details.\n- `rowHeight` {string | `'xxs'` | `'xs'` | `'sm'` | `'md'` | `'lg'`} Sets the height and padding of each row. In smaller row heights the font is lowered.\n- `data` {Array<object>} Sets the data to show in the data grid. This can be a JSON Array.\n- `disableClientFilter` {boolean} Disables the filter logic client side in situations you want to filter server side.\n- `filterable` {boolean} Turns on or off the filter functionality.\n- `filterRowDisabled` {boolean} Disables the filter row.\n- `headerMenuData` {Array<object>} Dataset to build context menu for header and header group cells.\n- `headerMenuId` {string} ID of the popupmenu to use as context menu for header and header group cells.\n- `menuData` {Array<object>} Dataset to build context menu for body cells.\n- `menuId` {string} ID of the popupmenu to use as context menu for body cells.\n- `rowNavigation` {boolean} If using row navigation, the row will be focused when navigating the data grid via clicks and keyboard events.\n- `rowSelection` {string|boolean} Set the row selection mode between false, 'single', 'multiple' and 'mixed\n- `suppressRowClickSelection` {boolean} If using selection setting this will require clicking a checkbox or radio to select the row. Clicking other cells will not select the row.\n- `suppressRowDeactivation` {boolean} Set to true to prevent rows from being deactivated if clicked. i.e. once a row is activated, it remains activated until another row is activated in its place.\n- `suppressRowDeselection`  {boolean} Set to true to prevent rows from being deselected if click or space bar the row. i.e. once a row is selected, it remains selected until another row is selected in its place.\n- `suppressTooltips`  {boolean} Set to true to prevent display tooltips.\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRow` {boolean} Indicates expandable rows will be used in the data grid.  See the expandable row section for more details.\n- `expandableRowTemplate` {string} Should point to the row `template` element for expandable rows.\n- `treeGrid` {boolean} Indicates a tree grid will be used  in the data grid. See the tree grid section for more details.\n- `showHeaderExpander` {boolean} Set to show header expander icon for expandable and tree rows.\n- `groupSelectsChildren` {boolean} If a tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `saveActivePage` {boolean} If set the active page on the pager will be saved to local storage.\n- `saveColumns` {boolean} If set columns will be saved to local storage.\n- `saveFilter` {boolean} If set filter will be saved to local storage.\n- `savePageSize` {boolean} If set the page size on the pager will be saved to local storage.\n- `saveRowHeight` {boolean} If set the row height will be saved to local storage.\n- `saveSortOrder` {boolean} If set column sort order will be saved to local storage.\n- `saveUserSettings` {boolean} If set all settings will be saved to local storage.\n- `emptyMessageDescription` {string} Set empty message description text.\n- `emptyMessageIcon` {string} Set empty message icon name.\n- `emptyMessageLabel` {string} Set empty message label text.\n- `suppressEmptyMessage` {boolean} Set to true to prevent display empty message.\n- `editable` {boolean} If true in addition to adding editors to columns the data grid is editable.\n- `editNextOnEnterPress` {boolean} If enabled when editing using <kbd>ENTER</kbd> will finish editing and start editing the same cell in next row and <kbd>SHIFT + ENTER</kbd> will edit the previous row.\n\n## Column Settings (General)\n\n|Setting|Type|Description|\n|---|---|---|\n|`id` | {string} | The unique id of the column. Each column in the grid should have some unique id.|\n|`name` | {string} | The text to show on the header.|\n|`field` | {string} | The name of the field (column) in the data array attached to the grid for example `description`. This can also be nested in an object for example `children.name`. |\n|`sortable` | {boolean} | If false, the column cannot be sorted. When completed a `sorted` event will fire.|\n|`resizable` | {boolean} | If false the column will not be resizable, thus is a fixed size and can never be changed by the user by dragging the left and right edge.  When completed a `columnresized` event will fire. See the `columns-resizable` example for a working example. |\n|`reorderable` | {boolean} | If true the column can be dragged into another position with adjacent columns. When completed a `columnmoved` event will fire. See the `columns-reorderable` example for a working example. This currently does not work with grouped columns. |\n|`readonly` | {boolean or Function} | If true the cell will be set to readonly color, indicating no editing.|\n|`disabled` | {boolean or Function} | If true the cell will be set to disabled color, indicating no editing.|\n|`formatter`| {Function} | Controls how the data is rendered in the cell.|\n|`hidden` | {boolean} | Excludes the column from being added to the DOM.|\n|`align` | {string} | Can be `left` or `right` or `center` to align both the cell and the header. Left is the default so does not need to be specified. |\n|`headerAlign` | {string} | Can be `left` or `right` or `center` to align just the header. Left is the default so does not need to be specified. |\n|`minWidth` | {number} | The minimum width used to prevent resizing a column below this size. |\n|`maxWidth` | {number} | The maximum width used to prevent resizing a column above this size. |\n|`cssPart` | {string} | Allows you to set the name of a css part that can be used to customize the cell's css. This can be a string or a function. See the columns-custom-css example. The default cssPart for cells is called `cell` and it also can be used for more global changes.  |\n|`frozen` | {string} | Sets the column to be frozen on either left or right side by passing `left` or `right`. See the `columns-frozen` example for a working example. Frozen columns currently have some limitations to be addressed in the future. |<!--lint disable maximum-line-length definition-case-->\n|`width` | {number or string} | The column width, this can be an integer for fixed pixel width or a percent for example `10%`, if left off the columns will be sized to contents and to fit the width of the grid using the css table browsers handling (this is known as `auto` columns). I.E. There are three column configurations: `auto`, `fixed` and `percent`. <br /><br />In addition one can specify any css grid column setting like `fr` or `ch`. In order to make what was called a `stretchColumn` in previous versions you can set the width to`minmax(130px, 4fr)`. This is some minimum width and a `fr` unit equal to the remaining number of columns (see example columns-stretch.html). For a spacer column you just need to specify one extra column at the end (see example columns-fixed.html) but this is not recommended for how it looks. |<!--lint enable maximum-line-length definition-case-->\n|`headerIcon` | {string} | Allows you to set the name of the header icon. |\n|`tooltipOptions` | {Object or Function} | Allows you to set the tooltip options. See the tooltip example. |\n|`tooltip` | {string or Function} | Let you set the tooltip content. |\n|`headerTooltip` | {string} | Let you set the header title tooltip content. |\n|`headerIconTooltip` | {string} | Let you set the header icon tooltip content. |\n|`filterButtonTooltip` | {string} | Let you set the header filter button tooltip content. |\n|`tooltipCssPart` | {string or Function} | Allows you to set the name of a tooltip css part that can be used to customize the tooltip css. This can be a string or a function. See the columns-custom-css example.\n|`headerTooltipCssPart` | {string} | Allows you to sets the header tooltip css part.\n|`headerIconTooltipCssPart` | {string} | Allows you to sets the header icon tooltip css part.\n|`filterButtonTooltipCssPart` | {string} | Allows you to sets the filter button tooltip css part.\n|`cellSelectedCssPart` | {string} | Allows customization of a selected cell's background color.\n|`editor` | {object} | Adds an editor to the column if editable is set on the grid. See editing section for more details.\n\n## Column Settings (Specific)\n\n|Setting|Type|Description|\n|---|---|---|\n|`href` | {string|Function} | Used to create the href for hyperlink formatters. This can be a string or a function that can work dynamically. It can also replace `{{value}}` with the current value. |\n|`text` | {string} | Used to create the txt value for hyperlink formatters if a hard coded link text is needed. |\n|`disabled` | {boolean|Function} | Sets the cell contents to disabled, can also use a callback to determine this dynamically. Only checkboxes, radios, buttons and link columns can be disabled at this time. Selection columns require disabled rows in order to not be clickable/selectable. |\n|`uppercase` | {boolean} | Allows you to set the text as uppercase. |\n\n## Formatters\n\n|Formatter|Description|\n|---|---|\n|`text` | (Default) Formats the column value as a direct text element using toString in the grid cell. Undefined or Null values will be shown as empty.|\n|`password` | Formats the column value masking the string length with stars. Undefined or Null values will be shown as empty. This is good for private data. |\n|`rowNumber` | Formats the cell with a row number column that is shown 1 to n no matter what the sort order is. |\n|`date` | Formats date data as a date string in the desired format, by default it will use `dateStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`time` | Formats date data as a time string in the desired format, by default it will use `timeStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`decimal` | Formats number data as a decimal string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`integer` | Formats number data as a integer string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`selectionCheckbox` | Displays a checkbox column for selection when using `rowSelection=\"mixed\"` or `rowSelection=\"multiple\"`|\n|`selectionRadio` | Displays a checkbox column for selection when using `rowSelection=\"single\"` |\n| `button` | Displays an `ids-button`. Other column settings like `type` can be used to set the button type as can `icon` by set for icon only buttons. Use the `click` setting/function to get an callback handler. |\n| `hyperlink` | Displays an `ids-hyperlink`. Other column settings like `href` can be used to set the link href and `text` can be used to set the text to specific text. Use the `click` setting/function to get an callback handler. |\n| `checkbox` | Displays an `ids-checkbox`. The value will be checked depending on if the attached field is true or `\"true\"`. |\n| `badge` | Displays an `ids-badge`. The associated field will be placed in the badge. The `color` option can also be set to set the ids-badge color setting. |\n| `alert` | Displays `ids-alert` element, and the field value will appear in a tooltip. An `icon` option can be provided as an override.|\n| `color` | Displays `ids-color` element. If a `color` option is provided as an override, the field's value will appear in a tooltip. |\n| `icon` | Displays the field value as an `ids-icon`. An `icon` option can be provided as an override, and the field value will appear beside this `icon` override. A `size` option can also be provided. |\n| `favorite` | Displays the field value as a `star-filled` if true or `star-outlined` if false. A `size` option can be provided as an override. |\n| `tag` | Displays the field value as an `ids-tag`. A `color` option can be provided as an override. |\n| `progress` | Displays the field value as an `ids-progress`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `rating` | Displays the field value as an `ids-rating`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `slider` | Displays the field value as an `ids-slider`. A `text` option can be provided to customize the label. A `color`, `max`, `min` and `type` option can be provided as overrides. |\n| `stepChart` | Displays the field value as an `ids-step-chart`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `image` | Displays the field value as an `ids-image`. A `text` option can be provided to the `alt` and `title` attributes. |\n\n### Deprecated Formatters (Deprecated from 4.x)\n\n- `Input` No longer suggested to use, use simple list instead or a Text Formatter.\n- `Status, Color` No longer used, but badges can be used.\n- `Placeholder` Can now be set on the column and used with other formatters\n- `Ellipsis` Is now always enabled.\n- `Readonly` Can now be set on the column and used with other formatters\n- `Drilldown` Use button formatter with an icon.\n- `Template` is now deprecated for performance reasons, use a custom formatter now.\n- `ClassRange` Use column cssClass function or string\n- `Autocomplete, Lookup, TargetedAchievement, ProcessIndicator, Spinbox, Fileupload, Dropdown, Colorpicker, Tree, SummaryRow, GroupFooterRow, GroupRow, Expander, Editor, Textarea, Actions, RowReorder` May be added later\n\n## Custom Formatters\n\nIt is possible to create your own custom formatter. The idea behind the formatter is it takes the cell value and does processing on it to return the correct markup for the cell. The simplest custom formatter would be this example.\n\n```js\ncolumns.push({\n  id: 'custom',\n  name: 'Custom',\n  field: 'price',\n  formatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n    const value = `Custom: ${rowData[columnData.field] || '0'}`;\n    return `<span class=\"text-ellipsis\">${value}</span>`;\n  }\n});\n```\n\nTo style a custom formatter you may need to add a css part for the element. For example:\n\n```js\nformatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n  const value = `${rowData[columnData.field] || ''}`;\n  return `<a part=\"custom-link\" href=\"#\" class=\"text-ellipsis\">${escapeHTML(value)}</a>`;\n},\n```\n\nThen in the style sheet you add for you page you put the styles.\n\n```css\nids-data-grid::part(custom-link) {\n  color: #da1217;\n}\n\nids-data-grid::part(custom-link):hover {\n  color: #6c080b;\n}\n```\n\nThe formatter is then linked via the column on the formatter setting. When the grid cell is rendered the formatter function is called and the following arguments are passed in.\n\n- `rowData` The current row's data from the data array.\n- `columnData` The column object with all of the column configuration for this cell.\n\n## Events\n\n- `activecellchanged` Fires when the active cell changes with the keyboard or by click.\n- `sorted` Fires when the sort column is changed.\n- `selectionchanged` Fires any time the selection changes.\n- `activationchanged` Fires any time the active row changes.\n- `rowselected` Fires for each row that is selected.\n- `rowdeselected` Fires for each row that is deselected.\n- `rowactivated` Fires for each row that is activated.\n- `rowdeactivated` Fires for each row that is deactivated.\n- `rowclick` Fires for each row that is clicked.\n- `dblclick` Fires each time double clicked on body cells or header cells. Based on where it clicked details can be capture like `type: 'body-cell'|'header-title'|'header-filter'` etc.\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n- `columnresized` Fires when a column is resized or setColumnWidth is called.\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto\n- `rowExpanded` Fires when a tree or expandable row is expanded or collapsed\n- `rowCollapsed` Fires when a tree or expandable row is expanded or collapsed\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called.\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto.\n- `beforemenushow` Fires before context menu show, you can return false in the response to veto.\n- `menushow` Fires after context menu show.\n- `menuselected` Fires after context menu item selected.\n- `settingschanged` Fires after settings are changed in some way.\n- `scrollstart` Fires when data-grid reaches the topmost row.\n- `scrollend` Fires when data-grid reaches the bottommost row.\n- `afterrendered` Fires after rendered the data grid.\n\n## Methods\n\n- `setColumnWidth` Can be used to set the width of a column.\n- `setColumnVisibility` Can be used to set the visibility of a column.\n- `setActivateCell(cell, row)` Can be used to set focus of a cell.\n- `selectedRows` Lists the indexes of the currently selected rows.\n- `saveSetting(setting: string)` Save the given setting to local storage.\n- `saveAllSettings` Save all user settings to local storage.\n- `savedSetting(setting: string)` Get saved given setting value from local storage.\n- `allSavedSettings` Get saved all user settings from local storage.\n- `clearSetting(setting: string, key?: string)` Clear the given saved setting from local storage.\n- `clearAllSettings(userKeys: unknown)` Clear saved all user settings from local storage.\n- `restoreSetting(setting: string, value?: unknown)` Restore the given saved setting from local storage.\n- `editFirstCell` Puts the first cell on the active row into edit mode.\n- `appendData(data: Record<string, unknown>)` Use this to add more data to the datagrid's existing dataset.  This will automatically render additional rows in the datagrid.\n- `addRow(data: Record<string, unknown>, index?: number)` Adds a new row at optional row index and defaults the values to all those provided in the data\n- `addRows(data: Array<Record<string, unknown>>, index?: number)` Adds multiple new rows at optional row index and defaults the values to all those provided in the data\n- `removeRow(index: number)` Removed the provided row index from the dataset and visual datagrid\n- `clearRow(index: number)` Clears all values on the given row.\n- `commitCellEdit` Stops editing and commits the value in the active editor.\n- `cancelCellEdit` Stops editing and reverts the value in the active editor.\n- `resetDirtyCells` Clears all dirty cell indicators.\n- `dirtyCells` Gives a list of all currently dirty cells.\n- `exportToExcel(format: 'csv' | 'xlsx', filename: string, keepGridFormatting: boolean)` Export datagrid datasource to an excel file. This keeps grid formatting by default.\n- `collapseAll()` Collapse all expandable or tree rows.\n- `expandAll()` Expand all expandable or tree rows.\n- `toggleAll(opt: boolean)` Toggle collapse/expand all expandable or tree rows. `opt false`: will expand all, `opt: true`: will collapse all\n- `refreshRow` IdsDataGridRow method to refresh row element and its cells.\n- `refreshCell` IdsDataGridCell method to refresh cell element.\n- `updateDataset(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row.\n- `updateDatasetAndRefresh(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row and refreshes row/cells UI.\n\n## Filters\n\nData rows can be filter based on one or several criteria. Whole filter row can turned on/off by the api setting `filterable` and can be disabled by the api setting `filter-row-disabled`. The filter conditions can be applied thru the UI or programmatically. Each column can have its own filter type and turn on/off by columns setting.\n\n### Filter Columns Setting\n\nAll the filter settings can be passed thru columns data.\n\n|Setting|Type|Description|\n|---|---|---|\n|`filterType` | Function | Data grid built-in filter method, see the dedicated section below. |\n|`filterConditions` | Array | List of items to be use as operators in menu-button or options in dropdown. |\n|`filterFunction` | Function | User defined filter method, it must return a boolean. |\n|`filterOptions` | Object | Setting for components are in use, for example: `label, placeholder, disabled`. |\n|`isChecked` | Function | User defined filter method, it must return a boolean. This method use along built-in `checkbox` only, when filter data value is not boolean type. |\n\n### Built-in Filter Methods\n\n|Method|Description|\n|---|---|\n|`text` | It filter as text comparison. Contains input and menu-button with list of default operators. |\n|`integer` | It filter as integer comparison. Contains input and menu-button with list of default operators. |\n|`decimal` | It filter as decimal comparison. Contains input and menu-button with list of default operators. |\n|`contents` | It filter as text comparison. Contains dropdown and auto generate list of items based on column data. |\n|`dropdown` | It filter as text comparison. Contains dropdown and must pass list of item by setting `filterConditions`. |\n|`checkbox` | It filter as boolean comparison. Contains menu-button with list of default operators. |\n|`date` | It filter as date comparison. Contains date-picker and menu-button with list of default operators. |\n|`time` | It filter as time comparison. Contains time-picker and menu-button with list of default operators. |\n\n### Custom Filter\n\nIf the built-in filters are not enough, creating a custom filter is an option. There are two parts you can create both parts custom or mix-match with built-in.\n\n1. `UI Only` In order to do custom UI part of filter, add as html markup thru a slot. It must use slot and column-id attributes for example: `<div slot=\"filter-n\" column-id=\"n\">...</div>` where n is the columnId same passed in the columns.\n1. `filterFunction` This is a user defined filter method which must return a boolean. It determines if a cell value should be considered as a valid filtered value.\n1. `disableClientFilter` This is an api setting to disable filter logic client side. It will set filter conditions and fire an event `filtered` which can listen for custom logic.\n\n### Filter Code Examples\n\nBasic text filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nNo filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"false\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisabled filter row, will disabled all attached filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\" filter-row-disabled=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nHyperlink, integer, decimal, date and time filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'hyperlink',\n  name: 'Hyperlink',\n  field: 'description',\n  href: '#',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.hyperlink\n});\ncolumns.push({\n  id: 'integer',\n  name: 'Integer',\n  field: 'price',\n  filterType: dataGrid.filters.integer,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'decimal',\n  name: 'Decimal',\n  field: 'price',\n  filterType: dataGrid.filters.decimal,\n  formatter: dataGrid.formatters.decimal,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'date',\n  name: 'Date',\n  field: 'publishDate',\n  filterType: dataGrid.filters.date,\n  formatter: dataGrid.formatters.date\n});\ncolumns.push({\n  id: 'time',\n  name: 'Time',\n  field: 'publishDate',\n  filterType: dataGrid.filters.time,\n  formatter: dataGrid.formatters.time\n});\n```\n\nSome filter options label, placeholder, disabled.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterOptions: {\n    label: 'Label text for description input',\n    placeholder: 'Placeholder text for description input',\n    disabled: true\n  }\n});\n```\n\nCustom operators items for menu-button.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterConditions: [{\n    value: 'contains',\n    label: 'Contains',\n    icon: 'filter-contains'\n  },\n  {\n    value: 'equals',\n    label: 'Equals',\n    icon: 'filter-equals',\n    selected: true\n  }]\n});\n```\n\nContents and dropdown type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'location',\n  name: 'Location',\n  field: 'location',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.contents,\n  filterOptions: {\n    notFilteredItem: { value: 'not-filtered', label: 'Not Filtered' }\n  }\n});\ncolumns.push({\n  id: 'useForEmployee',\n  name: 'NotFilterdItem (shown as blank)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\ncolumns.push({\n  id: 'useForEmployeeCustomNotFilterdItem',\n  name: 'NotFilterdItem (show as custom text)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'not-filtered', label: 'Not Filtered' },\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\n```\n\nCheckbox type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'checkbox',\n  name: 'Checkbox',\n  field: 'inStock',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox\n});\ncolumns.push({\n  id: 'customCheckMethod',\n  name: 'Custom check method',\n  field: 'active',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox,\n  isChecked: (value) => value === 'Yes'\n});\n```\n\nCustom filter method.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\n// Custom filter checking\nconst myCustomFilter = (opt) => {\n  const { operator, columnId, value } = opt.condition;\n  const val = {\n    condition: Number.parseInt(value, 10),\n    data: Number.parseInt(opt.data[columnId], 10)\n  };\n  let isMatch = false;\n  if (Number.isNaN(val.condition) || Number.isNaN(val.data)) return isMatch;\n\n  if (operator === 'equals') isMatch = (val.data === val.condition);\n  if (operator === 'greater-than') isMatch = (val.data > val.condition);\n  if (operator === 'greater-equals') isMatch = (val.data >= val.condition);\n  if (operator === 'less-than') isMatch = (val.data < val.condition);\n  if (operator === 'less-equals') isMatch = (val.data <= val.condition);\n\n  return isMatch;\n};\n\nconst columns = [];\ncolumns.push({\n  id: 'customFilterMethod',\n  name: 'Custom Filter Method',\n  field: 'price',\n  filterFunction: myCustomFilter,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\n```\n\nCustom filter UI part.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n  <div slot=\"filter-description\" column-id=\"description\">\n    <ids-menu-button id=\"btn-filter-description\" icon=\"filter-greater-equals\" menu=\"menu-filter-description\" dropdown-icon>\n      <span class=\"audible\">Greater Than Or Equals</span>\n    </ids-menu-button>\n    <ids-popup-menu id=\"menu-filter-description\" target=\"#btn-filter-description\">\n      <ids-menu-group select=\"single\">\n        <ids-menu-item value=\"equals\" icon=\"filter-equals\">Equals</ids-menu-item>\n        <ids-menu-item value=\"greater-than\" icon=\"filter-greater-than\">Greater Than</ids-menu-item>\n        <ids-menu-item value=\"greater-equals\" icon=\"filter-greater-equals\" selected=\"true\">Greater Than Or Equals</ids-menu-item>\n        <ids-menu-item value=\"less-than\" icon=\"filter-less-than\">Less Than</ids-menu-item>\n        <ids-menu-item value=\"less-equals\" icon=\"filter-less-equals\">Less Than Or Equals</ids-menu-item>\n      </ids-menu-group>\n    </ids-popup-menu>\n    <ids-input id=\"input-filter-description\" type=\"text\" size=\"full\" placeholder=\"Slotted description\" label=\"Slotted description input\">\n    </ids-input>\n  </div>\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisable client filter\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" disable-client-filter=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n\ndataGrid.addEventListener('filtered', (e: any) => {\n  console.info('filtered:', e.detail);\n});\n```\n\n### Filter rows programmatically\n\n```js\n// Filter rows\nconst conditions = [{ columnId: 'description', operator: 'contains', value: '5' }];\ndataGrid.applyFilter(conditions);\n\n// Reset all filters\ndataGrid.applyFilter([]);\n```\n\n### Filter Events\n\nThe following events are relevant to data-grid filters.\n\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n\n## Custom cell colors\n\nIn some cases, it may be desirable to customize the background color of cells.  This can be done with the `cssPart` column setting:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell'\n});\n```\n\nThe `cssPart` property is translated into a `part` attribute that is applied to every cell in the column.  In the event the color needs to be conditional based on the row index or other logic, a function can be used:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2')\n  // ...\n});\n```\n\nAfter this is defined, accompanying CSS can be written to target the parts `custom-cell`, `custom-cell-1`, and `custom-cell-2` to change background color or other CSS properties of the cell:\n\n```css\nids-data-grid::part(cell) {\n  background-color: #ebf9f1;\n}\n\nids-data-grid::part(cell-selected) {\n  background-color: #c9dad0;\n}\n```\n\n### Changing selected cell colors\n\nAnother column setting, `cellSelectedCssPart` can be used alongside `cssPart` to customize the selected color of the row in a similar way.  When using `mixed` selection, this color is also applied to activated rows:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell',\n  cellSelectedCssPart: 'custom-cell-selected'\n});\n```\n\nThis column setting can also be a function, just like `cssPart`:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2'),\n  cellSelectedCssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-selected-1' : 'custom-cell-selected-2')\n  // ...\n});\n```\n\n## Tooltip Code Examples\n\nSet suppress tooltips to turn off.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" suppress-tooltips>\n</ids-data-grid>\n```\n\nSet custom tooltip strings.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: 'This is a product Id',\n  headerTooltip: 'This is the product Id header title',\n  headerIconTooltip: 'This is product Id header icon',\n  filterButtonTooltip: 'This is the product Id filterButton'\n});\n```\n\nSet tooltip as callback.\n\n```js\nconst tooltipCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return `Text: ${text}<br/>Header Row: ${rowIndex}, Cell: ${columnIndex}`;\n  } else if (type === 'filter-button') {\n    return `Text: ${text}<br/>FilterButton Row: ${rowIndex}, Cell: ${columnIndex}`;\n  }\n  return `Text: ${text}<br/>for Row: ${rowIndex}, Cell: ${columnIndex}`;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: tooltipCallback\n});\n```\n\nSet tooltip custom options.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: {\n    placement: 'top',\n    headerPlacement: 'top',\n    headerIconPlacement: 'top',\n    filterButtonPlacement: 'bottom',\n    x: 0,\n    y: 10,\n    headerX: 0,\n    headerIconX: 0,\n    headerY: 10,\n    headerIconY: 10,\n    filterButtonX: 0,\n    filterButtonY: 22\n  }\n});\n```\n\nSet tooltip options as callback.\n\n```js\nconst tooltipOptionsCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return { headerPlacement: 'top', headerX: 0, headerY: 10 };\n  } else if (type === 'header-icon') {\n    return { headerIconPlacement: 'top', headerIconX: 0, headerIconY: 10 };\n  } else if (type === 'filter-button') {\n    return { filterButtonPlacement: 'bottom', filterButtonX: 0, filterButtonY: 22 };\n  }\n  return { placement: 'top', x: 0, y: 10 };\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: tooltipOptionsCallback\n});\n```\n\nSet tooltip custom css.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: 'custom-turquoise',\n  headerTooltipCssPart: 'custom-turquoise',\n  headerIconTooltipCssPart: 'custom-turquoise',\n  filterButtonTooltipCssPart: 'custom-turquoise'\n});\n```\n```css\n/* tooltip css part `custom-turquoise` */\nids-data-grid::part(custom-turquoise-tooltip-arrow-top)::after {\n  border-top-color: #2f8d8e;\n}\nids-data-grid::part(custom-turquoise-tooltip-popup) {\n  background-color: #2f8d8e;\n}\n```\n\nSet tooltip custom css as callback.\n\n```js\nconst tooltipCssPartCallback = (args: { type: string }): string => {\n  const { type } = args;\n  let cssPart = '';\n  // Set random css part each time, for `body-cell` tooltips\n  if (type === 'body-cell') {\n    const parts = ['azure', 'ruby'];\n    const randomIndex = Math.floor(Math.random() * parts.length);\n    cssPart = parts[randomIndex];\n  }\n  return cssPart;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: tooltipCssPartCallback\n});\n```\n```css\n/* tooltip css part `azure` */\nids-data-grid::part(azure-tooltip-arrow-top)::after {\n  border-top-color: #0066d4;\n}\nids-data-grid::part(azure-tooltip-popup) {\n  background-color: #0066d4;\n}\n\n/* tooltip css part `ruby` */\nids-data-grid::part(ruby-tooltip-arrow-top)::after {\n  border-top-color: #c31014;\n}\nids-data-grid::part(ruby-tooltip-popup) {\n  background-color: #c31014;\n}\n```\n\n## context menu Code Examples\n\nThe context menus can be set via the dataset.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n</ids-data-grid>\n```\n```js\n// Dataset for header cells context menu\nconst headerMenuData = {\n  id: 'grid-header-context menu',\n  contents: [{\n    id: 'header-actions-group',\n    items: [\n      { id: 'actions-split', value: 'actions-split', text: 'Split' },\n      { id: 'actions-sort', value: 'actions-sort', text: 'Sort' },\n    ]\n  }],\n};\n\n// Dataset for body cells context menu\nconst menuData = {\n  id: 'grid-context menu',\n  contents: [{\n    id: 'actions-group',\n    items: [\n      { id: 'item-1', value: 'item-1', text: 'Item One' },\n      { id: 'item-2', value: 'item-2', text: 'Item Two' },\n      { id: 'item-3', value: 'item-3', text: 'Item Three' }\n    ]\n  }],\n};\n\n// Set context menu data with data-grid\ndataGrid.menuData = menuData;\ndataGrid.headerMenuData = headerMenuData;\n\n// Set to return true/false in the response to veto before context menu show.\ndataGrid.addEventListener('beforemenushow', (e: any) => {\n  console.info('before context menu show', e.detail);\n  // e.detail.response(false);\n});\n\n// Set to watch after context menu show.\ndataGrid.addEventListener('menushow', (e: any) => {\n  console.info('After context menu show', e.detail);\n});\n\n// Set to watch after context menu item selected.\ndataGrid.addEventListener('menuselected', (e: any) => {\n  console.info('context menu item selected', e.detail);\n});\n```\n\nSet context menu thru Slot.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n  <!-- context menu header cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"header-context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n      <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n  <!-- context menu body cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n      <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n      <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n      <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n</ids-data-grid>\n```\n\nSet context menu thru ID.\n\n```html\n<ids-data-grid\n  header-menu-id=\"grid-header-context menu\"\n  menu-id=\"grid-context menu\"\n  id=\"data-grid-1\"\n  label=\"Books\"\n></ids-data-grid>\n\n<!-- context menu header cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-header-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n    <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n\n<!-- context menu body cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n    <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n    <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n    <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n```\n\n## Empty Message\n\nSet empty message thru slot (markup).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-slot\" label=\"Books\">\n  <ids-empty-message hidden icon=\"empty-search-data-new\" slot=\"empty-message\">\n    <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">No Data</ids-text>\n    <ids-text hidden label=\"true\" slot=\"description\">There is no data available.</ids-text>\n  </ids-empty-message>\n</ids-data-grid>\n```\n\nSet empty message thru settings (markup).\n\n```html\n<ids-data-grid\n  id=\"data-grid-em-thru-settings\"\n  label=\"Books\"\n  empty-message-icon=\"empty-error-loading-new\"\n  empty-message-label=\"No Data\"\n  empty-message-description=\"There is no data available.\"\n></ids-data-grid>\n```\n\nSet empty message thru settings (javascript).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-settings-js\" label=\"Books\">\n</ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-em-thru-settings-js');\ndataGrid.emptyMessageIcon = 'empty-error-loading-new';\ndataGrid.emptyMessageLabel = 'No Data';\ndataGrid.emptyMessageDescription = 'There is no data available.';\n```\n\n## Row Height\n\nAs mentioned in the settings section you can change the row height by setting the rowHeight option.\n\n```html\n     <ids-data-grid id=\"data-grid-row-height\" row-height=\"md\"></ids-data-grid>\n```\n\nIts worth mentioning the characteristics and usage for each one.\n\nLarge (`row-height=\"lg\"`) - Row Height is 50. The default row height, header is 16px and body cells are 16px. 16px padding on cells and header. You should use this most of the time if there is plenty of room on the UI and to avoid the UI looking crowded.\nMedium (`row-height=\"md\"`) - Row Height is 40. Header is 16px and body cells are 16px. 12px padding on cells and header. If you need to see a few more rows but still want to avoid a crowded UI, this is the next best option.\nSmall (`row-height=\"sm\"`) - Row Height is 35. Header is 16px and body cells are 16px. 8px padding on cells and header. This is the smallest option that is recommended for readability and spacing.\nExtra Small (`row-height=\"xs\"`) - Row Height is 30. Header is 14px and body cells are 14px. 8px padding on cells and header. If you need a very compressed data grid with a lot of data you can use this option. But there is a trade off of bad readability and spacing.\nExtra Extra Small (`row-height=\"xxs\"`) - Row Height is 25. Header is 14px and body cells are 14px. 2px padding on cells and header. Avoid this option as it is very crowded but it is included for edge cases.\n\n## States and Variations\n\n**Rows**\n- Hover\n- Selected\n- Disabled\n- Readonly\n- Activated\n\n**Columns**\n- Focus\n- Hover\n- Sorted\n- Selected\n- Disabled\n- Filtered\n\n**Cells**\n- Hover (sometimes a cursor change)\n- Readonly\n- Focus\n- Checked/Not Checked (Checkboxes)\n\n## Keyboard Guidelines\n\n- <kbd>Tab</kbd>The initial tab enters the grid with focus on the first cell of the first row, often a header. A second tab moves out of the grid to the next tab stop on the page. Once focus is established in the grid, a TAB into or a Shift Tab into the grid will return to the cell which last had focus. If in edit mode will finish editing and start editing the next cell.\n- <kbd>Shift + Tab</kbd> Moves the reverse of tab. If in edit mode will finish editing and start editing the previous cell.\n- <kbd>Left</kbd> and <kbd>Right</kbd> Move focus to the adjacent column's cell. There is no wrap at the end or beginning of columns.\n- <kbd>Up</kbd> and <kbd>Down</kbd> Move focus to the adjacent row's cell. There is no wrap at the first or last row.\n- <kbd>Home</kbd> moves focus to the first cell of the current row\n- <kbd>End</kbd> moves focus to the last cell of the current row\n- <kbd>Page Up</kbd> moves focus to the first cell in the current column\n- <kbd>Page Down</kbd> moves focus to the last cell in the current column\n- <kbd>Space</kbd> Toggles selection the activate row. If suppressRowDeselection is set it will be ignored on deselect. If the cell contains an expandable element then the row will toggle the expanded state. If the cell contains a checkbox editor, will toggle the checkbox state.\n- <kbd>F2</kbd> toggles actionable mode. Pressing the <kbd>Tab</kbd> key while in actionable mode moves focus to the next actionable cell. While in actionable mode you can do things like type + enter. This will move you down a row when you hit enter. If the cell has a control that uses down arrow (like the drop downs or lookups that are editable). Then the user needs to hit enter to enable the edit mode on that cell.\n- <kbd>Triple Click</kbd> Not a keyboard shortcut, but if you have text in a cell that is overflowed a triple click will select all the text even the part that is invisible.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Enter</kbd> Activates edit mode on the cell if it is editable. There is also an \"auto edit detection\". If the user starts typing then edit mode will happen automatically without enter. If in edit mode already <kbd>Enter</kbd> will finish edit mode. If `editNextOnEnterPress` is enabled then editing will start on the same column in next row.\n- <kbd>Shift + Enter</kbd> Same as enter but if `editNextOnEnterPress` is enabled then editing will start on the same column in previous row.\n- <kbd>F2</kbd> Finish editing same as Enter. But if `editNextOnEnterPress` is enabled, will stay in same cell. `cancelEditMode` will fire.\n- <kbd>CMD/CTRL + Enter</kbd> Finish editing same as Enter.\n- <kbd>ESC</kbd> Revert to the previous value and cancel editing. `cancelEditMode` will fire.\n\n## Responsive Guidelines\n\n- By default, data grid grows depending on the amount of contents within and will scroll if necessary under the header. It stops growing when it reaches the size of the parent container.\n- `autoFit` property or `auto-fit` attribute can be set manually to make the data grid size fill and be responsive to the size of the screen, regardless of the amount of contents.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Counts have all new markup and classes.\n\n**4.x to 5.x**\n- Data grid has all new markup and a custom element but some similarly named options\n- Still uses same columns and data set options. Some column options enhanced and changed.\n- If using events events are now plain JS events for example: sorted, rendered\n- Some Api Functions have changed\n- If using properties/settings these are now attributes or as plain properties for example: data, virtual-scroll\n- Markup has changed to a custom element `<ids-data-grid></ids-data-grid>`\n- Can now be imported as a single JS file and used with encapsulated styles\n- `Drill Down` Formatter is now covered by `Button` formatter with `icon=\"drilldown\"`\n- `textOverflow` setting is now by default\n- `rowNavigation` setting has replaced `cellNavigation`. Cell navigation is the default behavior.\n- `stretchColumn` is now more flexible and can be achieved by setting a column width to `minmax(130px, 4fr)`. I.E. some min width and a `fr` unit equal to the remaining number of columns (or similar variations).\n- split columns are not supported anymore but could be done with a custom formatter if needed\n- `frozenColumns` setting is now set on each column by adding `frozen: 'left'` or `frozen: 'right'` to the column definition.\n- Some events are renamed see the events section for more details, also the signature of the events has changed.\n- Custom formatter functions can now be any type of function and have a different signature.\n- The `expanded` column option for tree was renamed to `rowExpanded`.\n- The `expandrow/collapserow` events are renamed to `rowexpanded/rowcollapsed`\n- The `beforeentereditmode/entereditmode/exiteditmode` event is renamed to `beforecelledit/celledit/endcelledit/cancelcelledit`\n- The `actionablemode` feature has been replaced with simply tabbing to the next editable field when in edit mode.\n\n## Accessibility Guidelines\n\n1.1.1 Non-text Content - All images, links and icons have text labels for screen readers when the formatters are used.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and links and images of text has a contrast ratio of at least 4.5:1.\n- 2.1.1 Keyboard - Make all functionality available from a keyboard. The grid has keyboard shortcuts and is usable with a screen reader due to the addition of aria tags.\n- A datagrid in general including this one uses the following aria tags\n  - `aria-label` labels the enter table on the main table\n  - `aria-rowcount` lists the visible row count on the main table\n  - `aria-colindex` the index of each column on the column elements\n  - `aria-rwindex` the index of each row on the row elements\n  - `aria-setsize` for tree grid lists the number of elements in each level (group)\n  - `aria-level` the level of indentation\n  - `aria-posinset` the depth into each set\n  - `aria-expanded` on the row it indicates if the row is expanded (for tree and expandable row)\n  - `aria-sort` indicates the sort direction on the sortable columns\n  - `aria-checked` indicates if the element is checked on checkbox columns and headers\n\n## Regional Considerations\n\nTitles and labels should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n\n## Code Separation (For Developers)\n\nThe code is divided into several files. Here is a description of where everything is.\n\n- `ids-data-grid-cell.ts` creates a non-shadow root `ids-data-grid-cell`, and handles its own selection, and activation.\n- `ids-data-grid-cell.scss` contains all css related to `.ids-data-grid-cell` and its children\n- `ids-data-grid-contextmenu.ts` contains code in the form of export functions, that adds ability to get right click menus on headers and cells\n- `ids-data-grid-filter.scss` contains all css related to the filter row and its children\n- `ids-data-grid-filter.ts` contains code to implement the filtering functionality and its ui (some functions are in ids-data-source)\n- `ids-data-grid-formatters.ts` contains all formatter functions and some supporting code like data extraction\n- `ids-data-grid-header.ts` contains most header functionality, the header template, and code related to header actions like sort, reorder and selection.\n- `ids-data-grid-header.scss` contains all css related to `.ids-data-grid-header` and its children\n- `ids-data-grid-row.ts` contains most row functionality, the row template, and code related to row actions like expand, collapse, select, activate\n- `ids-data-grid-row.scss` contains all css related to `.ids-data-grid-row` and its children\n- `ids-data-grid-tooltip-mixin.js` contains a tooltip mixin that adds tooltip functionality to cells and headers, its different from `ids-tooltip-mixin` (more specific)\n- `ids-data-grid.js` contains all main data grid code, the api and settings and the main generator loop for the data grid\n"}},{"name":"ids-data-grid-contextmenu","description":{"kind":"markdown","value":"# Ids Data Grid\n\n## Description\n\nThe data grid component (ids-data-grid) is used to arrange tabular data in rows and columns for easier scanning and comparison. Data grids are very configurable in both design and functionality and they can be found within almost every product/app.\n\nYou should pass an array of objects in to the grid on the `dataset` object. Also pass the `columns` array which contains the column configuration. There are a number of events described in the events and API section, as well as the column settings.\n\nA Read-Only data grid uses \"Formatters\" to render cell content. A number of these are listed in the API section and it is possible to create your own.\n\n## Use Cases\n\n- The data grid component is most useful when it is used for categorically sorting dense and repetitive information. Each individual item is listed down the Y axis of the chart, and their shared attribute categories are listed along the X axis. The resulting cells are filled with information that is relevant to the corresponding item and attribute.\n\n## Terminology\n\n- **Title**: The name of the data grid optionally appearing above the grid and describing the contents.\n- **Options**: An optionally actions menu button with functionality that operates on the entire data grid.\n- **Cell**: Body elements of the data grid that contain an object's value or attribute. Cells should only contain one type of content or it can be confusing and hurt accessibility.\n- **Header Cell**: These cells contain the names of the columns in the grid and related functions like filtering and sorting. All cells below the header cell will hold values related to the attribute in the header cell.\n- **Column**: Cells stacked vertically that contain values relate to the attribute found on the top header cell.\n- **Row**: Each row contains one cell per column in the data grid, and each cell displays a single value in the bound data item.\n- **Tree**: Denotes the use of hierarchical data, with an expandable and collapsible hierarchy.\n\n## Themeable Parts\n\n- `table` allows you to further style the table main element\n- `container` allows you to further style the container element\n- `body` allows you to further style the body element\n- `header` allows you to further style the header element\n- `headerCell` allows you to further style the header cells\n- `row` allows you to further style the rows\n- `cell` allows you to further style the row cells\n- `cell-selected` allows you to further style row cells that are selected (in mixed-selection mode, activated cells are also styled)\n- `tooltip-popup` allows you to further style or adjust the outer tooltip popup element\n- `tooltip-arrow` allows you to adjust the tooltip arrow element\n\n## Features (With Code Examples)\n\nA data grid is created by adding an `ids-data-grid` html element in the page and setting the options either inline in the markup or in the JS part of the code. You can only use simple types (string, boolean ect) for inline markup so passing the data and column arrangement is always done in the JS part. The data will be an array of objects so its in the correct tabular form. The columns are also an array of objects but with defined options and types. See more about columns in next section.\n\n```html\n<ids-data-grid id=\"data-grid-1\"></ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-1');\ndataGrid.data = dataset;\ndataGrid.columns = columns;\n```\n\n### Column Groups\n\nSetting column groups allows you to add a second level of columns in your header and the ability to group the first level. This is useful for when you have a large number of columns and you want to group them into logical or related sections.\n\nColumn groups are achieved by providing an array to the `columnGroups` setting. Only one level of column groups can be defined.\n\n```js\ndataGrid.columnGroups = [\n{\n  colspan: 3,\n  id: 'group1',\n  name: 'Column Group One',\n  align: 'center'\n},\n{\n  colspan: 2,\n  id: 'group2',\n  name: 'Column Group Two'\n},\n{\n  colspan: 2,\n  id: 'group3',\n  name: 'Column Group Three',\n  align: 'right'\n},\n{\n  colspan: 11,\n  id: 'group4',\n  name: 'Column Group Four',\n  align: 'left'\n}\n];\n```\n\nIf the column is hidden it will be automatically removed from the `colspan`. If in the last group you didn't provided a bug enough `colspan` it will be set to the remaining columns. The `name` text can be right or left aligned and given an id. The only required property is `colspan`.\n\n### Selection\n\nThe data grid selection feature involves the setting `rowSelection`. This can be one of several values.\n\n- `false` No selection enabled.\n- `multiple` Allows multiple rows to be selected. When doing this it is recommended to add a `formatters.selectionCheckbox` for the first column.\n- `single` Allows a single row to be selected. When doing this you can optionally to add a `formatters.selectionRadio` for the first column. You can use the `suppressRowDeselection` if you want one row to always be selected.\n- `mixed` Allows multiple rows to be selected by clicking only on the checkbox or <kbd>Space</kbd> key. If clicking a row then that row is activated, meaning it is the current row and something might be shown based on the data of that row. You can use the `suppressRowDeactivation` if you want one row to always be selected.\n\nHere is a code example for multi select\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" row-selection=\"multiple\">\n</ids-data-grid>\n```\n\n```js\n  dataGrid.addEventListener('rowselected', (e) => {\n    console.info(`Row Selected`, e.detail);\n  });\n\n  dataGrid.addEventListener('rowdeselected', (e) => {\n    console.info(`Row Deselected`, e.detail);\n  });\n\n  dataGrid.addEventListener('selectionchanged', (e) => {\n    console.info(`Selection Changed`, e.detail);\n  });\n```\n\nThe following events are relevant to selection/activation.\n\n`rowselected` Fires when an individual row is activation and gives information about that row.\n`rowdeselected` Fires when an individual row is deselected and gives information about that row.\n`selectionchanged` Fires once for each time selection changes and gives information about all selected rows.\n\n`rowactivated` Fires when an individual row is activated and gives information about that row.\n`rowdeactivated` Fires when an individual row is deactivated and gives information about that row.\n`activationchanged` Fires once for each time activation changes and gives information about the active row.\n\n### Tree Grid\n\nThe tree grid feature involves the setting `treeGrid` to true. In addition the data passed to the tree grid should contain a field called `children`. That contains the child rows. This can by unlimited levels but 2-4 is recommended as a max for a more usable UI. In addition you can preset some states by adding `rowExpanded: false` to the parent elements (default is expanded). And also set `rowHidden: false` for child rows that are expanded. You also need a `Expander` formatter on a cell (usually the first visible cell.\n\nHere is a code example for a tree grid.\n\n```html\n<ids-data-grid id=\"tree-grid\" label=\"Buildings\" tree-grid=\"true\" group-selects-children=\"true\"></ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to selection/activation.\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `groupSelectsChildren` {boolean} If the tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `suppressRowClickSelection` {boolean} If using selection you might want to set this so clicking a row will not select it.\n### Expandable Row\n\nThe Expandable Row feature involves the setting `expandableRow` to true. In addition a row template should be provided via an id that points to the `expandableRowTemplate` which is a `template` element. You can preset the expandable state by adding `rowExpanded: true` to the row element you want to expand. The default is collapsed.\n\nHere is a code example for an expandable row\n\n```html\n<ids-data-grid\n    id=\"data-grid-expandable-row\"\n    expandable-row=\"true\"\n    expandable-row-template=\"expandable-row-tmpl\"\n    label=\"Books\">\n    <template id=\"expandable-row-tmpl\">\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"16\" type=\"span\">${convention}</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">${price} USD</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">Lorem Ipsum is simply sample text of the printing and typesetting industry. Lorem Ipsum has been the industry standard sample text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only...</ids-text>\n        </ids-layout-grid>\n    </template>\n</ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to expandable rows\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRowTemplate` {string} Should point to the row `template` element.\n\n### Editing\n\nThe Editing features start by setting `editable` to true. In addition you should add editors to columns and enable features of each of the editors. The features differ depending on the component used for editing. See the Keyboard section for information on which keys can be used when editing..\n\nHere is a code example for an editable text cell.\n\n```js\ncolumns.push({\n    id: 'description',\n    name: 'Description',\n    field: 'description',\n    sortable: true,\n    resizable: true,\n    reorderable: true,\n    formatter: dataGrid.formatters.text,\n    editor: {\n      type: 'input',\n      inline: true,\n      editorSettings: {\n        autoselect: true,\n        dirtyTracker: true\n      }\n    }\n  });\n```\n\nHere is a code example for an editable dropdown cell\n\n```js\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  resizable: true,\n  reorderable: true,\n  formatter: dataGrid.formatters.dropdown,\n  editor: {\n    type: 'dropdown',\n    editorSettings: {\n      dirtyTracker: true,\n      validate: 'required',\n      options: [\n        {\n          label: 'Option 1',\n          value: 'opt1'\n        },\n        {\n          label: 'Option 2',\n          value: 'opt2'\n        }\n      ]\n    }\n  }\n});\n```\n\nTo cancel or disabled editing there are a few ways:\n\n- setting the column `editor` setting to undefined will disable editing on the column (as will not having an editor setting at all).\n- adding a `readonly` or `disabled` function which returned true for some cells based on a condition will disable or mark the cell readonly.\n- return false in the `beforecelledit` event in the response function\n\nThe following settings are available on editors.\n\n`type` As of now can be `checkbox`, `input`, `datepicker`, `timepicker`, or `dropdown` but more will be added.\n`inline` Default is false. If true the editor (for example an input) will be visible in a field.\n`editorSettings` Is an object that is loosely typed that lets you pass any option the editor supports in. For example any of the IdsInput or IdsCheckbox options can be passing in. Some special ones are:\n`editorSettings.autoselect` Text will be selected when entering edit mode\n`editorSettings.dirtyTracker` Enables the dirty tracker that marks changed cells.\n`editorSettings.validate` Text will be selected when entering edit mode\n`editorSettings.mask` Will pass mask settings to the input (if supported).\n`editorSettings.maskOptions` Will pass maskOptions settings to the input (if supported).\n`editorSettings.options` Dataset used for dropdown editor's list box options.\n\nWhen the use clicks in the cell or activates editing with the keyboard with the Enter key and types. The following events will fire.\n\n`beforecelledit` Fires before a cell is being edit (before edit is started). Can be vetoed by returning false as shown below.\n`celledit` Fires exactly when a cell is being edited.\n`endcelledit` Fires when a cell edit is completed and changed.\n`cancelcelledit` Fires when an edit is cancelled via the <kbd>Esc</kbd> key.\n\nTo cancel editing based on some condition or if editing is not allowed you can veto the `beforecelledit` event.\n\n```js\n  dataGrid.addEventListener('beforecelledit', (e: Event) => {\n    (<CustomEvent>e).detail.response(false);\n  });\n```\n\nThere are a few utility functions for editing the data grid mentioned in the Methods section.\n\n## Settings and Attributes\n\nWhen used as an attribute in the DOM the settings are kebab case, when used in JS they are camel case.\n\n- `virtualScroll` {boolean} When virtual scroll is used the grid can render many thousands of rows and only the rows visible in the scroll area are rendered for performance. This setting has limitations such as the rows need to be fixed size.\n- `addNewAtEnd` {boolean} Automatically append rows while keyboard navigating data grid in edit mode.\n- `alternateRowShading` {boolean} For better scan-ability you can shade alternate rows.\n- `listStyle` {boolean} Sets the style of the grid to list style for simple readonly lists.\n- `columns` {Array<object>} Sets the columns array of the data grid. See column settings.\n- `columnGroups` {Array<object>} Allows you to group columns together in logical sets. See section below for details.\n- `rowHeight` {string | `'xxs'` | `'xs'` | `'sm'` | `'md'` | `'lg'`} Sets the height and padding of each row. In smaller row heights the font is lowered.\n- `data` {Array<object>} Sets the data to show in the data grid. This can be a JSON Array.\n- `disableClientFilter` {boolean} Disables the filter logic client side in situations you want to filter server side.\n- `filterable` {boolean} Turns on or off the filter functionality.\n- `filterRowDisabled` {boolean} Disables the filter row.\n- `headerMenuData` {Array<object>} Dataset to build context menu for header and header group cells.\n- `headerMenuId` {string} ID of the popupmenu to use as context menu for header and header group cells.\n- `menuData` {Array<object>} Dataset to build context menu for body cells.\n- `menuId` {string} ID of the popupmenu to use as context menu for body cells.\n- `rowNavigation` {boolean} If using row navigation, the row will be focused when navigating the data grid via clicks and keyboard events.\n- `rowSelection` {string|boolean} Set the row selection mode between false, 'single', 'multiple' and 'mixed\n- `suppressRowClickSelection` {boolean} If using selection setting this will require clicking a checkbox or radio to select the row. Clicking other cells will not select the row.\n- `suppressRowDeactivation` {boolean} Set to true to prevent rows from being deactivated if clicked. i.e. once a row is activated, it remains activated until another row is activated in its place.\n- `suppressRowDeselection`  {boolean} Set to true to prevent rows from being deselected if click or space bar the row. i.e. once a row is selected, it remains selected until another row is selected in its place.\n- `suppressTooltips`  {boolean} Set to true to prevent display tooltips.\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRow` {boolean} Indicates expandable rows will be used in the data grid.  See the expandable row section for more details.\n- `expandableRowTemplate` {string} Should point to the row `template` element for expandable rows.\n- `treeGrid` {boolean} Indicates a tree grid will be used  in the data grid. See the tree grid section for more details.\n- `showHeaderExpander` {boolean} Set to show header expander icon for expandable and tree rows.\n- `groupSelectsChildren` {boolean} If a tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `saveActivePage` {boolean} If set the active page on the pager will be saved to local storage.\n- `saveColumns` {boolean} If set columns will be saved to local storage.\n- `saveFilter` {boolean} If set filter will be saved to local storage.\n- `savePageSize` {boolean} If set the page size on the pager will be saved to local storage.\n- `saveRowHeight` {boolean} If set the row height will be saved to local storage.\n- `saveSortOrder` {boolean} If set column sort order will be saved to local storage.\n- `saveUserSettings` {boolean} If set all settings will be saved to local storage.\n- `emptyMessageDescription` {string} Set empty message description text.\n- `emptyMessageIcon` {string} Set empty message icon name.\n- `emptyMessageLabel` {string} Set empty message label text.\n- `suppressEmptyMessage` {boolean} Set to true to prevent display empty message.\n- `editable` {boolean} If true in addition to adding editors to columns the data grid is editable.\n- `editNextOnEnterPress` {boolean} If enabled when editing using <kbd>ENTER</kbd> will finish editing and start editing the same cell in next row and <kbd>SHIFT + ENTER</kbd> will edit the previous row.\n\n## Column Settings (General)\n\n|Setting|Type|Description|\n|---|---|---|\n|`id` | {string} | The unique id of the column. Each column in the grid should have some unique id.|\n|`name` | {string} | The text to show on the header.|\n|`field` | {string} | The name of the field (column) in the data array attached to the grid for example `description`. This can also be nested in an object for example `children.name`. |\n|`sortable` | {boolean} | If false, the column cannot be sorted. When completed a `sorted` event will fire.|\n|`resizable` | {boolean} | If false the column will not be resizable, thus is a fixed size and can never be changed by the user by dragging the left and right edge.  When completed a `columnresized` event will fire. See the `columns-resizable` example for a working example. |\n|`reorderable` | {boolean} | If true the column can be dragged into another position with adjacent columns. When completed a `columnmoved` event will fire. See the `columns-reorderable` example for a working example. This currently does not work with grouped columns. |\n|`readonly` | {boolean or Function} | If true the cell will be set to readonly color, indicating no editing.|\n|`disabled` | {boolean or Function} | If true the cell will be set to disabled color, indicating no editing.|\n|`formatter`| {Function} | Controls how the data is rendered in the cell.|\n|`hidden` | {boolean} | Excludes the column from being added to the DOM.|\n|`align` | {string} | Can be `left` or `right` or `center` to align both the cell and the header. Left is the default so does not need to be specified. |\n|`headerAlign` | {string} | Can be `left` or `right` or `center` to align just the header. Left is the default so does not need to be specified. |\n|`minWidth` | {number} | The minimum width used to prevent resizing a column below this size. |\n|`maxWidth` | {number} | The maximum width used to prevent resizing a column above this size. |\n|`cssPart` | {string} | Allows you to set the name of a css part that can be used to customize the cell's css. This can be a string or a function. See the columns-custom-css example. The default cssPart for cells is called `cell` and it also can be used for more global changes.  |\n|`frozen` | {string} | Sets the column to be frozen on either left or right side by passing `left` or `right`. See the `columns-frozen` example for a working example. Frozen columns currently have some limitations to be addressed in the future. |<!--lint disable maximum-line-length definition-case-->\n|`width` | {number or string} | The column width, this can be an integer for fixed pixel width or a percent for example `10%`, if left off the columns will be sized to contents and to fit the width of the grid using the css table browsers handling (this is known as `auto` columns). I.E. There are three column configurations: `auto`, `fixed` and `percent`. <br /><br />In addition one can specify any css grid column setting like `fr` or `ch`. In order to make what was called a `stretchColumn` in previous versions you can set the width to`minmax(130px, 4fr)`. This is some minimum width and a `fr` unit equal to the remaining number of columns (see example columns-stretch.html). For a spacer column you just need to specify one extra column at the end (see example columns-fixed.html) but this is not recommended for how it looks. |<!--lint enable maximum-line-length definition-case-->\n|`headerIcon` | {string} | Allows you to set the name of the header icon. |\n|`tooltipOptions` | {Object or Function} | Allows you to set the tooltip options. See the tooltip example. |\n|`tooltip` | {string or Function} | Let you set the tooltip content. |\n|`headerTooltip` | {string} | Let you set the header title tooltip content. |\n|`headerIconTooltip` | {string} | Let you set the header icon tooltip content. |\n|`filterButtonTooltip` | {string} | Let you set the header filter button tooltip content. |\n|`tooltipCssPart` | {string or Function} | Allows you to set the name of a tooltip css part that can be used to customize the tooltip css. This can be a string or a function. See the columns-custom-css example.\n|`headerTooltipCssPart` | {string} | Allows you to sets the header tooltip css part.\n|`headerIconTooltipCssPart` | {string} | Allows you to sets the header icon tooltip css part.\n|`filterButtonTooltipCssPart` | {string} | Allows you to sets the filter button tooltip css part.\n|`cellSelectedCssPart` | {string} | Allows customization of a selected cell's background color.\n|`editor` | {object} | Adds an editor to the column if editable is set on the grid. See editing section for more details.\n\n## Column Settings (Specific)\n\n|Setting|Type|Description|\n|---|---|---|\n|`href` | {string|Function} | Used to create the href for hyperlink formatters. This can be a string or a function that can work dynamically. It can also replace `{{value}}` with the current value. |\n|`text` | {string} | Used to create the txt value for hyperlink formatters if a hard coded link text is needed. |\n|`disabled` | {boolean|Function} | Sets the cell contents to disabled, can also use a callback to determine this dynamically. Only checkboxes, radios, buttons and link columns can be disabled at this time. Selection columns require disabled rows in order to not be clickable/selectable. |\n|`uppercase` | {boolean} | Allows you to set the text as uppercase. |\n\n## Formatters\n\n|Formatter|Description|\n|---|---|\n|`text` | (Default) Formats the column value as a direct text element using toString in the grid cell. Undefined or Null values will be shown as empty.|\n|`password` | Formats the column value masking the string length with stars. Undefined or Null values will be shown as empty. This is good for private data. |\n|`rowNumber` | Formats the cell with a row number column that is shown 1 to n no matter what the sort order is. |\n|`date` | Formats date data as a date string in the desired format, by default it will use `dateStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`time` | Formats date data as a time string in the desired format, by default it will use `timeStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`decimal` | Formats number data as a decimal string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`integer` | Formats number data as a integer string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`selectionCheckbox` | Displays a checkbox column for selection when using `rowSelection=\"mixed\"` or `rowSelection=\"multiple\"`|\n|`selectionRadio` | Displays a checkbox column for selection when using `rowSelection=\"single\"` |\n| `button` | Displays an `ids-button`. Other column settings like `type` can be used to set the button type as can `icon` by set for icon only buttons. Use the `click` setting/function to get an callback handler. |\n| `hyperlink` | Displays an `ids-hyperlink`. Other column settings like `href` can be used to set the link href and `text` can be used to set the text to specific text. Use the `click` setting/function to get an callback handler. |\n| `checkbox` | Displays an `ids-checkbox`. The value will be checked depending on if the attached field is true or `\"true\"`. |\n| `badge` | Displays an `ids-badge`. The associated field will be placed in the badge. The `color` option can also be set to set the ids-badge color setting. |\n| `alert` | Displays `ids-alert` element, and the field value will appear in a tooltip. An `icon` option can be provided as an override.|\n| `color` | Displays `ids-color` element. If a `color` option is provided as an override, the field's value will appear in a tooltip. |\n| `icon` | Displays the field value as an `ids-icon`. An `icon` option can be provided as an override, and the field value will appear beside this `icon` override. A `size` option can also be provided. |\n| `favorite` | Displays the field value as a `star-filled` if true or `star-outlined` if false. A `size` option can be provided as an override. |\n| `tag` | Displays the field value as an `ids-tag`. A `color` option can be provided as an override. |\n| `progress` | Displays the field value as an `ids-progress`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `rating` | Displays the field value as an `ids-rating`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `slider` | Displays the field value as an `ids-slider`. A `text` option can be provided to customize the label. A `color`, `max`, `min` and `type` option can be provided as overrides. |\n| `stepChart` | Displays the field value as an `ids-step-chart`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `image` | Displays the field value as an `ids-image`. A `text` option can be provided to the `alt` and `title` attributes. |\n\n### Deprecated Formatters (Deprecated from 4.x)\n\n- `Input` No longer suggested to use, use simple list instead or a Text Formatter.\n- `Status, Color` No longer used, but badges can be used.\n- `Placeholder` Can now be set on the column and used with other formatters\n- `Ellipsis` Is now always enabled.\n- `Readonly` Can now be set on the column and used with other formatters\n- `Drilldown` Use button formatter with an icon.\n- `Template` is now deprecated for performance reasons, use a custom formatter now.\n- `ClassRange` Use column cssClass function or string\n- `Autocomplete, Lookup, TargetedAchievement, ProcessIndicator, Spinbox, Fileupload, Dropdown, Colorpicker, Tree, SummaryRow, GroupFooterRow, GroupRow, Expander, Editor, Textarea, Actions, RowReorder` May be added later\n\n## Custom Formatters\n\nIt is possible to create your own custom formatter. The idea behind the formatter is it takes the cell value and does processing on it to return the correct markup for the cell. The simplest custom formatter would be this example.\n\n```js\ncolumns.push({\n  id: 'custom',\n  name: 'Custom',\n  field: 'price',\n  formatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n    const value = `Custom: ${rowData[columnData.field] || '0'}`;\n    return `<span class=\"text-ellipsis\">${value}</span>`;\n  }\n});\n```\n\nTo style a custom formatter you may need to add a css part for the element. For example:\n\n```js\nformatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n  const value = `${rowData[columnData.field] || ''}`;\n  return `<a part=\"custom-link\" href=\"#\" class=\"text-ellipsis\">${escapeHTML(value)}</a>`;\n},\n```\n\nThen in the style sheet you add for you page you put the styles.\n\n```css\nids-data-grid::part(custom-link) {\n  color: #da1217;\n}\n\nids-data-grid::part(custom-link):hover {\n  color: #6c080b;\n}\n```\n\nThe formatter is then linked via the column on the formatter setting. When the grid cell is rendered the formatter function is called and the following arguments are passed in.\n\n- `rowData` The current row's data from the data array.\n- `columnData` The column object with all of the column configuration for this cell.\n\n## Events\n\n- `activecellchanged` Fires when the active cell changes with the keyboard or by click.\n- `sorted` Fires when the sort column is changed.\n- `selectionchanged` Fires any time the selection changes.\n- `activationchanged` Fires any time the active row changes.\n- `rowselected` Fires for each row that is selected.\n- `rowdeselected` Fires for each row that is deselected.\n- `rowactivated` Fires for each row that is activated.\n- `rowdeactivated` Fires for each row that is deactivated.\n- `rowclick` Fires for each row that is clicked.\n- `dblclick` Fires each time double clicked on body cells or header cells. Based on where it clicked details can be capture like `type: 'body-cell'|'header-title'|'header-filter'` etc.\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n- `columnresized` Fires when a column is resized or setColumnWidth is called.\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto\n- `rowExpanded` Fires when a tree or expandable row is expanded or collapsed\n- `rowCollapsed` Fires when a tree or expandable row is expanded or collapsed\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called.\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto.\n- `beforemenushow` Fires before context menu show, you can return false in the response to veto.\n- `menushow` Fires after context menu show.\n- `menuselected` Fires after context menu item selected.\n- `settingschanged` Fires after settings are changed in some way.\n- `scrollstart` Fires when data-grid reaches the topmost row.\n- `scrollend` Fires when data-grid reaches the bottommost row.\n- `afterrendered` Fires after rendered the data grid.\n\n## Methods\n\n- `setColumnWidth` Can be used to set the width of a column.\n- `setColumnVisibility` Can be used to set the visibility of a column.\n- `setActivateCell(cell, row)` Can be used to set focus of a cell.\n- `selectedRows` Lists the indexes of the currently selected rows.\n- `saveSetting(setting: string)` Save the given setting to local storage.\n- `saveAllSettings` Save all user settings to local storage.\n- `savedSetting(setting: string)` Get saved given setting value from local storage.\n- `allSavedSettings` Get saved all user settings from local storage.\n- `clearSetting(setting: string, key?: string)` Clear the given saved setting from local storage.\n- `clearAllSettings(userKeys: unknown)` Clear saved all user settings from local storage.\n- `restoreSetting(setting: string, value?: unknown)` Restore the given saved setting from local storage.\n- `editFirstCell` Puts the first cell on the active row into edit mode.\n- `appendData(data: Record<string, unknown>)` Use this to add more data to the datagrid's existing dataset.  This will automatically render additional rows in the datagrid.\n- `addRow(data: Record<string, unknown>, index?: number)` Adds a new row at optional row index and defaults the values to all those provided in the data\n- `addRows(data: Array<Record<string, unknown>>, index?: number)` Adds multiple new rows at optional row index and defaults the values to all those provided in the data\n- `removeRow(index: number)` Removed the provided row index from the dataset and visual datagrid\n- `clearRow(index: number)` Clears all values on the given row.\n- `commitCellEdit` Stops editing and commits the value in the active editor.\n- `cancelCellEdit` Stops editing and reverts the value in the active editor.\n- `resetDirtyCells` Clears all dirty cell indicators.\n- `dirtyCells` Gives a list of all currently dirty cells.\n- `exportToExcel(format: 'csv' | 'xlsx', filename: string, keepGridFormatting: boolean)` Export datagrid datasource to an excel file. This keeps grid formatting by default.\n- `collapseAll()` Collapse all expandable or tree rows.\n- `expandAll()` Expand all expandable or tree rows.\n- `toggleAll(opt: boolean)` Toggle collapse/expand all expandable or tree rows. `opt false`: will expand all, `opt: true`: will collapse all\n- `refreshRow` IdsDataGridRow method to refresh row element and its cells.\n- `refreshCell` IdsDataGridCell method to refresh cell element.\n- `updateDataset(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row.\n- `updateDatasetAndRefresh(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row and refreshes row/cells UI.\n\n## Filters\n\nData rows can be filter based on one or several criteria. Whole filter row can turned on/off by the api setting `filterable` and can be disabled by the api setting `filter-row-disabled`. The filter conditions can be applied thru the UI or programmatically. Each column can have its own filter type and turn on/off by columns setting.\n\n### Filter Columns Setting\n\nAll the filter settings can be passed thru columns data.\n\n|Setting|Type|Description|\n|---|---|---|\n|`filterType` | Function | Data grid built-in filter method, see the dedicated section below. |\n|`filterConditions` | Array | List of items to be use as operators in menu-button or options in dropdown. |\n|`filterFunction` | Function | User defined filter method, it must return a boolean. |\n|`filterOptions` | Object | Setting for components are in use, for example: `label, placeholder, disabled`. |\n|`isChecked` | Function | User defined filter method, it must return a boolean. This method use along built-in `checkbox` only, when filter data value is not boolean type. |\n\n### Built-in Filter Methods\n\n|Method|Description|\n|---|---|\n|`text` | It filter as text comparison. Contains input and menu-button with list of default operators. |\n|`integer` | It filter as integer comparison. Contains input and menu-button with list of default operators. |\n|`decimal` | It filter as decimal comparison. Contains input and menu-button with list of default operators. |\n|`contents` | It filter as text comparison. Contains dropdown and auto generate list of items based on column data. |\n|`dropdown` | It filter as text comparison. Contains dropdown and must pass list of item by setting `filterConditions`. |\n|`checkbox` | It filter as boolean comparison. Contains menu-button with list of default operators. |\n|`date` | It filter as date comparison. Contains date-picker and menu-button with list of default operators. |\n|`time` | It filter as time comparison. Contains time-picker and menu-button with list of default operators. |\n\n### Custom Filter\n\nIf the built-in filters are not enough, creating a custom filter is an option. There are two parts you can create both parts custom or mix-match with built-in.\n\n1. `UI Only` In order to do custom UI part of filter, add as html markup thru a slot. It must use slot and column-id attributes for example: `<div slot=\"filter-n\" column-id=\"n\">...</div>` where n is the columnId same passed in the columns.\n1. `filterFunction` This is a user defined filter method which must return a boolean. It determines if a cell value should be considered as a valid filtered value.\n1. `disableClientFilter` This is an api setting to disable filter logic client side. It will set filter conditions and fire an event `filtered` which can listen for custom logic.\n\n### Filter Code Examples\n\nBasic text filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nNo filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"false\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisabled filter row, will disabled all attached filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\" filter-row-disabled=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nHyperlink, integer, decimal, date and time filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'hyperlink',\n  name: 'Hyperlink',\n  field: 'description',\n  href: '#',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.hyperlink\n});\ncolumns.push({\n  id: 'integer',\n  name: 'Integer',\n  field: 'price',\n  filterType: dataGrid.filters.integer,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'decimal',\n  name: 'Decimal',\n  field: 'price',\n  filterType: dataGrid.filters.decimal,\n  formatter: dataGrid.formatters.decimal,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'date',\n  name: 'Date',\n  field: 'publishDate',\n  filterType: dataGrid.filters.date,\n  formatter: dataGrid.formatters.date\n});\ncolumns.push({\n  id: 'time',\n  name: 'Time',\n  field: 'publishDate',\n  filterType: dataGrid.filters.time,\n  formatter: dataGrid.formatters.time\n});\n```\n\nSome filter options label, placeholder, disabled.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterOptions: {\n    label: 'Label text for description input',\n    placeholder: 'Placeholder text for description input',\n    disabled: true\n  }\n});\n```\n\nCustom operators items for menu-button.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterConditions: [{\n    value: 'contains',\n    label: 'Contains',\n    icon: 'filter-contains'\n  },\n  {\n    value: 'equals',\n    label: 'Equals',\n    icon: 'filter-equals',\n    selected: true\n  }]\n});\n```\n\nContents and dropdown type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'location',\n  name: 'Location',\n  field: 'location',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.contents,\n  filterOptions: {\n    notFilteredItem: { value: 'not-filtered', label: 'Not Filtered' }\n  }\n});\ncolumns.push({\n  id: 'useForEmployee',\n  name: 'NotFilterdItem (shown as blank)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\ncolumns.push({\n  id: 'useForEmployeeCustomNotFilterdItem',\n  name: 'NotFilterdItem (show as custom text)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'not-filtered', label: 'Not Filtered' },\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\n```\n\nCheckbox type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'checkbox',\n  name: 'Checkbox',\n  field: 'inStock',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox\n});\ncolumns.push({\n  id: 'customCheckMethod',\n  name: 'Custom check method',\n  field: 'active',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox,\n  isChecked: (value) => value === 'Yes'\n});\n```\n\nCustom filter method.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\n// Custom filter checking\nconst myCustomFilter = (opt) => {\n  const { operator, columnId, value } = opt.condition;\n  const val = {\n    condition: Number.parseInt(value, 10),\n    data: Number.parseInt(opt.data[columnId], 10)\n  };\n  let isMatch = false;\n  if (Number.isNaN(val.condition) || Number.isNaN(val.data)) return isMatch;\n\n  if (operator === 'equals') isMatch = (val.data === val.condition);\n  if (operator === 'greater-than') isMatch = (val.data > val.condition);\n  if (operator === 'greater-equals') isMatch = (val.data >= val.condition);\n  if (operator === 'less-than') isMatch = (val.data < val.condition);\n  if (operator === 'less-equals') isMatch = (val.data <= val.condition);\n\n  return isMatch;\n};\n\nconst columns = [];\ncolumns.push({\n  id: 'customFilterMethod',\n  name: 'Custom Filter Method',\n  field: 'price',\n  filterFunction: myCustomFilter,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\n```\n\nCustom filter UI part.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n  <div slot=\"filter-description\" column-id=\"description\">\n    <ids-menu-button id=\"btn-filter-description\" icon=\"filter-greater-equals\" menu=\"menu-filter-description\" dropdown-icon>\n      <span class=\"audible\">Greater Than Or Equals</span>\n    </ids-menu-button>\n    <ids-popup-menu id=\"menu-filter-description\" target=\"#btn-filter-description\">\n      <ids-menu-group select=\"single\">\n        <ids-menu-item value=\"equals\" icon=\"filter-equals\">Equals</ids-menu-item>\n        <ids-menu-item value=\"greater-than\" icon=\"filter-greater-than\">Greater Than</ids-menu-item>\n        <ids-menu-item value=\"greater-equals\" icon=\"filter-greater-equals\" selected=\"true\">Greater Than Or Equals</ids-menu-item>\n        <ids-menu-item value=\"less-than\" icon=\"filter-less-than\">Less Than</ids-menu-item>\n        <ids-menu-item value=\"less-equals\" icon=\"filter-less-equals\">Less Than Or Equals</ids-menu-item>\n      </ids-menu-group>\n    </ids-popup-menu>\n    <ids-input id=\"input-filter-description\" type=\"text\" size=\"full\" placeholder=\"Slotted description\" label=\"Slotted description input\">\n    </ids-input>\n  </div>\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisable client filter\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" disable-client-filter=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n\ndataGrid.addEventListener('filtered', (e: any) => {\n  console.info('filtered:', e.detail);\n});\n```\n\n### Filter rows programmatically\n\n```js\n// Filter rows\nconst conditions = [{ columnId: 'description', operator: 'contains', value: '5' }];\ndataGrid.applyFilter(conditions);\n\n// Reset all filters\ndataGrid.applyFilter([]);\n```\n\n### Filter Events\n\nThe following events are relevant to data-grid filters.\n\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n\n## Custom cell colors\n\nIn some cases, it may be desirable to customize the background color of cells.  This can be done with the `cssPart` column setting:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell'\n});\n```\n\nThe `cssPart` property is translated into a `part` attribute that is applied to every cell in the column.  In the event the color needs to be conditional based on the row index or other logic, a function can be used:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2')\n  // ...\n});\n```\n\nAfter this is defined, accompanying CSS can be written to target the parts `custom-cell`, `custom-cell-1`, and `custom-cell-2` to change background color or other CSS properties of the cell:\n\n```css\nids-data-grid::part(cell) {\n  background-color: #ebf9f1;\n}\n\nids-data-grid::part(cell-selected) {\n  background-color: #c9dad0;\n}\n```\n\n### Changing selected cell colors\n\nAnother column setting, `cellSelectedCssPart` can be used alongside `cssPart` to customize the selected color of the row in a similar way.  When using `mixed` selection, this color is also applied to activated rows:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell',\n  cellSelectedCssPart: 'custom-cell-selected'\n});\n```\n\nThis column setting can also be a function, just like `cssPart`:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2'),\n  cellSelectedCssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-selected-1' : 'custom-cell-selected-2')\n  // ...\n});\n```\n\n## Tooltip Code Examples\n\nSet suppress tooltips to turn off.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" suppress-tooltips>\n</ids-data-grid>\n```\n\nSet custom tooltip strings.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: 'This is a product Id',\n  headerTooltip: 'This is the product Id header title',\n  headerIconTooltip: 'This is product Id header icon',\n  filterButtonTooltip: 'This is the product Id filterButton'\n});\n```\n\nSet tooltip as callback.\n\n```js\nconst tooltipCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return `Text: ${text}<br/>Header Row: ${rowIndex}, Cell: ${columnIndex}`;\n  } else if (type === 'filter-button') {\n    return `Text: ${text}<br/>FilterButton Row: ${rowIndex}, Cell: ${columnIndex}`;\n  }\n  return `Text: ${text}<br/>for Row: ${rowIndex}, Cell: ${columnIndex}`;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: tooltipCallback\n});\n```\n\nSet tooltip custom options.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: {\n    placement: 'top',\n    headerPlacement: 'top',\n    headerIconPlacement: 'top',\n    filterButtonPlacement: 'bottom',\n    x: 0,\n    y: 10,\n    headerX: 0,\n    headerIconX: 0,\n    headerY: 10,\n    headerIconY: 10,\n    filterButtonX: 0,\n    filterButtonY: 22\n  }\n});\n```\n\nSet tooltip options as callback.\n\n```js\nconst tooltipOptionsCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return { headerPlacement: 'top', headerX: 0, headerY: 10 };\n  } else if (type === 'header-icon') {\n    return { headerIconPlacement: 'top', headerIconX: 0, headerIconY: 10 };\n  } else if (type === 'filter-button') {\n    return { filterButtonPlacement: 'bottom', filterButtonX: 0, filterButtonY: 22 };\n  }\n  return { placement: 'top', x: 0, y: 10 };\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: tooltipOptionsCallback\n});\n```\n\nSet tooltip custom css.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: 'custom-turquoise',\n  headerTooltipCssPart: 'custom-turquoise',\n  headerIconTooltipCssPart: 'custom-turquoise',\n  filterButtonTooltipCssPart: 'custom-turquoise'\n});\n```\n```css\n/* tooltip css part `custom-turquoise` */\nids-data-grid::part(custom-turquoise-tooltip-arrow-top)::after {\n  border-top-color: #2f8d8e;\n}\nids-data-grid::part(custom-turquoise-tooltip-popup) {\n  background-color: #2f8d8e;\n}\n```\n\nSet tooltip custom css as callback.\n\n```js\nconst tooltipCssPartCallback = (args: { type: string }): string => {\n  const { type } = args;\n  let cssPart = '';\n  // Set random css part each time, for `body-cell` tooltips\n  if (type === 'body-cell') {\n    const parts = ['azure', 'ruby'];\n    const randomIndex = Math.floor(Math.random() * parts.length);\n    cssPart = parts[randomIndex];\n  }\n  return cssPart;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: tooltipCssPartCallback\n});\n```\n```css\n/* tooltip css part `azure` */\nids-data-grid::part(azure-tooltip-arrow-top)::after {\n  border-top-color: #0066d4;\n}\nids-data-grid::part(azure-tooltip-popup) {\n  background-color: #0066d4;\n}\n\n/* tooltip css part `ruby` */\nids-data-grid::part(ruby-tooltip-arrow-top)::after {\n  border-top-color: #c31014;\n}\nids-data-grid::part(ruby-tooltip-popup) {\n  background-color: #c31014;\n}\n```\n\n## context menu Code Examples\n\nThe context menus can be set via the dataset.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n</ids-data-grid>\n```\n```js\n// Dataset for header cells context menu\nconst headerMenuData = {\n  id: 'grid-header-context menu',\n  contents: [{\n    id: 'header-actions-group',\n    items: [\n      { id: 'actions-split', value: 'actions-split', text: 'Split' },\n      { id: 'actions-sort', value: 'actions-sort', text: 'Sort' },\n    ]\n  }],\n};\n\n// Dataset for body cells context menu\nconst menuData = {\n  id: 'grid-context menu',\n  contents: [{\n    id: 'actions-group',\n    items: [\n      { id: 'item-1', value: 'item-1', text: 'Item One' },\n      { id: 'item-2', value: 'item-2', text: 'Item Two' },\n      { id: 'item-3', value: 'item-3', text: 'Item Three' }\n    ]\n  }],\n};\n\n// Set context menu data with data-grid\ndataGrid.menuData = menuData;\ndataGrid.headerMenuData = headerMenuData;\n\n// Set to return true/false in the response to veto before context menu show.\ndataGrid.addEventListener('beforemenushow', (e: any) => {\n  console.info('before context menu show', e.detail);\n  // e.detail.response(false);\n});\n\n// Set to watch after context menu show.\ndataGrid.addEventListener('menushow', (e: any) => {\n  console.info('After context menu show', e.detail);\n});\n\n// Set to watch after context menu item selected.\ndataGrid.addEventListener('menuselected', (e: any) => {\n  console.info('context menu item selected', e.detail);\n});\n```\n\nSet context menu thru Slot.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n  <!-- context menu header cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"header-context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n      <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n  <!-- context menu body cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n      <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n      <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n      <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n</ids-data-grid>\n```\n\nSet context menu thru ID.\n\n```html\n<ids-data-grid\n  header-menu-id=\"grid-header-context menu\"\n  menu-id=\"grid-context menu\"\n  id=\"data-grid-1\"\n  label=\"Books\"\n></ids-data-grid>\n\n<!-- context menu header cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-header-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n    <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n\n<!-- context menu body cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n    <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n    <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n    <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n```\n\n## Empty Message\n\nSet empty message thru slot (markup).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-slot\" label=\"Books\">\n  <ids-empty-message hidden icon=\"empty-search-data-new\" slot=\"empty-message\">\n    <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">No Data</ids-text>\n    <ids-text hidden label=\"true\" slot=\"description\">There is no data available.</ids-text>\n  </ids-empty-message>\n</ids-data-grid>\n```\n\nSet empty message thru settings (markup).\n\n```html\n<ids-data-grid\n  id=\"data-grid-em-thru-settings\"\n  label=\"Books\"\n  empty-message-icon=\"empty-error-loading-new\"\n  empty-message-label=\"No Data\"\n  empty-message-description=\"There is no data available.\"\n></ids-data-grid>\n```\n\nSet empty message thru settings (javascript).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-settings-js\" label=\"Books\">\n</ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-em-thru-settings-js');\ndataGrid.emptyMessageIcon = 'empty-error-loading-new';\ndataGrid.emptyMessageLabel = 'No Data';\ndataGrid.emptyMessageDescription = 'There is no data available.';\n```\n\n## Row Height\n\nAs mentioned in the settings section you can change the row height by setting the rowHeight option.\n\n```html\n     <ids-data-grid id=\"data-grid-row-height\" row-height=\"md\"></ids-data-grid>\n```\n\nIts worth mentioning the characteristics and usage for each one.\n\nLarge (`row-height=\"lg\"`) - Row Height is 50. The default row height, header is 16px and body cells are 16px. 16px padding on cells and header. You should use this most of the time if there is plenty of room on the UI and to avoid the UI looking crowded.\nMedium (`row-height=\"md\"`) - Row Height is 40. Header is 16px and body cells are 16px. 12px padding on cells and header. If you need to see a few more rows but still want to avoid a crowded UI, this is the next best option.\nSmall (`row-height=\"sm\"`) - Row Height is 35. Header is 16px and body cells are 16px. 8px padding on cells and header. This is the smallest option that is recommended for readability and spacing.\nExtra Small (`row-height=\"xs\"`) - Row Height is 30. Header is 14px and body cells are 14px. 8px padding on cells and header. If you need a very compressed data grid with a lot of data you can use this option. But there is a trade off of bad readability and spacing.\nExtra Extra Small (`row-height=\"xxs\"`) - Row Height is 25. Header is 14px and body cells are 14px. 2px padding on cells and header. Avoid this option as it is very crowded but it is included for edge cases.\n\n## States and Variations\n\n**Rows**\n- Hover\n- Selected\n- Disabled\n- Readonly\n- Activated\n\n**Columns**\n- Focus\n- Hover\n- Sorted\n- Selected\n- Disabled\n- Filtered\n\n**Cells**\n- Hover (sometimes a cursor change)\n- Readonly\n- Focus\n- Checked/Not Checked (Checkboxes)\n\n## Keyboard Guidelines\n\n- <kbd>Tab</kbd>The initial tab enters the grid with focus on the first cell of the first row, often a header. A second tab moves out of the grid to the next tab stop on the page. Once focus is established in the grid, a TAB into or a Shift Tab into the grid will return to the cell which last had focus. If in edit mode will finish editing and start editing the next cell.\n- <kbd>Shift + Tab</kbd> Moves the reverse of tab. If in edit mode will finish editing and start editing the previous cell.\n- <kbd>Left</kbd> and <kbd>Right</kbd> Move focus to the adjacent column's cell. There is no wrap at the end or beginning of columns.\n- <kbd>Up</kbd> and <kbd>Down</kbd> Move focus to the adjacent row's cell. There is no wrap at the first or last row.\n- <kbd>Home</kbd> moves focus to the first cell of the current row\n- <kbd>End</kbd> moves focus to the last cell of the current row\n- <kbd>Page Up</kbd> moves focus to the first cell in the current column\n- <kbd>Page Down</kbd> moves focus to the last cell in the current column\n- <kbd>Space</kbd> Toggles selection the activate row. If suppressRowDeselection is set it will be ignored on deselect. If the cell contains an expandable element then the row will toggle the expanded state. If the cell contains a checkbox editor, will toggle the checkbox state.\n- <kbd>F2</kbd> toggles actionable mode. Pressing the <kbd>Tab</kbd> key while in actionable mode moves focus to the next actionable cell. While in actionable mode you can do things like type + enter. This will move you down a row when you hit enter. If the cell has a control that uses down arrow (like the drop downs or lookups that are editable). Then the user needs to hit enter to enable the edit mode on that cell.\n- <kbd>Triple Click</kbd> Not a keyboard shortcut, but if you have text in a cell that is overflowed a triple click will select all the text even the part that is invisible.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Enter</kbd> Activates edit mode on the cell if it is editable. There is also an \"auto edit detection\". If the user starts typing then edit mode will happen automatically without enter. If in edit mode already <kbd>Enter</kbd> will finish edit mode. If `editNextOnEnterPress` is enabled then editing will start on the same column in next row.\n- <kbd>Shift + Enter</kbd> Same as enter but if `editNextOnEnterPress` is enabled then editing will start on the same column in previous row.\n- <kbd>F2</kbd> Finish editing same as Enter. But if `editNextOnEnterPress` is enabled, will stay in same cell. `cancelEditMode` will fire.\n- <kbd>CMD/CTRL + Enter</kbd> Finish editing same as Enter.\n- <kbd>ESC</kbd> Revert to the previous value and cancel editing. `cancelEditMode` will fire.\n\n## Responsive Guidelines\n\n- By default, data grid grows depending on the amount of contents within and will scroll if necessary under the header. It stops growing when it reaches the size of the parent container.\n- `autoFit` property or `auto-fit` attribute can be set manually to make the data grid size fill and be responsive to the size of the screen, regardless of the amount of contents.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Counts have all new markup and classes.\n\n**4.x to 5.x**\n- Data grid has all new markup and a custom element but some similarly named options\n- Still uses same columns and data set options. Some column options enhanced and changed.\n- If using events events are now plain JS events for example: sorted, rendered\n- Some Api Functions have changed\n- If using properties/settings these are now attributes or as plain properties for example: data, virtual-scroll\n- Markup has changed to a custom element `<ids-data-grid></ids-data-grid>`\n- Can now be imported as a single JS file and used with encapsulated styles\n- `Drill Down` Formatter is now covered by `Button` formatter with `icon=\"drilldown\"`\n- `textOverflow` setting is now by default\n- `rowNavigation` setting has replaced `cellNavigation`. Cell navigation is the default behavior.\n- `stretchColumn` is now more flexible and can be achieved by setting a column width to `minmax(130px, 4fr)`. I.E. some min width and a `fr` unit equal to the remaining number of columns (or similar variations).\n- split columns are not supported anymore but could be done with a custom formatter if needed\n- `frozenColumns` setting is now set on each column by adding `frozen: 'left'` or `frozen: 'right'` to the column definition.\n- Some events are renamed see the events section for more details, also the signature of the events has changed.\n- Custom formatter functions can now be any type of function and have a different signature.\n- The `expanded` column option for tree was renamed to `rowExpanded`.\n- The `expandrow/collapserow` events are renamed to `rowexpanded/rowcollapsed`\n- The `beforeentereditmode/entereditmode/exiteditmode` event is renamed to `beforecelledit/celledit/endcelledit/cancelcelledit`\n- The `actionablemode` feature has been replaced with simply tabbing to the next editable field when in edit mode.\n\n## Accessibility Guidelines\n\n1.1.1 Non-text Content - All images, links and icons have text labels for screen readers when the formatters are used.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and links and images of text has a contrast ratio of at least 4.5:1.\n- 2.1.1 Keyboard - Make all functionality available from a keyboard. The grid has keyboard shortcuts and is usable with a screen reader due to the addition of aria tags.\n- A datagrid in general including this one uses the following aria tags\n  - `aria-label` labels the enter table on the main table\n  - `aria-rowcount` lists the visible row count on the main table\n  - `aria-colindex` the index of each column on the column elements\n  - `aria-rwindex` the index of each row on the row elements\n  - `aria-setsize` for tree grid lists the number of elements in each level (group)\n  - `aria-level` the level of indentation\n  - `aria-posinset` the depth into each set\n  - `aria-expanded` on the row it indicates if the row is expanded (for tree and expandable row)\n  - `aria-sort` indicates the sort direction on the sortable columns\n  - `aria-checked` indicates if the element is checked on checkbox columns and headers\n\n## Regional Considerations\n\nTitles and labels should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n\n## Code Separation (For Developers)\n\nThe code is divided into several files. Here is a description of where everything is.\n\n- `ids-data-grid-cell.ts` creates a non-shadow root `ids-data-grid-cell`, and handles its own selection, and activation.\n- `ids-data-grid-cell.scss` contains all css related to `.ids-data-grid-cell` and its children\n- `ids-data-grid-contextmenu.ts` contains code in the form of export functions, that adds ability to get right click menus on headers and cells\n- `ids-data-grid-filter.scss` contains all css related to the filter row and its children\n- `ids-data-grid-filter.ts` contains code to implement the filtering functionality and its ui (some functions are in ids-data-source)\n- `ids-data-grid-formatters.ts` contains all formatter functions and some supporting code like data extraction\n- `ids-data-grid-header.ts` contains most header functionality, the header template, and code related to header actions like sort, reorder and selection.\n- `ids-data-grid-header.scss` contains all css related to `.ids-data-grid-header` and its children\n- `ids-data-grid-row.ts` contains most row functionality, the row template, and code related to row actions like expand, collapse, select, activate\n- `ids-data-grid-row.scss` contains all css related to `.ids-data-grid-row` and its children\n- `ids-data-grid-tooltip-mixin.js` contains a tooltip mixin that adds tooltip functionality to cells and headers, its different from `ids-tooltip-mixin` (more specific)\n- `ids-data-grid.js` contains all main data grid code, the api and settings and the main generator loop for the data grid\n"}},{"name":"ids-data-grid-editors","attributes":[{"name":"type","description":"The type of editor (i.e. input, dropdown, checkbox ect)","values":[]},{"name":"input","description":"Holds the Editor","values":[]}],"description":{"kind":"markdown","value":"# Ids Data Grid\n\n## Description\n\nThe data grid component (ids-data-grid) is used to arrange tabular data in rows and columns for easier scanning and comparison. Data grids are very configurable in both design and functionality and they can be found within almost every product/app.\n\nYou should pass an array of objects in to the grid on the `dataset` object. Also pass the `columns` array which contains the column configuration. There are a number of events described in the events and API section, as well as the column settings.\n\nA Read-Only data grid uses \"Formatters\" to render cell content. A number of these are listed in the API section and it is possible to create your own.\n\n## Use Cases\n\n- The data grid component is most useful when it is used for categorically sorting dense and repetitive information. Each individual item is listed down the Y axis of the chart, and their shared attribute categories are listed along the X axis. The resulting cells are filled with information that is relevant to the corresponding item and attribute.\n\n## Terminology\n\n- **Title**: The name of the data grid optionally appearing above the grid and describing the contents.\n- **Options**: An optionally actions menu button with functionality that operates on the entire data grid.\n- **Cell**: Body elements of the data grid that contain an object's value or attribute. Cells should only contain one type of content or it can be confusing and hurt accessibility.\n- **Header Cell**: These cells contain the names of the columns in the grid and related functions like filtering and sorting. All cells below the header cell will hold values related to the attribute in the header cell.\n- **Column**: Cells stacked vertically that contain values relate to the attribute found on the top header cell.\n- **Row**: Each row contains one cell per column in the data grid, and each cell displays a single value in the bound data item.\n- **Tree**: Denotes the use of hierarchical data, with an expandable and collapsible hierarchy.\n\n## Themeable Parts\n\n- `table` allows you to further style the table main element\n- `container` allows you to further style the container element\n- `body` allows you to further style the body element\n- `header` allows you to further style the header element\n- `headerCell` allows you to further style the header cells\n- `row` allows you to further style the rows\n- `cell` allows you to further style the row cells\n- `cell-selected` allows you to further style row cells that are selected (in mixed-selection mode, activated cells are also styled)\n- `tooltip-popup` allows you to further style or adjust the outer tooltip popup element\n- `tooltip-arrow` allows you to adjust the tooltip arrow element\n\n## Features (With Code Examples)\n\nA data grid is created by adding an `ids-data-grid` html element in the page and setting the options either inline in the markup or in the JS part of the code. You can only use simple types (string, boolean ect) for inline markup so passing the data and column arrangement is always done in the JS part. The data will be an array of objects so its in the correct tabular form. The columns are also an array of objects but with defined options and types. See more about columns in next section.\n\n```html\n<ids-data-grid id=\"data-grid-1\"></ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-1');\ndataGrid.data = dataset;\ndataGrid.columns = columns;\n```\n\n### Column Groups\n\nSetting column groups allows you to add a second level of columns in your header and the ability to group the first level. This is useful for when you have a large number of columns and you want to group them into logical or related sections.\n\nColumn groups are achieved by providing an array to the `columnGroups` setting. Only one level of column groups can be defined.\n\n```js\ndataGrid.columnGroups = [\n{\n  colspan: 3,\n  id: 'group1',\n  name: 'Column Group One',\n  align: 'center'\n},\n{\n  colspan: 2,\n  id: 'group2',\n  name: 'Column Group Two'\n},\n{\n  colspan: 2,\n  id: 'group3',\n  name: 'Column Group Three',\n  align: 'right'\n},\n{\n  colspan: 11,\n  id: 'group4',\n  name: 'Column Group Four',\n  align: 'left'\n}\n];\n```\n\nIf the column is hidden it will be automatically removed from the `colspan`. If in the last group you didn't provided a bug enough `colspan` it will be set to the remaining columns. The `name` text can be right or left aligned and given an id. The only required property is `colspan`.\n\n### Selection\n\nThe data grid selection feature involves the setting `rowSelection`. This can be one of several values.\n\n- `false` No selection enabled.\n- `multiple` Allows multiple rows to be selected. When doing this it is recommended to add a `formatters.selectionCheckbox` for the first column.\n- `single` Allows a single row to be selected. When doing this you can optionally to add a `formatters.selectionRadio` for the first column. You can use the `suppressRowDeselection` if you want one row to always be selected.\n- `mixed` Allows multiple rows to be selected by clicking only on the checkbox or <kbd>Space</kbd> key. If clicking a row then that row is activated, meaning it is the current row and something might be shown based on the data of that row. You can use the `suppressRowDeactivation` if you want one row to always be selected.\n\nHere is a code example for multi select\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" row-selection=\"multiple\">\n</ids-data-grid>\n```\n\n```js\n  dataGrid.addEventListener('rowselected', (e) => {\n    console.info(`Row Selected`, e.detail);\n  });\n\n  dataGrid.addEventListener('rowdeselected', (e) => {\n    console.info(`Row Deselected`, e.detail);\n  });\n\n  dataGrid.addEventListener('selectionchanged', (e) => {\n    console.info(`Selection Changed`, e.detail);\n  });\n```\n\nThe following events are relevant to selection/activation.\n\n`rowselected` Fires when an individual row is activation and gives information about that row.\n`rowdeselected` Fires when an individual row is deselected and gives information about that row.\n`selectionchanged` Fires once for each time selection changes and gives information about all selected rows.\n\n`rowactivated` Fires when an individual row is activated and gives information about that row.\n`rowdeactivated` Fires when an individual row is deactivated and gives information about that row.\n`activationchanged` Fires once for each time activation changes and gives information about the active row.\n\n### Tree Grid\n\nThe tree grid feature involves the setting `treeGrid` to true. In addition the data passed to the tree grid should contain a field called `children`. That contains the child rows. This can by unlimited levels but 2-4 is recommended as a max for a more usable UI. In addition you can preset some states by adding `rowExpanded: false` to the parent elements (default is expanded). And also set `rowHidden: false` for child rows that are expanded. You also need a `Expander` formatter on a cell (usually the first visible cell.\n\nHere is a code example for a tree grid.\n\n```html\n<ids-data-grid id=\"tree-grid\" label=\"Buildings\" tree-grid=\"true\" group-selects-children=\"true\"></ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to selection/activation.\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `groupSelectsChildren` {boolean} If the tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `suppressRowClickSelection` {boolean} If using selection you might want to set this so clicking a row will not select it.\n### Expandable Row\n\nThe Expandable Row feature involves the setting `expandableRow` to true. In addition a row template should be provided via an id that points to the `expandableRowTemplate` which is a `template` element. You can preset the expandable state by adding `rowExpanded: true` to the row element you want to expand. The default is collapsed.\n\nHere is a code example for an expandable row\n\n```html\n<ids-data-grid\n    id=\"data-grid-expandable-row\"\n    expandable-row=\"true\"\n    expandable-row-template=\"expandable-row-tmpl\"\n    label=\"Books\">\n    <template id=\"expandable-row-tmpl\">\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"16\" type=\"span\">${convention}</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">${price} USD</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">Lorem Ipsum is simply sample text of the printing and typesetting industry. Lorem Ipsum has been the industry standard sample text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only...</ids-text>\n        </ids-layout-grid>\n    </template>\n</ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to expandable rows\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRowTemplate` {string} Should point to the row `template` element.\n\n### Editing\n\nThe Editing features start by setting `editable` to true. In addition you should add editors to columns and enable features of each of the editors. The features differ depending on the component used for editing. See the Keyboard section for information on which keys can be used when editing..\n\nHere is a code example for an editable text cell.\n\n```js\ncolumns.push({\n    id: 'description',\n    name: 'Description',\n    field: 'description',\n    sortable: true,\n    resizable: true,\n    reorderable: true,\n    formatter: dataGrid.formatters.text,\n    editor: {\n      type: 'input',\n      inline: true,\n      editorSettings: {\n        autoselect: true,\n        dirtyTracker: true\n      }\n    }\n  });\n```\n\nHere is a code example for an editable dropdown cell\n\n```js\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  resizable: true,\n  reorderable: true,\n  formatter: dataGrid.formatters.dropdown,\n  editor: {\n    type: 'dropdown',\n    editorSettings: {\n      dirtyTracker: true,\n      validate: 'required',\n      options: [\n        {\n          label: 'Option 1',\n          value: 'opt1'\n        },\n        {\n          label: 'Option 2',\n          value: 'opt2'\n        }\n      ]\n    }\n  }\n});\n```\n\nTo cancel or disabled editing there are a few ways:\n\n- setting the column `editor` setting to undefined will disable editing on the column (as will not having an editor setting at all).\n- adding a `readonly` or `disabled` function which returned true for some cells based on a condition will disable or mark the cell readonly.\n- return false in the `beforecelledit` event in the response function\n\nThe following settings are available on editors.\n\n`type` As of now can be `checkbox`, `input`, `datepicker`, `timepicker`, or `dropdown` but more will be added.\n`inline` Default is false. If true the editor (for example an input) will be visible in a field.\n`editorSettings` Is an object that is loosely typed that lets you pass any option the editor supports in. For example any of the IdsInput or IdsCheckbox options can be passing in. Some special ones are:\n`editorSettings.autoselect` Text will be selected when entering edit mode\n`editorSettings.dirtyTracker` Enables the dirty tracker that marks changed cells.\n`editorSettings.validate` Text will be selected when entering edit mode\n`editorSettings.mask` Will pass mask settings to the input (if supported).\n`editorSettings.maskOptions` Will pass maskOptions settings to the input (if supported).\n`editorSettings.options` Dataset used for dropdown editor's list box options.\n\nWhen the use clicks in the cell or activates editing with the keyboard with the Enter key and types. The following events will fire.\n\n`beforecelledit` Fires before a cell is being edit (before edit is started). Can be vetoed by returning false as shown below.\n`celledit` Fires exactly when a cell is being edited.\n`endcelledit` Fires when a cell edit is completed and changed.\n`cancelcelledit` Fires when an edit is cancelled via the <kbd>Esc</kbd> key.\n\nTo cancel editing based on some condition or if editing is not allowed you can veto the `beforecelledit` event.\n\n```js\n  dataGrid.addEventListener('beforecelledit', (e: Event) => {\n    (<CustomEvent>e).detail.response(false);\n  });\n```\n\nThere are a few utility functions for editing the data grid mentioned in the Methods section.\n\n## Settings and Attributes\n\nWhen used as an attribute in the DOM the settings are kebab case, when used in JS they are camel case.\n\n- `virtualScroll` {boolean} When virtual scroll is used the grid can render many thousands of rows and only the rows visible in the scroll area are rendered for performance. This setting has limitations such as the rows need to be fixed size.\n- `addNewAtEnd` {boolean} Automatically append rows while keyboard navigating data grid in edit mode.\n- `alternateRowShading` {boolean} For better scan-ability you can shade alternate rows.\n- `listStyle` {boolean} Sets the style of the grid to list style for simple readonly lists.\n- `columns` {Array<object>} Sets the columns array of the data grid. See column settings.\n- `columnGroups` {Array<object>} Allows you to group columns together in logical sets. See section below for details.\n- `rowHeight` {string | `'xxs'` | `'xs'` | `'sm'` | `'md'` | `'lg'`} Sets the height and padding of each row. In smaller row heights the font is lowered.\n- `data` {Array<object>} Sets the data to show in the data grid. This can be a JSON Array.\n- `disableClientFilter` {boolean} Disables the filter logic client side in situations you want to filter server side.\n- `filterable` {boolean} Turns on or off the filter functionality.\n- `filterRowDisabled` {boolean} Disables the filter row.\n- `headerMenuData` {Array<object>} Dataset to build context menu for header and header group cells.\n- `headerMenuId` {string} ID of the popupmenu to use as context menu for header and header group cells.\n- `menuData` {Array<object>} Dataset to build context menu for body cells.\n- `menuId` {string} ID of the popupmenu to use as context menu for body cells.\n- `rowNavigation` {boolean} If using row navigation, the row will be focused when navigating the data grid via clicks and keyboard events.\n- `rowSelection` {string|boolean} Set the row selection mode between false, 'single', 'multiple' and 'mixed\n- `suppressRowClickSelection` {boolean} If using selection setting this will require clicking a checkbox or radio to select the row. Clicking other cells will not select the row.\n- `suppressRowDeactivation` {boolean} Set to true to prevent rows from being deactivated if clicked. i.e. once a row is activated, it remains activated until another row is activated in its place.\n- `suppressRowDeselection`  {boolean} Set to true to prevent rows from being deselected if click or space bar the row. i.e. once a row is selected, it remains selected until another row is selected in its place.\n- `suppressTooltips`  {boolean} Set to true to prevent display tooltips.\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRow` {boolean} Indicates expandable rows will be used in the data grid.  See the expandable row section for more details.\n- `expandableRowTemplate` {string} Should point to the row `template` element for expandable rows.\n- `treeGrid` {boolean} Indicates a tree grid will be used  in the data grid. See the tree grid section for more details.\n- `showHeaderExpander` {boolean} Set to show header expander icon for expandable and tree rows.\n- `groupSelectsChildren` {boolean} If a tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `saveActivePage` {boolean} If set the active page on the pager will be saved to local storage.\n- `saveColumns` {boolean} If set columns will be saved to local storage.\n- `saveFilter` {boolean} If set filter will be saved to local storage.\n- `savePageSize` {boolean} If set the page size on the pager will be saved to local storage.\n- `saveRowHeight` {boolean} If set the row height will be saved to local storage.\n- `saveSortOrder` {boolean} If set column sort order will be saved to local storage.\n- `saveUserSettings` {boolean} If set all settings will be saved to local storage.\n- `emptyMessageDescription` {string} Set empty message description text.\n- `emptyMessageIcon` {string} Set empty message icon name.\n- `emptyMessageLabel` {string} Set empty message label text.\n- `suppressEmptyMessage` {boolean} Set to true to prevent display empty message.\n- `editable` {boolean} If true in addition to adding editors to columns the data grid is editable.\n- `editNextOnEnterPress` {boolean} If enabled when editing using <kbd>ENTER</kbd> will finish editing and start editing the same cell in next row and <kbd>SHIFT + ENTER</kbd> will edit the previous row.\n\n## Column Settings (General)\n\n|Setting|Type|Description|\n|---|---|---|\n|`id` | {string} | The unique id of the column. Each column in the grid should have some unique id.|\n|`name` | {string} | The text to show on the header.|\n|`field` | {string} | The name of the field (column) in the data array attached to the grid for example `description`. This can also be nested in an object for example `children.name`. |\n|`sortable` | {boolean} | If false, the column cannot be sorted. When completed a `sorted` event will fire.|\n|`resizable` | {boolean} | If false the column will not be resizable, thus is a fixed size and can never be changed by the user by dragging the left and right edge.  When completed a `columnresized` event will fire. See the `columns-resizable` example for a working example. |\n|`reorderable` | {boolean} | If true the column can be dragged into another position with adjacent columns. When completed a `columnmoved` event will fire. See the `columns-reorderable` example for a working example. This currently does not work with grouped columns. |\n|`readonly` | {boolean or Function} | If true the cell will be set to readonly color, indicating no editing.|\n|`disabled` | {boolean or Function} | If true the cell will be set to disabled color, indicating no editing.|\n|`formatter`| {Function} | Controls how the data is rendered in the cell.|\n|`hidden` | {boolean} | Excludes the column from being added to the DOM.|\n|`align` | {string} | Can be `left` or `right` or `center` to align both the cell and the header. Left is the default so does not need to be specified. |\n|`headerAlign` | {string} | Can be `left` or `right` or `center` to align just the header. Left is the default so does not need to be specified. |\n|`minWidth` | {number} | The minimum width used to prevent resizing a column below this size. |\n|`maxWidth` | {number} | The maximum width used to prevent resizing a column above this size. |\n|`cssPart` | {string} | Allows you to set the name of a css part that can be used to customize the cell's css. This can be a string or a function. See the columns-custom-css example. The default cssPart for cells is called `cell` and it also can be used for more global changes.  |\n|`frozen` | {string} | Sets the column to be frozen on either left or right side by passing `left` or `right`. See the `columns-frozen` example for a working example. Frozen columns currently have some limitations to be addressed in the future. |<!--lint disable maximum-line-length definition-case-->\n|`width` | {number or string} | The column width, this can be an integer for fixed pixel width or a percent for example `10%`, if left off the columns will be sized to contents and to fit the width of the grid using the css table browsers handling (this is known as `auto` columns). I.E. There are three column configurations: `auto`, `fixed` and `percent`. <br /><br />In addition one can specify any css grid column setting like `fr` or `ch`. In order to make what was called a `stretchColumn` in previous versions you can set the width to`minmax(130px, 4fr)`. This is some minimum width and a `fr` unit equal to the remaining number of columns (see example columns-stretch.html). For a spacer column you just need to specify one extra column at the end (see example columns-fixed.html) but this is not recommended for how it looks. |<!--lint enable maximum-line-length definition-case-->\n|`headerIcon` | {string} | Allows you to set the name of the header icon. |\n|`tooltipOptions` | {Object or Function} | Allows you to set the tooltip options. See the tooltip example. |\n|`tooltip` | {string or Function} | Let you set the tooltip content. |\n|`headerTooltip` | {string} | Let you set the header title tooltip content. |\n|`headerIconTooltip` | {string} | Let you set the header icon tooltip content. |\n|`filterButtonTooltip` | {string} | Let you set the header filter button tooltip content. |\n|`tooltipCssPart` | {string or Function} | Allows you to set the name of a tooltip css part that can be used to customize the tooltip css. This can be a string or a function. See the columns-custom-css example.\n|`headerTooltipCssPart` | {string} | Allows you to sets the header tooltip css part.\n|`headerIconTooltipCssPart` | {string} | Allows you to sets the header icon tooltip css part.\n|`filterButtonTooltipCssPart` | {string} | Allows you to sets the filter button tooltip css part.\n|`cellSelectedCssPart` | {string} | Allows customization of a selected cell's background color.\n|`editor` | {object} | Adds an editor to the column if editable is set on the grid. See editing section for more details.\n\n## Column Settings (Specific)\n\n|Setting|Type|Description|\n|---|---|---|\n|`href` | {string|Function} | Used to create the href for hyperlink formatters. This can be a string or a function that can work dynamically. It can also replace `{{value}}` with the current value. |\n|`text` | {string} | Used to create the txt value for hyperlink formatters if a hard coded link text is needed. |\n|`disabled` | {boolean|Function} | Sets the cell contents to disabled, can also use a callback to determine this dynamically. Only checkboxes, radios, buttons and link columns can be disabled at this time. Selection columns require disabled rows in order to not be clickable/selectable. |\n|`uppercase` | {boolean} | Allows you to set the text as uppercase. |\n\n## Formatters\n\n|Formatter|Description|\n|---|---|\n|`text` | (Default) Formats the column value as a direct text element using toString in the grid cell. Undefined or Null values will be shown as empty.|\n|`password` | Formats the column value masking the string length with stars. Undefined or Null values will be shown as empty. This is good for private data. |\n|`rowNumber` | Formats the cell with a row number column that is shown 1 to n no matter what the sort order is. |\n|`date` | Formats date data as a date string in the desired format, by default it will use `dateStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`time` | Formats date data as a time string in the desired format, by default it will use `timeStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`decimal` | Formats number data as a decimal string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`integer` | Formats number data as a integer string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`selectionCheckbox` | Displays a checkbox column for selection when using `rowSelection=\"mixed\"` or `rowSelection=\"multiple\"`|\n|`selectionRadio` | Displays a checkbox column for selection when using `rowSelection=\"single\"` |\n| `button` | Displays an `ids-button`. Other column settings like `type` can be used to set the button type as can `icon` by set for icon only buttons. Use the `click` setting/function to get an callback handler. |\n| `hyperlink` | Displays an `ids-hyperlink`. Other column settings like `href` can be used to set the link href and `text` can be used to set the text to specific text. Use the `click` setting/function to get an callback handler. |\n| `checkbox` | Displays an `ids-checkbox`. The value will be checked depending on if the attached field is true or `\"true\"`. |\n| `badge` | Displays an `ids-badge`. The associated field will be placed in the badge. The `color` option can also be set to set the ids-badge color setting. |\n| `alert` | Displays `ids-alert` element, and the field value will appear in a tooltip. An `icon` option can be provided as an override.|\n| `color` | Displays `ids-color` element. If a `color` option is provided as an override, the field's value will appear in a tooltip. |\n| `icon` | Displays the field value as an `ids-icon`. An `icon` option can be provided as an override, and the field value will appear beside this `icon` override. A `size` option can also be provided. |\n| `favorite` | Displays the field value as a `star-filled` if true or `star-outlined` if false. A `size` option can be provided as an override. |\n| `tag` | Displays the field value as an `ids-tag`. A `color` option can be provided as an override. |\n| `progress` | Displays the field value as an `ids-progress`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `rating` | Displays the field value as an `ids-rating`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `slider` | Displays the field value as an `ids-slider`. A `text` option can be provided to customize the label. A `color`, `max`, `min` and `type` option can be provided as overrides. |\n| `stepChart` | Displays the field value as an `ids-step-chart`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `image` | Displays the field value as an `ids-image`. A `text` option can be provided to the `alt` and `title` attributes. |\n\n### Deprecated Formatters (Deprecated from 4.x)\n\n- `Input` No longer suggested to use, use simple list instead or a Text Formatter.\n- `Status, Color` No longer used, but badges can be used.\n- `Placeholder` Can now be set on the column and used with other formatters\n- `Ellipsis` Is now always enabled.\n- `Readonly` Can now be set on the column and used with other formatters\n- `Drilldown` Use button formatter with an icon.\n- `Template` is now deprecated for performance reasons, use a custom formatter now.\n- `ClassRange` Use column cssClass function or string\n- `Autocomplete, Lookup, TargetedAchievement, ProcessIndicator, Spinbox, Fileupload, Dropdown, Colorpicker, Tree, SummaryRow, GroupFooterRow, GroupRow, Expander, Editor, Textarea, Actions, RowReorder` May be added later\n\n## Custom Formatters\n\nIt is possible to create your own custom formatter. The idea behind the formatter is it takes the cell value and does processing on it to return the correct markup for the cell. The simplest custom formatter would be this example.\n\n```js\ncolumns.push({\n  id: 'custom',\n  name: 'Custom',\n  field: 'price',\n  formatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n    const value = `Custom: ${rowData[columnData.field] || '0'}`;\n    return `<span class=\"text-ellipsis\">${value}</span>`;\n  }\n});\n```\n\nTo style a custom formatter you may need to add a css part for the element. For example:\n\n```js\nformatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n  const value = `${rowData[columnData.field] || ''}`;\n  return `<a part=\"custom-link\" href=\"#\" class=\"text-ellipsis\">${escapeHTML(value)}</a>`;\n},\n```\n\nThen in the style sheet you add for you page you put the styles.\n\n```css\nids-data-grid::part(custom-link) {\n  color: #da1217;\n}\n\nids-data-grid::part(custom-link):hover {\n  color: #6c080b;\n}\n```\n\nThe formatter is then linked via the column on the formatter setting. When the grid cell is rendered the formatter function is called and the following arguments are passed in.\n\n- `rowData` The current row's data from the data array.\n- `columnData` The column object with all of the column configuration for this cell.\n\n## Events\n\n- `activecellchanged` Fires when the active cell changes with the keyboard or by click.\n- `sorted` Fires when the sort column is changed.\n- `selectionchanged` Fires any time the selection changes.\n- `activationchanged` Fires any time the active row changes.\n- `rowselected` Fires for each row that is selected.\n- `rowdeselected` Fires for each row that is deselected.\n- `rowactivated` Fires for each row that is activated.\n- `rowdeactivated` Fires for each row that is deactivated.\n- `rowclick` Fires for each row that is clicked.\n- `dblclick` Fires each time double clicked on body cells or header cells. Based on where it clicked details can be capture like `type: 'body-cell'|'header-title'|'header-filter'` etc.\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n- `columnresized` Fires when a column is resized or setColumnWidth is called.\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto\n- `rowExpanded` Fires when a tree or expandable row is expanded or collapsed\n- `rowCollapsed` Fires when a tree or expandable row is expanded or collapsed\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called.\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto.\n- `beforemenushow` Fires before context menu show, you can return false in the response to veto.\n- `menushow` Fires after context menu show.\n- `menuselected` Fires after context menu item selected.\n- `settingschanged` Fires after settings are changed in some way.\n- `scrollstart` Fires when data-grid reaches the topmost row.\n- `scrollend` Fires when data-grid reaches the bottommost row.\n- `afterrendered` Fires after rendered the data grid.\n\n## Methods\n\n- `setColumnWidth` Can be used to set the width of a column.\n- `setColumnVisibility` Can be used to set the visibility of a column.\n- `setActivateCell(cell, row)` Can be used to set focus of a cell.\n- `selectedRows` Lists the indexes of the currently selected rows.\n- `saveSetting(setting: string)` Save the given setting to local storage.\n- `saveAllSettings` Save all user settings to local storage.\n- `savedSetting(setting: string)` Get saved given setting value from local storage.\n- `allSavedSettings` Get saved all user settings from local storage.\n- `clearSetting(setting: string, key?: string)` Clear the given saved setting from local storage.\n- `clearAllSettings(userKeys: unknown)` Clear saved all user settings from local storage.\n- `restoreSetting(setting: string, value?: unknown)` Restore the given saved setting from local storage.\n- `editFirstCell` Puts the first cell on the active row into edit mode.\n- `appendData(data: Record<string, unknown>)` Use this to add more data to the datagrid's existing dataset.  This will automatically render additional rows in the datagrid.\n- `addRow(data: Record<string, unknown>, index?: number)` Adds a new row at optional row index and defaults the values to all those provided in the data\n- `addRows(data: Array<Record<string, unknown>>, index?: number)` Adds multiple new rows at optional row index and defaults the values to all those provided in the data\n- `removeRow(index: number)` Removed the provided row index from the dataset and visual datagrid\n- `clearRow(index: number)` Clears all values on the given row.\n- `commitCellEdit` Stops editing and commits the value in the active editor.\n- `cancelCellEdit` Stops editing and reverts the value in the active editor.\n- `resetDirtyCells` Clears all dirty cell indicators.\n- `dirtyCells` Gives a list of all currently dirty cells.\n- `exportToExcel(format: 'csv' | 'xlsx', filename: string, keepGridFormatting: boolean)` Export datagrid datasource to an excel file. This keeps grid formatting by default.\n- `collapseAll()` Collapse all expandable or tree rows.\n- `expandAll()` Expand all expandable or tree rows.\n- `toggleAll(opt: boolean)` Toggle collapse/expand all expandable or tree rows. `opt false`: will expand all, `opt: true`: will collapse all\n- `refreshRow` IdsDataGridRow method to refresh row element and its cells.\n- `refreshCell` IdsDataGridCell method to refresh cell element.\n- `updateDataset(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row.\n- `updateDatasetAndRefresh(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row and refreshes row/cells UI.\n\n## Filters\n\nData rows can be filter based on one or several criteria. Whole filter row can turned on/off by the api setting `filterable` and can be disabled by the api setting `filter-row-disabled`. The filter conditions can be applied thru the UI or programmatically. Each column can have its own filter type and turn on/off by columns setting.\n\n### Filter Columns Setting\n\nAll the filter settings can be passed thru columns data.\n\n|Setting|Type|Description|\n|---|---|---|\n|`filterType` | Function | Data grid built-in filter method, see the dedicated section below. |\n|`filterConditions` | Array | List of items to be use as operators in menu-button or options in dropdown. |\n|`filterFunction` | Function | User defined filter method, it must return a boolean. |\n|`filterOptions` | Object | Setting for components are in use, for example: `label, placeholder, disabled`. |\n|`isChecked` | Function | User defined filter method, it must return a boolean. This method use along built-in `checkbox` only, when filter data value is not boolean type. |\n\n### Built-in Filter Methods\n\n|Method|Description|\n|---|---|\n|`text` | It filter as text comparison. Contains input and menu-button with list of default operators. |\n|`integer` | It filter as integer comparison. Contains input and menu-button with list of default operators. |\n|`decimal` | It filter as decimal comparison. Contains input and menu-button with list of default operators. |\n|`contents` | It filter as text comparison. Contains dropdown and auto generate list of items based on column data. |\n|`dropdown` | It filter as text comparison. Contains dropdown and must pass list of item by setting `filterConditions`. |\n|`checkbox` | It filter as boolean comparison. Contains menu-button with list of default operators. |\n|`date` | It filter as date comparison. Contains date-picker and menu-button with list of default operators. |\n|`time` | It filter as time comparison. Contains time-picker and menu-button with list of default operators. |\n\n### Custom Filter\n\nIf the built-in filters are not enough, creating a custom filter is an option. There are two parts you can create both parts custom or mix-match with built-in.\n\n1. `UI Only` In order to do custom UI part of filter, add as html markup thru a slot. It must use slot and column-id attributes for example: `<div slot=\"filter-n\" column-id=\"n\">...</div>` where n is the columnId same passed in the columns.\n1. `filterFunction` This is a user defined filter method which must return a boolean. It determines if a cell value should be considered as a valid filtered value.\n1. `disableClientFilter` This is an api setting to disable filter logic client side. It will set filter conditions and fire an event `filtered` which can listen for custom logic.\n\n### Filter Code Examples\n\nBasic text filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nNo filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"false\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisabled filter row, will disabled all attached filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\" filter-row-disabled=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nHyperlink, integer, decimal, date and time filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'hyperlink',\n  name: 'Hyperlink',\n  field: 'description',\n  href: '#',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.hyperlink\n});\ncolumns.push({\n  id: 'integer',\n  name: 'Integer',\n  field: 'price',\n  filterType: dataGrid.filters.integer,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'decimal',\n  name: 'Decimal',\n  field: 'price',\n  filterType: dataGrid.filters.decimal,\n  formatter: dataGrid.formatters.decimal,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'date',\n  name: 'Date',\n  field: 'publishDate',\n  filterType: dataGrid.filters.date,\n  formatter: dataGrid.formatters.date\n});\ncolumns.push({\n  id: 'time',\n  name: 'Time',\n  field: 'publishDate',\n  filterType: dataGrid.filters.time,\n  formatter: dataGrid.formatters.time\n});\n```\n\nSome filter options label, placeholder, disabled.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterOptions: {\n    label: 'Label text for description input',\n    placeholder: 'Placeholder text for description input',\n    disabled: true\n  }\n});\n```\n\nCustom operators items for menu-button.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterConditions: [{\n    value: 'contains',\n    label: 'Contains',\n    icon: 'filter-contains'\n  },\n  {\n    value: 'equals',\n    label: 'Equals',\n    icon: 'filter-equals',\n    selected: true\n  }]\n});\n```\n\nContents and dropdown type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'location',\n  name: 'Location',\n  field: 'location',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.contents,\n  filterOptions: {\n    notFilteredItem: { value: 'not-filtered', label: 'Not Filtered' }\n  }\n});\ncolumns.push({\n  id: 'useForEmployee',\n  name: 'NotFilterdItem (shown as blank)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\ncolumns.push({\n  id: 'useForEmployeeCustomNotFilterdItem',\n  name: 'NotFilterdItem (show as custom text)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'not-filtered', label: 'Not Filtered' },\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\n```\n\nCheckbox type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'checkbox',\n  name: 'Checkbox',\n  field: 'inStock',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox\n});\ncolumns.push({\n  id: 'customCheckMethod',\n  name: 'Custom check method',\n  field: 'active',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox,\n  isChecked: (value) => value === 'Yes'\n});\n```\n\nCustom filter method.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\n// Custom filter checking\nconst myCustomFilter = (opt) => {\n  const { operator, columnId, value } = opt.condition;\n  const val = {\n    condition: Number.parseInt(value, 10),\n    data: Number.parseInt(opt.data[columnId], 10)\n  };\n  let isMatch = false;\n  if (Number.isNaN(val.condition) || Number.isNaN(val.data)) return isMatch;\n\n  if (operator === 'equals') isMatch = (val.data === val.condition);\n  if (operator === 'greater-than') isMatch = (val.data > val.condition);\n  if (operator === 'greater-equals') isMatch = (val.data >= val.condition);\n  if (operator === 'less-than') isMatch = (val.data < val.condition);\n  if (operator === 'less-equals') isMatch = (val.data <= val.condition);\n\n  return isMatch;\n};\n\nconst columns = [];\ncolumns.push({\n  id: 'customFilterMethod',\n  name: 'Custom Filter Method',\n  field: 'price',\n  filterFunction: myCustomFilter,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\n```\n\nCustom filter UI part.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n  <div slot=\"filter-description\" column-id=\"description\">\n    <ids-menu-button id=\"btn-filter-description\" icon=\"filter-greater-equals\" menu=\"menu-filter-description\" dropdown-icon>\n      <span class=\"audible\">Greater Than Or Equals</span>\n    </ids-menu-button>\n    <ids-popup-menu id=\"menu-filter-description\" target=\"#btn-filter-description\">\n      <ids-menu-group select=\"single\">\n        <ids-menu-item value=\"equals\" icon=\"filter-equals\">Equals</ids-menu-item>\n        <ids-menu-item value=\"greater-than\" icon=\"filter-greater-than\">Greater Than</ids-menu-item>\n        <ids-menu-item value=\"greater-equals\" icon=\"filter-greater-equals\" selected=\"true\">Greater Than Or Equals</ids-menu-item>\n        <ids-menu-item value=\"less-than\" icon=\"filter-less-than\">Less Than</ids-menu-item>\n        <ids-menu-item value=\"less-equals\" icon=\"filter-less-equals\">Less Than Or Equals</ids-menu-item>\n      </ids-menu-group>\n    </ids-popup-menu>\n    <ids-input id=\"input-filter-description\" type=\"text\" size=\"full\" placeholder=\"Slotted description\" label=\"Slotted description input\">\n    </ids-input>\n  </div>\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisable client filter\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" disable-client-filter=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n\ndataGrid.addEventListener('filtered', (e: any) => {\n  console.info('filtered:', e.detail);\n});\n```\n\n### Filter rows programmatically\n\n```js\n// Filter rows\nconst conditions = [{ columnId: 'description', operator: 'contains', value: '5' }];\ndataGrid.applyFilter(conditions);\n\n// Reset all filters\ndataGrid.applyFilter([]);\n```\n\n### Filter Events\n\nThe following events are relevant to data-grid filters.\n\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n\n## Custom cell colors\n\nIn some cases, it may be desirable to customize the background color of cells.  This can be done with the `cssPart` column setting:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell'\n});\n```\n\nThe `cssPart` property is translated into a `part` attribute that is applied to every cell in the column.  In the event the color needs to be conditional based on the row index or other logic, a function can be used:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2')\n  // ...\n});\n```\n\nAfter this is defined, accompanying CSS can be written to target the parts `custom-cell`, `custom-cell-1`, and `custom-cell-2` to change background color or other CSS properties of the cell:\n\n```css\nids-data-grid::part(cell) {\n  background-color: #ebf9f1;\n}\n\nids-data-grid::part(cell-selected) {\n  background-color: #c9dad0;\n}\n```\n\n### Changing selected cell colors\n\nAnother column setting, `cellSelectedCssPart` can be used alongside `cssPart` to customize the selected color of the row in a similar way.  When using `mixed` selection, this color is also applied to activated rows:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell',\n  cellSelectedCssPart: 'custom-cell-selected'\n});\n```\n\nThis column setting can also be a function, just like `cssPart`:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2'),\n  cellSelectedCssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-selected-1' : 'custom-cell-selected-2')\n  // ...\n});\n```\n\n## Tooltip Code Examples\n\nSet suppress tooltips to turn off.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" suppress-tooltips>\n</ids-data-grid>\n```\n\nSet custom tooltip strings.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: 'This is a product Id',\n  headerTooltip: 'This is the product Id header title',\n  headerIconTooltip: 'This is product Id header icon',\n  filterButtonTooltip: 'This is the product Id filterButton'\n});\n```\n\nSet tooltip as callback.\n\n```js\nconst tooltipCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return `Text: ${text}<br/>Header Row: ${rowIndex}, Cell: ${columnIndex}`;\n  } else if (type === 'filter-button') {\n    return `Text: ${text}<br/>FilterButton Row: ${rowIndex}, Cell: ${columnIndex}`;\n  }\n  return `Text: ${text}<br/>for Row: ${rowIndex}, Cell: ${columnIndex}`;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: tooltipCallback\n});\n```\n\nSet tooltip custom options.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: {\n    placement: 'top',\n    headerPlacement: 'top',\n    headerIconPlacement: 'top',\n    filterButtonPlacement: 'bottom',\n    x: 0,\n    y: 10,\n    headerX: 0,\n    headerIconX: 0,\n    headerY: 10,\n    headerIconY: 10,\n    filterButtonX: 0,\n    filterButtonY: 22\n  }\n});\n```\n\nSet tooltip options as callback.\n\n```js\nconst tooltipOptionsCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return { headerPlacement: 'top', headerX: 0, headerY: 10 };\n  } else if (type === 'header-icon') {\n    return { headerIconPlacement: 'top', headerIconX: 0, headerIconY: 10 };\n  } else if (type === 'filter-button') {\n    return { filterButtonPlacement: 'bottom', filterButtonX: 0, filterButtonY: 22 };\n  }\n  return { placement: 'top', x: 0, y: 10 };\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: tooltipOptionsCallback\n});\n```\n\nSet tooltip custom css.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: 'custom-turquoise',\n  headerTooltipCssPart: 'custom-turquoise',\n  headerIconTooltipCssPart: 'custom-turquoise',\n  filterButtonTooltipCssPart: 'custom-turquoise'\n});\n```\n```css\n/* tooltip css part `custom-turquoise` */\nids-data-grid::part(custom-turquoise-tooltip-arrow-top)::after {\n  border-top-color: #2f8d8e;\n}\nids-data-grid::part(custom-turquoise-tooltip-popup) {\n  background-color: #2f8d8e;\n}\n```\n\nSet tooltip custom css as callback.\n\n```js\nconst tooltipCssPartCallback = (args: { type: string }): string => {\n  const { type } = args;\n  let cssPart = '';\n  // Set random css part each time, for `body-cell` tooltips\n  if (type === 'body-cell') {\n    const parts = ['azure', 'ruby'];\n    const randomIndex = Math.floor(Math.random() * parts.length);\n    cssPart = parts[randomIndex];\n  }\n  return cssPart;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: tooltipCssPartCallback\n});\n```\n```css\n/* tooltip css part `azure` */\nids-data-grid::part(azure-tooltip-arrow-top)::after {\n  border-top-color: #0066d4;\n}\nids-data-grid::part(azure-tooltip-popup) {\n  background-color: #0066d4;\n}\n\n/* tooltip css part `ruby` */\nids-data-grid::part(ruby-tooltip-arrow-top)::after {\n  border-top-color: #c31014;\n}\nids-data-grid::part(ruby-tooltip-popup) {\n  background-color: #c31014;\n}\n```\n\n## context menu Code Examples\n\nThe context menus can be set via the dataset.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n</ids-data-grid>\n```\n```js\n// Dataset for header cells context menu\nconst headerMenuData = {\n  id: 'grid-header-context menu',\n  contents: [{\n    id: 'header-actions-group',\n    items: [\n      { id: 'actions-split', value: 'actions-split', text: 'Split' },\n      { id: 'actions-sort', value: 'actions-sort', text: 'Sort' },\n    ]\n  }],\n};\n\n// Dataset for body cells context menu\nconst menuData = {\n  id: 'grid-context menu',\n  contents: [{\n    id: 'actions-group',\n    items: [\n      { id: 'item-1', value: 'item-1', text: 'Item One' },\n      { id: 'item-2', value: 'item-2', text: 'Item Two' },\n      { id: 'item-3', value: 'item-3', text: 'Item Three' }\n    ]\n  }],\n};\n\n// Set context menu data with data-grid\ndataGrid.menuData = menuData;\ndataGrid.headerMenuData = headerMenuData;\n\n// Set to return true/false in the response to veto before context menu show.\ndataGrid.addEventListener('beforemenushow', (e: any) => {\n  console.info('before context menu show', e.detail);\n  // e.detail.response(false);\n});\n\n// Set to watch after context menu show.\ndataGrid.addEventListener('menushow', (e: any) => {\n  console.info('After context menu show', e.detail);\n});\n\n// Set to watch after context menu item selected.\ndataGrid.addEventListener('menuselected', (e: any) => {\n  console.info('context menu item selected', e.detail);\n});\n```\n\nSet context menu thru Slot.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n  <!-- context menu header cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"header-context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n      <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n  <!-- context menu body cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n      <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n      <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n      <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n</ids-data-grid>\n```\n\nSet context menu thru ID.\n\n```html\n<ids-data-grid\n  header-menu-id=\"grid-header-context menu\"\n  menu-id=\"grid-context menu\"\n  id=\"data-grid-1\"\n  label=\"Books\"\n></ids-data-grid>\n\n<!-- context menu header cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-header-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n    <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n\n<!-- context menu body cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n    <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n    <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n    <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n```\n\n## Empty Message\n\nSet empty message thru slot (markup).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-slot\" label=\"Books\">\n  <ids-empty-message hidden icon=\"empty-search-data-new\" slot=\"empty-message\">\n    <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">No Data</ids-text>\n    <ids-text hidden label=\"true\" slot=\"description\">There is no data available.</ids-text>\n  </ids-empty-message>\n</ids-data-grid>\n```\n\nSet empty message thru settings (markup).\n\n```html\n<ids-data-grid\n  id=\"data-grid-em-thru-settings\"\n  label=\"Books\"\n  empty-message-icon=\"empty-error-loading-new\"\n  empty-message-label=\"No Data\"\n  empty-message-description=\"There is no data available.\"\n></ids-data-grid>\n```\n\nSet empty message thru settings (javascript).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-settings-js\" label=\"Books\">\n</ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-em-thru-settings-js');\ndataGrid.emptyMessageIcon = 'empty-error-loading-new';\ndataGrid.emptyMessageLabel = 'No Data';\ndataGrid.emptyMessageDescription = 'There is no data available.';\n```\n\n## Row Height\n\nAs mentioned in the settings section you can change the row height by setting the rowHeight option.\n\n```html\n     <ids-data-grid id=\"data-grid-row-height\" row-height=\"md\"></ids-data-grid>\n```\n\nIts worth mentioning the characteristics and usage for each one.\n\nLarge (`row-height=\"lg\"`) - Row Height is 50. The default row height, header is 16px and body cells are 16px. 16px padding on cells and header. You should use this most of the time if there is plenty of room on the UI and to avoid the UI looking crowded.\nMedium (`row-height=\"md\"`) - Row Height is 40. Header is 16px and body cells are 16px. 12px padding on cells and header. If you need to see a few more rows but still want to avoid a crowded UI, this is the next best option.\nSmall (`row-height=\"sm\"`) - Row Height is 35. Header is 16px and body cells are 16px. 8px padding on cells and header. This is the smallest option that is recommended for readability and spacing.\nExtra Small (`row-height=\"xs\"`) - Row Height is 30. Header is 14px and body cells are 14px. 8px padding on cells and header. If you need a very compressed data grid with a lot of data you can use this option. But there is a trade off of bad readability and spacing.\nExtra Extra Small (`row-height=\"xxs\"`) - Row Height is 25. Header is 14px and body cells are 14px. 2px padding on cells and header. Avoid this option as it is very crowded but it is included for edge cases.\n\n## States and Variations\n\n**Rows**\n- Hover\n- Selected\n- Disabled\n- Readonly\n- Activated\n\n**Columns**\n- Focus\n- Hover\n- Sorted\n- Selected\n- Disabled\n- Filtered\n\n**Cells**\n- Hover (sometimes a cursor change)\n- Readonly\n- Focus\n- Checked/Not Checked (Checkboxes)\n\n## Keyboard Guidelines\n\n- <kbd>Tab</kbd>The initial tab enters the grid with focus on the first cell of the first row, often a header. A second tab moves out of the grid to the next tab stop on the page. Once focus is established in the grid, a TAB into or a Shift Tab into the grid will return to the cell which last had focus. If in edit mode will finish editing and start editing the next cell.\n- <kbd>Shift + Tab</kbd> Moves the reverse of tab. If in edit mode will finish editing and start editing the previous cell.\n- <kbd>Left</kbd> and <kbd>Right</kbd> Move focus to the adjacent column's cell. There is no wrap at the end or beginning of columns.\n- <kbd>Up</kbd> and <kbd>Down</kbd> Move focus to the adjacent row's cell. There is no wrap at the first or last row.\n- <kbd>Home</kbd> moves focus to the first cell of the current row\n- <kbd>End</kbd> moves focus to the last cell of the current row\n- <kbd>Page Up</kbd> moves focus to the first cell in the current column\n- <kbd>Page Down</kbd> moves focus to the last cell in the current column\n- <kbd>Space</kbd> Toggles selection the activate row. If suppressRowDeselection is set it will be ignored on deselect. If the cell contains an expandable element then the row will toggle the expanded state. If the cell contains a checkbox editor, will toggle the checkbox state.\n- <kbd>F2</kbd> toggles actionable mode. Pressing the <kbd>Tab</kbd> key while in actionable mode moves focus to the next actionable cell. While in actionable mode you can do things like type + enter. This will move you down a row when you hit enter. If the cell has a control that uses down arrow (like the drop downs or lookups that are editable). Then the user needs to hit enter to enable the edit mode on that cell.\n- <kbd>Triple Click</kbd> Not a keyboard shortcut, but if you have text in a cell that is overflowed a triple click will select all the text even the part that is invisible.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Enter</kbd> Activates edit mode on the cell if it is editable. There is also an \"auto edit detection\". If the user starts typing then edit mode will happen automatically without enter. If in edit mode already <kbd>Enter</kbd> will finish edit mode. If `editNextOnEnterPress` is enabled then editing will start on the same column in next row.\n- <kbd>Shift + Enter</kbd> Same as enter but if `editNextOnEnterPress` is enabled then editing will start on the same column in previous row.\n- <kbd>F2</kbd> Finish editing same as Enter. But if `editNextOnEnterPress` is enabled, will stay in same cell. `cancelEditMode` will fire.\n- <kbd>CMD/CTRL + Enter</kbd> Finish editing same as Enter.\n- <kbd>ESC</kbd> Revert to the previous value and cancel editing. `cancelEditMode` will fire.\n\n## Responsive Guidelines\n\n- By default, data grid grows depending on the amount of contents within and will scroll if necessary under the header. It stops growing when it reaches the size of the parent container.\n- `autoFit` property or `auto-fit` attribute can be set manually to make the data grid size fill and be responsive to the size of the screen, regardless of the amount of contents.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Counts have all new markup and classes.\n\n**4.x to 5.x**\n- Data grid has all new markup and a custom element but some similarly named options\n- Still uses same columns and data set options. Some column options enhanced and changed.\n- If using events events are now plain JS events for example: sorted, rendered\n- Some Api Functions have changed\n- If using properties/settings these are now attributes or as plain properties for example: data, virtual-scroll\n- Markup has changed to a custom element `<ids-data-grid></ids-data-grid>`\n- Can now be imported as a single JS file and used with encapsulated styles\n- `Drill Down` Formatter is now covered by `Button` formatter with `icon=\"drilldown\"`\n- `textOverflow` setting is now by default\n- `rowNavigation` setting has replaced `cellNavigation`. Cell navigation is the default behavior.\n- `stretchColumn` is now more flexible and can be achieved by setting a column width to `minmax(130px, 4fr)`. I.E. some min width and a `fr` unit equal to the remaining number of columns (or similar variations).\n- split columns are not supported anymore but could be done with a custom formatter if needed\n- `frozenColumns` setting is now set on each column by adding `frozen: 'left'` or `frozen: 'right'` to the column definition.\n- Some events are renamed see the events section for more details, also the signature of the events has changed.\n- Custom formatter functions can now be any type of function and have a different signature.\n- The `expanded` column option for tree was renamed to `rowExpanded`.\n- The `expandrow/collapserow` events are renamed to `rowexpanded/rowcollapsed`\n- The `beforeentereditmode/entereditmode/exiteditmode` event is renamed to `beforecelledit/celledit/endcelledit/cancelcelledit`\n- The `actionablemode` feature has been replaced with simply tabbing to the next editable field when in edit mode.\n\n## Accessibility Guidelines\n\n1.1.1 Non-text Content - All images, links and icons have text labels for screen readers when the formatters are used.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and links and images of text has a contrast ratio of at least 4.5:1.\n- 2.1.1 Keyboard - Make all functionality available from a keyboard. The grid has keyboard shortcuts and is usable with a screen reader due to the addition of aria tags.\n- A datagrid in general including this one uses the following aria tags\n  - `aria-label` labels the enter table on the main table\n  - `aria-rowcount` lists the visible row count on the main table\n  - `aria-colindex` the index of each column on the column elements\n  - `aria-rwindex` the index of each row on the row elements\n  - `aria-setsize` for tree grid lists the number of elements in each level (group)\n  - `aria-level` the level of indentation\n  - `aria-posinset` the depth into each set\n  - `aria-expanded` on the row it indicates if the row is expanded (for tree and expandable row)\n  - `aria-sort` indicates the sort direction on the sortable columns\n  - `aria-checked` indicates if the element is checked on checkbox columns and headers\n\n## Regional Considerations\n\nTitles and labels should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n\n## Code Separation (For Developers)\n\nThe code is divided into several files. Here is a description of where everything is.\n\n- `ids-data-grid-cell.ts` creates a non-shadow root `ids-data-grid-cell`, and handles its own selection, and activation.\n- `ids-data-grid-cell.scss` contains all css related to `.ids-data-grid-cell` and its children\n- `ids-data-grid-contextmenu.ts` contains code in the form of export functions, that adds ability to get right click menus on headers and cells\n- `ids-data-grid-filter.scss` contains all css related to the filter row and its children\n- `ids-data-grid-filter.ts` contains code to implement the filtering functionality and its ui (some functions are in ids-data-source)\n- `ids-data-grid-formatters.ts` contains all formatter functions and some supporting code like data extraction\n- `ids-data-grid-header.ts` contains most header functionality, the header template, and code related to header actions like sort, reorder and selection.\n- `ids-data-grid-header.scss` contains all css related to `.ids-data-grid-header` and its children\n- `ids-data-grid-row.ts` contains most row functionality, the row template, and code related to row actions like expand, collapse, select, activate\n- `ids-data-grid-row.scss` contains all css related to `.ids-data-grid-row` and its children\n- `ids-data-grid-tooltip-mixin.js` contains a tooltip mixin that adds tooltip functionality to cells and headers, its different from `ids-tooltip-mixin` (more specific)\n- `ids-data-grid.js` contains all main data grid code, the api and settings and the main generator loop for the data grid\n"}},{"name":"ids-data-grid-empty-message","description":{"kind":"markdown","value":"# Ids Data Grid\n\n## Description\n\nThe data grid component (ids-data-grid) is used to arrange tabular data in rows and columns for easier scanning and comparison. Data grids are very configurable in both design and functionality and they can be found within almost every product/app.\n\nYou should pass an array of objects in to the grid on the `dataset` object. Also pass the `columns` array which contains the column configuration. There are a number of events described in the events and API section, as well as the column settings.\n\nA Read-Only data grid uses \"Formatters\" to render cell content. A number of these are listed in the API section and it is possible to create your own.\n\n## Use Cases\n\n- The data grid component is most useful when it is used for categorically sorting dense and repetitive information. Each individual item is listed down the Y axis of the chart, and their shared attribute categories are listed along the X axis. The resulting cells are filled with information that is relevant to the corresponding item and attribute.\n\n## Terminology\n\n- **Title**: The name of the data grid optionally appearing above the grid and describing the contents.\n- **Options**: An optionally actions menu button with functionality that operates on the entire data grid.\n- **Cell**: Body elements of the data grid that contain an object's value or attribute. Cells should only contain one type of content or it can be confusing and hurt accessibility.\n- **Header Cell**: These cells contain the names of the columns in the grid and related functions like filtering and sorting. All cells below the header cell will hold values related to the attribute in the header cell.\n- **Column**: Cells stacked vertically that contain values relate to the attribute found on the top header cell.\n- **Row**: Each row contains one cell per column in the data grid, and each cell displays a single value in the bound data item.\n- **Tree**: Denotes the use of hierarchical data, with an expandable and collapsible hierarchy.\n\n## Themeable Parts\n\n- `table` allows you to further style the table main element\n- `container` allows you to further style the container element\n- `body` allows you to further style the body element\n- `header` allows you to further style the header element\n- `headerCell` allows you to further style the header cells\n- `row` allows you to further style the rows\n- `cell` allows you to further style the row cells\n- `cell-selected` allows you to further style row cells that are selected (in mixed-selection mode, activated cells are also styled)\n- `tooltip-popup` allows you to further style or adjust the outer tooltip popup element\n- `tooltip-arrow` allows you to adjust the tooltip arrow element\n\n## Features (With Code Examples)\n\nA data grid is created by adding an `ids-data-grid` html element in the page and setting the options either inline in the markup or in the JS part of the code. You can only use simple types (string, boolean ect) for inline markup so passing the data and column arrangement is always done in the JS part. The data will be an array of objects so its in the correct tabular form. The columns are also an array of objects but with defined options and types. See more about columns in next section.\n\n```html\n<ids-data-grid id=\"data-grid-1\"></ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-1');\ndataGrid.data = dataset;\ndataGrid.columns = columns;\n```\n\n### Column Groups\n\nSetting column groups allows you to add a second level of columns in your header and the ability to group the first level. This is useful for when you have a large number of columns and you want to group them into logical or related sections.\n\nColumn groups are achieved by providing an array to the `columnGroups` setting. Only one level of column groups can be defined.\n\n```js\ndataGrid.columnGroups = [\n{\n  colspan: 3,\n  id: 'group1',\n  name: 'Column Group One',\n  align: 'center'\n},\n{\n  colspan: 2,\n  id: 'group2',\n  name: 'Column Group Two'\n},\n{\n  colspan: 2,\n  id: 'group3',\n  name: 'Column Group Three',\n  align: 'right'\n},\n{\n  colspan: 11,\n  id: 'group4',\n  name: 'Column Group Four',\n  align: 'left'\n}\n];\n```\n\nIf the column is hidden it will be automatically removed from the `colspan`. If in the last group you didn't provided a bug enough `colspan` it will be set to the remaining columns. The `name` text can be right or left aligned and given an id. The only required property is `colspan`.\n\n### Selection\n\nThe data grid selection feature involves the setting `rowSelection`. This can be one of several values.\n\n- `false` No selection enabled.\n- `multiple` Allows multiple rows to be selected. When doing this it is recommended to add a `formatters.selectionCheckbox` for the first column.\n- `single` Allows a single row to be selected. When doing this you can optionally to add a `formatters.selectionRadio` for the first column. You can use the `suppressRowDeselection` if you want one row to always be selected.\n- `mixed` Allows multiple rows to be selected by clicking only on the checkbox or <kbd>Space</kbd> key. If clicking a row then that row is activated, meaning it is the current row and something might be shown based on the data of that row. You can use the `suppressRowDeactivation` if you want one row to always be selected.\n\nHere is a code example for multi select\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" row-selection=\"multiple\">\n</ids-data-grid>\n```\n\n```js\n  dataGrid.addEventListener('rowselected', (e) => {\n    console.info(`Row Selected`, e.detail);\n  });\n\n  dataGrid.addEventListener('rowdeselected', (e) => {\n    console.info(`Row Deselected`, e.detail);\n  });\n\n  dataGrid.addEventListener('selectionchanged', (e) => {\n    console.info(`Selection Changed`, e.detail);\n  });\n```\n\nThe following events are relevant to selection/activation.\n\n`rowselected` Fires when an individual row is activation and gives information about that row.\n`rowdeselected` Fires when an individual row is deselected and gives information about that row.\n`selectionchanged` Fires once for each time selection changes and gives information about all selected rows.\n\n`rowactivated` Fires when an individual row is activated and gives information about that row.\n`rowdeactivated` Fires when an individual row is deactivated and gives information about that row.\n`activationchanged` Fires once for each time activation changes and gives information about the active row.\n\n### Tree Grid\n\nThe tree grid feature involves the setting `treeGrid` to true. In addition the data passed to the tree grid should contain a field called `children`. That contains the child rows. This can by unlimited levels but 2-4 is recommended as a max for a more usable UI. In addition you can preset some states by adding `rowExpanded: false` to the parent elements (default is expanded). And also set `rowHidden: false` for child rows that are expanded. You also need a `Expander` formatter on a cell (usually the first visible cell.\n\nHere is a code example for a tree grid.\n\n```html\n<ids-data-grid id=\"tree-grid\" label=\"Buildings\" tree-grid=\"true\" group-selects-children=\"true\"></ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to selection/activation.\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `groupSelectsChildren` {boolean} If the tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `suppressRowClickSelection` {boolean} If using selection you might want to set this so clicking a row will not select it.\n### Expandable Row\n\nThe Expandable Row feature involves the setting `expandableRow` to true. In addition a row template should be provided via an id that points to the `expandableRowTemplate` which is a `template` element. You can preset the expandable state by adding `rowExpanded: true` to the row element you want to expand. The default is collapsed.\n\nHere is a code example for an expandable row\n\n```html\n<ids-data-grid\n    id=\"data-grid-expandable-row\"\n    expandable-row=\"true\"\n    expandable-row-template=\"expandable-row-tmpl\"\n    label=\"Books\">\n    <template id=\"expandable-row-tmpl\">\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"16\" type=\"span\">${convention}</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">${price} USD</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">Lorem Ipsum is simply sample text of the printing and typesetting industry. Lorem Ipsum has been the industry standard sample text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only...</ids-text>\n        </ids-layout-grid>\n    </template>\n</ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to expandable rows\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRowTemplate` {string} Should point to the row `template` element.\n\n### Editing\n\nThe Editing features start by setting `editable` to true. In addition you should add editors to columns and enable features of each of the editors. The features differ depending on the component used for editing. See the Keyboard section for information on which keys can be used when editing..\n\nHere is a code example for an editable text cell.\n\n```js\ncolumns.push({\n    id: 'description',\n    name: 'Description',\n    field: 'description',\n    sortable: true,\n    resizable: true,\n    reorderable: true,\n    formatter: dataGrid.formatters.text,\n    editor: {\n      type: 'input',\n      inline: true,\n      editorSettings: {\n        autoselect: true,\n        dirtyTracker: true\n      }\n    }\n  });\n```\n\nHere is a code example for an editable dropdown cell\n\n```js\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  resizable: true,\n  reorderable: true,\n  formatter: dataGrid.formatters.dropdown,\n  editor: {\n    type: 'dropdown',\n    editorSettings: {\n      dirtyTracker: true,\n      validate: 'required',\n      options: [\n        {\n          label: 'Option 1',\n          value: 'opt1'\n        },\n        {\n          label: 'Option 2',\n          value: 'opt2'\n        }\n      ]\n    }\n  }\n});\n```\n\nTo cancel or disabled editing there are a few ways:\n\n- setting the column `editor` setting to undefined will disable editing on the column (as will not having an editor setting at all).\n- adding a `readonly` or `disabled` function which returned true for some cells based on a condition will disable or mark the cell readonly.\n- return false in the `beforecelledit` event in the response function\n\nThe following settings are available on editors.\n\n`type` As of now can be `checkbox`, `input`, `datepicker`, `timepicker`, or `dropdown` but more will be added.\n`inline` Default is false. If true the editor (for example an input) will be visible in a field.\n`editorSettings` Is an object that is loosely typed that lets you pass any option the editor supports in. For example any of the IdsInput or IdsCheckbox options can be passing in. Some special ones are:\n`editorSettings.autoselect` Text will be selected when entering edit mode\n`editorSettings.dirtyTracker` Enables the dirty tracker that marks changed cells.\n`editorSettings.validate` Text will be selected when entering edit mode\n`editorSettings.mask` Will pass mask settings to the input (if supported).\n`editorSettings.maskOptions` Will pass maskOptions settings to the input (if supported).\n`editorSettings.options` Dataset used for dropdown editor's list box options.\n\nWhen the use clicks in the cell or activates editing with the keyboard with the Enter key and types. The following events will fire.\n\n`beforecelledit` Fires before a cell is being edit (before edit is started). Can be vetoed by returning false as shown below.\n`celledit` Fires exactly when a cell is being edited.\n`endcelledit` Fires when a cell edit is completed and changed.\n`cancelcelledit` Fires when an edit is cancelled via the <kbd>Esc</kbd> key.\n\nTo cancel editing based on some condition or if editing is not allowed you can veto the `beforecelledit` event.\n\n```js\n  dataGrid.addEventListener('beforecelledit', (e: Event) => {\n    (<CustomEvent>e).detail.response(false);\n  });\n```\n\nThere are a few utility functions for editing the data grid mentioned in the Methods section.\n\n## Settings and Attributes\n\nWhen used as an attribute in the DOM the settings are kebab case, when used in JS they are camel case.\n\n- `virtualScroll` {boolean} When virtual scroll is used the grid can render many thousands of rows and only the rows visible in the scroll area are rendered for performance. This setting has limitations such as the rows need to be fixed size.\n- `addNewAtEnd` {boolean} Automatically append rows while keyboard navigating data grid in edit mode.\n- `alternateRowShading` {boolean} For better scan-ability you can shade alternate rows.\n- `listStyle` {boolean} Sets the style of the grid to list style for simple readonly lists.\n- `columns` {Array<object>} Sets the columns array of the data grid. See column settings.\n- `columnGroups` {Array<object>} Allows you to group columns together in logical sets. See section below for details.\n- `rowHeight` {string | `'xxs'` | `'xs'` | `'sm'` | `'md'` | `'lg'`} Sets the height and padding of each row. In smaller row heights the font is lowered.\n- `data` {Array<object>} Sets the data to show in the data grid. This can be a JSON Array.\n- `disableClientFilter` {boolean} Disables the filter logic client side in situations you want to filter server side.\n- `filterable` {boolean} Turns on or off the filter functionality.\n- `filterRowDisabled` {boolean} Disables the filter row.\n- `headerMenuData` {Array<object>} Dataset to build context menu for header and header group cells.\n- `headerMenuId` {string} ID of the popupmenu to use as context menu for header and header group cells.\n- `menuData` {Array<object>} Dataset to build context menu for body cells.\n- `menuId` {string} ID of the popupmenu to use as context menu for body cells.\n- `rowNavigation` {boolean} If using row navigation, the row will be focused when navigating the data grid via clicks and keyboard events.\n- `rowSelection` {string|boolean} Set the row selection mode between false, 'single', 'multiple' and 'mixed\n- `suppressRowClickSelection` {boolean} If using selection setting this will require clicking a checkbox or radio to select the row. Clicking other cells will not select the row.\n- `suppressRowDeactivation` {boolean} Set to true to prevent rows from being deactivated if clicked. i.e. once a row is activated, it remains activated until another row is activated in its place.\n- `suppressRowDeselection`  {boolean} Set to true to prevent rows from being deselected if click or space bar the row. i.e. once a row is selected, it remains selected until another row is selected in its place.\n- `suppressTooltips`  {boolean} Set to true to prevent display tooltips.\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRow` {boolean} Indicates expandable rows will be used in the data grid.  See the expandable row section for more details.\n- `expandableRowTemplate` {string} Should point to the row `template` element for expandable rows.\n- `treeGrid` {boolean} Indicates a tree grid will be used  in the data grid. See the tree grid section for more details.\n- `showHeaderExpander` {boolean} Set to show header expander icon for expandable and tree rows.\n- `groupSelectsChildren` {boolean} If a tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `saveActivePage` {boolean} If set the active page on the pager will be saved to local storage.\n- `saveColumns` {boolean} If set columns will be saved to local storage.\n- `saveFilter` {boolean} If set filter will be saved to local storage.\n- `savePageSize` {boolean} If set the page size on the pager will be saved to local storage.\n- `saveRowHeight` {boolean} If set the row height will be saved to local storage.\n- `saveSortOrder` {boolean} If set column sort order will be saved to local storage.\n- `saveUserSettings` {boolean} If set all settings will be saved to local storage.\n- `emptyMessageDescription` {string} Set empty message description text.\n- `emptyMessageIcon` {string} Set empty message icon name.\n- `emptyMessageLabel` {string} Set empty message label text.\n- `suppressEmptyMessage` {boolean} Set to true to prevent display empty message.\n- `editable` {boolean} If true in addition to adding editors to columns the data grid is editable.\n- `editNextOnEnterPress` {boolean} If enabled when editing using <kbd>ENTER</kbd> will finish editing and start editing the same cell in next row and <kbd>SHIFT + ENTER</kbd> will edit the previous row.\n\n## Column Settings (General)\n\n|Setting|Type|Description|\n|---|---|---|\n|`id` | {string} | The unique id of the column. Each column in the grid should have some unique id.|\n|`name` | {string} | The text to show on the header.|\n|`field` | {string} | The name of the field (column) in the data array attached to the grid for example `description`. This can also be nested in an object for example `children.name`. |\n|`sortable` | {boolean} | If false, the column cannot be sorted. When completed a `sorted` event will fire.|\n|`resizable` | {boolean} | If false the column will not be resizable, thus is a fixed size and can never be changed by the user by dragging the left and right edge.  When completed a `columnresized` event will fire. See the `columns-resizable` example for a working example. |\n|`reorderable` | {boolean} | If true the column can be dragged into another position with adjacent columns. When completed a `columnmoved` event will fire. See the `columns-reorderable` example for a working example. This currently does not work with grouped columns. |\n|`readonly` | {boolean or Function} | If true the cell will be set to readonly color, indicating no editing.|\n|`disabled` | {boolean or Function} | If true the cell will be set to disabled color, indicating no editing.|\n|`formatter`| {Function} | Controls how the data is rendered in the cell.|\n|`hidden` | {boolean} | Excludes the column from being added to the DOM.|\n|`align` | {string} | Can be `left` or `right` or `center` to align both the cell and the header. Left is the default so does not need to be specified. |\n|`headerAlign` | {string} | Can be `left` or `right` or `center` to align just the header. Left is the default so does not need to be specified. |\n|`minWidth` | {number} | The minimum width used to prevent resizing a column below this size. |\n|`maxWidth` | {number} | The maximum width used to prevent resizing a column above this size. |\n|`cssPart` | {string} | Allows you to set the name of a css part that can be used to customize the cell's css. This can be a string or a function. See the columns-custom-css example. The default cssPart for cells is called `cell` and it also can be used for more global changes.  |\n|`frozen` | {string} | Sets the column to be frozen on either left or right side by passing `left` or `right`. See the `columns-frozen` example for a working example. Frozen columns currently have some limitations to be addressed in the future. |<!--lint disable maximum-line-length definition-case-->\n|`width` | {number or string} | The column width, this can be an integer for fixed pixel width or a percent for example `10%`, if left off the columns will be sized to contents and to fit the width of the grid using the css table browsers handling (this is known as `auto` columns). I.E. There are three column configurations: `auto`, `fixed` and `percent`. <br /><br />In addition one can specify any css grid column setting like `fr` or `ch`. In order to make what was called a `stretchColumn` in previous versions you can set the width to`minmax(130px, 4fr)`. This is some minimum width and a `fr` unit equal to the remaining number of columns (see example columns-stretch.html). For a spacer column you just need to specify one extra column at the end (see example columns-fixed.html) but this is not recommended for how it looks. |<!--lint enable maximum-line-length definition-case-->\n|`headerIcon` | {string} | Allows you to set the name of the header icon. |\n|`tooltipOptions` | {Object or Function} | Allows you to set the tooltip options. See the tooltip example. |\n|`tooltip` | {string or Function} | Let you set the tooltip content. |\n|`headerTooltip` | {string} | Let you set the header title tooltip content. |\n|`headerIconTooltip` | {string} | Let you set the header icon tooltip content. |\n|`filterButtonTooltip` | {string} | Let you set the header filter button tooltip content. |\n|`tooltipCssPart` | {string or Function} | Allows you to set the name of a tooltip css part that can be used to customize the tooltip css. This can be a string or a function. See the columns-custom-css example.\n|`headerTooltipCssPart` | {string} | Allows you to sets the header tooltip css part.\n|`headerIconTooltipCssPart` | {string} | Allows you to sets the header icon tooltip css part.\n|`filterButtonTooltipCssPart` | {string} | Allows you to sets the filter button tooltip css part.\n|`cellSelectedCssPart` | {string} | Allows customization of a selected cell's background color.\n|`editor` | {object} | Adds an editor to the column if editable is set on the grid. See editing section for more details.\n\n## Column Settings (Specific)\n\n|Setting|Type|Description|\n|---|---|---|\n|`href` | {string|Function} | Used to create the href for hyperlink formatters. This can be a string or a function that can work dynamically. It can also replace `{{value}}` with the current value. |\n|`text` | {string} | Used to create the txt value for hyperlink formatters if a hard coded link text is needed. |\n|`disabled` | {boolean|Function} | Sets the cell contents to disabled, can also use a callback to determine this dynamically. Only checkboxes, radios, buttons and link columns can be disabled at this time. Selection columns require disabled rows in order to not be clickable/selectable. |\n|`uppercase` | {boolean} | Allows you to set the text as uppercase. |\n\n## Formatters\n\n|Formatter|Description|\n|---|---|\n|`text` | (Default) Formats the column value as a direct text element using toString in the grid cell. Undefined or Null values will be shown as empty.|\n|`password` | Formats the column value masking the string length with stars. Undefined or Null values will be shown as empty. This is good for private data. |\n|`rowNumber` | Formats the cell with a row number column that is shown 1 to n no matter what the sort order is. |\n|`date` | Formats date data as a date string in the desired format, by default it will use `dateStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`time` | Formats date data as a time string in the desired format, by default it will use `timeStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`decimal` | Formats number data as a decimal string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`integer` | Formats number data as a integer string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`selectionCheckbox` | Displays a checkbox column for selection when using `rowSelection=\"mixed\"` or `rowSelection=\"multiple\"`|\n|`selectionRadio` | Displays a checkbox column for selection when using `rowSelection=\"single\"` |\n| `button` | Displays an `ids-button`. Other column settings like `type` can be used to set the button type as can `icon` by set for icon only buttons. Use the `click` setting/function to get an callback handler. |\n| `hyperlink` | Displays an `ids-hyperlink`. Other column settings like `href` can be used to set the link href and `text` can be used to set the text to specific text. Use the `click` setting/function to get an callback handler. |\n| `checkbox` | Displays an `ids-checkbox`. The value will be checked depending on if the attached field is true or `\"true\"`. |\n| `badge` | Displays an `ids-badge`. The associated field will be placed in the badge. The `color` option can also be set to set the ids-badge color setting. |\n| `alert` | Displays `ids-alert` element, and the field value will appear in a tooltip. An `icon` option can be provided as an override.|\n| `color` | Displays `ids-color` element. If a `color` option is provided as an override, the field's value will appear in a tooltip. |\n| `icon` | Displays the field value as an `ids-icon`. An `icon` option can be provided as an override, and the field value will appear beside this `icon` override. A `size` option can also be provided. |\n| `favorite` | Displays the field value as a `star-filled` if true or `star-outlined` if false. A `size` option can be provided as an override. |\n| `tag` | Displays the field value as an `ids-tag`. A `color` option can be provided as an override. |\n| `progress` | Displays the field value as an `ids-progress`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `rating` | Displays the field value as an `ids-rating`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `slider` | Displays the field value as an `ids-slider`. A `text` option can be provided to customize the label. A `color`, `max`, `min` and `type` option can be provided as overrides. |\n| `stepChart` | Displays the field value as an `ids-step-chart`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `image` | Displays the field value as an `ids-image`. A `text` option can be provided to the `alt` and `title` attributes. |\n\n### Deprecated Formatters (Deprecated from 4.x)\n\n- `Input` No longer suggested to use, use simple list instead or a Text Formatter.\n- `Status, Color` No longer used, but badges can be used.\n- `Placeholder` Can now be set on the column and used with other formatters\n- `Ellipsis` Is now always enabled.\n- `Readonly` Can now be set on the column and used with other formatters\n- `Drilldown` Use button formatter with an icon.\n- `Template` is now deprecated for performance reasons, use a custom formatter now.\n- `ClassRange` Use column cssClass function or string\n- `Autocomplete, Lookup, TargetedAchievement, ProcessIndicator, Spinbox, Fileupload, Dropdown, Colorpicker, Tree, SummaryRow, GroupFooterRow, GroupRow, Expander, Editor, Textarea, Actions, RowReorder` May be added later\n\n## Custom Formatters\n\nIt is possible to create your own custom formatter. The idea behind the formatter is it takes the cell value and does processing on it to return the correct markup for the cell. The simplest custom formatter would be this example.\n\n```js\ncolumns.push({\n  id: 'custom',\n  name: 'Custom',\n  field: 'price',\n  formatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n    const value = `Custom: ${rowData[columnData.field] || '0'}`;\n    return `<span class=\"text-ellipsis\">${value}</span>`;\n  }\n});\n```\n\nTo style a custom formatter you may need to add a css part for the element. For example:\n\n```js\nformatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n  const value = `${rowData[columnData.field] || ''}`;\n  return `<a part=\"custom-link\" href=\"#\" class=\"text-ellipsis\">${escapeHTML(value)}</a>`;\n},\n```\n\nThen in the style sheet you add for you page you put the styles.\n\n```css\nids-data-grid::part(custom-link) {\n  color: #da1217;\n}\n\nids-data-grid::part(custom-link):hover {\n  color: #6c080b;\n}\n```\n\nThe formatter is then linked via the column on the formatter setting. When the grid cell is rendered the formatter function is called and the following arguments are passed in.\n\n- `rowData` The current row's data from the data array.\n- `columnData` The column object with all of the column configuration for this cell.\n\n## Events\n\n- `activecellchanged` Fires when the active cell changes with the keyboard or by click.\n- `sorted` Fires when the sort column is changed.\n- `selectionchanged` Fires any time the selection changes.\n- `activationchanged` Fires any time the active row changes.\n- `rowselected` Fires for each row that is selected.\n- `rowdeselected` Fires for each row that is deselected.\n- `rowactivated` Fires for each row that is activated.\n- `rowdeactivated` Fires for each row that is deactivated.\n- `rowclick` Fires for each row that is clicked.\n- `dblclick` Fires each time double clicked on body cells or header cells. Based on where it clicked details can be capture like `type: 'body-cell'|'header-title'|'header-filter'` etc.\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n- `columnresized` Fires when a column is resized or setColumnWidth is called.\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto\n- `rowExpanded` Fires when a tree or expandable row is expanded or collapsed\n- `rowCollapsed` Fires when a tree or expandable row is expanded or collapsed\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called.\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto.\n- `beforemenushow` Fires before context menu show, you can return false in the response to veto.\n- `menushow` Fires after context menu show.\n- `menuselected` Fires after context menu item selected.\n- `settingschanged` Fires after settings are changed in some way.\n- `scrollstart` Fires when data-grid reaches the topmost row.\n- `scrollend` Fires when data-grid reaches the bottommost row.\n- `afterrendered` Fires after rendered the data grid.\n\n## Methods\n\n- `setColumnWidth` Can be used to set the width of a column.\n- `setColumnVisibility` Can be used to set the visibility of a column.\n- `setActivateCell(cell, row)` Can be used to set focus of a cell.\n- `selectedRows` Lists the indexes of the currently selected rows.\n- `saveSetting(setting: string)` Save the given setting to local storage.\n- `saveAllSettings` Save all user settings to local storage.\n- `savedSetting(setting: string)` Get saved given setting value from local storage.\n- `allSavedSettings` Get saved all user settings from local storage.\n- `clearSetting(setting: string, key?: string)` Clear the given saved setting from local storage.\n- `clearAllSettings(userKeys: unknown)` Clear saved all user settings from local storage.\n- `restoreSetting(setting: string, value?: unknown)` Restore the given saved setting from local storage.\n- `editFirstCell` Puts the first cell on the active row into edit mode.\n- `appendData(data: Record<string, unknown>)` Use this to add more data to the datagrid's existing dataset.  This will automatically render additional rows in the datagrid.\n- `addRow(data: Record<string, unknown>, index?: number)` Adds a new row at optional row index and defaults the values to all those provided in the data\n- `addRows(data: Array<Record<string, unknown>>, index?: number)` Adds multiple new rows at optional row index and defaults the values to all those provided in the data\n- `removeRow(index: number)` Removed the provided row index from the dataset and visual datagrid\n- `clearRow(index: number)` Clears all values on the given row.\n- `commitCellEdit` Stops editing and commits the value in the active editor.\n- `cancelCellEdit` Stops editing and reverts the value in the active editor.\n- `resetDirtyCells` Clears all dirty cell indicators.\n- `dirtyCells` Gives a list of all currently dirty cells.\n- `exportToExcel(format: 'csv' | 'xlsx', filename: string, keepGridFormatting: boolean)` Export datagrid datasource to an excel file. This keeps grid formatting by default.\n- `collapseAll()` Collapse all expandable or tree rows.\n- `expandAll()` Expand all expandable or tree rows.\n- `toggleAll(opt: boolean)` Toggle collapse/expand all expandable or tree rows. `opt false`: will expand all, `opt: true`: will collapse all\n- `refreshRow` IdsDataGridRow method to refresh row element and its cells.\n- `refreshCell` IdsDataGridCell method to refresh cell element.\n- `updateDataset(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row.\n- `updateDatasetAndRefresh(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row and refreshes row/cells UI.\n\n## Filters\n\nData rows can be filter based on one or several criteria. Whole filter row can turned on/off by the api setting `filterable` and can be disabled by the api setting `filter-row-disabled`. The filter conditions can be applied thru the UI or programmatically. Each column can have its own filter type and turn on/off by columns setting.\n\n### Filter Columns Setting\n\nAll the filter settings can be passed thru columns data.\n\n|Setting|Type|Description|\n|---|---|---|\n|`filterType` | Function | Data grid built-in filter method, see the dedicated section below. |\n|`filterConditions` | Array | List of items to be use as operators in menu-button or options in dropdown. |\n|`filterFunction` | Function | User defined filter method, it must return a boolean. |\n|`filterOptions` | Object | Setting for components are in use, for example: `label, placeholder, disabled`. |\n|`isChecked` | Function | User defined filter method, it must return a boolean. This method use along built-in `checkbox` only, when filter data value is not boolean type. |\n\n### Built-in Filter Methods\n\n|Method|Description|\n|---|---|\n|`text` | It filter as text comparison. Contains input and menu-button with list of default operators. |\n|`integer` | It filter as integer comparison. Contains input and menu-button with list of default operators. |\n|`decimal` | It filter as decimal comparison. Contains input and menu-button with list of default operators. |\n|`contents` | It filter as text comparison. Contains dropdown and auto generate list of items based on column data. |\n|`dropdown` | It filter as text comparison. Contains dropdown and must pass list of item by setting `filterConditions`. |\n|`checkbox` | It filter as boolean comparison. Contains menu-button with list of default operators. |\n|`date` | It filter as date comparison. Contains date-picker and menu-button with list of default operators. |\n|`time` | It filter as time comparison. Contains time-picker and menu-button with list of default operators. |\n\n### Custom Filter\n\nIf the built-in filters are not enough, creating a custom filter is an option. There are two parts you can create both parts custom or mix-match with built-in.\n\n1. `UI Only` In order to do custom UI part of filter, add as html markup thru a slot. It must use slot and column-id attributes for example: `<div slot=\"filter-n\" column-id=\"n\">...</div>` where n is the columnId same passed in the columns.\n1. `filterFunction` This is a user defined filter method which must return a boolean. It determines if a cell value should be considered as a valid filtered value.\n1. `disableClientFilter` This is an api setting to disable filter logic client side. It will set filter conditions and fire an event `filtered` which can listen for custom logic.\n\n### Filter Code Examples\n\nBasic text filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nNo filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"false\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisabled filter row, will disabled all attached filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\" filter-row-disabled=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nHyperlink, integer, decimal, date and time filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'hyperlink',\n  name: 'Hyperlink',\n  field: 'description',\n  href: '#',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.hyperlink\n});\ncolumns.push({\n  id: 'integer',\n  name: 'Integer',\n  field: 'price',\n  filterType: dataGrid.filters.integer,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'decimal',\n  name: 'Decimal',\n  field: 'price',\n  filterType: dataGrid.filters.decimal,\n  formatter: dataGrid.formatters.decimal,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'date',\n  name: 'Date',\n  field: 'publishDate',\n  filterType: dataGrid.filters.date,\n  formatter: dataGrid.formatters.date\n});\ncolumns.push({\n  id: 'time',\n  name: 'Time',\n  field: 'publishDate',\n  filterType: dataGrid.filters.time,\n  formatter: dataGrid.formatters.time\n});\n```\n\nSome filter options label, placeholder, disabled.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterOptions: {\n    label: 'Label text for description input',\n    placeholder: 'Placeholder text for description input',\n    disabled: true\n  }\n});\n```\n\nCustom operators items for menu-button.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterConditions: [{\n    value: 'contains',\n    label: 'Contains',\n    icon: 'filter-contains'\n  },\n  {\n    value: 'equals',\n    label: 'Equals',\n    icon: 'filter-equals',\n    selected: true\n  }]\n});\n```\n\nContents and dropdown type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'location',\n  name: 'Location',\n  field: 'location',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.contents,\n  filterOptions: {\n    notFilteredItem: { value: 'not-filtered', label: 'Not Filtered' }\n  }\n});\ncolumns.push({\n  id: 'useForEmployee',\n  name: 'NotFilterdItem (shown as blank)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\ncolumns.push({\n  id: 'useForEmployeeCustomNotFilterdItem',\n  name: 'NotFilterdItem (show as custom text)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'not-filtered', label: 'Not Filtered' },\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\n```\n\nCheckbox type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'checkbox',\n  name: 'Checkbox',\n  field: 'inStock',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox\n});\ncolumns.push({\n  id: 'customCheckMethod',\n  name: 'Custom check method',\n  field: 'active',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox,\n  isChecked: (value) => value === 'Yes'\n});\n```\n\nCustom filter method.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\n// Custom filter checking\nconst myCustomFilter = (opt) => {\n  const { operator, columnId, value } = opt.condition;\n  const val = {\n    condition: Number.parseInt(value, 10),\n    data: Number.parseInt(opt.data[columnId], 10)\n  };\n  let isMatch = false;\n  if (Number.isNaN(val.condition) || Number.isNaN(val.data)) return isMatch;\n\n  if (operator === 'equals') isMatch = (val.data === val.condition);\n  if (operator === 'greater-than') isMatch = (val.data > val.condition);\n  if (operator === 'greater-equals') isMatch = (val.data >= val.condition);\n  if (operator === 'less-than') isMatch = (val.data < val.condition);\n  if (operator === 'less-equals') isMatch = (val.data <= val.condition);\n\n  return isMatch;\n};\n\nconst columns = [];\ncolumns.push({\n  id: 'customFilterMethod',\n  name: 'Custom Filter Method',\n  field: 'price',\n  filterFunction: myCustomFilter,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\n```\n\nCustom filter UI part.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n  <div slot=\"filter-description\" column-id=\"description\">\n    <ids-menu-button id=\"btn-filter-description\" icon=\"filter-greater-equals\" menu=\"menu-filter-description\" dropdown-icon>\n      <span class=\"audible\">Greater Than Or Equals</span>\n    </ids-menu-button>\n    <ids-popup-menu id=\"menu-filter-description\" target=\"#btn-filter-description\">\n      <ids-menu-group select=\"single\">\n        <ids-menu-item value=\"equals\" icon=\"filter-equals\">Equals</ids-menu-item>\n        <ids-menu-item value=\"greater-than\" icon=\"filter-greater-than\">Greater Than</ids-menu-item>\n        <ids-menu-item value=\"greater-equals\" icon=\"filter-greater-equals\" selected=\"true\">Greater Than Or Equals</ids-menu-item>\n        <ids-menu-item value=\"less-than\" icon=\"filter-less-than\">Less Than</ids-menu-item>\n        <ids-menu-item value=\"less-equals\" icon=\"filter-less-equals\">Less Than Or Equals</ids-menu-item>\n      </ids-menu-group>\n    </ids-popup-menu>\n    <ids-input id=\"input-filter-description\" type=\"text\" size=\"full\" placeholder=\"Slotted description\" label=\"Slotted description input\">\n    </ids-input>\n  </div>\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisable client filter\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" disable-client-filter=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n\ndataGrid.addEventListener('filtered', (e: any) => {\n  console.info('filtered:', e.detail);\n});\n```\n\n### Filter rows programmatically\n\n```js\n// Filter rows\nconst conditions = [{ columnId: 'description', operator: 'contains', value: '5' }];\ndataGrid.applyFilter(conditions);\n\n// Reset all filters\ndataGrid.applyFilter([]);\n```\n\n### Filter Events\n\nThe following events are relevant to data-grid filters.\n\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n\n## Custom cell colors\n\nIn some cases, it may be desirable to customize the background color of cells.  This can be done with the `cssPart` column setting:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell'\n});\n```\n\nThe `cssPart` property is translated into a `part` attribute that is applied to every cell in the column.  In the event the color needs to be conditional based on the row index or other logic, a function can be used:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2')\n  // ...\n});\n```\n\nAfter this is defined, accompanying CSS can be written to target the parts `custom-cell`, `custom-cell-1`, and `custom-cell-2` to change background color or other CSS properties of the cell:\n\n```css\nids-data-grid::part(cell) {\n  background-color: #ebf9f1;\n}\n\nids-data-grid::part(cell-selected) {\n  background-color: #c9dad0;\n}\n```\n\n### Changing selected cell colors\n\nAnother column setting, `cellSelectedCssPart` can be used alongside `cssPart` to customize the selected color of the row in a similar way.  When using `mixed` selection, this color is also applied to activated rows:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell',\n  cellSelectedCssPart: 'custom-cell-selected'\n});\n```\n\nThis column setting can also be a function, just like `cssPart`:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2'),\n  cellSelectedCssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-selected-1' : 'custom-cell-selected-2')\n  // ...\n});\n```\n\n## Tooltip Code Examples\n\nSet suppress tooltips to turn off.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" suppress-tooltips>\n</ids-data-grid>\n```\n\nSet custom tooltip strings.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: 'This is a product Id',\n  headerTooltip: 'This is the product Id header title',\n  headerIconTooltip: 'This is product Id header icon',\n  filterButtonTooltip: 'This is the product Id filterButton'\n});\n```\n\nSet tooltip as callback.\n\n```js\nconst tooltipCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return `Text: ${text}<br/>Header Row: ${rowIndex}, Cell: ${columnIndex}`;\n  } else if (type === 'filter-button') {\n    return `Text: ${text}<br/>FilterButton Row: ${rowIndex}, Cell: ${columnIndex}`;\n  }\n  return `Text: ${text}<br/>for Row: ${rowIndex}, Cell: ${columnIndex}`;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: tooltipCallback\n});\n```\n\nSet tooltip custom options.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: {\n    placement: 'top',\n    headerPlacement: 'top',\n    headerIconPlacement: 'top',\n    filterButtonPlacement: 'bottom',\n    x: 0,\n    y: 10,\n    headerX: 0,\n    headerIconX: 0,\n    headerY: 10,\n    headerIconY: 10,\n    filterButtonX: 0,\n    filterButtonY: 22\n  }\n});\n```\n\nSet tooltip options as callback.\n\n```js\nconst tooltipOptionsCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return { headerPlacement: 'top', headerX: 0, headerY: 10 };\n  } else if (type === 'header-icon') {\n    return { headerIconPlacement: 'top', headerIconX: 0, headerIconY: 10 };\n  } else if (type === 'filter-button') {\n    return { filterButtonPlacement: 'bottom', filterButtonX: 0, filterButtonY: 22 };\n  }\n  return { placement: 'top', x: 0, y: 10 };\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: tooltipOptionsCallback\n});\n```\n\nSet tooltip custom css.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: 'custom-turquoise',\n  headerTooltipCssPart: 'custom-turquoise',\n  headerIconTooltipCssPart: 'custom-turquoise',\n  filterButtonTooltipCssPart: 'custom-turquoise'\n});\n```\n```css\n/* tooltip css part `custom-turquoise` */\nids-data-grid::part(custom-turquoise-tooltip-arrow-top)::after {\n  border-top-color: #2f8d8e;\n}\nids-data-grid::part(custom-turquoise-tooltip-popup) {\n  background-color: #2f8d8e;\n}\n```\n\nSet tooltip custom css as callback.\n\n```js\nconst tooltipCssPartCallback = (args: { type: string }): string => {\n  const { type } = args;\n  let cssPart = '';\n  // Set random css part each time, for `body-cell` tooltips\n  if (type === 'body-cell') {\n    const parts = ['azure', 'ruby'];\n    const randomIndex = Math.floor(Math.random() * parts.length);\n    cssPart = parts[randomIndex];\n  }\n  return cssPart;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: tooltipCssPartCallback\n});\n```\n```css\n/* tooltip css part `azure` */\nids-data-grid::part(azure-tooltip-arrow-top)::after {\n  border-top-color: #0066d4;\n}\nids-data-grid::part(azure-tooltip-popup) {\n  background-color: #0066d4;\n}\n\n/* tooltip css part `ruby` */\nids-data-grid::part(ruby-tooltip-arrow-top)::after {\n  border-top-color: #c31014;\n}\nids-data-grid::part(ruby-tooltip-popup) {\n  background-color: #c31014;\n}\n```\n\n## context menu Code Examples\n\nThe context menus can be set via the dataset.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n</ids-data-grid>\n```\n```js\n// Dataset for header cells context menu\nconst headerMenuData = {\n  id: 'grid-header-context menu',\n  contents: [{\n    id: 'header-actions-group',\n    items: [\n      { id: 'actions-split', value: 'actions-split', text: 'Split' },\n      { id: 'actions-sort', value: 'actions-sort', text: 'Sort' },\n    ]\n  }],\n};\n\n// Dataset for body cells context menu\nconst menuData = {\n  id: 'grid-context menu',\n  contents: [{\n    id: 'actions-group',\n    items: [\n      { id: 'item-1', value: 'item-1', text: 'Item One' },\n      { id: 'item-2', value: 'item-2', text: 'Item Two' },\n      { id: 'item-3', value: 'item-3', text: 'Item Three' }\n    ]\n  }],\n};\n\n// Set context menu data with data-grid\ndataGrid.menuData = menuData;\ndataGrid.headerMenuData = headerMenuData;\n\n// Set to return true/false in the response to veto before context menu show.\ndataGrid.addEventListener('beforemenushow', (e: any) => {\n  console.info('before context menu show', e.detail);\n  // e.detail.response(false);\n});\n\n// Set to watch after context menu show.\ndataGrid.addEventListener('menushow', (e: any) => {\n  console.info('After context menu show', e.detail);\n});\n\n// Set to watch after context menu item selected.\ndataGrid.addEventListener('menuselected', (e: any) => {\n  console.info('context menu item selected', e.detail);\n});\n```\n\nSet context menu thru Slot.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n  <!-- context menu header cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"header-context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n      <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n  <!-- context menu body cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n      <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n      <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n      <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n</ids-data-grid>\n```\n\nSet context menu thru ID.\n\n```html\n<ids-data-grid\n  header-menu-id=\"grid-header-context menu\"\n  menu-id=\"grid-context menu\"\n  id=\"data-grid-1\"\n  label=\"Books\"\n></ids-data-grid>\n\n<!-- context menu header cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-header-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n    <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n\n<!-- context menu body cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n    <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n    <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n    <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n```\n\n## Empty Message\n\nSet empty message thru slot (markup).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-slot\" label=\"Books\">\n  <ids-empty-message hidden icon=\"empty-search-data-new\" slot=\"empty-message\">\n    <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">No Data</ids-text>\n    <ids-text hidden label=\"true\" slot=\"description\">There is no data available.</ids-text>\n  </ids-empty-message>\n</ids-data-grid>\n```\n\nSet empty message thru settings (markup).\n\n```html\n<ids-data-grid\n  id=\"data-grid-em-thru-settings\"\n  label=\"Books\"\n  empty-message-icon=\"empty-error-loading-new\"\n  empty-message-label=\"No Data\"\n  empty-message-description=\"There is no data available.\"\n></ids-data-grid>\n```\n\nSet empty message thru settings (javascript).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-settings-js\" label=\"Books\">\n</ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-em-thru-settings-js');\ndataGrid.emptyMessageIcon = 'empty-error-loading-new';\ndataGrid.emptyMessageLabel = 'No Data';\ndataGrid.emptyMessageDescription = 'There is no data available.';\n```\n\n## Row Height\n\nAs mentioned in the settings section you can change the row height by setting the rowHeight option.\n\n```html\n     <ids-data-grid id=\"data-grid-row-height\" row-height=\"md\"></ids-data-grid>\n```\n\nIts worth mentioning the characteristics and usage for each one.\n\nLarge (`row-height=\"lg\"`) - Row Height is 50. The default row height, header is 16px and body cells are 16px. 16px padding on cells and header. You should use this most of the time if there is plenty of room on the UI and to avoid the UI looking crowded.\nMedium (`row-height=\"md\"`) - Row Height is 40. Header is 16px and body cells are 16px. 12px padding on cells and header. If you need to see a few more rows but still want to avoid a crowded UI, this is the next best option.\nSmall (`row-height=\"sm\"`) - Row Height is 35. Header is 16px and body cells are 16px. 8px padding on cells and header. This is the smallest option that is recommended for readability and spacing.\nExtra Small (`row-height=\"xs\"`) - Row Height is 30. Header is 14px and body cells are 14px. 8px padding on cells and header. If you need a very compressed data grid with a lot of data you can use this option. But there is a trade off of bad readability and spacing.\nExtra Extra Small (`row-height=\"xxs\"`) - Row Height is 25. Header is 14px and body cells are 14px. 2px padding on cells and header. Avoid this option as it is very crowded but it is included for edge cases.\n\n## States and Variations\n\n**Rows**\n- Hover\n- Selected\n- Disabled\n- Readonly\n- Activated\n\n**Columns**\n- Focus\n- Hover\n- Sorted\n- Selected\n- Disabled\n- Filtered\n\n**Cells**\n- Hover (sometimes a cursor change)\n- Readonly\n- Focus\n- Checked/Not Checked (Checkboxes)\n\n## Keyboard Guidelines\n\n- <kbd>Tab</kbd>The initial tab enters the grid with focus on the first cell of the first row, often a header. A second tab moves out of the grid to the next tab stop on the page. Once focus is established in the grid, a TAB into or a Shift Tab into the grid will return to the cell which last had focus. If in edit mode will finish editing and start editing the next cell.\n- <kbd>Shift + Tab</kbd> Moves the reverse of tab. If in edit mode will finish editing and start editing the previous cell.\n- <kbd>Left</kbd> and <kbd>Right</kbd> Move focus to the adjacent column's cell. There is no wrap at the end or beginning of columns.\n- <kbd>Up</kbd> and <kbd>Down</kbd> Move focus to the adjacent row's cell. There is no wrap at the first or last row.\n- <kbd>Home</kbd> moves focus to the first cell of the current row\n- <kbd>End</kbd> moves focus to the last cell of the current row\n- <kbd>Page Up</kbd> moves focus to the first cell in the current column\n- <kbd>Page Down</kbd> moves focus to the last cell in the current column\n- <kbd>Space</kbd> Toggles selection the activate row. If suppressRowDeselection is set it will be ignored on deselect. If the cell contains an expandable element then the row will toggle the expanded state. If the cell contains a checkbox editor, will toggle the checkbox state.\n- <kbd>F2</kbd> toggles actionable mode. Pressing the <kbd>Tab</kbd> key while in actionable mode moves focus to the next actionable cell. While in actionable mode you can do things like type + enter. This will move you down a row when you hit enter. If the cell has a control that uses down arrow (like the drop downs or lookups that are editable). Then the user needs to hit enter to enable the edit mode on that cell.\n- <kbd>Triple Click</kbd> Not a keyboard shortcut, but if you have text in a cell that is overflowed a triple click will select all the text even the part that is invisible.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Enter</kbd> Activates edit mode on the cell if it is editable. There is also an \"auto edit detection\". If the user starts typing then edit mode will happen automatically without enter. If in edit mode already <kbd>Enter</kbd> will finish edit mode. If `editNextOnEnterPress` is enabled then editing will start on the same column in next row.\n- <kbd>Shift + Enter</kbd> Same as enter but if `editNextOnEnterPress` is enabled then editing will start on the same column in previous row.\n- <kbd>F2</kbd> Finish editing same as Enter. But if `editNextOnEnterPress` is enabled, will stay in same cell. `cancelEditMode` will fire.\n- <kbd>CMD/CTRL + Enter</kbd> Finish editing same as Enter.\n- <kbd>ESC</kbd> Revert to the previous value and cancel editing. `cancelEditMode` will fire.\n\n## Responsive Guidelines\n\n- By default, data grid grows depending on the amount of contents within and will scroll if necessary under the header. It stops growing when it reaches the size of the parent container.\n- `autoFit` property or `auto-fit` attribute can be set manually to make the data grid size fill and be responsive to the size of the screen, regardless of the amount of contents.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Counts have all new markup and classes.\n\n**4.x to 5.x**\n- Data grid has all new markup and a custom element but some similarly named options\n- Still uses same columns and data set options. Some column options enhanced and changed.\n- If using events events are now plain JS events for example: sorted, rendered\n- Some Api Functions have changed\n- If using properties/settings these are now attributes or as plain properties for example: data, virtual-scroll\n- Markup has changed to a custom element `<ids-data-grid></ids-data-grid>`\n- Can now be imported as a single JS file and used with encapsulated styles\n- `Drill Down` Formatter is now covered by `Button` formatter with `icon=\"drilldown\"`\n- `textOverflow` setting is now by default\n- `rowNavigation` setting has replaced `cellNavigation`. Cell navigation is the default behavior.\n- `stretchColumn` is now more flexible and can be achieved by setting a column width to `minmax(130px, 4fr)`. I.E. some min width and a `fr` unit equal to the remaining number of columns (or similar variations).\n- split columns are not supported anymore but could be done with a custom formatter if needed\n- `frozenColumns` setting is now set on each column by adding `frozen: 'left'` or `frozen: 'right'` to the column definition.\n- Some events are renamed see the events section for more details, also the signature of the events has changed.\n- Custom formatter functions can now be any type of function and have a different signature.\n- The `expanded` column option for tree was renamed to `rowExpanded`.\n- The `expandrow/collapserow` events are renamed to `rowexpanded/rowcollapsed`\n- The `beforeentereditmode/entereditmode/exiteditmode` event is renamed to `beforecelledit/celledit/endcelledit/cancelcelledit`\n- The `actionablemode` feature has been replaced with simply tabbing to the next editable field when in edit mode.\n\n## Accessibility Guidelines\n\n1.1.1 Non-text Content - All images, links and icons have text labels for screen readers when the formatters are used.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and links and images of text has a contrast ratio of at least 4.5:1.\n- 2.1.1 Keyboard - Make all functionality available from a keyboard. The grid has keyboard shortcuts and is usable with a screen reader due to the addition of aria tags.\n- A datagrid in general including this one uses the following aria tags\n  - `aria-label` labels the enter table on the main table\n  - `aria-rowcount` lists the visible row count on the main table\n  - `aria-colindex` the index of each column on the column elements\n  - `aria-rwindex` the index of each row on the row elements\n  - `aria-setsize` for tree grid lists the number of elements in each level (group)\n  - `aria-level` the level of indentation\n  - `aria-posinset` the depth into each set\n  - `aria-expanded` on the row it indicates if the row is expanded (for tree and expandable row)\n  - `aria-sort` indicates the sort direction on the sortable columns\n  - `aria-checked` indicates if the element is checked on checkbox columns and headers\n\n## Regional Considerations\n\nTitles and labels should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n\n## Code Separation (For Developers)\n\nThe code is divided into several files. Here is a description of where everything is.\n\n- `ids-data-grid-cell.ts` creates a non-shadow root `ids-data-grid-cell`, and handles its own selection, and activation.\n- `ids-data-grid-cell.scss` contains all css related to `.ids-data-grid-cell` and its children\n- `ids-data-grid-contextmenu.ts` contains code in the form of export functions, that adds ability to get right click menus on headers and cells\n- `ids-data-grid-filter.scss` contains all css related to the filter row and its children\n- `ids-data-grid-filter.ts` contains code to implement the filtering functionality and its ui (some functions are in ids-data-source)\n- `ids-data-grid-formatters.ts` contains all formatter functions and some supporting code like data extraction\n- `ids-data-grid-header.ts` contains most header functionality, the header template, and code related to header actions like sort, reorder and selection.\n- `ids-data-grid-header.scss` contains all css related to `.ids-data-grid-header` and its children\n- `ids-data-grid-row.ts` contains most row functionality, the row template, and code related to row actions like expand, collapse, select, activate\n- `ids-data-grid-row.scss` contains all css related to `.ids-data-grid-row` and its children\n- `ids-data-grid-tooltip-mixin.js` contains a tooltip mixin that adds tooltip functionality to cells and headers, its different from `ids-tooltip-mixin` (more specific)\n- `ids-data-grid.js` contains all main data grid code, the api and settings and the main generator loop for the data grid\n"}},{"name":"ids-data-grid-filters","attributes":[{"name":"root","values":[]},{"name":"DEFAULTS","description":"Filter defaults.","values":[]},{"name":"#conditions","description":"Saved list of conditions to use with filter rerender.","values":[]},{"name":"#initial","description":"Initial values to use reset filter.","values":[]},{"name":"#filterIsProcessing","description":"Hold filter in-process state.","values":[]},{"name":"focused","description":"Focused element use with rerender filter.","values":[]},{"name":"#suppressFilteredEvent","description":"Suppress filtered event","values":[]},{"name":"filterNodes","description":"Get list of filter wrapper elements","values":[]},{"name":"#operatorsDataset","description":"Available operators for filter button.","values":[]}],"description":{"kind":"markdown","value":"# Ids Data Grid\n\n## Description\n\nThe data grid component (ids-data-grid) is used to arrange tabular data in rows and columns for easier scanning and comparison. Data grids are very configurable in both design and functionality and they can be found within almost every product/app.\n\nYou should pass an array of objects in to the grid on the `dataset` object. Also pass the `columns` array which contains the column configuration. There are a number of events described in the events and API section, as well as the column settings.\n\nA Read-Only data grid uses \"Formatters\" to render cell content. A number of these are listed in the API section and it is possible to create your own.\n\n## Use Cases\n\n- The data grid component is most useful when it is used for categorically sorting dense and repetitive information. Each individual item is listed down the Y axis of the chart, and their shared attribute categories are listed along the X axis. The resulting cells are filled with information that is relevant to the corresponding item and attribute.\n\n## Terminology\n\n- **Title**: The name of the data grid optionally appearing above the grid and describing the contents.\n- **Options**: An optionally actions menu button with functionality that operates on the entire data grid.\n- **Cell**: Body elements of the data grid that contain an object's value or attribute. Cells should only contain one type of content or it can be confusing and hurt accessibility.\n- **Header Cell**: These cells contain the names of the columns in the grid and related functions like filtering and sorting. All cells below the header cell will hold values related to the attribute in the header cell.\n- **Column**: Cells stacked vertically that contain values relate to the attribute found on the top header cell.\n- **Row**: Each row contains one cell per column in the data grid, and each cell displays a single value in the bound data item.\n- **Tree**: Denotes the use of hierarchical data, with an expandable and collapsible hierarchy.\n\n## Themeable Parts\n\n- `table` allows you to further style the table main element\n- `container` allows you to further style the container element\n- `body` allows you to further style the body element\n- `header` allows you to further style the header element\n- `headerCell` allows you to further style the header cells\n- `row` allows you to further style the rows\n- `cell` allows you to further style the row cells\n- `cell-selected` allows you to further style row cells that are selected (in mixed-selection mode, activated cells are also styled)\n- `tooltip-popup` allows you to further style or adjust the outer tooltip popup element\n- `tooltip-arrow` allows you to adjust the tooltip arrow element\n\n## Features (With Code Examples)\n\nA data grid is created by adding an `ids-data-grid` html element in the page and setting the options either inline in the markup or in the JS part of the code. You can only use simple types (string, boolean ect) for inline markup so passing the data and column arrangement is always done in the JS part. The data will be an array of objects so its in the correct tabular form. The columns are also an array of objects but with defined options and types. See more about columns in next section.\n\n```html\n<ids-data-grid id=\"data-grid-1\"></ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-1');\ndataGrid.data = dataset;\ndataGrid.columns = columns;\n```\n\n### Column Groups\n\nSetting column groups allows you to add a second level of columns in your header and the ability to group the first level. This is useful for when you have a large number of columns and you want to group them into logical or related sections.\n\nColumn groups are achieved by providing an array to the `columnGroups` setting. Only one level of column groups can be defined.\n\n```js\ndataGrid.columnGroups = [\n{\n  colspan: 3,\n  id: 'group1',\n  name: 'Column Group One',\n  align: 'center'\n},\n{\n  colspan: 2,\n  id: 'group2',\n  name: 'Column Group Two'\n},\n{\n  colspan: 2,\n  id: 'group3',\n  name: 'Column Group Three',\n  align: 'right'\n},\n{\n  colspan: 11,\n  id: 'group4',\n  name: 'Column Group Four',\n  align: 'left'\n}\n];\n```\n\nIf the column is hidden it will be automatically removed from the `colspan`. If in the last group you didn't provided a bug enough `colspan` it will be set to the remaining columns. The `name` text can be right or left aligned and given an id. The only required property is `colspan`.\n\n### Selection\n\nThe data grid selection feature involves the setting `rowSelection`. This can be one of several values.\n\n- `false` No selection enabled.\n- `multiple` Allows multiple rows to be selected. When doing this it is recommended to add a `formatters.selectionCheckbox` for the first column.\n- `single` Allows a single row to be selected. When doing this you can optionally to add a `formatters.selectionRadio` for the first column. You can use the `suppressRowDeselection` if you want one row to always be selected.\n- `mixed` Allows multiple rows to be selected by clicking only on the checkbox or <kbd>Space</kbd> key. If clicking a row then that row is activated, meaning it is the current row and something might be shown based on the data of that row. You can use the `suppressRowDeactivation` if you want one row to always be selected.\n\nHere is a code example for multi select\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" row-selection=\"multiple\">\n</ids-data-grid>\n```\n\n```js\n  dataGrid.addEventListener('rowselected', (e) => {\n    console.info(`Row Selected`, e.detail);\n  });\n\n  dataGrid.addEventListener('rowdeselected', (e) => {\n    console.info(`Row Deselected`, e.detail);\n  });\n\n  dataGrid.addEventListener('selectionchanged', (e) => {\n    console.info(`Selection Changed`, e.detail);\n  });\n```\n\nThe following events are relevant to selection/activation.\n\n`rowselected` Fires when an individual row is activation and gives information about that row.\n`rowdeselected` Fires when an individual row is deselected and gives information about that row.\n`selectionchanged` Fires once for each time selection changes and gives information about all selected rows.\n\n`rowactivated` Fires when an individual row is activated and gives information about that row.\n`rowdeactivated` Fires when an individual row is deactivated and gives information about that row.\n`activationchanged` Fires once for each time activation changes and gives information about the active row.\n\n### Tree Grid\n\nThe tree grid feature involves the setting `treeGrid` to true. In addition the data passed to the tree grid should contain a field called `children`. That contains the child rows. This can by unlimited levels but 2-4 is recommended as a max for a more usable UI. In addition you can preset some states by adding `rowExpanded: false` to the parent elements (default is expanded). And also set `rowHidden: false` for child rows that are expanded. You also need a `Expander` formatter on a cell (usually the first visible cell.\n\nHere is a code example for a tree grid.\n\n```html\n<ids-data-grid id=\"tree-grid\" label=\"Buildings\" tree-grid=\"true\" group-selects-children=\"true\"></ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to selection/activation.\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `groupSelectsChildren` {boolean} If the tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `suppressRowClickSelection` {boolean} If using selection you might want to set this so clicking a row will not select it.\n### Expandable Row\n\nThe Expandable Row feature involves the setting `expandableRow` to true. In addition a row template should be provided via an id that points to the `expandableRowTemplate` which is a `template` element. You can preset the expandable state by adding `rowExpanded: true` to the row element you want to expand. The default is collapsed.\n\nHere is a code example for an expandable row\n\n```html\n<ids-data-grid\n    id=\"data-grid-expandable-row\"\n    expandable-row=\"true\"\n    expandable-row-template=\"expandable-row-tmpl\"\n    label=\"Books\">\n    <template id=\"expandable-row-tmpl\">\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"16\" type=\"span\">${convention}</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">${price} USD</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">Lorem Ipsum is simply sample text of the printing and typesetting industry. Lorem Ipsum has been the industry standard sample text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only...</ids-text>\n        </ids-layout-grid>\n    </template>\n</ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to expandable rows\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRowTemplate` {string} Should point to the row `template` element.\n\n### Editing\n\nThe Editing features start by setting `editable` to true. In addition you should add editors to columns and enable features of each of the editors. The features differ depending on the component used for editing. See the Keyboard section for information on which keys can be used when editing..\n\nHere is a code example for an editable text cell.\n\n```js\ncolumns.push({\n    id: 'description',\n    name: 'Description',\n    field: 'description',\n    sortable: true,\n    resizable: true,\n    reorderable: true,\n    formatter: dataGrid.formatters.text,\n    editor: {\n      type: 'input',\n      inline: true,\n      editorSettings: {\n        autoselect: true,\n        dirtyTracker: true\n      }\n    }\n  });\n```\n\nHere is a code example for an editable dropdown cell\n\n```js\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  resizable: true,\n  reorderable: true,\n  formatter: dataGrid.formatters.dropdown,\n  editor: {\n    type: 'dropdown',\n    editorSettings: {\n      dirtyTracker: true,\n      validate: 'required',\n      options: [\n        {\n          label: 'Option 1',\n          value: 'opt1'\n        },\n        {\n          label: 'Option 2',\n          value: 'opt2'\n        }\n      ]\n    }\n  }\n});\n```\n\nTo cancel or disabled editing there are a few ways:\n\n- setting the column `editor` setting to undefined will disable editing on the column (as will not having an editor setting at all).\n- adding a `readonly` or `disabled` function which returned true for some cells based on a condition will disable or mark the cell readonly.\n- return false in the `beforecelledit` event in the response function\n\nThe following settings are available on editors.\n\n`type` As of now can be `checkbox`, `input`, `datepicker`, `timepicker`, or `dropdown` but more will be added.\n`inline` Default is false. If true the editor (for example an input) will be visible in a field.\n`editorSettings` Is an object that is loosely typed that lets you pass any option the editor supports in. For example any of the IdsInput or IdsCheckbox options can be passing in. Some special ones are:\n`editorSettings.autoselect` Text will be selected when entering edit mode\n`editorSettings.dirtyTracker` Enables the dirty tracker that marks changed cells.\n`editorSettings.validate` Text will be selected when entering edit mode\n`editorSettings.mask` Will pass mask settings to the input (if supported).\n`editorSettings.maskOptions` Will pass maskOptions settings to the input (if supported).\n`editorSettings.options` Dataset used for dropdown editor's list box options.\n\nWhen the use clicks in the cell or activates editing with the keyboard with the Enter key and types. The following events will fire.\n\n`beforecelledit` Fires before a cell is being edit (before edit is started). Can be vetoed by returning false as shown below.\n`celledit` Fires exactly when a cell is being edited.\n`endcelledit` Fires when a cell edit is completed and changed.\n`cancelcelledit` Fires when an edit is cancelled via the <kbd>Esc</kbd> key.\n\nTo cancel editing based on some condition or if editing is not allowed you can veto the `beforecelledit` event.\n\n```js\n  dataGrid.addEventListener('beforecelledit', (e: Event) => {\n    (<CustomEvent>e).detail.response(false);\n  });\n```\n\nThere are a few utility functions for editing the data grid mentioned in the Methods section.\n\n## Settings and Attributes\n\nWhen used as an attribute in the DOM the settings are kebab case, when used in JS they are camel case.\n\n- `virtualScroll` {boolean} When virtual scroll is used the grid can render many thousands of rows and only the rows visible in the scroll area are rendered for performance. This setting has limitations such as the rows need to be fixed size.\n- `addNewAtEnd` {boolean} Automatically append rows while keyboard navigating data grid in edit mode.\n- `alternateRowShading` {boolean} For better scan-ability you can shade alternate rows.\n- `listStyle` {boolean} Sets the style of the grid to list style for simple readonly lists.\n- `columns` {Array<object>} Sets the columns array of the data grid. See column settings.\n- `columnGroups` {Array<object>} Allows you to group columns together in logical sets. See section below for details.\n- `rowHeight` {string | `'xxs'` | `'xs'` | `'sm'` | `'md'` | `'lg'`} Sets the height and padding of each row. In smaller row heights the font is lowered.\n- `data` {Array<object>} Sets the data to show in the data grid. This can be a JSON Array.\n- `disableClientFilter` {boolean} Disables the filter logic client side in situations you want to filter server side.\n- `filterable` {boolean} Turns on or off the filter functionality.\n- `filterRowDisabled` {boolean} Disables the filter row.\n- `headerMenuData` {Array<object>} Dataset to build context menu for header and header group cells.\n- `headerMenuId` {string} ID of the popupmenu to use as context menu for header and header group cells.\n- `menuData` {Array<object>} Dataset to build context menu for body cells.\n- `menuId` {string} ID of the popupmenu to use as context menu for body cells.\n- `rowNavigation` {boolean} If using row navigation, the row will be focused when navigating the data grid via clicks and keyboard events.\n- `rowSelection` {string|boolean} Set the row selection mode between false, 'single', 'multiple' and 'mixed\n- `suppressRowClickSelection` {boolean} If using selection setting this will require clicking a checkbox or radio to select the row. Clicking other cells will not select the row.\n- `suppressRowDeactivation` {boolean} Set to true to prevent rows from being deactivated if clicked. i.e. once a row is activated, it remains activated until another row is activated in its place.\n- `suppressRowDeselection`  {boolean} Set to true to prevent rows from being deselected if click or space bar the row. i.e. once a row is selected, it remains selected until another row is selected in its place.\n- `suppressTooltips`  {boolean} Set to true to prevent display tooltips.\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRow` {boolean} Indicates expandable rows will be used in the data grid.  See the expandable row section for more details.\n- `expandableRowTemplate` {string} Should point to the row `template` element for expandable rows.\n- `treeGrid` {boolean} Indicates a tree grid will be used  in the data grid. See the tree grid section for more details.\n- `showHeaderExpander` {boolean} Set to show header expander icon for expandable and tree rows.\n- `groupSelectsChildren` {boolean} If a tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `saveActivePage` {boolean} If set the active page on the pager will be saved to local storage.\n- `saveColumns` {boolean} If set columns will be saved to local storage.\n- `saveFilter` {boolean} If set filter will be saved to local storage.\n- `savePageSize` {boolean} If set the page size on the pager will be saved to local storage.\n- `saveRowHeight` {boolean} If set the row height will be saved to local storage.\n- `saveSortOrder` {boolean} If set column sort order will be saved to local storage.\n- `saveUserSettings` {boolean} If set all settings will be saved to local storage.\n- `emptyMessageDescription` {string} Set empty message description text.\n- `emptyMessageIcon` {string} Set empty message icon name.\n- `emptyMessageLabel` {string} Set empty message label text.\n- `suppressEmptyMessage` {boolean} Set to true to prevent display empty message.\n- `editable` {boolean} If true in addition to adding editors to columns the data grid is editable.\n- `editNextOnEnterPress` {boolean} If enabled when editing using <kbd>ENTER</kbd> will finish editing and start editing the same cell in next row and <kbd>SHIFT + ENTER</kbd> will edit the previous row.\n\n## Column Settings (General)\n\n|Setting|Type|Description|\n|---|---|---|\n|`id` | {string} | The unique id of the column. Each column in the grid should have some unique id.|\n|`name` | {string} | The text to show on the header.|\n|`field` | {string} | The name of the field (column) in the data array attached to the grid for example `description`. This can also be nested in an object for example `children.name`. |\n|`sortable` | {boolean} | If false, the column cannot be sorted. When completed a `sorted` event will fire.|\n|`resizable` | {boolean} | If false the column will not be resizable, thus is a fixed size and can never be changed by the user by dragging the left and right edge.  When completed a `columnresized` event will fire. See the `columns-resizable` example for a working example. |\n|`reorderable` | {boolean} | If true the column can be dragged into another position with adjacent columns. When completed a `columnmoved` event will fire. See the `columns-reorderable` example for a working example. This currently does not work with grouped columns. |\n|`readonly` | {boolean or Function} | If true the cell will be set to readonly color, indicating no editing.|\n|`disabled` | {boolean or Function} | If true the cell will be set to disabled color, indicating no editing.|\n|`formatter`| {Function} | Controls how the data is rendered in the cell.|\n|`hidden` | {boolean} | Excludes the column from being added to the DOM.|\n|`align` | {string} | Can be `left` or `right` or `center` to align both the cell and the header. Left is the default so does not need to be specified. |\n|`headerAlign` | {string} | Can be `left` or `right` or `center` to align just the header. Left is the default so does not need to be specified. |\n|`minWidth` | {number} | The minimum width used to prevent resizing a column below this size. |\n|`maxWidth` | {number} | The maximum width used to prevent resizing a column above this size. |\n|`cssPart` | {string} | Allows you to set the name of a css part that can be used to customize the cell's css. This can be a string or a function. See the columns-custom-css example. The default cssPart for cells is called `cell` and it also can be used for more global changes.  |\n|`frozen` | {string} | Sets the column to be frozen on either left or right side by passing `left` or `right`. See the `columns-frozen` example for a working example. Frozen columns currently have some limitations to be addressed in the future. |<!--lint disable maximum-line-length definition-case-->\n|`width` | {number or string} | The column width, this can be an integer for fixed pixel width or a percent for example `10%`, if left off the columns will be sized to contents and to fit the width of the grid using the css table browsers handling (this is known as `auto` columns). I.E. There are three column configurations: `auto`, `fixed` and `percent`. <br /><br />In addition one can specify any css grid column setting like `fr` or `ch`. In order to make what was called a `stretchColumn` in previous versions you can set the width to`minmax(130px, 4fr)`. This is some minimum width and a `fr` unit equal to the remaining number of columns (see example columns-stretch.html). For a spacer column you just need to specify one extra column at the end (see example columns-fixed.html) but this is not recommended for how it looks. |<!--lint enable maximum-line-length definition-case-->\n|`headerIcon` | {string} | Allows you to set the name of the header icon. |\n|`tooltipOptions` | {Object or Function} | Allows you to set the tooltip options. See the tooltip example. |\n|`tooltip` | {string or Function} | Let you set the tooltip content. |\n|`headerTooltip` | {string} | Let you set the header title tooltip content. |\n|`headerIconTooltip` | {string} | Let you set the header icon tooltip content. |\n|`filterButtonTooltip` | {string} | Let you set the header filter button tooltip content. |\n|`tooltipCssPart` | {string or Function} | Allows you to set the name of a tooltip css part that can be used to customize the tooltip css. This can be a string or a function. See the columns-custom-css example.\n|`headerTooltipCssPart` | {string} | Allows you to sets the header tooltip css part.\n|`headerIconTooltipCssPart` | {string} | Allows you to sets the header icon tooltip css part.\n|`filterButtonTooltipCssPart` | {string} | Allows you to sets the filter button tooltip css part.\n|`cellSelectedCssPart` | {string} | Allows customization of a selected cell's background color.\n|`editor` | {object} | Adds an editor to the column if editable is set on the grid. See editing section for more details.\n\n## Column Settings (Specific)\n\n|Setting|Type|Description|\n|---|---|---|\n|`href` | {string|Function} | Used to create the href for hyperlink formatters. This can be a string or a function that can work dynamically. It can also replace `{{value}}` with the current value. |\n|`text` | {string} | Used to create the txt value for hyperlink formatters if a hard coded link text is needed. |\n|`disabled` | {boolean|Function} | Sets the cell contents to disabled, can also use a callback to determine this dynamically. Only checkboxes, radios, buttons and link columns can be disabled at this time. Selection columns require disabled rows in order to not be clickable/selectable. |\n|`uppercase` | {boolean} | Allows you to set the text as uppercase. |\n\n## Formatters\n\n|Formatter|Description|\n|---|---|\n|`text` | (Default) Formats the column value as a direct text element using toString in the grid cell. Undefined or Null values will be shown as empty.|\n|`password` | Formats the column value masking the string length with stars. Undefined or Null values will be shown as empty. This is good for private data. |\n|`rowNumber` | Formats the cell with a row number column that is shown 1 to n no matter what the sort order is. |\n|`date` | Formats date data as a date string in the desired format, by default it will use `dateStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`time` | Formats date data as a time string in the desired format, by default it will use `timeStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`decimal` | Formats number data as a decimal string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`integer` | Formats number data as a integer string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`selectionCheckbox` | Displays a checkbox column for selection when using `rowSelection=\"mixed\"` or `rowSelection=\"multiple\"`|\n|`selectionRadio` | Displays a checkbox column for selection when using `rowSelection=\"single\"` |\n| `button` | Displays an `ids-button`. Other column settings like `type` can be used to set the button type as can `icon` by set for icon only buttons. Use the `click` setting/function to get an callback handler. |\n| `hyperlink` | Displays an `ids-hyperlink`. Other column settings like `href` can be used to set the link href and `text` can be used to set the text to specific text. Use the `click` setting/function to get an callback handler. |\n| `checkbox` | Displays an `ids-checkbox`. The value will be checked depending on if the attached field is true or `\"true\"`. |\n| `badge` | Displays an `ids-badge`. The associated field will be placed in the badge. The `color` option can also be set to set the ids-badge color setting. |\n| `alert` | Displays `ids-alert` element, and the field value will appear in a tooltip. An `icon` option can be provided as an override.|\n| `color` | Displays `ids-color` element. If a `color` option is provided as an override, the field's value will appear in a tooltip. |\n| `icon` | Displays the field value as an `ids-icon`. An `icon` option can be provided as an override, and the field value will appear beside this `icon` override. A `size` option can also be provided. |\n| `favorite` | Displays the field value as a `star-filled` if true or `star-outlined` if false. A `size` option can be provided as an override. |\n| `tag` | Displays the field value as an `ids-tag`. A `color` option can be provided as an override. |\n| `progress` | Displays the field value as an `ids-progress`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `rating` | Displays the field value as an `ids-rating`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `slider` | Displays the field value as an `ids-slider`. A `text` option can be provided to customize the label. A `color`, `max`, `min` and `type` option can be provided as overrides. |\n| `stepChart` | Displays the field value as an `ids-step-chart`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `image` | Displays the field value as an `ids-image`. A `text` option can be provided to the `alt` and `title` attributes. |\n\n### Deprecated Formatters (Deprecated from 4.x)\n\n- `Input` No longer suggested to use, use simple list instead or a Text Formatter.\n- `Status, Color` No longer used, but badges can be used.\n- `Placeholder` Can now be set on the column and used with other formatters\n- `Ellipsis` Is now always enabled.\n- `Readonly` Can now be set on the column and used with other formatters\n- `Drilldown` Use button formatter with an icon.\n- `Template` is now deprecated for performance reasons, use a custom formatter now.\n- `ClassRange` Use column cssClass function or string\n- `Autocomplete, Lookup, TargetedAchievement, ProcessIndicator, Spinbox, Fileupload, Dropdown, Colorpicker, Tree, SummaryRow, GroupFooterRow, GroupRow, Expander, Editor, Textarea, Actions, RowReorder` May be added later\n\n## Custom Formatters\n\nIt is possible to create your own custom formatter. The idea behind the formatter is it takes the cell value and does processing on it to return the correct markup for the cell. The simplest custom formatter would be this example.\n\n```js\ncolumns.push({\n  id: 'custom',\n  name: 'Custom',\n  field: 'price',\n  formatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n    const value = `Custom: ${rowData[columnData.field] || '0'}`;\n    return `<span class=\"text-ellipsis\">${value}</span>`;\n  }\n});\n```\n\nTo style a custom formatter you may need to add a css part for the element. For example:\n\n```js\nformatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n  const value = `${rowData[columnData.field] || ''}`;\n  return `<a part=\"custom-link\" href=\"#\" class=\"text-ellipsis\">${escapeHTML(value)}</a>`;\n},\n```\n\nThen in the style sheet you add for you page you put the styles.\n\n```css\nids-data-grid::part(custom-link) {\n  color: #da1217;\n}\n\nids-data-grid::part(custom-link):hover {\n  color: #6c080b;\n}\n```\n\nThe formatter is then linked via the column on the formatter setting. When the grid cell is rendered the formatter function is called and the following arguments are passed in.\n\n- `rowData` The current row's data from the data array.\n- `columnData` The column object with all of the column configuration for this cell.\n\n## Events\n\n- `activecellchanged` Fires when the active cell changes with the keyboard or by click.\n- `sorted` Fires when the sort column is changed.\n- `selectionchanged` Fires any time the selection changes.\n- `activationchanged` Fires any time the active row changes.\n- `rowselected` Fires for each row that is selected.\n- `rowdeselected` Fires for each row that is deselected.\n- `rowactivated` Fires for each row that is activated.\n- `rowdeactivated` Fires for each row that is deactivated.\n- `rowclick` Fires for each row that is clicked.\n- `dblclick` Fires each time double clicked on body cells or header cells. Based on where it clicked details can be capture like `type: 'body-cell'|'header-title'|'header-filter'` etc.\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n- `columnresized` Fires when a column is resized or setColumnWidth is called.\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto\n- `rowExpanded` Fires when a tree or expandable row is expanded or collapsed\n- `rowCollapsed` Fires when a tree or expandable row is expanded or collapsed\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called.\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto.\n- `beforemenushow` Fires before context menu show, you can return false in the response to veto.\n- `menushow` Fires after context menu show.\n- `menuselected` Fires after context menu item selected.\n- `settingschanged` Fires after settings are changed in some way.\n- `scrollstart` Fires when data-grid reaches the topmost row.\n- `scrollend` Fires when data-grid reaches the bottommost row.\n- `afterrendered` Fires after rendered the data grid.\n\n## Methods\n\n- `setColumnWidth` Can be used to set the width of a column.\n- `setColumnVisibility` Can be used to set the visibility of a column.\n- `setActivateCell(cell, row)` Can be used to set focus of a cell.\n- `selectedRows` Lists the indexes of the currently selected rows.\n- `saveSetting(setting: string)` Save the given setting to local storage.\n- `saveAllSettings` Save all user settings to local storage.\n- `savedSetting(setting: string)` Get saved given setting value from local storage.\n- `allSavedSettings` Get saved all user settings from local storage.\n- `clearSetting(setting: string, key?: string)` Clear the given saved setting from local storage.\n- `clearAllSettings(userKeys: unknown)` Clear saved all user settings from local storage.\n- `restoreSetting(setting: string, value?: unknown)` Restore the given saved setting from local storage.\n- `editFirstCell` Puts the first cell on the active row into edit mode.\n- `appendData(data: Record<string, unknown>)` Use this to add more data to the datagrid's existing dataset.  This will automatically render additional rows in the datagrid.\n- `addRow(data: Record<string, unknown>, index?: number)` Adds a new row at optional row index and defaults the values to all those provided in the data\n- `addRows(data: Array<Record<string, unknown>>, index?: number)` Adds multiple new rows at optional row index and defaults the values to all those provided in the data\n- `removeRow(index: number)` Removed the provided row index from the dataset and visual datagrid\n- `clearRow(index: number)` Clears all values on the given row.\n- `commitCellEdit` Stops editing and commits the value in the active editor.\n- `cancelCellEdit` Stops editing and reverts the value in the active editor.\n- `resetDirtyCells` Clears all dirty cell indicators.\n- `dirtyCells` Gives a list of all currently dirty cells.\n- `exportToExcel(format: 'csv' | 'xlsx', filename: string, keepGridFormatting: boolean)` Export datagrid datasource to an excel file. This keeps grid formatting by default.\n- `collapseAll()` Collapse all expandable or tree rows.\n- `expandAll()` Expand all expandable or tree rows.\n- `toggleAll(opt: boolean)` Toggle collapse/expand all expandable or tree rows. `opt false`: will expand all, `opt: true`: will collapse all\n- `refreshRow` IdsDataGridRow method to refresh row element and its cells.\n- `refreshCell` IdsDataGridCell method to refresh cell element.\n- `updateDataset(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row.\n- `updateDatasetAndRefresh(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row and refreshes row/cells UI.\n\n## Filters\n\nData rows can be filter based on one or several criteria. Whole filter row can turned on/off by the api setting `filterable` and can be disabled by the api setting `filter-row-disabled`. The filter conditions can be applied thru the UI or programmatically. Each column can have its own filter type and turn on/off by columns setting.\n\n### Filter Columns Setting\n\nAll the filter settings can be passed thru columns data.\n\n|Setting|Type|Description|\n|---|---|---|\n|`filterType` | Function | Data grid built-in filter method, see the dedicated section below. |\n|`filterConditions` | Array | List of items to be use as operators in menu-button or options in dropdown. |\n|`filterFunction` | Function | User defined filter method, it must return a boolean. |\n|`filterOptions` | Object | Setting for components are in use, for example: `label, placeholder, disabled`. |\n|`isChecked` | Function | User defined filter method, it must return a boolean. This method use along built-in `checkbox` only, when filter data value is not boolean type. |\n\n### Built-in Filter Methods\n\n|Method|Description|\n|---|---|\n|`text` | It filter as text comparison. Contains input and menu-button with list of default operators. |\n|`integer` | It filter as integer comparison. Contains input and menu-button with list of default operators. |\n|`decimal` | It filter as decimal comparison. Contains input and menu-button with list of default operators. |\n|`contents` | It filter as text comparison. Contains dropdown and auto generate list of items based on column data. |\n|`dropdown` | It filter as text comparison. Contains dropdown and must pass list of item by setting `filterConditions`. |\n|`checkbox` | It filter as boolean comparison. Contains menu-button with list of default operators. |\n|`date` | It filter as date comparison. Contains date-picker and menu-button with list of default operators. |\n|`time` | It filter as time comparison. Contains time-picker and menu-button with list of default operators. |\n\n### Custom Filter\n\nIf the built-in filters are not enough, creating a custom filter is an option. There are two parts you can create both parts custom or mix-match with built-in.\n\n1. `UI Only` In order to do custom UI part of filter, add as html markup thru a slot. It must use slot and column-id attributes for example: `<div slot=\"filter-n\" column-id=\"n\">...</div>` where n is the columnId same passed in the columns.\n1. `filterFunction` This is a user defined filter method which must return a boolean. It determines if a cell value should be considered as a valid filtered value.\n1. `disableClientFilter` This is an api setting to disable filter logic client side. It will set filter conditions and fire an event `filtered` which can listen for custom logic.\n\n### Filter Code Examples\n\nBasic text filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nNo filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"false\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisabled filter row, will disabled all attached filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\" filter-row-disabled=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nHyperlink, integer, decimal, date and time filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'hyperlink',\n  name: 'Hyperlink',\n  field: 'description',\n  href: '#',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.hyperlink\n});\ncolumns.push({\n  id: 'integer',\n  name: 'Integer',\n  field: 'price',\n  filterType: dataGrid.filters.integer,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'decimal',\n  name: 'Decimal',\n  field: 'price',\n  filterType: dataGrid.filters.decimal,\n  formatter: dataGrid.formatters.decimal,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'date',\n  name: 'Date',\n  field: 'publishDate',\n  filterType: dataGrid.filters.date,\n  formatter: dataGrid.formatters.date\n});\ncolumns.push({\n  id: 'time',\n  name: 'Time',\n  field: 'publishDate',\n  filterType: dataGrid.filters.time,\n  formatter: dataGrid.formatters.time\n});\n```\n\nSome filter options label, placeholder, disabled.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterOptions: {\n    label: 'Label text for description input',\n    placeholder: 'Placeholder text for description input',\n    disabled: true\n  }\n});\n```\n\nCustom operators items for menu-button.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterConditions: [{\n    value: 'contains',\n    label: 'Contains',\n    icon: 'filter-contains'\n  },\n  {\n    value: 'equals',\n    label: 'Equals',\n    icon: 'filter-equals',\n    selected: true\n  }]\n});\n```\n\nContents and dropdown type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'location',\n  name: 'Location',\n  field: 'location',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.contents,\n  filterOptions: {\n    notFilteredItem: { value: 'not-filtered', label: 'Not Filtered' }\n  }\n});\ncolumns.push({\n  id: 'useForEmployee',\n  name: 'NotFilterdItem (shown as blank)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\ncolumns.push({\n  id: 'useForEmployeeCustomNotFilterdItem',\n  name: 'NotFilterdItem (show as custom text)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'not-filtered', label: 'Not Filtered' },\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\n```\n\nCheckbox type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'checkbox',\n  name: 'Checkbox',\n  field: 'inStock',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox\n});\ncolumns.push({\n  id: 'customCheckMethod',\n  name: 'Custom check method',\n  field: 'active',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox,\n  isChecked: (value) => value === 'Yes'\n});\n```\n\nCustom filter method.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\n// Custom filter checking\nconst myCustomFilter = (opt) => {\n  const { operator, columnId, value } = opt.condition;\n  const val = {\n    condition: Number.parseInt(value, 10),\n    data: Number.parseInt(opt.data[columnId], 10)\n  };\n  let isMatch = false;\n  if (Number.isNaN(val.condition) || Number.isNaN(val.data)) return isMatch;\n\n  if (operator === 'equals') isMatch = (val.data === val.condition);\n  if (operator === 'greater-than') isMatch = (val.data > val.condition);\n  if (operator === 'greater-equals') isMatch = (val.data >= val.condition);\n  if (operator === 'less-than') isMatch = (val.data < val.condition);\n  if (operator === 'less-equals') isMatch = (val.data <= val.condition);\n\n  return isMatch;\n};\n\nconst columns = [];\ncolumns.push({\n  id: 'customFilterMethod',\n  name: 'Custom Filter Method',\n  field: 'price',\n  filterFunction: myCustomFilter,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\n```\n\nCustom filter UI part.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n  <div slot=\"filter-description\" column-id=\"description\">\n    <ids-menu-button id=\"btn-filter-description\" icon=\"filter-greater-equals\" menu=\"menu-filter-description\" dropdown-icon>\n      <span class=\"audible\">Greater Than Or Equals</span>\n    </ids-menu-button>\n    <ids-popup-menu id=\"menu-filter-description\" target=\"#btn-filter-description\">\n      <ids-menu-group select=\"single\">\n        <ids-menu-item value=\"equals\" icon=\"filter-equals\">Equals</ids-menu-item>\n        <ids-menu-item value=\"greater-than\" icon=\"filter-greater-than\">Greater Than</ids-menu-item>\n        <ids-menu-item value=\"greater-equals\" icon=\"filter-greater-equals\" selected=\"true\">Greater Than Or Equals</ids-menu-item>\n        <ids-menu-item value=\"less-than\" icon=\"filter-less-than\">Less Than</ids-menu-item>\n        <ids-menu-item value=\"less-equals\" icon=\"filter-less-equals\">Less Than Or Equals</ids-menu-item>\n      </ids-menu-group>\n    </ids-popup-menu>\n    <ids-input id=\"input-filter-description\" type=\"text\" size=\"full\" placeholder=\"Slotted description\" label=\"Slotted description input\">\n    </ids-input>\n  </div>\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisable client filter\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" disable-client-filter=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n\ndataGrid.addEventListener('filtered', (e: any) => {\n  console.info('filtered:', e.detail);\n});\n```\n\n### Filter rows programmatically\n\n```js\n// Filter rows\nconst conditions = [{ columnId: 'description', operator: 'contains', value: '5' }];\ndataGrid.applyFilter(conditions);\n\n// Reset all filters\ndataGrid.applyFilter([]);\n```\n\n### Filter Events\n\nThe following events are relevant to data-grid filters.\n\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n\n## Custom cell colors\n\nIn some cases, it may be desirable to customize the background color of cells.  This can be done with the `cssPart` column setting:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell'\n});\n```\n\nThe `cssPart` property is translated into a `part` attribute that is applied to every cell in the column.  In the event the color needs to be conditional based on the row index or other logic, a function can be used:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2')\n  // ...\n});\n```\n\nAfter this is defined, accompanying CSS can be written to target the parts `custom-cell`, `custom-cell-1`, and `custom-cell-2` to change background color or other CSS properties of the cell:\n\n```css\nids-data-grid::part(cell) {\n  background-color: #ebf9f1;\n}\n\nids-data-grid::part(cell-selected) {\n  background-color: #c9dad0;\n}\n```\n\n### Changing selected cell colors\n\nAnother column setting, `cellSelectedCssPart` can be used alongside `cssPart` to customize the selected color of the row in a similar way.  When using `mixed` selection, this color is also applied to activated rows:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell',\n  cellSelectedCssPart: 'custom-cell-selected'\n});\n```\n\nThis column setting can also be a function, just like `cssPart`:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2'),\n  cellSelectedCssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-selected-1' : 'custom-cell-selected-2')\n  // ...\n});\n```\n\n## Tooltip Code Examples\n\nSet suppress tooltips to turn off.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" suppress-tooltips>\n</ids-data-grid>\n```\n\nSet custom tooltip strings.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: 'This is a product Id',\n  headerTooltip: 'This is the product Id header title',\n  headerIconTooltip: 'This is product Id header icon',\n  filterButtonTooltip: 'This is the product Id filterButton'\n});\n```\n\nSet tooltip as callback.\n\n```js\nconst tooltipCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return `Text: ${text}<br/>Header Row: ${rowIndex}, Cell: ${columnIndex}`;\n  } else if (type === 'filter-button') {\n    return `Text: ${text}<br/>FilterButton Row: ${rowIndex}, Cell: ${columnIndex}`;\n  }\n  return `Text: ${text}<br/>for Row: ${rowIndex}, Cell: ${columnIndex}`;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: tooltipCallback\n});\n```\n\nSet tooltip custom options.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: {\n    placement: 'top',\n    headerPlacement: 'top',\n    headerIconPlacement: 'top',\n    filterButtonPlacement: 'bottom',\n    x: 0,\n    y: 10,\n    headerX: 0,\n    headerIconX: 0,\n    headerY: 10,\n    headerIconY: 10,\n    filterButtonX: 0,\n    filterButtonY: 22\n  }\n});\n```\n\nSet tooltip options as callback.\n\n```js\nconst tooltipOptionsCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return { headerPlacement: 'top', headerX: 0, headerY: 10 };\n  } else if (type === 'header-icon') {\n    return { headerIconPlacement: 'top', headerIconX: 0, headerIconY: 10 };\n  } else if (type === 'filter-button') {\n    return { filterButtonPlacement: 'bottom', filterButtonX: 0, filterButtonY: 22 };\n  }\n  return { placement: 'top', x: 0, y: 10 };\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: tooltipOptionsCallback\n});\n```\n\nSet tooltip custom css.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: 'custom-turquoise',\n  headerTooltipCssPart: 'custom-turquoise',\n  headerIconTooltipCssPart: 'custom-turquoise',\n  filterButtonTooltipCssPart: 'custom-turquoise'\n});\n```\n```css\n/* tooltip css part `custom-turquoise` */\nids-data-grid::part(custom-turquoise-tooltip-arrow-top)::after {\n  border-top-color: #2f8d8e;\n}\nids-data-grid::part(custom-turquoise-tooltip-popup) {\n  background-color: #2f8d8e;\n}\n```\n\nSet tooltip custom css as callback.\n\n```js\nconst tooltipCssPartCallback = (args: { type: string }): string => {\n  const { type } = args;\n  let cssPart = '';\n  // Set random css part each time, for `body-cell` tooltips\n  if (type === 'body-cell') {\n    const parts = ['azure', 'ruby'];\n    const randomIndex = Math.floor(Math.random() * parts.length);\n    cssPart = parts[randomIndex];\n  }\n  return cssPart;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: tooltipCssPartCallback\n});\n```\n```css\n/* tooltip css part `azure` */\nids-data-grid::part(azure-tooltip-arrow-top)::after {\n  border-top-color: #0066d4;\n}\nids-data-grid::part(azure-tooltip-popup) {\n  background-color: #0066d4;\n}\n\n/* tooltip css part `ruby` */\nids-data-grid::part(ruby-tooltip-arrow-top)::after {\n  border-top-color: #c31014;\n}\nids-data-grid::part(ruby-tooltip-popup) {\n  background-color: #c31014;\n}\n```\n\n## context menu Code Examples\n\nThe context menus can be set via the dataset.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n</ids-data-grid>\n```\n```js\n// Dataset for header cells context menu\nconst headerMenuData = {\n  id: 'grid-header-context menu',\n  contents: [{\n    id: 'header-actions-group',\n    items: [\n      { id: 'actions-split', value: 'actions-split', text: 'Split' },\n      { id: 'actions-sort', value: 'actions-sort', text: 'Sort' },\n    ]\n  }],\n};\n\n// Dataset for body cells context menu\nconst menuData = {\n  id: 'grid-context menu',\n  contents: [{\n    id: 'actions-group',\n    items: [\n      { id: 'item-1', value: 'item-1', text: 'Item One' },\n      { id: 'item-2', value: 'item-2', text: 'Item Two' },\n      { id: 'item-3', value: 'item-3', text: 'Item Three' }\n    ]\n  }],\n};\n\n// Set context menu data with data-grid\ndataGrid.menuData = menuData;\ndataGrid.headerMenuData = headerMenuData;\n\n// Set to return true/false in the response to veto before context menu show.\ndataGrid.addEventListener('beforemenushow', (e: any) => {\n  console.info('before context menu show', e.detail);\n  // e.detail.response(false);\n});\n\n// Set to watch after context menu show.\ndataGrid.addEventListener('menushow', (e: any) => {\n  console.info('After context menu show', e.detail);\n});\n\n// Set to watch after context menu item selected.\ndataGrid.addEventListener('menuselected', (e: any) => {\n  console.info('context menu item selected', e.detail);\n});\n```\n\nSet context menu thru Slot.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n  <!-- context menu header cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"header-context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n      <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n  <!-- context menu body cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n      <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n      <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n      <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n</ids-data-grid>\n```\n\nSet context menu thru ID.\n\n```html\n<ids-data-grid\n  header-menu-id=\"grid-header-context menu\"\n  menu-id=\"grid-context menu\"\n  id=\"data-grid-1\"\n  label=\"Books\"\n></ids-data-grid>\n\n<!-- context menu header cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-header-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n    <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n\n<!-- context menu body cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n    <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n    <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n    <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n```\n\n## Empty Message\n\nSet empty message thru slot (markup).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-slot\" label=\"Books\">\n  <ids-empty-message hidden icon=\"empty-search-data-new\" slot=\"empty-message\">\n    <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">No Data</ids-text>\n    <ids-text hidden label=\"true\" slot=\"description\">There is no data available.</ids-text>\n  </ids-empty-message>\n</ids-data-grid>\n```\n\nSet empty message thru settings (markup).\n\n```html\n<ids-data-grid\n  id=\"data-grid-em-thru-settings\"\n  label=\"Books\"\n  empty-message-icon=\"empty-error-loading-new\"\n  empty-message-label=\"No Data\"\n  empty-message-description=\"There is no data available.\"\n></ids-data-grid>\n```\n\nSet empty message thru settings (javascript).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-settings-js\" label=\"Books\">\n</ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-em-thru-settings-js');\ndataGrid.emptyMessageIcon = 'empty-error-loading-new';\ndataGrid.emptyMessageLabel = 'No Data';\ndataGrid.emptyMessageDescription = 'There is no data available.';\n```\n\n## Row Height\n\nAs mentioned in the settings section you can change the row height by setting the rowHeight option.\n\n```html\n     <ids-data-grid id=\"data-grid-row-height\" row-height=\"md\"></ids-data-grid>\n```\n\nIts worth mentioning the characteristics and usage for each one.\n\nLarge (`row-height=\"lg\"`) - Row Height is 50. The default row height, header is 16px and body cells are 16px. 16px padding on cells and header. You should use this most of the time if there is plenty of room on the UI and to avoid the UI looking crowded.\nMedium (`row-height=\"md\"`) - Row Height is 40. Header is 16px and body cells are 16px. 12px padding on cells and header. If you need to see a few more rows but still want to avoid a crowded UI, this is the next best option.\nSmall (`row-height=\"sm\"`) - Row Height is 35. Header is 16px and body cells are 16px. 8px padding on cells and header. This is the smallest option that is recommended for readability and spacing.\nExtra Small (`row-height=\"xs\"`) - Row Height is 30. Header is 14px and body cells are 14px. 8px padding on cells and header. If you need a very compressed data grid with a lot of data you can use this option. But there is a trade off of bad readability and spacing.\nExtra Extra Small (`row-height=\"xxs\"`) - Row Height is 25. Header is 14px and body cells are 14px. 2px padding on cells and header. Avoid this option as it is very crowded but it is included for edge cases.\n\n## States and Variations\n\n**Rows**\n- Hover\n- Selected\n- Disabled\n- Readonly\n- Activated\n\n**Columns**\n- Focus\n- Hover\n- Sorted\n- Selected\n- Disabled\n- Filtered\n\n**Cells**\n- Hover (sometimes a cursor change)\n- Readonly\n- Focus\n- Checked/Not Checked (Checkboxes)\n\n## Keyboard Guidelines\n\n- <kbd>Tab</kbd>The initial tab enters the grid with focus on the first cell of the first row, often a header. A second tab moves out of the grid to the next tab stop on the page. Once focus is established in the grid, a TAB into or a Shift Tab into the grid will return to the cell which last had focus. If in edit mode will finish editing and start editing the next cell.\n- <kbd>Shift + Tab</kbd> Moves the reverse of tab. If in edit mode will finish editing and start editing the previous cell.\n- <kbd>Left</kbd> and <kbd>Right</kbd> Move focus to the adjacent column's cell. There is no wrap at the end or beginning of columns.\n- <kbd>Up</kbd> and <kbd>Down</kbd> Move focus to the adjacent row's cell. There is no wrap at the first or last row.\n- <kbd>Home</kbd> moves focus to the first cell of the current row\n- <kbd>End</kbd> moves focus to the last cell of the current row\n- <kbd>Page Up</kbd> moves focus to the first cell in the current column\n- <kbd>Page Down</kbd> moves focus to the last cell in the current column\n- <kbd>Space</kbd> Toggles selection the activate row. If suppressRowDeselection is set it will be ignored on deselect. If the cell contains an expandable element then the row will toggle the expanded state. If the cell contains a checkbox editor, will toggle the checkbox state.\n- <kbd>F2</kbd> toggles actionable mode. Pressing the <kbd>Tab</kbd> key while in actionable mode moves focus to the next actionable cell. While in actionable mode you can do things like type + enter. This will move you down a row when you hit enter. If the cell has a control that uses down arrow (like the drop downs or lookups that are editable). Then the user needs to hit enter to enable the edit mode on that cell.\n- <kbd>Triple Click</kbd> Not a keyboard shortcut, but if you have text in a cell that is overflowed a triple click will select all the text even the part that is invisible.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Enter</kbd> Activates edit mode on the cell if it is editable. There is also an \"auto edit detection\". If the user starts typing then edit mode will happen automatically without enter. If in edit mode already <kbd>Enter</kbd> will finish edit mode. If `editNextOnEnterPress` is enabled then editing will start on the same column in next row.\n- <kbd>Shift + Enter</kbd> Same as enter but if `editNextOnEnterPress` is enabled then editing will start on the same column in previous row.\n- <kbd>F2</kbd> Finish editing same as Enter. But if `editNextOnEnterPress` is enabled, will stay in same cell. `cancelEditMode` will fire.\n- <kbd>CMD/CTRL + Enter</kbd> Finish editing same as Enter.\n- <kbd>ESC</kbd> Revert to the previous value and cancel editing. `cancelEditMode` will fire.\n\n## Responsive Guidelines\n\n- By default, data grid grows depending on the amount of contents within and will scroll if necessary under the header. It stops growing when it reaches the size of the parent container.\n- `autoFit` property or `auto-fit` attribute can be set manually to make the data grid size fill and be responsive to the size of the screen, regardless of the amount of contents.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Counts have all new markup and classes.\n\n**4.x to 5.x**\n- Data grid has all new markup and a custom element but some similarly named options\n- Still uses same columns and data set options. Some column options enhanced and changed.\n- If using events events are now plain JS events for example: sorted, rendered\n- Some Api Functions have changed\n- If using properties/settings these are now attributes or as plain properties for example: data, virtual-scroll\n- Markup has changed to a custom element `<ids-data-grid></ids-data-grid>`\n- Can now be imported as a single JS file and used with encapsulated styles\n- `Drill Down` Formatter is now covered by `Button` formatter with `icon=\"drilldown\"`\n- `textOverflow` setting is now by default\n- `rowNavigation` setting has replaced `cellNavigation`. Cell navigation is the default behavior.\n- `stretchColumn` is now more flexible and can be achieved by setting a column width to `minmax(130px, 4fr)`. I.E. some min width and a `fr` unit equal to the remaining number of columns (or similar variations).\n- split columns are not supported anymore but could be done with a custom formatter if needed\n- `frozenColumns` setting is now set on each column by adding `frozen: 'left'` or `frozen: 'right'` to the column definition.\n- Some events are renamed see the events section for more details, also the signature of the events has changed.\n- Custom formatter functions can now be any type of function and have a different signature.\n- The `expanded` column option for tree was renamed to `rowExpanded`.\n- The `expandrow/collapserow` events are renamed to `rowexpanded/rowcollapsed`\n- The `beforeentereditmode/entereditmode/exiteditmode` event is renamed to `beforecelledit/celledit/endcelledit/cancelcelledit`\n- The `actionablemode` feature has been replaced with simply tabbing to the next editable field when in edit mode.\n\n## Accessibility Guidelines\n\n1.1.1 Non-text Content - All images, links and icons have text labels for screen readers when the formatters are used.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and links and images of text has a contrast ratio of at least 4.5:1.\n- 2.1.1 Keyboard - Make all functionality available from a keyboard. The grid has keyboard shortcuts and is usable with a screen reader due to the addition of aria tags.\n- A datagrid in general including this one uses the following aria tags\n  - `aria-label` labels the enter table on the main table\n  - `aria-rowcount` lists the visible row count on the main table\n  - `aria-colindex` the index of each column on the column elements\n  - `aria-rwindex` the index of each row on the row elements\n  - `aria-setsize` for tree grid lists the number of elements in each level (group)\n  - `aria-level` the level of indentation\n  - `aria-posinset` the depth into each set\n  - `aria-expanded` on the row it indicates if the row is expanded (for tree and expandable row)\n  - `aria-sort` indicates the sort direction on the sortable columns\n  - `aria-checked` indicates if the element is checked on checkbox columns and headers\n\n## Regional Considerations\n\nTitles and labels should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n\n## Code Separation (For Developers)\n\nThe code is divided into several files. Here is a description of where everything is.\n\n- `ids-data-grid-cell.ts` creates a non-shadow root `ids-data-grid-cell`, and handles its own selection, and activation.\n- `ids-data-grid-cell.scss` contains all css related to `.ids-data-grid-cell` and its children\n- `ids-data-grid-contextmenu.ts` contains code in the form of export functions, that adds ability to get right click menus on headers and cells\n- `ids-data-grid-filter.scss` contains all css related to the filter row and its children\n- `ids-data-grid-filter.ts` contains code to implement the filtering functionality and its ui (some functions are in ids-data-source)\n- `ids-data-grid-formatters.ts` contains all formatter functions and some supporting code like data extraction\n- `ids-data-grid-header.ts` contains most header functionality, the header template, and code related to header actions like sort, reorder and selection.\n- `ids-data-grid-header.scss` contains all css related to `.ids-data-grid-header` and its children\n- `ids-data-grid-row.ts` contains most row functionality, the row template, and code related to row actions like expand, collapse, select, activate\n- `ids-data-grid-row.scss` contains all css related to `.ids-data-grid-row` and its children\n- `ids-data-grid-tooltip-mixin.js` contains a tooltip mixin that adds tooltip functionality to cells and headers, its different from `ids-tooltip-mixin` (more specific)\n- `ids-data-grid.js` contains all main data grid code, the api and settings and the main generator loop for the data grid\n"}},{"name":"ids-data-grid-formatters","attributes":[],"description":{"kind":"markdown","value":"# Ids Data Grid\n\n## Description\n\nThe data grid component (ids-data-grid) is used to arrange tabular data in rows and columns for easier scanning and comparison. Data grids are very configurable in both design and functionality and they can be found within almost every product/app.\n\nYou should pass an array of objects in to the grid on the `dataset` object. Also pass the `columns` array which contains the column configuration. There are a number of events described in the events and API section, as well as the column settings.\n\nA Read-Only data grid uses \"Formatters\" to render cell content. A number of these are listed in the API section and it is possible to create your own.\n\n## Use Cases\n\n- The data grid component is most useful when it is used for categorically sorting dense and repetitive information. Each individual item is listed down the Y axis of the chart, and their shared attribute categories are listed along the X axis. The resulting cells are filled with information that is relevant to the corresponding item and attribute.\n\n## Terminology\n\n- **Title**: The name of the data grid optionally appearing above the grid and describing the contents.\n- **Options**: An optionally actions menu button with functionality that operates on the entire data grid.\n- **Cell**: Body elements of the data grid that contain an object's value or attribute. Cells should only contain one type of content or it can be confusing and hurt accessibility.\n- **Header Cell**: These cells contain the names of the columns in the grid and related functions like filtering and sorting. All cells below the header cell will hold values related to the attribute in the header cell.\n- **Column**: Cells stacked vertically that contain values relate to the attribute found on the top header cell.\n- **Row**: Each row contains one cell per column in the data grid, and each cell displays a single value in the bound data item.\n- **Tree**: Denotes the use of hierarchical data, with an expandable and collapsible hierarchy.\n\n## Themeable Parts\n\n- `table` allows you to further style the table main element\n- `container` allows you to further style the container element\n- `body` allows you to further style the body element\n- `header` allows you to further style the header element\n- `headerCell` allows you to further style the header cells\n- `row` allows you to further style the rows\n- `cell` allows you to further style the row cells\n- `cell-selected` allows you to further style row cells that are selected (in mixed-selection mode, activated cells are also styled)\n- `tooltip-popup` allows you to further style or adjust the outer tooltip popup element\n- `tooltip-arrow` allows you to adjust the tooltip arrow element\n\n## Features (With Code Examples)\n\nA data grid is created by adding an `ids-data-grid` html element in the page and setting the options either inline in the markup or in the JS part of the code. You can only use simple types (string, boolean ect) for inline markup so passing the data and column arrangement is always done in the JS part. The data will be an array of objects so its in the correct tabular form. The columns are also an array of objects but with defined options and types. See more about columns in next section.\n\n```html\n<ids-data-grid id=\"data-grid-1\"></ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-1');\ndataGrid.data = dataset;\ndataGrid.columns = columns;\n```\n\n### Column Groups\n\nSetting column groups allows you to add a second level of columns in your header and the ability to group the first level. This is useful for when you have a large number of columns and you want to group them into logical or related sections.\n\nColumn groups are achieved by providing an array to the `columnGroups` setting. Only one level of column groups can be defined.\n\n```js\ndataGrid.columnGroups = [\n{\n  colspan: 3,\n  id: 'group1',\n  name: 'Column Group One',\n  align: 'center'\n},\n{\n  colspan: 2,\n  id: 'group2',\n  name: 'Column Group Two'\n},\n{\n  colspan: 2,\n  id: 'group3',\n  name: 'Column Group Three',\n  align: 'right'\n},\n{\n  colspan: 11,\n  id: 'group4',\n  name: 'Column Group Four',\n  align: 'left'\n}\n];\n```\n\nIf the column is hidden it will be automatically removed from the `colspan`. If in the last group you didn't provided a bug enough `colspan` it will be set to the remaining columns. The `name` text can be right or left aligned and given an id. The only required property is `colspan`.\n\n### Selection\n\nThe data grid selection feature involves the setting `rowSelection`. This can be one of several values.\n\n- `false` No selection enabled.\n- `multiple` Allows multiple rows to be selected. When doing this it is recommended to add a `formatters.selectionCheckbox` for the first column.\n- `single` Allows a single row to be selected. When doing this you can optionally to add a `formatters.selectionRadio` for the first column. You can use the `suppressRowDeselection` if you want one row to always be selected.\n- `mixed` Allows multiple rows to be selected by clicking only on the checkbox or <kbd>Space</kbd> key. If clicking a row then that row is activated, meaning it is the current row and something might be shown based on the data of that row. You can use the `suppressRowDeactivation` if you want one row to always be selected.\n\nHere is a code example for multi select\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" row-selection=\"multiple\">\n</ids-data-grid>\n```\n\n```js\n  dataGrid.addEventListener('rowselected', (e) => {\n    console.info(`Row Selected`, e.detail);\n  });\n\n  dataGrid.addEventListener('rowdeselected', (e) => {\n    console.info(`Row Deselected`, e.detail);\n  });\n\n  dataGrid.addEventListener('selectionchanged', (e) => {\n    console.info(`Selection Changed`, e.detail);\n  });\n```\n\nThe following events are relevant to selection/activation.\n\n`rowselected` Fires when an individual row is activation and gives information about that row.\n`rowdeselected` Fires when an individual row is deselected and gives information about that row.\n`selectionchanged` Fires once for each time selection changes and gives information about all selected rows.\n\n`rowactivated` Fires when an individual row is activated and gives information about that row.\n`rowdeactivated` Fires when an individual row is deactivated and gives information about that row.\n`activationchanged` Fires once for each time activation changes and gives information about the active row.\n\n### Tree Grid\n\nThe tree grid feature involves the setting `treeGrid` to true. In addition the data passed to the tree grid should contain a field called `children`. That contains the child rows. This can by unlimited levels but 2-4 is recommended as a max for a more usable UI. In addition you can preset some states by adding `rowExpanded: false` to the parent elements (default is expanded). And also set `rowHidden: false` for child rows that are expanded. You also need a `Expander` formatter on a cell (usually the first visible cell.\n\nHere is a code example for a tree grid.\n\n```html\n<ids-data-grid id=\"tree-grid\" label=\"Buildings\" tree-grid=\"true\" group-selects-children=\"true\"></ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to selection/activation.\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `groupSelectsChildren` {boolean} If the tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `suppressRowClickSelection` {boolean} If using selection you might want to set this so clicking a row will not select it.\n### Expandable Row\n\nThe Expandable Row feature involves the setting `expandableRow` to true. In addition a row template should be provided via an id that points to the `expandableRowTemplate` which is a `template` element. You can preset the expandable state by adding `rowExpanded: true` to the row element you want to expand. The default is collapsed.\n\nHere is a code example for an expandable row\n\n```html\n<ids-data-grid\n    id=\"data-grid-expandable-row\"\n    expandable-row=\"true\"\n    expandable-row-template=\"expandable-row-tmpl\"\n    label=\"Books\">\n    <template id=\"expandable-row-tmpl\">\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"16\" type=\"span\">${convention}</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">${price} USD</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">Lorem Ipsum is simply sample text of the printing and typesetting industry. Lorem Ipsum has been the industry standard sample text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only...</ids-text>\n        </ids-layout-grid>\n    </template>\n</ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to expandable rows\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRowTemplate` {string} Should point to the row `template` element.\n\n### Editing\n\nThe Editing features start by setting `editable` to true. In addition you should add editors to columns and enable features of each of the editors. The features differ depending on the component used for editing. See the Keyboard section for information on which keys can be used when editing..\n\nHere is a code example for an editable text cell.\n\n```js\ncolumns.push({\n    id: 'description',\n    name: 'Description',\n    field: 'description',\n    sortable: true,\n    resizable: true,\n    reorderable: true,\n    formatter: dataGrid.formatters.text,\n    editor: {\n      type: 'input',\n      inline: true,\n      editorSettings: {\n        autoselect: true,\n        dirtyTracker: true\n      }\n    }\n  });\n```\n\nHere is a code example for an editable dropdown cell\n\n```js\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  resizable: true,\n  reorderable: true,\n  formatter: dataGrid.formatters.dropdown,\n  editor: {\n    type: 'dropdown',\n    editorSettings: {\n      dirtyTracker: true,\n      validate: 'required',\n      options: [\n        {\n          label: 'Option 1',\n          value: 'opt1'\n        },\n        {\n          label: 'Option 2',\n          value: 'opt2'\n        }\n      ]\n    }\n  }\n});\n```\n\nTo cancel or disabled editing there are a few ways:\n\n- setting the column `editor` setting to undefined will disable editing on the column (as will not having an editor setting at all).\n- adding a `readonly` or `disabled` function which returned true for some cells based on a condition will disable or mark the cell readonly.\n- return false in the `beforecelledit` event in the response function\n\nThe following settings are available on editors.\n\n`type` As of now can be `checkbox`, `input`, `datepicker`, `timepicker`, or `dropdown` but more will be added.\n`inline` Default is false. If true the editor (for example an input) will be visible in a field.\n`editorSettings` Is an object that is loosely typed that lets you pass any option the editor supports in. For example any of the IdsInput or IdsCheckbox options can be passing in. Some special ones are:\n`editorSettings.autoselect` Text will be selected when entering edit mode\n`editorSettings.dirtyTracker` Enables the dirty tracker that marks changed cells.\n`editorSettings.validate` Text will be selected when entering edit mode\n`editorSettings.mask` Will pass mask settings to the input (if supported).\n`editorSettings.maskOptions` Will pass maskOptions settings to the input (if supported).\n`editorSettings.options` Dataset used for dropdown editor's list box options.\n\nWhen the use clicks in the cell or activates editing with the keyboard with the Enter key and types. The following events will fire.\n\n`beforecelledit` Fires before a cell is being edit (before edit is started). Can be vetoed by returning false as shown below.\n`celledit` Fires exactly when a cell is being edited.\n`endcelledit` Fires when a cell edit is completed and changed.\n`cancelcelledit` Fires when an edit is cancelled via the <kbd>Esc</kbd> key.\n\nTo cancel editing based on some condition or if editing is not allowed you can veto the `beforecelledit` event.\n\n```js\n  dataGrid.addEventListener('beforecelledit', (e: Event) => {\n    (<CustomEvent>e).detail.response(false);\n  });\n```\n\nThere are a few utility functions for editing the data grid mentioned in the Methods section.\n\n## Settings and Attributes\n\nWhen used as an attribute in the DOM the settings are kebab case, when used in JS they are camel case.\n\n- `virtualScroll` {boolean} When virtual scroll is used the grid can render many thousands of rows and only the rows visible in the scroll area are rendered for performance. This setting has limitations such as the rows need to be fixed size.\n- `addNewAtEnd` {boolean} Automatically append rows while keyboard navigating data grid in edit mode.\n- `alternateRowShading` {boolean} For better scan-ability you can shade alternate rows.\n- `listStyle` {boolean} Sets the style of the grid to list style for simple readonly lists.\n- `columns` {Array<object>} Sets the columns array of the data grid. See column settings.\n- `columnGroups` {Array<object>} Allows you to group columns together in logical sets. See section below for details.\n- `rowHeight` {string | `'xxs'` | `'xs'` | `'sm'` | `'md'` | `'lg'`} Sets the height and padding of each row. In smaller row heights the font is lowered.\n- `data` {Array<object>} Sets the data to show in the data grid. This can be a JSON Array.\n- `disableClientFilter` {boolean} Disables the filter logic client side in situations you want to filter server side.\n- `filterable` {boolean} Turns on or off the filter functionality.\n- `filterRowDisabled` {boolean} Disables the filter row.\n- `headerMenuData` {Array<object>} Dataset to build context menu for header and header group cells.\n- `headerMenuId` {string} ID of the popupmenu to use as context menu for header and header group cells.\n- `menuData` {Array<object>} Dataset to build context menu for body cells.\n- `menuId` {string} ID of the popupmenu to use as context menu for body cells.\n- `rowNavigation` {boolean} If using row navigation, the row will be focused when navigating the data grid via clicks and keyboard events.\n- `rowSelection` {string|boolean} Set the row selection mode between false, 'single', 'multiple' and 'mixed\n- `suppressRowClickSelection` {boolean} If using selection setting this will require clicking a checkbox or radio to select the row. Clicking other cells will not select the row.\n- `suppressRowDeactivation` {boolean} Set to true to prevent rows from being deactivated if clicked. i.e. once a row is activated, it remains activated until another row is activated in its place.\n- `suppressRowDeselection`  {boolean} Set to true to prevent rows from being deselected if click or space bar the row. i.e. once a row is selected, it remains selected until another row is selected in its place.\n- `suppressTooltips`  {boolean} Set to true to prevent display tooltips.\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRow` {boolean} Indicates expandable rows will be used in the data grid.  See the expandable row section for more details.\n- `expandableRowTemplate` {string} Should point to the row `template` element for expandable rows.\n- `treeGrid` {boolean} Indicates a tree grid will be used  in the data grid. See the tree grid section for more details.\n- `showHeaderExpander` {boolean} Set to show header expander icon for expandable and tree rows.\n- `groupSelectsChildren` {boolean} If a tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `saveActivePage` {boolean} If set the active page on the pager will be saved to local storage.\n- `saveColumns` {boolean} If set columns will be saved to local storage.\n- `saveFilter` {boolean} If set filter will be saved to local storage.\n- `savePageSize` {boolean} If set the page size on the pager will be saved to local storage.\n- `saveRowHeight` {boolean} If set the row height will be saved to local storage.\n- `saveSortOrder` {boolean} If set column sort order will be saved to local storage.\n- `saveUserSettings` {boolean} If set all settings will be saved to local storage.\n- `emptyMessageDescription` {string} Set empty message description text.\n- `emptyMessageIcon` {string} Set empty message icon name.\n- `emptyMessageLabel` {string} Set empty message label text.\n- `suppressEmptyMessage` {boolean} Set to true to prevent display empty message.\n- `editable` {boolean} If true in addition to adding editors to columns the data grid is editable.\n- `editNextOnEnterPress` {boolean} If enabled when editing using <kbd>ENTER</kbd> will finish editing and start editing the same cell in next row and <kbd>SHIFT + ENTER</kbd> will edit the previous row.\n\n## Column Settings (General)\n\n|Setting|Type|Description|\n|---|---|---|\n|`id` | {string} | The unique id of the column. Each column in the grid should have some unique id.|\n|`name` | {string} | The text to show on the header.|\n|`field` | {string} | The name of the field (column) in the data array attached to the grid for example `description`. This can also be nested in an object for example `children.name`. |\n|`sortable` | {boolean} | If false, the column cannot be sorted. When completed a `sorted` event will fire.|\n|`resizable` | {boolean} | If false the column will not be resizable, thus is a fixed size and can never be changed by the user by dragging the left and right edge.  When completed a `columnresized` event will fire. See the `columns-resizable` example for a working example. |\n|`reorderable` | {boolean} | If true the column can be dragged into another position with adjacent columns. When completed a `columnmoved` event will fire. See the `columns-reorderable` example for a working example. This currently does not work with grouped columns. |\n|`readonly` | {boolean or Function} | If true the cell will be set to readonly color, indicating no editing.|\n|`disabled` | {boolean or Function} | If true the cell will be set to disabled color, indicating no editing.|\n|`formatter`| {Function} | Controls how the data is rendered in the cell.|\n|`hidden` | {boolean} | Excludes the column from being added to the DOM.|\n|`align` | {string} | Can be `left` or `right` or `center` to align both the cell and the header. Left is the default so does not need to be specified. |\n|`headerAlign` | {string} | Can be `left` or `right` or `center` to align just the header. Left is the default so does not need to be specified. |\n|`minWidth` | {number} | The minimum width used to prevent resizing a column below this size. |\n|`maxWidth` | {number} | The maximum width used to prevent resizing a column above this size. |\n|`cssPart` | {string} | Allows you to set the name of a css part that can be used to customize the cell's css. This can be a string or a function. See the columns-custom-css example. The default cssPart for cells is called `cell` and it also can be used for more global changes.  |\n|`frozen` | {string} | Sets the column to be frozen on either left or right side by passing `left` or `right`. See the `columns-frozen` example for a working example. Frozen columns currently have some limitations to be addressed in the future. |<!--lint disable maximum-line-length definition-case-->\n|`width` | {number or string} | The column width, this can be an integer for fixed pixel width or a percent for example `10%`, if left off the columns will be sized to contents and to fit the width of the grid using the css table browsers handling (this is known as `auto` columns). I.E. There are three column configurations: `auto`, `fixed` and `percent`. <br /><br />In addition one can specify any css grid column setting like `fr` or `ch`. In order to make what was called a `stretchColumn` in previous versions you can set the width to`minmax(130px, 4fr)`. This is some minimum width and a `fr` unit equal to the remaining number of columns (see example columns-stretch.html). For a spacer column you just need to specify one extra column at the end (see example columns-fixed.html) but this is not recommended for how it looks. |<!--lint enable maximum-line-length definition-case-->\n|`headerIcon` | {string} | Allows you to set the name of the header icon. |\n|`tooltipOptions` | {Object or Function} | Allows you to set the tooltip options. See the tooltip example. |\n|`tooltip` | {string or Function} | Let you set the tooltip content. |\n|`headerTooltip` | {string} | Let you set the header title tooltip content. |\n|`headerIconTooltip` | {string} | Let you set the header icon tooltip content. |\n|`filterButtonTooltip` | {string} | Let you set the header filter button tooltip content. |\n|`tooltipCssPart` | {string or Function} | Allows you to set the name of a tooltip css part that can be used to customize the tooltip css. This can be a string or a function. See the columns-custom-css example.\n|`headerTooltipCssPart` | {string} | Allows you to sets the header tooltip css part.\n|`headerIconTooltipCssPart` | {string} | Allows you to sets the header icon tooltip css part.\n|`filterButtonTooltipCssPart` | {string} | Allows you to sets the filter button tooltip css part.\n|`cellSelectedCssPart` | {string} | Allows customization of a selected cell's background color.\n|`editor` | {object} | Adds an editor to the column if editable is set on the grid. See editing section for more details.\n\n## Column Settings (Specific)\n\n|Setting|Type|Description|\n|---|---|---|\n|`href` | {string|Function} | Used to create the href for hyperlink formatters. This can be a string or a function that can work dynamically. It can also replace `{{value}}` with the current value. |\n|`text` | {string} | Used to create the txt value for hyperlink formatters if a hard coded link text is needed. |\n|`disabled` | {boolean|Function} | Sets the cell contents to disabled, can also use a callback to determine this dynamically. Only checkboxes, radios, buttons and link columns can be disabled at this time. Selection columns require disabled rows in order to not be clickable/selectable. |\n|`uppercase` | {boolean} | Allows you to set the text as uppercase. |\n\n## Formatters\n\n|Formatter|Description|\n|---|---|\n|`text` | (Default) Formats the column value as a direct text element using toString in the grid cell. Undefined or Null values will be shown as empty.|\n|`password` | Formats the column value masking the string length with stars. Undefined or Null values will be shown as empty. This is good for private data. |\n|`rowNumber` | Formats the cell with a row number column that is shown 1 to n no matter what the sort order is. |\n|`date` | Formats date data as a date string in the desired format, by default it will use `dateStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`time` | Formats date data as a time string in the desired format, by default it will use `timeStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`decimal` | Formats number data as a decimal string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`integer` | Formats number data as a integer string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`selectionCheckbox` | Displays a checkbox column for selection when using `rowSelection=\"mixed\"` or `rowSelection=\"multiple\"`|\n|`selectionRadio` | Displays a checkbox column for selection when using `rowSelection=\"single\"` |\n| `button` | Displays an `ids-button`. Other column settings like `type` can be used to set the button type as can `icon` by set for icon only buttons. Use the `click` setting/function to get an callback handler. |\n| `hyperlink` | Displays an `ids-hyperlink`. Other column settings like `href` can be used to set the link href and `text` can be used to set the text to specific text. Use the `click` setting/function to get an callback handler. |\n| `checkbox` | Displays an `ids-checkbox`. The value will be checked depending on if the attached field is true or `\"true\"`. |\n| `badge` | Displays an `ids-badge`. The associated field will be placed in the badge. The `color` option can also be set to set the ids-badge color setting. |\n| `alert` | Displays `ids-alert` element, and the field value will appear in a tooltip. An `icon` option can be provided as an override.|\n| `color` | Displays `ids-color` element. If a `color` option is provided as an override, the field's value will appear in a tooltip. |\n| `icon` | Displays the field value as an `ids-icon`. An `icon` option can be provided as an override, and the field value will appear beside this `icon` override. A `size` option can also be provided. |\n| `favorite` | Displays the field value as a `star-filled` if true or `star-outlined` if false. A `size` option can be provided as an override. |\n| `tag` | Displays the field value as an `ids-tag`. A `color` option can be provided as an override. |\n| `progress` | Displays the field value as an `ids-progress`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `rating` | Displays the field value as an `ids-rating`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `slider` | Displays the field value as an `ids-slider`. A `text` option can be provided to customize the label. A `color`, `max`, `min` and `type` option can be provided as overrides. |\n| `stepChart` | Displays the field value as an `ids-step-chart`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `image` | Displays the field value as an `ids-image`. A `text` option can be provided to the `alt` and `title` attributes. |\n\n### Deprecated Formatters (Deprecated from 4.x)\n\n- `Input` No longer suggested to use, use simple list instead or a Text Formatter.\n- `Status, Color` No longer used, but badges can be used.\n- `Placeholder` Can now be set on the column and used with other formatters\n- `Ellipsis` Is now always enabled.\n- `Readonly` Can now be set on the column and used with other formatters\n- `Drilldown` Use button formatter with an icon.\n- `Template` is now deprecated for performance reasons, use a custom formatter now.\n- `ClassRange` Use column cssClass function or string\n- `Autocomplete, Lookup, TargetedAchievement, ProcessIndicator, Spinbox, Fileupload, Dropdown, Colorpicker, Tree, SummaryRow, GroupFooterRow, GroupRow, Expander, Editor, Textarea, Actions, RowReorder` May be added later\n\n## Custom Formatters\n\nIt is possible to create your own custom formatter. The idea behind the formatter is it takes the cell value and does processing on it to return the correct markup for the cell. The simplest custom formatter would be this example.\n\n```js\ncolumns.push({\n  id: 'custom',\n  name: 'Custom',\n  field: 'price',\n  formatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n    const value = `Custom: ${rowData[columnData.field] || '0'}`;\n    return `<span class=\"text-ellipsis\">${value}</span>`;\n  }\n});\n```\n\nTo style a custom formatter you may need to add a css part for the element. For example:\n\n```js\nformatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n  const value = `${rowData[columnData.field] || ''}`;\n  return `<a part=\"custom-link\" href=\"#\" class=\"text-ellipsis\">${escapeHTML(value)}</a>`;\n},\n```\n\nThen in the style sheet you add for you page you put the styles.\n\n```css\nids-data-grid::part(custom-link) {\n  color: #da1217;\n}\n\nids-data-grid::part(custom-link):hover {\n  color: #6c080b;\n}\n```\n\nThe formatter is then linked via the column on the formatter setting. When the grid cell is rendered the formatter function is called and the following arguments are passed in.\n\n- `rowData` The current row's data from the data array.\n- `columnData` The column object with all of the column configuration for this cell.\n\n## Events\n\n- `activecellchanged` Fires when the active cell changes with the keyboard or by click.\n- `sorted` Fires when the sort column is changed.\n- `selectionchanged` Fires any time the selection changes.\n- `activationchanged` Fires any time the active row changes.\n- `rowselected` Fires for each row that is selected.\n- `rowdeselected` Fires for each row that is deselected.\n- `rowactivated` Fires for each row that is activated.\n- `rowdeactivated` Fires for each row that is deactivated.\n- `rowclick` Fires for each row that is clicked.\n- `dblclick` Fires each time double clicked on body cells or header cells. Based on where it clicked details can be capture like `type: 'body-cell'|'header-title'|'header-filter'` etc.\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n- `columnresized` Fires when a column is resized or setColumnWidth is called.\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto\n- `rowExpanded` Fires when a tree or expandable row is expanded or collapsed\n- `rowCollapsed` Fires when a tree or expandable row is expanded or collapsed\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called.\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto.\n- `beforemenushow` Fires before context menu show, you can return false in the response to veto.\n- `menushow` Fires after context menu show.\n- `menuselected` Fires after context menu item selected.\n- `settingschanged` Fires after settings are changed in some way.\n- `scrollstart` Fires when data-grid reaches the topmost row.\n- `scrollend` Fires when data-grid reaches the bottommost row.\n- `afterrendered` Fires after rendered the data grid.\n\n## Methods\n\n- `setColumnWidth` Can be used to set the width of a column.\n- `setColumnVisibility` Can be used to set the visibility of a column.\n- `setActivateCell(cell, row)` Can be used to set focus of a cell.\n- `selectedRows` Lists the indexes of the currently selected rows.\n- `saveSetting(setting: string)` Save the given setting to local storage.\n- `saveAllSettings` Save all user settings to local storage.\n- `savedSetting(setting: string)` Get saved given setting value from local storage.\n- `allSavedSettings` Get saved all user settings from local storage.\n- `clearSetting(setting: string, key?: string)` Clear the given saved setting from local storage.\n- `clearAllSettings(userKeys: unknown)` Clear saved all user settings from local storage.\n- `restoreSetting(setting: string, value?: unknown)` Restore the given saved setting from local storage.\n- `editFirstCell` Puts the first cell on the active row into edit mode.\n- `appendData(data: Record<string, unknown>)` Use this to add more data to the datagrid's existing dataset.  This will automatically render additional rows in the datagrid.\n- `addRow(data: Record<string, unknown>, index?: number)` Adds a new row at optional row index and defaults the values to all those provided in the data\n- `addRows(data: Array<Record<string, unknown>>, index?: number)` Adds multiple new rows at optional row index and defaults the values to all those provided in the data\n- `removeRow(index: number)` Removed the provided row index from the dataset and visual datagrid\n- `clearRow(index: number)` Clears all values on the given row.\n- `commitCellEdit` Stops editing and commits the value in the active editor.\n- `cancelCellEdit` Stops editing and reverts the value in the active editor.\n- `resetDirtyCells` Clears all dirty cell indicators.\n- `dirtyCells` Gives a list of all currently dirty cells.\n- `exportToExcel(format: 'csv' | 'xlsx', filename: string, keepGridFormatting: boolean)` Export datagrid datasource to an excel file. This keeps grid formatting by default.\n- `collapseAll()` Collapse all expandable or tree rows.\n- `expandAll()` Expand all expandable or tree rows.\n- `toggleAll(opt: boolean)` Toggle collapse/expand all expandable or tree rows. `opt false`: will expand all, `opt: true`: will collapse all\n- `refreshRow` IdsDataGridRow method to refresh row element and its cells.\n- `refreshCell` IdsDataGridCell method to refresh cell element.\n- `updateDataset(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row.\n- `updateDatasetAndRefresh(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row and refreshes row/cells UI.\n\n## Filters\n\nData rows can be filter based on one or several criteria. Whole filter row can turned on/off by the api setting `filterable` and can be disabled by the api setting `filter-row-disabled`. The filter conditions can be applied thru the UI or programmatically. Each column can have its own filter type and turn on/off by columns setting.\n\n### Filter Columns Setting\n\nAll the filter settings can be passed thru columns data.\n\n|Setting|Type|Description|\n|---|---|---|\n|`filterType` | Function | Data grid built-in filter method, see the dedicated section below. |\n|`filterConditions` | Array | List of items to be use as operators in menu-button or options in dropdown. |\n|`filterFunction` | Function | User defined filter method, it must return a boolean. |\n|`filterOptions` | Object | Setting for components are in use, for example: `label, placeholder, disabled`. |\n|`isChecked` | Function | User defined filter method, it must return a boolean. This method use along built-in `checkbox` only, when filter data value is not boolean type. |\n\n### Built-in Filter Methods\n\n|Method|Description|\n|---|---|\n|`text` | It filter as text comparison. Contains input and menu-button with list of default operators. |\n|`integer` | It filter as integer comparison. Contains input and menu-button with list of default operators. |\n|`decimal` | It filter as decimal comparison. Contains input and menu-button with list of default operators. |\n|`contents` | It filter as text comparison. Contains dropdown and auto generate list of items based on column data. |\n|`dropdown` | It filter as text comparison. Contains dropdown and must pass list of item by setting `filterConditions`. |\n|`checkbox` | It filter as boolean comparison. Contains menu-button with list of default operators. |\n|`date` | It filter as date comparison. Contains date-picker and menu-button with list of default operators. |\n|`time` | It filter as time comparison. Contains time-picker and menu-button with list of default operators. |\n\n### Custom Filter\n\nIf the built-in filters are not enough, creating a custom filter is an option. There are two parts you can create both parts custom or mix-match with built-in.\n\n1. `UI Only` In order to do custom UI part of filter, add as html markup thru a slot. It must use slot and column-id attributes for example: `<div slot=\"filter-n\" column-id=\"n\">...</div>` where n is the columnId same passed in the columns.\n1. `filterFunction` This is a user defined filter method which must return a boolean. It determines if a cell value should be considered as a valid filtered value.\n1. `disableClientFilter` This is an api setting to disable filter logic client side. It will set filter conditions and fire an event `filtered` which can listen for custom logic.\n\n### Filter Code Examples\n\nBasic text filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nNo filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"false\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisabled filter row, will disabled all attached filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\" filter-row-disabled=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nHyperlink, integer, decimal, date and time filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'hyperlink',\n  name: 'Hyperlink',\n  field: 'description',\n  href: '#',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.hyperlink\n});\ncolumns.push({\n  id: 'integer',\n  name: 'Integer',\n  field: 'price',\n  filterType: dataGrid.filters.integer,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'decimal',\n  name: 'Decimal',\n  field: 'price',\n  filterType: dataGrid.filters.decimal,\n  formatter: dataGrid.formatters.decimal,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'date',\n  name: 'Date',\n  field: 'publishDate',\n  filterType: dataGrid.filters.date,\n  formatter: dataGrid.formatters.date\n});\ncolumns.push({\n  id: 'time',\n  name: 'Time',\n  field: 'publishDate',\n  filterType: dataGrid.filters.time,\n  formatter: dataGrid.formatters.time\n});\n```\n\nSome filter options label, placeholder, disabled.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterOptions: {\n    label: 'Label text for description input',\n    placeholder: 'Placeholder text for description input',\n    disabled: true\n  }\n});\n```\n\nCustom operators items for menu-button.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterConditions: [{\n    value: 'contains',\n    label: 'Contains',\n    icon: 'filter-contains'\n  },\n  {\n    value: 'equals',\n    label: 'Equals',\n    icon: 'filter-equals',\n    selected: true\n  }]\n});\n```\n\nContents and dropdown type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'location',\n  name: 'Location',\n  field: 'location',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.contents,\n  filterOptions: {\n    notFilteredItem: { value: 'not-filtered', label: 'Not Filtered' }\n  }\n});\ncolumns.push({\n  id: 'useForEmployee',\n  name: 'NotFilterdItem (shown as blank)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\ncolumns.push({\n  id: 'useForEmployeeCustomNotFilterdItem',\n  name: 'NotFilterdItem (show as custom text)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'not-filtered', label: 'Not Filtered' },\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\n```\n\nCheckbox type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'checkbox',\n  name: 'Checkbox',\n  field: 'inStock',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox\n});\ncolumns.push({\n  id: 'customCheckMethod',\n  name: 'Custom check method',\n  field: 'active',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox,\n  isChecked: (value) => value === 'Yes'\n});\n```\n\nCustom filter method.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\n// Custom filter checking\nconst myCustomFilter = (opt) => {\n  const { operator, columnId, value } = opt.condition;\n  const val = {\n    condition: Number.parseInt(value, 10),\n    data: Number.parseInt(opt.data[columnId], 10)\n  };\n  let isMatch = false;\n  if (Number.isNaN(val.condition) || Number.isNaN(val.data)) return isMatch;\n\n  if (operator === 'equals') isMatch = (val.data === val.condition);\n  if (operator === 'greater-than') isMatch = (val.data > val.condition);\n  if (operator === 'greater-equals') isMatch = (val.data >= val.condition);\n  if (operator === 'less-than') isMatch = (val.data < val.condition);\n  if (operator === 'less-equals') isMatch = (val.data <= val.condition);\n\n  return isMatch;\n};\n\nconst columns = [];\ncolumns.push({\n  id: 'customFilterMethod',\n  name: 'Custom Filter Method',\n  field: 'price',\n  filterFunction: myCustomFilter,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\n```\n\nCustom filter UI part.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n  <div slot=\"filter-description\" column-id=\"description\">\n    <ids-menu-button id=\"btn-filter-description\" icon=\"filter-greater-equals\" menu=\"menu-filter-description\" dropdown-icon>\n      <span class=\"audible\">Greater Than Or Equals</span>\n    </ids-menu-button>\n    <ids-popup-menu id=\"menu-filter-description\" target=\"#btn-filter-description\">\n      <ids-menu-group select=\"single\">\n        <ids-menu-item value=\"equals\" icon=\"filter-equals\">Equals</ids-menu-item>\n        <ids-menu-item value=\"greater-than\" icon=\"filter-greater-than\">Greater Than</ids-menu-item>\n        <ids-menu-item value=\"greater-equals\" icon=\"filter-greater-equals\" selected=\"true\">Greater Than Or Equals</ids-menu-item>\n        <ids-menu-item value=\"less-than\" icon=\"filter-less-than\">Less Than</ids-menu-item>\n        <ids-menu-item value=\"less-equals\" icon=\"filter-less-equals\">Less Than Or Equals</ids-menu-item>\n      </ids-menu-group>\n    </ids-popup-menu>\n    <ids-input id=\"input-filter-description\" type=\"text\" size=\"full\" placeholder=\"Slotted description\" label=\"Slotted description input\">\n    </ids-input>\n  </div>\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisable client filter\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" disable-client-filter=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n\ndataGrid.addEventListener('filtered', (e: any) => {\n  console.info('filtered:', e.detail);\n});\n```\n\n### Filter rows programmatically\n\n```js\n// Filter rows\nconst conditions = [{ columnId: 'description', operator: 'contains', value: '5' }];\ndataGrid.applyFilter(conditions);\n\n// Reset all filters\ndataGrid.applyFilter([]);\n```\n\n### Filter Events\n\nThe following events are relevant to data-grid filters.\n\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n\n## Custom cell colors\n\nIn some cases, it may be desirable to customize the background color of cells.  This can be done with the `cssPart` column setting:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell'\n});\n```\n\nThe `cssPart` property is translated into a `part` attribute that is applied to every cell in the column.  In the event the color needs to be conditional based on the row index or other logic, a function can be used:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2')\n  // ...\n});\n```\n\nAfter this is defined, accompanying CSS can be written to target the parts `custom-cell`, `custom-cell-1`, and `custom-cell-2` to change background color or other CSS properties of the cell:\n\n```css\nids-data-grid::part(cell) {\n  background-color: #ebf9f1;\n}\n\nids-data-grid::part(cell-selected) {\n  background-color: #c9dad0;\n}\n```\n\n### Changing selected cell colors\n\nAnother column setting, `cellSelectedCssPart` can be used alongside `cssPart` to customize the selected color of the row in a similar way.  When using `mixed` selection, this color is also applied to activated rows:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell',\n  cellSelectedCssPart: 'custom-cell-selected'\n});\n```\n\nThis column setting can also be a function, just like `cssPart`:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2'),\n  cellSelectedCssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-selected-1' : 'custom-cell-selected-2')\n  // ...\n});\n```\n\n## Tooltip Code Examples\n\nSet suppress tooltips to turn off.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" suppress-tooltips>\n</ids-data-grid>\n```\n\nSet custom tooltip strings.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: 'This is a product Id',\n  headerTooltip: 'This is the product Id header title',\n  headerIconTooltip: 'This is product Id header icon',\n  filterButtonTooltip: 'This is the product Id filterButton'\n});\n```\n\nSet tooltip as callback.\n\n```js\nconst tooltipCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return `Text: ${text}<br/>Header Row: ${rowIndex}, Cell: ${columnIndex}`;\n  } else if (type === 'filter-button') {\n    return `Text: ${text}<br/>FilterButton Row: ${rowIndex}, Cell: ${columnIndex}`;\n  }\n  return `Text: ${text}<br/>for Row: ${rowIndex}, Cell: ${columnIndex}`;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: tooltipCallback\n});\n```\n\nSet tooltip custom options.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: {\n    placement: 'top',\n    headerPlacement: 'top',\n    headerIconPlacement: 'top',\n    filterButtonPlacement: 'bottom',\n    x: 0,\n    y: 10,\n    headerX: 0,\n    headerIconX: 0,\n    headerY: 10,\n    headerIconY: 10,\n    filterButtonX: 0,\n    filterButtonY: 22\n  }\n});\n```\n\nSet tooltip options as callback.\n\n```js\nconst tooltipOptionsCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return { headerPlacement: 'top', headerX: 0, headerY: 10 };\n  } else if (type === 'header-icon') {\n    return { headerIconPlacement: 'top', headerIconX: 0, headerIconY: 10 };\n  } else if (type === 'filter-button') {\n    return { filterButtonPlacement: 'bottom', filterButtonX: 0, filterButtonY: 22 };\n  }\n  return { placement: 'top', x: 0, y: 10 };\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: tooltipOptionsCallback\n});\n```\n\nSet tooltip custom css.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: 'custom-turquoise',\n  headerTooltipCssPart: 'custom-turquoise',\n  headerIconTooltipCssPart: 'custom-turquoise',\n  filterButtonTooltipCssPart: 'custom-turquoise'\n});\n```\n```css\n/* tooltip css part `custom-turquoise` */\nids-data-grid::part(custom-turquoise-tooltip-arrow-top)::after {\n  border-top-color: #2f8d8e;\n}\nids-data-grid::part(custom-turquoise-tooltip-popup) {\n  background-color: #2f8d8e;\n}\n```\n\nSet tooltip custom css as callback.\n\n```js\nconst tooltipCssPartCallback = (args: { type: string }): string => {\n  const { type } = args;\n  let cssPart = '';\n  // Set random css part each time, for `body-cell` tooltips\n  if (type === 'body-cell') {\n    const parts = ['azure', 'ruby'];\n    const randomIndex = Math.floor(Math.random() * parts.length);\n    cssPart = parts[randomIndex];\n  }\n  return cssPart;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: tooltipCssPartCallback\n});\n```\n```css\n/* tooltip css part `azure` */\nids-data-grid::part(azure-tooltip-arrow-top)::after {\n  border-top-color: #0066d4;\n}\nids-data-grid::part(azure-tooltip-popup) {\n  background-color: #0066d4;\n}\n\n/* tooltip css part `ruby` */\nids-data-grid::part(ruby-tooltip-arrow-top)::after {\n  border-top-color: #c31014;\n}\nids-data-grid::part(ruby-tooltip-popup) {\n  background-color: #c31014;\n}\n```\n\n## context menu Code Examples\n\nThe context menus can be set via the dataset.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n</ids-data-grid>\n```\n```js\n// Dataset for header cells context menu\nconst headerMenuData = {\n  id: 'grid-header-context menu',\n  contents: [{\n    id: 'header-actions-group',\n    items: [\n      { id: 'actions-split', value: 'actions-split', text: 'Split' },\n      { id: 'actions-sort', value: 'actions-sort', text: 'Sort' },\n    ]\n  }],\n};\n\n// Dataset for body cells context menu\nconst menuData = {\n  id: 'grid-context menu',\n  contents: [{\n    id: 'actions-group',\n    items: [\n      { id: 'item-1', value: 'item-1', text: 'Item One' },\n      { id: 'item-2', value: 'item-2', text: 'Item Two' },\n      { id: 'item-3', value: 'item-3', text: 'Item Three' }\n    ]\n  }],\n};\n\n// Set context menu data with data-grid\ndataGrid.menuData = menuData;\ndataGrid.headerMenuData = headerMenuData;\n\n// Set to return true/false in the response to veto before context menu show.\ndataGrid.addEventListener('beforemenushow', (e: any) => {\n  console.info('before context menu show', e.detail);\n  // e.detail.response(false);\n});\n\n// Set to watch after context menu show.\ndataGrid.addEventListener('menushow', (e: any) => {\n  console.info('After context menu show', e.detail);\n});\n\n// Set to watch after context menu item selected.\ndataGrid.addEventListener('menuselected', (e: any) => {\n  console.info('context menu item selected', e.detail);\n});\n```\n\nSet context menu thru Slot.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n  <!-- context menu header cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"header-context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n      <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n  <!-- context menu body cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n      <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n      <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n      <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n</ids-data-grid>\n```\n\nSet context menu thru ID.\n\n```html\n<ids-data-grid\n  header-menu-id=\"grid-header-context menu\"\n  menu-id=\"grid-context menu\"\n  id=\"data-grid-1\"\n  label=\"Books\"\n></ids-data-grid>\n\n<!-- context menu header cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-header-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n    <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n\n<!-- context menu body cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n    <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n    <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n    <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n```\n\n## Empty Message\n\nSet empty message thru slot (markup).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-slot\" label=\"Books\">\n  <ids-empty-message hidden icon=\"empty-search-data-new\" slot=\"empty-message\">\n    <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">No Data</ids-text>\n    <ids-text hidden label=\"true\" slot=\"description\">There is no data available.</ids-text>\n  </ids-empty-message>\n</ids-data-grid>\n```\n\nSet empty message thru settings (markup).\n\n```html\n<ids-data-grid\n  id=\"data-grid-em-thru-settings\"\n  label=\"Books\"\n  empty-message-icon=\"empty-error-loading-new\"\n  empty-message-label=\"No Data\"\n  empty-message-description=\"There is no data available.\"\n></ids-data-grid>\n```\n\nSet empty message thru settings (javascript).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-settings-js\" label=\"Books\">\n</ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-em-thru-settings-js');\ndataGrid.emptyMessageIcon = 'empty-error-loading-new';\ndataGrid.emptyMessageLabel = 'No Data';\ndataGrid.emptyMessageDescription = 'There is no data available.';\n```\n\n## Row Height\n\nAs mentioned in the settings section you can change the row height by setting the rowHeight option.\n\n```html\n     <ids-data-grid id=\"data-grid-row-height\" row-height=\"md\"></ids-data-grid>\n```\n\nIts worth mentioning the characteristics and usage for each one.\n\nLarge (`row-height=\"lg\"`) - Row Height is 50. The default row height, header is 16px and body cells are 16px. 16px padding on cells and header. You should use this most of the time if there is plenty of room on the UI and to avoid the UI looking crowded.\nMedium (`row-height=\"md\"`) - Row Height is 40. Header is 16px and body cells are 16px. 12px padding on cells and header. If you need to see a few more rows but still want to avoid a crowded UI, this is the next best option.\nSmall (`row-height=\"sm\"`) - Row Height is 35. Header is 16px and body cells are 16px. 8px padding on cells and header. This is the smallest option that is recommended for readability and spacing.\nExtra Small (`row-height=\"xs\"`) - Row Height is 30. Header is 14px and body cells are 14px. 8px padding on cells and header. If you need a very compressed data grid with a lot of data you can use this option. But there is a trade off of bad readability and spacing.\nExtra Extra Small (`row-height=\"xxs\"`) - Row Height is 25. Header is 14px and body cells are 14px. 2px padding on cells and header. Avoid this option as it is very crowded but it is included for edge cases.\n\n## States and Variations\n\n**Rows**\n- Hover\n- Selected\n- Disabled\n- Readonly\n- Activated\n\n**Columns**\n- Focus\n- Hover\n- Sorted\n- Selected\n- Disabled\n- Filtered\n\n**Cells**\n- Hover (sometimes a cursor change)\n- Readonly\n- Focus\n- Checked/Not Checked (Checkboxes)\n\n## Keyboard Guidelines\n\n- <kbd>Tab</kbd>The initial tab enters the grid with focus on the first cell of the first row, often a header. A second tab moves out of the grid to the next tab stop on the page. Once focus is established in the grid, a TAB into or a Shift Tab into the grid will return to the cell which last had focus. If in edit mode will finish editing and start editing the next cell.\n- <kbd>Shift + Tab</kbd> Moves the reverse of tab. If in edit mode will finish editing and start editing the previous cell.\n- <kbd>Left</kbd> and <kbd>Right</kbd> Move focus to the adjacent column's cell. There is no wrap at the end or beginning of columns.\n- <kbd>Up</kbd> and <kbd>Down</kbd> Move focus to the adjacent row's cell. There is no wrap at the first or last row.\n- <kbd>Home</kbd> moves focus to the first cell of the current row\n- <kbd>End</kbd> moves focus to the last cell of the current row\n- <kbd>Page Up</kbd> moves focus to the first cell in the current column\n- <kbd>Page Down</kbd> moves focus to the last cell in the current column\n- <kbd>Space</kbd> Toggles selection the activate row. If suppressRowDeselection is set it will be ignored on deselect. If the cell contains an expandable element then the row will toggle the expanded state. If the cell contains a checkbox editor, will toggle the checkbox state.\n- <kbd>F2</kbd> toggles actionable mode. Pressing the <kbd>Tab</kbd> key while in actionable mode moves focus to the next actionable cell. While in actionable mode you can do things like type + enter. This will move you down a row when you hit enter. If the cell has a control that uses down arrow (like the drop downs or lookups that are editable). Then the user needs to hit enter to enable the edit mode on that cell.\n- <kbd>Triple Click</kbd> Not a keyboard shortcut, but if you have text in a cell that is overflowed a triple click will select all the text even the part that is invisible.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Enter</kbd> Activates edit mode on the cell if it is editable. There is also an \"auto edit detection\". If the user starts typing then edit mode will happen automatically without enter. If in edit mode already <kbd>Enter</kbd> will finish edit mode. If `editNextOnEnterPress` is enabled then editing will start on the same column in next row.\n- <kbd>Shift + Enter</kbd> Same as enter but if `editNextOnEnterPress` is enabled then editing will start on the same column in previous row.\n- <kbd>F2</kbd> Finish editing same as Enter. But if `editNextOnEnterPress` is enabled, will stay in same cell. `cancelEditMode` will fire.\n- <kbd>CMD/CTRL + Enter</kbd> Finish editing same as Enter.\n- <kbd>ESC</kbd> Revert to the previous value and cancel editing. `cancelEditMode` will fire.\n\n## Responsive Guidelines\n\n- By default, data grid grows depending on the amount of contents within and will scroll if necessary under the header. It stops growing when it reaches the size of the parent container.\n- `autoFit` property or `auto-fit` attribute can be set manually to make the data grid size fill and be responsive to the size of the screen, regardless of the amount of contents.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Counts have all new markup and classes.\n\n**4.x to 5.x**\n- Data grid has all new markup and a custom element but some similarly named options\n- Still uses same columns and data set options. Some column options enhanced and changed.\n- If using events events are now plain JS events for example: sorted, rendered\n- Some Api Functions have changed\n- If using properties/settings these are now attributes or as plain properties for example: data, virtual-scroll\n- Markup has changed to a custom element `<ids-data-grid></ids-data-grid>`\n- Can now be imported as a single JS file and used with encapsulated styles\n- `Drill Down` Formatter is now covered by `Button` formatter with `icon=\"drilldown\"`\n- `textOverflow` setting is now by default\n- `rowNavigation` setting has replaced `cellNavigation`. Cell navigation is the default behavior.\n- `stretchColumn` is now more flexible and can be achieved by setting a column width to `minmax(130px, 4fr)`. I.E. some min width and a `fr` unit equal to the remaining number of columns (or similar variations).\n- split columns are not supported anymore but could be done with a custom formatter if needed\n- `frozenColumns` setting is now set on each column by adding `frozen: 'left'` or `frozen: 'right'` to the column definition.\n- Some events are renamed see the events section for more details, also the signature of the events has changed.\n- Custom formatter functions can now be any type of function and have a different signature.\n- The `expanded` column option for tree was renamed to `rowExpanded`.\n- The `expandrow/collapserow` events are renamed to `rowexpanded/rowcollapsed`\n- The `beforeentereditmode/entereditmode/exiteditmode` event is renamed to `beforecelledit/celledit/endcelledit/cancelcelledit`\n- The `actionablemode` feature has been replaced with simply tabbing to the next editable field when in edit mode.\n\n## Accessibility Guidelines\n\n1.1.1 Non-text Content - All images, links and icons have text labels for screen readers when the formatters are used.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and links and images of text has a contrast ratio of at least 4.5:1.\n- 2.1.1 Keyboard - Make all functionality available from a keyboard. The grid has keyboard shortcuts and is usable with a screen reader due to the addition of aria tags.\n- A datagrid in general including this one uses the following aria tags\n  - `aria-label` labels the enter table on the main table\n  - `aria-rowcount` lists the visible row count on the main table\n  - `aria-colindex` the index of each column on the column elements\n  - `aria-rwindex` the index of each row on the row elements\n  - `aria-setsize` for tree grid lists the number of elements in each level (group)\n  - `aria-level` the level of indentation\n  - `aria-posinset` the depth into each set\n  - `aria-expanded` on the row it indicates if the row is expanded (for tree and expandable row)\n  - `aria-sort` indicates the sort direction on the sortable columns\n  - `aria-checked` indicates if the element is checked on checkbox columns and headers\n\n## Regional Considerations\n\nTitles and labels should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n\n## Code Separation (For Developers)\n\nThe code is divided into several files. Here is a description of where everything is.\n\n- `ids-data-grid-cell.ts` creates a non-shadow root `ids-data-grid-cell`, and handles its own selection, and activation.\n- `ids-data-grid-cell.scss` contains all css related to `.ids-data-grid-cell` and its children\n- `ids-data-grid-contextmenu.ts` contains code in the form of export functions, that adds ability to get right click menus on headers and cells\n- `ids-data-grid-filter.scss` contains all css related to the filter row and its children\n- `ids-data-grid-filter.ts` contains code to implement the filtering functionality and its ui (some functions are in ids-data-source)\n- `ids-data-grid-formatters.ts` contains all formatter functions and some supporting code like data extraction\n- `ids-data-grid-header.ts` contains most header functionality, the header template, and code related to header actions like sort, reorder and selection.\n- `ids-data-grid-header.scss` contains all css related to `.ids-data-grid-header` and its children\n- `ids-data-grid-row.ts` contains most row functionality, the row template, and code related to row actions like expand, collapse, select, activate\n- `ids-data-grid-row.scss` contains all css related to `.ids-data-grid-row` and its children\n- `ids-data-grid-tooltip-mixin.js` contains a tooltip mixin that adds tooltip functionality to cells and headers, its different from `ids-tooltip-mixin` (more specific)\n- `ids-data-grid.js` contains all main data grid code, the api and settings and the main generator loop for the data grid\n"}},{"name":"ids-data-grid-header","attributes":[{"name":"rootNode","values":[]},{"name":"headerCheckbox","values":[]},{"name":"isHeaderExpanderCollapsed","description":"Tracks the state of the header expander","values":[]},{"name":"dataGrid","description":"Reference to the data grid parent","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# Ids Data Grid\n\n## Description\n\nThe data grid component (ids-data-grid) is used to arrange tabular data in rows and columns for easier scanning and comparison. Data grids are very configurable in both design and functionality and they can be found within almost every product/app.\n\nYou should pass an array of objects in to the grid on the `dataset` object. Also pass the `columns` array which contains the column configuration. There are a number of events described in the events and API section, as well as the column settings.\n\nA Read-Only data grid uses \"Formatters\" to render cell content. A number of these are listed in the API section and it is possible to create your own.\n\n## Use Cases\n\n- The data grid component is most useful when it is used for categorically sorting dense and repetitive information. Each individual item is listed down the Y axis of the chart, and their shared attribute categories are listed along the X axis. The resulting cells are filled with information that is relevant to the corresponding item and attribute.\n\n## Terminology\n\n- **Title**: The name of the data grid optionally appearing above the grid and describing the contents.\n- **Options**: An optionally actions menu button with functionality that operates on the entire data grid.\n- **Cell**: Body elements of the data grid that contain an object's value or attribute. Cells should only contain one type of content or it can be confusing and hurt accessibility.\n- **Header Cell**: These cells contain the names of the columns in the grid and related functions like filtering and sorting. All cells below the header cell will hold values related to the attribute in the header cell.\n- **Column**: Cells stacked vertically that contain values relate to the attribute found on the top header cell.\n- **Row**: Each row contains one cell per column in the data grid, and each cell displays a single value in the bound data item.\n- **Tree**: Denotes the use of hierarchical data, with an expandable and collapsible hierarchy.\n\n## Themeable Parts\n\n- `table` allows you to further style the table main element\n- `container` allows you to further style the container element\n- `body` allows you to further style the body element\n- `header` allows you to further style the header element\n- `headerCell` allows you to further style the header cells\n- `row` allows you to further style the rows\n- `cell` allows you to further style the row cells\n- `cell-selected` allows you to further style row cells that are selected (in mixed-selection mode, activated cells are also styled)\n- `tooltip-popup` allows you to further style or adjust the outer tooltip popup element\n- `tooltip-arrow` allows you to adjust the tooltip arrow element\n\n## Features (With Code Examples)\n\nA data grid is created by adding an `ids-data-grid` html element in the page and setting the options either inline in the markup or in the JS part of the code. You can only use simple types (string, boolean ect) for inline markup so passing the data and column arrangement is always done in the JS part. The data will be an array of objects so its in the correct tabular form. The columns are also an array of objects but with defined options and types. See more about columns in next section.\n\n```html\n<ids-data-grid id=\"data-grid-1\"></ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-1');\ndataGrid.data = dataset;\ndataGrid.columns = columns;\n```\n\n### Column Groups\n\nSetting column groups allows you to add a second level of columns in your header and the ability to group the first level. This is useful for when you have a large number of columns and you want to group them into logical or related sections.\n\nColumn groups are achieved by providing an array to the `columnGroups` setting. Only one level of column groups can be defined.\n\n```js\ndataGrid.columnGroups = [\n{\n  colspan: 3,\n  id: 'group1',\n  name: 'Column Group One',\n  align: 'center'\n},\n{\n  colspan: 2,\n  id: 'group2',\n  name: 'Column Group Two'\n},\n{\n  colspan: 2,\n  id: 'group3',\n  name: 'Column Group Three',\n  align: 'right'\n},\n{\n  colspan: 11,\n  id: 'group4',\n  name: 'Column Group Four',\n  align: 'left'\n}\n];\n```\n\nIf the column is hidden it will be automatically removed from the `colspan`. If in the last group you didn't provided a bug enough `colspan` it will be set to the remaining columns. The `name` text can be right or left aligned and given an id. The only required property is `colspan`.\n\n### Selection\n\nThe data grid selection feature involves the setting `rowSelection`. This can be one of several values.\n\n- `false` No selection enabled.\n- `multiple` Allows multiple rows to be selected. When doing this it is recommended to add a `formatters.selectionCheckbox` for the first column.\n- `single` Allows a single row to be selected. When doing this you can optionally to add a `formatters.selectionRadio` for the first column. You can use the `suppressRowDeselection` if you want one row to always be selected.\n- `mixed` Allows multiple rows to be selected by clicking only on the checkbox or <kbd>Space</kbd> key. If clicking a row then that row is activated, meaning it is the current row and something might be shown based on the data of that row. You can use the `suppressRowDeactivation` if you want one row to always be selected.\n\nHere is a code example for multi select\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" row-selection=\"multiple\">\n</ids-data-grid>\n```\n\n```js\n  dataGrid.addEventListener('rowselected', (e) => {\n    console.info(`Row Selected`, e.detail);\n  });\n\n  dataGrid.addEventListener('rowdeselected', (e) => {\n    console.info(`Row Deselected`, e.detail);\n  });\n\n  dataGrid.addEventListener('selectionchanged', (e) => {\n    console.info(`Selection Changed`, e.detail);\n  });\n```\n\nThe following events are relevant to selection/activation.\n\n`rowselected` Fires when an individual row is activation and gives information about that row.\n`rowdeselected` Fires when an individual row is deselected and gives information about that row.\n`selectionchanged` Fires once for each time selection changes and gives information about all selected rows.\n\n`rowactivated` Fires when an individual row is activated and gives information about that row.\n`rowdeactivated` Fires when an individual row is deactivated and gives information about that row.\n`activationchanged` Fires once for each time activation changes and gives information about the active row.\n\n### Tree Grid\n\nThe tree grid feature involves the setting `treeGrid` to true. In addition the data passed to the tree grid should contain a field called `children`. That contains the child rows. This can by unlimited levels but 2-4 is recommended as a max for a more usable UI. In addition you can preset some states by adding `rowExpanded: false` to the parent elements (default is expanded). And also set `rowHidden: false` for child rows that are expanded. You also need a `Expander` formatter on a cell (usually the first visible cell.\n\nHere is a code example for a tree grid.\n\n```html\n<ids-data-grid id=\"tree-grid\" label=\"Buildings\" tree-grid=\"true\" group-selects-children=\"true\"></ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to selection/activation.\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `groupSelectsChildren` {boolean} If the tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `suppressRowClickSelection` {boolean} If using selection you might want to set this so clicking a row will not select it.\n### Expandable Row\n\nThe Expandable Row feature involves the setting `expandableRow` to true. In addition a row template should be provided via an id that points to the `expandableRowTemplate` which is a `template` element. You can preset the expandable state by adding `rowExpanded: true` to the row element you want to expand. The default is collapsed.\n\nHere is a code example for an expandable row\n\n```html\n<ids-data-grid\n    id=\"data-grid-expandable-row\"\n    expandable-row=\"true\"\n    expandable-row-template=\"expandable-row-tmpl\"\n    label=\"Books\">\n    <template id=\"expandable-row-tmpl\">\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"16\" type=\"span\">${convention}</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">${price} USD</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">Lorem Ipsum is simply sample text of the printing and typesetting industry. Lorem Ipsum has been the industry standard sample text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only...</ids-text>\n        </ids-layout-grid>\n    </template>\n</ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to expandable rows\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRowTemplate` {string} Should point to the row `template` element.\n\n### Editing\n\nThe Editing features start by setting `editable` to true. In addition you should add editors to columns and enable features of each of the editors. The features differ depending on the component used for editing. See the Keyboard section for information on which keys can be used when editing..\n\nHere is a code example for an editable text cell.\n\n```js\ncolumns.push({\n    id: 'description',\n    name: 'Description',\n    field: 'description',\n    sortable: true,\n    resizable: true,\n    reorderable: true,\n    formatter: dataGrid.formatters.text,\n    editor: {\n      type: 'input',\n      inline: true,\n      editorSettings: {\n        autoselect: true,\n        dirtyTracker: true\n      }\n    }\n  });\n```\n\nHere is a code example for an editable dropdown cell\n\n```js\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  resizable: true,\n  reorderable: true,\n  formatter: dataGrid.formatters.dropdown,\n  editor: {\n    type: 'dropdown',\n    editorSettings: {\n      dirtyTracker: true,\n      validate: 'required',\n      options: [\n        {\n          label: 'Option 1',\n          value: 'opt1'\n        },\n        {\n          label: 'Option 2',\n          value: 'opt2'\n        }\n      ]\n    }\n  }\n});\n```\n\nTo cancel or disabled editing there are a few ways:\n\n- setting the column `editor` setting to undefined will disable editing on the column (as will not having an editor setting at all).\n- adding a `readonly` or `disabled` function which returned true for some cells based on a condition will disable or mark the cell readonly.\n- return false in the `beforecelledit` event in the response function\n\nThe following settings are available on editors.\n\n`type` As of now can be `checkbox`, `input`, `datepicker`, `timepicker`, or `dropdown` but more will be added.\n`inline` Default is false. If true the editor (for example an input) will be visible in a field.\n`editorSettings` Is an object that is loosely typed that lets you pass any option the editor supports in. For example any of the IdsInput or IdsCheckbox options can be passing in. Some special ones are:\n`editorSettings.autoselect` Text will be selected when entering edit mode\n`editorSettings.dirtyTracker` Enables the dirty tracker that marks changed cells.\n`editorSettings.validate` Text will be selected when entering edit mode\n`editorSettings.mask` Will pass mask settings to the input (if supported).\n`editorSettings.maskOptions` Will pass maskOptions settings to the input (if supported).\n`editorSettings.options` Dataset used for dropdown editor's list box options.\n\nWhen the use clicks in the cell or activates editing with the keyboard with the Enter key and types. The following events will fire.\n\n`beforecelledit` Fires before a cell is being edit (before edit is started). Can be vetoed by returning false as shown below.\n`celledit` Fires exactly when a cell is being edited.\n`endcelledit` Fires when a cell edit is completed and changed.\n`cancelcelledit` Fires when an edit is cancelled via the <kbd>Esc</kbd> key.\n\nTo cancel editing based on some condition or if editing is not allowed you can veto the `beforecelledit` event.\n\n```js\n  dataGrid.addEventListener('beforecelledit', (e: Event) => {\n    (<CustomEvent>e).detail.response(false);\n  });\n```\n\nThere are a few utility functions for editing the data grid mentioned in the Methods section.\n\n## Settings and Attributes\n\nWhen used as an attribute in the DOM the settings are kebab case, when used in JS they are camel case.\n\n- `virtualScroll` {boolean} When virtual scroll is used the grid can render many thousands of rows and only the rows visible in the scroll area are rendered for performance. This setting has limitations such as the rows need to be fixed size.\n- `addNewAtEnd` {boolean} Automatically append rows while keyboard navigating data grid in edit mode.\n- `alternateRowShading` {boolean} For better scan-ability you can shade alternate rows.\n- `listStyle` {boolean} Sets the style of the grid to list style for simple readonly lists.\n- `columns` {Array<object>} Sets the columns array of the data grid. See column settings.\n- `columnGroups` {Array<object>} Allows you to group columns together in logical sets. See section below for details.\n- `rowHeight` {string | `'xxs'` | `'xs'` | `'sm'` | `'md'` | `'lg'`} Sets the height and padding of each row. In smaller row heights the font is lowered.\n- `data` {Array<object>} Sets the data to show in the data grid. This can be a JSON Array.\n- `disableClientFilter` {boolean} Disables the filter logic client side in situations you want to filter server side.\n- `filterable` {boolean} Turns on or off the filter functionality.\n- `filterRowDisabled` {boolean} Disables the filter row.\n- `headerMenuData` {Array<object>} Dataset to build context menu for header and header group cells.\n- `headerMenuId` {string} ID of the popupmenu to use as context menu for header and header group cells.\n- `menuData` {Array<object>} Dataset to build context menu for body cells.\n- `menuId` {string} ID of the popupmenu to use as context menu for body cells.\n- `rowNavigation` {boolean} If using row navigation, the row will be focused when navigating the data grid via clicks and keyboard events.\n- `rowSelection` {string|boolean} Set the row selection mode between false, 'single', 'multiple' and 'mixed\n- `suppressRowClickSelection` {boolean} If using selection setting this will require clicking a checkbox or radio to select the row. Clicking other cells will not select the row.\n- `suppressRowDeactivation` {boolean} Set to true to prevent rows from being deactivated if clicked. i.e. once a row is activated, it remains activated until another row is activated in its place.\n- `suppressRowDeselection`  {boolean} Set to true to prevent rows from being deselected if click or space bar the row. i.e. once a row is selected, it remains selected until another row is selected in its place.\n- `suppressTooltips`  {boolean} Set to true to prevent display tooltips.\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRow` {boolean} Indicates expandable rows will be used in the data grid.  See the expandable row section for more details.\n- `expandableRowTemplate` {string} Should point to the row `template` element for expandable rows.\n- `treeGrid` {boolean} Indicates a tree grid will be used  in the data grid. See the tree grid section for more details.\n- `showHeaderExpander` {boolean} Set to show header expander icon for expandable and tree rows.\n- `groupSelectsChildren` {boolean} If a tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `saveActivePage` {boolean} If set the active page on the pager will be saved to local storage.\n- `saveColumns` {boolean} If set columns will be saved to local storage.\n- `saveFilter` {boolean} If set filter will be saved to local storage.\n- `savePageSize` {boolean} If set the page size on the pager will be saved to local storage.\n- `saveRowHeight` {boolean} If set the row height will be saved to local storage.\n- `saveSortOrder` {boolean} If set column sort order will be saved to local storage.\n- `saveUserSettings` {boolean} If set all settings will be saved to local storage.\n- `emptyMessageDescription` {string} Set empty message description text.\n- `emptyMessageIcon` {string} Set empty message icon name.\n- `emptyMessageLabel` {string} Set empty message label text.\n- `suppressEmptyMessage` {boolean} Set to true to prevent display empty message.\n- `editable` {boolean} If true in addition to adding editors to columns the data grid is editable.\n- `editNextOnEnterPress` {boolean} If enabled when editing using <kbd>ENTER</kbd> will finish editing and start editing the same cell in next row and <kbd>SHIFT + ENTER</kbd> will edit the previous row.\n\n## Column Settings (General)\n\n|Setting|Type|Description|\n|---|---|---|\n|`id` | {string} | The unique id of the column. Each column in the grid should have some unique id.|\n|`name` | {string} | The text to show on the header.|\n|`field` | {string} | The name of the field (column) in the data array attached to the grid for example `description`. This can also be nested in an object for example `children.name`. |\n|`sortable` | {boolean} | If false, the column cannot be sorted. When completed a `sorted` event will fire.|\n|`resizable` | {boolean} | If false the column will not be resizable, thus is a fixed size and can never be changed by the user by dragging the left and right edge.  When completed a `columnresized` event will fire. See the `columns-resizable` example for a working example. |\n|`reorderable` | {boolean} | If true the column can be dragged into another position with adjacent columns. When completed a `columnmoved` event will fire. See the `columns-reorderable` example for a working example. This currently does not work with grouped columns. |\n|`readonly` | {boolean or Function} | If true the cell will be set to readonly color, indicating no editing.|\n|`disabled` | {boolean or Function} | If true the cell will be set to disabled color, indicating no editing.|\n|`formatter`| {Function} | Controls how the data is rendered in the cell.|\n|`hidden` | {boolean} | Excludes the column from being added to the DOM.|\n|`align` | {string} | Can be `left` or `right` or `center` to align both the cell and the header. Left is the default so does not need to be specified. |\n|`headerAlign` | {string} | Can be `left` or `right` or `center` to align just the header. Left is the default so does not need to be specified. |\n|`minWidth` | {number} | The minimum width used to prevent resizing a column below this size. |\n|`maxWidth` | {number} | The maximum width used to prevent resizing a column above this size. |\n|`cssPart` | {string} | Allows you to set the name of a css part that can be used to customize the cell's css. This can be a string or a function. See the columns-custom-css example. The default cssPart for cells is called `cell` and it also can be used for more global changes.  |\n|`frozen` | {string} | Sets the column to be frozen on either left or right side by passing `left` or `right`. See the `columns-frozen` example for a working example. Frozen columns currently have some limitations to be addressed in the future. |<!--lint disable maximum-line-length definition-case-->\n|`width` | {number or string} | The column width, this can be an integer for fixed pixel width or a percent for example `10%`, if left off the columns will be sized to contents and to fit the width of the grid using the css table browsers handling (this is known as `auto` columns). I.E. There are three column configurations: `auto`, `fixed` and `percent`. <br /><br />In addition one can specify any css grid column setting like `fr` or `ch`. In order to make what was called a `stretchColumn` in previous versions you can set the width to`minmax(130px, 4fr)`. This is some minimum width and a `fr` unit equal to the remaining number of columns (see example columns-stretch.html). For a spacer column you just need to specify one extra column at the end (see example columns-fixed.html) but this is not recommended for how it looks. |<!--lint enable maximum-line-length definition-case-->\n|`headerIcon` | {string} | Allows you to set the name of the header icon. |\n|`tooltipOptions` | {Object or Function} | Allows you to set the tooltip options. See the tooltip example. |\n|`tooltip` | {string or Function} | Let you set the tooltip content. |\n|`headerTooltip` | {string} | Let you set the header title tooltip content. |\n|`headerIconTooltip` | {string} | Let you set the header icon tooltip content. |\n|`filterButtonTooltip` | {string} | Let you set the header filter button tooltip content. |\n|`tooltipCssPart` | {string or Function} | Allows you to set the name of a tooltip css part that can be used to customize the tooltip css. This can be a string or a function. See the columns-custom-css example.\n|`headerTooltipCssPart` | {string} | Allows you to sets the header tooltip css part.\n|`headerIconTooltipCssPart` | {string} | Allows you to sets the header icon tooltip css part.\n|`filterButtonTooltipCssPart` | {string} | Allows you to sets the filter button tooltip css part.\n|`cellSelectedCssPart` | {string} | Allows customization of a selected cell's background color.\n|`editor` | {object} | Adds an editor to the column if editable is set on the grid. See editing section for more details.\n\n## Column Settings (Specific)\n\n|Setting|Type|Description|\n|---|---|---|\n|`href` | {string|Function} | Used to create the href for hyperlink formatters. This can be a string or a function that can work dynamically. It can also replace `{{value}}` with the current value. |\n|`text` | {string} | Used to create the txt value for hyperlink formatters if a hard coded link text is needed. |\n|`disabled` | {boolean|Function} | Sets the cell contents to disabled, can also use a callback to determine this dynamically. Only checkboxes, radios, buttons and link columns can be disabled at this time. Selection columns require disabled rows in order to not be clickable/selectable. |\n|`uppercase` | {boolean} | Allows you to set the text as uppercase. |\n\n## Formatters\n\n|Formatter|Description|\n|---|---|\n|`text` | (Default) Formats the column value as a direct text element using toString in the grid cell. Undefined or Null values will be shown as empty.|\n|`password` | Formats the column value masking the string length with stars. Undefined or Null values will be shown as empty. This is good for private data. |\n|`rowNumber` | Formats the cell with a row number column that is shown 1 to n no matter what the sort order is. |\n|`date` | Formats date data as a date string in the desired format, by default it will use `dateStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`time` | Formats date data as a time string in the desired format, by default it will use `timeStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`decimal` | Formats number data as a decimal string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`integer` | Formats number data as a integer string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`selectionCheckbox` | Displays a checkbox column for selection when using `rowSelection=\"mixed\"` or `rowSelection=\"multiple\"`|\n|`selectionRadio` | Displays a checkbox column for selection when using `rowSelection=\"single\"` |\n| `button` | Displays an `ids-button`. Other column settings like `type` can be used to set the button type as can `icon` by set for icon only buttons. Use the `click` setting/function to get an callback handler. |\n| `hyperlink` | Displays an `ids-hyperlink`. Other column settings like `href` can be used to set the link href and `text` can be used to set the text to specific text. Use the `click` setting/function to get an callback handler. |\n| `checkbox` | Displays an `ids-checkbox`. The value will be checked depending on if the attached field is true or `\"true\"`. |\n| `badge` | Displays an `ids-badge`. The associated field will be placed in the badge. The `color` option can also be set to set the ids-badge color setting. |\n| `alert` | Displays `ids-alert` element, and the field value will appear in a tooltip. An `icon` option can be provided as an override.|\n| `color` | Displays `ids-color` element. If a `color` option is provided as an override, the field's value will appear in a tooltip. |\n| `icon` | Displays the field value as an `ids-icon`. An `icon` option can be provided as an override, and the field value will appear beside this `icon` override. A `size` option can also be provided. |\n| `favorite` | Displays the field value as a `star-filled` if true or `star-outlined` if false. A `size` option can be provided as an override. |\n| `tag` | Displays the field value as an `ids-tag`. A `color` option can be provided as an override. |\n| `progress` | Displays the field value as an `ids-progress`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `rating` | Displays the field value as an `ids-rating`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `slider` | Displays the field value as an `ids-slider`. A `text` option can be provided to customize the label. A `color`, `max`, `min` and `type` option can be provided as overrides. |\n| `stepChart` | Displays the field value as an `ids-step-chart`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `image` | Displays the field value as an `ids-image`. A `text` option can be provided to the `alt` and `title` attributes. |\n\n### Deprecated Formatters (Deprecated from 4.x)\n\n- `Input` No longer suggested to use, use simple list instead or a Text Formatter.\n- `Status, Color` No longer used, but badges can be used.\n- `Placeholder` Can now be set on the column and used with other formatters\n- `Ellipsis` Is now always enabled.\n- `Readonly` Can now be set on the column and used with other formatters\n- `Drilldown` Use button formatter with an icon.\n- `Template` is now deprecated for performance reasons, use a custom formatter now.\n- `ClassRange` Use column cssClass function or string\n- `Autocomplete, Lookup, TargetedAchievement, ProcessIndicator, Spinbox, Fileupload, Dropdown, Colorpicker, Tree, SummaryRow, GroupFooterRow, GroupRow, Expander, Editor, Textarea, Actions, RowReorder` May be added later\n\n## Custom Formatters\n\nIt is possible to create your own custom formatter. The idea behind the formatter is it takes the cell value and does processing on it to return the correct markup for the cell. The simplest custom formatter would be this example.\n\n```js\ncolumns.push({\n  id: 'custom',\n  name: 'Custom',\n  field: 'price',\n  formatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n    const value = `Custom: ${rowData[columnData.field] || '0'}`;\n    return `<span class=\"text-ellipsis\">${value}</span>`;\n  }\n});\n```\n\nTo style a custom formatter you may need to add a css part for the element. For example:\n\n```js\nformatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n  const value = `${rowData[columnData.field] || ''}`;\n  return `<a part=\"custom-link\" href=\"#\" class=\"text-ellipsis\">${escapeHTML(value)}</a>`;\n},\n```\n\nThen in the style sheet you add for you page you put the styles.\n\n```css\nids-data-grid::part(custom-link) {\n  color: #da1217;\n}\n\nids-data-grid::part(custom-link):hover {\n  color: #6c080b;\n}\n```\n\nThe formatter is then linked via the column on the formatter setting. When the grid cell is rendered the formatter function is called and the following arguments are passed in.\n\n- `rowData` The current row's data from the data array.\n- `columnData` The column object with all of the column configuration for this cell.\n\n## Events\n\n- `activecellchanged` Fires when the active cell changes with the keyboard or by click.\n- `sorted` Fires when the sort column is changed.\n- `selectionchanged` Fires any time the selection changes.\n- `activationchanged` Fires any time the active row changes.\n- `rowselected` Fires for each row that is selected.\n- `rowdeselected` Fires for each row that is deselected.\n- `rowactivated` Fires for each row that is activated.\n- `rowdeactivated` Fires for each row that is deactivated.\n- `rowclick` Fires for each row that is clicked.\n- `dblclick` Fires each time double clicked on body cells or header cells. Based on where it clicked details can be capture like `type: 'body-cell'|'header-title'|'header-filter'` etc.\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n- `columnresized` Fires when a column is resized or setColumnWidth is called.\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto\n- `rowExpanded` Fires when a tree or expandable row is expanded or collapsed\n- `rowCollapsed` Fires when a tree or expandable row is expanded or collapsed\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called.\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto.\n- `beforemenushow` Fires before context menu show, you can return false in the response to veto.\n- `menushow` Fires after context menu show.\n- `menuselected` Fires after context menu item selected.\n- `settingschanged` Fires after settings are changed in some way.\n- `scrollstart` Fires when data-grid reaches the topmost row.\n- `scrollend` Fires when data-grid reaches the bottommost row.\n- `afterrendered` Fires after rendered the data grid.\n\n## Methods\n\n- `setColumnWidth` Can be used to set the width of a column.\n- `setColumnVisibility` Can be used to set the visibility of a column.\n- `setActivateCell(cell, row)` Can be used to set focus of a cell.\n- `selectedRows` Lists the indexes of the currently selected rows.\n- `saveSetting(setting: string)` Save the given setting to local storage.\n- `saveAllSettings` Save all user settings to local storage.\n- `savedSetting(setting: string)` Get saved given setting value from local storage.\n- `allSavedSettings` Get saved all user settings from local storage.\n- `clearSetting(setting: string, key?: string)` Clear the given saved setting from local storage.\n- `clearAllSettings(userKeys: unknown)` Clear saved all user settings from local storage.\n- `restoreSetting(setting: string, value?: unknown)` Restore the given saved setting from local storage.\n- `editFirstCell` Puts the first cell on the active row into edit mode.\n- `appendData(data: Record<string, unknown>)` Use this to add more data to the datagrid's existing dataset.  This will automatically render additional rows in the datagrid.\n- `addRow(data: Record<string, unknown>, index?: number)` Adds a new row at optional row index and defaults the values to all those provided in the data\n- `addRows(data: Array<Record<string, unknown>>, index?: number)` Adds multiple new rows at optional row index and defaults the values to all those provided in the data\n- `removeRow(index: number)` Removed the provided row index from the dataset and visual datagrid\n- `clearRow(index: number)` Clears all values on the given row.\n- `commitCellEdit` Stops editing and commits the value in the active editor.\n- `cancelCellEdit` Stops editing and reverts the value in the active editor.\n- `resetDirtyCells` Clears all dirty cell indicators.\n- `dirtyCells` Gives a list of all currently dirty cells.\n- `exportToExcel(format: 'csv' | 'xlsx', filename: string, keepGridFormatting: boolean)` Export datagrid datasource to an excel file. This keeps grid formatting by default.\n- `collapseAll()` Collapse all expandable or tree rows.\n- `expandAll()` Expand all expandable or tree rows.\n- `toggleAll(opt: boolean)` Toggle collapse/expand all expandable or tree rows. `opt false`: will expand all, `opt: true`: will collapse all\n- `refreshRow` IdsDataGridRow method to refresh row element and its cells.\n- `refreshCell` IdsDataGridCell method to refresh cell element.\n- `updateDataset(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row.\n- `updateDatasetAndRefresh(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row and refreshes row/cells UI.\n\n## Filters\n\nData rows can be filter based on one or several criteria. Whole filter row can turned on/off by the api setting `filterable` and can be disabled by the api setting `filter-row-disabled`. The filter conditions can be applied thru the UI or programmatically. Each column can have its own filter type and turn on/off by columns setting.\n\n### Filter Columns Setting\n\nAll the filter settings can be passed thru columns data.\n\n|Setting|Type|Description|\n|---|---|---|\n|`filterType` | Function | Data grid built-in filter method, see the dedicated section below. |\n|`filterConditions` | Array | List of items to be use as operators in menu-button or options in dropdown. |\n|`filterFunction` | Function | User defined filter method, it must return a boolean. |\n|`filterOptions` | Object | Setting for components are in use, for example: `label, placeholder, disabled`. |\n|`isChecked` | Function | User defined filter method, it must return a boolean. This method use along built-in `checkbox` only, when filter data value is not boolean type. |\n\n### Built-in Filter Methods\n\n|Method|Description|\n|---|---|\n|`text` | It filter as text comparison. Contains input and menu-button with list of default operators. |\n|`integer` | It filter as integer comparison. Contains input and menu-button with list of default operators. |\n|`decimal` | It filter as decimal comparison. Contains input and menu-button with list of default operators. |\n|`contents` | It filter as text comparison. Contains dropdown and auto generate list of items based on column data. |\n|`dropdown` | It filter as text comparison. Contains dropdown and must pass list of item by setting `filterConditions`. |\n|`checkbox` | It filter as boolean comparison. Contains menu-button with list of default operators. |\n|`date` | It filter as date comparison. Contains date-picker and menu-button with list of default operators. |\n|`time` | It filter as time comparison. Contains time-picker and menu-button with list of default operators. |\n\n### Custom Filter\n\nIf the built-in filters are not enough, creating a custom filter is an option. There are two parts you can create both parts custom or mix-match with built-in.\n\n1. `UI Only` In order to do custom UI part of filter, add as html markup thru a slot. It must use slot and column-id attributes for example: `<div slot=\"filter-n\" column-id=\"n\">...</div>` where n is the columnId same passed in the columns.\n1. `filterFunction` This is a user defined filter method which must return a boolean. It determines if a cell value should be considered as a valid filtered value.\n1. `disableClientFilter` This is an api setting to disable filter logic client side. It will set filter conditions and fire an event `filtered` which can listen for custom logic.\n\n### Filter Code Examples\n\nBasic text filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nNo filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"false\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisabled filter row, will disabled all attached filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\" filter-row-disabled=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nHyperlink, integer, decimal, date and time filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'hyperlink',\n  name: 'Hyperlink',\n  field: 'description',\n  href: '#',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.hyperlink\n});\ncolumns.push({\n  id: 'integer',\n  name: 'Integer',\n  field: 'price',\n  filterType: dataGrid.filters.integer,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'decimal',\n  name: 'Decimal',\n  field: 'price',\n  filterType: dataGrid.filters.decimal,\n  formatter: dataGrid.formatters.decimal,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'date',\n  name: 'Date',\n  field: 'publishDate',\n  filterType: dataGrid.filters.date,\n  formatter: dataGrid.formatters.date\n});\ncolumns.push({\n  id: 'time',\n  name: 'Time',\n  field: 'publishDate',\n  filterType: dataGrid.filters.time,\n  formatter: dataGrid.formatters.time\n});\n```\n\nSome filter options label, placeholder, disabled.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterOptions: {\n    label: 'Label text for description input',\n    placeholder: 'Placeholder text for description input',\n    disabled: true\n  }\n});\n```\n\nCustom operators items for menu-button.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterConditions: [{\n    value: 'contains',\n    label: 'Contains',\n    icon: 'filter-contains'\n  },\n  {\n    value: 'equals',\n    label: 'Equals',\n    icon: 'filter-equals',\n    selected: true\n  }]\n});\n```\n\nContents and dropdown type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'location',\n  name: 'Location',\n  field: 'location',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.contents,\n  filterOptions: {\n    notFilteredItem: { value: 'not-filtered', label: 'Not Filtered' }\n  }\n});\ncolumns.push({\n  id: 'useForEmployee',\n  name: 'NotFilterdItem (shown as blank)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\ncolumns.push({\n  id: 'useForEmployeeCustomNotFilterdItem',\n  name: 'NotFilterdItem (show as custom text)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'not-filtered', label: 'Not Filtered' },\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\n```\n\nCheckbox type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'checkbox',\n  name: 'Checkbox',\n  field: 'inStock',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox\n});\ncolumns.push({\n  id: 'customCheckMethod',\n  name: 'Custom check method',\n  field: 'active',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox,\n  isChecked: (value) => value === 'Yes'\n});\n```\n\nCustom filter method.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\n// Custom filter checking\nconst myCustomFilter = (opt) => {\n  const { operator, columnId, value } = opt.condition;\n  const val = {\n    condition: Number.parseInt(value, 10),\n    data: Number.parseInt(opt.data[columnId], 10)\n  };\n  let isMatch = false;\n  if (Number.isNaN(val.condition) || Number.isNaN(val.data)) return isMatch;\n\n  if (operator === 'equals') isMatch = (val.data === val.condition);\n  if (operator === 'greater-than') isMatch = (val.data > val.condition);\n  if (operator === 'greater-equals') isMatch = (val.data >= val.condition);\n  if (operator === 'less-than') isMatch = (val.data < val.condition);\n  if (operator === 'less-equals') isMatch = (val.data <= val.condition);\n\n  return isMatch;\n};\n\nconst columns = [];\ncolumns.push({\n  id: 'customFilterMethod',\n  name: 'Custom Filter Method',\n  field: 'price',\n  filterFunction: myCustomFilter,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\n```\n\nCustom filter UI part.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n  <div slot=\"filter-description\" column-id=\"description\">\n    <ids-menu-button id=\"btn-filter-description\" icon=\"filter-greater-equals\" menu=\"menu-filter-description\" dropdown-icon>\n      <span class=\"audible\">Greater Than Or Equals</span>\n    </ids-menu-button>\n    <ids-popup-menu id=\"menu-filter-description\" target=\"#btn-filter-description\">\n      <ids-menu-group select=\"single\">\n        <ids-menu-item value=\"equals\" icon=\"filter-equals\">Equals</ids-menu-item>\n        <ids-menu-item value=\"greater-than\" icon=\"filter-greater-than\">Greater Than</ids-menu-item>\n        <ids-menu-item value=\"greater-equals\" icon=\"filter-greater-equals\" selected=\"true\">Greater Than Or Equals</ids-menu-item>\n        <ids-menu-item value=\"less-than\" icon=\"filter-less-than\">Less Than</ids-menu-item>\n        <ids-menu-item value=\"less-equals\" icon=\"filter-less-equals\">Less Than Or Equals</ids-menu-item>\n      </ids-menu-group>\n    </ids-popup-menu>\n    <ids-input id=\"input-filter-description\" type=\"text\" size=\"full\" placeholder=\"Slotted description\" label=\"Slotted description input\">\n    </ids-input>\n  </div>\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisable client filter\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" disable-client-filter=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n\ndataGrid.addEventListener('filtered', (e: any) => {\n  console.info('filtered:', e.detail);\n});\n```\n\n### Filter rows programmatically\n\n```js\n// Filter rows\nconst conditions = [{ columnId: 'description', operator: 'contains', value: '5' }];\ndataGrid.applyFilter(conditions);\n\n// Reset all filters\ndataGrid.applyFilter([]);\n```\n\n### Filter Events\n\nThe following events are relevant to data-grid filters.\n\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n\n## Custom cell colors\n\nIn some cases, it may be desirable to customize the background color of cells.  This can be done with the `cssPart` column setting:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell'\n});\n```\n\nThe `cssPart` property is translated into a `part` attribute that is applied to every cell in the column.  In the event the color needs to be conditional based on the row index or other logic, a function can be used:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2')\n  // ...\n});\n```\n\nAfter this is defined, accompanying CSS can be written to target the parts `custom-cell`, `custom-cell-1`, and `custom-cell-2` to change background color or other CSS properties of the cell:\n\n```css\nids-data-grid::part(cell) {\n  background-color: #ebf9f1;\n}\n\nids-data-grid::part(cell-selected) {\n  background-color: #c9dad0;\n}\n```\n\n### Changing selected cell colors\n\nAnother column setting, `cellSelectedCssPart` can be used alongside `cssPart` to customize the selected color of the row in a similar way.  When using `mixed` selection, this color is also applied to activated rows:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell',\n  cellSelectedCssPart: 'custom-cell-selected'\n});\n```\n\nThis column setting can also be a function, just like `cssPart`:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2'),\n  cellSelectedCssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-selected-1' : 'custom-cell-selected-2')\n  // ...\n});\n```\n\n## Tooltip Code Examples\n\nSet suppress tooltips to turn off.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" suppress-tooltips>\n</ids-data-grid>\n```\n\nSet custom tooltip strings.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: 'This is a product Id',\n  headerTooltip: 'This is the product Id header title',\n  headerIconTooltip: 'This is product Id header icon',\n  filterButtonTooltip: 'This is the product Id filterButton'\n});\n```\n\nSet tooltip as callback.\n\n```js\nconst tooltipCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return `Text: ${text}<br/>Header Row: ${rowIndex}, Cell: ${columnIndex}`;\n  } else if (type === 'filter-button') {\n    return `Text: ${text}<br/>FilterButton Row: ${rowIndex}, Cell: ${columnIndex}`;\n  }\n  return `Text: ${text}<br/>for Row: ${rowIndex}, Cell: ${columnIndex}`;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: tooltipCallback\n});\n```\n\nSet tooltip custom options.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: {\n    placement: 'top',\n    headerPlacement: 'top',\n    headerIconPlacement: 'top',\n    filterButtonPlacement: 'bottom',\n    x: 0,\n    y: 10,\n    headerX: 0,\n    headerIconX: 0,\n    headerY: 10,\n    headerIconY: 10,\n    filterButtonX: 0,\n    filterButtonY: 22\n  }\n});\n```\n\nSet tooltip options as callback.\n\n```js\nconst tooltipOptionsCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return { headerPlacement: 'top', headerX: 0, headerY: 10 };\n  } else if (type === 'header-icon') {\n    return { headerIconPlacement: 'top', headerIconX: 0, headerIconY: 10 };\n  } else if (type === 'filter-button') {\n    return { filterButtonPlacement: 'bottom', filterButtonX: 0, filterButtonY: 22 };\n  }\n  return { placement: 'top', x: 0, y: 10 };\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: tooltipOptionsCallback\n});\n```\n\nSet tooltip custom css.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: 'custom-turquoise',\n  headerTooltipCssPart: 'custom-turquoise',\n  headerIconTooltipCssPart: 'custom-turquoise',\n  filterButtonTooltipCssPart: 'custom-turquoise'\n});\n```\n```css\n/* tooltip css part `custom-turquoise` */\nids-data-grid::part(custom-turquoise-tooltip-arrow-top)::after {\n  border-top-color: #2f8d8e;\n}\nids-data-grid::part(custom-turquoise-tooltip-popup) {\n  background-color: #2f8d8e;\n}\n```\n\nSet tooltip custom css as callback.\n\n```js\nconst tooltipCssPartCallback = (args: { type: string }): string => {\n  const { type } = args;\n  let cssPart = '';\n  // Set random css part each time, for `body-cell` tooltips\n  if (type === 'body-cell') {\n    const parts = ['azure', 'ruby'];\n    const randomIndex = Math.floor(Math.random() * parts.length);\n    cssPart = parts[randomIndex];\n  }\n  return cssPart;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: tooltipCssPartCallback\n});\n```\n```css\n/* tooltip css part `azure` */\nids-data-grid::part(azure-tooltip-arrow-top)::after {\n  border-top-color: #0066d4;\n}\nids-data-grid::part(azure-tooltip-popup) {\n  background-color: #0066d4;\n}\n\n/* tooltip css part `ruby` */\nids-data-grid::part(ruby-tooltip-arrow-top)::after {\n  border-top-color: #c31014;\n}\nids-data-grid::part(ruby-tooltip-popup) {\n  background-color: #c31014;\n}\n```\n\n## context menu Code Examples\n\nThe context menus can be set via the dataset.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n</ids-data-grid>\n```\n```js\n// Dataset for header cells context menu\nconst headerMenuData = {\n  id: 'grid-header-context menu',\n  contents: [{\n    id: 'header-actions-group',\n    items: [\n      { id: 'actions-split', value: 'actions-split', text: 'Split' },\n      { id: 'actions-sort', value: 'actions-sort', text: 'Sort' },\n    ]\n  }],\n};\n\n// Dataset for body cells context menu\nconst menuData = {\n  id: 'grid-context menu',\n  contents: [{\n    id: 'actions-group',\n    items: [\n      { id: 'item-1', value: 'item-1', text: 'Item One' },\n      { id: 'item-2', value: 'item-2', text: 'Item Two' },\n      { id: 'item-3', value: 'item-3', text: 'Item Three' }\n    ]\n  }],\n};\n\n// Set context menu data with data-grid\ndataGrid.menuData = menuData;\ndataGrid.headerMenuData = headerMenuData;\n\n// Set to return true/false in the response to veto before context menu show.\ndataGrid.addEventListener('beforemenushow', (e: any) => {\n  console.info('before context menu show', e.detail);\n  // e.detail.response(false);\n});\n\n// Set to watch after context menu show.\ndataGrid.addEventListener('menushow', (e: any) => {\n  console.info('After context menu show', e.detail);\n});\n\n// Set to watch after context menu item selected.\ndataGrid.addEventListener('menuselected', (e: any) => {\n  console.info('context menu item selected', e.detail);\n});\n```\n\nSet context menu thru Slot.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n  <!-- context menu header cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"header-context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n      <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n  <!-- context menu body cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n      <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n      <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n      <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n</ids-data-grid>\n```\n\nSet context menu thru ID.\n\n```html\n<ids-data-grid\n  header-menu-id=\"grid-header-context menu\"\n  menu-id=\"grid-context menu\"\n  id=\"data-grid-1\"\n  label=\"Books\"\n></ids-data-grid>\n\n<!-- context menu header cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-header-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n    <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n\n<!-- context menu body cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n    <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n    <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n    <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n```\n\n## Empty Message\n\nSet empty message thru slot (markup).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-slot\" label=\"Books\">\n  <ids-empty-message hidden icon=\"empty-search-data-new\" slot=\"empty-message\">\n    <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">No Data</ids-text>\n    <ids-text hidden label=\"true\" slot=\"description\">There is no data available.</ids-text>\n  </ids-empty-message>\n</ids-data-grid>\n```\n\nSet empty message thru settings (markup).\n\n```html\n<ids-data-grid\n  id=\"data-grid-em-thru-settings\"\n  label=\"Books\"\n  empty-message-icon=\"empty-error-loading-new\"\n  empty-message-label=\"No Data\"\n  empty-message-description=\"There is no data available.\"\n></ids-data-grid>\n```\n\nSet empty message thru settings (javascript).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-settings-js\" label=\"Books\">\n</ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-em-thru-settings-js');\ndataGrid.emptyMessageIcon = 'empty-error-loading-new';\ndataGrid.emptyMessageLabel = 'No Data';\ndataGrid.emptyMessageDescription = 'There is no data available.';\n```\n\n## Row Height\n\nAs mentioned in the settings section you can change the row height by setting the rowHeight option.\n\n```html\n     <ids-data-grid id=\"data-grid-row-height\" row-height=\"md\"></ids-data-grid>\n```\n\nIts worth mentioning the characteristics and usage for each one.\n\nLarge (`row-height=\"lg\"`) - Row Height is 50. The default row height, header is 16px and body cells are 16px. 16px padding on cells and header. You should use this most of the time if there is plenty of room on the UI and to avoid the UI looking crowded.\nMedium (`row-height=\"md\"`) - Row Height is 40. Header is 16px and body cells are 16px. 12px padding on cells and header. If you need to see a few more rows but still want to avoid a crowded UI, this is the next best option.\nSmall (`row-height=\"sm\"`) - Row Height is 35. Header is 16px and body cells are 16px. 8px padding on cells and header. This is the smallest option that is recommended for readability and spacing.\nExtra Small (`row-height=\"xs\"`) - Row Height is 30. Header is 14px and body cells are 14px. 8px padding on cells and header. If you need a very compressed data grid with a lot of data you can use this option. But there is a trade off of bad readability and spacing.\nExtra Extra Small (`row-height=\"xxs\"`) - Row Height is 25. Header is 14px and body cells are 14px. 2px padding on cells and header. Avoid this option as it is very crowded but it is included for edge cases.\n\n## States and Variations\n\n**Rows**\n- Hover\n- Selected\n- Disabled\n- Readonly\n- Activated\n\n**Columns**\n- Focus\n- Hover\n- Sorted\n- Selected\n- Disabled\n- Filtered\n\n**Cells**\n- Hover (sometimes a cursor change)\n- Readonly\n- Focus\n- Checked/Not Checked (Checkboxes)\n\n## Keyboard Guidelines\n\n- <kbd>Tab</kbd>The initial tab enters the grid with focus on the first cell of the first row, often a header. A second tab moves out of the grid to the next tab stop on the page. Once focus is established in the grid, a TAB into or a Shift Tab into the grid will return to the cell which last had focus. If in edit mode will finish editing and start editing the next cell.\n- <kbd>Shift + Tab</kbd> Moves the reverse of tab. If in edit mode will finish editing and start editing the previous cell.\n- <kbd>Left</kbd> and <kbd>Right</kbd> Move focus to the adjacent column's cell. There is no wrap at the end or beginning of columns.\n- <kbd>Up</kbd> and <kbd>Down</kbd> Move focus to the adjacent row's cell. There is no wrap at the first or last row.\n- <kbd>Home</kbd> moves focus to the first cell of the current row\n- <kbd>End</kbd> moves focus to the last cell of the current row\n- <kbd>Page Up</kbd> moves focus to the first cell in the current column\n- <kbd>Page Down</kbd> moves focus to the last cell in the current column\n- <kbd>Space</kbd> Toggles selection the activate row. If suppressRowDeselection is set it will be ignored on deselect. If the cell contains an expandable element then the row will toggle the expanded state. If the cell contains a checkbox editor, will toggle the checkbox state.\n- <kbd>F2</kbd> toggles actionable mode. Pressing the <kbd>Tab</kbd> key while in actionable mode moves focus to the next actionable cell. While in actionable mode you can do things like type + enter. This will move you down a row when you hit enter. If the cell has a control that uses down arrow (like the drop downs or lookups that are editable). Then the user needs to hit enter to enable the edit mode on that cell.\n- <kbd>Triple Click</kbd> Not a keyboard shortcut, but if you have text in a cell that is overflowed a triple click will select all the text even the part that is invisible.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Enter</kbd> Activates edit mode on the cell if it is editable. There is also an \"auto edit detection\". If the user starts typing then edit mode will happen automatically without enter. If in edit mode already <kbd>Enter</kbd> will finish edit mode. If `editNextOnEnterPress` is enabled then editing will start on the same column in next row.\n- <kbd>Shift + Enter</kbd> Same as enter but if `editNextOnEnterPress` is enabled then editing will start on the same column in previous row.\n- <kbd>F2</kbd> Finish editing same as Enter. But if `editNextOnEnterPress` is enabled, will stay in same cell. `cancelEditMode` will fire.\n- <kbd>CMD/CTRL + Enter</kbd> Finish editing same as Enter.\n- <kbd>ESC</kbd> Revert to the previous value and cancel editing. `cancelEditMode` will fire.\n\n## Responsive Guidelines\n\n- By default, data grid grows depending on the amount of contents within and will scroll if necessary under the header. It stops growing when it reaches the size of the parent container.\n- `autoFit` property or `auto-fit` attribute can be set manually to make the data grid size fill and be responsive to the size of the screen, regardless of the amount of contents.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Counts have all new markup and classes.\n\n**4.x to 5.x**\n- Data grid has all new markup and a custom element but some similarly named options\n- Still uses same columns and data set options. Some column options enhanced and changed.\n- If using events events are now plain JS events for example: sorted, rendered\n- Some Api Functions have changed\n- If using properties/settings these are now attributes or as plain properties for example: data, virtual-scroll\n- Markup has changed to a custom element `<ids-data-grid></ids-data-grid>`\n- Can now be imported as a single JS file and used with encapsulated styles\n- `Drill Down` Formatter is now covered by `Button` formatter with `icon=\"drilldown\"`\n- `textOverflow` setting is now by default\n- `rowNavigation` setting has replaced `cellNavigation`. Cell navigation is the default behavior.\n- `stretchColumn` is now more flexible and can be achieved by setting a column width to `minmax(130px, 4fr)`. I.E. some min width and a `fr` unit equal to the remaining number of columns (or similar variations).\n- split columns are not supported anymore but could be done with a custom formatter if needed\n- `frozenColumns` setting is now set on each column by adding `frozen: 'left'` or `frozen: 'right'` to the column definition.\n- Some events are renamed see the events section for more details, also the signature of the events has changed.\n- Custom formatter functions can now be any type of function and have a different signature.\n- The `expanded` column option for tree was renamed to `rowExpanded`.\n- The `expandrow/collapserow` events are renamed to `rowexpanded/rowcollapsed`\n- The `beforeentereditmode/entereditmode/exiteditmode` event is renamed to `beforecelledit/celledit/endcelledit/cancelcelledit`\n- The `actionablemode` feature has been replaced with simply tabbing to the next editable field when in edit mode.\n\n## Accessibility Guidelines\n\n1.1.1 Non-text Content - All images, links and icons have text labels for screen readers when the formatters are used.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and links and images of text has a contrast ratio of at least 4.5:1.\n- 2.1.1 Keyboard - Make all functionality available from a keyboard. The grid has keyboard shortcuts and is usable with a screen reader due to the addition of aria tags.\n- A datagrid in general including this one uses the following aria tags\n  - `aria-label` labels the enter table on the main table\n  - `aria-rowcount` lists the visible row count on the main table\n  - `aria-colindex` the index of each column on the column elements\n  - `aria-rwindex` the index of each row on the row elements\n  - `aria-setsize` for tree grid lists the number of elements in each level (group)\n  - `aria-level` the level of indentation\n  - `aria-posinset` the depth into each set\n  - `aria-expanded` on the row it indicates if the row is expanded (for tree and expandable row)\n  - `aria-sort` indicates the sort direction on the sortable columns\n  - `aria-checked` indicates if the element is checked on checkbox columns and headers\n\n## Regional Considerations\n\nTitles and labels should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n\n## Code Separation (For Developers)\n\nThe code is divided into several files. Here is a description of where everything is.\n\n- `ids-data-grid-cell.ts` creates a non-shadow root `ids-data-grid-cell`, and handles its own selection, and activation.\n- `ids-data-grid-cell.scss` contains all css related to `.ids-data-grid-cell` and its children\n- `ids-data-grid-contextmenu.ts` contains code in the form of export functions, that adds ability to get right click menus on headers and cells\n- `ids-data-grid-filter.scss` contains all css related to the filter row and its children\n- `ids-data-grid-filter.ts` contains code to implement the filtering functionality and its ui (some functions are in ids-data-source)\n- `ids-data-grid-formatters.ts` contains all formatter functions and some supporting code like data extraction\n- `ids-data-grid-header.ts` contains most header functionality, the header template, and code related to header actions like sort, reorder and selection.\n- `ids-data-grid-header.scss` contains all css related to `.ids-data-grid-header` and its children\n- `ids-data-grid-row.ts` contains most row functionality, the row template, and code related to row actions like expand, collapse, select, activate\n- `ids-data-grid-row.scss` contains all css related to `.ids-data-grid-row` and its children\n- `ids-data-grid-tooltip-mixin.js` contains a tooltip mixin that adds tooltip functionality to cells and headers, its different from `ids-tooltip-mixin` (more specific)\n- `ids-data-grid.js` contains all main data grid code, the api and settings and the main generator loop for the data grid\n"}},{"name":"ids-data-grid-row","attributes":[{"name":"rootNode","values":[]},{"name":"dataGrid","description":"Reference to the data grid parent","values":[]},{"name":"data","values":[]},{"name":"columns","values":[]},{"name":"visibleColumns","values":[]},{"name":"dimensions","values":[]},{"name":"disabled","description":"Set the row disabled state.","values":[]},{"name":"rowIndex","description":"Set the row index. This index will be used to popuplate data from ids-data-grid.","values":[]},{"name":"rowCache","description":"Implements row cache","values":[]},{"name":"selected","description":"Select this row node","values":[]}],"description":{"kind":"markdown","value":"# Ids Data Grid\n\n## Description\n\nThe data grid component (ids-data-grid) is used to arrange tabular data in rows and columns for easier scanning and comparison. Data grids are very configurable in both design and functionality and they can be found within almost every product/app.\n\nYou should pass an array of objects in to the grid on the `dataset` object. Also pass the `columns` array which contains the column configuration. There are a number of events described in the events and API section, as well as the column settings.\n\nA Read-Only data grid uses \"Formatters\" to render cell content. A number of these are listed in the API section and it is possible to create your own.\n\n## Use Cases\n\n- The data grid component is most useful when it is used for categorically sorting dense and repetitive information. Each individual item is listed down the Y axis of the chart, and their shared attribute categories are listed along the X axis. The resulting cells are filled with information that is relevant to the corresponding item and attribute.\n\n## Terminology\n\n- **Title**: The name of the data grid optionally appearing above the grid and describing the contents.\n- **Options**: An optionally actions menu button with functionality that operates on the entire data grid.\n- **Cell**: Body elements of the data grid that contain an object's value or attribute. Cells should only contain one type of content or it can be confusing and hurt accessibility.\n- **Header Cell**: These cells contain the names of the columns in the grid and related functions like filtering and sorting. All cells below the header cell will hold values related to the attribute in the header cell.\n- **Column**: Cells stacked vertically that contain values relate to the attribute found on the top header cell.\n- **Row**: Each row contains one cell per column in the data grid, and each cell displays a single value in the bound data item.\n- **Tree**: Denotes the use of hierarchical data, with an expandable and collapsible hierarchy.\n\n## Themeable Parts\n\n- `table` allows you to further style the table main element\n- `container` allows you to further style the container element\n- `body` allows you to further style the body element\n- `header` allows you to further style the header element\n- `headerCell` allows you to further style the header cells\n- `row` allows you to further style the rows\n- `cell` allows you to further style the row cells\n- `cell-selected` allows you to further style row cells that are selected (in mixed-selection mode, activated cells are also styled)\n- `tooltip-popup` allows you to further style or adjust the outer tooltip popup element\n- `tooltip-arrow` allows you to adjust the tooltip arrow element\n\n## Features (With Code Examples)\n\nA data grid is created by adding an `ids-data-grid` html element in the page and setting the options either inline in the markup or in the JS part of the code. You can only use simple types (string, boolean ect) for inline markup so passing the data and column arrangement is always done in the JS part. The data will be an array of objects so its in the correct tabular form. The columns are also an array of objects but with defined options and types. See more about columns in next section.\n\n```html\n<ids-data-grid id=\"data-grid-1\"></ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-1');\ndataGrid.data = dataset;\ndataGrid.columns = columns;\n```\n\n### Column Groups\n\nSetting column groups allows you to add a second level of columns in your header and the ability to group the first level. This is useful for when you have a large number of columns and you want to group them into logical or related sections.\n\nColumn groups are achieved by providing an array to the `columnGroups` setting. Only one level of column groups can be defined.\n\n```js\ndataGrid.columnGroups = [\n{\n  colspan: 3,\n  id: 'group1',\n  name: 'Column Group One',\n  align: 'center'\n},\n{\n  colspan: 2,\n  id: 'group2',\n  name: 'Column Group Two'\n},\n{\n  colspan: 2,\n  id: 'group3',\n  name: 'Column Group Three',\n  align: 'right'\n},\n{\n  colspan: 11,\n  id: 'group4',\n  name: 'Column Group Four',\n  align: 'left'\n}\n];\n```\n\nIf the column is hidden it will be automatically removed from the `colspan`. If in the last group you didn't provided a bug enough `colspan` it will be set to the remaining columns. The `name` text can be right or left aligned and given an id. The only required property is `colspan`.\n\n### Selection\n\nThe data grid selection feature involves the setting `rowSelection`. This can be one of several values.\n\n- `false` No selection enabled.\n- `multiple` Allows multiple rows to be selected. When doing this it is recommended to add a `formatters.selectionCheckbox` for the first column.\n- `single` Allows a single row to be selected. When doing this you can optionally to add a `formatters.selectionRadio` for the first column. You can use the `suppressRowDeselection` if you want one row to always be selected.\n- `mixed` Allows multiple rows to be selected by clicking only on the checkbox or <kbd>Space</kbd> key. If clicking a row then that row is activated, meaning it is the current row and something might be shown based on the data of that row. You can use the `suppressRowDeactivation` if you want one row to always be selected.\n\nHere is a code example for multi select\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" row-selection=\"multiple\">\n</ids-data-grid>\n```\n\n```js\n  dataGrid.addEventListener('rowselected', (e) => {\n    console.info(`Row Selected`, e.detail);\n  });\n\n  dataGrid.addEventListener('rowdeselected', (e) => {\n    console.info(`Row Deselected`, e.detail);\n  });\n\n  dataGrid.addEventListener('selectionchanged', (e) => {\n    console.info(`Selection Changed`, e.detail);\n  });\n```\n\nThe following events are relevant to selection/activation.\n\n`rowselected` Fires when an individual row is activation and gives information about that row.\n`rowdeselected` Fires when an individual row is deselected and gives information about that row.\n`selectionchanged` Fires once for each time selection changes and gives information about all selected rows.\n\n`rowactivated` Fires when an individual row is activated and gives information about that row.\n`rowdeactivated` Fires when an individual row is deactivated and gives information about that row.\n`activationchanged` Fires once for each time activation changes and gives information about the active row.\n\n### Tree Grid\n\nThe tree grid feature involves the setting `treeGrid` to true. In addition the data passed to the tree grid should contain a field called `children`. That contains the child rows. This can by unlimited levels but 2-4 is recommended as a max for a more usable UI. In addition you can preset some states by adding `rowExpanded: false` to the parent elements (default is expanded). And also set `rowHidden: false` for child rows that are expanded. You also need a `Expander` formatter on a cell (usually the first visible cell.\n\nHere is a code example for a tree grid.\n\n```html\n<ids-data-grid id=\"tree-grid\" label=\"Buildings\" tree-grid=\"true\" group-selects-children=\"true\"></ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to selection/activation.\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `groupSelectsChildren` {boolean} If the tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `suppressRowClickSelection` {boolean} If using selection you might want to set this so clicking a row will not select it.\n### Expandable Row\n\nThe Expandable Row feature involves the setting `expandableRow` to true. In addition a row template should be provided via an id that points to the `expandableRowTemplate` which is a `template` element. You can preset the expandable state by adding `rowExpanded: true` to the row element you want to expand. The default is collapsed.\n\nHere is a code example for an expandable row\n\n```html\n<ids-data-grid\n    id=\"data-grid-expandable-row\"\n    expandable-row=\"true\"\n    expandable-row-template=\"expandable-row-tmpl\"\n    label=\"Books\">\n    <template id=\"expandable-row-tmpl\">\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"16\" type=\"span\">${convention}</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">${price} USD</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">Lorem Ipsum is simply sample text of the printing and typesetting industry. Lorem Ipsum has been the industry standard sample text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only...</ids-text>\n        </ids-layout-grid>\n    </template>\n</ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to expandable rows\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRowTemplate` {string} Should point to the row `template` element.\n\n### Editing\n\nThe Editing features start by setting `editable` to true. In addition you should add editors to columns and enable features of each of the editors. The features differ depending on the component used for editing. See the Keyboard section for information on which keys can be used when editing..\n\nHere is a code example for an editable text cell.\n\n```js\ncolumns.push({\n    id: 'description',\n    name: 'Description',\n    field: 'description',\n    sortable: true,\n    resizable: true,\n    reorderable: true,\n    formatter: dataGrid.formatters.text,\n    editor: {\n      type: 'input',\n      inline: true,\n      editorSettings: {\n        autoselect: true,\n        dirtyTracker: true\n      }\n    }\n  });\n```\n\nHere is a code example for an editable dropdown cell\n\n```js\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  resizable: true,\n  reorderable: true,\n  formatter: dataGrid.formatters.dropdown,\n  editor: {\n    type: 'dropdown',\n    editorSettings: {\n      dirtyTracker: true,\n      validate: 'required',\n      options: [\n        {\n          label: 'Option 1',\n          value: 'opt1'\n        },\n        {\n          label: 'Option 2',\n          value: 'opt2'\n        }\n      ]\n    }\n  }\n});\n```\n\nTo cancel or disabled editing there are a few ways:\n\n- setting the column `editor` setting to undefined will disable editing on the column (as will not having an editor setting at all).\n- adding a `readonly` or `disabled` function which returned true for some cells based on a condition will disable or mark the cell readonly.\n- return false in the `beforecelledit` event in the response function\n\nThe following settings are available on editors.\n\n`type` As of now can be `checkbox`, `input`, `datepicker`, `timepicker`, or `dropdown` but more will be added.\n`inline` Default is false. If true the editor (for example an input) will be visible in a field.\n`editorSettings` Is an object that is loosely typed that lets you pass any option the editor supports in. For example any of the IdsInput or IdsCheckbox options can be passing in. Some special ones are:\n`editorSettings.autoselect` Text will be selected when entering edit mode\n`editorSettings.dirtyTracker` Enables the dirty tracker that marks changed cells.\n`editorSettings.validate` Text will be selected when entering edit mode\n`editorSettings.mask` Will pass mask settings to the input (if supported).\n`editorSettings.maskOptions` Will pass maskOptions settings to the input (if supported).\n`editorSettings.options` Dataset used for dropdown editor's list box options.\n\nWhen the use clicks in the cell or activates editing with the keyboard with the Enter key and types. The following events will fire.\n\n`beforecelledit` Fires before a cell is being edit (before edit is started). Can be vetoed by returning false as shown below.\n`celledit` Fires exactly when a cell is being edited.\n`endcelledit` Fires when a cell edit is completed and changed.\n`cancelcelledit` Fires when an edit is cancelled via the <kbd>Esc</kbd> key.\n\nTo cancel editing based on some condition or if editing is not allowed you can veto the `beforecelledit` event.\n\n```js\n  dataGrid.addEventListener('beforecelledit', (e: Event) => {\n    (<CustomEvent>e).detail.response(false);\n  });\n```\n\nThere are a few utility functions for editing the data grid mentioned in the Methods section.\n\n## Settings and Attributes\n\nWhen used as an attribute in the DOM the settings are kebab case, when used in JS they are camel case.\n\n- `virtualScroll` {boolean} When virtual scroll is used the grid can render many thousands of rows and only the rows visible in the scroll area are rendered for performance. This setting has limitations such as the rows need to be fixed size.\n- `addNewAtEnd` {boolean} Automatically append rows while keyboard navigating data grid in edit mode.\n- `alternateRowShading` {boolean} For better scan-ability you can shade alternate rows.\n- `listStyle` {boolean} Sets the style of the grid to list style for simple readonly lists.\n- `columns` {Array<object>} Sets the columns array of the data grid. See column settings.\n- `columnGroups` {Array<object>} Allows you to group columns together in logical sets. See section below for details.\n- `rowHeight` {string | `'xxs'` | `'xs'` | `'sm'` | `'md'` | `'lg'`} Sets the height and padding of each row. In smaller row heights the font is lowered.\n- `data` {Array<object>} Sets the data to show in the data grid. This can be a JSON Array.\n- `disableClientFilter` {boolean} Disables the filter logic client side in situations you want to filter server side.\n- `filterable` {boolean} Turns on or off the filter functionality.\n- `filterRowDisabled` {boolean} Disables the filter row.\n- `headerMenuData` {Array<object>} Dataset to build context menu for header and header group cells.\n- `headerMenuId` {string} ID of the popupmenu to use as context menu for header and header group cells.\n- `menuData` {Array<object>} Dataset to build context menu for body cells.\n- `menuId` {string} ID of the popupmenu to use as context menu for body cells.\n- `rowNavigation` {boolean} If using row navigation, the row will be focused when navigating the data grid via clicks and keyboard events.\n- `rowSelection` {string|boolean} Set the row selection mode between false, 'single', 'multiple' and 'mixed\n- `suppressRowClickSelection` {boolean} If using selection setting this will require clicking a checkbox or radio to select the row. Clicking other cells will not select the row.\n- `suppressRowDeactivation` {boolean} Set to true to prevent rows from being deactivated if clicked. i.e. once a row is activated, it remains activated until another row is activated in its place.\n- `suppressRowDeselection`  {boolean} Set to true to prevent rows from being deselected if click or space bar the row. i.e. once a row is selected, it remains selected until another row is selected in its place.\n- `suppressTooltips`  {boolean} Set to true to prevent display tooltips.\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRow` {boolean} Indicates expandable rows will be used in the data grid.  See the expandable row section for more details.\n- `expandableRowTemplate` {string} Should point to the row `template` element for expandable rows.\n- `treeGrid` {boolean} Indicates a tree grid will be used  in the data grid. See the tree grid section for more details.\n- `showHeaderExpander` {boolean} Set to show header expander icon for expandable and tree rows.\n- `groupSelectsChildren` {boolean} If a tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `saveActivePage` {boolean} If set the active page on the pager will be saved to local storage.\n- `saveColumns` {boolean} If set columns will be saved to local storage.\n- `saveFilter` {boolean} If set filter will be saved to local storage.\n- `savePageSize` {boolean} If set the page size on the pager will be saved to local storage.\n- `saveRowHeight` {boolean} If set the row height will be saved to local storage.\n- `saveSortOrder` {boolean} If set column sort order will be saved to local storage.\n- `saveUserSettings` {boolean} If set all settings will be saved to local storage.\n- `emptyMessageDescription` {string} Set empty message description text.\n- `emptyMessageIcon` {string} Set empty message icon name.\n- `emptyMessageLabel` {string} Set empty message label text.\n- `suppressEmptyMessage` {boolean} Set to true to prevent display empty message.\n- `editable` {boolean} If true in addition to adding editors to columns the data grid is editable.\n- `editNextOnEnterPress` {boolean} If enabled when editing using <kbd>ENTER</kbd> will finish editing and start editing the same cell in next row and <kbd>SHIFT + ENTER</kbd> will edit the previous row.\n\n## Column Settings (General)\n\n|Setting|Type|Description|\n|---|---|---|\n|`id` | {string} | The unique id of the column. Each column in the grid should have some unique id.|\n|`name` | {string} | The text to show on the header.|\n|`field` | {string} | The name of the field (column) in the data array attached to the grid for example `description`. This can also be nested in an object for example `children.name`. |\n|`sortable` | {boolean} | If false, the column cannot be sorted. When completed a `sorted` event will fire.|\n|`resizable` | {boolean} | If false the column will not be resizable, thus is a fixed size and can never be changed by the user by dragging the left and right edge.  When completed a `columnresized` event will fire. See the `columns-resizable` example for a working example. |\n|`reorderable` | {boolean} | If true the column can be dragged into another position with adjacent columns. When completed a `columnmoved` event will fire. See the `columns-reorderable` example for a working example. This currently does not work with grouped columns. |\n|`readonly` | {boolean or Function} | If true the cell will be set to readonly color, indicating no editing.|\n|`disabled` | {boolean or Function} | If true the cell will be set to disabled color, indicating no editing.|\n|`formatter`| {Function} | Controls how the data is rendered in the cell.|\n|`hidden` | {boolean} | Excludes the column from being added to the DOM.|\n|`align` | {string} | Can be `left` or `right` or `center` to align both the cell and the header. Left is the default so does not need to be specified. |\n|`headerAlign` | {string} | Can be `left` or `right` or `center` to align just the header. Left is the default so does not need to be specified. |\n|`minWidth` | {number} | The minimum width used to prevent resizing a column below this size. |\n|`maxWidth` | {number} | The maximum width used to prevent resizing a column above this size. |\n|`cssPart` | {string} | Allows you to set the name of a css part that can be used to customize the cell's css. This can be a string or a function. See the columns-custom-css example. The default cssPart for cells is called `cell` and it also can be used for more global changes.  |\n|`frozen` | {string} | Sets the column to be frozen on either left or right side by passing `left` or `right`. See the `columns-frozen` example for a working example. Frozen columns currently have some limitations to be addressed in the future. |<!--lint disable maximum-line-length definition-case-->\n|`width` | {number or string} | The column width, this can be an integer for fixed pixel width or a percent for example `10%`, if left off the columns will be sized to contents and to fit the width of the grid using the css table browsers handling (this is known as `auto` columns). I.E. There are three column configurations: `auto`, `fixed` and `percent`. <br /><br />In addition one can specify any css grid column setting like `fr` or `ch`. In order to make what was called a `stretchColumn` in previous versions you can set the width to`minmax(130px, 4fr)`. This is some minimum width and a `fr` unit equal to the remaining number of columns (see example columns-stretch.html). For a spacer column you just need to specify one extra column at the end (see example columns-fixed.html) but this is not recommended for how it looks. |<!--lint enable maximum-line-length definition-case-->\n|`headerIcon` | {string} | Allows you to set the name of the header icon. |\n|`tooltipOptions` | {Object or Function} | Allows you to set the tooltip options. See the tooltip example. |\n|`tooltip` | {string or Function} | Let you set the tooltip content. |\n|`headerTooltip` | {string} | Let you set the header title tooltip content. |\n|`headerIconTooltip` | {string} | Let you set the header icon tooltip content. |\n|`filterButtonTooltip` | {string} | Let you set the header filter button tooltip content. |\n|`tooltipCssPart` | {string or Function} | Allows you to set the name of a tooltip css part that can be used to customize the tooltip css. This can be a string or a function. See the columns-custom-css example.\n|`headerTooltipCssPart` | {string} | Allows you to sets the header tooltip css part.\n|`headerIconTooltipCssPart` | {string} | Allows you to sets the header icon tooltip css part.\n|`filterButtonTooltipCssPart` | {string} | Allows you to sets the filter button tooltip css part.\n|`cellSelectedCssPart` | {string} | Allows customization of a selected cell's background color.\n|`editor` | {object} | Adds an editor to the column if editable is set on the grid. See editing section for more details.\n\n## Column Settings (Specific)\n\n|Setting|Type|Description|\n|---|---|---|\n|`href` | {string|Function} | Used to create the href for hyperlink formatters. This can be a string or a function that can work dynamically. It can also replace `{{value}}` with the current value. |\n|`text` | {string} | Used to create the txt value for hyperlink formatters if a hard coded link text is needed. |\n|`disabled` | {boolean|Function} | Sets the cell contents to disabled, can also use a callback to determine this dynamically. Only checkboxes, radios, buttons and link columns can be disabled at this time. Selection columns require disabled rows in order to not be clickable/selectable. |\n|`uppercase` | {boolean} | Allows you to set the text as uppercase. |\n\n## Formatters\n\n|Formatter|Description|\n|---|---|\n|`text` | (Default) Formats the column value as a direct text element using toString in the grid cell. Undefined or Null values will be shown as empty.|\n|`password` | Formats the column value masking the string length with stars. Undefined or Null values will be shown as empty. This is good for private data. |\n|`rowNumber` | Formats the cell with a row number column that is shown 1 to n no matter what the sort order is. |\n|`date` | Formats date data as a date string in the desired format, by default it will use `dateStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`time` | Formats date data as a time string in the desired format, by default it will use `timeStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`decimal` | Formats number data as a decimal string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`integer` | Formats number data as a integer string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`selectionCheckbox` | Displays a checkbox column for selection when using `rowSelection=\"mixed\"` or `rowSelection=\"multiple\"`|\n|`selectionRadio` | Displays a checkbox column for selection when using `rowSelection=\"single\"` |\n| `button` | Displays an `ids-button`. Other column settings like `type` can be used to set the button type as can `icon` by set for icon only buttons. Use the `click` setting/function to get an callback handler. |\n| `hyperlink` | Displays an `ids-hyperlink`. Other column settings like `href` can be used to set the link href and `text` can be used to set the text to specific text. Use the `click` setting/function to get an callback handler. |\n| `checkbox` | Displays an `ids-checkbox`. The value will be checked depending on if the attached field is true or `\"true\"`. |\n| `badge` | Displays an `ids-badge`. The associated field will be placed in the badge. The `color` option can also be set to set the ids-badge color setting. |\n| `alert` | Displays `ids-alert` element, and the field value will appear in a tooltip. An `icon` option can be provided as an override.|\n| `color` | Displays `ids-color` element. If a `color` option is provided as an override, the field's value will appear in a tooltip. |\n| `icon` | Displays the field value as an `ids-icon`. An `icon` option can be provided as an override, and the field value will appear beside this `icon` override. A `size` option can also be provided. |\n| `favorite` | Displays the field value as a `star-filled` if true or `star-outlined` if false. A `size` option can be provided as an override. |\n| `tag` | Displays the field value as an `ids-tag`. A `color` option can be provided as an override. |\n| `progress` | Displays the field value as an `ids-progress`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `rating` | Displays the field value as an `ids-rating`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `slider` | Displays the field value as an `ids-slider`. A `text` option can be provided to customize the label. A `color`, `max`, `min` and `type` option can be provided as overrides. |\n| `stepChart` | Displays the field value as an `ids-step-chart`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `image` | Displays the field value as an `ids-image`. A `text` option can be provided to the `alt` and `title` attributes. |\n\n### Deprecated Formatters (Deprecated from 4.x)\n\n- `Input` No longer suggested to use, use simple list instead or a Text Formatter.\n- `Status, Color` No longer used, but badges can be used.\n- `Placeholder` Can now be set on the column and used with other formatters\n- `Ellipsis` Is now always enabled.\n- `Readonly` Can now be set on the column and used with other formatters\n- `Drilldown` Use button formatter with an icon.\n- `Template` is now deprecated for performance reasons, use a custom formatter now.\n- `ClassRange` Use column cssClass function or string\n- `Autocomplete, Lookup, TargetedAchievement, ProcessIndicator, Spinbox, Fileupload, Dropdown, Colorpicker, Tree, SummaryRow, GroupFooterRow, GroupRow, Expander, Editor, Textarea, Actions, RowReorder` May be added later\n\n## Custom Formatters\n\nIt is possible to create your own custom formatter. The idea behind the formatter is it takes the cell value and does processing on it to return the correct markup for the cell. The simplest custom formatter would be this example.\n\n```js\ncolumns.push({\n  id: 'custom',\n  name: 'Custom',\n  field: 'price',\n  formatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n    const value = `Custom: ${rowData[columnData.field] || '0'}`;\n    return `<span class=\"text-ellipsis\">${value}</span>`;\n  }\n});\n```\n\nTo style a custom formatter you may need to add a css part for the element. For example:\n\n```js\nformatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n  const value = `${rowData[columnData.field] || ''}`;\n  return `<a part=\"custom-link\" href=\"#\" class=\"text-ellipsis\">${escapeHTML(value)}</a>`;\n},\n```\n\nThen in the style sheet you add for you page you put the styles.\n\n```css\nids-data-grid::part(custom-link) {\n  color: #da1217;\n}\n\nids-data-grid::part(custom-link):hover {\n  color: #6c080b;\n}\n```\n\nThe formatter is then linked via the column on the formatter setting. When the grid cell is rendered the formatter function is called and the following arguments are passed in.\n\n- `rowData` The current row's data from the data array.\n- `columnData` The column object with all of the column configuration for this cell.\n\n## Events\n\n- `activecellchanged` Fires when the active cell changes with the keyboard or by click.\n- `sorted` Fires when the sort column is changed.\n- `selectionchanged` Fires any time the selection changes.\n- `activationchanged` Fires any time the active row changes.\n- `rowselected` Fires for each row that is selected.\n- `rowdeselected` Fires for each row that is deselected.\n- `rowactivated` Fires for each row that is activated.\n- `rowdeactivated` Fires for each row that is deactivated.\n- `rowclick` Fires for each row that is clicked.\n- `dblclick` Fires each time double clicked on body cells or header cells. Based on where it clicked details can be capture like `type: 'body-cell'|'header-title'|'header-filter'` etc.\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n- `columnresized` Fires when a column is resized or setColumnWidth is called.\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto\n- `rowExpanded` Fires when a tree or expandable row is expanded or collapsed\n- `rowCollapsed` Fires when a tree or expandable row is expanded or collapsed\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called.\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto.\n- `beforemenushow` Fires before context menu show, you can return false in the response to veto.\n- `menushow` Fires after context menu show.\n- `menuselected` Fires after context menu item selected.\n- `settingschanged` Fires after settings are changed in some way.\n- `scrollstart` Fires when data-grid reaches the topmost row.\n- `scrollend` Fires when data-grid reaches the bottommost row.\n- `afterrendered` Fires after rendered the data grid.\n\n## Methods\n\n- `setColumnWidth` Can be used to set the width of a column.\n- `setColumnVisibility` Can be used to set the visibility of a column.\n- `setActivateCell(cell, row)` Can be used to set focus of a cell.\n- `selectedRows` Lists the indexes of the currently selected rows.\n- `saveSetting(setting: string)` Save the given setting to local storage.\n- `saveAllSettings` Save all user settings to local storage.\n- `savedSetting(setting: string)` Get saved given setting value from local storage.\n- `allSavedSettings` Get saved all user settings from local storage.\n- `clearSetting(setting: string, key?: string)` Clear the given saved setting from local storage.\n- `clearAllSettings(userKeys: unknown)` Clear saved all user settings from local storage.\n- `restoreSetting(setting: string, value?: unknown)` Restore the given saved setting from local storage.\n- `editFirstCell` Puts the first cell on the active row into edit mode.\n- `appendData(data: Record<string, unknown>)` Use this to add more data to the datagrid's existing dataset.  This will automatically render additional rows in the datagrid.\n- `addRow(data: Record<string, unknown>, index?: number)` Adds a new row at optional row index and defaults the values to all those provided in the data\n- `addRows(data: Array<Record<string, unknown>>, index?: number)` Adds multiple new rows at optional row index and defaults the values to all those provided in the data\n- `removeRow(index: number)` Removed the provided row index from the dataset and visual datagrid\n- `clearRow(index: number)` Clears all values on the given row.\n- `commitCellEdit` Stops editing and commits the value in the active editor.\n- `cancelCellEdit` Stops editing and reverts the value in the active editor.\n- `resetDirtyCells` Clears all dirty cell indicators.\n- `dirtyCells` Gives a list of all currently dirty cells.\n- `exportToExcel(format: 'csv' | 'xlsx', filename: string, keepGridFormatting: boolean)` Export datagrid datasource to an excel file. This keeps grid formatting by default.\n- `collapseAll()` Collapse all expandable or tree rows.\n- `expandAll()` Expand all expandable or tree rows.\n- `toggleAll(opt: boolean)` Toggle collapse/expand all expandable or tree rows. `opt false`: will expand all, `opt: true`: will collapse all\n- `refreshRow` IdsDataGridRow method to refresh row element and its cells.\n- `refreshCell` IdsDataGridCell method to refresh cell element.\n- `updateDataset(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row.\n- `updateDatasetAndRefresh(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row and refreshes row/cells UI.\n\n## Filters\n\nData rows can be filter based on one or several criteria. Whole filter row can turned on/off by the api setting `filterable` and can be disabled by the api setting `filter-row-disabled`. The filter conditions can be applied thru the UI or programmatically. Each column can have its own filter type and turn on/off by columns setting.\n\n### Filter Columns Setting\n\nAll the filter settings can be passed thru columns data.\n\n|Setting|Type|Description|\n|---|---|---|\n|`filterType` | Function | Data grid built-in filter method, see the dedicated section below. |\n|`filterConditions` | Array | List of items to be use as operators in menu-button or options in dropdown. |\n|`filterFunction` | Function | User defined filter method, it must return a boolean. |\n|`filterOptions` | Object | Setting for components are in use, for example: `label, placeholder, disabled`. |\n|`isChecked` | Function | User defined filter method, it must return a boolean. This method use along built-in `checkbox` only, when filter data value is not boolean type. |\n\n### Built-in Filter Methods\n\n|Method|Description|\n|---|---|\n|`text` | It filter as text comparison. Contains input and menu-button with list of default operators. |\n|`integer` | It filter as integer comparison. Contains input and menu-button with list of default operators. |\n|`decimal` | It filter as decimal comparison. Contains input and menu-button with list of default operators. |\n|`contents` | It filter as text comparison. Contains dropdown and auto generate list of items based on column data. |\n|`dropdown` | It filter as text comparison. Contains dropdown and must pass list of item by setting `filterConditions`. |\n|`checkbox` | It filter as boolean comparison. Contains menu-button with list of default operators. |\n|`date` | It filter as date comparison. Contains date-picker and menu-button with list of default operators. |\n|`time` | It filter as time comparison. Contains time-picker and menu-button with list of default operators. |\n\n### Custom Filter\n\nIf the built-in filters are not enough, creating a custom filter is an option. There are two parts you can create both parts custom or mix-match with built-in.\n\n1. `UI Only` In order to do custom UI part of filter, add as html markup thru a slot. It must use slot and column-id attributes for example: `<div slot=\"filter-n\" column-id=\"n\">...</div>` where n is the columnId same passed in the columns.\n1. `filterFunction` This is a user defined filter method which must return a boolean. It determines if a cell value should be considered as a valid filtered value.\n1. `disableClientFilter` This is an api setting to disable filter logic client side. It will set filter conditions and fire an event `filtered` which can listen for custom logic.\n\n### Filter Code Examples\n\nBasic text filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nNo filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"false\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisabled filter row, will disabled all attached filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\" filter-row-disabled=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nHyperlink, integer, decimal, date and time filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'hyperlink',\n  name: 'Hyperlink',\n  field: 'description',\n  href: '#',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.hyperlink\n});\ncolumns.push({\n  id: 'integer',\n  name: 'Integer',\n  field: 'price',\n  filterType: dataGrid.filters.integer,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'decimal',\n  name: 'Decimal',\n  field: 'price',\n  filterType: dataGrid.filters.decimal,\n  formatter: dataGrid.formatters.decimal,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'date',\n  name: 'Date',\n  field: 'publishDate',\n  filterType: dataGrid.filters.date,\n  formatter: dataGrid.formatters.date\n});\ncolumns.push({\n  id: 'time',\n  name: 'Time',\n  field: 'publishDate',\n  filterType: dataGrid.filters.time,\n  formatter: dataGrid.formatters.time\n});\n```\n\nSome filter options label, placeholder, disabled.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterOptions: {\n    label: 'Label text for description input',\n    placeholder: 'Placeholder text for description input',\n    disabled: true\n  }\n});\n```\n\nCustom operators items for menu-button.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterConditions: [{\n    value: 'contains',\n    label: 'Contains',\n    icon: 'filter-contains'\n  },\n  {\n    value: 'equals',\n    label: 'Equals',\n    icon: 'filter-equals',\n    selected: true\n  }]\n});\n```\n\nContents and dropdown type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'location',\n  name: 'Location',\n  field: 'location',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.contents,\n  filterOptions: {\n    notFilteredItem: { value: 'not-filtered', label: 'Not Filtered' }\n  }\n});\ncolumns.push({\n  id: 'useForEmployee',\n  name: 'NotFilterdItem (shown as blank)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\ncolumns.push({\n  id: 'useForEmployeeCustomNotFilterdItem',\n  name: 'NotFilterdItem (show as custom text)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'not-filtered', label: 'Not Filtered' },\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\n```\n\nCheckbox type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'checkbox',\n  name: 'Checkbox',\n  field: 'inStock',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox\n});\ncolumns.push({\n  id: 'customCheckMethod',\n  name: 'Custom check method',\n  field: 'active',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox,\n  isChecked: (value) => value === 'Yes'\n});\n```\n\nCustom filter method.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\n// Custom filter checking\nconst myCustomFilter = (opt) => {\n  const { operator, columnId, value } = opt.condition;\n  const val = {\n    condition: Number.parseInt(value, 10),\n    data: Number.parseInt(opt.data[columnId], 10)\n  };\n  let isMatch = false;\n  if (Number.isNaN(val.condition) || Number.isNaN(val.data)) return isMatch;\n\n  if (operator === 'equals') isMatch = (val.data === val.condition);\n  if (operator === 'greater-than') isMatch = (val.data > val.condition);\n  if (operator === 'greater-equals') isMatch = (val.data >= val.condition);\n  if (operator === 'less-than') isMatch = (val.data < val.condition);\n  if (operator === 'less-equals') isMatch = (val.data <= val.condition);\n\n  return isMatch;\n};\n\nconst columns = [];\ncolumns.push({\n  id: 'customFilterMethod',\n  name: 'Custom Filter Method',\n  field: 'price',\n  filterFunction: myCustomFilter,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\n```\n\nCustom filter UI part.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n  <div slot=\"filter-description\" column-id=\"description\">\n    <ids-menu-button id=\"btn-filter-description\" icon=\"filter-greater-equals\" menu=\"menu-filter-description\" dropdown-icon>\n      <span class=\"audible\">Greater Than Or Equals</span>\n    </ids-menu-button>\n    <ids-popup-menu id=\"menu-filter-description\" target=\"#btn-filter-description\">\n      <ids-menu-group select=\"single\">\n        <ids-menu-item value=\"equals\" icon=\"filter-equals\">Equals</ids-menu-item>\n        <ids-menu-item value=\"greater-than\" icon=\"filter-greater-than\">Greater Than</ids-menu-item>\n        <ids-menu-item value=\"greater-equals\" icon=\"filter-greater-equals\" selected=\"true\">Greater Than Or Equals</ids-menu-item>\n        <ids-menu-item value=\"less-than\" icon=\"filter-less-than\">Less Than</ids-menu-item>\n        <ids-menu-item value=\"less-equals\" icon=\"filter-less-equals\">Less Than Or Equals</ids-menu-item>\n      </ids-menu-group>\n    </ids-popup-menu>\n    <ids-input id=\"input-filter-description\" type=\"text\" size=\"full\" placeholder=\"Slotted description\" label=\"Slotted description input\">\n    </ids-input>\n  </div>\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisable client filter\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" disable-client-filter=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n\ndataGrid.addEventListener('filtered', (e: any) => {\n  console.info('filtered:', e.detail);\n});\n```\n\n### Filter rows programmatically\n\n```js\n// Filter rows\nconst conditions = [{ columnId: 'description', operator: 'contains', value: '5' }];\ndataGrid.applyFilter(conditions);\n\n// Reset all filters\ndataGrid.applyFilter([]);\n```\n\n### Filter Events\n\nThe following events are relevant to data-grid filters.\n\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n\n## Custom cell colors\n\nIn some cases, it may be desirable to customize the background color of cells.  This can be done with the `cssPart` column setting:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell'\n});\n```\n\nThe `cssPart` property is translated into a `part` attribute that is applied to every cell in the column.  In the event the color needs to be conditional based on the row index or other logic, a function can be used:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2')\n  // ...\n});\n```\n\nAfter this is defined, accompanying CSS can be written to target the parts `custom-cell`, `custom-cell-1`, and `custom-cell-2` to change background color or other CSS properties of the cell:\n\n```css\nids-data-grid::part(cell) {\n  background-color: #ebf9f1;\n}\n\nids-data-grid::part(cell-selected) {\n  background-color: #c9dad0;\n}\n```\n\n### Changing selected cell colors\n\nAnother column setting, `cellSelectedCssPart` can be used alongside `cssPart` to customize the selected color of the row in a similar way.  When using `mixed` selection, this color is also applied to activated rows:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell',\n  cellSelectedCssPart: 'custom-cell-selected'\n});\n```\n\nThis column setting can also be a function, just like `cssPart`:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2'),\n  cellSelectedCssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-selected-1' : 'custom-cell-selected-2')\n  // ...\n});\n```\n\n## Tooltip Code Examples\n\nSet suppress tooltips to turn off.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" suppress-tooltips>\n</ids-data-grid>\n```\n\nSet custom tooltip strings.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: 'This is a product Id',\n  headerTooltip: 'This is the product Id header title',\n  headerIconTooltip: 'This is product Id header icon',\n  filterButtonTooltip: 'This is the product Id filterButton'\n});\n```\n\nSet tooltip as callback.\n\n```js\nconst tooltipCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return `Text: ${text}<br/>Header Row: ${rowIndex}, Cell: ${columnIndex}`;\n  } else if (type === 'filter-button') {\n    return `Text: ${text}<br/>FilterButton Row: ${rowIndex}, Cell: ${columnIndex}`;\n  }\n  return `Text: ${text}<br/>for Row: ${rowIndex}, Cell: ${columnIndex}`;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: tooltipCallback\n});\n```\n\nSet tooltip custom options.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: {\n    placement: 'top',\n    headerPlacement: 'top',\n    headerIconPlacement: 'top',\n    filterButtonPlacement: 'bottom',\n    x: 0,\n    y: 10,\n    headerX: 0,\n    headerIconX: 0,\n    headerY: 10,\n    headerIconY: 10,\n    filterButtonX: 0,\n    filterButtonY: 22\n  }\n});\n```\n\nSet tooltip options as callback.\n\n```js\nconst tooltipOptionsCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return { headerPlacement: 'top', headerX: 0, headerY: 10 };\n  } else if (type === 'header-icon') {\n    return { headerIconPlacement: 'top', headerIconX: 0, headerIconY: 10 };\n  } else if (type === 'filter-button') {\n    return { filterButtonPlacement: 'bottom', filterButtonX: 0, filterButtonY: 22 };\n  }\n  return { placement: 'top', x: 0, y: 10 };\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: tooltipOptionsCallback\n});\n```\n\nSet tooltip custom css.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: 'custom-turquoise',\n  headerTooltipCssPart: 'custom-turquoise',\n  headerIconTooltipCssPart: 'custom-turquoise',\n  filterButtonTooltipCssPart: 'custom-turquoise'\n});\n```\n```css\n/* tooltip css part `custom-turquoise` */\nids-data-grid::part(custom-turquoise-tooltip-arrow-top)::after {\n  border-top-color: #2f8d8e;\n}\nids-data-grid::part(custom-turquoise-tooltip-popup) {\n  background-color: #2f8d8e;\n}\n```\n\nSet tooltip custom css as callback.\n\n```js\nconst tooltipCssPartCallback = (args: { type: string }): string => {\n  const { type } = args;\n  let cssPart = '';\n  // Set random css part each time, for `body-cell` tooltips\n  if (type === 'body-cell') {\n    const parts = ['azure', 'ruby'];\n    const randomIndex = Math.floor(Math.random() * parts.length);\n    cssPart = parts[randomIndex];\n  }\n  return cssPart;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: tooltipCssPartCallback\n});\n```\n```css\n/* tooltip css part `azure` */\nids-data-grid::part(azure-tooltip-arrow-top)::after {\n  border-top-color: #0066d4;\n}\nids-data-grid::part(azure-tooltip-popup) {\n  background-color: #0066d4;\n}\n\n/* tooltip css part `ruby` */\nids-data-grid::part(ruby-tooltip-arrow-top)::after {\n  border-top-color: #c31014;\n}\nids-data-grid::part(ruby-tooltip-popup) {\n  background-color: #c31014;\n}\n```\n\n## context menu Code Examples\n\nThe context menus can be set via the dataset.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n</ids-data-grid>\n```\n```js\n// Dataset for header cells context menu\nconst headerMenuData = {\n  id: 'grid-header-context menu',\n  contents: [{\n    id: 'header-actions-group',\n    items: [\n      { id: 'actions-split', value: 'actions-split', text: 'Split' },\n      { id: 'actions-sort', value: 'actions-sort', text: 'Sort' },\n    ]\n  }],\n};\n\n// Dataset for body cells context menu\nconst menuData = {\n  id: 'grid-context menu',\n  contents: [{\n    id: 'actions-group',\n    items: [\n      { id: 'item-1', value: 'item-1', text: 'Item One' },\n      { id: 'item-2', value: 'item-2', text: 'Item Two' },\n      { id: 'item-3', value: 'item-3', text: 'Item Three' }\n    ]\n  }],\n};\n\n// Set context menu data with data-grid\ndataGrid.menuData = menuData;\ndataGrid.headerMenuData = headerMenuData;\n\n// Set to return true/false in the response to veto before context menu show.\ndataGrid.addEventListener('beforemenushow', (e: any) => {\n  console.info('before context menu show', e.detail);\n  // e.detail.response(false);\n});\n\n// Set to watch after context menu show.\ndataGrid.addEventListener('menushow', (e: any) => {\n  console.info('After context menu show', e.detail);\n});\n\n// Set to watch after context menu item selected.\ndataGrid.addEventListener('menuselected', (e: any) => {\n  console.info('context menu item selected', e.detail);\n});\n```\n\nSet context menu thru Slot.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n  <!-- context menu header cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"header-context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n      <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n  <!-- context menu body cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n      <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n      <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n      <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n</ids-data-grid>\n```\n\nSet context menu thru ID.\n\n```html\n<ids-data-grid\n  header-menu-id=\"grid-header-context menu\"\n  menu-id=\"grid-context menu\"\n  id=\"data-grid-1\"\n  label=\"Books\"\n></ids-data-grid>\n\n<!-- context menu header cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-header-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n    <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n\n<!-- context menu body cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n    <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n    <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n    <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n```\n\n## Empty Message\n\nSet empty message thru slot (markup).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-slot\" label=\"Books\">\n  <ids-empty-message hidden icon=\"empty-search-data-new\" slot=\"empty-message\">\n    <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">No Data</ids-text>\n    <ids-text hidden label=\"true\" slot=\"description\">There is no data available.</ids-text>\n  </ids-empty-message>\n</ids-data-grid>\n```\n\nSet empty message thru settings (markup).\n\n```html\n<ids-data-grid\n  id=\"data-grid-em-thru-settings\"\n  label=\"Books\"\n  empty-message-icon=\"empty-error-loading-new\"\n  empty-message-label=\"No Data\"\n  empty-message-description=\"There is no data available.\"\n></ids-data-grid>\n```\n\nSet empty message thru settings (javascript).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-settings-js\" label=\"Books\">\n</ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-em-thru-settings-js');\ndataGrid.emptyMessageIcon = 'empty-error-loading-new';\ndataGrid.emptyMessageLabel = 'No Data';\ndataGrid.emptyMessageDescription = 'There is no data available.';\n```\n\n## Row Height\n\nAs mentioned in the settings section you can change the row height by setting the rowHeight option.\n\n```html\n     <ids-data-grid id=\"data-grid-row-height\" row-height=\"md\"></ids-data-grid>\n```\n\nIts worth mentioning the characteristics and usage for each one.\n\nLarge (`row-height=\"lg\"`) - Row Height is 50. The default row height, header is 16px and body cells are 16px. 16px padding on cells and header. You should use this most of the time if there is plenty of room on the UI and to avoid the UI looking crowded.\nMedium (`row-height=\"md\"`) - Row Height is 40. Header is 16px and body cells are 16px. 12px padding on cells and header. If you need to see a few more rows but still want to avoid a crowded UI, this is the next best option.\nSmall (`row-height=\"sm\"`) - Row Height is 35. Header is 16px and body cells are 16px. 8px padding on cells and header. This is the smallest option that is recommended for readability and spacing.\nExtra Small (`row-height=\"xs\"`) - Row Height is 30. Header is 14px and body cells are 14px. 8px padding on cells and header. If you need a very compressed data grid with a lot of data you can use this option. But there is a trade off of bad readability and spacing.\nExtra Extra Small (`row-height=\"xxs\"`) - Row Height is 25. Header is 14px and body cells are 14px. 2px padding on cells and header. Avoid this option as it is very crowded but it is included for edge cases.\n\n## States and Variations\n\n**Rows**\n- Hover\n- Selected\n- Disabled\n- Readonly\n- Activated\n\n**Columns**\n- Focus\n- Hover\n- Sorted\n- Selected\n- Disabled\n- Filtered\n\n**Cells**\n- Hover (sometimes a cursor change)\n- Readonly\n- Focus\n- Checked/Not Checked (Checkboxes)\n\n## Keyboard Guidelines\n\n- <kbd>Tab</kbd>The initial tab enters the grid with focus on the first cell of the first row, often a header. A second tab moves out of the grid to the next tab stop on the page. Once focus is established in the grid, a TAB into or a Shift Tab into the grid will return to the cell which last had focus. If in edit mode will finish editing and start editing the next cell.\n- <kbd>Shift + Tab</kbd> Moves the reverse of tab. If in edit mode will finish editing and start editing the previous cell.\n- <kbd>Left</kbd> and <kbd>Right</kbd> Move focus to the adjacent column's cell. There is no wrap at the end or beginning of columns.\n- <kbd>Up</kbd> and <kbd>Down</kbd> Move focus to the adjacent row's cell. There is no wrap at the first or last row.\n- <kbd>Home</kbd> moves focus to the first cell of the current row\n- <kbd>End</kbd> moves focus to the last cell of the current row\n- <kbd>Page Up</kbd> moves focus to the first cell in the current column\n- <kbd>Page Down</kbd> moves focus to the last cell in the current column\n- <kbd>Space</kbd> Toggles selection the activate row. If suppressRowDeselection is set it will be ignored on deselect. If the cell contains an expandable element then the row will toggle the expanded state. If the cell contains a checkbox editor, will toggle the checkbox state.\n- <kbd>F2</kbd> toggles actionable mode. Pressing the <kbd>Tab</kbd> key while in actionable mode moves focus to the next actionable cell. While in actionable mode you can do things like type + enter. This will move you down a row when you hit enter. If the cell has a control that uses down arrow (like the drop downs or lookups that are editable). Then the user needs to hit enter to enable the edit mode on that cell.\n- <kbd>Triple Click</kbd> Not a keyboard shortcut, but if you have text in a cell that is overflowed a triple click will select all the text even the part that is invisible.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Enter</kbd> Activates edit mode on the cell if it is editable. There is also an \"auto edit detection\". If the user starts typing then edit mode will happen automatically without enter. If in edit mode already <kbd>Enter</kbd> will finish edit mode. If `editNextOnEnterPress` is enabled then editing will start on the same column in next row.\n- <kbd>Shift + Enter</kbd> Same as enter but if `editNextOnEnterPress` is enabled then editing will start on the same column in previous row.\n- <kbd>F2</kbd> Finish editing same as Enter. But if `editNextOnEnterPress` is enabled, will stay in same cell. `cancelEditMode` will fire.\n- <kbd>CMD/CTRL + Enter</kbd> Finish editing same as Enter.\n- <kbd>ESC</kbd> Revert to the previous value and cancel editing. `cancelEditMode` will fire.\n\n## Responsive Guidelines\n\n- By default, data grid grows depending on the amount of contents within and will scroll if necessary under the header. It stops growing when it reaches the size of the parent container.\n- `autoFit` property or `auto-fit` attribute can be set manually to make the data grid size fill and be responsive to the size of the screen, regardless of the amount of contents.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Counts have all new markup and classes.\n\n**4.x to 5.x**\n- Data grid has all new markup and a custom element but some similarly named options\n- Still uses same columns and data set options. Some column options enhanced and changed.\n- If using events events are now plain JS events for example: sorted, rendered\n- Some Api Functions have changed\n- If using properties/settings these are now attributes or as plain properties for example: data, virtual-scroll\n- Markup has changed to a custom element `<ids-data-grid></ids-data-grid>`\n- Can now be imported as a single JS file and used with encapsulated styles\n- `Drill Down` Formatter is now covered by `Button` formatter with `icon=\"drilldown\"`\n- `textOverflow` setting is now by default\n- `rowNavigation` setting has replaced `cellNavigation`. Cell navigation is the default behavior.\n- `stretchColumn` is now more flexible and can be achieved by setting a column width to `minmax(130px, 4fr)`. I.E. some min width and a `fr` unit equal to the remaining number of columns (or similar variations).\n- split columns are not supported anymore but could be done with a custom formatter if needed\n- `frozenColumns` setting is now set on each column by adding `frozen: 'left'` or `frozen: 'right'` to the column definition.\n- Some events are renamed see the events section for more details, also the signature of the events has changed.\n- Custom formatter functions can now be any type of function and have a different signature.\n- The `expanded` column option for tree was renamed to `rowExpanded`.\n- The `expandrow/collapserow` events are renamed to `rowexpanded/rowcollapsed`\n- The `beforeentereditmode/entereditmode/exiteditmode` event is renamed to `beforecelledit/celledit/endcelledit/cancelcelledit`\n- The `actionablemode` feature has been replaced with simply tabbing to the next editable field when in edit mode.\n\n## Accessibility Guidelines\n\n1.1.1 Non-text Content - All images, links and icons have text labels for screen readers when the formatters are used.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and links and images of text has a contrast ratio of at least 4.5:1.\n- 2.1.1 Keyboard - Make all functionality available from a keyboard. The grid has keyboard shortcuts and is usable with a screen reader due to the addition of aria tags.\n- A datagrid in general including this one uses the following aria tags\n  - `aria-label` labels the enter table on the main table\n  - `aria-rowcount` lists the visible row count on the main table\n  - `aria-colindex` the index of each column on the column elements\n  - `aria-rwindex` the index of each row on the row elements\n  - `aria-setsize` for tree grid lists the number of elements in each level (group)\n  - `aria-level` the level of indentation\n  - `aria-posinset` the depth into each set\n  - `aria-expanded` on the row it indicates if the row is expanded (for tree and expandable row)\n  - `aria-sort` indicates the sort direction on the sortable columns\n  - `aria-checked` indicates if the element is checked on checkbox columns and headers\n\n## Regional Considerations\n\nTitles and labels should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n\n## Code Separation (For Developers)\n\nThe code is divided into several files. Here is a description of where everything is.\n\n- `ids-data-grid-cell.ts` creates a non-shadow root `ids-data-grid-cell`, and handles its own selection, and activation.\n- `ids-data-grid-cell.scss` contains all css related to `.ids-data-grid-cell` and its children\n- `ids-data-grid-contextmenu.ts` contains code in the form of export functions, that adds ability to get right click menus on headers and cells\n- `ids-data-grid-filter.scss` contains all css related to the filter row and its children\n- `ids-data-grid-filter.ts` contains code to implement the filtering functionality and its ui (some functions are in ids-data-source)\n- `ids-data-grid-formatters.ts` contains all formatter functions and some supporting code like data extraction\n- `ids-data-grid-header.ts` contains most header functionality, the header template, and code related to header actions like sort, reorder and selection.\n- `ids-data-grid-header.scss` contains all css related to `.ids-data-grid-header` and its children\n- `ids-data-grid-row.ts` contains most row functionality, the row template, and code related to row actions like expand, collapse, select, activate\n- `ids-data-grid-row.scss` contains all css related to `.ids-data-grid-row` and its children\n- `ids-data-grid-tooltip-mixin.js` contains a tooltip mixin that adds tooltip functionality to cells and headers, its different from `ids-tooltip-mixin` (more specific)\n- `ids-data-grid.js` contains all main data grid code, the api and settings and the main generator loop for the data grid\n"}},{"name":"ids-data-grid-save-settings-mixin","attributes":[{"name":"settings","description":"Settings to use with local storage.","values":[]},{"name":"#valSettings","description":"List of values for each setting.","values":[]},{"name":"#saveMode","description":"State to check if can be able to save.","values":[]},{"name":"#restored","description":"List of restored options.","values":[]},{"name":"saveActivePage","description":"Sets to save active page","values":[]},{"name":"saveColumns","description":"Sets to save columns","values":[]},{"name":"saveFilter","description":"Sets to save filter","values":[]},{"name":"savePageSize","description":"Sets to save page size","values":[]},{"name":"saveRowHeight","description":"Sets to save row height","values":[]},{"name":"saveSortOrder","description":"Sets to save sort order","values":[]},{"name":"saveUserSettings","description":"Sets to save all user settings","values":[]}],"description":{"kind":"markdown","value":"# Ids Data Grid\n\n## Description\n\nThe data grid component (ids-data-grid) is used to arrange tabular data in rows and columns for easier scanning and comparison. Data grids are very configurable in both design and functionality and they can be found within almost every product/app.\n\nYou should pass an array of objects in to the grid on the `dataset` object. Also pass the `columns` array which contains the column configuration. There are a number of events described in the events and API section, as well as the column settings.\n\nA Read-Only data grid uses \"Formatters\" to render cell content. A number of these are listed in the API section and it is possible to create your own.\n\n## Use Cases\n\n- The data grid component is most useful when it is used for categorically sorting dense and repetitive information. Each individual item is listed down the Y axis of the chart, and their shared attribute categories are listed along the X axis. The resulting cells are filled with information that is relevant to the corresponding item and attribute.\n\n## Terminology\n\n- **Title**: The name of the data grid optionally appearing above the grid and describing the contents.\n- **Options**: An optionally actions menu button with functionality that operates on the entire data grid.\n- **Cell**: Body elements of the data grid that contain an object's value or attribute. Cells should only contain one type of content or it can be confusing and hurt accessibility.\n- **Header Cell**: These cells contain the names of the columns in the grid and related functions like filtering and sorting. All cells below the header cell will hold values related to the attribute in the header cell.\n- **Column**: Cells stacked vertically that contain values relate to the attribute found on the top header cell.\n- **Row**: Each row contains one cell per column in the data grid, and each cell displays a single value in the bound data item.\n- **Tree**: Denotes the use of hierarchical data, with an expandable and collapsible hierarchy.\n\n## Themeable Parts\n\n- `table` allows you to further style the table main element\n- `container` allows you to further style the container element\n- `body` allows you to further style the body element\n- `header` allows you to further style the header element\n- `headerCell` allows you to further style the header cells\n- `row` allows you to further style the rows\n- `cell` allows you to further style the row cells\n- `cell-selected` allows you to further style row cells that are selected (in mixed-selection mode, activated cells are also styled)\n- `tooltip-popup` allows you to further style or adjust the outer tooltip popup element\n- `tooltip-arrow` allows you to adjust the tooltip arrow element\n\n## Features (With Code Examples)\n\nA data grid is created by adding an `ids-data-grid` html element in the page and setting the options either inline in the markup or in the JS part of the code. You can only use simple types (string, boolean ect) for inline markup so passing the data and column arrangement is always done in the JS part. The data will be an array of objects so its in the correct tabular form. The columns are also an array of objects but with defined options and types. See more about columns in next section.\n\n```html\n<ids-data-grid id=\"data-grid-1\"></ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-1');\ndataGrid.data = dataset;\ndataGrid.columns = columns;\n```\n\n### Column Groups\n\nSetting column groups allows you to add a second level of columns in your header and the ability to group the first level. This is useful for when you have a large number of columns and you want to group them into logical or related sections.\n\nColumn groups are achieved by providing an array to the `columnGroups` setting. Only one level of column groups can be defined.\n\n```js\ndataGrid.columnGroups = [\n{\n  colspan: 3,\n  id: 'group1',\n  name: 'Column Group One',\n  align: 'center'\n},\n{\n  colspan: 2,\n  id: 'group2',\n  name: 'Column Group Two'\n},\n{\n  colspan: 2,\n  id: 'group3',\n  name: 'Column Group Three',\n  align: 'right'\n},\n{\n  colspan: 11,\n  id: 'group4',\n  name: 'Column Group Four',\n  align: 'left'\n}\n];\n```\n\nIf the column is hidden it will be automatically removed from the `colspan`. If in the last group you didn't provided a bug enough `colspan` it will be set to the remaining columns. The `name` text can be right or left aligned and given an id. The only required property is `colspan`.\n\n### Selection\n\nThe data grid selection feature involves the setting `rowSelection`. This can be one of several values.\n\n- `false` No selection enabled.\n- `multiple` Allows multiple rows to be selected. When doing this it is recommended to add a `formatters.selectionCheckbox` for the first column.\n- `single` Allows a single row to be selected. When doing this you can optionally to add a `formatters.selectionRadio` for the first column. You can use the `suppressRowDeselection` if you want one row to always be selected.\n- `mixed` Allows multiple rows to be selected by clicking only on the checkbox or <kbd>Space</kbd> key. If clicking a row then that row is activated, meaning it is the current row and something might be shown based on the data of that row. You can use the `suppressRowDeactivation` if you want one row to always be selected.\n\nHere is a code example for multi select\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" row-selection=\"multiple\">\n</ids-data-grid>\n```\n\n```js\n  dataGrid.addEventListener('rowselected', (e) => {\n    console.info(`Row Selected`, e.detail);\n  });\n\n  dataGrid.addEventListener('rowdeselected', (e) => {\n    console.info(`Row Deselected`, e.detail);\n  });\n\n  dataGrid.addEventListener('selectionchanged', (e) => {\n    console.info(`Selection Changed`, e.detail);\n  });\n```\n\nThe following events are relevant to selection/activation.\n\n`rowselected` Fires when an individual row is activation and gives information about that row.\n`rowdeselected` Fires when an individual row is deselected and gives information about that row.\n`selectionchanged` Fires once for each time selection changes and gives information about all selected rows.\n\n`rowactivated` Fires when an individual row is activated and gives information about that row.\n`rowdeactivated` Fires when an individual row is deactivated and gives information about that row.\n`activationchanged` Fires once for each time activation changes and gives information about the active row.\n\n### Tree Grid\n\nThe tree grid feature involves the setting `treeGrid` to true. In addition the data passed to the tree grid should contain a field called `children`. That contains the child rows. This can by unlimited levels but 2-4 is recommended as a max for a more usable UI. In addition you can preset some states by adding `rowExpanded: false` to the parent elements (default is expanded). And also set `rowHidden: false` for child rows that are expanded. You also need a `Expander` formatter on a cell (usually the first visible cell.\n\nHere is a code example for a tree grid.\n\n```html\n<ids-data-grid id=\"tree-grid\" label=\"Buildings\" tree-grid=\"true\" group-selects-children=\"true\"></ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to selection/activation.\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `groupSelectsChildren` {boolean} If the tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `suppressRowClickSelection` {boolean} If using selection you might want to set this so clicking a row will not select it.\n### Expandable Row\n\nThe Expandable Row feature involves the setting `expandableRow` to true. In addition a row template should be provided via an id that points to the `expandableRowTemplate` which is a `template` element. You can preset the expandable state by adding `rowExpanded: true` to the row element you want to expand. The default is collapsed.\n\nHere is a code example for an expandable row\n\n```html\n<ids-data-grid\n    id=\"data-grid-expandable-row\"\n    expandable-row=\"true\"\n    expandable-row-template=\"expandable-row-tmpl\"\n    label=\"Books\">\n    <template id=\"expandable-row-tmpl\">\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"16\" type=\"span\">${convention}</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">${price} USD</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">Lorem Ipsum is simply sample text of the printing and typesetting industry. Lorem Ipsum has been the industry standard sample text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only...</ids-text>\n        </ids-layout-grid>\n    </template>\n</ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to expandable rows\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRowTemplate` {string} Should point to the row `template` element.\n\n### Editing\n\nThe Editing features start by setting `editable` to true. In addition you should add editors to columns and enable features of each of the editors. The features differ depending on the component used for editing. See the Keyboard section for information on which keys can be used when editing..\n\nHere is a code example for an editable text cell.\n\n```js\ncolumns.push({\n    id: 'description',\n    name: 'Description',\n    field: 'description',\n    sortable: true,\n    resizable: true,\n    reorderable: true,\n    formatter: dataGrid.formatters.text,\n    editor: {\n      type: 'input',\n      inline: true,\n      editorSettings: {\n        autoselect: true,\n        dirtyTracker: true\n      }\n    }\n  });\n```\n\nHere is a code example for an editable dropdown cell\n\n```js\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  resizable: true,\n  reorderable: true,\n  formatter: dataGrid.formatters.dropdown,\n  editor: {\n    type: 'dropdown',\n    editorSettings: {\n      dirtyTracker: true,\n      validate: 'required',\n      options: [\n        {\n          label: 'Option 1',\n          value: 'opt1'\n        },\n        {\n          label: 'Option 2',\n          value: 'opt2'\n        }\n      ]\n    }\n  }\n});\n```\n\nTo cancel or disabled editing there are a few ways:\n\n- setting the column `editor` setting to undefined will disable editing on the column (as will not having an editor setting at all).\n- adding a `readonly` or `disabled` function which returned true for some cells based on a condition will disable or mark the cell readonly.\n- return false in the `beforecelledit` event in the response function\n\nThe following settings are available on editors.\n\n`type` As of now can be `checkbox`, `input`, `datepicker`, `timepicker`, or `dropdown` but more will be added.\n`inline` Default is false. If true the editor (for example an input) will be visible in a field.\n`editorSettings` Is an object that is loosely typed that lets you pass any option the editor supports in. For example any of the IdsInput or IdsCheckbox options can be passing in. Some special ones are:\n`editorSettings.autoselect` Text will be selected when entering edit mode\n`editorSettings.dirtyTracker` Enables the dirty tracker that marks changed cells.\n`editorSettings.validate` Text will be selected when entering edit mode\n`editorSettings.mask` Will pass mask settings to the input (if supported).\n`editorSettings.maskOptions` Will pass maskOptions settings to the input (if supported).\n`editorSettings.options` Dataset used for dropdown editor's list box options.\n\nWhen the use clicks in the cell or activates editing with the keyboard with the Enter key and types. The following events will fire.\n\n`beforecelledit` Fires before a cell is being edit (before edit is started). Can be vetoed by returning false as shown below.\n`celledit` Fires exactly when a cell is being edited.\n`endcelledit` Fires when a cell edit is completed and changed.\n`cancelcelledit` Fires when an edit is cancelled via the <kbd>Esc</kbd> key.\n\nTo cancel editing based on some condition or if editing is not allowed you can veto the `beforecelledit` event.\n\n```js\n  dataGrid.addEventListener('beforecelledit', (e: Event) => {\n    (<CustomEvent>e).detail.response(false);\n  });\n```\n\nThere are a few utility functions for editing the data grid mentioned in the Methods section.\n\n## Settings and Attributes\n\nWhen used as an attribute in the DOM the settings are kebab case, when used in JS they are camel case.\n\n- `virtualScroll` {boolean} When virtual scroll is used the grid can render many thousands of rows and only the rows visible in the scroll area are rendered for performance. This setting has limitations such as the rows need to be fixed size.\n- `addNewAtEnd` {boolean} Automatically append rows while keyboard navigating data grid in edit mode.\n- `alternateRowShading` {boolean} For better scan-ability you can shade alternate rows.\n- `listStyle` {boolean} Sets the style of the grid to list style for simple readonly lists.\n- `columns` {Array<object>} Sets the columns array of the data grid. See column settings.\n- `columnGroups` {Array<object>} Allows you to group columns together in logical sets. See section below for details.\n- `rowHeight` {string | `'xxs'` | `'xs'` | `'sm'` | `'md'` | `'lg'`} Sets the height and padding of each row. In smaller row heights the font is lowered.\n- `data` {Array<object>} Sets the data to show in the data grid. This can be a JSON Array.\n- `disableClientFilter` {boolean} Disables the filter logic client side in situations you want to filter server side.\n- `filterable` {boolean} Turns on or off the filter functionality.\n- `filterRowDisabled` {boolean} Disables the filter row.\n- `headerMenuData` {Array<object>} Dataset to build context menu for header and header group cells.\n- `headerMenuId` {string} ID of the popupmenu to use as context menu for header and header group cells.\n- `menuData` {Array<object>} Dataset to build context menu for body cells.\n- `menuId` {string} ID of the popupmenu to use as context menu for body cells.\n- `rowNavigation` {boolean} If using row navigation, the row will be focused when navigating the data grid via clicks and keyboard events.\n- `rowSelection` {string|boolean} Set the row selection mode between false, 'single', 'multiple' and 'mixed\n- `suppressRowClickSelection` {boolean} If using selection setting this will require clicking a checkbox or radio to select the row. Clicking other cells will not select the row.\n- `suppressRowDeactivation` {boolean} Set to true to prevent rows from being deactivated if clicked. i.e. once a row is activated, it remains activated until another row is activated in its place.\n- `suppressRowDeselection`  {boolean} Set to true to prevent rows from being deselected if click or space bar the row. i.e. once a row is selected, it remains selected until another row is selected in its place.\n- `suppressTooltips`  {boolean} Set to true to prevent display tooltips.\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRow` {boolean} Indicates expandable rows will be used in the data grid.  See the expandable row section for more details.\n- `expandableRowTemplate` {string} Should point to the row `template` element for expandable rows.\n- `treeGrid` {boolean} Indicates a tree grid will be used  in the data grid. See the tree grid section for more details.\n- `showHeaderExpander` {boolean} Set to show header expander icon for expandable and tree rows.\n- `groupSelectsChildren` {boolean} If a tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `saveActivePage` {boolean} If set the active page on the pager will be saved to local storage.\n- `saveColumns` {boolean} If set columns will be saved to local storage.\n- `saveFilter` {boolean} If set filter will be saved to local storage.\n- `savePageSize` {boolean} If set the page size on the pager will be saved to local storage.\n- `saveRowHeight` {boolean} If set the row height will be saved to local storage.\n- `saveSortOrder` {boolean} If set column sort order will be saved to local storage.\n- `saveUserSettings` {boolean} If set all settings will be saved to local storage.\n- `emptyMessageDescription` {string} Set empty message description text.\n- `emptyMessageIcon` {string} Set empty message icon name.\n- `emptyMessageLabel` {string} Set empty message label text.\n- `suppressEmptyMessage` {boolean} Set to true to prevent display empty message.\n- `editable` {boolean} If true in addition to adding editors to columns the data grid is editable.\n- `editNextOnEnterPress` {boolean} If enabled when editing using <kbd>ENTER</kbd> will finish editing and start editing the same cell in next row and <kbd>SHIFT + ENTER</kbd> will edit the previous row.\n\n## Column Settings (General)\n\n|Setting|Type|Description|\n|---|---|---|\n|`id` | {string} | The unique id of the column. Each column in the grid should have some unique id.|\n|`name` | {string} | The text to show on the header.|\n|`field` | {string} | The name of the field (column) in the data array attached to the grid for example `description`. This can also be nested in an object for example `children.name`. |\n|`sortable` | {boolean} | If false, the column cannot be sorted. When completed a `sorted` event will fire.|\n|`resizable` | {boolean} | If false the column will not be resizable, thus is a fixed size and can never be changed by the user by dragging the left and right edge.  When completed a `columnresized` event will fire. See the `columns-resizable` example for a working example. |\n|`reorderable` | {boolean} | If true the column can be dragged into another position with adjacent columns. When completed a `columnmoved` event will fire. See the `columns-reorderable` example for a working example. This currently does not work with grouped columns. |\n|`readonly` | {boolean or Function} | If true the cell will be set to readonly color, indicating no editing.|\n|`disabled` | {boolean or Function} | If true the cell will be set to disabled color, indicating no editing.|\n|`formatter`| {Function} | Controls how the data is rendered in the cell.|\n|`hidden` | {boolean} | Excludes the column from being added to the DOM.|\n|`align` | {string} | Can be `left` or `right` or `center` to align both the cell and the header. Left is the default so does not need to be specified. |\n|`headerAlign` | {string} | Can be `left` or `right` or `center` to align just the header. Left is the default so does not need to be specified. |\n|`minWidth` | {number} | The minimum width used to prevent resizing a column below this size. |\n|`maxWidth` | {number} | The maximum width used to prevent resizing a column above this size. |\n|`cssPart` | {string} | Allows you to set the name of a css part that can be used to customize the cell's css. This can be a string or a function. See the columns-custom-css example. The default cssPart for cells is called `cell` and it also can be used for more global changes.  |\n|`frozen` | {string} | Sets the column to be frozen on either left or right side by passing `left` or `right`. See the `columns-frozen` example for a working example. Frozen columns currently have some limitations to be addressed in the future. |<!--lint disable maximum-line-length definition-case-->\n|`width` | {number or string} | The column width, this can be an integer for fixed pixel width or a percent for example `10%`, if left off the columns will be sized to contents and to fit the width of the grid using the css table browsers handling (this is known as `auto` columns). I.E. There are three column configurations: `auto`, `fixed` and `percent`. <br /><br />In addition one can specify any css grid column setting like `fr` or `ch`. In order to make what was called a `stretchColumn` in previous versions you can set the width to`minmax(130px, 4fr)`. This is some minimum width and a `fr` unit equal to the remaining number of columns (see example columns-stretch.html). For a spacer column you just need to specify one extra column at the end (see example columns-fixed.html) but this is not recommended for how it looks. |<!--lint enable maximum-line-length definition-case-->\n|`headerIcon` | {string} | Allows you to set the name of the header icon. |\n|`tooltipOptions` | {Object or Function} | Allows you to set the tooltip options. See the tooltip example. |\n|`tooltip` | {string or Function} | Let you set the tooltip content. |\n|`headerTooltip` | {string} | Let you set the header title tooltip content. |\n|`headerIconTooltip` | {string} | Let you set the header icon tooltip content. |\n|`filterButtonTooltip` | {string} | Let you set the header filter button tooltip content. |\n|`tooltipCssPart` | {string or Function} | Allows you to set the name of a tooltip css part that can be used to customize the tooltip css. This can be a string or a function. See the columns-custom-css example.\n|`headerTooltipCssPart` | {string} | Allows you to sets the header tooltip css part.\n|`headerIconTooltipCssPart` | {string} | Allows you to sets the header icon tooltip css part.\n|`filterButtonTooltipCssPart` | {string} | Allows you to sets the filter button tooltip css part.\n|`cellSelectedCssPart` | {string} | Allows customization of a selected cell's background color.\n|`editor` | {object} | Adds an editor to the column if editable is set on the grid. See editing section for more details.\n\n## Column Settings (Specific)\n\n|Setting|Type|Description|\n|---|---|---|\n|`href` | {string|Function} | Used to create the href for hyperlink formatters. This can be a string or a function that can work dynamically. It can also replace `{{value}}` with the current value. |\n|`text` | {string} | Used to create the txt value for hyperlink formatters if a hard coded link text is needed. |\n|`disabled` | {boolean|Function} | Sets the cell contents to disabled, can also use a callback to determine this dynamically. Only checkboxes, radios, buttons and link columns can be disabled at this time. Selection columns require disabled rows in order to not be clickable/selectable. |\n|`uppercase` | {boolean} | Allows you to set the text as uppercase. |\n\n## Formatters\n\n|Formatter|Description|\n|---|---|\n|`text` | (Default) Formats the column value as a direct text element using toString in the grid cell. Undefined or Null values will be shown as empty.|\n|`password` | Formats the column value masking the string length with stars. Undefined or Null values will be shown as empty. This is good for private data. |\n|`rowNumber` | Formats the cell with a row number column that is shown 1 to n no matter what the sort order is. |\n|`date` | Formats date data as a date string in the desired format, by default it will use `dateStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`time` | Formats date data as a time string in the desired format, by default it will use `timeStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`decimal` | Formats number data as a decimal string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`integer` | Formats number data as a integer string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`selectionCheckbox` | Displays a checkbox column for selection when using `rowSelection=\"mixed\"` or `rowSelection=\"multiple\"`|\n|`selectionRadio` | Displays a checkbox column for selection when using `rowSelection=\"single\"` |\n| `button` | Displays an `ids-button`. Other column settings like `type` can be used to set the button type as can `icon` by set for icon only buttons. Use the `click` setting/function to get an callback handler. |\n| `hyperlink` | Displays an `ids-hyperlink`. Other column settings like `href` can be used to set the link href and `text` can be used to set the text to specific text. Use the `click` setting/function to get an callback handler. |\n| `checkbox` | Displays an `ids-checkbox`. The value will be checked depending on if the attached field is true or `\"true\"`. |\n| `badge` | Displays an `ids-badge`. The associated field will be placed in the badge. The `color` option can also be set to set the ids-badge color setting. |\n| `alert` | Displays `ids-alert` element, and the field value will appear in a tooltip. An `icon` option can be provided as an override.|\n| `color` | Displays `ids-color` element. If a `color` option is provided as an override, the field's value will appear in a tooltip. |\n| `icon` | Displays the field value as an `ids-icon`. An `icon` option can be provided as an override, and the field value will appear beside this `icon` override. A `size` option can also be provided. |\n| `favorite` | Displays the field value as a `star-filled` if true or `star-outlined` if false. A `size` option can be provided as an override. |\n| `tag` | Displays the field value as an `ids-tag`. A `color` option can be provided as an override. |\n| `progress` | Displays the field value as an `ids-progress`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `rating` | Displays the field value as an `ids-rating`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `slider` | Displays the field value as an `ids-slider`. A `text` option can be provided to customize the label. A `color`, `max`, `min` and `type` option can be provided as overrides. |\n| `stepChart` | Displays the field value as an `ids-step-chart`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `image` | Displays the field value as an `ids-image`. A `text` option can be provided to the `alt` and `title` attributes. |\n\n### Deprecated Formatters (Deprecated from 4.x)\n\n- `Input` No longer suggested to use, use simple list instead or a Text Formatter.\n- `Status, Color` No longer used, but badges can be used.\n- `Placeholder` Can now be set on the column and used with other formatters\n- `Ellipsis` Is now always enabled.\n- `Readonly` Can now be set on the column and used with other formatters\n- `Drilldown` Use button formatter with an icon.\n- `Template` is now deprecated for performance reasons, use a custom formatter now.\n- `ClassRange` Use column cssClass function or string\n- `Autocomplete, Lookup, TargetedAchievement, ProcessIndicator, Spinbox, Fileupload, Dropdown, Colorpicker, Tree, SummaryRow, GroupFooterRow, GroupRow, Expander, Editor, Textarea, Actions, RowReorder` May be added later\n\n## Custom Formatters\n\nIt is possible to create your own custom formatter. The idea behind the formatter is it takes the cell value and does processing on it to return the correct markup for the cell. The simplest custom formatter would be this example.\n\n```js\ncolumns.push({\n  id: 'custom',\n  name: 'Custom',\n  field: 'price',\n  formatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n    const value = `Custom: ${rowData[columnData.field] || '0'}`;\n    return `<span class=\"text-ellipsis\">${value}</span>`;\n  }\n});\n```\n\nTo style a custom formatter you may need to add a css part for the element. For example:\n\n```js\nformatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n  const value = `${rowData[columnData.field] || ''}`;\n  return `<a part=\"custom-link\" href=\"#\" class=\"text-ellipsis\">${escapeHTML(value)}</a>`;\n},\n```\n\nThen in the style sheet you add for you page you put the styles.\n\n```css\nids-data-grid::part(custom-link) {\n  color: #da1217;\n}\n\nids-data-grid::part(custom-link):hover {\n  color: #6c080b;\n}\n```\n\nThe formatter is then linked via the column on the formatter setting. When the grid cell is rendered the formatter function is called and the following arguments are passed in.\n\n- `rowData` The current row's data from the data array.\n- `columnData` The column object with all of the column configuration for this cell.\n\n## Events\n\n- `activecellchanged` Fires when the active cell changes with the keyboard or by click.\n- `sorted` Fires when the sort column is changed.\n- `selectionchanged` Fires any time the selection changes.\n- `activationchanged` Fires any time the active row changes.\n- `rowselected` Fires for each row that is selected.\n- `rowdeselected` Fires for each row that is deselected.\n- `rowactivated` Fires for each row that is activated.\n- `rowdeactivated` Fires for each row that is deactivated.\n- `rowclick` Fires for each row that is clicked.\n- `dblclick` Fires each time double clicked on body cells or header cells. Based on where it clicked details can be capture like `type: 'body-cell'|'header-title'|'header-filter'` etc.\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n- `columnresized` Fires when a column is resized or setColumnWidth is called.\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto\n- `rowExpanded` Fires when a tree or expandable row is expanded or collapsed\n- `rowCollapsed` Fires when a tree or expandable row is expanded or collapsed\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called.\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto.\n- `beforemenushow` Fires before context menu show, you can return false in the response to veto.\n- `menushow` Fires after context menu show.\n- `menuselected` Fires after context menu item selected.\n- `settingschanged` Fires after settings are changed in some way.\n- `scrollstart` Fires when data-grid reaches the topmost row.\n- `scrollend` Fires when data-grid reaches the bottommost row.\n- `afterrendered` Fires after rendered the data grid.\n\n## Methods\n\n- `setColumnWidth` Can be used to set the width of a column.\n- `setColumnVisibility` Can be used to set the visibility of a column.\n- `setActivateCell(cell, row)` Can be used to set focus of a cell.\n- `selectedRows` Lists the indexes of the currently selected rows.\n- `saveSetting(setting: string)` Save the given setting to local storage.\n- `saveAllSettings` Save all user settings to local storage.\n- `savedSetting(setting: string)` Get saved given setting value from local storage.\n- `allSavedSettings` Get saved all user settings from local storage.\n- `clearSetting(setting: string, key?: string)` Clear the given saved setting from local storage.\n- `clearAllSettings(userKeys: unknown)` Clear saved all user settings from local storage.\n- `restoreSetting(setting: string, value?: unknown)` Restore the given saved setting from local storage.\n- `editFirstCell` Puts the first cell on the active row into edit mode.\n- `appendData(data: Record<string, unknown>)` Use this to add more data to the datagrid's existing dataset.  This will automatically render additional rows in the datagrid.\n- `addRow(data: Record<string, unknown>, index?: number)` Adds a new row at optional row index and defaults the values to all those provided in the data\n- `addRows(data: Array<Record<string, unknown>>, index?: number)` Adds multiple new rows at optional row index and defaults the values to all those provided in the data\n- `removeRow(index: number)` Removed the provided row index from the dataset and visual datagrid\n- `clearRow(index: number)` Clears all values on the given row.\n- `commitCellEdit` Stops editing and commits the value in the active editor.\n- `cancelCellEdit` Stops editing and reverts the value in the active editor.\n- `resetDirtyCells` Clears all dirty cell indicators.\n- `dirtyCells` Gives a list of all currently dirty cells.\n- `exportToExcel(format: 'csv' | 'xlsx', filename: string, keepGridFormatting: boolean)` Export datagrid datasource to an excel file. This keeps grid formatting by default.\n- `collapseAll()` Collapse all expandable or tree rows.\n- `expandAll()` Expand all expandable or tree rows.\n- `toggleAll(opt: boolean)` Toggle collapse/expand all expandable or tree rows. `opt false`: will expand all, `opt: true`: will collapse all\n- `refreshRow` IdsDataGridRow method to refresh row element and its cells.\n- `refreshCell` IdsDataGridCell method to refresh cell element.\n- `updateDataset(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row.\n- `updateDatasetAndRefresh(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row and refreshes row/cells UI.\n\n## Filters\n\nData rows can be filter based on one or several criteria. Whole filter row can turned on/off by the api setting `filterable` and can be disabled by the api setting `filter-row-disabled`. The filter conditions can be applied thru the UI or programmatically. Each column can have its own filter type and turn on/off by columns setting.\n\n### Filter Columns Setting\n\nAll the filter settings can be passed thru columns data.\n\n|Setting|Type|Description|\n|---|---|---|\n|`filterType` | Function | Data grid built-in filter method, see the dedicated section below. |\n|`filterConditions` | Array | List of items to be use as operators in menu-button or options in dropdown. |\n|`filterFunction` | Function | User defined filter method, it must return a boolean. |\n|`filterOptions` | Object | Setting for components are in use, for example: `label, placeholder, disabled`. |\n|`isChecked` | Function | User defined filter method, it must return a boolean. This method use along built-in `checkbox` only, when filter data value is not boolean type. |\n\n### Built-in Filter Methods\n\n|Method|Description|\n|---|---|\n|`text` | It filter as text comparison. Contains input and menu-button with list of default operators. |\n|`integer` | It filter as integer comparison. Contains input and menu-button with list of default operators. |\n|`decimal` | It filter as decimal comparison. Contains input and menu-button with list of default operators. |\n|`contents` | It filter as text comparison. Contains dropdown and auto generate list of items based on column data. |\n|`dropdown` | It filter as text comparison. Contains dropdown and must pass list of item by setting `filterConditions`. |\n|`checkbox` | It filter as boolean comparison. Contains menu-button with list of default operators. |\n|`date` | It filter as date comparison. Contains date-picker and menu-button with list of default operators. |\n|`time` | It filter as time comparison. Contains time-picker and menu-button with list of default operators. |\n\n### Custom Filter\n\nIf the built-in filters are not enough, creating a custom filter is an option. There are two parts you can create both parts custom or mix-match with built-in.\n\n1. `UI Only` In order to do custom UI part of filter, add as html markup thru a slot. It must use slot and column-id attributes for example: `<div slot=\"filter-n\" column-id=\"n\">...</div>` where n is the columnId same passed in the columns.\n1. `filterFunction` This is a user defined filter method which must return a boolean. It determines if a cell value should be considered as a valid filtered value.\n1. `disableClientFilter` This is an api setting to disable filter logic client side. It will set filter conditions and fire an event `filtered` which can listen for custom logic.\n\n### Filter Code Examples\n\nBasic text filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nNo filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"false\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisabled filter row, will disabled all attached filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\" filter-row-disabled=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nHyperlink, integer, decimal, date and time filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'hyperlink',\n  name: 'Hyperlink',\n  field: 'description',\n  href: '#',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.hyperlink\n});\ncolumns.push({\n  id: 'integer',\n  name: 'Integer',\n  field: 'price',\n  filterType: dataGrid.filters.integer,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'decimal',\n  name: 'Decimal',\n  field: 'price',\n  filterType: dataGrid.filters.decimal,\n  formatter: dataGrid.formatters.decimal,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'date',\n  name: 'Date',\n  field: 'publishDate',\n  filterType: dataGrid.filters.date,\n  formatter: dataGrid.formatters.date\n});\ncolumns.push({\n  id: 'time',\n  name: 'Time',\n  field: 'publishDate',\n  filterType: dataGrid.filters.time,\n  formatter: dataGrid.formatters.time\n});\n```\n\nSome filter options label, placeholder, disabled.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterOptions: {\n    label: 'Label text for description input',\n    placeholder: 'Placeholder text for description input',\n    disabled: true\n  }\n});\n```\n\nCustom operators items for menu-button.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterConditions: [{\n    value: 'contains',\n    label: 'Contains',\n    icon: 'filter-contains'\n  },\n  {\n    value: 'equals',\n    label: 'Equals',\n    icon: 'filter-equals',\n    selected: true\n  }]\n});\n```\n\nContents and dropdown type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'location',\n  name: 'Location',\n  field: 'location',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.contents,\n  filterOptions: {\n    notFilteredItem: { value: 'not-filtered', label: 'Not Filtered' }\n  }\n});\ncolumns.push({\n  id: 'useForEmployee',\n  name: 'NotFilterdItem (shown as blank)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\ncolumns.push({\n  id: 'useForEmployeeCustomNotFilterdItem',\n  name: 'NotFilterdItem (show as custom text)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'not-filtered', label: 'Not Filtered' },\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\n```\n\nCheckbox type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'checkbox',\n  name: 'Checkbox',\n  field: 'inStock',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox\n});\ncolumns.push({\n  id: 'customCheckMethod',\n  name: 'Custom check method',\n  field: 'active',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox,\n  isChecked: (value) => value === 'Yes'\n});\n```\n\nCustom filter method.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\n// Custom filter checking\nconst myCustomFilter = (opt) => {\n  const { operator, columnId, value } = opt.condition;\n  const val = {\n    condition: Number.parseInt(value, 10),\n    data: Number.parseInt(opt.data[columnId], 10)\n  };\n  let isMatch = false;\n  if (Number.isNaN(val.condition) || Number.isNaN(val.data)) return isMatch;\n\n  if (operator === 'equals') isMatch = (val.data === val.condition);\n  if (operator === 'greater-than') isMatch = (val.data > val.condition);\n  if (operator === 'greater-equals') isMatch = (val.data >= val.condition);\n  if (operator === 'less-than') isMatch = (val.data < val.condition);\n  if (operator === 'less-equals') isMatch = (val.data <= val.condition);\n\n  return isMatch;\n};\n\nconst columns = [];\ncolumns.push({\n  id: 'customFilterMethod',\n  name: 'Custom Filter Method',\n  field: 'price',\n  filterFunction: myCustomFilter,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\n```\n\nCustom filter UI part.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n  <div slot=\"filter-description\" column-id=\"description\">\n    <ids-menu-button id=\"btn-filter-description\" icon=\"filter-greater-equals\" menu=\"menu-filter-description\" dropdown-icon>\n      <span class=\"audible\">Greater Than Or Equals</span>\n    </ids-menu-button>\n    <ids-popup-menu id=\"menu-filter-description\" target=\"#btn-filter-description\">\n      <ids-menu-group select=\"single\">\n        <ids-menu-item value=\"equals\" icon=\"filter-equals\">Equals</ids-menu-item>\n        <ids-menu-item value=\"greater-than\" icon=\"filter-greater-than\">Greater Than</ids-menu-item>\n        <ids-menu-item value=\"greater-equals\" icon=\"filter-greater-equals\" selected=\"true\">Greater Than Or Equals</ids-menu-item>\n        <ids-menu-item value=\"less-than\" icon=\"filter-less-than\">Less Than</ids-menu-item>\n        <ids-menu-item value=\"less-equals\" icon=\"filter-less-equals\">Less Than Or Equals</ids-menu-item>\n      </ids-menu-group>\n    </ids-popup-menu>\n    <ids-input id=\"input-filter-description\" type=\"text\" size=\"full\" placeholder=\"Slotted description\" label=\"Slotted description input\">\n    </ids-input>\n  </div>\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisable client filter\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" disable-client-filter=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n\ndataGrid.addEventListener('filtered', (e: any) => {\n  console.info('filtered:', e.detail);\n});\n```\n\n### Filter rows programmatically\n\n```js\n// Filter rows\nconst conditions = [{ columnId: 'description', operator: 'contains', value: '5' }];\ndataGrid.applyFilter(conditions);\n\n// Reset all filters\ndataGrid.applyFilter([]);\n```\n\n### Filter Events\n\nThe following events are relevant to data-grid filters.\n\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n\n## Custom cell colors\n\nIn some cases, it may be desirable to customize the background color of cells.  This can be done with the `cssPart` column setting:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell'\n});\n```\n\nThe `cssPart` property is translated into a `part` attribute that is applied to every cell in the column.  In the event the color needs to be conditional based on the row index or other logic, a function can be used:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2')\n  // ...\n});\n```\n\nAfter this is defined, accompanying CSS can be written to target the parts `custom-cell`, `custom-cell-1`, and `custom-cell-2` to change background color or other CSS properties of the cell:\n\n```css\nids-data-grid::part(cell) {\n  background-color: #ebf9f1;\n}\n\nids-data-grid::part(cell-selected) {\n  background-color: #c9dad0;\n}\n```\n\n### Changing selected cell colors\n\nAnother column setting, `cellSelectedCssPart` can be used alongside `cssPart` to customize the selected color of the row in a similar way.  When using `mixed` selection, this color is also applied to activated rows:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell',\n  cellSelectedCssPart: 'custom-cell-selected'\n});\n```\n\nThis column setting can also be a function, just like `cssPart`:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2'),\n  cellSelectedCssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-selected-1' : 'custom-cell-selected-2')\n  // ...\n});\n```\n\n## Tooltip Code Examples\n\nSet suppress tooltips to turn off.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" suppress-tooltips>\n</ids-data-grid>\n```\n\nSet custom tooltip strings.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: 'This is a product Id',\n  headerTooltip: 'This is the product Id header title',\n  headerIconTooltip: 'This is product Id header icon',\n  filterButtonTooltip: 'This is the product Id filterButton'\n});\n```\n\nSet tooltip as callback.\n\n```js\nconst tooltipCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return `Text: ${text}<br/>Header Row: ${rowIndex}, Cell: ${columnIndex}`;\n  } else if (type === 'filter-button') {\n    return `Text: ${text}<br/>FilterButton Row: ${rowIndex}, Cell: ${columnIndex}`;\n  }\n  return `Text: ${text}<br/>for Row: ${rowIndex}, Cell: ${columnIndex}`;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: tooltipCallback\n});\n```\n\nSet tooltip custom options.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: {\n    placement: 'top',\n    headerPlacement: 'top',\n    headerIconPlacement: 'top',\n    filterButtonPlacement: 'bottom',\n    x: 0,\n    y: 10,\n    headerX: 0,\n    headerIconX: 0,\n    headerY: 10,\n    headerIconY: 10,\n    filterButtonX: 0,\n    filterButtonY: 22\n  }\n});\n```\n\nSet tooltip options as callback.\n\n```js\nconst tooltipOptionsCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return { headerPlacement: 'top', headerX: 0, headerY: 10 };\n  } else if (type === 'header-icon') {\n    return { headerIconPlacement: 'top', headerIconX: 0, headerIconY: 10 };\n  } else if (type === 'filter-button') {\n    return { filterButtonPlacement: 'bottom', filterButtonX: 0, filterButtonY: 22 };\n  }\n  return { placement: 'top', x: 0, y: 10 };\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: tooltipOptionsCallback\n});\n```\n\nSet tooltip custom css.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: 'custom-turquoise',\n  headerTooltipCssPart: 'custom-turquoise',\n  headerIconTooltipCssPart: 'custom-turquoise',\n  filterButtonTooltipCssPart: 'custom-turquoise'\n});\n```\n```css\n/* tooltip css part `custom-turquoise` */\nids-data-grid::part(custom-turquoise-tooltip-arrow-top)::after {\n  border-top-color: #2f8d8e;\n}\nids-data-grid::part(custom-turquoise-tooltip-popup) {\n  background-color: #2f8d8e;\n}\n```\n\nSet tooltip custom css as callback.\n\n```js\nconst tooltipCssPartCallback = (args: { type: string }): string => {\n  const { type } = args;\n  let cssPart = '';\n  // Set random css part each time, for `body-cell` tooltips\n  if (type === 'body-cell') {\n    const parts = ['azure', 'ruby'];\n    const randomIndex = Math.floor(Math.random() * parts.length);\n    cssPart = parts[randomIndex];\n  }\n  return cssPart;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: tooltipCssPartCallback\n});\n```\n```css\n/* tooltip css part `azure` */\nids-data-grid::part(azure-tooltip-arrow-top)::after {\n  border-top-color: #0066d4;\n}\nids-data-grid::part(azure-tooltip-popup) {\n  background-color: #0066d4;\n}\n\n/* tooltip css part `ruby` */\nids-data-grid::part(ruby-tooltip-arrow-top)::after {\n  border-top-color: #c31014;\n}\nids-data-grid::part(ruby-tooltip-popup) {\n  background-color: #c31014;\n}\n```\n\n## context menu Code Examples\n\nThe context menus can be set via the dataset.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n</ids-data-grid>\n```\n```js\n// Dataset for header cells context menu\nconst headerMenuData = {\n  id: 'grid-header-context menu',\n  contents: [{\n    id: 'header-actions-group',\n    items: [\n      { id: 'actions-split', value: 'actions-split', text: 'Split' },\n      { id: 'actions-sort', value: 'actions-sort', text: 'Sort' },\n    ]\n  }],\n};\n\n// Dataset for body cells context menu\nconst menuData = {\n  id: 'grid-context menu',\n  contents: [{\n    id: 'actions-group',\n    items: [\n      { id: 'item-1', value: 'item-1', text: 'Item One' },\n      { id: 'item-2', value: 'item-2', text: 'Item Two' },\n      { id: 'item-3', value: 'item-3', text: 'Item Three' }\n    ]\n  }],\n};\n\n// Set context menu data with data-grid\ndataGrid.menuData = menuData;\ndataGrid.headerMenuData = headerMenuData;\n\n// Set to return true/false in the response to veto before context menu show.\ndataGrid.addEventListener('beforemenushow', (e: any) => {\n  console.info('before context menu show', e.detail);\n  // e.detail.response(false);\n});\n\n// Set to watch after context menu show.\ndataGrid.addEventListener('menushow', (e: any) => {\n  console.info('After context menu show', e.detail);\n});\n\n// Set to watch after context menu item selected.\ndataGrid.addEventListener('menuselected', (e: any) => {\n  console.info('context menu item selected', e.detail);\n});\n```\n\nSet context menu thru Slot.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n  <!-- context menu header cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"header-context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n      <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n  <!-- context menu body cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n      <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n      <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n      <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n</ids-data-grid>\n```\n\nSet context menu thru ID.\n\n```html\n<ids-data-grid\n  header-menu-id=\"grid-header-context menu\"\n  menu-id=\"grid-context menu\"\n  id=\"data-grid-1\"\n  label=\"Books\"\n></ids-data-grid>\n\n<!-- context menu header cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-header-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n    <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n\n<!-- context menu body cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n    <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n    <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n    <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n```\n\n## Empty Message\n\nSet empty message thru slot (markup).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-slot\" label=\"Books\">\n  <ids-empty-message hidden icon=\"empty-search-data-new\" slot=\"empty-message\">\n    <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">No Data</ids-text>\n    <ids-text hidden label=\"true\" slot=\"description\">There is no data available.</ids-text>\n  </ids-empty-message>\n</ids-data-grid>\n```\n\nSet empty message thru settings (markup).\n\n```html\n<ids-data-grid\n  id=\"data-grid-em-thru-settings\"\n  label=\"Books\"\n  empty-message-icon=\"empty-error-loading-new\"\n  empty-message-label=\"No Data\"\n  empty-message-description=\"There is no data available.\"\n></ids-data-grid>\n```\n\nSet empty message thru settings (javascript).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-settings-js\" label=\"Books\">\n</ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-em-thru-settings-js');\ndataGrid.emptyMessageIcon = 'empty-error-loading-new';\ndataGrid.emptyMessageLabel = 'No Data';\ndataGrid.emptyMessageDescription = 'There is no data available.';\n```\n\n## Row Height\n\nAs mentioned in the settings section you can change the row height by setting the rowHeight option.\n\n```html\n     <ids-data-grid id=\"data-grid-row-height\" row-height=\"md\"></ids-data-grid>\n```\n\nIts worth mentioning the characteristics and usage for each one.\n\nLarge (`row-height=\"lg\"`) - Row Height is 50. The default row height, header is 16px and body cells are 16px. 16px padding on cells and header. You should use this most of the time if there is plenty of room on the UI and to avoid the UI looking crowded.\nMedium (`row-height=\"md\"`) - Row Height is 40. Header is 16px and body cells are 16px. 12px padding on cells and header. If you need to see a few more rows but still want to avoid a crowded UI, this is the next best option.\nSmall (`row-height=\"sm\"`) - Row Height is 35. Header is 16px and body cells are 16px. 8px padding on cells and header. This is the smallest option that is recommended for readability and spacing.\nExtra Small (`row-height=\"xs\"`) - Row Height is 30. Header is 14px and body cells are 14px. 8px padding on cells and header. If you need a very compressed data grid with a lot of data you can use this option. But there is a trade off of bad readability and spacing.\nExtra Extra Small (`row-height=\"xxs\"`) - Row Height is 25. Header is 14px and body cells are 14px. 2px padding on cells and header. Avoid this option as it is very crowded but it is included for edge cases.\n\n## States and Variations\n\n**Rows**\n- Hover\n- Selected\n- Disabled\n- Readonly\n- Activated\n\n**Columns**\n- Focus\n- Hover\n- Sorted\n- Selected\n- Disabled\n- Filtered\n\n**Cells**\n- Hover (sometimes a cursor change)\n- Readonly\n- Focus\n- Checked/Not Checked (Checkboxes)\n\n## Keyboard Guidelines\n\n- <kbd>Tab</kbd>The initial tab enters the grid with focus on the first cell of the first row, often a header. A second tab moves out of the grid to the next tab stop on the page. Once focus is established in the grid, a TAB into or a Shift Tab into the grid will return to the cell which last had focus. If in edit mode will finish editing and start editing the next cell.\n- <kbd>Shift + Tab</kbd> Moves the reverse of tab. If in edit mode will finish editing and start editing the previous cell.\n- <kbd>Left</kbd> and <kbd>Right</kbd> Move focus to the adjacent column's cell. There is no wrap at the end or beginning of columns.\n- <kbd>Up</kbd> and <kbd>Down</kbd> Move focus to the adjacent row's cell. There is no wrap at the first or last row.\n- <kbd>Home</kbd> moves focus to the first cell of the current row\n- <kbd>End</kbd> moves focus to the last cell of the current row\n- <kbd>Page Up</kbd> moves focus to the first cell in the current column\n- <kbd>Page Down</kbd> moves focus to the last cell in the current column\n- <kbd>Space</kbd> Toggles selection the activate row. If suppressRowDeselection is set it will be ignored on deselect. If the cell contains an expandable element then the row will toggle the expanded state. If the cell contains a checkbox editor, will toggle the checkbox state.\n- <kbd>F2</kbd> toggles actionable mode. Pressing the <kbd>Tab</kbd> key while in actionable mode moves focus to the next actionable cell. While in actionable mode you can do things like type + enter. This will move you down a row when you hit enter. If the cell has a control that uses down arrow (like the drop downs or lookups that are editable). Then the user needs to hit enter to enable the edit mode on that cell.\n- <kbd>Triple Click</kbd> Not a keyboard shortcut, but if you have text in a cell that is overflowed a triple click will select all the text even the part that is invisible.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Enter</kbd> Activates edit mode on the cell if it is editable. There is also an \"auto edit detection\". If the user starts typing then edit mode will happen automatically without enter. If in edit mode already <kbd>Enter</kbd> will finish edit mode. If `editNextOnEnterPress` is enabled then editing will start on the same column in next row.\n- <kbd>Shift + Enter</kbd> Same as enter but if `editNextOnEnterPress` is enabled then editing will start on the same column in previous row.\n- <kbd>F2</kbd> Finish editing same as Enter. But if `editNextOnEnterPress` is enabled, will stay in same cell. `cancelEditMode` will fire.\n- <kbd>CMD/CTRL + Enter</kbd> Finish editing same as Enter.\n- <kbd>ESC</kbd> Revert to the previous value and cancel editing. `cancelEditMode` will fire.\n\n## Responsive Guidelines\n\n- By default, data grid grows depending on the amount of contents within and will scroll if necessary under the header. It stops growing when it reaches the size of the parent container.\n- `autoFit` property or `auto-fit` attribute can be set manually to make the data grid size fill and be responsive to the size of the screen, regardless of the amount of contents.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Counts have all new markup and classes.\n\n**4.x to 5.x**\n- Data grid has all new markup and a custom element but some similarly named options\n- Still uses same columns and data set options. Some column options enhanced and changed.\n- If using events events are now plain JS events for example: sorted, rendered\n- Some Api Functions have changed\n- If using properties/settings these are now attributes or as plain properties for example: data, virtual-scroll\n- Markup has changed to a custom element `<ids-data-grid></ids-data-grid>`\n- Can now be imported as a single JS file and used with encapsulated styles\n- `Drill Down` Formatter is now covered by `Button` formatter with `icon=\"drilldown\"`\n- `textOverflow` setting is now by default\n- `rowNavigation` setting has replaced `cellNavigation`. Cell navigation is the default behavior.\n- `stretchColumn` is now more flexible and can be achieved by setting a column width to `minmax(130px, 4fr)`. I.E. some min width and a `fr` unit equal to the remaining number of columns (or similar variations).\n- split columns are not supported anymore but could be done with a custom formatter if needed\n- `frozenColumns` setting is now set on each column by adding `frozen: 'left'` or `frozen: 'right'` to the column definition.\n- Some events are renamed see the events section for more details, also the signature of the events has changed.\n- Custom formatter functions can now be any type of function and have a different signature.\n- The `expanded` column option for tree was renamed to `rowExpanded`.\n- The `expandrow/collapserow` events are renamed to `rowexpanded/rowcollapsed`\n- The `beforeentereditmode/entereditmode/exiteditmode` event is renamed to `beforecelledit/celledit/endcelledit/cancelcelledit`\n- The `actionablemode` feature has been replaced with simply tabbing to the next editable field when in edit mode.\n\n## Accessibility Guidelines\n\n1.1.1 Non-text Content - All images, links and icons have text labels for screen readers when the formatters are used.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and links and images of text has a contrast ratio of at least 4.5:1.\n- 2.1.1 Keyboard - Make all functionality available from a keyboard. The grid has keyboard shortcuts and is usable with a screen reader due to the addition of aria tags.\n- A datagrid in general including this one uses the following aria tags\n  - `aria-label` labels the enter table on the main table\n  - `aria-rowcount` lists the visible row count on the main table\n  - `aria-colindex` the index of each column on the column elements\n  - `aria-rwindex` the index of each row on the row elements\n  - `aria-setsize` for tree grid lists the number of elements in each level (group)\n  - `aria-level` the level of indentation\n  - `aria-posinset` the depth into each set\n  - `aria-expanded` on the row it indicates if the row is expanded (for tree and expandable row)\n  - `aria-sort` indicates the sort direction on the sortable columns\n  - `aria-checked` indicates if the element is checked on checkbox columns and headers\n\n## Regional Considerations\n\nTitles and labels should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n\n## Code Separation (For Developers)\n\nThe code is divided into several files. Here is a description of where everything is.\n\n- `ids-data-grid-cell.ts` creates a non-shadow root `ids-data-grid-cell`, and handles its own selection, and activation.\n- `ids-data-grid-cell.scss` contains all css related to `.ids-data-grid-cell` and its children\n- `ids-data-grid-contextmenu.ts` contains code in the form of export functions, that adds ability to get right click menus on headers and cells\n- `ids-data-grid-filter.scss` contains all css related to the filter row and its children\n- `ids-data-grid-filter.ts` contains code to implement the filtering functionality and its ui (some functions are in ids-data-source)\n- `ids-data-grid-formatters.ts` contains all formatter functions and some supporting code like data extraction\n- `ids-data-grid-header.ts` contains most header functionality, the header template, and code related to header actions like sort, reorder and selection.\n- `ids-data-grid-header.scss` contains all css related to `.ids-data-grid-header` and its children\n- `ids-data-grid-row.ts` contains most row functionality, the row template, and code related to row actions like expand, collapse, select, activate\n- `ids-data-grid-row.scss` contains all css related to `.ids-data-grid-row` and its children\n- `ids-data-grid-tooltip-mixin.js` contains a tooltip mixin that adds tooltip functionality to cells and headers, its different from `ids-tooltip-mixin` (more specific)\n- `ids-data-grid.js` contains all main data grid code, the api and settings and the main generator loop for the data grid\n"}},{"name":"ids-data-grid-tooltip-mixin","attributes":[{"name":"suppressTooltips","description":"Set the tooltips on/off.","values":[]},{"name":"#tooltip","description":"Single tooltip use with all grid elements","values":[]},{"name":"#types","description":"Types of tooltip as unique identifier","values":[]},{"name":"#mouseOut","values":[]}],"description":{"kind":"markdown","value":"# Ids Data Grid\n\n## Description\n\nThe data grid component (ids-data-grid) is used to arrange tabular data in rows and columns for easier scanning and comparison. Data grids are very configurable in both design and functionality and they can be found within almost every product/app.\n\nYou should pass an array of objects in to the grid on the `dataset` object. Also pass the `columns` array which contains the column configuration. There are a number of events described in the events and API section, as well as the column settings.\n\nA Read-Only data grid uses \"Formatters\" to render cell content. A number of these are listed in the API section and it is possible to create your own.\n\n## Use Cases\n\n- The data grid component is most useful when it is used for categorically sorting dense and repetitive information. Each individual item is listed down the Y axis of the chart, and their shared attribute categories are listed along the X axis. The resulting cells are filled with information that is relevant to the corresponding item and attribute.\n\n## Terminology\n\n- **Title**: The name of the data grid optionally appearing above the grid and describing the contents.\n- **Options**: An optionally actions menu button with functionality that operates on the entire data grid.\n- **Cell**: Body elements of the data grid that contain an object's value or attribute. Cells should only contain one type of content or it can be confusing and hurt accessibility.\n- **Header Cell**: These cells contain the names of the columns in the grid and related functions like filtering and sorting. All cells below the header cell will hold values related to the attribute in the header cell.\n- **Column**: Cells stacked vertically that contain values relate to the attribute found on the top header cell.\n- **Row**: Each row contains one cell per column in the data grid, and each cell displays a single value in the bound data item.\n- **Tree**: Denotes the use of hierarchical data, with an expandable and collapsible hierarchy.\n\n## Themeable Parts\n\n- `table` allows you to further style the table main element\n- `container` allows you to further style the container element\n- `body` allows you to further style the body element\n- `header` allows you to further style the header element\n- `headerCell` allows you to further style the header cells\n- `row` allows you to further style the rows\n- `cell` allows you to further style the row cells\n- `cell-selected` allows you to further style row cells that are selected (in mixed-selection mode, activated cells are also styled)\n- `tooltip-popup` allows you to further style or adjust the outer tooltip popup element\n- `tooltip-arrow` allows you to adjust the tooltip arrow element\n\n## Features (With Code Examples)\n\nA data grid is created by adding an `ids-data-grid` html element in the page and setting the options either inline in the markup or in the JS part of the code. You can only use simple types (string, boolean ect) for inline markup so passing the data and column arrangement is always done in the JS part. The data will be an array of objects so its in the correct tabular form. The columns are also an array of objects but with defined options and types. See more about columns in next section.\n\n```html\n<ids-data-grid id=\"data-grid-1\"></ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-1');\ndataGrid.data = dataset;\ndataGrid.columns = columns;\n```\n\n### Column Groups\n\nSetting column groups allows you to add a second level of columns in your header and the ability to group the first level. This is useful for when you have a large number of columns and you want to group them into logical or related sections.\n\nColumn groups are achieved by providing an array to the `columnGroups` setting. Only one level of column groups can be defined.\n\n```js\ndataGrid.columnGroups = [\n{\n  colspan: 3,\n  id: 'group1',\n  name: 'Column Group One',\n  align: 'center'\n},\n{\n  colspan: 2,\n  id: 'group2',\n  name: 'Column Group Two'\n},\n{\n  colspan: 2,\n  id: 'group3',\n  name: 'Column Group Three',\n  align: 'right'\n},\n{\n  colspan: 11,\n  id: 'group4',\n  name: 'Column Group Four',\n  align: 'left'\n}\n];\n```\n\nIf the column is hidden it will be automatically removed from the `colspan`. If in the last group you didn't provided a bug enough `colspan` it will be set to the remaining columns. The `name` text can be right or left aligned and given an id. The only required property is `colspan`.\n\n### Selection\n\nThe data grid selection feature involves the setting `rowSelection`. This can be one of several values.\n\n- `false` No selection enabled.\n- `multiple` Allows multiple rows to be selected. When doing this it is recommended to add a `formatters.selectionCheckbox` for the first column.\n- `single` Allows a single row to be selected. When doing this you can optionally to add a `formatters.selectionRadio` for the first column. You can use the `suppressRowDeselection` if you want one row to always be selected.\n- `mixed` Allows multiple rows to be selected by clicking only on the checkbox or <kbd>Space</kbd> key. If clicking a row then that row is activated, meaning it is the current row and something might be shown based on the data of that row. You can use the `suppressRowDeactivation` if you want one row to always be selected.\n\nHere is a code example for multi select\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" row-selection=\"multiple\">\n</ids-data-grid>\n```\n\n```js\n  dataGrid.addEventListener('rowselected', (e) => {\n    console.info(`Row Selected`, e.detail);\n  });\n\n  dataGrid.addEventListener('rowdeselected', (e) => {\n    console.info(`Row Deselected`, e.detail);\n  });\n\n  dataGrid.addEventListener('selectionchanged', (e) => {\n    console.info(`Selection Changed`, e.detail);\n  });\n```\n\nThe following events are relevant to selection/activation.\n\n`rowselected` Fires when an individual row is activation and gives information about that row.\n`rowdeselected` Fires when an individual row is deselected and gives information about that row.\n`selectionchanged` Fires once for each time selection changes and gives information about all selected rows.\n\n`rowactivated` Fires when an individual row is activated and gives information about that row.\n`rowdeactivated` Fires when an individual row is deactivated and gives information about that row.\n`activationchanged` Fires once for each time activation changes and gives information about the active row.\n\n### Tree Grid\n\nThe tree grid feature involves the setting `treeGrid` to true. In addition the data passed to the tree grid should contain a field called `children`. That contains the child rows. This can by unlimited levels but 2-4 is recommended as a max for a more usable UI. In addition you can preset some states by adding `rowExpanded: false` to the parent elements (default is expanded). And also set `rowHidden: false` for child rows that are expanded. You also need a `Expander` formatter on a cell (usually the first visible cell.\n\nHere is a code example for a tree grid.\n\n```html\n<ids-data-grid id=\"tree-grid\" label=\"Buildings\" tree-grid=\"true\" group-selects-children=\"true\"></ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to selection/activation.\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `groupSelectsChildren` {boolean} If the tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `suppressRowClickSelection` {boolean} If using selection you might want to set this so clicking a row will not select it.\n### Expandable Row\n\nThe Expandable Row feature involves the setting `expandableRow` to true. In addition a row template should be provided via an id that points to the `expandableRowTemplate` which is a `template` element. You can preset the expandable state by adding `rowExpanded: true` to the row element you want to expand. The default is collapsed.\n\nHere is a code example for an expandable row\n\n```html\n<ids-data-grid\n    id=\"data-grid-expandable-row\"\n    expandable-row=\"true\"\n    expandable-row-template=\"expandable-row-tmpl\"\n    label=\"Books\">\n    <template id=\"expandable-row-tmpl\">\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"16\" type=\"span\">${convention}</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">${price} USD</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">Lorem Ipsum is simply sample text of the printing and typesetting industry. Lorem Ipsum has been the industry standard sample text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only...</ids-text>\n        </ids-layout-grid>\n    </template>\n</ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to expandable rows\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRowTemplate` {string} Should point to the row `template` element.\n\n### Editing\n\nThe Editing features start by setting `editable` to true. In addition you should add editors to columns and enable features of each of the editors. The features differ depending on the component used for editing. See the Keyboard section for information on which keys can be used when editing..\n\nHere is a code example for an editable text cell.\n\n```js\ncolumns.push({\n    id: 'description',\n    name: 'Description',\n    field: 'description',\n    sortable: true,\n    resizable: true,\n    reorderable: true,\n    formatter: dataGrid.formatters.text,\n    editor: {\n      type: 'input',\n      inline: true,\n      editorSettings: {\n        autoselect: true,\n        dirtyTracker: true\n      }\n    }\n  });\n```\n\nHere is a code example for an editable dropdown cell\n\n```js\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  resizable: true,\n  reorderable: true,\n  formatter: dataGrid.formatters.dropdown,\n  editor: {\n    type: 'dropdown',\n    editorSettings: {\n      dirtyTracker: true,\n      validate: 'required',\n      options: [\n        {\n          label: 'Option 1',\n          value: 'opt1'\n        },\n        {\n          label: 'Option 2',\n          value: 'opt2'\n        }\n      ]\n    }\n  }\n});\n```\n\nTo cancel or disabled editing there are a few ways:\n\n- setting the column `editor` setting to undefined will disable editing on the column (as will not having an editor setting at all).\n- adding a `readonly` or `disabled` function which returned true for some cells based on a condition will disable or mark the cell readonly.\n- return false in the `beforecelledit` event in the response function\n\nThe following settings are available on editors.\n\n`type` As of now can be `checkbox`, `input`, `datepicker`, `timepicker`, or `dropdown` but more will be added.\n`inline` Default is false. If true the editor (for example an input) will be visible in a field.\n`editorSettings` Is an object that is loosely typed that lets you pass any option the editor supports in. For example any of the IdsInput or IdsCheckbox options can be passing in. Some special ones are:\n`editorSettings.autoselect` Text will be selected when entering edit mode\n`editorSettings.dirtyTracker` Enables the dirty tracker that marks changed cells.\n`editorSettings.validate` Text will be selected when entering edit mode\n`editorSettings.mask` Will pass mask settings to the input (if supported).\n`editorSettings.maskOptions` Will pass maskOptions settings to the input (if supported).\n`editorSettings.options` Dataset used for dropdown editor's list box options.\n\nWhen the use clicks in the cell or activates editing with the keyboard with the Enter key and types. The following events will fire.\n\n`beforecelledit` Fires before a cell is being edit (before edit is started). Can be vetoed by returning false as shown below.\n`celledit` Fires exactly when a cell is being edited.\n`endcelledit` Fires when a cell edit is completed and changed.\n`cancelcelledit` Fires when an edit is cancelled via the <kbd>Esc</kbd> key.\n\nTo cancel editing based on some condition or if editing is not allowed you can veto the `beforecelledit` event.\n\n```js\n  dataGrid.addEventListener('beforecelledit', (e: Event) => {\n    (<CustomEvent>e).detail.response(false);\n  });\n```\n\nThere are a few utility functions for editing the data grid mentioned in the Methods section.\n\n## Settings and Attributes\n\nWhen used as an attribute in the DOM the settings are kebab case, when used in JS they are camel case.\n\n- `virtualScroll` {boolean} When virtual scroll is used the grid can render many thousands of rows and only the rows visible in the scroll area are rendered for performance. This setting has limitations such as the rows need to be fixed size.\n- `addNewAtEnd` {boolean} Automatically append rows while keyboard navigating data grid in edit mode.\n- `alternateRowShading` {boolean} For better scan-ability you can shade alternate rows.\n- `listStyle` {boolean} Sets the style of the grid to list style for simple readonly lists.\n- `columns` {Array<object>} Sets the columns array of the data grid. See column settings.\n- `columnGroups` {Array<object>} Allows you to group columns together in logical sets. See section below for details.\n- `rowHeight` {string | `'xxs'` | `'xs'` | `'sm'` | `'md'` | `'lg'`} Sets the height and padding of each row. In smaller row heights the font is lowered.\n- `data` {Array<object>} Sets the data to show in the data grid. This can be a JSON Array.\n- `disableClientFilter` {boolean} Disables the filter logic client side in situations you want to filter server side.\n- `filterable` {boolean} Turns on or off the filter functionality.\n- `filterRowDisabled` {boolean} Disables the filter row.\n- `headerMenuData` {Array<object>} Dataset to build context menu for header and header group cells.\n- `headerMenuId` {string} ID of the popupmenu to use as context menu for header and header group cells.\n- `menuData` {Array<object>} Dataset to build context menu for body cells.\n- `menuId` {string} ID of the popupmenu to use as context menu for body cells.\n- `rowNavigation` {boolean} If using row navigation, the row will be focused when navigating the data grid via clicks and keyboard events.\n- `rowSelection` {string|boolean} Set the row selection mode between false, 'single', 'multiple' and 'mixed\n- `suppressRowClickSelection` {boolean} If using selection setting this will require clicking a checkbox or radio to select the row. Clicking other cells will not select the row.\n- `suppressRowDeactivation` {boolean} Set to true to prevent rows from being deactivated if clicked. i.e. once a row is activated, it remains activated until another row is activated in its place.\n- `suppressRowDeselection`  {boolean} Set to true to prevent rows from being deselected if click or space bar the row. i.e. once a row is selected, it remains selected until another row is selected in its place.\n- `suppressTooltips`  {boolean} Set to true to prevent display tooltips.\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRow` {boolean} Indicates expandable rows will be used in the data grid.  See the expandable row section for more details.\n- `expandableRowTemplate` {string} Should point to the row `template` element for expandable rows.\n- `treeGrid` {boolean} Indicates a tree grid will be used  in the data grid. See the tree grid section for more details.\n- `showHeaderExpander` {boolean} Set to show header expander icon for expandable and tree rows.\n- `groupSelectsChildren` {boolean} If a tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `saveActivePage` {boolean} If set the active page on the pager will be saved to local storage.\n- `saveColumns` {boolean} If set columns will be saved to local storage.\n- `saveFilter` {boolean} If set filter will be saved to local storage.\n- `savePageSize` {boolean} If set the page size on the pager will be saved to local storage.\n- `saveRowHeight` {boolean} If set the row height will be saved to local storage.\n- `saveSortOrder` {boolean} If set column sort order will be saved to local storage.\n- `saveUserSettings` {boolean} If set all settings will be saved to local storage.\n- `emptyMessageDescription` {string} Set empty message description text.\n- `emptyMessageIcon` {string} Set empty message icon name.\n- `emptyMessageLabel` {string} Set empty message label text.\n- `suppressEmptyMessage` {boolean} Set to true to prevent display empty message.\n- `editable` {boolean} If true in addition to adding editors to columns the data grid is editable.\n- `editNextOnEnterPress` {boolean} If enabled when editing using <kbd>ENTER</kbd> will finish editing and start editing the same cell in next row and <kbd>SHIFT + ENTER</kbd> will edit the previous row.\n\n## Column Settings (General)\n\n|Setting|Type|Description|\n|---|---|---|\n|`id` | {string} | The unique id of the column. Each column in the grid should have some unique id.|\n|`name` | {string} | The text to show on the header.|\n|`field` | {string} | The name of the field (column) in the data array attached to the grid for example `description`. This can also be nested in an object for example `children.name`. |\n|`sortable` | {boolean} | If false, the column cannot be sorted. When completed a `sorted` event will fire.|\n|`resizable` | {boolean} | If false the column will not be resizable, thus is a fixed size and can never be changed by the user by dragging the left and right edge.  When completed a `columnresized` event will fire. See the `columns-resizable` example for a working example. |\n|`reorderable` | {boolean} | If true the column can be dragged into another position with adjacent columns. When completed a `columnmoved` event will fire. See the `columns-reorderable` example for a working example. This currently does not work with grouped columns. |\n|`readonly` | {boolean or Function} | If true the cell will be set to readonly color, indicating no editing.|\n|`disabled` | {boolean or Function} | If true the cell will be set to disabled color, indicating no editing.|\n|`formatter`| {Function} | Controls how the data is rendered in the cell.|\n|`hidden` | {boolean} | Excludes the column from being added to the DOM.|\n|`align` | {string} | Can be `left` or `right` or `center` to align both the cell and the header. Left is the default so does not need to be specified. |\n|`headerAlign` | {string} | Can be `left` or `right` or `center` to align just the header. Left is the default so does not need to be specified. |\n|`minWidth` | {number} | The minimum width used to prevent resizing a column below this size. |\n|`maxWidth` | {number} | The maximum width used to prevent resizing a column above this size. |\n|`cssPart` | {string} | Allows you to set the name of a css part that can be used to customize the cell's css. This can be a string or a function. See the columns-custom-css example. The default cssPart for cells is called `cell` and it also can be used for more global changes.  |\n|`frozen` | {string} | Sets the column to be frozen on either left or right side by passing `left` or `right`. See the `columns-frozen` example for a working example. Frozen columns currently have some limitations to be addressed in the future. |<!--lint disable maximum-line-length definition-case-->\n|`width` | {number or string} | The column width, this can be an integer for fixed pixel width or a percent for example `10%`, if left off the columns will be sized to contents and to fit the width of the grid using the css table browsers handling (this is known as `auto` columns). I.E. There are three column configurations: `auto`, `fixed` and `percent`. <br /><br />In addition one can specify any css grid column setting like `fr` or `ch`. In order to make what was called a `stretchColumn` in previous versions you can set the width to`minmax(130px, 4fr)`. This is some minimum width and a `fr` unit equal to the remaining number of columns (see example columns-stretch.html). For a spacer column you just need to specify one extra column at the end (see example columns-fixed.html) but this is not recommended for how it looks. |<!--lint enable maximum-line-length definition-case-->\n|`headerIcon` | {string} | Allows you to set the name of the header icon. |\n|`tooltipOptions` | {Object or Function} | Allows you to set the tooltip options. See the tooltip example. |\n|`tooltip` | {string or Function} | Let you set the tooltip content. |\n|`headerTooltip` | {string} | Let you set the header title tooltip content. |\n|`headerIconTooltip` | {string} | Let you set the header icon tooltip content. |\n|`filterButtonTooltip` | {string} | Let you set the header filter button tooltip content. |\n|`tooltipCssPart` | {string or Function} | Allows you to set the name of a tooltip css part that can be used to customize the tooltip css. This can be a string or a function. See the columns-custom-css example.\n|`headerTooltipCssPart` | {string} | Allows you to sets the header tooltip css part.\n|`headerIconTooltipCssPart` | {string} | Allows you to sets the header icon tooltip css part.\n|`filterButtonTooltipCssPart` | {string} | Allows you to sets the filter button tooltip css part.\n|`cellSelectedCssPart` | {string} | Allows customization of a selected cell's background color.\n|`editor` | {object} | Adds an editor to the column if editable is set on the grid. See editing section for more details.\n\n## Column Settings (Specific)\n\n|Setting|Type|Description|\n|---|---|---|\n|`href` | {string|Function} | Used to create the href for hyperlink formatters. This can be a string or a function that can work dynamically. It can also replace `{{value}}` with the current value. |\n|`text` | {string} | Used to create the txt value for hyperlink formatters if a hard coded link text is needed. |\n|`disabled` | {boolean|Function} | Sets the cell contents to disabled, can also use a callback to determine this dynamically. Only checkboxes, radios, buttons and link columns can be disabled at this time. Selection columns require disabled rows in order to not be clickable/selectable. |\n|`uppercase` | {boolean} | Allows you to set the text as uppercase. |\n\n## Formatters\n\n|Formatter|Description|\n|---|---|\n|`text` | (Default) Formats the column value as a direct text element using toString in the grid cell. Undefined or Null values will be shown as empty.|\n|`password` | Formats the column value masking the string length with stars. Undefined or Null values will be shown as empty. This is good for private data. |\n|`rowNumber` | Formats the cell with a row number column that is shown 1 to n no matter what the sort order is. |\n|`date` | Formats date data as a date string in the desired format, by default it will use `dateStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`time` | Formats date data as a time string in the desired format, by default it will use `timeStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`decimal` | Formats number data as a decimal string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`integer` | Formats number data as a integer string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`selectionCheckbox` | Displays a checkbox column for selection when using `rowSelection=\"mixed\"` or `rowSelection=\"multiple\"`|\n|`selectionRadio` | Displays a checkbox column for selection when using `rowSelection=\"single\"` |\n| `button` | Displays an `ids-button`. Other column settings like `type` can be used to set the button type as can `icon` by set for icon only buttons. Use the `click` setting/function to get an callback handler. |\n| `hyperlink` | Displays an `ids-hyperlink`. Other column settings like `href` can be used to set the link href and `text` can be used to set the text to specific text. Use the `click` setting/function to get an callback handler. |\n| `checkbox` | Displays an `ids-checkbox`. The value will be checked depending on if the attached field is true or `\"true\"`. |\n| `badge` | Displays an `ids-badge`. The associated field will be placed in the badge. The `color` option can also be set to set the ids-badge color setting. |\n| `alert` | Displays `ids-alert` element, and the field value will appear in a tooltip. An `icon` option can be provided as an override.|\n| `color` | Displays `ids-color` element. If a `color` option is provided as an override, the field's value will appear in a tooltip. |\n| `icon` | Displays the field value as an `ids-icon`. An `icon` option can be provided as an override, and the field value will appear beside this `icon` override. A `size` option can also be provided. |\n| `favorite` | Displays the field value as a `star-filled` if true or `star-outlined` if false. A `size` option can be provided as an override. |\n| `tag` | Displays the field value as an `ids-tag`. A `color` option can be provided as an override. |\n| `progress` | Displays the field value as an `ids-progress`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `rating` | Displays the field value as an `ids-rating`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `slider` | Displays the field value as an `ids-slider`. A `text` option can be provided to customize the label. A `color`, `max`, `min` and `type` option can be provided as overrides. |\n| `stepChart` | Displays the field value as an `ids-step-chart`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `image` | Displays the field value as an `ids-image`. A `text` option can be provided to the `alt` and `title` attributes. |\n\n### Deprecated Formatters (Deprecated from 4.x)\n\n- `Input` No longer suggested to use, use simple list instead or a Text Formatter.\n- `Status, Color` No longer used, but badges can be used.\n- `Placeholder` Can now be set on the column and used with other formatters\n- `Ellipsis` Is now always enabled.\n- `Readonly` Can now be set on the column and used with other formatters\n- `Drilldown` Use button formatter with an icon.\n- `Template` is now deprecated for performance reasons, use a custom formatter now.\n- `ClassRange` Use column cssClass function or string\n- `Autocomplete, Lookup, TargetedAchievement, ProcessIndicator, Spinbox, Fileupload, Dropdown, Colorpicker, Tree, SummaryRow, GroupFooterRow, GroupRow, Expander, Editor, Textarea, Actions, RowReorder` May be added later\n\n## Custom Formatters\n\nIt is possible to create your own custom formatter. The idea behind the formatter is it takes the cell value and does processing on it to return the correct markup for the cell. The simplest custom formatter would be this example.\n\n```js\ncolumns.push({\n  id: 'custom',\n  name: 'Custom',\n  field: 'price',\n  formatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n    const value = `Custom: ${rowData[columnData.field] || '0'}`;\n    return `<span class=\"text-ellipsis\">${value}</span>`;\n  }\n});\n```\n\nTo style a custom formatter you may need to add a css part for the element. For example:\n\n```js\nformatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n  const value = `${rowData[columnData.field] || ''}`;\n  return `<a part=\"custom-link\" href=\"#\" class=\"text-ellipsis\">${escapeHTML(value)}</a>`;\n},\n```\n\nThen in the style sheet you add for you page you put the styles.\n\n```css\nids-data-grid::part(custom-link) {\n  color: #da1217;\n}\n\nids-data-grid::part(custom-link):hover {\n  color: #6c080b;\n}\n```\n\nThe formatter is then linked via the column on the formatter setting. When the grid cell is rendered the formatter function is called and the following arguments are passed in.\n\n- `rowData` The current row's data from the data array.\n- `columnData` The column object with all of the column configuration for this cell.\n\n## Events\n\n- `activecellchanged` Fires when the active cell changes with the keyboard or by click.\n- `sorted` Fires when the sort column is changed.\n- `selectionchanged` Fires any time the selection changes.\n- `activationchanged` Fires any time the active row changes.\n- `rowselected` Fires for each row that is selected.\n- `rowdeselected` Fires for each row that is deselected.\n- `rowactivated` Fires for each row that is activated.\n- `rowdeactivated` Fires for each row that is deactivated.\n- `rowclick` Fires for each row that is clicked.\n- `dblclick` Fires each time double clicked on body cells or header cells. Based on where it clicked details can be capture like `type: 'body-cell'|'header-title'|'header-filter'` etc.\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n- `columnresized` Fires when a column is resized or setColumnWidth is called.\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto\n- `rowExpanded` Fires when a tree or expandable row is expanded or collapsed\n- `rowCollapsed` Fires when a tree or expandable row is expanded or collapsed\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called.\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto.\n- `beforemenushow` Fires before context menu show, you can return false in the response to veto.\n- `menushow` Fires after context menu show.\n- `menuselected` Fires after context menu item selected.\n- `settingschanged` Fires after settings are changed in some way.\n- `scrollstart` Fires when data-grid reaches the topmost row.\n- `scrollend` Fires when data-grid reaches the bottommost row.\n- `afterrendered` Fires after rendered the data grid.\n\n## Methods\n\n- `setColumnWidth` Can be used to set the width of a column.\n- `setColumnVisibility` Can be used to set the visibility of a column.\n- `setActivateCell(cell, row)` Can be used to set focus of a cell.\n- `selectedRows` Lists the indexes of the currently selected rows.\n- `saveSetting(setting: string)` Save the given setting to local storage.\n- `saveAllSettings` Save all user settings to local storage.\n- `savedSetting(setting: string)` Get saved given setting value from local storage.\n- `allSavedSettings` Get saved all user settings from local storage.\n- `clearSetting(setting: string, key?: string)` Clear the given saved setting from local storage.\n- `clearAllSettings(userKeys: unknown)` Clear saved all user settings from local storage.\n- `restoreSetting(setting: string, value?: unknown)` Restore the given saved setting from local storage.\n- `editFirstCell` Puts the first cell on the active row into edit mode.\n- `appendData(data: Record<string, unknown>)` Use this to add more data to the datagrid's existing dataset.  This will automatically render additional rows in the datagrid.\n- `addRow(data: Record<string, unknown>, index?: number)` Adds a new row at optional row index and defaults the values to all those provided in the data\n- `addRows(data: Array<Record<string, unknown>>, index?: number)` Adds multiple new rows at optional row index and defaults the values to all those provided in the data\n- `removeRow(index: number)` Removed the provided row index from the dataset and visual datagrid\n- `clearRow(index: number)` Clears all values on the given row.\n- `commitCellEdit` Stops editing and commits the value in the active editor.\n- `cancelCellEdit` Stops editing and reverts the value in the active editor.\n- `resetDirtyCells` Clears all dirty cell indicators.\n- `dirtyCells` Gives a list of all currently dirty cells.\n- `exportToExcel(format: 'csv' | 'xlsx', filename: string, keepGridFormatting: boolean)` Export datagrid datasource to an excel file. This keeps grid formatting by default.\n- `collapseAll()` Collapse all expandable or tree rows.\n- `expandAll()` Expand all expandable or tree rows.\n- `toggleAll(opt: boolean)` Toggle collapse/expand all expandable or tree rows. `opt false`: will expand all, `opt: true`: will collapse all\n- `refreshRow` IdsDataGridRow method to refresh row element and its cells.\n- `refreshCell` IdsDataGridCell method to refresh cell element.\n- `updateDataset(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row.\n- `updateDatasetAndRefresh(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row and refreshes row/cells UI.\n\n## Filters\n\nData rows can be filter based on one or several criteria. Whole filter row can turned on/off by the api setting `filterable` and can be disabled by the api setting `filter-row-disabled`. The filter conditions can be applied thru the UI or programmatically. Each column can have its own filter type and turn on/off by columns setting.\n\n### Filter Columns Setting\n\nAll the filter settings can be passed thru columns data.\n\n|Setting|Type|Description|\n|---|---|---|\n|`filterType` | Function | Data grid built-in filter method, see the dedicated section below. |\n|`filterConditions` | Array | List of items to be use as operators in menu-button or options in dropdown. |\n|`filterFunction` | Function | User defined filter method, it must return a boolean. |\n|`filterOptions` | Object | Setting for components are in use, for example: `label, placeholder, disabled`. |\n|`isChecked` | Function | User defined filter method, it must return a boolean. This method use along built-in `checkbox` only, when filter data value is not boolean type. |\n\n### Built-in Filter Methods\n\n|Method|Description|\n|---|---|\n|`text` | It filter as text comparison. Contains input and menu-button with list of default operators. |\n|`integer` | It filter as integer comparison. Contains input and menu-button with list of default operators. |\n|`decimal` | It filter as decimal comparison. Contains input and menu-button with list of default operators. |\n|`contents` | It filter as text comparison. Contains dropdown and auto generate list of items based on column data. |\n|`dropdown` | It filter as text comparison. Contains dropdown and must pass list of item by setting `filterConditions`. |\n|`checkbox` | It filter as boolean comparison. Contains menu-button with list of default operators. |\n|`date` | It filter as date comparison. Contains date-picker and menu-button with list of default operators. |\n|`time` | It filter as time comparison. Contains time-picker and menu-button with list of default operators. |\n\n### Custom Filter\n\nIf the built-in filters are not enough, creating a custom filter is an option. There are two parts you can create both parts custom or mix-match with built-in.\n\n1. `UI Only` In order to do custom UI part of filter, add as html markup thru a slot. It must use slot and column-id attributes for example: `<div slot=\"filter-n\" column-id=\"n\">...</div>` where n is the columnId same passed in the columns.\n1. `filterFunction` This is a user defined filter method which must return a boolean. It determines if a cell value should be considered as a valid filtered value.\n1. `disableClientFilter` This is an api setting to disable filter logic client side. It will set filter conditions and fire an event `filtered` which can listen for custom logic.\n\n### Filter Code Examples\n\nBasic text filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nNo filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"false\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisabled filter row, will disabled all attached filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\" filter-row-disabled=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nHyperlink, integer, decimal, date and time filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'hyperlink',\n  name: 'Hyperlink',\n  field: 'description',\n  href: '#',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.hyperlink\n});\ncolumns.push({\n  id: 'integer',\n  name: 'Integer',\n  field: 'price',\n  filterType: dataGrid.filters.integer,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'decimal',\n  name: 'Decimal',\n  field: 'price',\n  filterType: dataGrid.filters.decimal,\n  formatter: dataGrid.formatters.decimal,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'date',\n  name: 'Date',\n  field: 'publishDate',\n  filterType: dataGrid.filters.date,\n  formatter: dataGrid.formatters.date\n});\ncolumns.push({\n  id: 'time',\n  name: 'Time',\n  field: 'publishDate',\n  filterType: dataGrid.filters.time,\n  formatter: dataGrid.formatters.time\n});\n```\n\nSome filter options label, placeholder, disabled.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterOptions: {\n    label: 'Label text for description input',\n    placeholder: 'Placeholder text for description input',\n    disabled: true\n  }\n});\n```\n\nCustom operators items for menu-button.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterConditions: [{\n    value: 'contains',\n    label: 'Contains',\n    icon: 'filter-contains'\n  },\n  {\n    value: 'equals',\n    label: 'Equals',\n    icon: 'filter-equals',\n    selected: true\n  }]\n});\n```\n\nContents and dropdown type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'location',\n  name: 'Location',\n  field: 'location',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.contents,\n  filterOptions: {\n    notFilteredItem: { value: 'not-filtered', label: 'Not Filtered' }\n  }\n});\ncolumns.push({\n  id: 'useForEmployee',\n  name: 'NotFilterdItem (shown as blank)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\ncolumns.push({\n  id: 'useForEmployeeCustomNotFilterdItem',\n  name: 'NotFilterdItem (show as custom text)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'not-filtered', label: 'Not Filtered' },\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\n```\n\nCheckbox type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'checkbox',\n  name: 'Checkbox',\n  field: 'inStock',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox\n});\ncolumns.push({\n  id: 'customCheckMethod',\n  name: 'Custom check method',\n  field: 'active',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox,\n  isChecked: (value) => value === 'Yes'\n});\n```\n\nCustom filter method.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\n// Custom filter checking\nconst myCustomFilter = (opt) => {\n  const { operator, columnId, value } = opt.condition;\n  const val = {\n    condition: Number.parseInt(value, 10),\n    data: Number.parseInt(opt.data[columnId], 10)\n  };\n  let isMatch = false;\n  if (Number.isNaN(val.condition) || Number.isNaN(val.data)) return isMatch;\n\n  if (operator === 'equals') isMatch = (val.data === val.condition);\n  if (operator === 'greater-than') isMatch = (val.data > val.condition);\n  if (operator === 'greater-equals') isMatch = (val.data >= val.condition);\n  if (operator === 'less-than') isMatch = (val.data < val.condition);\n  if (operator === 'less-equals') isMatch = (val.data <= val.condition);\n\n  return isMatch;\n};\n\nconst columns = [];\ncolumns.push({\n  id: 'customFilterMethod',\n  name: 'Custom Filter Method',\n  field: 'price',\n  filterFunction: myCustomFilter,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\n```\n\nCustom filter UI part.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n  <div slot=\"filter-description\" column-id=\"description\">\n    <ids-menu-button id=\"btn-filter-description\" icon=\"filter-greater-equals\" menu=\"menu-filter-description\" dropdown-icon>\n      <span class=\"audible\">Greater Than Or Equals</span>\n    </ids-menu-button>\n    <ids-popup-menu id=\"menu-filter-description\" target=\"#btn-filter-description\">\n      <ids-menu-group select=\"single\">\n        <ids-menu-item value=\"equals\" icon=\"filter-equals\">Equals</ids-menu-item>\n        <ids-menu-item value=\"greater-than\" icon=\"filter-greater-than\">Greater Than</ids-menu-item>\n        <ids-menu-item value=\"greater-equals\" icon=\"filter-greater-equals\" selected=\"true\">Greater Than Or Equals</ids-menu-item>\n        <ids-menu-item value=\"less-than\" icon=\"filter-less-than\">Less Than</ids-menu-item>\n        <ids-menu-item value=\"less-equals\" icon=\"filter-less-equals\">Less Than Or Equals</ids-menu-item>\n      </ids-menu-group>\n    </ids-popup-menu>\n    <ids-input id=\"input-filter-description\" type=\"text\" size=\"full\" placeholder=\"Slotted description\" label=\"Slotted description input\">\n    </ids-input>\n  </div>\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisable client filter\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" disable-client-filter=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n\ndataGrid.addEventListener('filtered', (e: any) => {\n  console.info('filtered:', e.detail);\n});\n```\n\n### Filter rows programmatically\n\n```js\n// Filter rows\nconst conditions = [{ columnId: 'description', operator: 'contains', value: '5' }];\ndataGrid.applyFilter(conditions);\n\n// Reset all filters\ndataGrid.applyFilter([]);\n```\n\n### Filter Events\n\nThe following events are relevant to data-grid filters.\n\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n\n## Custom cell colors\n\nIn some cases, it may be desirable to customize the background color of cells.  This can be done with the `cssPart` column setting:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell'\n});\n```\n\nThe `cssPart` property is translated into a `part` attribute that is applied to every cell in the column.  In the event the color needs to be conditional based on the row index or other logic, a function can be used:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2')\n  // ...\n});\n```\n\nAfter this is defined, accompanying CSS can be written to target the parts `custom-cell`, `custom-cell-1`, and `custom-cell-2` to change background color or other CSS properties of the cell:\n\n```css\nids-data-grid::part(cell) {\n  background-color: #ebf9f1;\n}\n\nids-data-grid::part(cell-selected) {\n  background-color: #c9dad0;\n}\n```\n\n### Changing selected cell colors\n\nAnother column setting, `cellSelectedCssPart` can be used alongside `cssPart` to customize the selected color of the row in a similar way.  When using `mixed` selection, this color is also applied to activated rows:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell',\n  cellSelectedCssPart: 'custom-cell-selected'\n});\n```\n\nThis column setting can also be a function, just like `cssPart`:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2'),\n  cellSelectedCssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-selected-1' : 'custom-cell-selected-2')\n  // ...\n});\n```\n\n## Tooltip Code Examples\n\nSet suppress tooltips to turn off.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" suppress-tooltips>\n</ids-data-grid>\n```\n\nSet custom tooltip strings.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: 'This is a product Id',\n  headerTooltip: 'This is the product Id header title',\n  headerIconTooltip: 'This is product Id header icon',\n  filterButtonTooltip: 'This is the product Id filterButton'\n});\n```\n\nSet tooltip as callback.\n\n```js\nconst tooltipCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return `Text: ${text}<br/>Header Row: ${rowIndex}, Cell: ${columnIndex}`;\n  } else if (type === 'filter-button') {\n    return `Text: ${text}<br/>FilterButton Row: ${rowIndex}, Cell: ${columnIndex}`;\n  }\n  return `Text: ${text}<br/>for Row: ${rowIndex}, Cell: ${columnIndex}`;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: tooltipCallback\n});\n```\n\nSet tooltip custom options.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: {\n    placement: 'top',\n    headerPlacement: 'top',\n    headerIconPlacement: 'top',\n    filterButtonPlacement: 'bottom',\n    x: 0,\n    y: 10,\n    headerX: 0,\n    headerIconX: 0,\n    headerY: 10,\n    headerIconY: 10,\n    filterButtonX: 0,\n    filterButtonY: 22\n  }\n});\n```\n\nSet tooltip options as callback.\n\n```js\nconst tooltipOptionsCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return { headerPlacement: 'top', headerX: 0, headerY: 10 };\n  } else if (type === 'header-icon') {\n    return { headerIconPlacement: 'top', headerIconX: 0, headerIconY: 10 };\n  } else if (type === 'filter-button') {\n    return { filterButtonPlacement: 'bottom', filterButtonX: 0, filterButtonY: 22 };\n  }\n  return { placement: 'top', x: 0, y: 10 };\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: tooltipOptionsCallback\n});\n```\n\nSet tooltip custom css.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: 'custom-turquoise',\n  headerTooltipCssPart: 'custom-turquoise',\n  headerIconTooltipCssPart: 'custom-turquoise',\n  filterButtonTooltipCssPart: 'custom-turquoise'\n});\n```\n```css\n/* tooltip css part `custom-turquoise` */\nids-data-grid::part(custom-turquoise-tooltip-arrow-top)::after {\n  border-top-color: #2f8d8e;\n}\nids-data-grid::part(custom-turquoise-tooltip-popup) {\n  background-color: #2f8d8e;\n}\n```\n\nSet tooltip custom css as callback.\n\n```js\nconst tooltipCssPartCallback = (args: { type: string }): string => {\n  const { type } = args;\n  let cssPart = '';\n  // Set random css part each time, for `body-cell` tooltips\n  if (type === 'body-cell') {\n    const parts = ['azure', 'ruby'];\n    const randomIndex = Math.floor(Math.random() * parts.length);\n    cssPart = parts[randomIndex];\n  }\n  return cssPart;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: tooltipCssPartCallback\n});\n```\n```css\n/* tooltip css part `azure` */\nids-data-grid::part(azure-tooltip-arrow-top)::after {\n  border-top-color: #0066d4;\n}\nids-data-grid::part(azure-tooltip-popup) {\n  background-color: #0066d4;\n}\n\n/* tooltip css part `ruby` */\nids-data-grid::part(ruby-tooltip-arrow-top)::after {\n  border-top-color: #c31014;\n}\nids-data-grid::part(ruby-tooltip-popup) {\n  background-color: #c31014;\n}\n```\n\n## context menu Code Examples\n\nThe context menus can be set via the dataset.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n</ids-data-grid>\n```\n```js\n// Dataset for header cells context menu\nconst headerMenuData = {\n  id: 'grid-header-context menu',\n  contents: [{\n    id: 'header-actions-group',\n    items: [\n      { id: 'actions-split', value: 'actions-split', text: 'Split' },\n      { id: 'actions-sort', value: 'actions-sort', text: 'Sort' },\n    ]\n  }],\n};\n\n// Dataset for body cells context menu\nconst menuData = {\n  id: 'grid-context menu',\n  contents: [{\n    id: 'actions-group',\n    items: [\n      { id: 'item-1', value: 'item-1', text: 'Item One' },\n      { id: 'item-2', value: 'item-2', text: 'Item Two' },\n      { id: 'item-3', value: 'item-3', text: 'Item Three' }\n    ]\n  }],\n};\n\n// Set context menu data with data-grid\ndataGrid.menuData = menuData;\ndataGrid.headerMenuData = headerMenuData;\n\n// Set to return true/false in the response to veto before context menu show.\ndataGrid.addEventListener('beforemenushow', (e: any) => {\n  console.info('before context menu show', e.detail);\n  // e.detail.response(false);\n});\n\n// Set to watch after context menu show.\ndataGrid.addEventListener('menushow', (e: any) => {\n  console.info('After context menu show', e.detail);\n});\n\n// Set to watch after context menu item selected.\ndataGrid.addEventListener('menuselected', (e: any) => {\n  console.info('context menu item selected', e.detail);\n});\n```\n\nSet context menu thru Slot.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n  <!-- context menu header cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"header-context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n      <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n  <!-- context menu body cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n      <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n      <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n      <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n</ids-data-grid>\n```\n\nSet context menu thru ID.\n\n```html\n<ids-data-grid\n  header-menu-id=\"grid-header-context menu\"\n  menu-id=\"grid-context menu\"\n  id=\"data-grid-1\"\n  label=\"Books\"\n></ids-data-grid>\n\n<!-- context menu header cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-header-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n    <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n\n<!-- context menu body cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n    <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n    <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n    <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n```\n\n## Empty Message\n\nSet empty message thru slot (markup).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-slot\" label=\"Books\">\n  <ids-empty-message hidden icon=\"empty-search-data-new\" slot=\"empty-message\">\n    <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">No Data</ids-text>\n    <ids-text hidden label=\"true\" slot=\"description\">There is no data available.</ids-text>\n  </ids-empty-message>\n</ids-data-grid>\n```\n\nSet empty message thru settings (markup).\n\n```html\n<ids-data-grid\n  id=\"data-grid-em-thru-settings\"\n  label=\"Books\"\n  empty-message-icon=\"empty-error-loading-new\"\n  empty-message-label=\"No Data\"\n  empty-message-description=\"There is no data available.\"\n></ids-data-grid>\n```\n\nSet empty message thru settings (javascript).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-settings-js\" label=\"Books\">\n</ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-em-thru-settings-js');\ndataGrid.emptyMessageIcon = 'empty-error-loading-new';\ndataGrid.emptyMessageLabel = 'No Data';\ndataGrid.emptyMessageDescription = 'There is no data available.';\n```\n\n## Row Height\n\nAs mentioned in the settings section you can change the row height by setting the rowHeight option.\n\n```html\n     <ids-data-grid id=\"data-grid-row-height\" row-height=\"md\"></ids-data-grid>\n```\n\nIts worth mentioning the characteristics and usage for each one.\n\nLarge (`row-height=\"lg\"`) - Row Height is 50. The default row height, header is 16px and body cells are 16px. 16px padding on cells and header. You should use this most of the time if there is plenty of room on the UI and to avoid the UI looking crowded.\nMedium (`row-height=\"md\"`) - Row Height is 40. Header is 16px and body cells are 16px. 12px padding on cells and header. If you need to see a few more rows but still want to avoid a crowded UI, this is the next best option.\nSmall (`row-height=\"sm\"`) - Row Height is 35. Header is 16px and body cells are 16px. 8px padding on cells and header. This is the smallest option that is recommended for readability and spacing.\nExtra Small (`row-height=\"xs\"`) - Row Height is 30. Header is 14px and body cells are 14px. 8px padding on cells and header. If you need a very compressed data grid with a lot of data you can use this option. But there is a trade off of bad readability and spacing.\nExtra Extra Small (`row-height=\"xxs\"`) - Row Height is 25. Header is 14px and body cells are 14px. 2px padding on cells and header. Avoid this option as it is very crowded but it is included for edge cases.\n\n## States and Variations\n\n**Rows**\n- Hover\n- Selected\n- Disabled\n- Readonly\n- Activated\n\n**Columns**\n- Focus\n- Hover\n- Sorted\n- Selected\n- Disabled\n- Filtered\n\n**Cells**\n- Hover (sometimes a cursor change)\n- Readonly\n- Focus\n- Checked/Not Checked (Checkboxes)\n\n## Keyboard Guidelines\n\n- <kbd>Tab</kbd>The initial tab enters the grid with focus on the first cell of the first row, often a header. A second tab moves out of the grid to the next tab stop on the page. Once focus is established in the grid, a TAB into or a Shift Tab into the grid will return to the cell which last had focus. If in edit mode will finish editing and start editing the next cell.\n- <kbd>Shift + Tab</kbd> Moves the reverse of tab. If in edit mode will finish editing and start editing the previous cell.\n- <kbd>Left</kbd> and <kbd>Right</kbd> Move focus to the adjacent column's cell. There is no wrap at the end or beginning of columns.\n- <kbd>Up</kbd> and <kbd>Down</kbd> Move focus to the adjacent row's cell. There is no wrap at the first or last row.\n- <kbd>Home</kbd> moves focus to the first cell of the current row\n- <kbd>End</kbd> moves focus to the last cell of the current row\n- <kbd>Page Up</kbd> moves focus to the first cell in the current column\n- <kbd>Page Down</kbd> moves focus to the last cell in the current column\n- <kbd>Space</kbd> Toggles selection the activate row. If suppressRowDeselection is set it will be ignored on deselect. If the cell contains an expandable element then the row will toggle the expanded state. If the cell contains a checkbox editor, will toggle the checkbox state.\n- <kbd>F2</kbd> toggles actionable mode. Pressing the <kbd>Tab</kbd> key while in actionable mode moves focus to the next actionable cell. While in actionable mode you can do things like type + enter. This will move you down a row when you hit enter. If the cell has a control that uses down arrow (like the drop downs or lookups that are editable). Then the user needs to hit enter to enable the edit mode on that cell.\n- <kbd>Triple Click</kbd> Not a keyboard shortcut, but if you have text in a cell that is overflowed a triple click will select all the text even the part that is invisible.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Enter</kbd> Activates edit mode on the cell if it is editable. There is also an \"auto edit detection\". If the user starts typing then edit mode will happen automatically without enter. If in edit mode already <kbd>Enter</kbd> will finish edit mode. If `editNextOnEnterPress` is enabled then editing will start on the same column in next row.\n- <kbd>Shift + Enter</kbd> Same as enter but if `editNextOnEnterPress` is enabled then editing will start on the same column in previous row.\n- <kbd>F2</kbd> Finish editing same as Enter. But if `editNextOnEnterPress` is enabled, will stay in same cell. `cancelEditMode` will fire.\n- <kbd>CMD/CTRL + Enter</kbd> Finish editing same as Enter.\n- <kbd>ESC</kbd> Revert to the previous value and cancel editing. `cancelEditMode` will fire.\n\n## Responsive Guidelines\n\n- By default, data grid grows depending on the amount of contents within and will scroll if necessary under the header. It stops growing when it reaches the size of the parent container.\n- `autoFit` property or `auto-fit` attribute can be set manually to make the data grid size fill and be responsive to the size of the screen, regardless of the amount of contents.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Counts have all new markup and classes.\n\n**4.x to 5.x**\n- Data grid has all new markup and a custom element but some similarly named options\n- Still uses same columns and data set options. Some column options enhanced and changed.\n- If using events events are now plain JS events for example: sorted, rendered\n- Some Api Functions have changed\n- If using properties/settings these are now attributes or as plain properties for example: data, virtual-scroll\n- Markup has changed to a custom element `<ids-data-grid></ids-data-grid>`\n- Can now be imported as a single JS file and used with encapsulated styles\n- `Drill Down` Formatter is now covered by `Button` formatter with `icon=\"drilldown\"`\n- `textOverflow` setting is now by default\n- `rowNavigation` setting has replaced `cellNavigation`. Cell navigation is the default behavior.\n- `stretchColumn` is now more flexible and can be achieved by setting a column width to `minmax(130px, 4fr)`. I.E. some min width and a `fr` unit equal to the remaining number of columns (or similar variations).\n- split columns are not supported anymore but could be done with a custom formatter if needed\n- `frozenColumns` setting is now set on each column by adding `frozen: 'left'` or `frozen: 'right'` to the column definition.\n- Some events are renamed see the events section for more details, also the signature of the events has changed.\n- Custom formatter functions can now be any type of function and have a different signature.\n- The `expanded` column option for tree was renamed to `rowExpanded`.\n- The `expandrow/collapserow` events are renamed to `rowexpanded/rowcollapsed`\n- The `beforeentereditmode/entereditmode/exiteditmode` event is renamed to `beforecelledit/celledit/endcelledit/cancelcelledit`\n- The `actionablemode` feature has been replaced with simply tabbing to the next editable field when in edit mode.\n\n## Accessibility Guidelines\n\n1.1.1 Non-text Content - All images, links and icons have text labels for screen readers when the formatters are used.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and links and images of text has a contrast ratio of at least 4.5:1.\n- 2.1.1 Keyboard - Make all functionality available from a keyboard. The grid has keyboard shortcuts and is usable with a screen reader due to the addition of aria tags.\n- A datagrid in general including this one uses the following aria tags\n  - `aria-label` labels the enter table on the main table\n  - `aria-rowcount` lists the visible row count on the main table\n  - `aria-colindex` the index of each column on the column elements\n  - `aria-rwindex` the index of each row on the row elements\n  - `aria-setsize` for tree grid lists the number of elements in each level (group)\n  - `aria-level` the level of indentation\n  - `aria-posinset` the depth into each set\n  - `aria-expanded` on the row it indicates if the row is expanded (for tree and expandable row)\n  - `aria-sort` indicates the sort direction on the sortable columns\n  - `aria-checked` indicates if the element is checked on checkbox columns and headers\n\n## Regional Considerations\n\nTitles and labels should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n\n## Code Separation (For Developers)\n\nThe code is divided into several files. Here is a description of where everything is.\n\n- `ids-data-grid-cell.ts` creates a non-shadow root `ids-data-grid-cell`, and handles its own selection, and activation.\n- `ids-data-grid-cell.scss` contains all css related to `.ids-data-grid-cell` and its children\n- `ids-data-grid-contextmenu.ts` contains code in the form of export functions, that adds ability to get right click menus on headers and cells\n- `ids-data-grid-filter.scss` contains all css related to the filter row and its children\n- `ids-data-grid-filter.ts` contains code to implement the filtering functionality and its ui (some functions are in ids-data-source)\n- `ids-data-grid-formatters.ts` contains all formatter functions and some supporting code like data extraction\n- `ids-data-grid-header.ts` contains most header functionality, the header template, and code related to header actions like sort, reorder and selection.\n- `ids-data-grid-header.scss` contains all css related to `.ids-data-grid-header` and its children\n- `ids-data-grid-row.ts` contains most row functionality, the row template, and code related to row actions like expand, collapse, select, activate\n- `ids-data-grid-row.scss` contains all css related to `.ids-data-grid-row` and its children\n- `ids-data-grid-tooltip-mixin.js` contains a tooltip mixin that adds tooltip functionality to cells and headers, its different from `ids-tooltip-mixin` (more specific)\n- `ids-data-grid.js` contains all main data grid code, the api and settings and the main generator loop for the data grid\n"}},{"name":"ids-data-grid","attributes":[{"name":"initialized","values":[]},{"name":"isResizing","values":[]},{"name":"activeCell","values":[]},{"name":"autoFitSet","values":[]},{"name":"currentColumns","values":[]},{"name":"sortColumn","values":[]},{"name":"emptyMessageElements","values":[]},{"name":"cacheHash","values":[]},{"name":"contextmenuTypes","description":"Types for contextmenu.","values":[]},{"name":"header","values":[]},{"name":"body","values":[]},{"name":"rows","values":[]},{"name":"wrapper","values":[]},{"name":"datasource","description":"Reference to datasource API","values":[]},{"name":"filters","description":"Filters instance attached to component","values":[]},{"name":"formatters","description":"API for list of formatters","values":[]},{"name":"editors","description":"API for list of editors","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"contextmenuInfo","description":"Contextmenu stuff use for info and events","values":[]},{"name":"isDynamicContextmenu","description":"Track contextmenu data dynamicly changed by the user.","values":[]},{"name":"#lastSelectedRow","description":"Keep flag for last selected row","values":[]},{"name":"#lastShiftedRow","description":"Keep reference to last shifted row","values":[]},{"name":"onLocaleChange","description":"Handle Locale (and language) change","values":[]},{"name":"visibleColumns","description":"Get the visible column data (via hidden attributes)","values":[]},{"name":"rightFrozenColumns","description":"Get the columns frozen on the right","values":[]},{"name":"leftFrozenColumns","description":"Get the columns frozen on the left","values":[]},{"name":"hasFrozenColumns","description":"Return true if any columns are frozen","values":[]},{"name":"showHeaderExpander","description":"Set to show header expander icon for expandable and tree rows","values":[]},{"name":"alternateRowShading","description":"Set a style on every alternate row for better readability.","values":[]},{"name":"columns","description":"Set the columns of the data grid","values":[]},{"name":"columnGroups","description":"Set the columns groups of the data grid","values":[]},{"name":"data","description":"Set the data of the data grid","values":[]},{"name":"emptyMessageDescription","description":"Set empty message description","values":[]},{"name":"emptyMessageIcon","description":"Set empty message icon","values":[]},{"name":"emptyMessageLabel","description":"Set empty message label","values":[]},{"name":"headerMenuId","description":"Set header menu id","values":[]},{"name":"headerMenuData","description":"Set the header menu data","values":[]},{"name":"menuId","description":"Set menu id","values":[]},{"name":"menuData","description":"Set the menu data","values":[]},{"name":"virtualScroll","description":"Set the list view to use virtual scrolling for a large amount of rows","values":[]},{"name":"virtualScrollSettings","description":"Some future configurable virtual scroll settings","values":[]},{"name":"virtualScrollMaxRowsInDOM","values":[]},{"name":"#containerMaxHeight","description":"Virtual Container Height","values":[]},{"name":"#customScrollEventCache","values":[]},{"name":"#rafReference","description":"Stores the last request animation from used during virtual scroll.\nRAFs are recommended in the row-recycling articles we referenced.\nIf we were to take them out, what would happen is the repainting of the browser\nwindow would happen during scrolling and we'd errors like \"redraw happened during scrolling.\n\nOne thing to note is RAFs should have as little logic as possible within them\nand should only contain the CSS+DOM manipulations.\nIt's best to do (as much as possible) logic+calculations outside the RAF,\nand then when ready to move things around, do those inside the RAF.\nthis keeps the RAF short and sweet, and keeps our FPS-lag low.","values":[]},{"name":"label","description":"Set the aria-label element in the DOM. This should be translated.","values":[]},{"name":"rowHeight","description":"Set the row height between extra-small, small, medium and large (default)","values":[]},{"name":"rowStart","description":"Get the start-row index","values":[]},{"name":"rowNavigation","description":"Sets keyboard navigation to rows","values":[]},{"name":"listStyle","description":"Set the style of the grid to list style for simple readonly lists","values":[]},{"name":"rowSelection","description":"Set the row selection mode between false, 'single', 'multiple' and 'mixed'","values":[]},{"name":"suppressEmptyMessage","description":"Set suppress empty message","values":[]},{"name":"suppressRowClickSelection","values":[]},{"name":"suppressRowDeselection","description":"Set to true to prevent rows from being deselected if click or space bar the row.\ni.e. once a row is selected, it remains selected until another row is selected in its place.","values":[]},{"name":"suppressRowDeactivation","description":"Set to true to prevent rows from being deactivated if clicked.\ni.e. once a row is activated, it remains activated until another row is activated in its place.","values":[]},{"name":"selectedRows","description":"Get the selected rows","values":[]},{"name":"activatedRow","description":"Get the activated row","values":[]},{"name":"activeCellEditor","values":[]},{"name":"rowCount","description":"Set/Get the total number of records","values":[]},{"name":"rowPixelHeight","description":"Get the row height in pixels","values":[]},{"name":"autoFit","description":"Set the card to auto fit to its parent size","values":[]},{"name":"suppressCaching","description":"Suppress row row and cell caching","values":[]},{"name":"disableClientFilter","description":"Sets disable client filter","values":[]},{"name":"filterable","description":"Sets the data grid to be filterable","values":[]},{"name":"filterRowDisabled","description":"Sets disabled to be filter row","values":[]},{"name":"filterWhenTyping","description":"Sets the data grid to filter when typing","values":[]},{"name":"treeGrid","description":"Sets the grid to render as a tree grid (does require a tree formatter column)","values":[]},{"name":"groupSelectsChildren","description":"If true then the children will be selected when a group is selected","values":[]},{"name":"idColumn","description":"Used to set which column is the unique id column in the data set.\nThis is needed for some operations.","values":[]},{"name":"expandableRow","description":"If true an expandable row is present in the grid. Also requires a expandable-row-template and\nan expander formatter.","values":[]},{"name":"expandableRowTemplate","description":"An id that points to the template to use for expandable rows. Also requires the expandable-row setting\nand an expander formatter.","values":[]},{"name":"uniqueId","description":"Set uniqueId to save to local storage.","values":[]},{"name":"editable","description":"Set to true if one or more editors is present to activate editing","values":[]},{"name":"editNextOnEnterPress","description":"Set to false to avoid moving up and down rows when editing and hitting enter","values":[]},{"name":"addNewAtEnd","description":"Set to true to automatically append rows when keyboard navigating\nthe data grid in editable mode","values":[]},{"name":"invalidCells","description":"Get all the currently invalid cells","values":[]},{"name":"dirtyCells","description":"Get all the currently dirty cells","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# Ids Data Grid\n\n## Description\n\nThe data grid component (ids-data-grid) is used to arrange tabular data in rows and columns for easier scanning and comparison. Data grids are very configurable in both design and functionality and they can be found within almost every product/app.\n\nYou should pass an array of objects in to the grid on the `dataset` object. Also pass the `columns` array which contains the column configuration. There are a number of events described in the events and API section, as well as the column settings.\n\nA Read-Only data grid uses \"Formatters\" to render cell content. A number of these are listed in the API section and it is possible to create your own.\n\n## Use Cases\n\n- The data grid component is most useful when it is used for categorically sorting dense and repetitive information. Each individual item is listed down the Y axis of the chart, and their shared attribute categories are listed along the X axis. The resulting cells are filled with information that is relevant to the corresponding item and attribute.\n\n## Terminology\n\n- **Title**: The name of the data grid optionally appearing above the grid and describing the contents.\n- **Options**: An optionally actions menu button with functionality that operates on the entire data grid.\n- **Cell**: Body elements of the data grid that contain an object's value or attribute. Cells should only contain one type of content or it can be confusing and hurt accessibility.\n- **Header Cell**: These cells contain the names of the columns in the grid and related functions like filtering and sorting. All cells below the header cell will hold values related to the attribute in the header cell.\n- **Column**: Cells stacked vertically that contain values relate to the attribute found on the top header cell.\n- **Row**: Each row contains one cell per column in the data grid, and each cell displays a single value in the bound data item.\n- **Tree**: Denotes the use of hierarchical data, with an expandable and collapsible hierarchy.\n\n## Themeable Parts\n\n- `table` allows you to further style the table main element\n- `container` allows you to further style the container element\n- `body` allows you to further style the body element\n- `header` allows you to further style the header element\n- `headerCell` allows you to further style the header cells\n- `row` allows you to further style the rows\n- `cell` allows you to further style the row cells\n- `cell-selected` allows you to further style row cells that are selected (in mixed-selection mode, activated cells are also styled)\n- `tooltip-popup` allows you to further style or adjust the outer tooltip popup element\n- `tooltip-arrow` allows you to adjust the tooltip arrow element\n\n## Features (With Code Examples)\n\nA data grid is created by adding an `ids-data-grid` html element in the page and setting the options either inline in the markup or in the JS part of the code. You can only use simple types (string, boolean ect) for inline markup so passing the data and column arrangement is always done in the JS part. The data will be an array of objects so its in the correct tabular form. The columns are also an array of objects but with defined options and types. See more about columns in next section.\n\n```html\n<ids-data-grid id=\"data-grid-1\"></ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-1');\ndataGrid.data = dataset;\ndataGrid.columns = columns;\n```\n\n### Column Groups\n\nSetting column groups allows you to add a second level of columns in your header and the ability to group the first level. This is useful for when you have a large number of columns and you want to group them into logical or related sections.\n\nColumn groups are achieved by providing an array to the `columnGroups` setting. Only one level of column groups can be defined.\n\n```js\ndataGrid.columnGroups = [\n{\n  colspan: 3,\n  id: 'group1',\n  name: 'Column Group One',\n  align: 'center'\n},\n{\n  colspan: 2,\n  id: 'group2',\n  name: 'Column Group Two'\n},\n{\n  colspan: 2,\n  id: 'group3',\n  name: 'Column Group Three',\n  align: 'right'\n},\n{\n  colspan: 11,\n  id: 'group4',\n  name: 'Column Group Four',\n  align: 'left'\n}\n];\n```\n\nIf the column is hidden it will be automatically removed from the `colspan`. If in the last group you didn't provided a bug enough `colspan` it will be set to the remaining columns. The `name` text can be right or left aligned and given an id. The only required property is `colspan`.\n\n### Selection\n\nThe data grid selection feature involves the setting `rowSelection`. This can be one of several values.\n\n- `false` No selection enabled.\n- `multiple` Allows multiple rows to be selected. When doing this it is recommended to add a `formatters.selectionCheckbox` for the first column.\n- `single` Allows a single row to be selected. When doing this you can optionally to add a `formatters.selectionRadio` for the first column. You can use the `suppressRowDeselection` if you want one row to always be selected.\n- `mixed` Allows multiple rows to be selected by clicking only on the checkbox or <kbd>Space</kbd> key. If clicking a row then that row is activated, meaning it is the current row and something might be shown based on the data of that row. You can use the `suppressRowDeactivation` if you want one row to always be selected.\n\nHere is a code example for multi select\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" row-selection=\"multiple\">\n</ids-data-grid>\n```\n\n```js\n  dataGrid.addEventListener('rowselected', (e) => {\n    console.info(`Row Selected`, e.detail);\n  });\n\n  dataGrid.addEventListener('rowdeselected', (e) => {\n    console.info(`Row Deselected`, e.detail);\n  });\n\n  dataGrid.addEventListener('selectionchanged', (e) => {\n    console.info(`Selection Changed`, e.detail);\n  });\n```\n\nThe following events are relevant to selection/activation.\n\n`rowselected` Fires when an individual row is activation and gives information about that row.\n`rowdeselected` Fires when an individual row is deselected and gives information about that row.\n`selectionchanged` Fires once for each time selection changes and gives information about all selected rows.\n\n`rowactivated` Fires when an individual row is activated and gives information about that row.\n`rowdeactivated` Fires when an individual row is deactivated and gives information about that row.\n`activationchanged` Fires once for each time activation changes and gives information about the active row.\n\n### Tree Grid\n\nThe tree grid feature involves the setting `treeGrid` to true. In addition the data passed to the tree grid should contain a field called `children`. That contains the child rows. This can by unlimited levels but 2-4 is recommended as a max for a more usable UI. In addition you can preset some states by adding `rowExpanded: false` to the parent elements (default is expanded). And also set `rowHidden: false` for child rows that are expanded. You also need a `Expander` formatter on a cell (usually the first visible cell.\n\nHere is a code example for a tree grid.\n\n```html\n<ids-data-grid id=\"tree-grid\" label=\"Buildings\" tree-grid=\"true\" group-selects-children=\"true\"></ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to selection/activation.\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `groupSelectsChildren` {boolean} If the tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `suppressRowClickSelection` {boolean} If using selection you might want to set this so clicking a row will not select it.\n### Expandable Row\n\nThe Expandable Row feature involves the setting `expandableRow` to true. In addition a row template should be provided via an id that points to the `expandableRowTemplate` which is a `template` element. You can preset the expandable state by adding `rowExpanded: true` to the row element you want to expand. The default is collapsed.\n\nHere is a code example for an expandable row\n\n```html\n<ids-data-grid\n    id=\"data-grid-expandable-row\"\n    expandable-row=\"true\"\n    expandable-row-template=\"expandable-row-tmpl\"\n    label=\"Books\">\n    <template id=\"expandable-row-tmpl\">\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"16\" type=\"span\">${convention}</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">${price} USD</ids-text>\n        </ids-layout-grid>\n        <ids-layout-grid auto-fit=\"true\" padding-x=\"md\">\n        <ids-text font-size=\"14\" type=\"span\">Lorem Ipsum is simply sample text of the printing and typesetting industry. Lorem Ipsum has been the industry standard sample text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only...</ids-text>\n        </ids-layout-grid>\n    </template>\n</ids-data-grid>\n```\n\n```js\ndataGrid.addEventListener('rowexpanded', (e) => {\n  console.info(`Row Expanded`, e.detail);\n});\n\ndataGrid.addEventListener('rowcollapsed', (e) => {\n  console.info(`Row Collapsed`, e.detail);\n});\n```\n\nThe following events are relevant to expandable rows\n\n`rowexpanded` Fires when a tree grid row is expanded by click or keyboard.\n`rowcollapsed` Fires when a tree grid row is collapsed by click or keyboard.\n\nSome additional settings are needed or possibly needed.\n\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRowTemplate` {string} Should point to the row `template` element.\n\n### Editing\n\nThe Editing features start by setting `editable` to true. In addition you should add editors to columns and enable features of each of the editors. The features differ depending on the component used for editing. See the Keyboard section for information on which keys can be used when editing..\n\nHere is a code example for an editable text cell.\n\n```js\ncolumns.push({\n    id: 'description',\n    name: 'Description',\n    field: 'description',\n    sortable: true,\n    resizable: true,\n    reorderable: true,\n    formatter: dataGrid.formatters.text,\n    editor: {\n      type: 'input',\n      inline: true,\n      editorSettings: {\n        autoselect: true,\n        dirtyTracker: true\n      }\n    }\n  });\n```\n\nHere is a code example for an editable dropdown cell\n\n```js\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  resizable: true,\n  reorderable: true,\n  formatter: dataGrid.formatters.dropdown,\n  editor: {\n    type: 'dropdown',\n    editorSettings: {\n      dirtyTracker: true,\n      validate: 'required',\n      options: [\n        {\n          label: 'Option 1',\n          value: 'opt1'\n        },\n        {\n          label: 'Option 2',\n          value: 'opt2'\n        }\n      ]\n    }\n  }\n});\n```\n\nTo cancel or disabled editing there are a few ways:\n\n- setting the column `editor` setting to undefined will disable editing on the column (as will not having an editor setting at all).\n- adding a `readonly` or `disabled` function which returned true for some cells based on a condition will disable or mark the cell readonly.\n- return false in the `beforecelledit` event in the response function\n\nThe following settings are available on editors.\n\n`type` As of now can be `checkbox`, `input`, `datepicker`, `timepicker`, or `dropdown` but more will be added.\n`inline` Default is false. If true the editor (for example an input) will be visible in a field.\n`editorSettings` Is an object that is loosely typed that lets you pass any option the editor supports in. For example any of the IdsInput or IdsCheckbox options can be passing in. Some special ones are:\n`editorSettings.autoselect` Text will be selected when entering edit mode\n`editorSettings.dirtyTracker` Enables the dirty tracker that marks changed cells.\n`editorSettings.validate` Text will be selected when entering edit mode\n`editorSettings.mask` Will pass mask settings to the input (if supported).\n`editorSettings.maskOptions` Will pass maskOptions settings to the input (if supported).\n`editorSettings.options` Dataset used for dropdown editor's list box options.\n\nWhen the use clicks in the cell or activates editing with the keyboard with the Enter key and types. The following events will fire.\n\n`beforecelledit` Fires before a cell is being edit (before edit is started). Can be vetoed by returning false as shown below.\n`celledit` Fires exactly when a cell is being edited.\n`endcelledit` Fires when a cell edit is completed and changed.\n`cancelcelledit` Fires when an edit is cancelled via the <kbd>Esc</kbd> key.\n\nTo cancel editing based on some condition or if editing is not allowed you can veto the `beforecelledit` event.\n\n```js\n  dataGrid.addEventListener('beforecelledit', (e: Event) => {\n    (<CustomEvent>e).detail.response(false);\n  });\n```\n\nThere are a few utility functions for editing the data grid mentioned in the Methods section.\n\n## Settings and Attributes\n\nWhen used as an attribute in the DOM the settings are kebab case, when used in JS they are camel case.\n\n- `virtualScroll` {boolean} When virtual scroll is used the grid can render many thousands of rows and only the rows visible in the scroll area are rendered for performance. This setting has limitations such as the rows need to be fixed size.\n- `addNewAtEnd` {boolean} Automatically append rows while keyboard navigating data grid in edit mode.\n- `alternateRowShading` {boolean} For better scan-ability you can shade alternate rows.\n- `listStyle` {boolean} Sets the style of the grid to list style for simple readonly lists.\n- `columns` {Array<object>} Sets the columns array of the data grid. See column settings.\n- `columnGroups` {Array<object>} Allows you to group columns together in logical sets. See section below for details.\n- `rowHeight` {string | `'xxs'` | `'xs'` | `'sm'` | `'md'` | `'lg'`} Sets the height and padding of each row. In smaller row heights the font is lowered.\n- `data` {Array<object>} Sets the data to show in the data grid. This can be a JSON Array.\n- `disableClientFilter` {boolean} Disables the filter logic client side in situations you want to filter server side.\n- `filterable` {boolean} Turns on or off the filter functionality.\n- `filterRowDisabled` {boolean} Disables the filter row.\n- `headerMenuData` {Array<object>} Dataset to build context menu for header and header group cells.\n- `headerMenuId` {string} ID of the popupmenu to use as context menu for header and header group cells.\n- `menuData` {Array<object>} Dataset to build context menu for body cells.\n- `menuId` {string} ID of the popupmenu to use as context menu for body cells.\n- `rowNavigation` {boolean} If using row navigation, the row will be focused when navigating the data grid via clicks and keyboard events.\n- `rowSelection` {string|boolean} Set the row selection mode between false, 'single', 'multiple' and 'mixed\n- `suppressRowClickSelection` {boolean} If using selection setting this will require clicking a checkbox or radio to select the row. Clicking other cells will not select the row.\n- `suppressRowDeactivation` {boolean} Set to true to prevent rows from being deactivated if clicked. i.e. once a row is activated, it remains activated until another row is activated in its place.\n- `suppressRowDeselection`  {boolean} Set to true to prevent rows from being deselected if click or space bar the row. i.e. once a row is selected, it remains selected until another row is selected in its place.\n- `suppressTooltips`  {boolean} Set to true to prevent display tooltips.\n- `idColumn` {string} For saving the row state during sort this should be set to the id column in the data set. Defaults to `id`.\n- `expandableRow` {boolean} Indicates expandable rows will be used in the data grid.  See the expandable row section for more details.\n- `expandableRowTemplate` {string} Should point to the row `template` element for expandable rows.\n- `treeGrid` {boolean} Indicates a tree grid will be used  in the data grid. See the tree grid section for more details.\n- `showHeaderExpander` {boolean} Set to show header expander icon for expandable and tree rows.\n- `groupSelectsChildren` {boolean} If a tree grid has multiple selection, setting this will select all children when a parent is selected.\n- `saveActivePage` {boolean} If set the active page on the pager will be saved to local storage.\n- `saveColumns` {boolean} If set columns will be saved to local storage.\n- `saveFilter` {boolean} If set filter will be saved to local storage.\n- `savePageSize` {boolean} If set the page size on the pager will be saved to local storage.\n- `saveRowHeight` {boolean} If set the row height will be saved to local storage.\n- `saveSortOrder` {boolean} If set column sort order will be saved to local storage.\n- `saveUserSettings` {boolean} If set all settings will be saved to local storage.\n- `emptyMessageDescription` {string} Set empty message description text.\n- `emptyMessageIcon` {string} Set empty message icon name.\n- `emptyMessageLabel` {string} Set empty message label text.\n- `suppressEmptyMessage` {boolean} Set to true to prevent display empty message.\n- `editable` {boolean} If true in addition to adding editors to columns the data grid is editable.\n- `editNextOnEnterPress` {boolean} If enabled when editing using <kbd>ENTER</kbd> will finish editing and start editing the same cell in next row and <kbd>SHIFT + ENTER</kbd> will edit the previous row.\n\n## Column Settings (General)\n\n|Setting|Type|Description|\n|---|---|---|\n|`id` | {string} | The unique id of the column. Each column in the grid should have some unique id.|\n|`name` | {string} | The text to show on the header.|\n|`field` | {string} | The name of the field (column) in the data array attached to the grid for example `description`. This can also be nested in an object for example `children.name`. |\n|`sortable` | {boolean} | If false, the column cannot be sorted. When completed a `sorted` event will fire.|\n|`resizable` | {boolean} | If false the column will not be resizable, thus is a fixed size and can never be changed by the user by dragging the left and right edge.  When completed a `columnresized` event will fire. See the `columns-resizable` example for a working example. |\n|`reorderable` | {boolean} | If true the column can be dragged into another position with adjacent columns. When completed a `columnmoved` event will fire. See the `columns-reorderable` example for a working example. This currently does not work with grouped columns. |\n|`readonly` | {boolean or Function} | If true the cell will be set to readonly color, indicating no editing.|\n|`disabled` | {boolean or Function} | If true the cell will be set to disabled color, indicating no editing.|\n|`formatter`| {Function} | Controls how the data is rendered in the cell.|\n|`hidden` | {boolean} | Excludes the column from being added to the DOM.|\n|`align` | {string} | Can be `left` or `right` or `center` to align both the cell and the header. Left is the default so does not need to be specified. |\n|`headerAlign` | {string} | Can be `left` or `right` or `center` to align just the header. Left is the default so does not need to be specified. |\n|`minWidth` | {number} | The minimum width used to prevent resizing a column below this size. |\n|`maxWidth` | {number} | The maximum width used to prevent resizing a column above this size. |\n|`cssPart` | {string} | Allows you to set the name of a css part that can be used to customize the cell's css. This can be a string or a function. See the columns-custom-css example. The default cssPart for cells is called `cell` and it also can be used for more global changes.  |\n|`frozen` | {string} | Sets the column to be frozen on either left or right side by passing `left` or `right`. See the `columns-frozen` example for a working example. Frozen columns currently have some limitations to be addressed in the future. |<!--lint disable maximum-line-length definition-case-->\n|`width` | {number or string} | The column width, this can be an integer for fixed pixel width or a percent for example `10%`, if left off the columns will be sized to contents and to fit the width of the grid using the css table browsers handling (this is known as `auto` columns). I.E. There are three column configurations: `auto`, `fixed` and `percent`. <br /><br />In addition one can specify any css grid column setting like `fr` or `ch`. In order to make what was called a `stretchColumn` in previous versions you can set the width to`minmax(130px, 4fr)`. This is some minimum width and a `fr` unit equal to the remaining number of columns (see example columns-stretch.html). For a spacer column you just need to specify one extra column at the end (see example columns-fixed.html) but this is not recommended for how it looks. |<!--lint enable maximum-line-length definition-case-->\n|`headerIcon` | {string} | Allows you to set the name of the header icon. |\n|`tooltipOptions` | {Object or Function} | Allows you to set the tooltip options. See the tooltip example. |\n|`tooltip` | {string or Function} | Let you set the tooltip content. |\n|`headerTooltip` | {string} | Let you set the header title tooltip content. |\n|`headerIconTooltip` | {string} | Let you set the header icon tooltip content. |\n|`filterButtonTooltip` | {string} | Let you set the header filter button tooltip content. |\n|`tooltipCssPart` | {string or Function} | Allows you to set the name of a tooltip css part that can be used to customize the tooltip css. This can be a string or a function. See the columns-custom-css example.\n|`headerTooltipCssPart` | {string} | Allows you to sets the header tooltip css part.\n|`headerIconTooltipCssPart` | {string} | Allows you to sets the header icon tooltip css part.\n|`filterButtonTooltipCssPart` | {string} | Allows you to sets the filter button tooltip css part.\n|`cellSelectedCssPart` | {string} | Allows customization of a selected cell's background color.\n|`editor` | {object} | Adds an editor to the column if editable is set on the grid. See editing section for more details.\n\n## Column Settings (Specific)\n\n|Setting|Type|Description|\n|---|---|---|\n|`href` | {string|Function} | Used to create the href for hyperlink formatters. This can be a string or a function that can work dynamically. It can also replace `{{value}}` with the current value. |\n|`text` | {string} | Used to create the txt value for hyperlink formatters if a hard coded link text is needed. |\n|`disabled` | {boolean|Function} | Sets the cell contents to disabled, can also use a callback to determine this dynamically. Only checkboxes, radios, buttons and link columns can be disabled at this time. Selection columns require disabled rows in order to not be clickable/selectable. |\n|`uppercase` | {boolean} | Allows you to set the text as uppercase. |\n\n## Formatters\n\n|Formatter|Description|\n|---|---|\n|`text` | (Default) Formats the column value as a direct text element using toString in the grid cell. Undefined or Null values will be shown as empty.|\n|`password` | Formats the column value masking the string length with stars. Undefined or Null values will be shown as empty. This is good for private data. |\n|`rowNumber` | Formats the cell with a row number column that is shown 1 to n no matter what the sort order is. |\n|`date` | Formats date data as a date string in the desired format, by default it will use `dateStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`time` | Formats date data as a time string in the desired format, by default it will use `timeStyle: 'short'` for other options you can pass them in with `column.formatOptions` |\n|`decimal` | Formats number data as a decimal string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`integer` | Formats number data as a integer string in the specified locale. For additional options you can pass them in with `column.formatOptions`. |\n|`selectionCheckbox` | Displays a checkbox column for selection when using `rowSelection=\"mixed\"` or `rowSelection=\"multiple\"`|\n|`selectionRadio` | Displays a checkbox column for selection when using `rowSelection=\"single\"` |\n| `button` | Displays an `ids-button`. Other column settings like `type` can be used to set the button type as can `icon` by set for icon only buttons. Use the `click` setting/function to get an callback handler. |\n| `hyperlink` | Displays an `ids-hyperlink`. Other column settings like `href` can be used to set the link href and `text` can be used to set the text to specific text. Use the `click` setting/function to get an callback handler. |\n| `checkbox` | Displays an `ids-checkbox`. The value will be checked depending on if the attached field is true or `\"true\"`. |\n| `badge` | Displays an `ids-badge`. The associated field will be placed in the badge. The `color` option can also be set to set the ids-badge color setting. |\n| `alert` | Displays `ids-alert` element, and the field value will appear in a tooltip. An `icon` option can be provided as an override.|\n| `color` | Displays `ids-color` element. If a `color` option is provided as an override, the field's value will appear in a tooltip. |\n| `icon` | Displays the field value as an `ids-icon`. An `icon` option can be provided as an override, and the field value will appear beside this `icon` override. A `size` option can also be provided. |\n| `favorite` | Displays the field value as a `star-filled` if true or `star-outlined` if false. A `size` option can be provided as an override. |\n| `tag` | Displays the field value as an `ids-tag`. A `color` option can be provided as an override. |\n| `progress` | Displays the field value as an `ids-progress`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `rating` | Displays the field value as an `ids-rating`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `slider` | Displays the field value as an `ids-slider`. A `text` option can be provided to customize the label. A `color`, `max`, `min` and `type` option can be provided as overrides. |\n| `stepChart` | Displays the field value as an `ids-step-chart`. A `text` option can be provided to customize the label. A `color` and `max` option can be provided as overrides. |\n| `image` | Displays the field value as an `ids-image`. A `text` option can be provided to the `alt` and `title` attributes. |\n\n### Deprecated Formatters (Deprecated from 4.x)\n\n- `Input` No longer suggested to use, use simple list instead or a Text Formatter.\n- `Status, Color` No longer used, but badges can be used.\n- `Placeholder` Can now be set on the column and used with other formatters\n- `Ellipsis` Is now always enabled.\n- `Readonly` Can now be set on the column and used with other formatters\n- `Drilldown` Use button formatter with an icon.\n- `Template` is now deprecated for performance reasons, use a custom formatter now.\n- `ClassRange` Use column cssClass function or string\n- `Autocomplete, Lookup, TargetedAchievement, ProcessIndicator, Spinbox, Fileupload, Dropdown, Colorpicker, Tree, SummaryRow, GroupFooterRow, GroupRow, Expander, Editor, Textarea, Actions, RowReorder` May be added later\n\n## Custom Formatters\n\nIt is possible to create your own custom formatter. The idea behind the formatter is it takes the cell value and does processing on it to return the correct markup for the cell. The simplest custom formatter would be this example.\n\n```js\ncolumns.push({\n  id: 'custom',\n  name: 'Custom',\n  field: 'price',\n  formatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n    const value = `Custom: ${rowData[columnData.field] || '0'}`;\n    return `<span class=\"text-ellipsis\">${value}</span>`;\n  }\n});\n```\n\nTo style a custom formatter you may need to add a css part for the element. For example:\n\n```js\nformatter: (rowData: Record<string, unknown>, columnData: Record<string, any>) => {\n  const value = `${rowData[columnData.field] || ''}`;\n  return `<a part=\"custom-link\" href=\"#\" class=\"text-ellipsis\">${escapeHTML(value)}</a>`;\n},\n```\n\nThen in the style sheet you add for you page you put the styles.\n\n```css\nids-data-grid::part(custom-link) {\n  color: #da1217;\n}\n\nids-data-grid::part(custom-link):hover {\n  color: #6c080b;\n}\n```\n\nThe formatter is then linked via the column on the formatter setting. When the grid cell is rendered the formatter function is called and the following arguments are passed in.\n\n- `rowData` The current row's data from the data array.\n- `columnData` The column object with all of the column configuration for this cell.\n\n## Events\n\n- `activecellchanged` Fires when the active cell changes with the keyboard or by click.\n- `sorted` Fires when the sort column is changed.\n- `selectionchanged` Fires any time the selection changes.\n- `activationchanged` Fires any time the active row changes.\n- `rowselected` Fires for each row that is selected.\n- `rowdeselected` Fires for each row that is deselected.\n- `rowactivated` Fires for each row that is activated.\n- `rowdeactivated` Fires for each row that is deactivated.\n- `rowclick` Fires for each row that is clicked.\n- `dblclick` Fires each time double clicked on body cells or header cells. Based on where it clicked details can be capture like `type: 'body-cell'|'header-title'|'header-filter'` etc.\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n- `columnresized` Fires when a column is resized or setColumnWidth is called.\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto\n- `rowExpanded` Fires when a tree or expandable row is expanded or collapsed\n- `rowCollapsed` Fires when a tree or expandable row is expanded or collapsed\n- `columnmoved` Fires when a column is moved / reordered or moveColumn is called.\n- `beforetooltipshow` Fires before tooltip show, you can return false in the response to veto.\n- `beforemenushow` Fires before context menu show, you can return false in the response to veto.\n- `menushow` Fires after context menu show.\n- `menuselected` Fires after context menu item selected.\n- `settingschanged` Fires after settings are changed in some way.\n- `scrollstart` Fires when data-grid reaches the topmost row.\n- `scrollend` Fires when data-grid reaches the bottommost row.\n- `afterrendered` Fires after rendered the data grid.\n\n## Methods\n\n- `setColumnWidth` Can be used to set the width of a column.\n- `setColumnVisibility` Can be used to set the visibility of a column.\n- `setActivateCell(cell, row)` Can be used to set focus of a cell.\n- `selectedRows` Lists the indexes of the currently selected rows.\n- `saveSetting(setting: string)` Save the given setting to local storage.\n- `saveAllSettings` Save all user settings to local storage.\n- `savedSetting(setting: string)` Get saved given setting value from local storage.\n- `allSavedSettings` Get saved all user settings from local storage.\n- `clearSetting(setting: string, key?: string)` Clear the given saved setting from local storage.\n- `clearAllSettings(userKeys: unknown)` Clear saved all user settings from local storage.\n- `restoreSetting(setting: string, value?: unknown)` Restore the given saved setting from local storage.\n- `editFirstCell` Puts the first cell on the active row into edit mode.\n- `appendData(data: Record<string, unknown>)` Use this to add more data to the datagrid's existing dataset.  This will automatically render additional rows in the datagrid.\n- `addRow(data: Record<string, unknown>, index?: number)` Adds a new row at optional row index and defaults the values to all those provided in the data\n- `addRows(data: Array<Record<string, unknown>>, index?: number)` Adds multiple new rows at optional row index and defaults the values to all those provided in the data\n- `removeRow(index: number)` Removed the provided row index from the dataset and visual datagrid\n- `clearRow(index: number)` Clears all values on the given row.\n- `commitCellEdit` Stops editing and commits the value in the active editor.\n- `cancelCellEdit` Stops editing and reverts the value in the active editor.\n- `resetDirtyCells` Clears all dirty cell indicators.\n- `dirtyCells` Gives a list of all currently dirty cells.\n- `exportToExcel(format: 'csv' | 'xlsx', filename: string, keepGridFormatting: boolean)` Export datagrid datasource to an excel file. This keeps grid formatting by default.\n- `collapseAll()` Collapse all expandable or tree rows.\n- `expandAll()` Expand all expandable or tree rows.\n- `toggleAll(opt: boolean)` Toggle collapse/expand all expandable or tree rows. `opt false`: will expand all, `opt: true`: will collapse all\n- `refreshRow` IdsDataGridRow method to refresh row element and its cells.\n- `refreshCell` IdsDataGridCell method to refresh cell element.\n- `updateDataset(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row.\n- `updateDatasetAndRefresh(row: number, data: Record<string, unknonw>, isClear?: boolean)` Updates datasource for row and refreshes row/cells UI.\n\n## Filters\n\nData rows can be filter based on one or several criteria. Whole filter row can turned on/off by the api setting `filterable` and can be disabled by the api setting `filter-row-disabled`. The filter conditions can be applied thru the UI or programmatically. Each column can have its own filter type and turn on/off by columns setting.\n\n### Filter Columns Setting\n\nAll the filter settings can be passed thru columns data.\n\n|Setting|Type|Description|\n|---|---|---|\n|`filterType` | Function | Data grid built-in filter method, see the dedicated section below. |\n|`filterConditions` | Array | List of items to be use as operators in menu-button or options in dropdown. |\n|`filterFunction` | Function | User defined filter method, it must return a boolean. |\n|`filterOptions` | Object | Setting for components are in use, for example: `label, placeholder, disabled`. |\n|`isChecked` | Function | User defined filter method, it must return a boolean. This method use along built-in `checkbox` only, when filter data value is not boolean type. |\n\n### Built-in Filter Methods\n\n|Method|Description|\n|---|---|\n|`text` | It filter as text comparison. Contains input and menu-button with list of default operators. |\n|`integer` | It filter as integer comparison. Contains input and menu-button with list of default operators. |\n|`decimal` | It filter as decimal comparison. Contains input and menu-button with list of default operators. |\n|`contents` | It filter as text comparison. Contains dropdown and auto generate list of items based on column data. |\n|`dropdown` | It filter as text comparison. Contains dropdown and must pass list of item by setting `filterConditions`. |\n|`checkbox` | It filter as boolean comparison. Contains menu-button with list of default operators. |\n|`date` | It filter as date comparison. Contains date-picker and menu-button with list of default operators. |\n|`time` | It filter as time comparison. Contains time-picker and menu-button with list of default operators. |\n\n### Custom Filter\n\nIf the built-in filters are not enough, creating a custom filter is an option. There are two parts you can create both parts custom or mix-match with built-in.\n\n1. `UI Only` In order to do custom UI part of filter, add as html markup thru a slot. It must use slot and column-id attributes for example: `<div slot=\"filter-n\" column-id=\"n\">...</div>` where n is the columnId same passed in the columns.\n1. `filterFunction` This is a user defined filter method which must return a boolean. It determines if a cell value should be considered as a valid filtered value.\n1. `disableClientFilter` This is an api setting to disable filter logic client side. It will set filter conditions and fire an event `filtered` which can listen for custom logic.\n\n### Filter Code Examples\n\nBasic text filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nNo filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"false\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisabled filter row, will disabled all attached filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\" filter-row-disabled=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nHyperlink, integer, decimal, date and time filters\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'hyperlink',\n  name: 'Hyperlink',\n  field: 'description',\n  href: '#',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.hyperlink\n});\ncolumns.push({\n  id: 'integer',\n  name: 'Integer',\n  field: 'price',\n  filterType: dataGrid.filters.integer,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'decimal',\n  name: 'Decimal',\n  field: 'price',\n  filterType: dataGrid.filters.decimal,\n  formatter: dataGrid.formatters.decimal,\n  formatOptions: { locale: 'en-US' }\n});\ncolumns.push({\n  id: 'date',\n  name: 'Date',\n  field: 'publishDate',\n  filterType: dataGrid.filters.date,\n  formatter: dataGrid.formatters.date\n});\ncolumns.push({\n  id: 'time',\n  name: 'Time',\n  field: 'publishDate',\n  filterType: dataGrid.filters.time,\n  formatter: dataGrid.formatters.time\n});\n```\n\nSome filter options label, placeholder, disabled.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterOptions: {\n    label: 'Label text for description input',\n    placeholder: 'Placeholder text for description input',\n    disabled: true\n  }\n});\n```\n\nCustom operators items for menu-button.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'description',\n  name: 'Description',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text,\n  filterConditions: [{\n    value: 'contains',\n    label: 'Contains',\n    icon: 'filter-contains'\n  },\n  {\n    value: 'equals',\n    label: 'Equals',\n    icon: 'filter-equals',\n    selected: true\n  }]\n});\n```\n\nContents and dropdown type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'location',\n  name: 'Location',\n  field: 'location',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.contents,\n  filterOptions: {\n    notFilteredItem: { value: 'not-filtered', label: 'Not Filtered' }\n  }\n});\ncolumns.push({\n  id: 'useForEmployee',\n  name: 'NotFilterdItem (shown as blank)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\ncolumns.push({\n  id: 'useForEmployeeCustomNotFilterdItem',\n  name: 'NotFilterdItem (show as custom text)',\n  field: 'useForEmployee',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.dropdown,\n  filterConditions: [\n    { value: 'not-filtered', label: 'Not Filtered' },\n    { value: 'Yes', label: 'Yes' },\n    { value: 'No', label: 'No' }\n  ]\n});\n```\n\nCheckbox type filters.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'checkbox',\n  name: 'Checkbox',\n  field: 'inStock',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox\n});\ncolumns.push({\n  id: 'customCheckMethod',\n  name: 'Custom check method',\n  field: 'active',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.checkbox,\n  isChecked: (value) => value === 'Yes'\n});\n```\n\nCustom filter method.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n</ids-data-grid>\n```\n\n```js\n// Custom filter checking\nconst myCustomFilter = (opt) => {\n  const { operator, columnId, value } = opt.condition;\n  const val = {\n    condition: Number.parseInt(value, 10),\n    data: Number.parseInt(opt.data[columnId], 10)\n  };\n  let isMatch = false;\n  if (Number.isNaN(val.condition) || Number.isNaN(val.data)) return isMatch;\n\n  if (operator === 'equals') isMatch = (val.data === val.condition);\n  if (operator === 'greater-than') isMatch = (val.data > val.condition);\n  if (operator === 'greater-equals') isMatch = (val.data >= val.condition);\n  if (operator === 'less-than') isMatch = (val.data < val.condition);\n  if (operator === 'less-equals') isMatch = (val.data <= val.condition);\n\n  return isMatch;\n};\n\nconst columns = [];\ncolumns.push({\n  id: 'customFilterMethod',\n  name: 'Custom Filter Method',\n  field: 'price',\n  filterFunction: myCustomFilter,\n  formatter: dataGrid.formatters.integer,\n  formatOptions: { locale: 'en-US' }\n});\n```\n\nCustom filter UI part.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" filterable=\"true\">\n  <div slot=\"filter-description\" column-id=\"description\">\n    <ids-menu-button id=\"btn-filter-description\" icon=\"filter-greater-equals\" menu=\"menu-filter-description\" dropdown-icon>\n      <span class=\"audible\">Greater Than Or Equals</span>\n    </ids-menu-button>\n    <ids-popup-menu id=\"menu-filter-description\" target=\"#btn-filter-description\">\n      <ids-menu-group select=\"single\">\n        <ids-menu-item value=\"equals\" icon=\"filter-equals\">Equals</ids-menu-item>\n        <ids-menu-item value=\"greater-than\" icon=\"filter-greater-than\">Greater Than</ids-menu-item>\n        <ids-menu-item value=\"greater-equals\" icon=\"filter-greater-equals\" selected=\"true\">Greater Than Or Equals</ids-menu-item>\n        <ids-menu-item value=\"less-than\" icon=\"filter-less-than\">Less Than</ids-menu-item>\n        <ids-menu-item value=\"less-equals\" icon=\"filter-less-equals\">Less Than Or Equals</ids-menu-item>\n      </ids-menu-group>\n    </ids-popup-menu>\n    <ids-input id=\"input-filter-description\" type=\"text\" size=\"full\" placeholder=\"Slotted description\" label=\"Slotted description input\">\n    </ids-input>\n  </div>\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n```\n\nDisable client filter\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" disable-client-filter=\"true\">\n</ids-data-grid>\n```\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  formatter: dataGrid.formatters.text,\n  filterType: dataGrid.filters.text\n});\n\ndataGrid.addEventListener('filtered', (e: any) => {\n  console.info('filtered:', e.detail);\n});\n```\n\n### Filter rows programmatically\n\n```js\n// Filter rows\nconst conditions = [{ columnId: 'description', operator: 'contains', value: '5' }];\ndataGrid.applyFilter(conditions);\n\n// Reset all filters\ndataGrid.applyFilter([]);\n```\n\n### Filter Events\n\nThe following events are relevant to data-grid filters.\n\n- `filtered` Fires after a filter action occurs, clear or apply filter condition.\n- `filteroperatorchanged` Fires once a filter operator changed.\n- `filterrowopened` Fires after the filter row is opened by the user.\n- `filterrowclosed` Fires after the filter row is closed by the user.\n\n## Custom cell colors\n\nIn some cases, it may be desirable to customize the background color of cells.  This can be done with the `cssPart` column setting:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell'\n});\n```\n\nThe `cssPart` property is translated into a `part` attribute that is applied to every cell in the column.  In the event the color needs to be conditional based on the row index or other logic, a function can be used:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2')\n  // ...\n});\n```\n\nAfter this is defined, accompanying CSS can be written to target the parts `custom-cell`, `custom-cell-1`, and `custom-cell-2` to change background color or other CSS properties of the cell:\n\n```css\nids-data-grid::part(cell) {\n  background-color: #ebf9f1;\n}\n\nids-data-grid::part(cell-selected) {\n  background-color: #c9dad0;\n}\n```\n\n### Changing selected cell colors\n\nAnother column setting, `cellSelectedCssPart` can be used alongside `cssPart` to customize the selected color of the row in a similar way.  When using `mixed` selection, this color is also applied to activated rows:\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  cssPart: 'custom-cell',\n  cellSelectedCssPart: 'custom-cell-selected'\n});\n```\n\nThis column setting can also be a function, just like `cssPart`:\n\n```js\ncolumns.push({\n  // ...\n  cssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-1' : 'custom-cell-2'),\n  cellSelectedCssPart: (row: number) => ((row % 2 === 0) ? 'custom-cell-selected-1' : 'custom-cell-selected-2')\n  // ...\n});\n```\n\n## Tooltip Code Examples\n\nSet suppress tooltips to turn off.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\" suppress-tooltips>\n</ids-data-grid>\n```\n\nSet custom tooltip strings.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: 'This is a product Id',\n  headerTooltip: 'This is the product Id header title',\n  headerIconTooltip: 'This is product Id header icon',\n  filterButtonTooltip: 'This is the product Id filterButton'\n});\n```\n\nSet tooltip as callback.\n\n```js\nconst tooltipCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return `Text: ${text}<br/>Header Row: ${rowIndex}, Cell: ${columnIndex}`;\n  } else if (type === 'filter-button') {\n    return `Text: ${text}<br/>FilterButton Row: ${rowIndex}, Cell: ${columnIndex}`;\n  }\n  return `Text: ${text}<br/>for Row: ${rowIndex}, Cell: ${columnIndex}`;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltip: tooltipCallback\n});\n```\n\nSet tooltip custom options.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: {\n    placement: 'top',\n    headerPlacement: 'top',\n    headerIconPlacement: 'top',\n    filterButtonPlacement: 'bottom',\n    x: 0,\n    y: 10,\n    headerX: 0,\n    headerIconX: 0,\n    headerY: 10,\n    headerIconY: 10,\n    filterButtonX: 0,\n    filterButtonY: 22\n  }\n});\n```\n\nSet tooltip options as callback.\n\n```js\nconst tooltipOptionsCallback = (args: any): string => {\n  const { type, columnIndex, rowIndex, text } = args;\n\n  if (type === 'header-title') {\n    return { headerPlacement: 'top', headerX: 0, headerY: 10 };\n  } else if (type === 'header-icon') {\n    return { headerIconPlacement: 'top', headerIconX: 0, headerIconY: 10 };\n  } else if (type === 'filter-button') {\n    return { filterButtonPlacement: 'bottom', filterButtonX: 0, filterButtonY: 22 };\n  }\n  return { placement: 'top', x: 0, y: 10 };\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipOptions: tooltipOptionsCallback\n});\n```\n\nSet tooltip custom css.\n\n```js\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: 'custom-turquoise',\n  headerTooltipCssPart: 'custom-turquoise',\n  headerIconTooltipCssPart: 'custom-turquoise',\n  filterButtonTooltipCssPart: 'custom-turquoise'\n});\n```\n```css\n/* tooltip css part `custom-turquoise` */\nids-data-grid::part(custom-turquoise-tooltip-arrow-top)::after {\n  border-top-color: #2f8d8e;\n}\nids-data-grid::part(custom-turquoise-tooltip-popup) {\n  background-color: #2f8d8e;\n}\n```\n\nSet tooltip custom css as callback.\n\n```js\nconst tooltipCssPartCallback = (args: { type: string }): string => {\n  const { type } = args;\n  let cssPart = '';\n  // Set random css part each time, for `body-cell` tooltips\n  if (type === 'body-cell') {\n    const parts = ['azure', 'ruby'];\n    const randomIndex = Math.floor(Math.random() * parts.length);\n    cssPart = parts[randomIndex];\n  }\n  return cssPart;\n};\nconst columns = [];\ncolumns.push({\n  id: 'text',\n  name: 'Text',\n  field: 'description',\n  tooltipCssPart: tooltipCssPartCallback\n});\n```\n```css\n/* tooltip css part `azure` */\nids-data-grid::part(azure-tooltip-arrow-top)::after {\n  border-top-color: #0066d4;\n}\nids-data-grid::part(azure-tooltip-popup) {\n  background-color: #0066d4;\n}\n\n/* tooltip css part `ruby` */\nids-data-grid::part(ruby-tooltip-arrow-top)::after {\n  border-top-color: #c31014;\n}\nids-data-grid::part(ruby-tooltip-popup) {\n  background-color: #c31014;\n}\n```\n\n## context menu Code Examples\n\nThe context menus can be set via the dataset.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n</ids-data-grid>\n```\n```js\n// Dataset for header cells context menu\nconst headerMenuData = {\n  id: 'grid-header-context menu',\n  contents: [{\n    id: 'header-actions-group',\n    items: [\n      { id: 'actions-split', value: 'actions-split', text: 'Split' },\n      { id: 'actions-sort', value: 'actions-sort', text: 'Sort' },\n    ]\n  }],\n};\n\n// Dataset for body cells context menu\nconst menuData = {\n  id: 'grid-context menu',\n  contents: [{\n    id: 'actions-group',\n    items: [\n      { id: 'item-1', value: 'item-1', text: 'Item One' },\n      { id: 'item-2', value: 'item-2', text: 'Item Two' },\n      { id: 'item-3', value: 'item-3', text: 'Item Three' }\n    ]\n  }],\n};\n\n// Set context menu data with data-grid\ndataGrid.menuData = menuData;\ndataGrid.headerMenuData = headerMenuData;\n\n// Set to return true/false in the response to veto before context menu show.\ndataGrid.addEventListener('beforemenushow', (e: any) => {\n  console.info('before context menu show', e.detail);\n  // e.detail.response(false);\n});\n\n// Set to watch after context menu show.\ndataGrid.addEventListener('menushow', (e: any) => {\n  console.info('After context menu show', e.detail);\n});\n\n// Set to watch after context menu item selected.\ndataGrid.addEventListener('menuselected', (e: any) => {\n  console.info('context menu item selected', e.detail);\n});\n```\n\nSet context menu thru Slot.\n\n```html\n<ids-data-grid id=\"data-grid-1\" label=\"Books\">\n  <!-- context menu header cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"header-context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n      <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n  <!-- context menu body cells -->\n  <ids-popup-menu trigger-type=\"custom\" slot=\"context menu\">\n    <ids-menu-group>\n      <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n      <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n      <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n      <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n    </ids-menu-group>\n  </ids-popup-menu>\n</ids-data-grid>\n```\n\nSet context menu thru ID.\n\n```html\n<ids-data-grid\n  header-menu-id=\"grid-header-context menu\"\n  menu-id=\"grid-context menu\"\n  id=\"data-grid-1\"\n  label=\"Books\"\n></ids-data-grid>\n\n<!-- context menu header cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-header-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"header-split\">Split</ids-menu-item>\n    <ids-menu-item value=\"header-sort\">Sort</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n\n<!-- context menu body cells -->\n<ids-popup-menu trigger-type=\"custom\" id=\"grid-context menu\">\n  <ids-menu-group>\n    <ids-menu-item value=\"item-1\">Item One</ids-menu-item>\n    <ids-menu-item value=\"item-2\">Item Two</ids-menu-item>\n    <ids-menu-item value=\"item-3\">Item Three</ids-menu-item>\n    <ids-menu-item value=\"item-4\">Item Four</ids-menu-item>\n  </ids-menu-group>\n</ids-popup-menu>\n```\n\n## Empty Message\n\nSet empty message thru slot (markup).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-slot\" label=\"Books\">\n  <ids-empty-message hidden icon=\"empty-search-data-new\" slot=\"empty-message\">\n    <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">No Data</ids-text>\n    <ids-text hidden label=\"true\" slot=\"description\">There is no data available.</ids-text>\n  </ids-empty-message>\n</ids-data-grid>\n```\n\nSet empty message thru settings (markup).\n\n```html\n<ids-data-grid\n  id=\"data-grid-em-thru-settings\"\n  label=\"Books\"\n  empty-message-icon=\"empty-error-loading-new\"\n  empty-message-label=\"No Data\"\n  empty-message-description=\"There is no data available.\"\n></ids-data-grid>\n```\n\nSet empty message thru settings (javascript).\n\n```html\n<ids-data-grid id=\"data-grid-em-thru-settings-js\" label=\"Books\">\n</ids-data-grid>\n```\n\n```js\nconst dataGrid = document.querySelector('#data-grid-em-thru-settings-js');\ndataGrid.emptyMessageIcon = 'empty-error-loading-new';\ndataGrid.emptyMessageLabel = 'No Data';\ndataGrid.emptyMessageDescription = 'There is no data available.';\n```\n\n## Row Height\n\nAs mentioned in the settings section you can change the row height by setting the rowHeight option.\n\n```html\n     <ids-data-grid id=\"data-grid-row-height\" row-height=\"md\"></ids-data-grid>\n```\n\nIts worth mentioning the characteristics and usage for each one.\n\nLarge (`row-height=\"lg\"`) - Row Height is 50. The default row height, header is 16px and body cells are 16px. 16px padding on cells and header. You should use this most of the time if there is plenty of room on the UI and to avoid the UI looking crowded.\nMedium (`row-height=\"md\"`) - Row Height is 40. Header is 16px and body cells are 16px. 12px padding on cells and header. If you need to see a few more rows but still want to avoid a crowded UI, this is the next best option.\nSmall (`row-height=\"sm\"`) - Row Height is 35. Header is 16px and body cells are 16px. 8px padding on cells and header. This is the smallest option that is recommended for readability and spacing.\nExtra Small (`row-height=\"xs\"`) - Row Height is 30. Header is 14px and body cells are 14px. 8px padding on cells and header. If you need a very compressed data grid with a lot of data you can use this option. But there is a trade off of bad readability and spacing.\nExtra Extra Small (`row-height=\"xxs\"`) - Row Height is 25. Header is 14px and body cells are 14px. 2px padding on cells and header. Avoid this option as it is very crowded but it is included for edge cases.\n\n## States and Variations\n\n**Rows**\n- Hover\n- Selected\n- Disabled\n- Readonly\n- Activated\n\n**Columns**\n- Focus\n- Hover\n- Sorted\n- Selected\n- Disabled\n- Filtered\n\n**Cells**\n- Hover (sometimes a cursor change)\n- Readonly\n- Focus\n- Checked/Not Checked (Checkboxes)\n\n## Keyboard Guidelines\n\n- <kbd>Tab</kbd>The initial tab enters the grid with focus on the first cell of the first row, often a header. A second tab moves out of the grid to the next tab stop on the page. Once focus is established in the grid, a TAB into or a Shift Tab into the grid will return to the cell which last had focus. If in edit mode will finish editing and start editing the next cell.\n- <kbd>Shift + Tab</kbd> Moves the reverse of tab. If in edit mode will finish editing and start editing the previous cell.\n- <kbd>Left</kbd> and <kbd>Right</kbd> Move focus to the adjacent column's cell. There is no wrap at the end or beginning of columns.\n- <kbd>Up</kbd> and <kbd>Down</kbd> Move focus to the adjacent row's cell. There is no wrap at the first or last row.\n- <kbd>Home</kbd> moves focus to the first cell of the current row\n- <kbd>End</kbd> moves focus to the last cell of the current row\n- <kbd>Page Up</kbd> moves focus to the first cell in the current column\n- <kbd>Page Down</kbd> moves focus to the last cell in the current column\n- <kbd>Space</kbd> Toggles selection the activate row. If suppressRowDeselection is set it will be ignored on deselect. If the cell contains an expandable element then the row will toggle the expanded state. If the cell contains a checkbox editor, will toggle the checkbox state.\n- <kbd>F2</kbd> toggles actionable mode. Pressing the <kbd>Tab</kbd> key while in actionable mode moves focus to the next actionable cell. While in actionable mode you can do things like type + enter. This will move you down a row when you hit enter. If the cell has a control that uses down arrow (like the drop downs or lookups that are editable). Then the user needs to hit enter to enable the edit mode on that cell.\n- <kbd>Triple Click</kbd> Not a keyboard shortcut, but if you have text in a cell that is overflowed a triple click will select all the text even the part that is invisible.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Ctrl+A (PC) / Cmd+A (Mac)</kbd> If the grid is mixed or multi select this will select all rows.\n- <kbd>Enter</kbd> Activates edit mode on the cell if it is editable. There is also an \"auto edit detection\". If the user starts typing then edit mode will happen automatically without enter. If in edit mode already <kbd>Enter</kbd> will finish edit mode. If `editNextOnEnterPress` is enabled then editing will start on the same column in next row.\n- <kbd>Shift + Enter</kbd> Same as enter but if `editNextOnEnterPress` is enabled then editing will start on the same column in previous row.\n- <kbd>F2</kbd> Finish editing same as Enter. But if `editNextOnEnterPress` is enabled, will stay in same cell. `cancelEditMode` will fire.\n- <kbd>CMD/CTRL + Enter</kbd> Finish editing same as Enter.\n- <kbd>ESC</kbd> Revert to the previous value and cancel editing. `cancelEditMode` will fire.\n\n## Responsive Guidelines\n\n- By default, data grid grows depending on the amount of contents within and will scroll if necessary under the header. It stops growing when it reaches the size of the parent container.\n- `autoFit` property or `auto-fit` attribute can be set manually to make the data grid size fill and be responsive to the size of the screen, regardless of the amount of contents.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Counts have all new markup and classes.\n\n**4.x to 5.x**\n- Data grid has all new markup and a custom element but some similarly named options\n- Still uses same columns and data set options. Some column options enhanced and changed.\n- If using events events are now plain JS events for example: sorted, rendered\n- Some Api Functions have changed\n- If using properties/settings these are now attributes or as plain properties for example: data, virtual-scroll\n- Markup has changed to a custom element `<ids-data-grid></ids-data-grid>`\n- Can now be imported as a single JS file and used with encapsulated styles\n- `Drill Down` Formatter is now covered by `Button` formatter with `icon=\"drilldown\"`\n- `textOverflow` setting is now by default\n- `rowNavigation` setting has replaced `cellNavigation`. Cell navigation is the default behavior.\n- `stretchColumn` is now more flexible and can be achieved by setting a column width to `minmax(130px, 4fr)`. I.E. some min width and a `fr` unit equal to the remaining number of columns (or similar variations).\n- split columns are not supported anymore but could be done with a custom formatter if needed\n- `frozenColumns` setting is now set on each column by adding `frozen: 'left'` or `frozen: 'right'` to the column definition.\n- Some events are renamed see the events section for more details, also the signature of the events has changed.\n- Custom formatter functions can now be any type of function and have a different signature.\n- The `expanded` column option for tree was renamed to `rowExpanded`.\n- The `expandrow/collapserow` events are renamed to `rowexpanded/rowcollapsed`\n- The `beforeentereditmode/entereditmode/exiteditmode` event is renamed to `beforecelledit/celledit/endcelledit/cancelcelledit`\n- The `actionablemode` feature has been replaced with simply tabbing to the next editable field when in edit mode.\n\n## Accessibility Guidelines\n\n1.1.1 Non-text Content - All images, links and icons have text labels for screen readers when the formatters are used.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and links and images of text has a contrast ratio of at least 4.5:1.\n- 2.1.1 Keyboard - Make all functionality available from a keyboard. The grid has keyboard shortcuts and is usable with a screen reader due to the addition of aria tags.\n- A datagrid in general including this one uses the following aria tags\n  - `aria-label` labels the enter table on the main table\n  - `aria-rowcount` lists the visible row count on the main table\n  - `aria-colindex` the index of each column on the column elements\n  - `aria-rwindex` the index of each row on the row elements\n  - `aria-setsize` for tree grid lists the number of elements in each level (group)\n  - `aria-level` the level of indentation\n  - `aria-posinset` the depth into each set\n  - `aria-expanded` on the row it indicates if the row is expanded (for tree and expandable row)\n  - `aria-sort` indicates the sort direction on the sortable columns\n  - `aria-checked` indicates if the element is checked on checkbox columns and headers\n\n## Regional Considerations\n\nTitles and labels should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n\n## Code Separation (For Developers)\n\nThe code is divided into several files. Here is a description of where everything is.\n\n- `ids-data-grid-cell.ts` creates a non-shadow root `ids-data-grid-cell`, and handles its own selection, and activation.\n- `ids-data-grid-cell.scss` contains all css related to `.ids-data-grid-cell` and its children\n- `ids-data-grid-contextmenu.ts` contains code in the form of export functions, that adds ability to get right click menus on headers and cells\n- `ids-data-grid-filter.scss` contains all css related to the filter row and its children\n- `ids-data-grid-filter.ts` contains code to implement the filtering functionality and its ui (some functions are in ids-data-source)\n- `ids-data-grid-formatters.ts` contains all formatter functions and some supporting code like data extraction\n- `ids-data-grid-header.ts` contains most header functionality, the header template, and code related to header actions like sort, reorder and selection.\n- `ids-data-grid-header.scss` contains all css related to `.ids-data-grid-header` and its children\n- `ids-data-grid-row.ts` contains most row functionality, the row template, and code related to row actions like expand, collapse, select, activate\n- `ids-data-grid-row.scss` contains all css related to `.ids-data-grid-row` and its children\n- `ids-data-grid-tooltip-mixin.js` contains a tooltip mixin that adds tooltip functionality to cells and headers, its different from `ids-tooltip-mixin` (more specific)\n- `ids-data-grid.js` contains all main data grid code, the api and settings and the main generator loop for the data grid\n"}},{"name":"ids-data-label","attributes":[{"name":"label","description":"Sets to label","values":[]},{"name":"labelPosition","description":"Sets to label","values":[]},{"name":"labelClass","values":[]},{"name":"colon","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# Ids Data Label Component\n\n## Description\n\nThe IDS Data Label component used to show both label and value for readonly (non editable data).\n\n## Use Cases\n\n- When you need to show a readonly data item with a label.\n\n## Feature (With the Code Examples)\n\nShows a data label with one top label and one with a left label.\n\n```html\n<ids-data-label label=\"Shipping to\" label-position=\"left\">Los Angeles, California 90001 USA</ids-data-label>\n<ids-data-label label=\"Shipping to\">Los Angeles, California 90001 USA</ids-data-label>\n```\n\n## Class Hierarchy\n\n- IdsDataLabel\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Settings (Attributes)\n\n- `label` {string} Set label string\n- `label-position` {string} Set label position, 'top' | 'left'\n"}},{"name":"ids-date-picker-common","description":{"kind":"markdown","value":"# Ids Date Picker Component\n\n## Description\nThe `ids-date-picker` is a web component to support date entry\n\n## Use Cases\n- Display date form field with input attributes (value, label, placeholder, disabled, readonly) and validation\n- Display date picker in calendar toolbar (`ids-week-view`, `ids-month-view`)\n\n## Settings (Attributes)\n- `colorVariant` {string} set the current color variant.\n- `compact` {boolean} sets the component to be compact mode.\n- `fieldHeight` {string} defines the field height. See [Ids Field Height Mixin](../../mixins/ids-field-height-mixin/README.md) for more information.\n- `value` {string|null} - Input value\n- `placeholder` {true|false} - Whether or not to show date format as input placeholder\n- `label` {string|null} - Input label\n- `labelState` {string} indicates that a label is hidden (note that for accessibility reasons, `label` should still be specified). See [Ids Label State Mixin](../../mixins/ids-label-state-mixin/README.md) for more information.\n- `noMargins` {boolean} sets whether or not no-margins around the component.\n- `id` {string} - Input ID\n- `disabled` {true|false} - Whether or not the input should be disabled\n- `readonly` {true|false} - Whether or not the input should be readonly\n- `tabbable` {true|false} - Whether or not the trigger button should be tabbable\n- `size` {'xs'|'sm'|'mm'|'md'|'lg'|'full'} - Size (width) of the field. Default is `sm`\n- `validate` {'required'|'date'|'rangeDate'|string} - Input validation rules\n- `validation-events` {string} - Input validation events, `change blur` as default\n- `format` {'locale'|string|null} - Input date format, if not set defaults to locale calendar date format. Examples: `yyyy-MM-dd`, `d/M/yyyy`, `dd/MM/yyyy`\n- `is-calendar-toolbar` {true|false} - Whether or not the component is used in calendar toolbar. Uses text instead of input\n- `is-dropdown` {true|false} - Whether or not the component is dropdown with year/month picker\n- `month` `{string|number|null}` - Specifies a month for the popup calendar (`ids-month-view` attribute)\n- `day` `{string|number|null}` - Specifies a day for the popup calendar (`ids-month-view` attribute)\n- `year` `{string|number|null}` - Specifies a year for the popup calendar (`ids-month-view` attribute)\n- `first-day-of-week` `{string|number|null}` - Specifies first day of the week for the popup calendar, if not set the information comes from the locale (`ids-month-view` attribute)\n- `show-today` `{true|false}` - Whether or not to show the today button in the popup calendar (`ids-month-view` attribute)\n- `expanded` `{true|false}` - When the date picker is month/year picker it specifies whether or not the picker is expanded\n- `legend` - Set array of legend items:\n  - `name` `{string}` - The name of the legend (required)\n  - `color` `{string}` - The color of the legend, either hex or IDS variable excluding `--ids-color-` part i.e. `emerald-60` (required)\n  - `dates` `{Array}` - Array of dates (either dates or dayOfWeek is required)\n  - `dayOfWeek` `{Array}` - Array of days of week where 0 is Sunday (either dates or dayOfWeek is required)\n- `use-range` `{true|false}` - Whether or not the component should be a range picker. If set without settings default settings will apply.\n- `rangeSettings` `{Object}` - Range selection settings:\n  - `start` `{string}` - start date of the range selection. Default is `null` not set\n  - `end` `{string}` - end date of the range selection. Default is `null` not set\n  - `separator` `{string}` - separator symbol for the input value i.e. `2/7/2018 - 2/22/2018` if separator is ` - `. Default is ` - `\n  - `minDays` `{number}` - minimum number of days to select. Default is `0` not set\n  - `maxDays` `{number}` - maximum number of days to select. Default is `0` not set\n  - `selectForward` `{boolean}` - Whether or not the selection should be in forward direction. Default is `false`\n  - `selectBackward` `{boolean}` - Whether or not the selection should be in backward direction. Default is `false`\n  - `includeDisabled` `{boolean}` - Whether or not the selection should include disabled dates visually\n  - `selectWeek` `{boolean}` - Whether or not the selection should include the whole week\n- `disableSettings` `{Object}` - Disable dates settings:\n  - `dates` `{Array}` - Disable specific dates (in a format that can be converted to a date)\n  - `years` `{Array}` - Disable specific years\n  - `minDate` `{string}` - Disable up to a minimum date\n  - `maxDate` `{string}` - Disable up to a maximum date\n  - `dayOfWeek` `{Array}` - Disable a specific of days of the week 0-6\n  - `isEnable` `{boolean}` - Enables the disabled dates. Default is false\n- `mask` `{true|false}` - Whether or not to enable date mask for the input. `format` attribute will be set as mask options format\n- `minute-interval` {number} Set time picker minutes dropdown options interval\n- `second-interval` {number} Set time picker seconds dropdown options interval\n- `use-current-time` {true|false} - Set whether or not to show current time in the time picker dropdowns\n- `show-picklist-year` `{true|false}` Whether or not to show a list of years in the picklist, default if true\n- `show-picklist-month` `{true|false}` Whether or not to show a list of months in the picklist, default is true\n- `show-picklist-week` `{true|false}` Whether or not to show week numbers in the picklist\n\n## Methods\n- `open()` - opens calendar popup\n- `close()` - closes calendar popup\n\n## Events\n- `dayselected` - Fires when a day is selected or range selection is completed\n- `expanded` - Fires when a month/year picker is opened/closed\n- Event listeners for input (trigger field) `blur`, `change`, `focus`, `select`, `keydown`, `keypress`, `keyup`, `click`, `dbclick`, `beforetriggerclicked`, `triggerclicked` events can be added to `input` component property:\n\n```js\nconst datePicker = document.querySelector('ids-date-picker');\n\ndatePicker.input.addEventListener('change');\n```\n- Event listeners for popup `show`, `hide` events can be added to `popup` property:\n```js\nconst datePicker = document.querySelector('ids-date-picker');\n\ndatePicker.popup.addEventListener('show');\ndatePicker.popup.addEventListener('hide');\n```\n\n## Themeable Parts\n- `container` allows you to further style the container element of the component\n- `trigger-field` allows you to further style the trigger container\n- `trigger-button` allows you to further style the trigger button\n- `icon` allows you to further style the icon in the trigger button\n- `input` allows you to further style the input element\n- `popup` allows you to further style the popup element\n- `footer` - allows you to further style the popup footer\n- `btn-clear` - allows you to further style the clear button\n- `btn-apply ` - allows you to further style the apply button\n\n## Features (With Code Examples)\nWith no settings. Showing empty input field with no label or placeholder.\nCalendar popup highlights current date, the first day of week is based on the locale calendar.\n\n```html\n<ids-date-picker></ids-date-picker>\n```\n\nWith date form field settings. Required. Validation triggers on the input value change. Not tabbable.\n\n```html\n<ids-date-picker\n  id=\"date-field\"\n  label=\"Date Field\"\n  value=\"3/4/2016\"\n  placeholder=\"M/d/yyyy\"\n  format=\"locale\"\n  validate=\"required\"\n  validation-events=\"change\"\n  size=\"lg\"\n  tabbable=\"false\"\n></ids-date-picker>\n```\n\nAs dropdown variation.\n\n```html\n<ids-date-picker\n  value=\"November 2021\"\n  is-dropdown=\"true\"\n></ids-date-picker>\n```\n\nWhen used in calendar toolbar.\n\n```html\n<ids-date-picker\n  is-calendar-toolbar=\"true\"\n  year=\"2021\"\n  month=\"10\"\n  day=\"15\"\n  show-today=\"false\"\n  first-day-of-week=\"1\"\n></ids-date-picker>\n```\n\nEnable range selection with default settings.\n\n```html\n<ids-date-picker\n  use-range=\"true\"\n></ids-date-picker>\n```\n\nThe component can be controlled dynamically\n\n```js\nconst datePicker = document.querySelector('ids-date-picker');\n\n// Set legend\ndatePicker.legend = [\n  {\n    name: 'Public Holiday',\n    color: 'emerald-60',\n    dates: ['12/31/2021', '12/24/2021', '1/1/2022'],\n  },\n  { name: 'Weekends', color: 'amber-60', dayOfWeek: [0, 6] },\n  {\n    name: 'Other',\n    color: 'ruby-30',\n    dates: ['1/8/2022', '1/9/2022', '1/23/2022'],\n  },\n  {\n    name: 'Half Days',\n    color: 'amethyst-60',\n    dates: ['1/21/2022', '1/22/2022'],\n  },\n  {\n    name: 'Full Days',\n    color: '#1677ee',\n    dates: ['1/24/2022', '1/25/2022'],\n  }\n];\n\n// Unset legend\ndatePicker.legend = null;\n\n// Enable range selection and set range settings\ndatePicker.useRange = true;\ndatePicker.rangeSettings = {\n  start: '12/24/2021',\n  end: '1/25/2022'\n};\n\n// Disable range selection\ndatePicker.useRange = false;\n\n// Add disabled dates\ndatePicker.disableSettings = {\n  dates: ['2/7/2018', '2/9/2018', '2/10/2018', '2/11/2018'],\n  dayOfWeek: [0, 6],\n  minDate: '2/6/2018',\n  maxDate: '2/12/2018',\n  years: [2017, 2018],\n  isEnable: true\n}\n```\n\n## Keyboard Guidelines\n- <kbd>Tab</kbd> - becomes active by tabbing into it.\n- <kbd>Shift + Tab</kbd> reverses the direction of the tab order. Once in the widget, a <kbd>Shift + Tab</kbd> will take the user to the previous focusable element in the tab order\n- <kbd>Up</kbd> and <kbd>Down</kbd> goes to the same day of the week in the previous or next week respectively. If the user advances past the end of the month they continue into the next or previous month as appropriate\n- <kbd>Left</kbd> Go to the previous day. Visually, focus is moved from day to day and wraps from row to row in a grid of days and weeks\n- <kbd>Right</kbd> Advances to the next day. Visually, focus is moved from day to day and wraps from row to row in a grid of days and weeks\n- <kbd>Control + Page Up</kbd> moves to the same date in the previous year\n- <kbd>Control + Page Down</kbd> moves to the same date in the next year\n- <kbd>Space</kbd>, in singleton mode, acts as a toggle either selecting or de-selecting the date. In contiguous mode, it behaves similar to selecting a range of text: <kbd>Space</kbd> selects the first date. <kbd>Shift + Arrows</kbd> add to the selection. Pressing <kbd>Space</kbd> again de-selects the previous selections and selects the current focused date. In non-contiguous mode, <kbd>Space</kbd> may be used to select multiple non-contiguous dates\n- <kbd>Home</kbd> moves to the first day of the current month\n- <kbd>End</kbd> moves to the last day of the current month\n- <kbd>Page Up</kbd> moves to the same date in the previous month\n- <kbd>Page Down</kbd> moves to the same date in the next month\n- <kbd>Enter</kbd> submits the form\n- <kbd>Escape</kbd>, in the case of a popup date picker, closes the widget without any action\n- <kbd>T</kbd> inserts today's date. Except for cases where date format includes wide/abbreaviated months\n- <kbd>+</kbd> Is used to increment the day in the calendar. This is in addition to the <kbd>Right</kbd>. This works both when in the input field or when the calendar picker is open. If the date pattern contains a `-` in it then this key interferes with typing so this key shortcut is disabled.\n- <kbd>-</kbd>  Is used to increment the day in the calendar. This is in addition to the <kbd>Left</kbd>. This works both when in the input field or when the calendar picker is open. If the date pattern contains a `-` in it then this key interferes with typing so this key shortcut is disabled.\n\n## Accessibility\nThe Date Picker is a complex control to code for accessibility.\n\n- Always associate labels to the input field\n- Add an `aria` label to the calendar element\n- Add `aria-selected=true` to selected day\n- Add instructional information like \"Use down arrow to select\" to the input as an audible label\n- Each calendar item should have an audible label to announce the day of week while arrowing through days\n- For comparison, see a similar <a href=\"http://oaa-accessibility.org/example/15/\" target=\"_blank\">example</a>\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- This is a new component for 4.x\n\n**4.x to 5.x**\n- Listeners for input and popup events should be added to references `input` and `popup` now. See Events section.\n- `disable/readonly/tabbable` are now attributes not methods\n- If using events, events are now plain JS events for example: change\n- Markup has changed to a custom element `<ids-date-picker></ids-date-picker>`\n- Can now be imported as a single JS file and used with encapsulated styles\n- Instead of `onOpenCalendar` callback there are `show`, `hide` popup plain JS events and a date for calendar can be set as date picker `year`, `month`, `day` settings when calendar popup is opened\n- To use date picker with time picker `format` attribute should contain time i.e. `M/d/yyyy hh:mm a`\n- Added week numbers option to the calendar picklist\n"}},{"name":"ids-date-picker-popup","attributes":[{"name":"expandableArea","values":[]},{"name":"monthView","values":[]},{"name":"monthYearPicklist","values":[]},{"name":"timepicker","values":[]},{"name":"toolbar","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"buttons","values":[]},{"name":"showToday","description":"Set whether or not month view today button should be show","values":[]},{"name":"onLocaleChange","values":[]},{"name":"applyBtnEl","values":[]},{"name":"cancelBtnEl","values":[]},{"name":"todayBtnEl","values":[]},{"name":"expanded","description":"Set whether or not the month/year picker should be expanded","values":[]},{"name":"minuteInterval","description":"Set interval in minutes dropdown","values":[]},{"name":"secondInterval","description":"Set interval in seconds dropdown","values":[]},{"name":"showClear","description":"Set whether or not to show clear button in the calendar popup","values":[]},{"name":"showCancel","description":"Set whether or not to show cancel button when the picker is expanded","values":[]},{"name":"showPicklistYear","description":"Whether or not to show a list of years in the picklist","values":[]},{"name":"showPicklistMonth","description":"Whether or not to show a list of months in the picklist","values":[]},{"name":"showPicklistWeek","description":"Whether or not to show week numbers in the picklist","values":[]},{"name":"useCurrentTime","description":"Set whether or not to show current time in the time picker","values":[]},{"name":"#value","values":[]},{"name":"value","description":"Set Date Picker Popup's stored value. Should parse a date from the value.","values":[]},{"name":"showWeekNumbers","values":[]}],"description":{"kind":"markdown","value":"# Ids Date Picker Component\n\n## Description\nThe `ids-date-picker` is a web component to support date entry\n\n## Use Cases\n- Display date form field with input attributes (value, label, placeholder, disabled, readonly) and validation\n- Display date picker in calendar toolbar (`ids-week-view`, `ids-month-view`)\n\n## Settings (Attributes)\n- `colorVariant` {string} set the current color variant.\n- `compact` {boolean} sets the component to be compact mode.\n- `fieldHeight` {string} defines the field height. See [Ids Field Height Mixin](../../mixins/ids-field-height-mixin/README.md) for more information.\n- `value` {string|null} - Input value\n- `placeholder` {true|false} - Whether or not to show date format as input placeholder\n- `label` {string|null} - Input label\n- `labelState` {string} indicates that a label is hidden (note that for accessibility reasons, `label` should still be specified). See [Ids Label State Mixin](../../mixins/ids-label-state-mixin/README.md) for more information.\n- `noMargins` {boolean} sets whether or not no-margins around the component.\n- `id` {string} - Input ID\n- `disabled` {true|false} - Whether or not the input should be disabled\n- `readonly` {true|false} - Whether or not the input should be readonly\n- `tabbable` {true|false} - Whether or not the trigger button should be tabbable\n- `size` {'xs'|'sm'|'mm'|'md'|'lg'|'full'} - Size (width) of the field. Default is `sm`\n- `validate` {'required'|'date'|'rangeDate'|string} - Input validation rules\n- `validation-events` {string} - Input validation events, `change blur` as default\n- `format` {'locale'|string|null} - Input date format, if not set defaults to locale calendar date format. Examples: `yyyy-MM-dd`, `d/M/yyyy`, `dd/MM/yyyy`\n- `is-calendar-toolbar` {true|false} - Whether or not the component is used in calendar toolbar. Uses text instead of input\n- `is-dropdown` {true|false} - Whether or not the component is dropdown with year/month picker\n- `month` `{string|number|null}` - Specifies a month for the popup calendar (`ids-month-view` attribute)\n- `day` `{string|number|null}` - Specifies a day for the popup calendar (`ids-month-view` attribute)\n- `year` `{string|number|null}` - Specifies a year for the popup calendar (`ids-month-view` attribute)\n- `first-day-of-week` `{string|number|null}` - Specifies first day of the week for the popup calendar, if not set the information comes from the locale (`ids-month-view` attribute)\n- `show-today` `{true|false}` - Whether or not to show the today button in the popup calendar (`ids-month-view` attribute)\n- `expanded` `{true|false}` - When the date picker is month/year picker it specifies whether or not the picker is expanded\n- `legend` - Set array of legend items:\n  - `name` `{string}` - The name of the legend (required)\n  - `color` `{string}` - The color of the legend, either hex or IDS variable excluding `--ids-color-` part i.e. `emerald-60` (required)\n  - `dates` `{Array}` - Array of dates (either dates or dayOfWeek is required)\n  - `dayOfWeek` `{Array}` - Array of days of week where 0 is Sunday (either dates or dayOfWeek is required)\n- `use-range` `{true|false}` - Whether or not the component should be a range picker. If set without settings default settings will apply.\n- `rangeSettings` `{Object}` - Range selection settings:\n  - `start` `{string}` - start date of the range selection. Default is `null` not set\n  - `end` `{string}` - end date of the range selection. Default is `null` not set\n  - `separator` `{string}` - separator symbol for the input value i.e. `2/7/2018 - 2/22/2018` if separator is ` - `. Default is ` - `\n  - `minDays` `{number}` - minimum number of days to select. Default is `0` not set\n  - `maxDays` `{number}` - maximum number of days to select. Default is `0` not set\n  - `selectForward` `{boolean}` - Whether or not the selection should be in forward direction. Default is `false`\n  - `selectBackward` `{boolean}` - Whether or not the selection should be in backward direction. Default is `false`\n  - `includeDisabled` `{boolean}` - Whether or not the selection should include disabled dates visually\n  - `selectWeek` `{boolean}` - Whether or not the selection should include the whole week\n- `disableSettings` `{Object}` - Disable dates settings:\n  - `dates` `{Array}` - Disable specific dates (in a format that can be converted to a date)\n  - `years` `{Array}` - Disable specific years\n  - `minDate` `{string}` - Disable up to a minimum date\n  - `maxDate` `{string}` - Disable up to a maximum date\n  - `dayOfWeek` `{Array}` - Disable a specific of days of the week 0-6\n  - `isEnable` `{boolean}` - Enables the disabled dates. Default is false\n- `mask` `{true|false}` - Whether or not to enable date mask for the input. `format` attribute will be set as mask options format\n- `minute-interval` {number} Set time picker minutes dropdown options interval\n- `second-interval` {number} Set time picker seconds dropdown options interval\n- `use-current-time` {true|false} - Set whether or not to show current time in the time picker dropdowns\n- `show-picklist-year` `{true|false}` Whether or not to show a list of years in the picklist, default if true\n- `show-picklist-month` `{true|false}` Whether or not to show a list of months in the picklist, default is true\n- `show-picklist-week` `{true|false}` Whether or not to show week numbers in the picklist\n\n## Methods\n- `open()` - opens calendar popup\n- `close()` - closes calendar popup\n\n## Events\n- `dayselected` - Fires when a day is selected or range selection is completed\n- `expanded` - Fires when a month/year picker is opened/closed\n- Event listeners for input (trigger field) `blur`, `change`, `focus`, `select`, `keydown`, `keypress`, `keyup`, `click`, `dbclick`, `beforetriggerclicked`, `triggerclicked` events can be added to `input` component property:\n\n```js\nconst datePicker = document.querySelector('ids-date-picker');\n\ndatePicker.input.addEventListener('change');\n```\n- Event listeners for popup `show`, `hide` events can be added to `popup` property:\n```js\nconst datePicker = document.querySelector('ids-date-picker');\n\ndatePicker.popup.addEventListener('show');\ndatePicker.popup.addEventListener('hide');\n```\n\n## Themeable Parts\n- `container` allows you to further style the container element of the component\n- `trigger-field` allows you to further style the trigger container\n- `trigger-button` allows you to further style the trigger button\n- `icon` allows you to further style the icon in the trigger button\n- `input` allows you to further style the input element\n- `popup` allows you to further style the popup element\n- `footer` - allows you to further style the popup footer\n- `btn-clear` - allows you to further style the clear button\n- `btn-apply ` - allows you to further style the apply button\n\n## Features (With Code Examples)\nWith no settings. Showing empty input field with no label or placeholder.\nCalendar popup highlights current date, the first day of week is based on the locale calendar.\n\n```html\n<ids-date-picker></ids-date-picker>\n```\n\nWith date form field settings. Required. Validation triggers on the input value change. Not tabbable.\n\n```html\n<ids-date-picker\n  id=\"date-field\"\n  label=\"Date Field\"\n  value=\"3/4/2016\"\n  placeholder=\"M/d/yyyy\"\n  format=\"locale\"\n  validate=\"required\"\n  validation-events=\"change\"\n  size=\"lg\"\n  tabbable=\"false\"\n></ids-date-picker>\n```\n\nAs dropdown variation.\n\n```html\n<ids-date-picker\n  value=\"November 2021\"\n  is-dropdown=\"true\"\n></ids-date-picker>\n```\n\nWhen used in calendar toolbar.\n\n```html\n<ids-date-picker\n  is-calendar-toolbar=\"true\"\n  year=\"2021\"\n  month=\"10\"\n  day=\"15\"\n  show-today=\"false\"\n  first-day-of-week=\"1\"\n></ids-date-picker>\n```\n\nEnable range selection with default settings.\n\n```html\n<ids-date-picker\n  use-range=\"true\"\n></ids-date-picker>\n```\n\nThe component can be controlled dynamically\n\n```js\nconst datePicker = document.querySelector('ids-date-picker');\n\n// Set legend\ndatePicker.legend = [\n  {\n    name: 'Public Holiday',\n    color: 'emerald-60',\n    dates: ['12/31/2021', '12/24/2021', '1/1/2022'],\n  },\n  { name: 'Weekends', color: 'amber-60', dayOfWeek: [0, 6] },\n  {\n    name: 'Other',\n    color: 'ruby-30',\n    dates: ['1/8/2022', '1/9/2022', '1/23/2022'],\n  },\n  {\n    name: 'Half Days',\n    color: 'amethyst-60',\n    dates: ['1/21/2022', '1/22/2022'],\n  },\n  {\n    name: 'Full Days',\n    color: '#1677ee',\n    dates: ['1/24/2022', '1/25/2022'],\n  }\n];\n\n// Unset legend\ndatePicker.legend = null;\n\n// Enable range selection and set range settings\ndatePicker.useRange = true;\ndatePicker.rangeSettings = {\n  start: '12/24/2021',\n  end: '1/25/2022'\n};\n\n// Disable range selection\ndatePicker.useRange = false;\n\n// Add disabled dates\ndatePicker.disableSettings = {\n  dates: ['2/7/2018', '2/9/2018', '2/10/2018', '2/11/2018'],\n  dayOfWeek: [0, 6],\n  minDate: '2/6/2018',\n  maxDate: '2/12/2018',\n  years: [2017, 2018],\n  isEnable: true\n}\n```\n\n## Keyboard Guidelines\n- <kbd>Tab</kbd> - becomes active by tabbing into it.\n- <kbd>Shift + Tab</kbd> reverses the direction of the tab order. Once in the widget, a <kbd>Shift + Tab</kbd> will take the user to the previous focusable element in the tab order\n- <kbd>Up</kbd> and <kbd>Down</kbd> goes to the same day of the week in the previous or next week respectively. If the user advances past the end of the month they continue into the next or previous month as appropriate\n- <kbd>Left</kbd> Go to the previous day. Visually, focus is moved from day to day and wraps from row to row in a grid of days and weeks\n- <kbd>Right</kbd> Advances to the next day. Visually, focus is moved from day to day and wraps from row to row in a grid of days and weeks\n- <kbd>Control + Page Up</kbd> moves to the same date in the previous year\n- <kbd>Control + Page Down</kbd> moves to the same date in the next year\n- <kbd>Space</kbd>, in singleton mode, acts as a toggle either selecting or de-selecting the date. In contiguous mode, it behaves similar to selecting a range of text: <kbd>Space</kbd> selects the first date. <kbd>Shift + Arrows</kbd> add to the selection. Pressing <kbd>Space</kbd> again de-selects the previous selections and selects the current focused date. In non-contiguous mode, <kbd>Space</kbd> may be used to select multiple non-contiguous dates\n- <kbd>Home</kbd> moves to the first day of the current month\n- <kbd>End</kbd> moves to the last day of the current month\n- <kbd>Page Up</kbd> moves to the same date in the previous month\n- <kbd>Page Down</kbd> moves to the same date in the next month\n- <kbd>Enter</kbd> submits the form\n- <kbd>Escape</kbd>, in the case of a popup date picker, closes the widget without any action\n- <kbd>T</kbd> inserts today's date. Except for cases where date format includes wide/abbreaviated months\n- <kbd>+</kbd> Is used to increment the day in the calendar. This is in addition to the <kbd>Right</kbd>. This works both when in the input field or when the calendar picker is open. If the date pattern contains a `-` in it then this key interferes with typing so this key shortcut is disabled.\n- <kbd>-</kbd>  Is used to increment the day in the calendar. This is in addition to the <kbd>Left</kbd>. This works both when in the input field or when the calendar picker is open. If the date pattern contains a `-` in it then this key interferes with typing so this key shortcut is disabled.\n\n## Accessibility\nThe Date Picker is a complex control to code for accessibility.\n\n- Always associate labels to the input field\n- Add an `aria` label to the calendar element\n- Add `aria-selected=true` to selected day\n- Add instructional information like \"Use down arrow to select\" to the input as an audible label\n- Each calendar item should have an audible label to announce the day of week while arrowing through days\n- For comparison, see a similar <a href=\"http://oaa-accessibility.org/example/15/\" target=\"_blank\">example</a>\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- This is a new component for 4.x\n\n**4.x to 5.x**\n- Listeners for input and popup events should be added to references `input` and `popup` now. See Events section.\n- `disable/readonly/tabbable` are now attributes not methods\n- If using events, events are now plain JS events for example: change\n- Markup has changed to a custom element `<ids-date-picker></ids-date-picker>`\n- Can now be imported as a single JS file and used with encapsulated styles\n- Instead of `onOpenCalendar` callback there are `show`, `hide` popup plain JS events and a date for calendar can be set as date picker `year`, `month`, `day` settings when calendar popup is opened\n- To use date picker with time picker `format` attribute should contain time i.e. `M/d/yyyy hh:mm a`\n- Added week numbers option to the calendar picklist\n"}},{"name":"ids-date-picker","attributes":[{"name":"isFormComponent","values":[]},{"name":"#picker","values":[]},{"name":"#triggerButton","values":[]},{"name":"#triggerField","values":[]},{"name":"colorVariants","description":"List of available color variants for this component","values":[]},{"name":"popup","values":[]},{"name":"onLocaleChange","values":[]},{"name":"onLanguageChange","values":[]},{"name":"hasFocus","description":"Indicates if input, dropdown or the calendar toolbar has focus","values":[]},{"name":"value","description":"Set input value. Should parse a date from the value\nSet dropdown button text if the component is dropdown\nSet text if the component is used in calendar toolbar","values":[]},{"name":"placeholder","description":"Set input placeholder","values":[]},{"name":"disabled","description":"Set trigger field disabled attribute","values":[]},{"name":"readonly","description":"Set trigger field readonly attribute","values":[]},{"name":"size","description":"Set the size (width) of input","values":[]},{"name":"tabbable","description":"Set trigger field tabbable attribute","values":[]},{"name":"validate","description":"Set trigger field/input validation","values":[]},{"name":"validationEvents","description":"Set which input events to fire validation on","values":[]},{"name":"isCalendarToolbar","description":"Set whether or not the component is used in calendar toolbar","values":[]},{"name":"isDropdown","description":"Set whether or not the component is dropdown type","values":[]},{"name":"showToday","description":"Set whether or not month view today button should be show","values":[]},{"name":"noMargins","description":"Sets the no margins attribute","values":[]},{"name":"input","values":[]},{"name":"expanded","description":"Set whether or not the month/year picker should be expanded","values":[]},{"name":"mask","description":"Enable/disable date mask for the input","values":[]},{"name":"minuteInterval","description":"Set interval in minutes dropdown","values":[]},{"name":"secondInterval","description":"Set interval in seconds dropdown","values":[]},{"name":"showClear","description":"Set whether or not to show clear button in the calendar popup","values":[]},{"name":"showCancel","description":"Set whether or not to show cancel button when the picker is expanded","values":[]},{"name":"showPicklistYear","description":"Whether or not to show a list of years in the picklist","values":[]},{"name":"showPicklistMonth","description":"Whether or not to show a list of months in the picklist","values":[]},{"name":"showPicklistWeek","description":"Whether or not to show week numbers in the picklist","values":[]},{"name":"useCurrentTime","description":"Set whether or not to show current time in the time picker","values":[]},{"name":"showWeekNumbers","values":[]}],"description":{"kind":"markdown","value":"# Ids Date Picker Component\n\n## Description\nThe `ids-date-picker` is a web component to support date entry\n\n## Use Cases\n- Display date form field with input attributes (value, label, placeholder, disabled, readonly) and validation\n- Display date picker in calendar toolbar (`ids-week-view`, `ids-month-view`)\n\n## Settings (Attributes)\n- `colorVariant` {string} set the current color variant.\n- `compact` {boolean} sets the component to be compact mode.\n- `fieldHeight` {string} defines the field height. See [Ids Field Height Mixin](../../mixins/ids-field-height-mixin/README.md) for more information.\n- `value` {string|null} - Input value\n- `placeholder` {true|false} - Whether or not to show date format as input placeholder\n- `label` {string|null} - Input label\n- `labelState` {string} indicates that a label is hidden (note that for accessibility reasons, `label` should still be specified). See [Ids Label State Mixin](../../mixins/ids-label-state-mixin/README.md) for more information.\n- `noMargins` {boolean} sets whether or not no-margins around the component.\n- `id` {string} - Input ID\n- `disabled` {true|false} - Whether or not the input should be disabled\n- `readonly` {true|false} - Whether or not the input should be readonly\n- `tabbable` {true|false} - Whether or not the trigger button should be tabbable\n- `size` {'xs'|'sm'|'mm'|'md'|'lg'|'full'} - Size (width) of the field. Default is `sm`\n- `validate` {'required'|'date'|'rangeDate'|string} - Input validation rules\n- `validation-events` {string} - Input validation events, `change blur` as default\n- `format` {'locale'|string|null} - Input date format, if not set defaults to locale calendar date format. Examples: `yyyy-MM-dd`, `d/M/yyyy`, `dd/MM/yyyy`\n- `is-calendar-toolbar` {true|false} - Whether or not the component is used in calendar toolbar. Uses text instead of input\n- `is-dropdown` {true|false} - Whether or not the component is dropdown with year/month picker\n- `month` `{string|number|null}` - Specifies a month for the popup calendar (`ids-month-view` attribute)\n- `day` `{string|number|null}` - Specifies a day for the popup calendar (`ids-month-view` attribute)\n- `year` `{string|number|null}` - Specifies a year for the popup calendar (`ids-month-view` attribute)\n- `first-day-of-week` `{string|number|null}` - Specifies first day of the week for the popup calendar, if not set the information comes from the locale (`ids-month-view` attribute)\n- `show-today` `{true|false}` - Whether or not to show the today button in the popup calendar (`ids-month-view` attribute)\n- `expanded` `{true|false}` - When the date picker is month/year picker it specifies whether or not the picker is expanded\n- `legend` - Set array of legend items:\n  - `name` `{string}` - The name of the legend (required)\n  - `color` `{string}` - The color of the legend, either hex or IDS variable excluding `--ids-color-` part i.e. `emerald-60` (required)\n  - `dates` `{Array}` - Array of dates (either dates or dayOfWeek is required)\n  - `dayOfWeek` `{Array}` - Array of days of week where 0 is Sunday (either dates or dayOfWeek is required)\n- `use-range` `{true|false}` - Whether or not the component should be a range picker. If set without settings default settings will apply.\n- `rangeSettings` `{Object}` - Range selection settings:\n  - `start` `{string}` - start date of the range selection. Default is `null` not set\n  - `end` `{string}` - end date of the range selection. Default is `null` not set\n  - `separator` `{string}` - separator symbol for the input value i.e. `2/7/2018 - 2/22/2018` if separator is ` - `. Default is ` - `\n  - `minDays` `{number}` - minimum number of days to select. Default is `0` not set\n  - `maxDays` `{number}` - maximum number of days to select. Default is `0` not set\n  - `selectForward` `{boolean}` - Whether or not the selection should be in forward direction. Default is `false`\n  - `selectBackward` `{boolean}` - Whether or not the selection should be in backward direction. Default is `false`\n  - `includeDisabled` `{boolean}` - Whether or not the selection should include disabled dates visually\n  - `selectWeek` `{boolean}` - Whether or not the selection should include the whole week\n- `disableSettings` `{Object}` - Disable dates settings:\n  - `dates` `{Array}` - Disable specific dates (in a format that can be converted to a date)\n  - `years` `{Array}` - Disable specific years\n  - `minDate` `{string}` - Disable up to a minimum date\n  - `maxDate` `{string}` - Disable up to a maximum date\n  - `dayOfWeek` `{Array}` - Disable a specific of days of the week 0-6\n  - `isEnable` `{boolean}` - Enables the disabled dates. Default is false\n- `mask` `{true|false}` - Whether or not to enable date mask for the input. `format` attribute will be set as mask options format\n- `minute-interval` {number} Set time picker minutes dropdown options interval\n- `second-interval` {number} Set time picker seconds dropdown options interval\n- `use-current-time` {true|false} - Set whether or not to show current time in the time picker dropdowns\n- `show-picklist-year` `{true|false}` Whether or not to show a list of years in the picklist, default if true\n- `show-picklist-month` `{true|false}` Whether or not to show a list of months in the picklist, default is true\n- `show-picklist-week` `{true|false}` Whether or not to show week numbers in the picklist\n\n## Methods\n- `open()` - opens calendar popup\n- `close()` - closes calendar popup\n\n## Events\n- `dayselected` - Fires when a day is selected or range selection is completed\n- `expanded` - Fires when a month/year picker is opened/closed\n- Event listeners for input (trigger field) `blur`, `change`, `focus`, `select`, `keydown`, `keypress`, `keyup`, `click`, `dbclick`, `beforetriggerclicked`, `triggerclicked` events can be added to `input` component property:\n\n```js\nconst datePicker = document.querySelector('ids-date-picker');\n\ndatePicker.input.addEventListener('change');\n```\n- Event listeners for popup `show`, `hide` events can be added to `popup` property:\n```js\nconst datePicker = document.querySelector('ids-date-picker');\n\ndatePicker.popup.addEventListener('show');\ndatePicker.popup.addEventListener('hide');\n```\n\n## Themeable Parts\n- `container` allows you to further style the container element of the component\n- `trigger-field` allows you to further style the trigger container\n- `trigger-button` allows you to further style the trigger button\n- `icon` allows you to further style the icon in the trigger button\n- `input` allows you to further style the input element\n- `popup` allows you to further style the popup element\n- `footer` - allows you to further style the popup footer\n- `btn-clear` - allows you to further style the clear button\n- `btn-apply ` - allows you to further style the apply button\n\n## Features (With Code Examples)\nWith no settings. Showing empty input field with no label or placeholder.\nCalendar popup highlights current date, the first day of week is based on the locale calendar.\n\n```html\n<ids-date-picker></ids-date-picker>\n```\n\nWith date form field settings. Required. Validation triggers on the input value change. Not tabbable.\n\n```html\n<ids-date-picker\n  id=\"date-field\"\n  label=\"Date Field\"\n  value=\"3/4/2016\"\n  placeholder=\"M/d/yyyy\"\n  format=\"locale\"\n  validate=\"required\"\n  validation-events=\"change\"\n  size=\"lg\"\n  tabbable=\"false\"\n></ids-date-picker>\n```\n\nAs dropdown variation.\n\n```html\n<ids-date-picker\n  value=\"November 2021\"\n  is-dropdown=\"true\"\n></ids-date-picker>\n```\n\nWhen used in calendar toolbar.\n\n```html\n<ids-date-picker\n  is-calendar-toolbar=\"true\"\n  year=\"2021\"\n  month=\"10\"\n  day=\"15\"\n  show-today=\"false\"\n  first-day-of-week=\"1\"\n></ids-date-picker>\n```\n\nEnable range selection with default settings.\n\n```html\n<ids-date-picker\n  use-range=\"true\"\n></ids-date-picker>\n```\n\nThe component can be controlled dynamically\n\n```js\nconst datePicker = document.querySelector('ids-date-picker');\n\n// Set legend\ndatePicker.legend = [\n  {\n    name: 'Public Holiday',\n    color: 'emerald-60',\n    dates: ['12/31/2021', '12/24/2021', '1/1/2022'],\n  },\n  { name: 'Weekends', color: 'amber-60', dayOfWeek: [0, 6] },\n  {\n    name: 'Other',\n    color: 'ruby-30',\n    dates: ['1/8/2022', '1/9/2022', '1/23/2022'],\n  },\n  {\n    name: 'Half Days',\n    color: 'amethyst-60',\n    dates: ['1/21/2022', '1/22/2022'],\n  },\n  {\n    name: 'Full Days',\n    color: '#1677ee',\n    dates: ['1/24/2022', '1/25/2022'],\n  }\n];\n\n// Unset legend\ndatePicker.legend = null;\n\n// Enable range selection and set range settings\ndatePicker.useRange = true;\ndatePicker.rangeSettings = {\n  start: '12/24/2021',\n  end: '1/25/2022'\n};\n\n// Disable range selection\ndatePicker.useRange = false;\n\n// Add disabled dates\ndatePicker.disableSettings = {\n  dates: ['2/7/2018', '2/9/2018', '2/10/2018', '2/11/2018'],\n  dayOfWeek: [0, 6],\n  minDate: '2/6/2018',\n  maxDate: '2/12/2018',\n  years: [2017, 2018],\n  isEnable: true\n}\n```\n\n## Keyboard Guidelines\n- <kbd>Tab</kbd> - becomes active by tabbing into it.\n- <kbd>Shift + Tab</kbd> reverses the direction of the tab order. Once in the widget, a <kbd>Shift + Tab</kbd> will take the user to the previous focusable element in the tab order\n- <kbd>Up</kbd> and <kbd>Down</kbd> goes to the same day of the week in the previous or next week respectively. If the user advances past the end of the month they continue into the next or previous month as appropriate\n- <kbd>Left</kbd> Go to the previous day. Visually, focus is moved from day to day and wraps from row to row in a grid of days and weeks\n- <kbd>Right</kbd> Advances to the next day. Visually, focus is moved from day to day and wraps from row to row in a grid of days and weeks\n- <kbd>Control + Page Up</kbd> moves to the same date in the previous year\n- <kbd>Control + Page Down</kbd> moves to the same date in the next year\n- <kbd>Space</kbd>, in singleton mode, acts as a toggle either selecting or de-selecting the date. In contiguous mode, it behaves similar to selecting a range of text: <kbd>Space</kbd> selects the first date. <kbd>Shift + Arrows</kbd> add to the selection. Pressing <kbd>Space</kbd> again de-selects the previous selections and selects the current focused date. In non-contiguous mode, <kbd>Space</kbd> may be used to select multiple non-contiguous dates\n- <kbd>Home</kbd> moves to the first day of the current month\n- <kbd>End</kbd> moves to the last day of the current month\n- <kbd>Page Up</kbd> moves to the same date in the previous month\n- <kbd>Page Down</kbd> moves to the same date in the next month\n- <kbd>Enter</kbd> submits the form\n- <kbd>Escape</kbd>, in the case of a popup date picker, closes the widget without any action\n- <kbd>T</kbd> inserts today's date. Except for cases where date format includes wide/abbreaviated months\n- <kbd>+</kbd> Is used to increment the day in the calendar. This is in addition to the <kbd>Right</kbd>. This works both when in the input field or when the calendar picker is open. If the date pattern contains a `-` in it then this key interferes with typing so this key shortcut is disabled.\n- <kbd>-</kbd>  Is used to increment the day in the calendar. This is in addition to the <kbd>Left</kbd>. This works both when in the input field or when the calendar picker is open. If the date pattern contains a `-` in it then this key interferes with typing so this key shortcut is disabled.\n\n## Accessibility\nThe Date Picker is a complex control to code for accessibility.\n\n- Always associate labels to the input field\n- Add an `aria` label to the calendar element\n- Add `aria-selected=true` to selected day\n- Add instructional information like \"Use down arrow to select\" to the input as an audible label\n- Each calendar item should have an audible label to announce the day of week while arrowing through days\n- For comparison, see a similar <a href=\"http://oaa-accessibility.org/example/15/\" target=\"_blank\">example</a>\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- This is a new component for 4.x\n\n**4.x to 5.x**\n- Listeners for input and popup events should be added to references `input` and `popup` now. See Events section.\n- `disable/readonly/tabbable` are now attributes not methods\n- If using events, events are now plain JS events for example: change\n- Markup has changed to a custom element `<ids-date-picker></ids-date-picker>`\n- Can now be imported as a single JS file and used with encapsulated styles\n- Instead of `onOpenCalendar` callback there are `show`, `hide` popup plain JS events and a date for calendar can be set as date picker `year`, `month`, `day` settings when calendar popup is opened\n- To use date picker with time picker `format` attribute should contain time i.e. `M/d/yyyy hh:mm a`\n- Added week numbers option to the calendar picklist\n"}},{"name":"ids-month-year-picklist","attributes":[{"name":"disabled","description":"Set trigger field disabled attribute","values":[]},{"name":"showPicklistYear","description":"Whether or not to show a list of years in the picklist","values":[]},{"name":"showPicklistMonth","description":"Whether or not to show a list of months in the picklist","values":[]},{"name":"showPicklistWeek","description":"Whether or not to show week numbers in the picklist","values":[]},{"name":"onLocaleChange","description":"Respond to locale changes","values":[]}],"description":{"kind":"markdown","value":"# Ids Date Picker Component\n\n## Description\nThe `ids-date-picker` is a web component to support date entry\n\n## Use Cases\n- Display date form field with input attributes (value, label, placeholder, disabled, readonly) and validation\n- Display date picker in calendar toolbar (`ids-week-view`, `ids-month-view`)\n\n## Settings (Attributes)\n- `colorVariant` {string} set the current color variant.\n- `compact` {boolean} sets the component to be compact mode.\n- `fieldHeight` {string} defines the field height. See [Ids Field Height Mixin](../../mixins/ids-field-height-mixin/README.md) for more information.\n- `value` {string|null} - Input value\n- `placeholder` {true|false} - Whether or not to show date format as input placeholder\n- `label` {string|null} - Input label\n- `labelState` {string} indicates that a label is hidden (note that for accessibility reasons, `label` should still be specified). See [Ids Label State Mixin](../../mixins/ids-label-state-mixin/README.md) for more information.\n- `noMargins` {boolean} sets whether or not no-margins around the component.\n- `id` {string} - Input ID\n- `disabled` {true|false} - Whether or not the input should be disabled\n- `readonly` {true|false} - Whether or not the input should be readonly\n- `tabbable` {true|false} - Whether or not the trigger button should be tabbable\n- `size` {'xs'|'sm'|'mm'|'md'|'lg'|'full'} - Size (width) of the field. Default is `sm`\n- `validate` {'required'|'date'|'rangeDate'|string} - Input validation rules\n- `validation-events` {string} - Input validation events, `change blur` as default\n- `format` {'locale'|string|null} - Input date format, if not set defaults to locale calendar date format. Examples: `yyyy-MM-dd`, `d/M/yyyy`, `dd/MM/yyyy`\n- `is-calendar-toolbar` {true|false} - Whether or not the component is used in calendar toolbar. Uses text instead of input\n- `is-dropdown` {true|false} - Whether or not the component is dropdown with year/month picker\n- `month` `{string|number|null}` - Specifies a month for the popup calendar (`ids-month-view` attribute)\n- `day` `{string|number|null}` - Specifies a day for the popup calendar (`ids-month-view` attribute)\n- `year` `{string|number|null}` - Specifies a year for the popup calendar (`ids-month-view` attribute)\n- `first-day-of-week` `{string|number|null}` - Specifies first day of the week for the popup calendar, if not set the information comes from the locale (`ids-month-view` attribute)\n- `show-today` `{true|false}` - Whether or not to show the today button in the popup calendar (`ids-month-view` attribute)\n- `expanded` `{true|false}` - When the date picker is month/year picker it specifies whether or not the picker is expanded\n- `legend` - Set array of legend items:\n  - `name` `{string}` - The name of the legend (required)\n  - `color` `{string}` - The color of the legend, either hex or IDS variable excluding `--ids-color-` part i.e. `emerald-60` (required)\n  - `dates` `{Array}` - Array of dates (either dates or dayOfWeek is required)\n  - `dayOfWeek` `{Array}` - Array of days of week where 0 is Sunday (either dates or dayOfWeek is required)\n- `use-range` `{true|false}` - Whether or not the component should be a range picker. If set without settings default settings will apply.\n- `rangeSettings` `{Object}` - Range selection settings:\n  - `start` `{string}` - start date of the range selection. Default is `null` not set\n  - `end` `{string}` - end date of the range selection. Default is `null` not set\n  - `separator` `{string}` - separator symbol for the input value i.e. `2/7/2018 - 2/22/2018` if separator is ` - `. Default is ` - `\n  - `minDays` `{number}` - minimum number of days to select. Default is `0` not set\n  - `maxDays` `{number}` - maximum number of days to select. Default is `0` not set\n  - `selectForward` `{boolean}` - Whether or not the selection should be in forward direction. Default is `false`\n  - `selectBackward` `{boolean}` - Whether or not the selection should be in backward direction. Default is `false`\n  - `includeDisabled` `{boolean}` - Whether or not the selection should include disabled dates visually\n  - `selectWeek` `{boolean}` - Whether or not the selection should include the whole week\n- `disableSettings` `{Object}` - Disable dates settings:\n  - `dates` `{Array}` - Disable specific dates (in a format that can be converted to a date)\n  - `years` `{Array}` - Disable specific years\n  - `minDate` `{string}` - Disable up to a minimum date\n  - `maxDate` `{string}` - Disable up to a maximum date\n  - `dayOfWeek` `{Array}` - Disable a specific of days of the week 0-6\n  - `isEnable` `{boolean}` - Enables the disabled dates. Default is false\n- `mask` `{true|false}` - Whether or not to enable date mask for the input. `format` attribute will be set as mask options format\n- `minute-interval` {number} Set time picker minutes dropdown options interval\n- `second-interval` {number} Set time picker seconds dropdown options interval\n- `use-current-time` {true|false} - Set whether or not to show current time in the time picker dropdowns\n- `show-picklist-year` `{true|false}` Whether or not to show a list of years in the picklist, default if true\n- `show-picklist-month` `{true|false}` Whether or not to show a list of months in the picklist, default is true\n- `show-picklist-week` `{true|false}` Whether or not to show week numbers in the picklist\n\n## Methods\n- `open()` - opens calendar popup\n- `close()` - closes calendar popup\n\n## Events\n- `dayselected` - Fires when a day is selected or range selection is completed\n- `expanded` - Fires when a month/year picker is opened/closed\n- Event listeners for input (trigger field) `blur`, `change`, `focus`, `select`, `keydown`, `keypress`, `keyup`, `click`, `dbclick`, `beforetriggerclicked`, `triggerclicked` events can be added to `input` component property:\n\n```js\nconst datePicker = document.querySelector('ids-date-picker');\n\ndatePicker.input.addEventListener('change');\n```\n- Event listeners for popup `show`, `hide` events can be added to `popup` property:\n```js\nconst datePicker = document.querySelector('ids-date-picker');\n\ndatePicker.popup.addEventListener('show');\ndatePicker.popup.addEventListener('hide');\n```\n\n## Themeable Parts\n- `container` allows you to further style the container element of the component\n- `trigger-field` allows you to further style the trigger container\n- `trigger-button` allows you to further style the trigger button\n- `icon` allows you to further style the icon in the trigger button\n- `input` allows you to further style the input element\n- `popup` allows you to further style the popup element\n- `footer` - allows you to further style the popup footer\n- `btn-clear` - allows you to further style the clear button\n- `btn-apply ` - allows you to further style the apply button\n\n## Features (With Code Examples)\nWith no settings. Showing empty input field with no label or placeholder.\nCalendar popup highlights current date, the first day of week is based on the locale calendar.\n\n```html\n<ids-date-picker></ids-date-picker>\n```\n\nWith date form field settings. Required. Validation triggers on the input value change. Not tabbable.\n\n```html\n<ids-date-picker\n  id=\"date-field\"\n  label=\"Date Field\"\n  value=\"3/4/2016\"\n  placeholder=\"M/d/yyyy\"\n  format=\"locale\"\n  validate=\"required\"\n  validation-events=\"change\"\n  size=\"lg\"\n  tabbable=\"false\"\n></ids-date-picker>\n```\n\nAs dropdown variation.\n\n```html\n<ids-date-picker\n  value=\"November 2021\"\n  is-dropdown=\"true\"\n></ids-date-picker>\n```\n\nWhen used in calendar toolbar.\n\n```html\n<ids-date-picker\n  is-calendar-toolbar=\"true\"\n  year=\"2021\"\n  month=\"10\"\n  day=\"15\"\n  show-today=\"false\"\n  first-day-of-week=\"1\"\n></ids-date-picker>\n```\n\nEnable range selection with default settings.\n\n```html\n<ids-date-picker\n  use-range=\"true\"\n></ids-date-picker>\n```\n\nThe component can be controlled dynamically\n\n```js\nconst datePicker = document.querySelector('ids-date-picker');\n\n// Set legend\ndatePicker.legend = [\n  {\n    name: 'Public Holiday',\n    color: 'emerald-60',\n    dates: ['12/31/2021', '12/24/2021', '1/1/2022'],\n  },\n  { name: 'Weekends', color: 'amber-60', dayOfWeek: [0, 6] },\n  {\n    name: 'Other',\n    color: 'ruby-30',\n    dates: ['1/8/2022', '1/9/2022', '1/23/2022'],\n  },\n  {\n    name: 'Half Days',\n    color: 'amethyst-60',\n    dates: ['1/21/2022', '1/22/2022'],\n  },\n  {\n    name: 'Full Days',\n    color: '#1677ee',\n    dates: ['1/24/2022', '1/25/2022'],\n  }\n];\n\n// Unset legend\ndatePicker.legend = null;\n\n// Enable range selection and set range settings\ndatePicker.useRange = true;\ndatePicker.rangeSettings = {\n  start: '12/24/2021',\n  end: '1/25/2022'\n};\n\n// Disable range selection\ndatePicker.useRange = false;\n\n// Add disabled dates\ndatePicker.disableSettings = {\n  dates: ['2/7/2018', '2/9/2018', '2/10/2018', '2/11/2018'],\n  dayOfWeek: [0, 6],\n  minDate: '2/6/2018',\n  maxDate: '2/12/2018',\n  years: [2017, 2018],\n  isEnable: true\n}\n```\n\n## Keyboard Guidelines\n- <kbd>Tab</kbd> - becomes active by tabbing into it.\n- <kbd>Shift + Tab</kbd> reverses the direction of the tab order. Once in the widget, a <kbd>Shift + Tab</kbd> will take the user to the previous focusable element in the tab order\n- <kbd>Up</kbd> and <kbd>Down</kbd> goes to the same day of the week in the previous or next week respectively. If the user advances past the end of the month they continue into the next or previous month as appropriate\n- <kbd>Left</kbd> Go to the previous day. Visually, focus is moved from day to day and wraps from row to row in a grid of days and weeks\n- <kbd>Right</kbd> Advances to the next day. Visually, focus is moved from day to day and wraps from row to row in a grid of days and weeks\n- <kbd>Control + Page Up</kbd> moves to the same date in the previous year\n- <kbd>Control + Page Down</kbd> moves to the same date in the next year\n- <kbd>Space</kbd>, in singleton mode, acts as a toggle either selecting or de-selecting the date. In contiguous mode, it behaves similar to selecting a range of text: <kbd>Space</kbd> selects the first date. <kbd>Shift + Arrows</kbd> add to the selection. Pressing <kbd>Space</kbd> again de-selects the previous selections and selects the current focused date. In non-contiguous mode, <kbd>Space</kbd> may be used to select multiple non-contiguous dates\n- <kbd>Home</kbd> moves to the first day of the current month\n- <kbd>End</kbd> moves to the last day of the current month\n- <kbd>Page Up</kbd> moves to the same date in the previous month\n- <kbd>Page Down</kbd> moves to the same date in the next month\n- <kbd>Enter</kbd> submits the form\n- <kbd>Escape</kbd>, in the case of a popup date picker, closes the widget without any action\n- <kbd>T</kbd> inserts today's date. Except for cases where date format includes wide/abbreaviated months\n- <kbd>+</kbd> Is used to increment the day in the calendar. This is in addition to the <kbd>Right</kbd>. This works both when in the input field or when the calendar picker is open. If the date pattern contains a `-` in it then this key interferes with typing so this key shortcut is disabled.\n- <kbd>-</kbd>  Is used to increment the day in the calendar. This is in addition to the <kbd>Left</kbd>. This works both when in the input field or when the calendar picker is open. If the date pattern contains a `-` in it then this key interferes with typing so this key shortcut is disabled.\n\n## Accessibility\nThe Date Picker is a complex control to code for accessibility.\n\n- Always associate labels to the input field\n- Add an `aria` label to the calendar element\n- Add `aria-selected=true` to selected day\n- Add instructional information like \"Use down arrow to select\" to the input as an audible label\n- Each calendar item should have an audible label to announce the day of week while arrowing through days\n- For comparison, see a similar <a href=\"http://oaa-accessibility.org/example/15/\" target=\"_blank\">example</a>\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- This is a new component for 4.x\n\n**4.x to 5.x**\n- Listeners for input and popup events should be added to references `input` and `popup` now. See Events section.\n- `disable/readonly/tabbable` are now attributes not methods\n- If using events, events are now plain JS events for example: change\n- Markup has changed to a custom element `<ids-date-picker></ids-date-picker>`\n- Can now be imported as a single JS file and used with encapsulated styles\n- Instead of `onOpenCalendar` callback there are `show`, `hide` popup plain JS events and a date for calendar can be set as date picker `year`, `month`, `day` settings when calendar popup is opened\n- To use date picker with time picker `format` attribute should contain time i.e. `M/d/yyyy hh:mm a`\n- Added week numbers option to the calendar picklist\n"}},{"name":"get-el-translate-point","description":{"kind":"markdown","value":"# Ids Draggable\n\n## Description\n\nA container which limits and tracks the dragging of an HTML Element along a specific axis or within the bounds of it's parent element.\n\n## Use Cases\n\nA draggable would be used in the case where you may have a pane splitter (e.g. in `ids-splitter`, internally), or a list that is meant to be dragged along a specific axis. It may also be used in many cases where we have a canvas or pane that should be resized (in one or two dimensions).\n\nIt does not currently support drag/drop targets in the current iteration, but in the future this component may be used for moving items.\n\n## Features (With Code Examples)\n\nA draggable component with no bounds to where it is moved.\n```html\n <ids-draggable>\n  <div class=\"ids-draggable-demo-box\">\n    <ids-text>Drag Me</ids-text>\n  </div>\n</ids-draggable>\n```\n\nA draggable component along the X axis (e.g. drags horizontally).\n```html\n<ids-draggable axis=\"x\">\n  <div class=\"ids-draggable-demo-box\">\n    <ids-text>Horizontally Draggable</ids-text>\n  </div>\n</ids-draggable>\n```\n\nA draggable component along the Y axis (e.g. drags vertically).\n```html\n<ids-draggable axis=\"y\">\n  <div class=\"ids-draggable-demo-box\">\n    <ids-text>Vertically Draggable</ids-text>\n  </div>\n</ids-draggable>\n```\n\nA draggable component which can be dragged either horizontally or vertically\nbut is contained by it's first non zero-width/height parent (can also work for non-`<div>`, but cannot be a controlled `ids-layout-grid-cell`).\n```html\n<div>\n <ids-draggable parent-containment>\n    <div class=\"ids-draggable-demo-box\">\n      <ids-text>Vertically Draggable</ids-text></div>\n  </ids-draggable>\n</div>\n```\n\nA draggable component which is draggable only by a specific handle on the tab (note: a draggable component currently has a limitation of one handle element, even if the class matches multiple handles).\n```html\n<div>\n <ids-draggable handle=\".drag-handle\">\n    <div class=\"ids-draggable-demo-box\">\n      <ids-icon\n        class=\"drag-handle\"\n        icon=\"drag\"\n        size=\"large\"\n      ></ids-icon>\n      <ids-text>\n        All-content drags, but only .drag-handle is draggable\n      </ids-text>\n    </div>\n  </ids-draggable>\n</div>\n```\n\n## Settings and Attributes\n\n- `parent-containment` {boolean} Flags this draggable as having drag range being contained only within the first/closest inner parent of the content with a measurable width or height.\n- `is-draggable` {boolean} Whether or not the `ids-draggable` and content is being dragged.\n- `disabled` {boolean}\n- `axis?` {'x' | 'y'}   The axis that the draggable content will be moving along (e.g. X => horizontal, Y => vertical); By default, not defined and supports both axes.\n- `handle?` {string} A query selector representing an optional handle that can be used to drag the content of the draggable.\n- `min-transform-x` {number} The minimum offset/x-transform/translate the draggable can be translated/dragged on the DOM.\n- `max-transform-x` {number} The maximum offset/x-transform/translate the draggable can be placed from its position on the DOM.\n- `min-transform-y` {number} The minimum offset/y-transform/translate the draggable can be placed from it's position on the DOM.\n- `max-transform-y` {number} The maximum offset/y-transform/translate the draggable can be from it's position on the DOM.\n\n## Accessibility\n\n- Wherever possible, it would be worth adding some visual indicator that content is dragged (this can be done using the `is-dragging` attribute or listening on `dragstart` and `dragend` events).\n- if you have text that should be readable, where a minimum width or height is needed, or if it affects presentation, but sure to set reasonable `{min|max}-xform-{x|y}` attributes to restrict the amount of offset on a draggable.\n- It is good to keep in mind that draggable content may present issues for people with visual impairments, and so things such as scrollability and typical keyboard\nnavigation should all function as normal in the case where a user is browsing content that may have resize handles or other draggability aspects.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- The 3.X project had two drag components. This replaces both. The Arrange is new\n\n**4.x to 5.x**\n- Markup and API fully changed\n- Markup has changed to a custom element that wraps draggable content; `<ids-draggable>content</ids-draggable>`.\n- Bounding drag movement to a specific axis is done by passing the axis attribute as `x` or `y`.\n- The Draggable can be contained to the first measurable parent's rectangle bounds by adding the\nflag `parent-container`.\n- A handle within the draggable content can be set by using the attribute `handle` as a query selector e.g. `handle=\".custom-handle-class\"`.\n- Draggable events to listen for are now `dragstart`, `drag`, and `dragend`.\n- Can now be imported as a single JS file and used with encapsulated styles\n- `ids-draggable` replaces `drag`\n- `ids-swapabble` replaces `arrange`\n- Uses HTML 5 drag drop now\n"}},{"name":"ids-draggable","attributes":[{"name":"#relativeBounds","values":[]},{"name":"axis","values":[]},{"name":"parentContainment","values":[]},{"name":"disabled","values":[]},{"name":"handle","values":[]},{"name":"#updateHandleElem","values":[]},{"name":"minTransformX","values":[]},{"name":"maxTransformX","values":[]},{"name":"minTransformY","values":[]},{"name":"maxTransformY","values":[]},{"name":"#updateTransform","description":"update the transform with respect to containment\nand min/max transform bounds","values":[]},{"name":"onMouseMove","description":"called on mouse move; transforms element for\ntransition offset and updates cursor overlay\nelement as necessary","values":[]},{"name":"onMouseUp","values":[]},{"name":"isDragging","values":[]},{"name":"#handleElem","description":"Element that is currently draggable;\nif \"handle\" becomes it possibly becomes the selected element.\n\nOtherwise it defaults to the overall draggable container (this)","values":[]},{"name":"#parentRect","description":"First measurable parent's rectangle\nwhen a drag is initiated","values":[]},{"name":"#dragStartMousePoint","description":"The point where we start dragging on the mouse\nto delta from for current tracking.","values":[]},{"name":"#dragStartOffset","description":"The transform translation point applied at\nthe time of a dragstart in order to calculate\ndelta during drag","values":[]},{"name":"#dragStartRect","description":"The bounding rectangle of this component at the\ntime of a dragstart offset by translate (so\nits original position in the div on start of drag)","values":[]},{"name":"#xformBounds","description":"Rectangle bounds that transform is limited to if drag\nis bounded by parent","values":[]},{"name":"#cursorEl","description":"Element which provides cursor for mouse when\ndragging after mousedown event since we can\nbind to X/Y axes and there's no way to override\nthe behavior","values":[]},{"name":"relativeBounds","values":[]}],"description":{"kind":"markdown","value":"# Ids Draggable\n\n## Description\n\nA container which limits and tracks the dragging of an HTML Element along a specific axis or within the bounds of it's parent element.\n\n## Use Cases\n\nA draggable would be used in the case where you may have a pane splitter (e.g. in `ids-splitter`, internally), or a list that is meant to be dragged along a specific axis. It may also be used in many cases where we have a canvas or pane that should be resized (in one or two dimensions).\n\nIt does not currently support drag/drop targets in the current iteration, but in the future this component may be used for moving items.\n\n## Features (With Code Examples)\n\nA draggable component with no bounds to where it is moved.\n```html\n <ids-draggable>\n  <div class=\"ids-draggable-demo-box\">\n    <ids-text>Drag Me</ids-text>\n  </div>\n</ids-draggable>\n```\n\nA draggable component along the X axis (e.g. drags horizontally).\n```html\n<ids-draggable axis=\"x\">\n  <div class=\"ids-draggable-demo-box\">\n    <ids-text>Horizontally Draggable</ids-text>\n  </div>\n</ids-draggable>\n```\n\nA draggable component along the Y axis (e.g. drags vertically).\n```html\n<ids-draggable axis=\"y\">\n  <div class=\"ids-draggable-demo-box\">\n    <ids-text>Vertically Draggable</ids-text>\n  </div>\n</ids-draggable>\n```\n\nA draggable component which can be dragged either horizontally or vertically\nbut is contained by it's first non zero-width/height parent (can also work for non-`<div>`, but cannot be a controlled `ids-layout-grid-cell`).\n```html\n<div>\n <ids-draggable parent-containment>\n    <div class=\"ids-draggable-demo-box\">\n      <ids-text>Vertically Draggable</ids-text></div>\n  </ids-draggable>\n</div>\n```\n\nA draggable component which is draggable only by a specific handle on the tab (note: a draggable component currently has a limitation of one handle element, even if the class matches multiple handles).\n```html\n<div>\n <ids-draggable handle=\".drag-handle\">\n    <div class=\"ids-draggable-demo-box\">\n      <ids-icon\n        class=\"drag-handle\"\n        icon=\"drag\"\n        size=\"large\"\n      ></ids-icon>\n      <ids-text>\n        All-content drags, but only .drag-handle is draggable\n      </ids-text>\n    </div>\n  </ids-draggable>\n</div>\n```\n\n## Settings and Attributes\n\n- `parent-containment` {boolean} Flags this draggable as having drag range being contained only within the first/closest inner parent of the content with a measurable width or height.\n- `is-draggable` {boolean} Whether or not the `ids-draggable` and content is being dragged.\n- `disabled` {boolean}\n- `axis?` {'x' | 'y'}   The axis that the draggable content will be moving along (e.g. X => horizontal, Y => vertical); By default, not defined and supports both axes.\n- `handle?` {string} A query selector representing an optional handle that can be used to drag the content of the draggable.\n- `min-transform-x` {number} The minimum offset/x-transform/translate the draggable can be translated/dragged on the DOM.\n- `max-transform-x` {number} The maximum offset/x-transform/translate the draggable can be placed from its position on the DOM.\n- `min-transform-y` {number} The minimum offset/y-transform/translate the draggable can be placed from it's position on the DOM.\n- `max-transform-y` {number} The maximum offset/y-transform/translate the draggable can be from it's position on the DOM.\n\n## Accessibility\n\n- Wherever possible, it would be worth adding some visual indicator that content is dragged (this can be done using the `is-dragging` attribute or listening on `dragstart` and `dragend` events).\n- if you have text that should be readable, where a minimum width or height is needed, or if it affects presentation, but sure to set reasonable `{min|max}-xform-{x|y}` attributes to restrict the amount of offset on a draggable.\n- It is good to keep in mind that draggable content may present issues for people with visual impairments, and so things such as scrollability and typical keyboard\nnavigation should all function as normal in the case where a user is browsing content that may have resize handles or other draggability aspects.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- The 3.X project had two drag components. This replaces both. The Arrange is new\n\n**4.x to 5.x**\n- Markup and API fully changed\n- Markup has changed to a custom element that wraps draggable content; `<ids-draggable>content</ids-draggable>`.\n- Bounding drag movement to a specific axis is done by passing the axis attribute as `x` or `y`.\n- The Draggable can be contained to the first measurable parent's rectangle bounds by adding the\nflag `parent-container`.\n- A handle within the draggable content can be set by using the attribute `handle` as a query selector e.g. `handle=\".custom-handle-class\"`.\n- Draggable events to listen for are now `dragstart`, `drag`, and `dragend`.\n- Can now be imported as a single JS file and used with encapsulated styles\n- `ids-draggable` replaces `drag`\n- `ids-swapabble` replaces `arrange`\n- Uses HTML 5 drag drop now\n"}},{"name":"ids-drawer-attributes","description":{"kind":"markdown","value":"# Ids Drawer\n\nThe Ids Drawer component creates a fixed area on the edge of the browser viewport that can be used for roll-out navigation or actions, such as those present on [Application Menus](../ids-app-menu/README.md) or [Action Sheets](../ids-action-sheet/README.md).\n\n## Attributes and Properties\n\n- `edge` defines which edge of the viewport the Drawer will appear from.  Can be `start` (left) or `bottom`\n- `type` sets the display type of the Drawer.  It can be styled as an `app-menu` or `action-sheet`.\n- `visible` if true, the Drawer is rolled out from its specified edge\n\n## Features (With Code Examples)\n\nDrawers can be defined simply by their edge:\n\n```html\n<ids-drawer id=\"my-drawer\" edge=\"start\">\n    <ids-text>This is my Drawer content</ids-text>\n</ids-drawer>\n\n<!-- or -->\n\n<ids-drawer id=\"my-drawer\" edge=\"bottom\">\n    <ids-text>This is my Bottom Drawer content</ids-text>\n</ids-drawer>\n```\n\nThey can also take on a `type` for styling.  Drawers are foundational components that are intended to be built-upon for other purposes.  It's recommended that you extend the IdsDrawer and either add a built-in type, or define your own custom styles for the Drawer. if you intend on using your own custom styles, leave this attribute off:\n\n```html\n<ids-drawer id=\"my-drawer\" edge=\"start\" type=\"app-menu\">\n    <ids-text>This is my App-menu-styled Drawer content</ids-text>\n</ids-drawer>\n```\n\nDrawers can be displayed from their corresponding edge using the `visible` attribute:\n\n```html\n<ids-drawer id=\"my-drawer\" edge=\"start\" type=\"app-menu\" visible>\n    <ids-text>This is my Displayed, App-menu-styled Drawer content</ids-text>\n</ids-drawer>\n```\n\n...or by using Javascript properties and methods:\n\n```js\nconst drawer = document.querySelector('#my-drawer');\ndrawer.visible = true;\n\n// ...or\ndrawer.show();\n\n// later on, after use\ndrawer.hide();\n```\n\n## Converting from Previous Versions (Breaking Changes)\n\nIn the 4.x IDS Components there was no Drawer component.  This component represents part of the functionality provided by the 4.x Application Menu, and has been made more general to be shared.\n"}},{"name":"ids-drawer","attributes":[{"name":"edge","values":[]},{"name":"target","values":[]},{"name":"hasTriggerEvents","description":"Describes whether or not this drawer has trigger events","values":[]},{"name":"type","values":[]},{"name":"visible","values":[]},{"name":"vetoableEventTypes","values":[]}],"description":{"kind":"markdown","value":"# Ids Drawer\n\nThe Ids Drawer component creates a fixed area on the edge of the browser viewport that can be used for roll-out navigation or actions, such as those present on [Application Menus](../ids-app-menu/README.md) or [Action Sheets](../ids-action-sheet/README.md).\n\n## Attributes and Properties\n\n- `edge` defines which edge of the viewport the Drawer will appear from.  Can be `start` (left) or `bottom`\n- `type` sets the display type of the Drawer.  It can be styled as an `app-menu` or `action-sheet`.\n- `visible` if true, the Drawer is rolled out from its specified edge\n\n## Features (With Code Examples)\n\nDrawers can be defined simply by their edge:\n\n```html\n<ids-drawer id=\"my-drawer\" edge=\"start\">\n    <ids-text>This is my Drawer content</ids-text>\n</ids-drawer>\n\n<!-- or -->\n\n<ids-drawer id=\"my-drawer\" edge=\"bottom\">\n    <ids-text>This is my Bottom Drawer content</ids-text>\n</ids-drawer>\n```\n\nThey can also take on a `type` for styling.  Drawers are foundational components that are intended to be built-upon for other purposes.  It's recommended that you extend the IdsDrawer and either add a built-in type, or define your own custom styles for the Drawer. if you intend on using your own custom styles, leave this attribute off:\n\n```html\n<ids-drawer id=\"my-drawer\" edge=\"start\" type=\"app-menu\">\n    <ids-text>This is my App-menu-styled Drawer content</ids-text>\n</ids-drawer>\n```\n\nDrawers can be displayed from their corresponding edge using the `visible` attribute:\n\n```html\n<ids-drawer id=\"my-drawer\" edge=\"start\" type=\"app-menu\" visible>\n    <ids-text>This is my Displayed, App-menu-styled Drawer content</ids-text>\n</ids-drawer>\n```\n\n...or by using Javascript properties and methods:\n\n```js\nconst drawer = document.querySelector('#my-drawer');\ndrawer.visible = true;\n\n// ...or\ndrawer.show();\n\n// later on, after use\ndrawer.hide();\n```\n\n## Converting from Previous Versions (Breaking Changes)\n\nIn the 4.x IDS Components there was no Drawer component.  This component represents part of the functionality provided by the 4.x Application Menu, and has been made more general to be shared.\n"}},{"name":"ids-dropdown-attributes-mixin","attributes":[{"name":"allowBlank","description":"Gets allow-blank value","values":[]},{"name":"clearable","description":"When set the value can be cleared with Backspace/Delete","values":[]},{"name":"clearableText","description":"When set the blank option will have a text","values":[]},{"name":"size","description":"Set the dropdown size","values":[]}],"description":{"kind":"markdown","value":"# Ids Dropdown Component\n\n## Description\n\nThe Ids Dropdown allows users to select one of many options from a list, similar to using an HTML Select Element, with additional selection and filtering features. The dropdown displays one or more selectable values in a menu that is collapsed by default. A user can select an actionable value.\n\n## Use Cases\n\n- Use when you need to let the user select something from a list of values\n- Use when you want users to contribute data to your website and let them organize their content themselves.\n- Best used when users do not require a view of all possible values at all times.\n\n## Terminology\n\n- **Dropdown** The UX element that lives in the page and is actionable, activating the list\n- **Dropdown List** The UX element that contains and places the list within the page\n- **List Box**: The UX element that wraps the items in the dropdown\n- **List Box Option**: UX elements representing dropdown options, contained by the List Box\n\n## Features (With Code Examples)\n\nDropdown elements should be defined with `id` and `value` attributes. The value should match one of the `value` attributes contained by one of its `ids-list-box-option` elements.  When your application renders, the referenced value will cause the corresponding `ids-list-box-option` to appear selected:\n\n```html\n<ids-dropdown id=\"dropdown-2\" label=\"Readonly Dropdown\" value=\"opt3\">\n  <ids-list-box>\n    <ids-list-box-option value=\"opt1\" id=\"opt1\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2\">Option Two</ids-list-box-option>\n    <ids-list-box-option value=\"opt3\" id=\"opt3\">Option Three</ids-list-box-option>\n    <ids-list-box-option value=\"opt4\" id=\"opt4\">Option Four</ids-list-box-option>\n    <ids-list-box-option value=\"opt5\" id=\"opt5\">Option Five</ids-list-box-option>\n    <ids-list-box-option value=\"opt6\" id=\"opt6\">Option Six</ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown>\n```\n\nIt's also possible to show icons in the dropdown list. Add an `ids-icon` and `span` to each list box `ids-list-box-option`. For symmetry, icons should be on all options.\n\n```html\n<ids-dropdown id=\"dropdown-5\" label=\"Dropdown with Icons\" value=\"opt2\">\n  <ids-list-box>\n    <ids-list-box-option value=\"opt1\" id=\"opt1\">\n      <ids-icon icon=\"user-profile\"></ids-icon>\n      <span>Option One</span>\n    </ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2\">\n      <ids-icon icon=\"project\"></ids-icon>\n      <span>Option Two</span>\n    </ids-list-box-option>\n    <ids-list-box-option value=\"opt3\" id=\"opt3\">\n      <ids-icon icon=\"purchasing\"></ids-icon>\n      <span>Option Three</span>\n    </ids-list-box-option>\n    <ids-list-box-option value=\"opt4\" id=\"opt4\">\n      <ids-icon icon=\"quality\"></ids-icon>\n      <span>Option Four</span></ids-list-box-option>\n    <ids-list-box-option value=\"opt5\" id=\"opt5\">\n      <ids-icon icon=\"rocket\"></ids-icon>\n      <span>Option Five</span>\n    </ids-list-box-option>\n    <ids-list-box-option value=\"opt6\" id=\"opt6\">\n      <ids-icon icon=\"roles\"></ids-icon>\n      <span>Option Six</span>\n    </ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown>\n```\n\nIts also possible to show tooltips on the dropdown container or dropdown options. If you set it on the `ids-dropdown` you will see the tooltip on hover of the closed dropdown. If you set it on the options, when these are selected it will change the container tooltip to the selected one.\n\n```html\n<ids-dropdown id=\"dropdown-6\" label=\"Dropdown with Tooltips\" tooltip=\"Additional Info\" value=\"opt2\">\n  <ids-list-box>\n    <ids-list-box-option value=\"opt1\" id=\"opt1\" tooltip=\"Additional Info on Option One\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2\" tooltip=\"Additional Info on Option Two\">Option Two</ids-list-box-option>\n    <ids-list-box-option value=\"opt3\" id=\"opt3\" tooltip=\"Additional Info on Option Three\">Option Three</ids-list-box-option>\n    <ids-list-box-option value=\"opt4\" id=\"opt4\" tooltip=\"Additional Info on Option Four\">Option Four</ids-list-box-option>\n    <ids-list-box-option value=\"opt5\" id=\"opt5\" tooltip=\"Additional Info on Option Five\">Option Five</ids-list-box-option>\n    <ids-list-box-option value=\"opt6\" id=\"opt6\" tooltip=\"Additional Info on Option Six\">Option Six</ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown>\n```\n\nSometimes you might want to load the dropdown with Ajax. To do this setup the initial html. in order for the selected element to show. This must be pre-populated.\n\n```html\n<ids-dropdown id=\"dropdown-7\" label=\"Dropdown Using Ajax\" value=\"ak\">\n  <ids-list-box>\n    <ids-list-box-option value=\"ak\" id=\"ak\">Alaska</ids-list-box-option>\n </ids-list-box>\n</ids-dropdown>\n```\n\nFor the JS part set the `beforeShow` callback to an async function that returns a promise.\n\n```js\n// Use the asynchronous `beforeshow` callback to load contents\nconst dropdownAsync = document.querySelector('#dropdown-7');\n\ndropdownAsync.beforeShow = async function beforeShow() {\n  const url = '/data/states.json';\n  const res = await fetch(url);\n  const data = await res.json();\n  return data;\n};\n```\n\nThe promise should resolve and return data with id, value and label info.\n\n```js\n{\n  \"id\": \"AS\",\n  \"value\": \"AS\",\n  \"label\": \"American Samoa\"\n}\n```\n\nFor groups you should add `group-label` attribute to `ids-list-box-option` to indicate group start, all group items should be below.\n\n```html\n<ids-dropdown id=\"dropdown-groups\" label=\"Dropdown With Groups\" value=\"opt3\">\n  <ids-list-box>\n    <ids-list-box-option group-label>Group 1</ids-list-box-option>\n    <ids-list-box-option value=\"opt1group1\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2group1\">Option Two</ids-list-box-option>\n    <ids-list-box-option group-label>Group 2</ids-list-box-option>\n    <ids-list-box-option value=\"opt1group2\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2group2\">Option Two</ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown>\n```\n\nIn some situations, it may be preferrable to separate the IdsDropdownList element from its in-page parent element.  This can be done using the `list` attribute, and simply referencing the dropdown list by its `id` attribute.  This might be necessary for reasons such as breaking out of CSS stacking context.  Note that in this situation, it's necessary to also manually define the event handling and [Popup Interactions](../../mixins/ids-popup-interactions-mixin/ids-popup-interactions-mixin.ts) that cause the IdsDropdownList to activate, making this ideal for custom IdsDropdown configurations:\n\n```html\n<ids-dropdown id=\"dropdown-1\" list=\"separate-list\" label=\"Dropdown (list is adjacent)\" value=\"blank\" dirty-tracker=\"true\" allow-blank=\"true\"></ids-dropdown>\n<ids-dropdown-list id=\"separate-list\">\n  <ids-list-box>\n    <ids-list-box-option value=\"blank\" id=\"blank\"><span></span></ids-list-box-option>\n    <ids-list-box-option value=\"opt1\" id=\"opt1-d8\"><span>Option One</span></ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2-d8\"><span>Option Two</span></ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown-list>\n```\n\n## Settings\n\n- `allowBlank` {boolean} Sets whether option list should include 'blank' option\n- `colorVariant` {string} set the current color variant.\n- `compact` {boolean} sets the component to be compact mode.\n- `dirtyTracker` {boolean} Sets the dirty tracking feature on to indicate a changed\n- `disabled` {boolean} Sets dropdown to disabled\n- `fieldHeight` {string} defines the field height. See [Ids Field Height Mixin](../../mixins/ids-field-height-mixin/README.md) for more information.\n- `label` {string} Sets the label text\n- `language` {string} Sets the language for RTL and inner labels\n- `labelRequired` {boolean} Sets the validation required indicator on label text, it's default to `true`\n- `labelState` {string} indicates that a label is hidden (note that for accessibility reasons, `label` should still be specified). See [Ids Label State Mixin](../../mixins/ids-label-state-mixin/README.md) for more information.\n- `list` {string} ID selector used to reference/connect to an external IdsDropdownList component (used in some scenarios like IdsDataGrid filters)\n- `maxlength` {number | string} Maximum characters allowed in textarea\n- `noMargins` {boolean} sets whether or not no-margins around the component.\n- `placeholder` {string} Sets the placeholder text\n- `size` {'sm ' | 'md' | 'lg' | 'full' | string} Sets the size (width)\n- `readonly` {boolean} Sets to readonly state\n- `validate` {'required' | string} Sets the validation routine to use\n- `validationEvents` {'blur' | string} Sets the validation events to use\n- `value` {string} Sets option to the matching option by the `value` attribute\n- `id` {string} Sets the `id` attribute\n- `tooltip` {string} Sets the tooltip on the dropdown container\n- `mode` {'light' | 'dark' | 'contrast' | string} Set the theme mode\n- `version` {'new' | 'classic' | string} Set the theme version\n- `selectedIndex` {number} Sets the the selected option by index\n- `typeahead` {true | false} - Enable/disable typeahead functionality\n- `clearable` {true | false} - Whether or not the value can be cleared with Backspace/Delete\n- `clearable-text` {string} - Sets the blank option custom text. The text will not be added to the input when the option is selected\n- `show-loading-indicator` {boolean} - Whether or not to show loading indicator (replaces trigger button). Defaults to false.\n\n## Events\n\n- `change` Fires when an option is selected / changed\n- `focus` Fires at the time the dropdown is focused\n- Event listeners for input (trigger field) `blur`, `change`, `focus`, `select`, `keydown`, `keypress`, `keyup`, `click`, `dbclick`, `beforetriggerclicked`, `triggerclicked` events can be added to `input` component property:\n```js\nconst dropdown = document.querySelector('ids-dropdown');\n\ndropdown.input.addEventListener('change');\n```\n- Event listeners for popup `show`, `hide` events can be added to `popup` property:\n```js\nconst dropdown = document.querySelector('ids-dropdown');\n\ndropdown.popup.addEventListener('show');\ndropdown.popup.addEventListener('hide');\n```\n\n## Methods\n\n- `beforeShow` {Promise<string>} An async function that fires as the dropdown is opening allowing you to set contents\n- `toggle` {void} Toggles the dropdown list open/closed state\n- `open` {void} Opens the dropdown list\n- `close` {void} Closes the dropdown list\n- `options` {Array<HTMLElement>} Returns the currently available options\n- `selectedOption` {HTMLElement} Returns the selected option DOM element\n- `selectedIndex` {number} Sets the the selected option by index\n\n## Themeable Parts\n\n- `trigger-field` - allows you to further style  the trigger field container\n- `input` - allows you to further style  the input in the trigger field container\n- `trigger-button` - allows you to further style the trigger field button\n- `icon` - allows you to further style the trigger field icon\n- `popup` - allows you to further style the dropdown popup\n\n## States and Variations\n\n- Valid/Invalid\n- Required\n- Readonly\n- Open/Closed\n- Disabled\n- Dirty\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift + Tab</kbd>: Moves focus into and out of the dropdown input. If the list is open, this will close the list, selecting the current item, and moving to the next focusable element\n- <kbd>Alt + Down Arrow / Down Arrow</kbd>: Opens the dropdown list and moves focus to the selected option. If nothing is selected, then focus moves to the first option in the list. If the combobox is not editable nothing will happen.\n- <kbd>Enter</kbd>: Selects the currently highlighted item in the list, updates the input field, highlights the selected item in the dropdown list, closes the dropdown list, and returns focus to the input field.\n- <kbd>Escape</kbd>: Closes the dropdown list, returns focus to the edit field, and does not change the current selection.\n- <kbd>AnyKey</kbd>: Typing a letter opens the list and filters to the items that start with that letter\n\n## Responsive Guidelines\n\n- The dropdown `<input>` should size to the parent container and the `<label>` should remain on the top.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Dropdown have all new markup and classes.\n\n**4.x to 5.x**\n- The dropdown component has been changed to a web component and renamed to ids-editor.\n- Markup has changed to a custom element `<ids-dropdown></ids-dropdown>`\n- If using events, events are now plain JS events (change event when changed)\n- API is significantly different\n- No longer uses a select element\n\n## Designs\n\n[Design Specs 4.5](https://www.figma.com/file/yaJ8mJrqRRej8oTsd6iT8P/IDS-(SoHo)-Component-Library-v4.5?node-id=760%3A771)\n[Design Specs 4.6](https://www.figma.com/file/ok0LLOT9PP1J0kBkPMaZ5c/IDS_Component_File_v4.6-(Draft))\n\n## Accessibility Guidelines\n\nThe dropdown list has been coded to act similar to the [aria readonly combobox](http://whatsock.com/Templates/Comboboxes/Native%20Inputs,%20Editable%20and%20Readonly/index.htm). With some variations due to having to deal with shadowDom.\n\n## Regional Considerations\n\nLabels should be localized in the current language. The dropdown icons will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-dropdown-common","description":{"kind":"markdown","value":"# Ids Dropdown Component\n\n## Description\n\nThe Ids Dropdown allows users to select one of many options from a list, similar to using an HTML Select Element, with additional selection and filtering features. The dropdown displays one or more selectable values in a menu that is collapsed by default. A user can select an actionable value.\n\n## Use Cases\n\n- Use when you need to let the user select something from a list of values\n- Use when you want users to contribute data to your website and let them organize their content themselves.\n- Best used when users do not require a view of all possible values at all times.\n\n## Terminology\n\n- **Dropdown** The UX element that lives in the page and is actionable, activating the list\n- **Dropdown List** The UX element that contains and places the list within the page\n- **List Box**: The UX element that wraps the items in the dropdown\n- **List Box Option**: UX elements representing dropdown options, contained by the List Box\n\n## Features (With Code Examples)\n\nDropdown elements should be defined with `id` and `value` attributes. The value should match one of the `value` attributes contained by one of its `ids-list-box-option` elements.  When your application renders, the referenced value will cause the corresponding `ids-list-box-option` to appear selected:\n\n```html\n<ids-dropdown id=\"dropdown-2\" label=\"Readonly Dropdown\" value=\"opt3\">\n  <ids-list-box>\n    <ids-list-box-option value=\"opt1\" id=\"opt1\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2\">Option Two</ids-list-box-option>\n    <ids-list-box-option value=\"opt3\" id=\"opt3\">Option Three</ids-list-box-option>\n    <ids-list-box-option value=\"opt4\" id=\"opt4\">Option Four</ids-list-box-option>\n    <ids-list-box-option value=\"opt5\" id=\"opt5\">Option Five</ids-list-box-option>\n    <ids-list-box-option value=\"opt6\" id=\"opt6\">Option Six</ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown>\n```\n\nIt's also possible to show icons in the dropdown list. Add an `ids-icon` and `span` to each list box `ids-list-box-option`. For symmetry, icons should be on all options.\n\n```html\n<ids-dropdown id=\"dropdown-5\" label=\"Dropdown with Icons\" value=\"opt2\">\n  <ids-list-box>\n    <ids-list-box-option value=\"opt1\" id=\"opt1\">\n      <ids-icon icon=\"user-profile\"></ids-icon>\n      <span>Option One</span>\n    </ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2\">\n      <ids-icon icon=\"project\"></ids-icon>\n      <span>Option Two</span>\n    </ids-list-box-option>\n    <ids-list-box-option value=\"opt3\" id=\"opt3\">\n      <ids-icon icon=\"purchasing\"></ids-icon>\n      <span>Option Three</span>\n    </ids-list-box-option>\n    <ids-list-box-option value=\"opt4\" id=\"opt4\">\n      <ids-icon icon=\"quality\"></ids-icon>\n      <span>Option Four</span></ids-list-box-option>\n    <ids-list-box-option value=\"opt5\" id=\"opt5\">\n      <ids-icon icon=\"rocket\"></ids-icon>\n      <span>Option Five</span>\n    </ids-list-box-option>\n    <ids-list-box-option value=\"opt6\" id=\"opt6\">\n      <ids-icon icon=\"roles\"></ids-icon>\n      <span>Option Six</span>\n    </ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown>\n```\n\nIts also possible to show tooltips on the dropdown container or dropdown options. If you set it on the `ids-dropdown` you will see the tooltip on hover of the closed dropdown. If you set it on the options, when these are selected it will change the container tooltip to the selected one.\n\n```html\n<ids-dropdown id=\"dropdown-6\" label=\"Dropdown with Tooltips\" tooltip=\"Additional Info\" value=\"opt2\">\n  <ids-list-box>\n    <ids-list-box-option value=\"opt1\" id=\"opt1\" tooltip=\"Additional Info on Option One\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2\" tooltip=\"Additional Info on Option Two\">Option Two</ids-list-box-option>\n    <ids-list-box-option value=\"opt3\" id=\"opt3\" tooltip=\"Additional Info on Option Three\">Option Three</ids-list-box-option>\n    <ids-list-box-option value=\"opt4\" id=\"opt4\" tooltip=\"Additional Info on Option Four\">Option Four</ids-list-box-option>\n    <ids-list-box-option value=\"opt5\" id=\"opt5\" tooltip=\"Additional Info on Option Five\">Option Five</ids-list-box-option>\n    <ids-list-box-option value=\"opt6\" id=\"opt6\" tooltip=\"Additional Info on Option Six\">Option Six</ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown>\n```\n\nSometimes you might want to load the dropdown with Ajax. To do this setup the initial html. in order for the selected element to show. This must be pre-populated.\n\n```html\n<ids-dropdown id=\"dropdown-7\" label=\"Dropdown Using Ajax\" value=\"ak\">\n  <ids-list-box>\n    <ids-list-box-option value=\"ak\" id=\"ak\">Alaska</ids-list-box-option>\n </ids-list-box>\n</ids-dropdown>\n```\n\nFor the JS part set the `beforeShow` callback to an async function that returns a promise.\n\n```js\n// Use the asynchronous `beforeshow` callback to load contents\nconst dropdownAsync = document.querySelector('#dropdown-7');\n\ndropdownAsync.beforeShow = async function beforeShow() {\n  const url = '/data/states.json';\n  const res = await fetch(url);\n  const data = await res.json();\n  return data;\n};\n```\n\nThe promise should resolve and return data with id, value and label info.\n\n```js\n{\n  \"id\": \"AS\",\n  \"value\": \"AS\",\n  \"label\": \"American Samoa\"\n}\n```\n\nFor groups you should add `group-label` attribute to `ids-list-box-option` to indicate group start, all group items should be below.\n\n```html\n<ids-dropdown id=\"dropdown-groups\" label=\"Dropdown With Groups\" value=\"opt3\">\n  <ids-list-box>\n    <ids-list-box-option group-label>Group 1</ids-list-box-option>\n    <ids-list-box-option value=\"opt1group1\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2group1\">Option Two</ids-list-box-option>\n    <ids-list-box-option group-label>Group 2</ids-list-box-option>\n    <ids-list-box-option value=\"opt1group2\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2group2\">Option Two</ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown>\n```\n\nIn some situations, it may be preferrable to separate the IdsDropdownList element from its in-page parent element.  This can be done using the `list` attribute, and simply referencing the dropdown list by its `id` attribute.  This might be necessary for reasons such as breaking out of CSS stacking context.  Note that in this situation, it's necessary to also manually define the event handling and [Popup Interactions](../../mixins/ids-popup-interactions-mixin/ids-popup-interactions-mixin.ts) that cause the IdsDropdownList to activate, making this ideal for custom IdsDropdown configurations:\n\n```html\n<ids-dropdown id=\"dropdown-1\" list=\"separate-list\" label=\"Dropdown (list is adjacent)\" value=\"blank\" dirty-tracker=\"true\" allow-blank=\"true\"></ids-dropdown>\n<ids-dropdown-list id=\"separate-list\">\n  <ids-list-box>\n    <ids-list-box-option value=\"blank\" id=\"blank\"><span></span></ids-list-box-option>\n    <ids-list-box-option value=\"opt1\" id=\"opt1-d8\"><span>Option One</span></ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2-d8\"><span>Option Two</span></ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown-list>\n```\n\n## Settings\n\n- `allowBlank` {boolean} Sets whether option list should include 'blank' option\n- `colorVariant` {string} set the current color variant.\n- `compact` {boolean} sets the component to be compact mode.\n- `dirtyTracker` {boolean} Sets the dirty tracking feature on to indicate a changed\n- `disabled` {boolean} Sets dropdown to disabled\n- `fieldHeight` {string} defines the field height. See [Ids Field Height Mixin](../../mixins/ids-field-height-mixin/README.md) for more information.\n- `label` {string} Sets the label text\n- `language` {string} Sets the language for RTL and inner labels\n- `labelRequired` {boolean} Sets the validation required indicator on label text, it's default to `true`\n- `labelState` {string} indicates that a label is hidden (note that for accessibility reasons, `label` should still be specified). See [Ids Label State Mixin](../../mixins/ids-label-state-mixin/README.md) for more information.\n- `list` {string} ID selector used to reference/connect to an external IdsDropdownList component (used in some scenarios like IdsDataGrid filters)\n- `maxlength` {number | string} Maximum characters allowed in textarea\n- `noMargins` {boolean} sets whether or not no-margins around the component.\n- `placeholder` {string} Sets the placeholder text\n- `size` {'sm ' | 'md' | 'lg' | 'full' | string} Sets the size (width)\n- `readonly` {boolean} Sets to readonly state\n- `validate` {'required' | string} Sets the validation routine to use\n- `validationEvents` {'blur' | string} Sets the validation events to use\n- `value` {string} Sets option to the matching option by the `value` attribute\n- `id` {string} Sets the `id` attribute\n- `tooltip` {string} Sets the tooltip on the dropdown container\n- `mode` {'light' | 'dark' | 'contrast' | string} Set the theme mode\n- `version` {'new' | 'classic' | string} Set the theme version\n- `selectedIndex` {number} Sets the the selected option by index\n- `typeahead` {true | false} - Enable/disable typeahead functionality\n- `clearable` {true | false} - Whether or not the value can be cleared with Backspace/Delete\n- `clearable-text` {string} - Sets the blank option custom text. The text will not be added to the input when the option is selected\n- `show-loading-indicator` {boolean} - Whether or not to show loading indicator (replaces trigger button). Defaults to false.\n\n## Events\n\n- `change` Fires when an option is selected / changed\n- `focus` Fires at the time the dropdown is focused\n- Event listeners for input (trigger field) `blur`, `change`, `focus`, `select`, `keydown`, `keypress`, `keyup`, `click`, `dbclick`, `beforetriggerclicked`, `triggerclicked` events can be added to `input` component property:\n```js\nconst dropdown = document.querySelector('ids-dropdown');\n\ndropdown.input.addEventListener('change');\n```\n- Event listeners for popup `show`, `hide` events can be added to `popup` property:\n```js\nconst dropdown = document.querySelector('ids-dropdown');\n\ndropdown.popup.addEventListener('show');\ndropdown.popup.addEventListener('hide');\n```\n\n## Methods\n\n- `beforeShow` {Promise<string>} An async function that fires as the dropdown is opening allowing you to set contents\n- `toggle` {void} Toggles the dropdown list open/closed state\n- `open` {void} Opens the dropdown list\n- `close` {void} Closes the dropdown list\n- `options` {Array<HTMLElement>} Returns the currently available options\n- `selectedOption` {HTMLElement} Returns the selected option DOM element\n- `selectedIndex` {number} Sets the the selected option by index\n\n## Themeable Parts\n\n- `trigger-field` - allows you to further style  the trigger field container\n- `input` - allows you to further style  the input in the trigger field container\n- `trigger-button` - allows you to further style the trigger field button\n- `icon` - allows you to further style the trigger field icon\n- `popup` - allows you to further style the dropdown popup\n\n## States and Variations\n\n- Valid/Invalid\n- Required\n- Readonly\n- Open/Closed\n- Disabled\n- Dirty\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift + Tab</kbd>: Moves focus into and out of the dropdown input. If the list is open, this will close the list, selecting the current item, and moving to the next focusable element\n- <kbd>Alt + Down Arrow / Down Arrow</kbd>: Opens the dropdown list and moves focus to the selected option. If nothing is selected, then focus moves to the first option in the list. If the combobox is not editable nothing will happen.\n- <kbd>Enter</kbd>: Selects the currently highlighted item in the list, updates the input field, highlights the selected item in the dropdown list, closes the dropdown list, and returns focus to the input field.\n- <kbd>Escape</kbd>: Closes the dropdown list, returns focus to the edit field, and does not change the current selection.\n- <kbd>AnyKey</kbd>: Typing a letter opens the list and filters to the items that start with that letter\n\n## Responsive Guidelines\n\n- The dropdown `<input>` should size to the parent container and the `<label>` should remain on the top.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Dropdown have all new markup and classes.\n\n**4.x to 5.x**\n- The dropdown component has been changed to a web component and renamed to ids-editor.\n- Markup has changed to a custom element `<ids-dropdown></ids-dropdown>`\n- If using events, events are now plain JS events (change event when changed)\n- API is significantly different\n- No longer uses a select element\n\n## Designs\n\n[Design Specs 4.5](https://www.figma.com/file/yaJ8mJrqRRej8oTsd6iT8P/IDS-(SoHo)-Component-Library-v4.5?node-id=760%3A771)\n[Design Specs 4.6](https://www.figma.com/file/ok0LLOT9PP1J0kBkPMaZ5c/IDS_Component_File_v4.6-(Draft))\n\n## Accessibility Guidelines\n\nThe dropdown list has been coded to act similar to the [aria readonly combobox](http://whatsock.com/Templates/Comboboxes/Native%20Inputs,%20Editable%20and%20Readonly/index.htm). With some variations due to having to deal with shadowDom.\n\n## Regional Considerations\n\nLabels should be localized in the current language. The dropdown icons will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-dropdown-list","attributes":[{"name":"isMultiSelect","values":[]},{"name":"listBox","values":[]},{"name":"options","description":"Returns the currently available options","values":[]},{"name":"selectedOption","description":"Returns the selected Listbox option based on the Dropdown's value.","values":[]},{"name":"selected","description":"Returns the currently-selected Listbox option\n(may be different from the Dropdown's value because of user input)","values":[]},{"name":"typeahead","description":"Get the typeahead attribute","values":[]},{"name":"value","description":"Set the value of the dropdown using the value/id attribute if present","values":[]}],"description":{"kind":"markdown","value":"# Ids Dropdown Component\n\n## Description\n\nThe Ids Dropdown allows users to select one of many options from a list, similar to using an HTML Select Element, with additional selection and filtering features. The dropdown displays one or more selectable values in a menu that is collapsed by default. A user can select an actionable value.\n\n## Use Cases\n\n- Use when you need to let the user select something from a list of values\n- Use when you want users to contribute data to your website and let them organize their content themselves.\n- Best used when users do not require a view of all possible values at all times.\n\n## Terminology\n\n- **Dropdown** The UX element that lives in the page and is actionable, activating the list\n- **Dropdown List** The UX element that contains and places the list within the page\n- **List Box**: The UX element that wraps the items in the dropdown\n- **List Box Option**: UX elements representing dropdown options, contained by the List Box\n\n## Features (With Code Examples)\n\nDropdown elements should be defined with `id` and `value` attributes. The value should match one of the `value` attributes contained by one of its `ids-list-box-option` elements.  When your application renders, the referenced value will cause the corresponding `ids-list-box-option` to appear selected:\n\n```html\n<ids-dropdown id=\"dropdown-2\" label=\"Readonly Dropdown\" value=\"opt3\">\n  <ids-list-box>\n    <ids-list-box-option value=\"opt1\" id=\"opt1\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2\">Option Two</ids-list-box-option>\n    <ids-list-box-option value=\"opt3\" id=\"opt3\">Option Three</ids-list-box-option>\n    <ids-list-box-option value=\"opt4\" id=\"opt4\">Option Four</ids-list-box-option>\n    <ids-list-box-option value=\"opt5\" id=\"opt5\">Option Five</ids-list-box-option>\n    <ids-list-box-option value=\"opt6\" id=\"opt6\">Option Six</ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown>\n```\n\nIt's also possible to show icons in the dropdown list. Add an `ids-icon` and `span` to each list box `ids-list-box-option`. For symmetry, icons should be on all options.\n\n```html\n<ids-dropdown id=\"dropdown-5\" label=\"Dropdown with Icons\" value=\"opt2\">\n  <ids-list-box>\n    <ids-list-box-option value=\"opt1\" id=\"opt1\">\n      <ids-icon icon=\"user-profile\"></ids-icon>\n      <span>Option One</span>\n    </ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2\">\n      <ids-icon icon=\"project\"></ids-icon>\n      <span>Option Two</span>\n    </ids-list-box-option>\n    <ids-list-box-option value=\"opt3\" id=\"opt3\">\n      <ids-icon icon=\"purchasing\"></ids-icon>\n      <span>Option Three</span>\n    </ids-list-box-option>\n    <ids-list-box-option value=\"opt4\" id=\"opt4\">\n      <ids-icon icon=\"quality\"></ids-icon>\n      <span>Option Four</span></ids-list-box-option>\n    <ids-list-box-option value=\"opt5\" id=\"opt5\">\n      <ids-icon icon=\"rocket\"></ids-icon>\n      <span>Option Five</span>\n    </ids-list-box-option>\n    <ids-list-box-option value=\"opt6\" id=\"opt6\">\n      <ids-icon icon=\"roles\"></ids-icon>\n      <span>Option Six</span>\n    </ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown>\n```\n\nIts also possible to show tooltips on the dropdown container or dropdown options. If you set it on the `ids-dropdown` you will see the tooltip on hover of the closed dropdown. If you set it on the options, when these are selected it will change the container tooltip to the selected one.\n\n```html\n<ids-dropdown id=\"dropdown-6\" label=\"Dropdown with Tooltips\" tooltip=\"Additional Info\" value=\"opt2\">\n  <ids-list-box>\n    <ids-list-box-option value=\"opt1\" id=\"opt1\" tooltip=\"Additional Info on Option One\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2\" tooltip=\"Additional Info on Option Two\">Option Two</ids-list-box-option>\n    <ids-list-box-option value=\"opt3\" id=\"opt3\" tooltip=\"Additional Info on Option Three\">Option Three</ids-list-box-option>\n    <ids-list-box-option value=\"opt4\" id=\"opt4\" tooltip=\"Additional Info on Option Four\">Option Four</ids-list-box-option>\n    <ids-list-box-option value=\"opt5\" id=\"opt5\" tooltip=\"Additional Info on Option Five\">Option Five</ids-list-box-option>\n    <ids-list-box-option value=\"opt6\" id=\"opt6\" tooltip=\"Additional Info on Option Six\">Option Six</ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown>\n```\n\nSometimes you might want to load the dropdown with Ajax. To do this setup the initial html. in order for the selected element to show. This must be pre-populated.\n\n```html\n<ids-dropdown id=\"dropdown-7\" label=\"Dropdown Using Ajax\" value=\"ak\">\n  <ids-list-box>\n    <ids-list-box-option value=\"ak\" id=\"ak\">Alaska</ids-list-box-option>\n </ids-list-box>\n</ids-dropdown>\n```\n\nFor the JS part set the `beforeShow` callback to an async function that returns a promise.\n\n```js\n// Use the asynchronous `beforeshow` callback to load contents\nconst dropdownAsync = document.querySelector('#dropdown-7');\n\ndropdownAsync.beforeShow = async function beforeShow() {\n  const url = '/data/states.json';\n  const res = await fetch(url);\n  const data = await res.json();\n  return data;\n};\n```\n\nThe promise should resolve and return data with id, value and label info.\n\n```js\n{\n  \"id\": \"AS\",\n  \"value\": \"AS\",\n  \"label\": \"American Samoa\"\n}\n```\n\nFor groups you should add `group-label` attribute to `ids-list-box-option` to indicate group start, all group items should be below.\n\n```html\n<ids-dropdown id=\"dropdown-groups\" label=\"Dropdown With Groups\" value=\"opt3\">\n  <ids-list-box>\n    <ids-list-box-option group-label>Group 1</ids-list-box-option>\n    <ids-list-box-option value=\"opt1group1\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2group1\">Option Two</ids-list-box-option>\n    <ids-list-box-option group-label>Group 2</ids-list-box-option>\n    <ids-list-box-option value=\"opt1group2\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2group2\">Option Two</ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown>\n```\n\nIn some situations, it may be preferrable to separate the IdsDropdownList element from its in-page parent element.  This can be done using the `list` attribute, and simply referencing the dropdown list by its `id` attribute.  This might be necessary for reasons such as breaking out of CSS stacking context.  Note that in this situation, it's necessary to also manually define the event handling and [Popup Interactions](../../mixins/ids-popup-interactions-mixin/ids-popup-interactions-mixin.ts) that cause the IdsDropdownList to activate, making this ideal for custom IdsDropdown configurations:\n\n```html\n<ids-dropdown id=\"dropdown-1\" list=\"separate-list\" label=\"Dropdown (list is adjacent)\" value=\"blank\" dirty-tracker=\"true\" allow-blank=\"true\"></ids-dropdown>\n<ids-dropdown-list id=\"separate-list\">\n  <ids-list-box>\n    <ids-list-box-option value=\"blank\" id=\"blank\"><span></span></ids-list-box-option>\n    <ids-list-box-option value=\"opt1\" id=\"opt1-d8\"><span>Option One</span></ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2-d8\"><span>Option Two</span></ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown-list>\n```\n\n## Settings\n\n- `allowBlank` {boolean} Sets whether option list should include 'blank' option\n- `colorVariant` {string} set the current color variant.\n- `compact` {boolean} sets the component to be compact mode.\n- `dirtyTracker` {boolean} Sets the dirty tracking feature on to indicate a changed\n- `disabled` {boolean} Sets dropdown to disabled\n- `fieldHeight` {string} defines the field height. See [Ids Field Height Mixin](../../mixins/ids-field-height-mixin/README.md) for more information.\n- `label` {string} Sets the label text\n- `language` {string} Sets the language for RTL and inner labels\n- `labelRequired` {boolean} Sets the validation required indicator on label text, it's default to `true`\n- `labelState` {string} indicates that a label is hidden (note that for accessibility reasons, `label` should still be specified). See [Ids Label State Mixin](../../mixins/ids-label-state-mixin/README.md) for more information.\n- `list` {string} ID selector used to reference/connect to an external IdsDropdownList component (used in some scenarios like IdsDataGrid filters)\n- `maxlength` {number | string} Maximum characters allowed in textarea\n- `noMargins` {boolean} sets whether or not no-margins around the component.\n- `placeholder` {string} Sets the placeholder text\n- `size` {'sm ' | 'md' | 'lg' | 'full' | string} Sets the size (width)\n- `readonly` {boolean} Sets to readonly state\n- `validate` {'required' | string} Sets the validation routine to use\n- `validationEvents` {'blur' | string} Sets the validation events to use\n- `value` {string} Sets option to the matching option by the `value` attribute\n- `id` {string} Sets the `id` attribute\n- `tooltip` {string} Sets the tooltip on the dropdown container\n- `mode` {'light' | 'dark' | 'contrast' | string} Set the theme mode\n- `version` {'new' | 'classic' | string} Set the theme version\n- `selectedIndex` {number} Sets the the selected option by index\n- `typeahead` {true | false} - Enable/disable typeahead functionality\n- `clearable` {true | false} - Whether or not the value can be cleared with Backspace/Delete\n- `clearable-text` {string} - Sets the blank option custom text. The text will not be added to the input when the option is selected\n- `show-loading-indicator` {boolean} - Whether or not to show loading indicator (replaces trigger button). Defaults to false.\n\n## Events\n\n- `change` Fires when an option is selected / changed\n- `focus` Fires at the time the dropdown is focused\n- Event listeners for input (trigger field) `blur`, `change`, `focus`, `select`, `keydown`, `keypress`, `keyup`, `click`, `dbclick`, `beforetriggerclicked`, `triggerclicked` events can be added to `input` component property:\n```js\nconst dropdown = document.querySelector('ids-dropdown');\n\ndropdown.input.addEventListener('change');\n```\n- Event listeners for popup `show`, `hide` events can be added to `popup` property:\n```js\nconst dropdown = document.querySelector('ids-dropdown');\n\ndropdown.popup.addEventListener('show');\ndropdown.popup.addEventListener('hide');\n```\n\n## Methods\n\n- `beforeShow` {Promise<string>} An async function that fires as the dropdown is opening allowing you to set contents\n- `toggle` {void} Toggles the dropdown list open/closed state\n- `open` {void} Opens the dropdown list\n- `close` {void} Closes the dropdown list\n- `options` {Array<HTMLElement>} Returns the currently available options\n- `selectedOption` {HTMLElement} Returns the selected option DOM element\n- `selectedIndex` {number} Sets the the selected option by index\n\n## Themeable Parts\n\n- `trigger-field` - allows you to further style  the trigger field container\n- `input` - allows you to further style  the input in the trigger field container\n- `trigger-button` - allows you to further style the trigger field button\n- `icon` - allows you to further style the trigger field icon\n- `popup` - allows you to further style the dropdown popup\n\n## States and Variations\n\n- Valid/Invalid\n- Required\n- Readonly\n- Open/Closed\n- Disabled\n- Dirty\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift + Tab</kbd>: Moves focus into and out of the dropdown input. If the list is open, this will close the list, selecting the current item, and moving to the next focusable element\n- <kbd>Alt + Down Arrow / Down Arrow</kbd>: Opens the dropdown list and moves focus to the selected option. If nothing is selected, then focus moves to the first option in the list. If the combobox is not editable nothing will happen.\n- <kbd>Enter</kbd>: Selects the currently highlighted item in the list, updates the input field, highlights the selected item in the dropdown list, closes the dropdown list, and returns focus to the input field.\n- <kbd>Escape</kbd>: Closes the dropdown list, returns focus to the edit field, and does not change the current selection.\n- <kbd>AnyKey</kbd>: Typing a letter opens the list and filters to the items that start with that letter\n\n## Responsive Guidelines\n\n- The dropdown `<input>` should size to the parent container and the `<label>` should remain on the top.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Dropdown have all new markup and classes.\n\n**4.x to 5.x**\n- The dropdown component has been changed to a web component and renamed to ids-editor.\n- Markup has changed to a custom element `<ids-dropdown></ids-dropdown>`\n- If using events, events are now plain JS events (change event when changed)\n- API is significantly different\n- No longer uses a select element\n\n## Designs\n\n[Design Specs 4.5](https://www.figma.com/file/yaJ8mJrqRRej8oTsd6iT8P/IDS-(SoHo)-Component-Library-v4.5?node-id=760%3A771)\n[Design Specs 4.6](https://www.figma.com/file/ok0LLOT9PP1J0kBkPMaZ5c/IDS_Component_File_v4.6-(Draft))\n\n## Accessibility Guidelines\n\nThe dropdown list has been coded to act similar to the [aria readonly combobox](http://whatsock.com/Templates/Comboboxes/Native%20Inputs,%20Editable%20and%20Readonly/index.htm). With some variations due to having to deal with shadowDom.\n\n## Regional Considerations\n\nLabels should be localized in the current language. The dropdown icons will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-dropdown","attributes":[{"name":"isFormComponent","values":[]},{"name":"hasIcons","values":[]},{"name":"dropdownList","values":[]},{"name":"trigger","values":[]},{"name":"listBox","values":[]},{"name":"labelClicked","values":[]},{"name":"labelEl","values":[]},{"name":"openedByKeyboard","description":"Sets to true when a keyboard operation opens the dropdown (prevents extraneous event triggering)","values":[]},{"name":"closedByKeyboard","description":"Sets to true when a keyboard operation closes the dropdown (prevents extraneous event triggering)","values":[]},{"name":"#optionsData","values":[]},{"name":"#isMultiSelect","values":[]},{"name":"colorVariants","description":"List of available color variants for this component","values":[]},{"name":"input","values":[]},{"name":"popup","values":[]},{"name":"value","description":"Set the value of the dropdown using the value/id attribute if present","values":[]},{"name":"selectedOption","description":"Returns the selected Listbox option based on the Dropdown's value.","values":[]},{"name":"selected","description":"Returns the currently-selected Listbox option\n(may be different from the Dropdown's value because of user input)","values":[]},{"name":"selectedIndex","description":"Set the selected option by index","values":[]},{"name":"options","description":"Returns the currently available options","values":[]},{"name":"readonly","description":"Sets the readonly attribute","values":[]},{"name":"disabled","description":"Sets the disabled attribute","values":[]},{"name":"beforeShow","description":"An async function that fires as the dropdown is opening allowing you to set contents.","values":[]},{"name":"onLanguageChange","description":"Handle the Locale Change","values":[]},{"name":"validate","description":"Pass down `validate` attribute into IdsTriggerField","values":[]},{"name":"validationEvents","description":"Pass down `validation-events` attribute into IdsTriggerField","values":[]},{"name":"list","description":"Defines the existence of an external IdsDropdownList component, and connects this IdsDropdown\nto the component via events.","values":[]},{"name":"noMargins","description":"Sets the no margins attribute","values":[]},{"name":"typeahead","description":"Get the typeahead attribute","values":[]},{"name":"placeholder","description":"Get the placeholder attribute","values":[]},{"name":"showLoadingIndicator","description":"show-loading-indicator attribute","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# Ids Dropdown Component\n\n## Description\n\nThe Ids Dropdown allows users to select one of many options from a list, similar to using an HTML Select Element, with additional selection and filtering features. The dropdown displays one or more selectable values in a menu that is collapsed by default. A user can select an actionable value.\n\n## Use Cases\n\n- Use when you need to let the user select something from a list of values\n- Use when you want users to contribute data to your website and let them organize their content themselves.\n- Best used when users do not require a view of all possible values at all times.\n\n## Terminology\n\n- **Dropdown** The UX element that lives in the page and is actionable, activating the list\n- **Dropdown List** The UX element that contains and places the list within the page\n- **List Box**: The UX element that wraps the items in the dropdown\n- **List Box Option**: UX elements representing dropdown options, contained by the List Box\n\n## Features (With Code Examples)\n\nDropdown elements should be defined with `id` and `value` attributes. The value should match one of the `value` attributes contained by one of its `ids-list-box-option` elements.  When your application renders, the referenced value will cause the corresponding `ids-list-box-option` to appear selected:\n\n```html\n<ids-dropdown id=\"dropdown-2\" label=\"Readonly Dropdown\" value=\"opt3\">\n  <ids-list-box>\n    <ids-list-box-option value=\"opt1\" id=\"opt1\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2\">Option Two</ids-list-box-option>\n    <ids-list-box-option value=\"opt3\" id=\"opt3\">Option Three</ids-list-box-option>\n    <ids-list-box-option value=\"opt4\" id=\"opt4\">Option Four</ids-list-box-option>\n    <ids-list-box-option value=\"opt5\" id=\"opt5\">Option Five</ids-list-box-option>\n    <ids-list-box-option value=\"opt6\" id=\"opt6\">Option Six</ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown>\n```\n\nIt's also possible to show icons in the dropdown list. Add an `ids-icon` and `span` to each list box `ids-list-box-option`. For symmetry, icons should be on all options.\n\n```html\n<ids-dropdown id=\"dropdown-5\" label=\"Dropdown with Icons\" value=\"opt2\">\n  <ids-list-box>\n    <ids-list-box-option value=\"opt1\" id=\"opt1\">\n      <ids-icon icon=\"user-profile\"></ids-icon>\n      <span>Option One</span>\n    </ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2\">\n      <ids-icon icon=\"project\"></ids-icon>\n      <span>Option Two</span>\n    </ids-list-box-option>\n    <ids-list-box-option value=\"opt3\" id=\"opt3\">\n      <ids-icon icon=\"purchasing\"></ids-icon>\n      <span>Option Three</span>\n    </ids-list-box-option>\n    <ids-list-box-option value=\"opt4\" id=\"opt4\">\n      <ids-icon icon=\"quality\"></ids-icon>\n      <span>Option Four</span></ids-list-box-option>\n    <ids-list-box-option value=\"opt5\" id=\"opt5\">\n      <ids-icon icon=\"rocket\"></ids-icon>\n      <span>Option Five</span>\n    </ids-list-box-option>\n    <ids-list-box-option value=\"opt6\" id=\"opt6\">\n      <ids-icon icon=\"roles\"></ids-icon>\n      <span>Option Six</span>\n    </ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown>\n```\n\nIts also possible to show tooltips on the dropdown container or dropdown options. If you set it on the `ids-dropdown` you will see the tooltip on hover of the closed dropdown. If you set it on the options, when these are selected it will change the container tooltip to the selected one.\n\n```html\n<ids-dropdown id=\"dropdown-6\" label=\"Dropdown with Tooltips\" tooltip=\"Additional Info\" value=\"opt2\">\n  <ids-list-box>\n    <ids-list-box-option value=\"opt1\" id=\"opt1\" tooltip=\"Additional Info on Option One\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2\" tooltip=\"Additional Info on Option Two\">Option Two</ids-list-box-option>\n    <ids-list-box-option value=\"opt3\" id=\"opt3\" tooltip=\"Additional Info on Option Three\">Option Three</ids-list-box-option>\n    <ids-list-box-option value=\"opt4\" id=\"opt4\" tooltip=\"Additional Info on Option Four\">Option Four</ids-list-box-option>\n    <ids-list-box-option value=\"opt5\" id=\"opt5\" tooltip=\"Additional Info on Option Five\">Option Five</ids-list-box-option>\n    <ids-list-box-option value=\"opt6\" id=\"opt6\" tooltip=\"Additional Info on Option Six\">Option Six</ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown>\n```\n\nSometimes you might want to load the dropdown with Ajax. To do this setup the initial html. in order for the selected element to show. This must be pre-populated.\n\n```html\n<ids-dropdown id=\"dropdown-7\" label=\"Dropdown Using Ajax\" value=\"ak\">\n  <ids-list-box>\n    <ids-list-box-option value=\"ak\" id=\"ak\">Alaska</ids-list-box-option>\n </ids-list-box>\n</ids-dropdown>\n```\n\nFor the JS part set the `beforeShow` callback to an async function that returns a promise.\n\n```js\n// Use the asynchronous `beforeshow` callback to load contents\nconst dropdownAsync = document.querySelector('#dropdown-7');\n\ndropdownAsync.beforeShow = async function beforeShow() {\n  const url = '/data/states.json';\n  const res = await fetch(url);\n  const data = await res.json();\n  return data;\n};\n```\n\nThe promise should resolve and return data with id, value and label info.\n\n```js\n{\n  \"id\": \"AS\",\n  \"value\": \"AS\",\n  \"label\": \"American Samoa\"\n}\n```\n\nFor groups you should add `group-label` attribute to `ids-list-box-option` to indicate group start, all group items should be below.\n\n```html\n<ids-dropdown id=\"dropdown-groups\" label=\"Dropdown With Groups\" value=\"opt3\">\n  <ids-list-box>\n    <ids-list-box-option group-label>Group 1</ids-list-box-option>\n    <ids-list-box-option value=\"opt1group1\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2group1\">Option Two</ids-list-box-option>\n    <ids-list-box-option group-label>Group 2</ids-list-box-option>\n    <ids-list-box-option value=\"opt1group2\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2group2\">Option Two</ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown>\n```\n\nIn some situations, it may be preferrable to separate the IdsDropdownList element from its in-page parent element.  This can be done using the `list` attribute, and simply referencing the dropdown list by its `id` attribute.  This might be necessary for reasons such as breaking out of CSS stacking context.  Note that in this situation, it's necessary to also manually define the event handling and [Popup Interactions](../../mixins/ids-popup-interactions-mixin/ids-popup-interactions-mixin.ts) that cause the IdsDropdownList to activate, making this ideal for custom IdsDropdown configurations:\n\n```html\n<ids-dropdown id=\"dropdown-1\" list=\"separate-list\" label=\"Dropdown (list is adjacent)\" value=\"blank\" dirty-tracker=\"true\" allow-blank=\"true\"></ids-dropdown>\n<ids-dropdown-list id=\"separate-list\">\n  <ids-list-box>\n    <ids-list-box-option value=\"blank\" id=\"blank\"><span></span></ids-list-box-option>\n    <ids-list-box-option value=\"opt1\" id=\"opt1-d8\"><span>Option One</span></ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2-d8\"><span>Option Two</span></ids-list-box-option>\n  </ids-list-box>\n</ids-dropdown-list>\n```\n\n## Settings\n\n- `allowBlank` {boolean} Sets whether option list should include 'blank' option\n- `colorVariant` {string} set the current color variant.\n- `compact` {boolean} sets the component to be compact mode.\n- `dirtyTracker` {boolean} Sets the dirty tracking feature on to indicate a changed\n- `disabled` {boolean} Sets dropdown to disabled\n- `fieldHeight` {string} defines the field height. See [Ids Field Height Mixin](../../mixins/ids-field-height-mixin/README.md) for more information.\n- `label` {string} Sets the label text\n- `language` {string} Sets the language for RTL and inner labels\n- `labelRequired` {boolean} Sets the validation required indicator on label text, it's default to `true`\n- `labelState` {string} indicates that a label is hidden (note that for accessibility reasons, `label` should still be specified). See [Ids Label State Mixin](../../mixins/ids-label-state-mixin/README.md) for more information.\n- `list` {string} ID selector used to reference/connect to an external IdsDropdownList component (used in some scenarios like IdsDataGrid filters)\n- `maxlength` {number | string} Maximum characters allowed in textarea\n- `noMargins` {boolean} sets whether or not no-margins around the component.\n- `placeholder` {string} Sets the placeholder text\n- `size` {'sm ' | 'md' | 'lg' | 'full' | string} Sets the size (width)\n- `readonly` {boolean} Sets to readonly state\n- `validate` {'required' | string} Sets the validation routine to use\n- `validationEvents` {'blur' | string} Sets the validation events to use\n- `value` {string} Sets option to the matching option by the `value` attribute\n- `id` {string} Sets the `id` attribute\n- `tooltip` {string} Sets the tooltip on the dropdown container\n- `mode` {'light' | 'dark' | 'contrast' | string} Set the theme mode\n- `version` {'new' | 'classic' | string} Set the theme version\n- `selectedIndex` {number} Sets the the selected option by index\n- `typeahead` {true | false} - Enable/disable typeahead functionality\n- `clearable` {true | false} - Whether or not the value can be cleared with Backspace/Delete\n- `clearable-text` {string} - Sets the blank option custom text. The text will not be added to the input when the option is selected\n- `show-loading-indicator` {boolean} - Whether or not to show loading indicator (replaces trigger button). Defaults to false.\n\n## Events\n\n- `change` Fires when an option is selected / changed\n- `focus` Fires at the time the dropdown is focused\n- Event listeners for input (trigger field) `blur`, `change`, `focus`, `select`, `keydown`, `keypress`, `keyup`, `click`, `dbclick`, `beforetriggerclicked`, `triggerclicked` events can be added to `input` component property:\n```js\nconst dropdown = document.querySelector('ids-dropdown');\n\ndropdown.input.addEventListener('change');\n```\n- Event listeners for popup `show`, `hide` events can be added to `popup` property:\n```js\nconst dropdown = document.querySelector('ids-dropdown');\n\ndropdown.popup.addEventListener('show');\ndropdown.popup.addEventListener('hide');\n```\n\n## Methods\n\n- `beforeShow` {Promise<string>} An async function that fires as the dropdown is opening allowing you to set contents\n- `toggle` {void} Toggles the dropdown list open/closed state\n- `open` {void} Opens the dropdown list\n- `close` {void} Closes the dropdown list\n- `options` {Array<HTMLElement>} Returns the currently available options\n- `selectedOption` {HTMLElement} Returns the selected option DOM element\n- `selectedIndex` {number} Sets the the selected option by index\n\n## Themeable Parts\n\n- `trigger-field` - allows you to further style  the trigger field container\n- `input` - allows you to further style  the input in the trigger field container\n- `trigger-button` - allows you to further style the trigger field button\n- `icon` - allows you to further style the trigger field icon\n- `popup` - allows you to further style the dropdown popup\n\n## States and Variations\n\n- Valid/Invalid\n- Required\n- Readonly\n- Open/Closed\n- Disabled\n- Dirty\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift + Tab</kbd>: Moves focus into and out of the dropdown input. If the list is open, this will close the list, selecting the current item, and moving to the next focusable element\n- <kbd>Alt + Down Arrow / Down Arrow</kbd>: Opens the dropdown list and moves focus to the selected option. If nothing is selected, then focus moves to the first option in the list. If the combobox is not editable nothing will happen.\n- <kbd>Enter</kbd>: Selects the currently highlighted item in the list, updates the input field, highlights the selected item in the dropdown list, closes the dropdown list, and returns focus to the input field.\n- <kbd>Escape</kbd>: Closes the dropdown list, returns focus to the edit field, and does not change the current selection.\n- <kbd>AnyKey</kbd>: Typing a letter opens the list and filters to the items that start with that letter\n\n## Responsive Guidelines\n\n- The dropdown `<input>` should size to the parent container and the `<label>` should remain on the top.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Dropdown have all new markup and classes.\n\n**4.x to 5.x**\n- The dropdown component has been changed to a web component and renamed to ids-editor.\n- Markup has changed to a custom element `<ids-dropdown></ids-dropdown>`\n- If using events, events are now plain JS events (change event when changed)\n- API is significantly different\n- No longer uses a select element\n\n## Designs\n\n[Design Specs 4.5](https://www.figma.com/file/yaJ8mJrqRRej8oTsd6iT8P/IDS-(SoHo)-Component-Library-v4.5?node-id=760%3A771)\n[Design Specs 4.6](https://www.figma.com/file/ok0LLOT9PP1J0kBkPMaZ5c/IDS_Component_File_v4.6-(Draft))\n\n## Accessibility Guidelines\n\nThe dropdown list has been coded to act similar to the [aria readonly combobox](http://whatsock.com/Templates/Comboboxes/Native%20Inputs,%20Editable%20and%20Readonly/index.htm). With some variations due to having to deal with shadowDom.\n\n## Regional Considerations\n\nLabels should be localized in the current language. The dropdown icons will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-editor-clean-utils","description":{"kind":"markdown","value":"# Ids Editor Component\n\n## Description\n\nEditor component let you can control the appearance of your HTML text using the rich text formats. The editor toolbar provides various buttons for editing and formatting your content. You may use the editor component to displayed multiple styles, colors, alignments, or include images and hyperlinks as well.\n\n\n## Use Cases\n\n- Editor component use to rich text formats.\n- To displayed multiple styles, colors and alignments.\n- You may use to include images, hyperlinks and order/un-order lists.\n\n## Terminology\n\n**Toolbar:** Collection of buttons to apply various type of rich text formats.\n**Editor Container:** Editor container implemented using a `contenteditable` element.\n**Source Container:** A textarea element use as container to edit source mode.\n\n## Features (With Code Examples)\n\nA normal editor used as a web component.\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nReadonly editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" readonly>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nDisabled editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" disabled>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nDirty tracking editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" dirty-tracker>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nValidation (required) editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" validate=\"required\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nCustom toolbar with editor component.\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <ids-toolbar slot=\"toolbar\" tabbable=\"true\" type=\"formatter\">\n    <ids-toolbar-section type=\"buttonset\">\n      <ids-button editor-action=\"bold\" square=\"true\" tooltip=\"Toggle Bold Text\">\n        <span class=\"audible\">Bold</span>\n        <ids-icon icon=\"bold\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"italic\" square=\"true\" tooltip=\"Toggle Italic Text\">\n        <span class=\"audible\">Italic</span>\n        <ids-icon icon=\"italic\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"underline\" square=\"true\" tooltip=\"Toggle Underline Text\">\n        <span class=\"audible\">Underline</span>\n        <ids-icon icon=\"underline\"></ids-icon>\n      </ids-button>\n      <ids-separator vertical></ids-separator>\n      <ids-button editor-action=\"sourcemode\" square=\"true\" tooltip=\"View Source\">\n        <span class=\"audible\">View Source</span>\n        <ids-icon icon=\"html\" width=\"38\" viewbox=\"0 0 54 18\"></ids-icon>\n      </ids-button>\n    </ids-toolbar-section>\n  </ids-toolbar>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor init with source mode.\n\n```html\n<ids-editor label=\"Demo Editor\" view=\"source\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor with hidden label.\n\n```html\n<ids-editor label=\"Demo Editor\" label-state=\"hidden\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor with collapsed label.\n\n```html\n<ids-editor label=\"Demo Editor\" label-state=\"collapsed\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor placeholder.\n\n```html\n<ids-editor label=\"Demo Editor\" placeholder=\"Type some text here...\">\n</ids-editor>\n```\n\nEditor use source formatter\n\n```html\n<ids-editor label=\"Demo Editor\" source-formatter>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor use clickable hyperlink\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <p>Some sample text <a href=\"https://www.example.com/\" class=\"hyperlink\" contenteditable=\"false\" target=\"_blank\">example hyperlink</a></p>\n</ids-editor>\n```\n\nCustom default values in modals (ie. hyperlink modal)\n\n```html\n<ids-editor id=\"editor-demo\" label=\"Demo Editor\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\n```javaScript\nconst modals = {\n  hyperlink: {\n    url: 'http://www.example.com',\n    classes: 'hyperlink',\n    targets: [\n      { text: 'Same Window', value: '' },\n      { text: 'New Window', value: '_blank', selected: true }\n    ],\n    isClickable: false,\n    showIsClickable: true\n  },\n  insertimage: {\n    url: '../assets/images/placeholder-154x120.png',\n    alt: ''\n  }\n};\nconst editorEl = document.querySelector('#editor-demo');\neditorEl.modalElementsValue(modals);\n```\n\n## Settings and Attributes\n\n- `disabled` {boolean} Sets the editor to disabled state\n- `label` {string} Set the editor aria label text\n- `labelHidden` {boolean} Set the label to be hidden or shown\n- `labelRequired` {boolean} Set required indicator (red '*') to be hidden or shown\n- `paragraphSeparator` {string} Set the placeholder text for editor\n- `placeholder` {string} Sets the editor node to be selectable\n- `readonly` {boolean} Sets the editor to readonly state\n- `sourceFormatter` {boolean} Sets to be use source formatter for editor\n- `view` {string|'editor'|'source' } Set the view mode for editor\n\n## Theme-able Parts\n\n- `editor` - allows you to further style the editor element\n- `editor-label` - allows you to further style the editor label element\n- `main-container` - allows you to further style the main container element\n- `toolbar-container` - allows you to further style the toolbar container element\n- `editor-container` - allows you to further style the editor container element\n- `source-container` - allows you to further style the source container element\n\n## Events\n\n- `beforeeditormode` Fires before change view to editor mode, you can return false in the response to veto\n- `aftereditormode` Fires after change view to editor mode\n- `beforesourcemode` Fires before change view to source mode, you can return false in the response to veto\n- `aftersourcemode` Fires after change view to source mode\n- `viewchange` Fires after requested view mode changed\n- `rejectviewchange` Fires if requested view mode reject\n- `beforepaste` Fires before paste, you can return false in the response to veto\n- `afterpaste` Fires after paste content\n- `rejectpaste` Fires if reject paste content\n- `initialize` Fires after initialize\n- `change` Fires after value change\n\n## Methods\n\n- `modalElementsValue(modals: object): HTMLElement` Set default value to each element in modals\n- `sourceTextareaLabel(): string` Get label text for source textarea\n\n## States and Variations (With Code Examples)\n\n- Custom Toolbar: End user can set custom toolbar buttons\n- Disabled: Disabled editor cannot be clicked, hovered, focused or selected\n- Readonly: Editor content readonly\n- Dirty Tracking: Content changes can be track by display dirty icon in editor\n- Validation: Can be check of required validation\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift + Tab</kbd>: This will focus or unfocus the editor.\n- <kbd>Ctrl + B</kbd>: Make text bold.\n- <kbd>Ctrl + I</kbd>: Make text italicize.\n- <kbd>Ctrl + U</kbd>: Make text underline.\n- <kbd>Ctrl + Shift + S</kbd>: Make text strike through.\n- <kbd>Ctrl + Shift + Equal</kbd>: Make text super script.\n- <kbd>Ctrl + Equal</kbd>: Make text sub script.\n- <kbd>Ctrl + Alt + Digit1</kbd>: Make header 1.\n- <kbd>Ctrl + Alt + Digit2</kbd>: Make header 2.\n- <kbd>Ctrl + Alt + Digit3</kbd>: Make header 3.\n- <kbd>Ctrl + Alt + Digit4</kbd>: Make header 4.\n- <kbd>Ctrl + Alt + Digit5</kbd>: Make header 5.\n- <kbd>Ctrl + Alt + Digit6</kbd>: Make header 6.\n- <kbd>Ctrl + Shift + Alt + K</kbd>: Change text fore color.\n- <kbd>Ctrl + Shift + O</kbd>: Insert ordered list.\n- <kbd>Ctrl + Shift + U</kbd>: Insert unordered list.\n- <kbd>Ctrl + Shift + I</kbd>: Insert image.\n- <kbd>Ctrl + K</kbd>: Insert/Update hyperlink.\n- <kbd>Ctrl + Shift + K</kbd>: Make unlink the hyperlink.\n- <kbd>Ctrl + Shift + L</kbd>: Insert horizontal line.\n- <kbd>Ctrl + L</kbd>: Make text align left.\n- <kbd>Ctrl + R</kbd>: Make text align right.\n- <kbd>Ctrl + E</kbd>: Make text align center.\n- <kbd>Ctrl + J</kbd>: Make text align justify.\n- <kbd>Ctrl + Shift + Space</kbd>: Clear formatting.\n- <kbd>Ctrl + Y</kbd>: History redo.\n- <kbd>Ctrl + Z</kbd>: History undo.\n- <kbd>Ctrl + Shift + Backquote</kbd>: Switch editor view mode.\n- <kbd>Ctrl + Backquote</kbd>: Switch source view mode.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Editor have all new markup and classes.\n\n**4.x to 5.x**\n- The Editor component has been changed to a web component and renamed to ids-editor.\n- Markup has changed to a custom element `<ids-editor><div slot=\"content\"><p>Some sample text</p></div></ids-editor>`\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/UoCNFBhmjVZZ9CxLHQ54Mq/IDS-Editor?node-id=1%3A7)\n\n## Accessibility Guidelines\n\n- Editor container contained in the element has a `role=\"textbox\"`, `aria-multiline=\"true\"` and `aria-labelledby`\n- Source container contained textarea with audible label\n\n## Regional Considerations\n\nIn Right To Left Languages the icons, text and alignment will flow to the other side. Labels should be localized in the current language.\n"}},{"name":"ids-editor-formatters","description":{"kind":"markdown","value":"# Ids Editor Component\n\n## Description\n\nEditor component let you can control the appearance of your HTML text using the rich text formats. The editor toolbar provides various buttons for editing and formatting your content. You may use the editor component to displayed multiple styles, colors, alignments, or include images and hyperlinks as well.\n\n\n## Use Cases\n\n- Editor component use to rich text formats.\n- To displayed multiple styles, colors and alignments.\n- You may use to include images, hyperlinks and order/un-order lists.\n\n## Terminology\n\n**Toolbar:** Collection of buttons to apply various type of rich text formats.\n**Editor Container:** Editor container implemented using a `contenteditable` element.\n**Source Container:** A textarea element use as container to edit source mode.\n\n## Features (With Code Examples)\n\nA normal editor used as a web component.\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nReadonly editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" readonly>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nDisabled editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" disabled>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nDirty tracking editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" dirty-tracker>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nValidation (required) editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" validate=\"required\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nCustom toolbar with editor component.\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <ids-toolbar slot=\"toolbar\" tabbable=\"true\" type=\"formatter\">\n    <ids-toolbar-section type=\"buttonset\">\n      <ids-button editor-action=\"bold\" square=\"true\" tooltip=\"Toggle Bold Text\">\n        <span class=\"audible\">Bold</span>\n        <ids-icon icon=\"bold\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"italic\" square=\"true\" tooltip=\"Toggle Italic Text\">\n        <span class=\"audible\">Italic</span>\n        <ids-icon icon=\"italic\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"underline\" square=\"true\" tooltip=\"Toggle Underline Text\">\n        <span class=\"audible\">Underline</span>\n        <ids-icon icon=\"underline\"></ids-icon>\n      </ids-button>\n      <ids-separator vertical></ids-separator>\n      <ids-button editor-action=\"sourcemode\" square=\"true\" tooltip=\"View Source\">\n        <span class=\"audible\">View Source</span>\n        <ids-icon icon=\"html\" width=\"38\" viewbox=\"0 0 54 18\"></ids-icon>\n      </ids-button>\n    </ids-toolbar-section>\n  </ids-toolbar>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor init with source mode.\n\n```html\n<ids-editor label=\"Demo Editor\" view=\"source\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor with hidden label.\n\n```html\n<ids-editor label=\"Demo Editor\" label-state=\"hidden\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor with collapsed label.\n\n```html\n<ids-editor label=\"Demo Editor\" label-state=\"collapsed\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor placeholder.\n\n```html\n<ids-editor label=\"Demo Editor\" placeholder=\"Type some text here...\">\n</ids-editor>\n```\n\nEditor use source formatter\n\n```html\n<ids-editor label=\"Demo Editor\" source-formatter>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor use clickable hyperlink\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <p>Some sample text <a href=\"https://www.example.com/\" class=\"hyperlink\" contenteditable=\"false\" target=\"_blank\">example hyperlink</a></p>\n</ids-editor>\n```\n\nCustom default values in modals (ie. hyperlink modal)\n\n```html\n<ids-editor id=\"editor-demo\" label=\"Demo Editor\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\n```javaScript\nconst modals = {\n  hyperlink: {\n    url: 'http://www.example.com',\n    classes: 'hyperlink',\n    targets: [\n      { text: 'Same Window', value: '' },\n      { text: 'New Window', value: '_blank', selected: true }\n    ],\n    isClickable: false,\n    showIsClickable: true\n  },\n  insertimage: {\n    url: '../assets/images/placeholder-154x120.png',\n    alt: ''\n  }\n};\nconst editorEl = document.querySelector('#editor-demo');\neditorEl.modalElementsValue(modals);\n```\n\n## Settings and Attributes\n\n- `disabled` {boolean} Sets the editor to disabled state\n- `label` {string} Set the editor aria label text\n- `labelHidden` {boolean} Set the label to be hidden or shown\n- `labelRequired` {boolean} Set required indicator (red '*') to be hidden or shown\n- `paragraphSeparator` {string} Set the placeholder text for editor\n- `placeholder` {string} Sets the editor node to be selectable\n- `readonly` {boolean} Sets the editor to readonly state\n- `sourceFormatter` {boolean} Sets to be use source formatter for editor\n- `view` {string|'editor'|'source' } Set the view mode for editor\n\n## Theme-able Parts\n\n- `editor` - allows you to further style the editor element\n- `editor-label` - allows you to further style the editor label element\n- `main-container` - allows you to further style the main container element\n- `toolbar-container` - allows you to further style the toolbar container element\n- `editor-container` - allows you to further style the editor container element\n- `source-container` - allows you to further style the source container element\n\n## Events\n\n- `beforeeditormode` Fires before change view to editor mode, you can return false in the response to veto\n- `aftereditormode` Fires after change view to editor mode\n- `beforesourcemode` Fires before change view to source mode, you can return false in the response to veto\n- `aftersourcemode` Fires after change view to source mode\n- `viewchange` Fires after requested view mode changed\n- `rejectviewchange` Fires if requested view mode reject\n- `beforepaste` Fires before paste, you can return false in the response to veto\n- `afterpaste` Fires after paste content\n- `rejectpaste` Fires if reject paste content\n- `initialize` Fires after initialize\n- `change` Fires after value change\n\n## Methods\n\n- `modalElementsValue(modals: object): HTMLElement` Set default value to each element in modals\n- `sourceTextareaLabel(): string` Get label text for source textarea\n\n## States and Variations (With Code Examples)\n\n- Custom Toolbar: End user can set custom toolbar buttons\n- Disabled: Disabled editor cannot be clicked, hovered, focused or selected\n- Readonly: Editor content readonly\n- Dirty Tracking: Content changes can be track by display dirty icon in editor\n- Validation: Can be check of required validation\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift + Tab</kbd>: This will focus or unfocus the editor.\n- <kbd>Ctrl + B</kbd>: Make text bold.\n- <kbd>Ctrl + I</kbd>: Make text italicize.\n- <kbd>Ctrl + U</kbd>: Make text underline.\n- <kbd>Ctrl + Shift + S</kbd>: Make text strike through.\n- <kbd>Ctrl + Shift + Equal</kbd>: Make text super script.\n- <kbd>Ctrl + Equal</kbd>: Make text sub script.\n- <kbd>Ctrl + Alt + Digit1</kbd>: Make header 1.\n- <kbd>Ctrl + Alt + Digit2</kbd>: Make header 2.\n- <kbd>Ctrl + Alt + Digit3</kbd>: Make header 3.\n- <kbd>Ctrl + Alt + Digit4</kbd>: Make header 4.\n- <kbd>Ctrl + Alt + Digit5</kbd>: Make header 5.\n- <kbd>Ctrl + Alt + Digit6</kbd>: Make header 6.\n- <kbd>Ctrl + Shift + Alt + K</kbd>: Change text fore color.\n- <kbd>Ctrl + Shift + O</kbd>: Insert ordered list.\n- <kbd>Ctrl + Shift + U</kbd>: Insert unordered list.\n- <kbd>Ctrl + Shift + I</kbd>: Insert image.\n- <kbd>Ctrl + K</kbd>: Insert/Update hyperlink.\n- <kbd>Ctrl + Shift + K</kbd>: Make unlink the hyperlink.\n- <kbd>Ctrl + Shift + L</kbd>: Insert horizontal line.\n- <kbd>Ctrl + L</kbd>: Make text align left.\n- <kbd>Ctrl + R</kbd>: Make text align right.\n- <kbd>Ctrl + E</kbd>: Make text align center.\n- <kbd>Ctrl + J</kbd>: Make text align justify.\n- <kbd>Ctrl + Shift + Space</kbd>: Clear formatting.\n- <kbd>Ctrl + Y</kbd>: History redo.\n- <kbd>Ctrl + Z</kbd>: History undo.\n- <kbd>Ctrl + Shift + Backquote</kbd>: Switch editor view mode.\n- <kbd>Ctrl + Backquote</kbd>: Switch source view mode.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Editor have all new markup and classes.\n\n**4.x to 5.x**\n- The Editor component has been changed to a web component and renamed to ids-editor.\n- Markup has changed to a custom element `<ids-editor><div slot=\"content\"><p>Some sample text</p></div></ids-editor>`\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/UoCNFBhmjVZZ9CxLHQ54Mq/IDS-Editor?node-id=1%3A7)\n\n## Accessibility Guidelines\n\n- Editor container contained in the element has a `role=\"textbox\"`, `aria-multiline=\"true\"` and `aria-labelledby`\n- Source container contained textarea with audible label\n\n## Regional Considerations\n\nIn Right To Left Languages the icons, text and alignment will flow to the other side. Labels should be localized in the current language.\n"}},{"name":"ids-editor-handle-paste","description":{"kind":"markdown","value":"# Ids Editor Component\n\n## Description\n\nEditor component let you can control the appearance of your HTML text using the rich text formats. The editor toolbar provides various buttons for editing and formatting your content. You may use the editor component to displayed multiple styles, colors, alignments, or include images and hyperlinks as well.\n\n\n## Use Cases\n\n- Editor component use to rich text formats.\n- To displayed multiple styles, colors and alignments.\n- You may use to include images, hyperlinks and order/un-order lists.\n\n## Terminology\n\n**Toolbar:** Collection of buttons to apply various type of rich text formats.\n**Editor Container:** Editor container implemented using a `contenteditable` element.\n**Source Container:** A textarea element use as container to edit source mode.\n\n## Features (With Code Examples)\n\nA normal editor used as a web component.\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nReadonly editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" readonly>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nDisabled editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" disabled>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nDirty tracking editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" dirty-tracker>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nValidation (required) editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" validate=\"required\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nCustom toolbar with editor component.\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <ids-toolbar slot=\"toolbar\" tabbable=\"true\" type=\"formatter\">\n    <ids-toolbar-section type=\"buttonset\">\n      <ids-button editor-action=\"bold\" square=\"true\" tooltip=\"Toggle Bold Text\">\n        <span class=\"audible\">Bold</span>\n        <ids-icon icon=\"bold\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"italic\" square=\"true\" tooltip=\"Toggle Italic Text\">\n        <span class=\"audible\">Italic</span>\n        <ids-icon icon=\"italic\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"underline\" square=\"true\" tooltip=\"Toggle Underline Text\">\n        <span class=\"audible\">Underline</span>\n        <ids-icon icon=\"underline\"></ids-icon>\n      </ids-button>\n      <ids-separator vertical></ids-separator>\n      <ids-button editor-action=\"sourcemode\" square=\"true\" tooltip=\"View Source\">\n        <span class=\"audible\">View Source</span>\n        <ids-icon icon=\"html\" width=\"38\" viewbox=\"0 0 54 18\"></ids-icon>\n      </ids-button>\n    </ids-toolbar-section>\n  </ids-toolbar>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor init with source mode.\n\n```html\n<ids-editor label=\"Demo Editor\" view=\"source\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor with hidden label.\n\n```html\n<ids-editor label=\"Demo Editor\" label-state=\"hidden\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor with collapsed label.\n\n```html\n<ids-editor label=\"Demo Editor\" label-state=\"collapsed\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor placeholder.\n\n```html\n<ids-editor label=\"Demo Editor\" placeholder=\"Type some text here...\">\n</ids-editor>\n```\n\nEditor use source formatter\n\n```html\n<ids-editor label=\"Demo Editor\" source-formatter>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor use clickable hyperlink\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <p>Some sample text <a href=\"https://www.example.com/\" class=\"hyperlink\" contenteditable=\"false\" target=\"_blank\">example hyperlink</a></p>\n</ids-editor>\n```\n\nCustom default values in modals (ie. hyperlink modal)\n\n```html\n<ids-editor id=\"editor-demo\" label=\"Demo Editor\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\n```javaScript\nconst modals = {\n  hyperlink: {\n    url: 'http://www.example.com',\n    classes: 'hyperlink',\n    targets: [\n      { text: 'Same Window', value: '' },\n      { text: 'New Window', value: '_blank', selected: true }\n    ],\n    isClickable: false,\n    showIsClickable: true\n  },\n  insertimage: {\n    url: '../assets/images/placeholder-154x120.png',\n    alt: ''\n  }\n};\nconst editorEl = document.querySelector('#editor-demo');\neditorEl.modalElementsValue(modals);\n```\n\n## Settings and Attributes\n\n- `disabled` {boolean} Sets the editor to disabled state\n- `label` {string} Set the editor aria label text\n- `labelHidden` {boolean} Set the label to be hidden or shown\n- `labelRequired` {boolean} Set required indicator (red '*') to be hidden or shown\n- `paragraphSeparator` {string} Set the placeholder text for editor\n- `placeholder` {string} Sets the editor node to be selectable\n- `readonly` {boolean} Sets the editor to readonly state\n- `sourceFormatter` {boolean} Sets to be use source formatter for editor\n- `view` {string|'editor'|'source' } Set the view mode for editor\n\n## Theme-able Parts\n\n- `editor` - allows you to further style the editor element\n- `editor-label` - allows you to further style the editor label element\n- `main-container` - allows you to further style the main container element\n- `toolbar-container` - allows you to further style the toolbar container element\n- `editor-container` - allows you to further style the editor container element\n- `source-container` - allows you to further style the source container element\n\n## Events\n\n- `beforeeditormode` Fires before change view to editor mode, you can return false in the response to veto\n- `aftereditormode` Fires after change view to editor mode\n- `beforesourcemode` Fires before change view to source mode, you can return false in the response to veto\n- `aftersourcemode` Fires after change view to source mode\n- `viewchange` Fires after requested view mode changed\n- `rejectviewchange` Fires if requested view mode reject\n- `beforepaste` Fires before paste, you can return false in the response to veto\n- `afterpaste` Fires after paste content\n- `rejectpaste` Fires if reject paste content\n- `initialize` Fires after initialize\n- `change` Fires after value change\n\n## Methods\n\n- `modalElementsValue(modals: object): HTMLElement` Set default value to each element in modals\n- `sourceTextareaLabel(): string` Get label text for source textarea\n\n## States and Variations (With Code Examples)\n\n- Custom Toolbar: End user can set custom toolbar buttons\n- Disabled: Disabled editor cannot be clicked, hovered, focused or selected\n- Readonly: Editor content readonly\n- Dirty Tracking: Content changes can be track by display dirty icon in editor\n- Validation: Can be check of required validation\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift + Tab</kbd>: This will focus or unfocus the editor.\n- <kbd>Ctrl + B</kbd>: Make text bold.\n- <kbd>Ctrl + I</kbd>: Make text italicize.\n- <kbd>Ctrl + U</kbd>: Make text underline.\n- <kbd>Ctrl + Shift + S</kbd>: Make text strike through.\n- <kbd>Ctrl + Shift + Equal</kbd>: Make text super script.\n- <kbd>Ctrl + Equal</kbd>: Make text sub script.\n- <kbd>Ctrl + Alt + Digit1</kbd>: Make header 1.\n- <kbd>Ctrl + Alt + Digit2</kbd>: Make header 2.\n- <kbd>Ctrl + Alt + Digit3</kbd>: Make header 3.\n- <kbd>Ctrl + Alt + Digit4</kbd>: Make header 4.\n- <kbd>Ctrl + Alt + Digit5</kbd>: Make header 5.\n- <kbd>Ctrl + Alt + Digit6</kbd>: Make header 6.\n- <kbd>Ctrl + Shift + Alt + K</kbd>: Change text fore color.\n- <kbd>Ctrl + Shift + O</kbd>: Insert ordered list.\n- <kbd>Ctrl + Shift + U</kbd>: Insert unordered list.\n- <kbd>Ctrl + Shift + I</kbd>: Insert image.\n- <kbd>Ctrl + K</kbd>: Insert/Update hyperlink.\n- <kbd>Ctrl + Shift + K</kbd>: Make unlink the hyperlink.\n- <kbd>Ctrl + Shift + L</kbd>: Insert horizontal line.\n- <kbd>Ctrl + L</kbd>: Make text align left.\n- <kbd>Ctrl + R</kbd>: Make text align right.\n- <kbd>Ctrl + E</kbd>: Make text align center.\n- <kbd>Ctrl + J</kbd>: Make text align justify.\n- <kbd>Ctrl + Shift + Space</kbd>: Clear formatting.\n- <kbd>Ctrl + Y</kbd>: History redo.\n- <kbd>Ctrl + Z</kbd>: History undo.\n- <kbd>Ctrl + Shift + Backquote</kbd>: Switch editor view mode.\n- <kbd>Ctrl + Backquote</kbd>: Switch source view mode.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Editor have all new markup and classes.\n\n**4.x to 5.x**\n- The Editor component has been changed to a web component and renamed to ids-editor.\n- Markup has changed to a custom element `<ids-editor><div slot=\"content\"><p>Some sample text</p></div></ids-editor>`\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/UoCNFBhmjVZZ9CxLHQ54Mq/IDS-Editor?node-id=1%3A7)\n\n## Accessibility Guidelines\n\n- Editor container contained in the element has a `role=\"textbox\"`, `aria-multiline=\"true\"` and `aria-labelledby`\n- Source container contained textarea with audible label\n\n## Regional Considerations\n\nIn Right To Left Languages the icons, text and alignment will flow to the other side. Labels should be localized in the current language.\n"}},{"name":"ids-editor-selection-utils","description":{"kind":"markdown","value":"# Ids Editor Component\n\n## Description\n\nEditor component let you can control the appearance of your HTML text using the rich text formats. The editor toolbar provides various buttons for editing and formatting your content. You may use the editor component to displayed multiple styles, colors, alignments, or include images and hyperlinks as well.\n\n\n## Use Cases\n\n- Editor component use to rich text formats.\n- To displayed multiple styles, colors and alignments.\n- You may use to include images, hyperlinks and order/un-order lists.\n\n## Terminology\n\n**Toolbar:** Collection of buttons to apply various type of rich text formats.\n**Editor Container:** Editor container implemented using a `contenteditable` element.\n**Source Container:** A textarea element use as container to edit source mode.\n\n## Features (With Code Examples)\n\nA normal editor used as a web component.\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nReadonly editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" readonly>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nDisabled editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" disabled>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nDirty tracking editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" dirty-tracker>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nValidation (required) editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" validate=\"required\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nCustom toolbar with editor component.\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <ids-toolbar slot=\"toolbar\" tabbable=\"true\" type=\"formatter\">\n    <ids-toolbar-section type=\"buttonset\">\n      <ids-button editor-action=\"bold\" square=\"true\" tooltip=\"Toggle Bold Text\">\n        <span class=\"audible\">Bold</span>\n        <ids-icon icon=\"bold\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"italic\" square=\"true\" tooltip=\"Toggle Italic Text\">\n        <span class=\"audible\">Italic</span>\n        <ids-icon icon=\"italic\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"underline\" square=\"true\" tooltip=\"Toggle Underline Text\">\n        <span class=\"audible\">Underline</span>\n        <ids-icon icon=\"underline\"></ids-icon>\n      </ids-button>\n      <ids-separator vertical></ids-separator>\n      <ids-button editor-action=\"sourcemode\" square=\"true\" tooltip=\"View Source\">\n        <span class=\"audible\">View Source</span>\n        <ids-icon icon=\"html\" width=\"38\" viewbox=\"0 0 54 18\"></ids-icon>\n      </ids-button>\n    </ids-toolbar-section>\n  </ids-toolbar>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor init with source mode.\n\n```html\n<ids-editor label=\"Demo Editor\" view=\"source\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor with hidden label.\n\n```html\n<ids-editor label=\"Demo Editor\" label-state=\"hidden\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor with collapsed label.\n\n```html\n<ids-editor label=\"Demo Editor\" label-state=\"collapsed\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor placeholder.\n\n```html\n<ids-editor label=\"Demo Editor\" placeholder=\"Type some text here...\">\n</ids-editor>\n```\n\nEditor use source formatter\n\n```html\n<ids-editor label=\"Demo Editor\" source-formatter>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor use clickable hyperlink\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <p>Some sample text <a href=\"https://www.example.com/\" class=\"hyperlink\" contenteditable=\"false\" target=\"_blank\">example hyperlink</a></p>\n</ids-editor>\n```\n\nCustom default values in modals (ie. hyperlink modal)\n\n```html\n<ids-editor id=\"editor-demo\" label=\"Demo Editor\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\n```javaScript\nconst modals = {\n  hyperlink: {\n    url: 'http://www.example.com',\n    classes: 'hyperlink',\n    targets: [\n      { text: 'Same Window', value: '' },\n      { text: 'New Window', value: '_blank', selected: true }\n    ],\n    isClickable: false,\n    showIsClickable: true\n  },\n  insertimage: {\n    url: '../assets/images/placeholder-154x120.png',\n    alt: ''\n  }\n};\nconst editorEl = document.querySelector('#editor-demo');\neditorEl.modalElementsValue(modals);\n```\n\n## Settings and Attributes\n\n- `disabled` {boolean} Sets the editor to disabled state\n- `label` {string} Set the editor aria label text\n- `labelHidden` {boolean} Set the label to be hidden or shown\n- `labelRequired` {boolean} Set required indicator (red '*') to be hidden or shown\n- `paragraphSeparator` {string} Set the placeholder text for editor\n- `placeholder` {string} Sets the editor node to be selectable\n- `readonly` {boolean} Sets the editor to readonly state\n- `sourceFormatter` {boolean} Sets to be use source formatter for editor\n- `view` {string|'editor'|'source' } Set the view mode for editor\n\n## Theme-able Parts\n\n- `editor` - allows you to further style the editor element\n- `editor-label` - allows you to further style the editor label element\n- `main-container` - allows you to further style the main container element\n- `toolbar-container` - allows you to further style the toolbar container element\n- `editor-container` - allows you to further style the editor container element\n- `source-container` - allows you to further style the source container element\n\n## Events\n\n- `beforeeditormode` Fires before change view to editor mode, you can return false in the response to veto\n- `aftereditormode` Fires after change view to editor mode\n- `beforesourcemode` Fires before change view to source mode, you can return false in the response to veto\n- `aftersourcemode` Fires after change view to source mode\n- `viewchange` Fires after requested view mode changed\n- `rejectviewchange` Fires if requested view mode reject\n- `beforepaste` Fires before paste, you can return false in the response to veto\n- `afterpaste` Fires after paste content\n- `rejectpaste` Fires if reject paste content\n- `initialize` Fires after initialize\n- `change` Fires after value change\n\n## Methods\n\n- `modalElementsValue(modals: object): HTMLElement` Set default value to each element in modals\n- `sourceTextareaLabel(): string` Get label text for source textarea\n\n## States and Variations (With Code Examples)\n\n- Custom Toolbar: End user can set custom toolbar buttons\n- Disabled: Disabled editor cannot be clicked, hovered, focused or selected\n- Readonly: Editor content readonly\n- Dirty Tracking: Content changes can be track by display dirty icon in editor\n- Validation: Can be check of required validation\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift + Tab</kbd>: This will focus or unfocus the editor.\n- <kbd>Ctrl + B</kbd>: Make text bold.\n- <kbd>Ctrl + I</kbd>: Make text italicize.\n- <kbd>Ctrl + U</kbd>: Make text underline.\n- <kbd>Ctrl + Shift + S</kbd>: Make text strike through.\n- <kbd>Ctrl + Shift + Equal</kbd>: Make text super script.\n- <kbd>Ctrl + Equal</kbd>: Make text sub script.\n- <kbd>Ctrl + Alt + Digit1</kbd>: Make header 1.\n- <kbd>Ctrl + Alt + Digit2</kbd>: Make header 2.\n- <kbd>Ctrl + Alt + Digit3</kbd>: Make header 3.\n- <kbd>Ctrl + Alt + Digit4</kbd>: Make header 4.\n- <kbd>Ctrl + Alt + Digit5</kbd>: Make header 5.\n- <kbd>Ctrl + Alt + Digit6</kbd>: Make header 6.\n- <kbd>Ctrl + Shift + Alt + K</kbd>: Change text fore color.\n- <kbd>Ctrl + Shift + O</kbd>: Insert ordered list.\n- <kbd>Ctrl + Shift + U</kbd>: Insert unordered list.\n- <kbd>Ctrl + Shift + I</kbd>: Insert image.\n- <kbd>Ctrl + K</kbd>: Insert/Update hyperlink.\n- <kbd>Ctrl + Shift + K</kbd>: Make unlink the hyperlink.\n- <kbd>Ctrl + Shift + L</kbd>: Insert horizontal line.\n- <kbd>Ctrl + L</kbd>: Make text align left.\n- <kbd>Ctrl + R</kbd>: Make text align right.\n- <kbd>Ctrl + E</kbd>: Make text align center.\n- <kbd>Ctrl + J</kbd>: Make text align justify.\n- <kbd>Ctrl + Shift + Space</kbd>: Clear formatting.\n- <kbd>Ctrl + Y</kbd>: History redo.\n- <kbd>Ctrl + Z</kbd>: History undo.\n- <kbd>Ctrl + Shift + Backquote</kbd>: Switch editor view mode.\n- <kbd>Ctrl + Backquote</kbd>: Switch source view mode.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Editor have all new markup and classes.\n\n**4.x to 5.x**\n- The Editor component has been changed to a web component and renamed to ids-editor.\n- Markup has changed to a custom element `<ids-editor><div slot=\"content\"><p>Some sample text</p></div></ids-editor>`\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/UoCNFBhmjVZZ9CxLHQ54Mq/IDS-Editor?node-id=1%3A7)\n\n## Accessibility Guidelines\n\n- Editor container contained in the element has a `role=\"textbox\"`, `aria-multiline=\"true\"` and `aria-labelledby`\n- Source container contained textarea with audible label\n\n## Regional Considerations\n\nIn Right To Left Languages the icons, text and alignment will flow to the other side. Labels should be localized in the current language.\n"}},{"name":"ids-editor-shared","description":{"kind":"markdown","value":"# Ids Editor Component\n\n## Description\n\nEditor component let you can control the appearance of your HTML text using the rich text formats. The editor toolbar provides various buttons for editing and formatting your content. You may use the editor component to displayed multiple styles, colors, alignments, or include images and hyperlinks as well.\n\n\n## Use Cases\n\n- Editor component use to rich text formats.\n- To displayed multiple styles, colors and alignments.\n- You may use to include images, hyperlinks and order/un-order lists.\n\n## Terminology\n\n**Toolbar:** Collection of buttons to apply various type of rich text formats.\n**Editor Container:** Editor container implemented using a `contenteditable` element.\n**Source Container:** A textarea element use as container to edit source mode.\n\n## Features (With Code Examples)\n\nA normal editor used as a web component.\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nReadonly editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" readonly>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nDisabled editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" disabled>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nDirty tracking editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" dirty-tracker>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nValidation (required) editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" validate=\"required\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nCustom toolbar with editor component.\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <ids-toolbar slot=\"toolbar\" tabbable=\"true\" type=\"formatter\">\n    <ids-toolbar-section type=\"buttonset\">\n      <ids-button editor-action=\"bold\" square=\"true\" tooltip=\"Toggle Bold Text\">\n        <span class=\"audible\">Bold</span>\n        <ids-icon icon=\"bold\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"italic\" square=\"true\" tooltip=\"Toggle Italic Text\">\n        <span class=\"audible\">Italic</span>\n        <ids-icon icon=\"italic\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"underline\" square=\"true\" tooltip=\"Toggle Underline Text\">\n        <span class=\"audible\">Underline</span>\n        <ids-icon icon=\"underline\"></ids-icon>\n      </ids-button>\n      <ids-separator vertical></ids-separator>\n      <ids-button editor-action=\"sourcemode\" square=\"true\" tooltip=\"View Source\">\n        <span class=\"audible\">View Source</span>\n        <ids-icon icon=\"html\" width=\"38\" viewbox=\"0 0 54 18\"></ids-icon>\n      </ids-button>\n    </ids-toolbar-section>\n  </ids-toolbar>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor init with source mode.\n\n```html\n<ids-editor label=\"Demo Editor\" view=\"source\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor with hidden label.\n\n```html\n<ids-editor label=\"Demo Editor\" label-state=\"hidden\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor with collapsed label.\n\n```html\n<ids-editor label=\"Demo Editor\" label-state=\"collapsed\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor placeholder.\n\n```html\n<ids-editor label=\"Demo Editor\" placeholder=\"Type some text here...\">\n</ids-editor>\n```\n\nEditor use source formatter\n\n```html\n<ids-editor label=\"Demo Editor\" source-formatter>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor use clickable hyperlink\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <p>Some sample text <a href=\"https://www.example.com/\" class=\"hyperlink\" contenteditable=\"false\" target=\"_blank\">example hyperlink</a></p>\n</ids-editor>\n```\n\nCustom default values in modals (ie. hyperlink modal)\n\n```html\n<ids-editor id=\"editor-demo\" label=\"Demo Editor\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\n```javaScript\nconst modals = {\n  hyperlink: {\n    url: 'http://www.example.com',\n    classes: 'hyperlink',\n    targets: [\n      { text: 'Same Window', value: '' },\n      { text: 'New Window', value: '_blank', selected: true }\n    ],\n    isClickable: false,\n    showIsClickable: true\n  },\n  insertimage: {\n    url: '../assets/images/placeholder-154x120.png',\n    alt: ''\n  }\n};\nconst editorEl = document.querySelector('#editor-demo');\neditorEl.modalElementsValue(modals);\n```\n\n## Settings and Attributes\n\n- `disabled` {boolean} Sets the editor to disabled state\n- `label` {string} Set the editor aria label text\n- `labelHidden` {boolean} Set the label to be hidden or shown\n- `labelRequired` {boolean} Set required indicator (red '*') to be hidden or shown\n- `paragraphSeparator` {string} Set the placeholder text for editor\n- `placeholder` {string} Sets the editor node to be selectable\n- `readonly` {boolean} Sets the editor to readonly state\n- `sourceFormatter` {boolean} Sets to be use source formatter for editor\n- `view` {string|'editor'|'source' } Set the view mode for editor\n\n## Theme-able Parts\n\n- `editor` - allows you to further style the editor element\n- `editor-label` - allows you to further style the editor label element\n- `main-container` - allows you to further style the main container element\n- `toolbar-container` - allows you to further style the toolbar container element\n- `editor-container` - allows you to further style the editor container element\n- `source-container` - allows you to further style the source container element\n\n## Events\n\n- `beforeeditormode` Fires before change view to editor mode, you can return false in the response to veto\n- `aftereditormode` Fires after change view to editor mode\n- `beforesourcemode` Fires before change view to source mode, you can return false in the response to veto\n- `aftersourcemode` Fires after change view to source mode\n- `viewchange` Fires after requested view mode changed\n- `rejectviewchange` Fires if requested view mode reject\n- `beforepaste` Fires before paste, you can return false in the response to veto\n- `afterpaste` Fires after paste content\n- `rejectpaste` Fires if reject paste content\n- `initialize` Fires after initialize\n- `change` Fires after value change\n\n## Methods\n\n- `modalElementsValue(modals: object): HTMLElement` Set default value to each element in modals\n- `sourceTextareaLabel(): string` Get label text for source textarea\n\n## States and Variations (With Code Examples)\n\n- Custom Toolbar: End user can set custom toolbar buttons\n- Disabled: Disabled editor cannot be clicked, hovered, focused or selected\n- Readonly: Editor content readonly\n- Dirty Tracking: Content changes can be track by display dirty icon in editor\n- Validation: Can be check of required validation\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift + Tab</kbd>: This will focus or unfocus the editor.\n- <kbd>Ctrl + B</kbd>: Make text bold.\n- <kbd>Ctrl + I</kbd>: Make text italicize.\n- <kbd>Ctrl + U</kbd>: Make text underline.\n- <kbd>Ctrl + Shift + S</kbd>: Make text strike through.\n- <kbd>Ctrl + Shift + Equal</kbd>: Make text super script.\n- <kbd>Ctrl + Equal</kbd>: Make text sub script.\n- <kbd>Ctrl + Alt + Digit1</kbd>: Make header 1.\n- <kbd>Ctrl + Alt + Digit2</kbd>: Make header 2.\n- <kbd>Ctrl + Alt + Digit3</kbd>: Make header 3.\n- <kbd>Ctrl + Alt + Digit4</kbd>: Make header 4.\n- <kbd>Ctrl + Alt + Digit5</kbd>: Make header 5.\n- <kbd>Ctrl + Alt + Digit6</kbd>: Make header 6.\n- <kbd>Ctrl + Shift + Alt + K</kbd>: Change text fore color.\n- <kbd>Ctrl + Shift + O</kbd>: Insert ordered list.\n- <kbd>Ctrl + Shift + U</kbd>: Insert unordered list.\n- <kbd>Ctrl + Shift + I</kbd>: Insert image.\n- <kbd>Ctrl + K</kbd>: Insert/Update hyperlink.\n- <kbd>Ctrl + Shift + K</kbd>: Make unlink the hyperlink.\n- <kbd>Ctrl + Shift + L</kbd>: Insert horizontal line.\n- <kbd>Ctrl + L</kbd>: Make text align left.\n- <kbd>Ctrl + R</kbd>: Make text align right.\n- <kbd>Ctrl + E</kbd>: Make text align center.\n- <kbd>Ctrl + J</kbd>: Make text align justify.\n- <kbd>Ctrl + Shift + Space</kbd>: Clear formatting.\n- <kbd>Ctrl + Y</kbd>: History redo.\n- <kbd>Ctrl + Z</kbd>: History undo.\n- <kbd>Ctrl + Shift + Backquote</kbd>: Switch editor view mode.\n- <kbd>Ctrl + Backquote</kbd>: Switch source view mode.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Editor have all new markup and classes.\n\n**4.x to 5.x**\n- The Editor component has been changed to a web component and renamed to ids-editor.\n- Markup has changed to a custom element `<ids-editor><div slot=\"content\"><p>Some sample text</p></div></ids-editor>`\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/UoCNFBhmjVZZ9CxLHQ54Mq/IDS-Editor?node-id=1%3A7)\n\n## Accessibility Guidelines\n\n- Editor container contained in the element has a `role=\"textbox\"`, `aria-multiline=\"true\"` and `aria-labelledby`\n- Source container contained textarea with audible label\n\n## Regional Considerations\n\nIn Right To Left Languages the icons, text and alignment will flow to the other side. Labels should be localized in the current language.\n"}},{"name":"ids-editor-templates","description":{"kind":"markdown","value":"# Ids Editor Component\n\n## Description\n\nEditor component let you can control the appearance of your HTML text using the rich text formats. The editor toolbar provides various buttons for editing and formatting your content. You may use the editor component to displayed multiple styles, colors, alignments, or include images and hyperlinks as well.\n\n\n## Use Cases\n\n- Editor component use to rich text formats.\n- To displayed multiple styles, colors and alignments.\n- You may use to include images, hyperlinks and order/un-order lists.\n\n## Terminology\n\n**Toolbar:** Collection of buttons to apply various type of rich text formats.\n**Editor Container:** Editor container implemented using a `contenteditable` element.\n**Source Container:** A textarea element use as container to edit source mode.\n\n## Features (With Code Examples)\n\nA normal editor used as a web component.\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nReadonly editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" readonly>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nDisabled editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" disabled>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nDirty tracking editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" dirty-tracker>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nValidation (required) editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" validate=\"required\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nCustom toolbar with editor component.\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <ids-toolbar slot=\"toolbar\" tabbable=\"true\" type=\"formatter\">\n    <ids-toolbar-section type=\"buttonset\">\n      <ids-button editor-action=\"bold\" square=\"true\" tooltip=\"Toggle Bold Text\">\n        <span class=\"audible\">Bold</span>\n        <ids-icon icon=\"bold\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"italic\" square=\"true\" tooltip=\"Toggle Italic Text\">\n        <span class=\"audible\">Italic</span>\n        <ids-icon icon=\"italic\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"underline\" square=\"true\" tooltip=\"Toggle Underline Text\">\n        <span class=\"audible\">Underline</span>\n        <ids-icon icon=\"underline\"></ids-icon>\n      </ids-button>\n      <ids-separator vertical></ids-separator>\n      <ids-button editor-action=\"sourcemode\" square=\"true\" tooltip=\"View Source\">\n        <span class=\"audible\">View Source</span>\n        <ids-icon icon=\"html\" width=\"38\" viewbox=\"0 0 54 18\"></ids-icon>\n      </ids-button>\n    </ids-toolbar-section>\n  </ids-toolbar>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor init with source mode.\n\n```html\n<ids-editor label=\"Demo Editor\" view=\"source\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor with hidden label.\n\n```html\n<ids-editor label=\"Demo Editor\" label-state=\"hidden\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor with collapsed label.\n\n```html\n<ids-editor label=\"Demo Editor\" label-state=\"collapsed\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor placeholder.\n\n```html\n<ids-editor label=\"Demo Editor\" placeholder=\"Type some text here...\">\n</ids-editor>\n```\n\nEditor use source formatter\n\n```html\n<ids-editor label=\"Demo Editor\" source-formatter>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor use clickable hyperlink\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <p>Some sample text <a href=\"https://www.example.com/\" class=\"hyperlink\" contenteditable=\"false\" target=\"_blank\">example hyperlink</a></p>\n</ids-editor>\n```\n\nCustom default values in modals (ie. hyperlink modal)\n\n```html\n<ids-editor id=\"editor-demo\" label=\"Demo Editor\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\n```javaScript\nconst modals = {\n  hyperlink: {\n    url: 'http://www.example.com',\n    classes: 'hyperlink',\n    targets: [\n      { text: 'Same Window', value: '' },\n      { text: 'New Window', value: '_blank', selected: true }\n    ],\n    isClickable: false,\n    showIsClickable: true\n  },\n  insertimage: {\n    url: '../assets/images/placeholder-154x120.png',\n    alt: ''\n  }\n};\nconst editorEl = document.querySelector('#editor-demo');\neditorEl.modalElementsValue(modals);\n```\n\n## Settings and Attributes\n\n- `disabled` {boolean} Sets the editor to disabled state\n- `label` {string} Set the editor aria label text\n- `labelHidden` {boolean} Set the label to be hidden or shown\n- `labelRequired` {boolean} Set required indicator (red '*') to be hidden or shown\n- `paragraphSeparator` {string} Set the placeholder text for editor\n- `placeholder` {string} Sets the editor node to be selectable\n- `readonly` {boolean} Sets the editor to readonly state\n- `sourceFormatter` {boolean} Sets to be use source formatter for editor\n- `view` {string|'editor'|'source' } Set the view mode for editor\n\n## Theme-able Parts\n\n- `editor` - allows you to further style the editor element\n- `editor-label` - allows you to further style the editor label element\n- `main-container` - allows you to further style the main container element\n- `toolbar-container` - allows you to further style the toolbar container element\n- `editor-container` - allows you to further style the editor container element\n- `source-container` - allows you to further style the source container element\n\n## Events\n\n- `beforeeditormode` Fires before change view to editor mode, you can return false in the response to veto\n- `aftereditormode` Fires after change view to editor mode\n- `beforesourcemode` Fires before change view to source mode, you can return false in the response to veto\n- `aftersourcemode` Fires after change view to source mode\n- `viewchange` Fires after requested view mode changed\n- `rejectviewchange` Fires if requested view mode reject\n- `beforepaste` Fires before paste, you can return false in the response to veto\n- `afterpaste` Fires after paste content\n- `rejectpaste` Fires if reject paste content\n- `initialize` Fires after initialize\n- `change` Fires after value change\n\n## Methods\n\n- `modalElementsValue(modals: object): HTMLElement` Set default value to each element in modals\n- `sourceTextareaLabel(): string` Get label text for source textarea\n\n## States and Variations (With Code Examples)\n\n- Custom Toolbar: End user can set custom toolbar buttons\n- Disabled: Disabled editor cannot be clicked, hovered, focused or selected\n- Readonly: Editor content readonly\n- Dirty Tracking: Content changes can be track by display dirty icon in editor\n- Validation: Can be check of required validation\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift + Tab</kbd>: This will focus or unfocus the editor.\n- <kbd>Ctrl + B</kbd>: Make text bold.\n- <kbd>Ctrl + I</kbd>: Make text italicize.\n- <kbd>Ctrl + U</kbd>: Make text underline.\n- <kbd>Ctrl + Shift + S</kbd>: Make text strike through.\n- <kbd>Ctrl + Shift + Equal</kbd>: Make text super script.\n- <kbd>Ctrl + Equal</kbd>: Make text sub script.\n- <kbd>Ctrl + Alt + Digit1</kbd>: Make header 1.\n- <kbd>Ctrl + Alt + Digit2</kbd>: Make header 2.\n- <kbd>Ctrl + Alt + Digit3</kbd>: Make header 3.\n- <kbd>Ctrl + Alt + Digit4</kbd>: Make header 4.\n- <kbd>Ctrl + Alt + Digit5</kbd>: Make header 5.\n- <kbd>Ctrl + Alt + Digit6</kbd>: Make header 6.\n- <kbd>Ctrl + Shift + Alt + K</kbd>: Change text fore color.\n- <kbd>Ctrl + Shift + O</kbd>: Insert ordered list.\n- <kbd>Ctrl + Shift + U</kbd>: Insert unordered list.\n- <kbd>Ctrl + Shift + I</kbd>: Insert image.\n- <kbd>Ctrl + K</kbd>: Insert/Update hyperlink.\n- <kbd>Ctrl + Shift + K</kbd>: Make unlink the hyperlink.\n- <kbd>Ctrl + Shift + L</kbd>: Insert horizontal line.\n- <kbd>Ctrl + L</kbd>: Make text align left.\n- <kbd>Ctrl + R</kbd>: Make text align right.\n- <kbd>Ctrl + E</kbd>: Make text align center.\n- <kbd>Ctrl + J</kbd>: Make text align justify.\n- <kbd>Ctrl + Shift + Space</kbd>: Clear formatting.\n- <kbd>Ctrl + Y</kbd>: History redo.\n- <kbd>Ctrl + Z</kbd>: History undo.\n- <kbd>Ctrl + Shift + Backquote</kbd>: Switch editor view mode.\n- <kbd>Ctrl + Backquote</kbd>: Switch source view mode.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Editor have all new markup and classes.\n\n**4.x to 5.x**\n- The Editor component has been changed to a web component and renamed to ids-editor.\n- Markup has changed to a custom element `<ids-editor><div slot=\"content\"><p>Some sample text</p></div></ids-editor>`\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/UoCNFBhmjVZZ9CxLHQ54Mq/IDS-Editor?node-id=1%3A7)\n\n## Accessibility Guidelines\n\n- Editor container contained in the element has a `role=\"textbox\"`, `aria-multiline=\"true\"` and `aria-labelledby`\n- Source container contained textarea with audible label\n\n## Regional Considerations\n\nIn Right To Left Languages the icons, text and alignment will flow to the other side. Labels should be localized in the current language.\n"}},{"name":"ids-editor","attributes":[{"name":"validationElems","values":[]},{"name":"reqInitialize","values":[]},{"name":"isFormComponent","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"#modals","description":"Modals attached to editor.","values":[]},{"name":"#paragraphSeparator","description":"Current paragraph separator.","values":[]},{"name":"#savedSelection","description":"Saved current selection ranges.","values":[]},{"name":"#elems","description":"Cache elements use most.","values":[]},{"name":"input","values":[]},{"name":"labelEl","values":[]},{"name":"#actions","description":"List of actions can be execute with editor.\nextra actions get added in `#initContent()`","values":[]},{"name":"#resizeObserver","description":"Attach the resize observer.","values":[]},{"name":"value","description":"Get editor current value","values":[]},{"name":"disabled","description":"Sets the editor to disabled","values":[]},{"name":"paragraphSeparator","description":"Set the paragraph separator for editor","values":[]},{"name":"pasteAsPlainText","description":"Sets to be paste as plain text for editor","values":[]},{"name":"placeholder","description":"Set the placeholder text for editor","values":[]},{"name":"readonly","description":"Sets the editor to readonly","values":[]},{"name":"sourceFormatter","description":"Sets to be use source formatter for editor","values":[]},{"name":"view","description":"Set the view mode for editor","values":[]}],"description":{"kind":"markdown","value":"# Ids Editor Component\n\n## Description\n\nEditor component let you can control the appearance of your HTML text using the rich text formats. The editor toolbar provides various buttons for editing and formatting your content. You may use the editor component to displayed multiple styles, colors, alignments, or include images and hyperlinks as well.\n\n\n## Use Cases\n\n- Editor component use to rich text formats.\n- To displayed multiple styles, colors and alignments.\n- You may use to include images, hyperlinks and order/un-order lists.\n\n## Terminology\n\n**Toolbar:** Collection of buttons to apply various type of rich text formats.\n**Editor Container:** Editor container implemented using a `contenteditable` element.\n**Source Container:** A textarea element use as container to edit source mode.\n\n## Features (With Code Examples)\n\nA normal editor used as a web component.\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nReadonly editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" readonly>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nDisabled editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" disabled>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nDirty tracking editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" dirty-tracker>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nValidation (required) editor component.\n\n```html\n<ids-editor label=\"Demo Editor\" validate=\"required\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nCustom toolbar with editor component.\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <ids-toolbar slot=\"toolbar\" tabbable=\"true\" type=\"formatter\">\n    <ids-toolbar-section type=\"buttonset\">\n      <ids-button editor-action=\"bold\" square=\"true\" tooltip=\"Toggle Bold Text\">\n        <span class=\"audible\">Bold</span>\n        <ids-icon icon=\"bold\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"italic\" square=\"true\" tooltip=\"Toggle Italic Text\">\n        <span class=\"audible\">Italic</span>\n        <ids-icon icon=\"italic\"></ids-icon>\n      </ids-button>\n      <ids-button editor-action=\"underline\" square=\"true\" tooltip=\"Toggle Underline Text\">\n        <span class=\"audible\">Underline</span>\n        <ids-icon icon=\"underline\"></ids-icon>\n      </ids-button>\n      <ids-separator vertical></ids-separator>\n      <ids-button editor-action=\"sourcemode\" square=\"true\" tooltip=\"View Source\">\n        <span class=\"audible\">View Source</span>\n        <ids-icon icon=\"html\" width=\"38\" viewbox=\"0 0 54 18\"></ids-icon>\n      </ids-button>\n    </ids-toolbar-section>\n  </ids-toolbar>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor init with source mode.\n\n```html\n<ids-editor label=\"Demo Editor\" view=\"source\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor with hidden label.\n\n```html\n<ids-editor label=\"Demo Editor\" label-state=\"hidden\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor with collapsed label.\n\n```html\n<ids-editor label=\"Demo Editor\" label-state=\"collapsed\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor placeholder.\n\n```html\n<ids-editor label=\"Demo Editor\" placeholder=\"Type some text here...\">\n</ids-editor>\n```\n\nEditor use source formatter\n\n```html\n<ids-editor label=\"Demo Editor\" source-formatter>\n  <p>Some sample text</p>\n</ids-editor>\n```\n\nEditor use clickable hyperlink\n\n```html\n<ids-editor label=\"Demo Editor\">\n  <p>Some sample text <a href=\"https://www.example.com/\" class=\"hyperlink\" contenteditable=\"false\" target=\"_blank\">example hyperlink</a></p>\n</ids-editor>\n```\n\nCustom default values in modals (ie. hyperlink modal)\n\n```html\n<ids-editor id=\"editor-demo\" label=\"Demo Editor\">\n  <p>Some sample text</p>\n</ids-editor>\n```\n\n```javaScript\nconst modals = {\n  hyperlink: {\n    url: 'http://www.example.com',\n    classes: 'hyperlink',\n    targets: [\n      { text: 'Same Window', value: '' },\n      { text: 'New Window', value: '_blank', selected: true }\n    ],\n    isClickable: false,\n    showIsClickable: true\n  },\n  insertimage: {\n    url: '../assets/images/placeholder-154x120.png',\n    alt: ''\n  }\n};\nconst editorEl = document.querySelector('#editor-demo');\neditorEl.modalElementsValue(modals);\n```\n\n## Settings and Attributes\n\n- `disabled` {boolean} Sets the editor to disabled state\n- `label` {string} Set the editor aria label text\n- `labelHidden` {boolean} Set the label to be hidden or shown\n- `labelRequired` {boolean} Set required indicator (red '*') to be hidden or shown\n- `paragraphSeparator` {string} Set the placeholder text for editor\n- `placeholder` {string} Sets the editor node to be selectable\n- `readonly` {boolean} Sets the editor to readonly state\n- `sourceFormatter` {boolean} Sets to be use source formatter for editor\n- `view` {string|'editor'|'source' } Set the view mode for editor\n\n## Theme-able Parts\n\n- `editor` - allows you to further style the editor element\n- `editor-label` - allows you to further style the editor label element\n- `main-container` - allows you to further style the main container element\n- `toolbar-container` - allows you to further style the toolbar container element\n- `editor-container` - allows you to further style the editor container element\n- `source-container` - allows you to further style the source container element\n\n## Events\n\n- `beforeeditormode` Fires before change view to editor mode, you can return false in the response to veto\n- `aftereditormode` Fires after change view to editor mode\n- `beforesourcemode` Fires before change view to source mode, you can return false in the response to veto\n- `aftersourcemode` Fires after change view to source mode\n- `viewchange` Fires after requested view mode changed\n- `rejectviewchange` Fires if requested view mode reject\n- `beforepaste` Fires before paste, you can return false in the response to veto\n- `afterpaste` Fires after paste content\n- `rejectpaste` Fires if reject paste content\n- `initialize` Fires after initialize\n- `change` Fires after value change\n\n## Methods\n\n- `modalElementsValue(modals: object): HTMLElement` Set default value to each element in modals\n- `sourceTextareaLabel(): string` Get label text for source textarea\n\n## States and Variations (With Code Examples)\n\n- Custom Toolbar: End user can set custom toolbar buttons\n- Disabled: Disabled editor cannot be clicked, hovered, focused or selected\n- Readonly: Editor content readonly\n- Dirty Tracking: Content changes can be track by display dirty icon in editor\n- Validation: Can be check of required validation\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift + Tab</kbd>: This will focus or unfocus the editor.\n- <kbd>Ctrl + B</kbd>: Make text bold.\n- <kbd>Ctrl + I</kbd>: Make text italicize.\n- <kbd>Ctrl + U</kbd>: Make text underline.\n- <kbd>Ctrl + Shift + S</kbd>: Make text strike through.\n- <kbd>Ctrl + Shift + Equal</kbd>: Make text super script.\n- <kbd>Ctrl + Equal</kbd>: Make text sub script.\n- <kbd>Ctrl + Alt + Digit1</kbd>: Make header 1.\n- <kbd>Ctrl + Alt + Digit2</kbd>: Make header 2.\n- <kbd>Ctrl + Alt + Digit3</kbd>: Make header 3.\n- <kbd>Ctrl + Alt + Digit4</kbd>: Make header 4.\n- <kbd>Ctrl + Alt + Digit5</kbd>: Make header 5.\n- <kbd>Ctrl + Alt + Digit6</kbd>: Make header 6.\n- <kbd>Ctrl + Shift + Alt + K</kbd>: Change text fore color.\n- <kbd>Ctrl + Shift + O</kbd>: Insert ordered list.\n- <kbd>Ctrl + Shift + U</kbd>: Insert unordered list.\n- <kbd>Ctrl + Shift + I</kbd>: Insert image.\n- <kbd>Ctrl + K</kbd>: Insert/Update hyperlink.\n- <kbd>Ctrl + Shift + K</kbd>: Make unlink the hyperlink.\n- <kbd>Ctrl + Shift + L</kbd>: Insert horizontal line.\n- <kbd>Ctrl + L</kbd>: Make text align left.\n- <kbd>Ctrl + R</kbd>: Make text align right.\n- <kbd>Ctrl + E</kbd>: Make text align center.\n- <kbd>Ctrl + J</kbd>: Make text align justify.\n- <kbd>Ctrl + Shift + Space</kbd>: Clear formatting.\n- <kbd>Ctrl + Y</kbd>: History redo.\n- <kbd>Ctrl + Z</kbd>: History undo.\n- <kbd>Ctrl + Shift + Backquote</kbd>: Switch editor view mode.\n- <kbd>Ctrl + Backquote</kbd>: Switch source view mode.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Editor have all new markup and classes.\n\n**4.x to 5.x**\n- The Editor component has been changed to a web component and renamed to ids-editor.\n- Markup has changed to a custom element `<ids-editor><div slot=\"content\"><p>Some sample text</p></div></ids-editor>`\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/UoCNFBhmjVZZ9CxLHQ54Mq/IDS-Editor?node-id=1%3A7)\n\n## Accessibility Guidelines\n\n- Editor container contained in the element has a `role=\"textbox\"`, `aria-multiline=\"true\"` and `aria-labelledby`\n- Source container contained textarea with audible label\n\n## Regional Considerations\n\nIn Right To Left Languages the icons, text and alignment will flow to the other side. Labels should be localized in the current language.\n"}},{"name":"ids-error-page","attributes":[{"name":"icon","description":"Get the icon","values":[]},{"name":"label","description":"Get the label","values":[]},{"name":"description","description":"Get the description text","values":[]},{"name":"buttonText","description":"Get the button text","values":[]},{"name":"ariaLabelContent","description":"Used for ARIA Labels and other content","values":[]},{"name":"shouldUpdate","values":[]},{"name":"onButtonClick","values":[]},{"name":"globalKeydownListener","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"buttons","values":[]},{"name":"fullsize","values":[]},{"name":"overlay","values":[]},{"name":"messageTitle","values":[]},{"name":"#visible","values":[]},{"name":"visible","values":[]},{"name":"#setFocusIfVisible","values":[]}],"description":{"kind":"markdown","value":"## Ids Error Page Component\n\nThis example shows how to render a page in an IDS Error Page that shows an unknown error. Ideally its best to avoid these types of errors in your application but when an unexpected error occurs you can use this component to render information about the error. The general use case is similar to a 40(x) error page.\n\nThe IDS Error Page Component builds on top of the [Modal]('../ids-modal/README.md'). It also utilizes [EmptyMessage]('../ids-empty-message/README.md')\n\n## Features (With Code Examples)\n\n```html\n<ids-error-page\n    id=\"error-page-1\"\n    visible=\"true\"\n    icon=\"empty-error-loading\"\n    label=\"Access Denied\"\n    description=\"SunSystems Configuration Manager access has been denied.\"\n    button-text=\"Return\"\n></ids-error-page>\n```\n\n## Settings (Attributes)\n\n- `icon` {string} the icon to display in the error page\n- `label` {string} the main title of the error\n- `description` {string} the description of the error\n- `button-text` {string} the text for the action button\n## Terminology\n\n- **action-button**: button in the error page that triggers a the `action-button` event when clicked or touched.\n- **visible**: {boolean} shows or hides the error page based on value\n\n## Accessibility\n\n- All of the page should be readable and contain the information the screen reader users need.\n\n## Keyboard Shortcuts\n\n- Not Applicable as this is a static page\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- This is a new concept that did not exist in 3.x\n\n**4.x to 5.x**\n- The ErrorPage component has been changed to a web component and renamed to `ids-error-page`.\n- Markup has changed to a custom element `<ids-error-page>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n- The options are all are set via properties/attributes.\n"}},{"name":"ids-empty-message","attributes":[{"name":"icon","values":[]}],"description":{"kind":"markdown","value":"# Ids Empty Message Component\n\n## Description\n\nThe IDS Empty Message component is a layout pattern for indicating there is no data for the object. Empty messages appear in ids-cards, ids-data-grid and other places like forms. The component supports action buttons, provides styling for a label and secondary description and optional empty-message specific icons.\n\n## Use Cases\n\n- When no content is present, an empty message is useful to communicate information & action. It is critical to communicate why it’s empty and what the user can do.\n## Terminology\n- **icon**: this property when included and provided with a supported icon id will display the chosen icon in the empty message format\n- **label**: this is a web component slot, the contents of this slot are treated as a primary label and are styled accordingly\n- **description**: this is a web component slot, the contents of this slot are formatted as secondary text in the ids-empty-message format\n- **button**: this is a slot that is used for any button inputs for the empty message\n\n## Themeable Parts\n\n- `container` allows for the styling of the container element\n\n## Features\n\nA simple implementation of the empty-message component\n\n```html\n  <ids-empty-message icon=\"empty-no-tasks\">\n    <ids-text type=\"h2\" font-size=\"20\" label=\"true\" slot=\"label\">Document Management</ids-text>\n    <ids-text label=\"true\" slot=\"description\">Description of empty message that explains why.</ids-text>\n    <ids-button class=\"action-button\" slot=\"button\" appearance=\"primary\">\n      <span>BUTTON NAME</span>\n    </ids-button>\n  </ids-empty-message>\n```\n\nWhen making use of the `icon` property, it is important to remember that only empty message specific icon options are valid. Here is a complete list:\n\n`empty-error-loading`\n`empty-generic`\n`empty-new-project`\n`empty-no-alerts`\n`empty-no-analytics`\n`empty-no-budget`\n`empty-no-data`\n`empty-no-events`\n`empty-no-notes`\n`empty-no-orders`\n`empty-no-tasks`\n`empty-no-users`\n`empty-search-data`\n\n## Settings and Attributes\n\n- **icon** the attribute for adding an icon to the empty message, also has bound property with getter/setter\n\n## Accessibility\n\nIt is important to remember to always include a label or description with an Icon for screen reader users.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- This is a new concept that did not exist in 3.x\n\n**4.x to 5.x**\n- The EmptyMessage component has been changed to a web component and renamed to `<ids-empty-message>`.\n- Markup has changed to a custom element `<ids-empty-message>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n- The icon, label, description and button-text are set via properties/attributes.\n"}},{"name":"ids-exandable-area-attributes","description":{"kind":"markdown","value":"# Ids Expandable Area Component\n\n## Description\n\nThe IDS Expandable Area component is a UI pattern that is comprised of a title, content and a toggle button or link for expanding and collapsing.\n\n## Use Cases\n\nExpandable areas are crucial to displaying only important information to the user. This can be especially useful in managing application pages with many sections, forms and other content. Users may benefit from having to sort through less information.\n\n## Terminology\n\n- **ids-expandable-area**: Container for expandable areas. The default version consists of 4 slots. `header`, `pane`, `expander-default` and `expander-expanded`.\n- **header**: Usually contains an `ids-text` component and displays the title of the expandable area. When type is set to `toggle-btn` the header will container an `ids-toggle-button` and acts as the control for expanding and collapsing.\n- **pane**: This slot contains the content for the expandable area. Usually contains an `ids-text` component but can be filled with anything within reason, such as, forms.\n- **expander-default**: Acts as the control for expanding. Contains the text for the collapsed state.\n- **expander-expanded**: Acts as the control for collapsing. Contains the text for the expanded state.\n\n## Themeable Parts\n\n- `container` allows you to further style the main container element\n- `header` allows you to further style the header element\n- `pane` allows you to further style the pane element\n- `pane-content` allows you to further style the content pane\n- `footer` allows you to further style the footer element\n\n## Events\n\n- `beforeexpand` Vetoable event triggered before expanding pane\n- `beforecollapse` Vetoable event triggered before collapsing pane\n- `expand` Triggered when pane starts expanding\n- `collapse` Triggered when pane starts collapsing\n- `afterexpand` Triggered after expand css transition\n- `aftercollapse` Triggered after collapse css transition\n\n## Features (With Code Examples)\n\nIds Expandable Area - Default\n\n```html\n<ids-expandable-area>\n    <ids-text slot=\"header\" font-size=\"16\">Procurement</ids-text>\n    <ids-text slot=\"pane\" font-size=\"14\">\n        Ubiquitous out-of-the-box, scalable; communities disintermediate beta-test, enable utilize markets dynamic\n        infomediaries virtual data-driven synergistic aggregate infrastructures, \"cross-platform, feeds\n        bleeding-edge tagclouds.\" Platforms extend interactive B2C benchmark proactive, embrace e-markets,\n        transition generate peer-to-peer.\n    </ids-text>\n    <ids-text slot=\"expander-default\" font-size=\"14\">Show More</ids-text>\n    <ids-text slot=\"expander-expanded\" font-size=\"14\">Show Less</ids-text>\n</ids-expandable-area>\n```\n\nIds Expandable Area - Toggle Button\n\n```html\n<ids-expandable-area type=\"toggle-btn\">\n    <ids-toggle-button\n        slot=\"header\"\n        id=\"test-toggle-button\"\n        icon-on=\"caret-up\"\n        icon-off=\"caret-down\"\n        text-off=\"Employee\"\n        text-on=\"Employee\"\n    >\n        <span></span>\n        <ids-icon icon=\"settings\"></ids-icon>\n    </ids-toggle-button>\n    <ids-text slot=\"pane\" font-size=\"14\">\n        Ubiquitous out-of-the-box, scalable; communities disintermediate beta-test, enable utilize markets dynamic\n        infomediaries virtual data-driven synergistic aggregate infrastructures, \"cross-platform, feeds\n        bleeding-edge tagclouds.\" Platforms extend interactive B2C benchmark proactive, embrace e-markets,\n        transition generate peer-to-peer.\n    </ids-text>\n</ids-expandable-area>\n```\n\n## States and Variations\n\n- **Collapsed**: The state where the expandable area’s content is not visible. Sometimes it serves as the default state, this state can also be remembered by the application.\n- **Expanded**: The state where the expandable area’s content is visible. Sometimes it serves as the default state, this state can also be remembered by the application.\n\n## Keyboard Guidelines\n\n- **Enter or Space**: When focus is on an `expander`, this keystroke toggles the expansion of the corresponding expandable area panel. If collapsed, the panel is expanded, and its aria-expanded state is set to true. If expanded, the panel is collapsed and its aria-expanded state is set to false.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Expandable Area and Field Set were separated\n\n**4.x to 5.x**\n- The ExpandableArea component has been changed to a web component and renamed to `<ids-expandable-area>`.\n- Markup has changed to a custom element `<ids-expandable-area` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n- The settings are changed and uses flexible slots\n- The events now use native events / custom events\n"}},{"name":"ids-expandable-area","attributes":[{"name":"vetoableEventTypes","values":[]},{"name":"expander","values":[]},{"name":"expanderDefault","values":[]},{"name":"expanderExpanded","values":[]},{"name":"pane","values":[]},{"name":"type","description":"Set the type","values":[]},{"name":"expanded","description":"Set the expanded property","values":[]},{"name":"expandStyle","description":"Set the expanded property","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# Ids Expandable Area Component\n\n## Description\n\nThe IDS Expandable Area component is a UI pattern that is comprised of a title, content and a toggle button or link for expanding and collapsing.\n\n## Use Cases\n\nExpandable areas are crucial to displaying only important information to the user. This can be especially useful in managing application pages with many sections, forms and other content. Users may benefit from having to sort through less information.\n\n## Terminology\n\n- **ids-expandable-area**: Container for expandable areas. The default version consists of 4 slots. `header`, `pane`, `expander-default` and `expander-expanded`.\n- **header**: Usually contains an `ids-text` component and displays the title of the expandable area. When type is set to `toggle-btn` the header will container an `ids-toggle-button` and acts as the control for expanding and collapsing.\n- **pane**: This slot contains the content for the expandable area. Usually contains an `ids-text` component but can be filled with anything within reason, such as, forms.\n- **expander-default**: Acts as the control for expanding. Contains the text for the collapsed state.\n- **expander-expanded**: Acts as the control for collapsing. Contains the text for the expanded state.\n\n## Themeable Parts\n\n- `container` allows you to further style the main container element\n- `header` allows you to further style the header element\n- `pane` allows you to further style the pane element\n- `pane-content` allows you to further style the content pane\n- `footer` allows you to further style the footer element\n\n## Events\n\n- `beforeexpand` Vetoable event triggered before expanding pane\n- `beforecollapse` Vetoable event triggered before collapsing pane\n- `expand` Triggered when pane starts expanding\n- `collapse` Triggered when pane starts collapsing\n- `afterexpand` Triggered after expand css transition\n- `aftercollapse` Triggered after collapse css transition\n\n## Features (With Code Examples)\n\nIds Expandable Area - Default\n\n```html\n<ids-expandable-area>\n    <ids-text slot=\"header\" font-size=\"16\">Procurement</ids-text>\n    <ids-text slot=\"pane\" font-size=\"14\">\n        Ubiquitous out-of-the-box, scalable; communities disintermediate beta-test, enable utilize markets dynamic\n        infomediaries virtual data-driven synergistic aggregate infrastructures, \"cross-platform, feeds\n        bleeding-edge tagclouds.\" Platforms extend interactive B2C benchmark proactive, embrace e-markets,\n        transition generate peer-to-peer.\n    </ids-text>\n    <ids-text slot=\"expander-default\" font-size=\"14\">Show More</ids-text>\n    <ids-text slot=\"expander-expanded\" font-size=\"14\">Show Less</ids-text>\n</ids-expandable-area>\n```\n\nIds Expandable Area - Toggle Button\n\n```html\n<ids-expandable-area type=\"toggle-btn\">\n    <ids-toggle-button\n        slot=\"header\"\n        id=\"test-toggle-button\"\n        icon-on=\"caret-up\"\n        icon-off=\"caret-down\"\n        text-off=\"Employee\"\n        text-on=\"Employee\"\n    >\n        <span></span>\n        <ids-icon icon=\"settings\"></ids-icon>\n    </ids-toggle-button>\n    <ids-text slot=\"pane\" font-size=\"14\">\n        Ubiquitous out-of-the-box, scalable; communities disintermediate beta-test, enable utilize markets dynamic\n        infomediaries virtual data-driven synergistic aggregate infrastructures, \"cross-platform, feeds\n        bleeding-edge tagclouds.\" Platforms extend interactive B2C benchmark proactive, embrace e-markets,\n        transition generate peer-to-peer.\n    </ids-text>\n</ids-expandable-area>\n```\n\n## States and Variations\n\n- **Collapsed**: The state where the expandable area’s content is not visible. Sometimes it serves as the default state, this state can also be remembered by the application.\n- **Expanded**: The state where the expandable area’s content is visible. Sometimes it serves as the default state, this state can also be remembered by the application.\n\n## Keyboard Guidelines\n\n- **Enter or Space**: When focus is on an `expander`, this keystroke toggles the expansion of the corresponding expandable area panel. If collapsed, the panel is expanded, and its aria-expanded state is set to true. If expanded, the panel is collapsed and its aria-expanded state is set to false.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Expandable Area and Field Set were separated\n\n**4.x to 5.x**\n- The ExpandableArea component has been changed to a web component and renamed to `<ids-expandable-area>`.\n- Markup has changed to a custom element `<ids-expandable-area` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n- The settings are changed and uses flexible slots\n- The events now use native events / custom events\n"}},{"name":"ids-fieldset","attributes":[],"description":{"kind":"markdown","value":"# Ids Fieldset Component\n\n## Description\n\nField sets are used to group various content or input fields into a section. They can include various input fields and other components as well. They are often used as building block of forms.\n\n## Use Cases\n\n- Use when you need form sections\n\n## Terminology\n\n- **Fieldset**: An html <fieldset> tag is used to group related elements in a form.\n\n## Features (With Code Examples)\n\nAn IdsFieldset inside a form element. Best practice is to use an IdsText element inside the legend possibly with a type like h2.\n\n```html\n<form>\n  <ids-fieldset>\n    <legend><ids-text font-size=\"24\" type=\"h2\">Company Information</ids-text></legend>\n    <ids-input type=\"text\" label=\"Company Name\" id=\"company-name\"></ids-input>\n    <ids-input type=\"text\" label=\"Company Type\" id=\"type\"></ids-input>\n    <ids-input type=\"text\" label=\"Company Address\" id=\"company-address\"></ids-input>\n    <ids-checkbox label=\"Checked\" checked=\"true\"></ids-checkbox>\n    <ids-button appearance=\"primary\">Submit</ids-button>\n  </ids-fieldset>\n</form>\n```\n\n## Themeable Parts\n\n- `fieldset` allows you to further style the fieldset HTML element in the slot\n\n## Responsive Guidelines\n\nField sets have a default responsive behavior to move from two columns to one at our mobile breakpoints. The behavior is not limited to this, however, it is important to keep in mind the complexity that a multitude of content columns can bring to an application experience.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Removed the expand/collapse button, Changed class inforFieldSetLabel and inforFieldSet\n\n**4.x to 5.x**\n- The fieldset component has been changed to a web component and renamed to `<ids-fieldset>`.\n- Markup has changed to a custom element `<ids-fieldset>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n- The uses flexible slots for content\n\n## Regional Considerations\n\nThe fieldset will flip in in Right To Left languages.\n"}},{"name":"ids-form","attributes":[{"name":"compact","description":"Sets the compact attribute","values":[]},{"name":"fieldHeight","description":"Set the fieldHeight (height) of input","values":[]},{"name":"submitButton","description":"Attached a button to the form to submit the form.","values":[]},{"name":"idsComponents","description":"Returns an array containing only IdsElements","values":[]},{"name":"formComponents","description":"Returns an array containing only Ids Elements that are considered form components.","values":[]},{"name":"isDirty","description":"Return if and form fields are dirty or not","values":[]},{"name":"dirtyFormComponents","description":"Returs all dirty form components.","values":[]},{"name":"isValid","description":"Return if the form is valid or not","values":[]},{"name":"errorFormComponents","description":"Return the inputs with validation errors","values":[]}],"description":{"kind":"markdown","value":"# Ids Form Component\n\n## Description\n\nThe Form component is an Ids Web Component that provides some functionality similar to an Html form elements. Form adds the ability to link a submit button. When the form is submitted the submit event is fired in which you can do what is needed with the form data. The form also allows you to  toggle the `compact` mode. And get which form fields have been changed (dirty) and reset this. You can also see which fields have errors with the API. The layout of the page is handled by the `ids-layout-grid` component.\n\n## Use Cases\n\n- When you want to submit a group of form data to the backend\n- When you want to know which fields in a form are dirty or invalid.\n\n## Terminology\n\n- **Form**: An HTML form is used to collect user input. The user input is most often sent to a server for processing.\n- **Validation Messages**: Input errors a field might have\n- **isDirty**:  Form or field has been changed from its original value\n- **inValid**: Form or field has one or more errors\n\n## Features (With Code Examples)\n\nA simple form web component would have an `id` and a `submit-button` property that links to the button on the page. The submit button should be a primary type of button. You might also set `compact` mode if you have a large form and not much space, but its recommended to use the larger/normal size fields in most cases, and for better mobile experience.\n\n```html\n    <ids-form compact=\"false\" submit-button=\"btn-submit\" id=\"sample-form\">\n      <ids-layout-grid cols=\"2\" gap=\"md\">\n        <ids-layout-grid-cell>\n          <ids-input id=\"field-1\" label=\"Field One\"></ids-input>\n          <ids-input id=\"field-2\" label=\"Field Two\"></ids-input>\n\n          <ids-button id=\"btn-submit\" appearance=\"primary\">\n            <span>Submit</span>\n          </ids-button>\n        </ids-layout-grid-cell>\n        <ids-layout-grid-cell>\n          <ids-input id=\"field-3\" label=\"Field Three\"></ids-input>\n          <ids-input id=\"field-4\" label=\"Field Four\"></ids-input>\n\n        </ids-layout-grid-cell>\n      </ids-layout-grid>\n    </ids-form>\n```\n\n## Class Hierarchy\n\n- IdsForm\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n\n## Settings (Attributes)\n\n- `compact` {boolean} Turns on or off the compact setting to reduce all form components heigh and padding.\n- `name` {string} Adds a name to the form, this is only used for possible naming.\n- `submit-button` {string} Sets the id of the submit button, this button will fire a submit event when clicked.\n\n## Events\n\n- `submit` Fires when the form is submitted / the submit button is clicked. In the event data you will get all components in the form of type formComponent and the form data including, value, oldValue, dirty info and validation info.\n\n## Getters / Methods\n\n- `errorFormComponents` Returns all form components in error.\n- `isValid` Returns true if any form components are in error.\n- `dirtyFormComponents` Returns all form components that have been changed from their original value.\n- `isDirty` Returns true if any form components are dirty.\n- `resetDirtyTracker` Resets the dirty tracker for all form components.\n- `formComponents` Returns all form components of type formComponent.\n- `idsComponents` Returns all ids components in the form.\n- `checkValidation` Runs validation all form fields\n\n## Themeable Parts\n\n- `form` allows you style the internal form element if needed\n\n## States and Variations\n\n- Dirty\n- Error\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>: Allows you to tab around the form components.\n- <kbd>Enter</kbd>: If on the button with submit the form. We might later allow enter to submit the form from anywhere in the form. If this is requested.\n\n## Responsive Guidelines\n\n- See `ids-layout-grid` for details as this is the layout driver for forms\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Forms were first implemented in v4.0.0 in this version you just used a `<form>` element.\n\n**4.x to 5.x**\n\n- Forms are now custom elements `<ids-form>...</ids-form>`\n- If using events events are now plain JS events. `submit`\n- Folks using reactive forms in angular will need to give us feedback.\n- The previous version just had forms as layouts, now the form has more functionality.\n\n## Designs\n\n[Design Specs 4.5](https://www.figma.com/file/yaJ8mJrqRRej8oTsd6iT8P/IDS-(SoHo)-Component-Library-v4.5?node-id=760%3A771)\n\n## Regional Considerations\n\nLabels should be localized in the current language. The fields in the form will flip the direction of the fields but these are details of the `ids-layout-grid` component.\n"}},{"name":"ids-header","attributes":[{"name":"color","description":"Sets the color attribute","values":[]}],"description":{"kind":"markdown","value":"# Ids Header\n\n## Description\n\nDisplays identifying information for a given data set. Best for identifying the main object or data set in a given view.\n\n## Settings and Attributes\n\n- `color` {string} Sets the header background color\n- `mode` {string} Sets the theme mode\n- `version` {string} Sets the theme version\n\n## Code Examples\n\nA basic use case of the default ids header.\n```html\n<ids-header>\n  <ids-text font-size=\"12\" type=\"h1\">Ids Header</ids-text>\n</ids-header>\n```\nHeader components can contain other navigation components, such as [IdsBreadcrumb](../ids-breadcrumb/README.md) and `[IdsToolbar](../ids-toolbar/README.md):\n\n```html\n<ids-header>\n  <ids-toolbar id=\"my-toolbar\">\n    <ids-toolbar-section type=\"title\">\n      <ids-text font-size=\"20\">My Header</ids-text>\n      <ids-text font-size=\"14\">With some extra information below</ids-text>\n    </ids-toolbar-section>\n    <ids-toolbar-section type=\"buttonset\" align=\"end\">\n      <ids-button id=\"button-1\" role=\"button\">\n        <span>Text</span>\n      </ids-button>\n      <ids-button id=\"button-2\">\n        <span class=\"audible\">Settings</span>\n        <ids-icon icon=\"settings\"></ids-icon>\n      </ids-button>\n    </ids-toolbar-section>\n  </ids-toolbar>\n</ids-header>\n```\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Replaces Module Header\n- Has entirely different structure with no direct mapping\n\n**4.x to 5.x**\n- The header component has been changed to a web component and renamed to `<ids-header>`.\n- Markup has changed to a custom element `<ids-header>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n- The uses ids-toolbar component for content\n- The <ids-header></ids-header> custom element has a color attribute that can be applied to personalize the background color.\n- Deprecated: Alternate breadcrumbs and alternate wizard and alternate tabs\n"}},{"name":"ids-hidden","attributes":[{"name":"hideDown","description":"Get the hideDown attribute","values":[]},{"name":"hideUp","description":"Get the hideUp attribute","values":[]},{"name":"visible","description":"Get the visible attribute","values":[]},{"name":"condition","description":"Get the compare condition","values":[]},{"name":"value","description":"Get the compare value","values":[]}],"description":{"kind":"markdown","value":"# Ids Hidden Component\n\n## Description\n\nThe IDS Hidden `ids-hidden` is a wrapper component that can be used to responsively hide children components based on selected breakpoints.\n\n## Use Cases\n\nCreate responsive layouts or hide/show components based on selected breakpoints\n\n## Terminology\n\n- **hide-up**: An attribute that when set with a breakpoint size will hide when the min-width breakpoint is reached.\n- **hide-down**: An attribute that when set with a breakpoint size will hide when the max-width breakpoint is reached.\n- **breakpoints**:\n- xxl: 1440px\n- xl: 1280px\n- l: 1024px\n- m: 840px\n- s: 600px\n- xs: 360px\n\n## Features (With Code Examples)\n\n```html\n<ids-hidden id=\"hidden-1\" hide-up=\"md\">\n  <ids-card>\n    <div slot=\"card-header\">\n      <ids-text font-size=\"20\" type=\"h2\" overflow=\"ellipsis\" tooltip=\"true\">Card Title One</ids-text>\n    </div>\n    <div slot=\"card-content\">\n    </div>\n  </ids-card>\n</ids-hidden>\n\n<ids-hidden id=\"hidden-2\" hide-down=\"md\">\n  <ids-card>\n    <div slot=\"card-header\">\n      <ids-text font-size=\"20\" type=\"h2\" overflow=\"ellipsis\" tooltip=\"true\">Card Title Two</ids-text>\n    </div>\n    <div slot=\"card-content\">\n    </div>\n  </ids-card>\n</ids-hidden>\n```\n\n## States and Variations\n\n- **visible**: The state where `ids-hidden` is visible. Is set set by the `visible` attribute.\n- **hidden**: The state where `ids-hidden` is hidden.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**4.x to 5.x**\n- The hidden component replaces the visibility functionality https://main-enterprise.demo.design.infor.com/components/visibility/list\n- Markup has changed to a custom element `<ids-hidden>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n"}},{"name":"ids-hierarchy-item","attributes":[{"name":"#prevSelected","description":"store the previous \"selected\" value to prevent double firing events","values":[]},{"name":"childElements","values":[]},{"name":"expander","values":[]},{"name":"dropdownMenu","values":[]},{"name":"leaf","values":[]},{"name":"nestedItemContainer","values":[]},{"name":"expanded","description":"Set the value of the expanded attribute","values":[]},{"name":"selected","description":"Set the value of the selected attribute","values":[]},{"name":"rootItem","description":"Set the value of the root attribute","values":[]},{"name":"color","description":"Set the color of the bar","values":[]},{"name":"loadChildren","description":"An async function that fires as the dropdown is opening allowing you to set contents.","values":[]},{"name":"hasChildren","description":"An async function that fires as the dropdown is opening allowing you to set contents.","values":[]}],"description":{"kind":"markdown","value":"# Ids Hierarchy Component\n\n## Description\n\nThe IDS Hierarchy (Org Chart) component is a UI pattern that is comprised expandable hierarchical cards. It consists of an wrapper component called `ids-hierarchy` and it's items called `ids-hierarchy-item`. The `ids-hierarchy-item` component can be nested in side each other to create another level of hierarchy. Additionally there is an `ids-hierarchy-legend` component that can be used to display the legend for the org chart.\n\n## Use Cases\n\nThe main use case for the IDS Hierarchy component is to create an organizational chart with each leaf (card) containing details on employees and their hierarchy in the org.\n\n## Terminology\n\n- **leaf**: The horizontal card that contains details\n- **avatar**: A named `slot` that usually consists of an `img` thumbnail\n- **heading**: A named `slot` that usually consists of `ids-text` component and displays the heading of the hierarchy item.\n- **subheading**: A named `slot` that usually consists of `ids-text` component and displays the subheading of the hierarchy item.\n- **micro**: A named `slot` that usually consists of `ids-text` component and displays the micro text of the hierarchy item.\n- **icon-btn**: An element in the `ids-hierarchy-item` that acts as the trigger for expanding and collapsing the hierarchy item.\n- **legend**: A component called `ids-hierarchy-legend` that is used to display the legend for the org chart. It consists of a text property and color-variant.\n\n## Features (With Code Examples)\n\n```html\n<ids-hierarchy>\n  <ids-hierarchy-item id=\"item-1\" root-item expanded color-variant=\"full-time\">\n    <img src=\"..../assets/images/images/headshot-1.jpg\" alt=\"item-1\" slot=\"avatar\" />\n    <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n    <ids-text slot=\"subheading\">Director</ids-text>\n    <ids-text slot=\"micro\">FT</ids-text>\n\n    <ids-hierarchy-item id=\"item-2\" color-variant=\"part-time\">\n      <ids-text slot=\"heading\">Julie Dawes</ids-text>\n      <ids-text slot=\"subheading\">Records Clerk</ids-text>\n      <ids-text slot=\"micro\">PT</ids-text>\n    </ids-hierarchy-item>\n    <ids-hierarchy-item id=\"item-3\" color-variant=\"contractor\">\n      <ids-text slot=\"heading\">Kaylee Edwards</ids-text>\n      <ids-text slot=\"subheading\">Records Manager</ids-text>\n      <ids-text slot=\"micro\">C</ids-text>\n\n      <ids-hierarchy-item id=\"item-4\" color-variant=\"open-position\">\n        <ids-text slot=\"heading\">Julie Dawes</ids-text>\n        <ids-text slot=\"subheading\">Records Clerk</ids-text>\n        <ids-text slot=\"micro\">OP</ids-text>\n\n        <ids-hierarchy-item id=\"item-5\" color-variant=\"contractor\">\n          <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n          <ids-text slot=\"subheading\">Director</ids-text>\n          <ids-text slot=\"micro\">C</ids-text>\n        </ids-hierarchy-item>\n      </ids-hierarchy-item>\n    </ids-hierarchy-item>\n  </ids-hierarchy-item>\n</ids-hierarchy>\n```\n\nExample with legend\n\n```html\n<ids-hierarchy-legend>\n  <ids-hierarchy-legend-item\n    text=\"Full Time\"\n    color-variant=\"full-time\"\n  ></ids-hierarchy-legend-item>\n  <ids-hierarchy-legend-item\n    text=\"Part Time\"\n    color-variant=\"part-time\"\n  ></ids-hierarchy-legend-item>\n  <ids-hierarchy-legend-item\n    text=\"Contractor\"\n    color-variant=\"contractor\"\n  ></ids-hierarchy-legend-item>\n  <ids-hierarchy-legend-item\n    text=\"Open Position\"\n    color-variant=\"open-position\"\n  ></ids-hierarchy-legend-item>\n</ids-hierarchy-legend>\n\n<ids-hierarchy>\n  <ids-hierarchy-item id=\"item-1\" root-item expanded color-variant=\"full-time\">\n    <img src=\"..../assets/images/images/headshot-1.jpg\" alt=\"item-1\" slot=\"avatar\" />\n    <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n    <ids-text slot=\"subheading\">Director</ids-text>\n    <ids-text slot=\"micro\">FT</ids-text>\n\n    <ids-hierarchy-item id=\"item-2\" color-variant=\"part-time\">\n      <ids-text slot=\"heading\">Julie Dawes</ids-text>\n      <ids-text slot=\"subheading\">Records Clerk</ids-text>\n      <ids-text slot=\"micro\">PT</ids-text>\n    </ids-hierarchy-item>\n    <ids-hierarchy-item id=\"item-3\" color-variant=\"contractor\">\n      <ids-text slot=\"heading\">Kaylee Edwards</ids-text>\n      <ids-text slot=\"subheading\">Records Manager</ids-text>\n      <ids-text slot=\"micro\">C</ids-text>\n\n      <ids-hierarchy-item id=\"item-4\" color-variant=\"open-position\">\n        <ids-text slot=\"heading\">Julie Dawes</ids-text>\n        <ids-text slot=\"subheading\">Records Clerk</ids-text>\n        <ids-text slot=\"micro\">OP</ids-text>\n\n        <ids-hierarchy-item id=\"item-5\" color-variant=\"contractor\">\n          <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n          <ids-text slot=\"subheading\">Director</ids-text>\n          <ids-text slot=\"micro\">C</ids-text>\n        </ids-hierarchy-item>\n      </ids-hierarchy-item>\n    </ids-hierarchy-item>\n  </ids-hierarchy-item>\n</ids-hierarchy>\n```\n\n### Color Variants\n\nThe `ids-hierarchy-item` and `ids-hierarchy-legend-item` make use of the [IdsColorVariantMixin](../../mixins/ids-color-variant-mixin/README.md) to modify the colors per item. There are currently 4 color variants available: `full-time`, `part-time`, `contractor` and `open-position`.\n\n```html\n<ids-hierarchy-item id=\"item-1\" color-variant=\"full-time\">\n    <img src=\"..../assets/images/images/headshot-1.jpg\" alt=\"item-1\" slot=\"avatar\" />\n    <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n    <ids-text slot=\"subheading\">Director</ids-text>\n    <ids-text slot=\"micro\">FT</ids-text>\n</ids-hierarchy-item>\n\n<ids-hierarchy-item id=\"item-2\" color-variant=\"part-time\">\n    <ids-text slot=\"heading\">Julie Dawes</ids-text>\n    <ids-text slot=\"subheading\">Records Clerk</ids-text>\n    <ids-text slot=\"micro\">PT</ids-text>\n</ids-hierarchy-item>\n\n<ids-hierarchy-item id=\"item-5\" color-variant=\"contractor\">\n    <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n    <ids-text slot=\"subheading\">Director</ids-text>\n    <ids-text slot=\"micro\">C</ids-text>\n</ids-hierarchy-item>\n\n<ids-hierarchy-item id=\"item-4\" color-variant=\"open-position\">\n    <ids-text slot=\"heading\">Julie Dawes</ids-text>\n    <ids-text slot=\"subheading\">Records Clerk</ids-text>\n    <ids-text slot=\"micro\">OP</ids-text>\n</ids-hierarchy-item>\n```\n\n## States and Variations\n\n- **root-item**: This is an attribute that can be added the top level `ids-hierarchy-item`. This is added to adjust the styling of the root item.\n- **Expanded**: The state where the leaf's children are visible. Sometimes it serves as the default state, this state can also be remembered by the application.\n- **Selected**: The state where the leaf appears selected or focused\n\n## Keyboard Guidelines\n\n- **Enter or Space**: When focus is on an `icon-btn`, this keystroke toggles the expansion of the corresponding leaf. If collapsed, the leaf is expanded, and its aria-expanded state is set to true. If expanded, the leaf is collapsed and its aria-expanded state is set to false.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**4.x to 5.x**\n\n- The Hierarchy component has been changed to a web component and use with `ids-hierarchy`, `ids-hierarchy-item` and `ids-hierarchy-legend`.\n- Markup has changed to a custom element `<ids-hidden>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n- The multi level hierarchy has been removed (as is multi root)\n- The paging hierarchy has been discontinued\n"}},{"name":"ids-hierarchy-legend-item","attributes":[{"name":"text","description":"Set the value of the text attribute","values":[]},{"name":"color","description":"Set the color of the bar","values":[]}],"description":{"kind":"markdown","value":"# Ids Hierarchy Component\n\n## Description\n\nThe IDS Hierarchy (Org Chart) component is a UI pattern that is comprised expandable hierarchical cards. It consists of an wrapper component called `ids-hierarchy` and it's items called `ids-hierarchy-item`. The `ids-hierarchy-item` component can be nested in side each other to create another level of hierarchy. Additionally there is an `ids-hierarchy-legend` component that can be used to display the legend for the org chart.\n\n## Use Cases\n\nThe main use case for the IDS Hierarchy component is to create an organizational chart with each leaf (card) containing details on employees and their hierarchy in the org.\n\n## Terminology\n\n- **leaf**: The horizontal card that contains details\n- **avatar**: A named `slot` that usually consists of an `img` thumbnail\n- **heading**: A named `slot` that usually consists of `ids-text` component and displays the heading of the hierarchy item.\n- **subheading**: A named `slot` that usually consists of `ids-text` component and displays the subheading of the hierarchy item.\n- **micro**: A named `slot` that usually consists of `ids-text` component and displays the micro text of the hierarchy item.\n- **icon-btn**: An element in the `ids-hierarchy-item` that acts as the trigger for expanding and collapsing the hierarchy item.\n- **legend**: A component called `ids-hierarchy-legend` that is used to display the legend for the org chart. It consists of a text property and color-variant.\n\n## Features (With Code Examples)\n\n```html\n<ids-hierarchy>\n  <ids-hierarchy-item id=\"item-1\" root-item expanded color-variant=\"full-time\">\n    <img src=\"..../assets/images/images/headshot-1.jpg\" alt=\"item-1\" slot=\"avatar\" />\n    <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n    <ids-text slot=\"subheading\">Director</ids-text>\n    <ids-text slot=\"micro\">FT</ids-text>\n\n    <ids-hierarchy-item id=\"item-2\" color-variant=\"part-time\">\n      <ids-text slot=\"heading\">Julie Dawes</ids-text>\n      <ids-text slot=\"subheading\">Records Clerk</ids-text>\n      <ids-text slot=\"micro\">PT</ids-text>\n    </ids-hierarchy-item>\n    <ids-hierarchy-item id=\"item-3\" color-variant=\"contractor\">\n      <ids-text slot=\"heading\">Kaylee Edwards</ids-text>\n      <ids-text slot=\"subheading\">Records Manager</ids-text>\n      <ids-text slot=\"micro\">C</ids-text>\n\n      <ids-hierarchy-item id=\"item-4\" color-variant=\"open-position\">\n        <ids-text slot=\"heading\">Julie Dawes</ids-text>\n        <ids-text slot=\"subheading\">Records Clerk</ids-text>\n        <ids-text slot=\"micro\">OP</ids-text>\n\n        <ids-hierarchy-item id=\"item-5\" color-variant=\"contractor\">\n          <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n          <ids-text slot=\"subheading\">Director</ids-text>\n          <ids-text slot=\"micro\">C</ids-text>\n        </ids-hierarchy-item>\n      </ids-hierarchy-item>\n    </ids-hierarchy-item>\n  </ids-hierarchy-item>\n</ids-hierarchy>\n```\n\nExample with legend\n\n```html\n<ids-hierarchy-legend>\n  <ids-hierarchy-legend-item\n    text=\"Full Time\"\n    color-variant=\"full-time\"\n  ></ids-hierarchy-legend-item>\n  <ids-hierarchy-legend-item\n    text=\"Part Time\"\n    color-variant=\"part-time\"\n  ></ids-hierarchy-legend-item>\n  <ids-hierarchy-legend-item\n    text=\"Contractor\"\n    color-variant=\"contractor\"\n  ></ids-hierarchy-legend-item>\n  <ids-hierarchy-legend-item\n    text=\"Open Position\"\n    color-variant=\"open-position\"\n  ></ids-hierarchy-legend-item>\n</ids-hierarchy-legend>\n\n<ids-hierarchy>\n  <ids-hierarchy-item id=\"item-1\" root-item expanded color-variant=\"full-time\">\n    <img src=\"..../assets/images/images/headshot-1.jpg\" alt=\"item-1\" slot=\"avatar\" />\n    <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n    <ids-text slot=\"subheading\">Director</ids-text>\n    <ids-text slot=\"micro\">FT</ids-text>\n\n    <ids-hierarchy-item id=\"item-2\" color-variant=\"part-time\">\n      <ids-text slot=\"heading\">Julie Dawes</ids-text>\n      <ids-text slot=\"subheading\">Records Clerk</ids-text>\n      <ids-text slot=\"micro\">PT</ids-text>\n    </ids-hierarchy-item>\n    <ids-hierarchy-item id=\"item-3\" color-variant=\"contractor\">\n      <ids-text slot=\"heading\">Kaylee Edwards</ids-text>\n      <ids-text slot=\"subheading\">Records Manager</ids-text>\n      <ids-text slot=\"micro\">C</ids-text>\n\n      <ids-hierarchy-item id=\"item-4\" color-variant=\"open-position\">\n        <ids-text slot=\"heading\">Julie Dawes</ids-text>\n        <ids-text slot=\"subheading\">Records Clerk</ids-text>\n        <ids-text slot=\"micro\">OP</ids-text>\n\n        <ids-hierarchy-item id=\"item-5\" color-variant=\"contractor\">\n          <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n          <ids-text slot=\"subheading\">Director</ids-text>\n          <ids-text slot=\"micro\">C</ids-text>\n        </ids-hierarchy-item>\n      </ids-hierarchy-item>\n    </ids-hierarchy-item>\n  </ids-hierarchy-item>\n</ids-hierarchy>\n```\n\n### Color Variants\n\nThe `ids-hierarchy-item` and `ids-hierarchy-legend-item` make use of the [IdsColorVariantMixin](../../mixins/ids-color-variant-mixin/README.md) to modify the colors per item. There are currently 4 color variants available: `full-time`, `part-time`, `contractor` and `open-position`.\n\n```html\n<ids-hierarchy-item id=\"item-1\" color-variant=\"full-time\">\n    <img src=\"..../assets/images/images/headshot-1.jpg\" alt=\"item-1\" slot=\"avatar\" />\n    <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n    <ids-text slot=\"subheading\">Director</ids-text>\n    <ids-text slot=\"micro\">FT</ids-text>\n</ids-hierarchy-item>\n\n<ids-hierarchy-item id=\"item-2\" color-variant=\"part-time\">\n    <ids-text slot=\"heading\">Julie Dawes</ids-text>\n    <ids-text slot=\"subheading\">Records Clerk</ids-text>\n    <ids-text slot=\"micro\">PT</ids-text>\n</ids-hierarchy-item>\n\n<ids-hierarchy-item id=\"item-5\" color-variant=\"contractor\">\n    <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n    <ids-text slot=\"subheading\">Director</ids-text>\n    <ids-text slot=\"micro\">C</ids-text>\n</ids-hierarchy-item>\n\n<ids-hierarchy-item id=\"item-4\" color-variant=\"open-position\">\n    <ids-text slot=\"heading\">Julie Dawes</ids-text>\n    <ids-text slot=\"subheading\">Records Clerk</ids-text>\n    <ids-text slot=\"micro\">OP</ids-text>\n</ids-hierarchy-item>\n```\n\n## States and Variations\n\n- **root-item**: This is an attribute that can be added the top level `ids-hierarchy-item`. This is added to adjust the styling of the root item.\n- **Expanded**: The state where the leaf's children are visible. Sometimes it serves as the default state, this state can also be remembered by the application.\n- **Selected**: The state where the leaf appears selected or focused\n\n## Keyboard Guidelines\n\n- **Enter or Space**: When focus is on an `icon-btn`, this keystroke toggles the expansion of the corresponding leaf. If collapsed, the leaf is expanded, and its aria-expanded state is set to true. If expanded, the leaf is collapsed and its aria-expanded state is set to false.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**4.x to 5.x**\n\n- The Hierarchy component has been changed to a web component and use with `ids-hierarchy`, `ids-hierarchy-item` and `ids-hierarchy-legend`.\n- Markup has changed to a custom element `<ids-hidden>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n- The multi level hierarchy has been removed (as is multi root)\n- The paging hierarchy has been discontinued\n"}},{"name":"ids-hierarchy-legend","attributes":[],"description":{"kind":"markdown","value":"# Ids Hierarchy Component\n\n## Description\n\nThe IDS Hierarchy (Org Chart) component is a UI pattern that is comprised expandable hierarchical cards. It consists of an wrapper component called `ids-hierarchy` and it's items called `ids-hierarchy-item`. The `ids-hierarchy-item` component can be nested in side each other to create another level of hierarchy. Additionally there is an `ids-hierarchy-legend` component that can be used to display the legend for the org chart.\n\n## Use Cases\n\nThe main use case for the IDS Hierarchy component is to create an organizational chart with each leaf (card) containing details on employees and their hierarchy in the org.\n\n## Terminology\n\n- **leaf**: The horizontal card that contains details\n- **avatar**: A named `slot` that usually consists of an `img` thumbnail\n- **heading**: A named `slot` that usually consists of `ids-text` component and displays the heading of the hierarchy item.\n- **subheading**: A named `slot` that usually consists of `ids-text` component and displays the subheading of the hierarchy item.\n- **micro**: A named `slot` that usually consists of `ids-text` component and displays the micro text of the hierarchy item.\n- **icon-btn**: An element in the `ids-hierarchy-item` that acts as the trigger for expanding and collapsing the hierarchy item.\n- **legend**: A component called `ids-hierarchy-legend` that is used to display the legend for the org chart. It consists of a text property and color-variant.\n\n## Features (With Code Examples)\n\n```html\n<ids-hierarchy>\n  <ids-hierarchy-item id=\"item-1\" root-item expanded color-variant=\"full-time\">\n    <img src=\"..../assets/images/images/headshot-1.jpg\" alt=\"item-1\" slot=\"avatar\" />\n    <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n    <ids-text slot=\"subheading\">Director</ids-text>\n    <ids-text slot=\"micro\">FT</ids-text>\n\n    <ids-hierarchy-item id=\"item-2\" color-variant=\"part-time\">\n      <ids-text slot=\"heading\">Julie Dawes</ids-text>\n      <ids-text slot=\"subheading\">Records Clerk</ids-text>\n      <ids-text slot=\"micro\">PT</ids-text>\n    </ids-hierarchy-item>\n    <ids-hierarchy-item id=\"item-3\" color-variant=\"contractor\">\n      <ids-text slot=\"heading\">Kaylee Edwards</ids-text>\n      <ids-text slot=\"subheading\">Records Manager</ids-text>\n      <ids-text slot=\"micro\">C</ids-text>\n\n      <ids-hierarchy-item id=\"item-4\" color-variant=\"open-position\">\n        <ids-text slot=\"heading\">Julie Dawes</ids-text>\n        <ids-text slot=\"subheading\">Records Clerk</ids-text>\n        <ids-text slot=\"micro\">OP</ids-text>\n\n        <ids-hierarchy-item id=\"item-5\" color-variant=\"contractor\">\n          <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n          <ids-text slot=\"subheading\">Director</ids-text>\n          <ids-text slot=\"micro\">C</ids-text>\n        </ids-hierarchy-item>\n      </ids-hierarchy-item>\n    </ids-hierarchy-item>\n  </ids-hierarchy-item>\n</ids-hierarchy>\n```\n\nExample with legend\n\n```html\n<ids-hierarchy-legend>\n  <ids-hierarchy-legend-item\n    text=\"Full Time\"\n    color-variant=\"full-time\"\n  ></ids-hierarchy-legend-item>\n  <ids-hierarchy-legend-item\n    text=\"Part Time\"\n    color-variant=\"part-time\"\n  ></ids-hierarchy-legend-item>\n  <ids-hierarchy-legend-item\n    text=\"Contractor\"\n    color-variant=\"contractor\"\n  ></ids-hierarchy-legend-item>\n  <ids-hierarchy-legend-item\n    text=\"Open Position\"\n    color-variant=\"open-position\"\n  ></ids-hierarchy-legend-item>\n</ids-hierarchy-legend>\n\n<ids-hierarchy>\n  <ids-hierarchy-item id=\"item-1\" root-item expanded color-variant=\"full-time\">\n    <img src=\"..../assets/images/images/headshot-1.jpg\" alt=\"item-1\" slot=\"avatar\" />\n    <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n    <ids-text slot=\"subheading\">Director</ids-text>\n    <ids-text slot=\"micro\">FT</ids-text>\n\n    <ids-hierarchy-item id=\"item-2\" color-variant=\"part-time\">\n      <ids-text slot=\"heading\">Julie Dawes</ids-text>\n      <ids-text slot=\"subheading\">Records Clerk</ids-text>\n      <ids-text slot=\"micro\">PT</ids-text>\n    </ids-hierarchy-item>\n    <ids-hierarchy-item id=\"item-3\" color-variant=\"contractor\">\n      <ids-text slot=\"heading\">Kaylee Edwards</ids-text>\n      <ids-text slot=\"subheading\">Records Manager</ids-text>\n      <ids-text slot=\"micro\">C</ids-text>\n\n      <ids-hierarchy-item id=\"item-4\" color-variant=\"open-position\">\n        <ids-text slot=\"heading\">Julie Dawes</ids-text>\n        <ids-text slot=\"subheading\">Records Clerk</ids-text>\n        <ids-text slot=\"micro\">OP</ids-text>\n\n        <ids-hierarchy-item id=\"item-5\" color-variant=\"contractor\">\n          <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n          <ids-text slot=\"subheading\">Director</ids-text>\n          <ids-text slot=\"micro\">C</ids-text>\n        </ids-hierarchy-item>\n      </ids-hierarchy-item>\n    </ids-hierarchy-item>\n  </ids-hierarchy-item>\n</ids-hierarchy>\n```\n\n### Color Variants\n\nThe `ids-hierarchy-item` and `ids-hierarchy-legend-item` make use of the [IdsColorVariantMixin](../../mixins/ids-color-variant-mixin/README.md) to modify the colors per item. There are currently 4 color variants available: `full-time`, `part-time`, `contractor` and `open-position`.\n\n```html\n<ids-hierarchy-item id=\"item-1\" color-variant=\"full-time\">\n    <img src=\"..../assets/images/images/headshot-1.jpg\" alt=\"item-1\" slot=\"avatar\" />\n    <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n    <ids-text slot=\"subheading\">Director</ids-text>\n    <ids-text slot=\"micro\">FT</ids-text>\n</ids-hierarchy-item>\n\n<ids-hierarchy-item id=\"item-2\" color-variant=\"part-time\">\n    <ids-text slot=\"heading\">Julie Dawes</ids-text>\n    <ids-text slot=\"subheading\">Records Clerk</ids-text>\n    <ids-text slot=\"micro\">PT</ids-text>\n</ids-hierarchy-item>\n\n<ids-hierarchy-item id=\"item-5\" color-variant=\"contractor\">\n    <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n    <ids-text slot=\"subheading\">Director</ids-text>\n    <ids-text slot=\"micro\">C</ids-text>\n</ids-hierarchy-item>\n\n<ids-hierarchy-item id=\"item-4\" color-variant=\"open-position\">\n    <ids-text slot=\"heading\">Julie Dawes</ids-text>\n    <ids-text slot=\"subheading\">Records Clerk</ids-text>\n    <ids-text slot=\"micro\">OP</ids-text>\n</ids-hierarchy-item>\n```\n\n## States and Variations\n\n- **root-item**: This is an attribute that can be added the top level `ids-hierarchy-item`. This is added to adjust the styling of the root item.\n- **Expanded**: The state where the leaf's children are visible. Sometimes it serves as the default state, this state can also be remembered by the application.\n- **Selected**: The state where the leaf appears selected or focused\n\n## Keyboard Guidelines\n\n- **Enter or Space**: When focus is on an `icon-btn`, this keystroke toggles the expansion of the corresponding leaf. If collapsed, the leaf is expanded, and its aria-expanded state is set to true. If expanded, the leaf is collapsed and its aria-expanded state is set to false.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**4.x to 5.x**\n\n- The Hierarchy component has been changed to a web component and use with `ids-hierarchy`, `ids-hierarchy-item` and `ids-hierarchy-legend`.\n- Markup has changed to a custom element `<ids-hidden>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n- The multi level hierarchy has been removed (as is multi root)\n- The paging hierarchy has been discontinued\n"}},{"name":"ids-hierarchy","attributes":[],"description":{"kind":"markdown","value":"# Ids Hierarchy Component\n\n## Description\n\nThe IDS Hierarchy (Org Chart) component is a UI pattern that is comprised expandable hierarchical cards. It consists of an wrapper component called `ids-hierarchy` and it's items called `ids-hierarchy-item`. The `ids-hierarchy-item` component can be nested in side each other to create another level of hierarchy. Additionally there is an `ids-hierarchy-legend` component that can be used to display the legend for the org chart.\n\n## Use Cases\n\nThe main use case for the IDS Hierarchy component is to create an organizational chart with each leaf (card) containing details on employees and their hierarchy in the org.\n\n## Terminology\n\n- **leaf**: The horizontal card that contains details\n- **avatar**: A named `slot` that usually consists of an `img` thumbnail\n- **heading**: A named `slot` that usually consists of `ids-text` component and displays the heading of the hierarchy item.\n- **subheading**: A named `slot` that usually consists of `ids-text` component and displays the subheading of the hierarchy item.\n- **micro**: A named `slot` that usually consists of `ids-text` component and displays the micro text of the hierarchy item.\n- **icon-btn**: An element in the `ids-hierarchy-item` that acts as the trigger for expanding and collapsing the hierarchy item.\n- **legend**: A component called `ids-hierarchy-legend` that is used to display the legend for the org chart. It consists of a text property and color-variant.\n\n## Features (With Code Examples)\n\n```html\n<ids-hierarchy>\n  <ids-hierarchy-item id=\"item-1\" root-item expanded color-variant=\"full-time\">\n    <img src=\"..../assets/images/images/headshot-1.jpg\" alt=\"item-1\" slot=\"avatar\" />\n    <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n    <ids-text slot=\"subheading\">Director</ids-text>\n    <ids-text slot=\"micro\">FT</ids-text>\n\n    <ids-hierarchy-item id=\"item-2\" color-variant=\"part-time\">\n      <ids-text slot=\"heading\">Julie Dawes</ids-text>\n      <ids-text slot=\"subheading\">Records Clerk</ids-text>\n      <ids-text slot=\"micro\">PT</ids-text>\n    </ids-hierarchy-item>\n    <ids-hierarchy-item id=\"item-3\" color-variant=\"contractor\">\n      <ids-text slot=\"heading\">Kaylee Edwards</ids-text>\n      <ids-text slot=\"subheading\">Records Manager</ids-text>\n      <ids-text slot=\"micro\">C</ids-text>\n\n      <ids-hierarchy-item id=\"item-4\" color-variant=\"open-position\">\n        <ids-text slot=\"heading\">Julie Dawes</ids-text>\n        <ids-text slot=\"subheading\">Records Clerk</ids-text>\n        <ids-text slot=\"micro\">OP</ids-text>\n\n        <ids-hierarchy-item id=\"item-5\" color-variant=\"contractor\">\n          <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n          <ids-text slot=\"subheading\">Director</ids-text>\n          <ids-text slot=\"micro\">C</ids-text>\n        </ids-hierarchy-item>\n      </ids-hierarchy-item>\n    </ids-hierarchy-item>\n  </ids-hierarchy-item>\n</ids-hierarchy>\n```\n\nExample with legend\n\n```html\n<ids-hierarchy-legend>\n  <ids-hierarchy-legend-item\n    text=\"Full Time\"\n    color-variant=\"full-time\"\n  ></ids-hierarchy-legend-item>\n  <ids-hierarchy-legend-item\n    text=\"Part Time\"\n    color-variant=\"part-time\"\n  ></ids-hierarchy-legend-item>\n  <ids-hierarchy-legend-item\n    text=\"Contractor\"\n    color-variant=\"contractor\"\n  ></ids-hierarchy-legend-item>\n  <ids-hierarchy-legend-item\n    text=\"Open Position\"\n    color-variant=\"open-position\"\n  ></ids-hierarchy-legend-item>\n</ids-hierarchy-legend>\n\n<ids-hierarchy>\n  <ids-hierarchy-item id=\"item-1\" root-item expanded color-variant=\"full-time\">\n    <img src=\"..../assets/images/images/headshot-1.jpg\" alt=\"item-1\" slot=\"avatar\" />\n    <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n    <ids-text slot=\"subheading\">Director</ids-text>\n    <ids-text slot=\"micro\">FT</ids-text>\n\n    <ids-hierarchy-item id=\"item-2\" color-variant=\"part-time\">\n      <ids-text slot=\"heading\">Julie Dawes</ids-text>\n      <ids-text slot=\"subheading\">Records Clerk</ids-text>\n      <ids-text slot=\"micro\">PT</ids-text>\n    </ids-hierarchy-item>\n    <ids-hierarchy-item id=\"item-3\" color-variant=\"contractor\">\n      <ids-text slot=\"heading\">Kaylee Edwards</ids-text>\n      <ids-text slot=\"subheading\">Records Manager</ids-text>\n      <ids-text slot=\"micro\">C</ids-text>\n\n      <ids-hierarchy-item id=\"item-4\" color-variant=\"open-position\">\n        <ids-text slot=\"heading\">Julie Dawes</ids-text>\n        <ids-text slot=\"subheading\">Records Clerk</ids-text>\n        <ids-text slot=\"micro\">OP</ids-text>\n\n        <ids-hierarchy-item id=\"item-5\" color-variant=\"contractor\">\n          <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n          <ids-text slot=\"subheading\">Director</ids-text>\n          <ids-text slot=\"micro\">C</ids-text>\n        </ids-hierarchy-item>\n      </ids-hierarchy-item>\n    </ids-hierarchy-item>\n  </ids-hierarchy-item>\n</ids-hierarchy>\n```\n\n### Color Variants\n\nThe `ids-hierarchy-item` and `ids-hierarchy-legend-item` make use of the [IdsColorVariantMixin](../../mixins/ids-color-variant-mixin/README.md) to modify the colors per item. There are currently 4 color variants available: `full-time`, `part-time`, `contractor` and `open-position`.\n\n```html\n<ids-hierarchy-item id=\"item-1\" color-variant=\"full-time\">\n    <img src=\"..../assets/images/images/headshot-1.jpg\" alt=\"item-1\" slot=\"avatar\" />\n    <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n    <ids-text slot=\"subheading\">Director</ids-text>\n    <ids-text slot=\"micro\">FT</ids-text>\n</ids-hierarchy-item>\n\n<ids-hierarchy-item id=\"item-2\" color-variant=\"part-time\">\n    <ids-text slot=\"heading\">Julie Dawes</ids-text>\n    <ids-text slot=\"subheading\">Records Clerk</ids-text>\n    <ids-text slot=\"micro\">PT</ids-text>\n</ids-hierarchy-item>\n\n<ids-hierarchy-item id=\"item-5\" color-variant=\"contractor\">\n    <ids-text slot=\"heading\">Tony Cleveland</ids-text>\n    <ids-text slot=\"subheading\">Director</ids-text>\n    <ids-text slot=\"micro\">C</ids-text>\n</ids-hierarchy-item>\n\n<ids-hierarchy-item id=\"item-4\" color-variant=\"open-position\">\n    <ids-text slot=\"heading\">Julie Dawes</ids-text>\n    <ids-text slot=\"subheading\">Records Clerk</ids-text>\n    <ids-text slot=\"micro\">OP</ids-text>\n</ids-hierarchy-item>\n```\n\n## States and Variations\n\n- **root-item**: This is an attribute that can be added the top level `ids-hierarchy-item`. This is added to adjust the styling of the root item.\n- **Expanded**: The state where the leaf's children are visible. Sometimes it serves as the default state, this state can also be remembered by the application.\n- **Selected**: The state where the leaf appears selected or focused\n\n## Keyboard Guidelines\n\n- **Enter or Space**: When focus is on an `icon-btn`, this keystroke toggles the expansion of the corresponding leaf. If collapsed, the leaf is expanded, and its aria-expanded state is set to true. If expanded, the leaf is collapsed and its aria-expanded state is set to false.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**4.x to 5.x**\n\n- The Hierarchy component has been changed to a web component and use with `ids-hierarchy`, `ids-hierarchy-item` and `ids-hierarchy-legend`.\n- Markup has changed to a custom element `<ids-hidden>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n- The multi level hierarchy has been removed (as is multi root)\n- The paging hierarchy has been discontinued\n"}},{"name":"ids-home-page-attributes","description":{"kind":"markdown","value":"# Ids Home Page Component\n\n## Description\n\nHomepages hold combinations of widgets that are tailored to the needs of a user’s workflow. The Home Page component will set the layout to display the cards in specific order according to available space in it's container. It take care everything as laid out in the best order and use of space that is possible. To keep the responsive behavior it will readjust each card size and position on the event of resize.\n\n## Use Cases\n\n- Use when you want organize your content in specific order.\n- A homepage is an admin or end-user configured page made up of widgets that are relevant to the workflow of a general role or an individual. Widgets can be resized to create layouts best-suited for the data within the widget or homepage.\n\n## Terminology\n\n- **Card**: The container to keep the content.\n\n## Features (With Code Examples)\n\nA normal home page used as a web component.\n\n```html\n<ids-home-page>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nA Card with three columns.\n\n```html\n<ids-home-page>\n  <ids-card slot=\"card\" colspan=\"3\">\n    <div slot=\"card-header\">\n      <ids-text>Card 3x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nA Card with double height.\n\n```html\n<ids-home-page>\n  <ids-card slot=\"card\" rowspan=\"2\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x2</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nNo animation with cards while changing/resizing.\n\n```html\n<ids-home-page animated=\"false\">\n  <ids-card slot=\"card\" colspan=\"3\">\n    <div slot=\"card-header\">\n      <ids-text>Card 3x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\" colspan=\"2\">\n    <div slot=\"card-header\">\n      <ids-text>Card 2x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nThe home page with custom cards height.\n\n```html\n<ids-home-page cardHeight=\"260\">\n  <ids-card slot=\"card\" colspan=\"3\">\n    <div slot=\"card-header\">\n      <ids-text>Card 3x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\" colspan=\"2\">\n    <div slot=\"card-header\">\n      <ids-text>Card 2x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nThe home page with custom cards width.\n\n```html\n<ids-home-page cardWidth=\"260\">\n  <ids-card slot=\"card\" colspan=\"3\">\n    <div slot=\"card-header\">\n      <ids-text>Card 3x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\" colspan=\"2\">\n    <div slot=\"card-header\">\n      <ids-text>Card 2x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nThe home page max columns.\n\n```html\n<ids-home-page cols=\"4\">\n  <ids-card slot=\"card\" colspan=\"4\">\n    <div slot=\"card-header\">\n      <ids-text>Card 4x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\" colspan=\"2\">\n    <div slot=\"card-header\">\n      <ids-text>Card 2x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nThe card gap for single span, apply same for both horizontal and vertical sides.\n\n```html\n<ids-home-page gap=\"50\">\n  <ids-card slot=\"card\" colspan=\"3\">\n    <div slot=\"card-header\">\n      <ids-text>Card 4x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 2x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nThe card horizontal gap for single span.\n\n```html\n<ids-home-page gap-x=\"50\">\n  <ids-card slot=\"card\" colspan=\"3\">\n    <div slot=\"card-header\">\n      <ids-text>Card 4x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 2x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nThe card vertical gap for single span.\n\n```html\n<ids-home-page gap-y=\"50\">\n  <ids-card slot=\"card\" colspan=\"3\">\n    <div slot=\"card-header\">\n      <ids-text>Card 4x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 2x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\n## Settings for HomePage\n\n- `animated` {boolean} Set to animated or not the home page cards on resize\n- `cardHeight` {number} Set card height for single span\n- `cardWidth` {number} Set card width for single span\n- `cols` {number} Set the number of columns to display\n- `gap` {number} Set card gap for single span, apply same for both horizontal and vertical sides\n- `gapX` {number} Set card horizontal gap for single span\n- `gapY` {number} Set card vertical gap for single span\n\n\n## Settings for cards\n\n- `colspan` {number} Set the horizontal span size (`card-width * colspan`)\n- `rowspan` {number} Set the vertical span size (`card-height * rowspan`)\n\n## Events\n\n- `resized` Fires after the page is resized and layout is set. Detail contains the element `elem` and the home page current status as rows, columns, container-height and matrix for each block.\n\n## Methods\n\n- `refresh` Refresh will resize calculations to update any changes.\n\n## Themeable Parts\n\n- `home-page` allows you to further style the home-page element\n- `cards` allows you to further style the cards container element\n\n## States and Variations (With Code Examples)\n\n- Animated cards on change or resize\n- Custom card height/width\n- Number of max columns to display\n- Horizontal and vertical span size\n- Card gap for single span both horizontal and vertical sides\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>: If the tab is focusable this will focus or unfocus content.\n\n## Responsive Guidelines\n\n- Flows the laid out in the best order and use of space it can be. It is possible to adjust columns to different size depending on how much screen and parent dimensions.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Home Page has all new markup and classes.\n\n**4.x to 5.x**\n\n- The HomePage component has been changed to a web component\n- Markup has changed to a custom element `<ids-home-page></ids-home-page>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n- If using events, events are now plain JS events.\n- The hero example must be created manually by styling a widget\n\n## Accessibility Guidelines\n\n- The component respects element tab order which is important between the main containers\n\n## Regional Considerations\n\nThe cards will flip to the alternate side in Right To Left mode.\n"}},{"name":"ids-home-page","attributes":[{"name":"#blocks","description":"List of blocks to manage cards width/height and position.","values":[]},{"name":"#cards","description":"List of cards attached to home page.","values":[]},{"name":"#columns","description":"Number of current columns.","values":[]},{"name":"#containerHeight","description":"Container current height.","values":[]},{"name":"#gapX","description":"Column gap","values":[]},{"name":"#gapY","description":"Row gap","values":[]},{"name":"#rowsAndCols","description":"Keep all the blocks as rows and columns.","values":[]},{"name":"#resizeObserver","description":"Attach the resize observer.","values":[]},{"name":"onLanguageChange","description":"Handle Languages Changes","values":[]},{"name":"status","description":"Get the current status of home page","values":[]},{"name":"animated","description":"Set to animated or not the home page cards on resize.","values":[]},{"name":"cardHeight","description":"Set card height for single span","values":[]},{"name":"cardWidth","description":"Set card width for single span","values":[]},{"name":"cols","description":"Set number of columns to display","values":[]},{"name":"gap","description":"Set card gap for single span, apply same for both horizontal and vertical sides","values":[]},{"name":"gapX","description":"Set card horizontal gap for single span","values":[]},{"name":"gapY","description":"Set card vertical gap for single span","values":[]}],"description":{"kind":"markdown","value":"# Ids Home Page Component\n\n## Description\n\nHomepages hold combinations of widgets that are tailored to the needs of a user’s workflow. The Home Page component will set the layout to display the cards in specific order according to available space in it's container. It take care everything as laid out in the best order and use of space that is possible. To keep the responsive behavior it will readjust each card size and position on the event of resize.\n\n## Use Cases\n\n- Use when you want organize your content in specific order.\n- A homepage is an admin or end-user configured page made up of widgets that are relevant to the workflow of a general role or an individual. Widgets can be resized to create layouts best-suited for the data within the widget or homepage.\n\n## Terminology\n\n- **Card**: The container to keep the content.\n\n## Features (With Code Examples)\n\nA normal home page used as a web component.\n\n```html\n<ids-home-page>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nA Card with three columns.\n\n```html\n<ids-home-page>\n  <ids-card slot=\"card\" colspan=\"3\">\n    <div slot=\"card-header\">\n      <ids-text>Card 3x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nA Card with double height.\n\n```html\n<ids-home-page>\n  <ids-card slot=\"card\" rowspan=\"2\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x2</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nNo animation with cards while changing/resizing.\n\n```html\n<ids-home-page animated=\"false\">\n  <ids-card slot=\"card\" colspan=\"3\">\n    <div slot=\"card-header\">\n      <ids-text>Card 3x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\" colspan=\"2\">\n    <div slot=\"card-header\">\n      <ids-text>Card 2x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nThe home page with custom cards height.\n\n```html\n<ids-home-page cardHeight=\"260\">\n  <ids-card slot=\"card\" colspan=\"3\">\n    <div slot=\"card-header\">\n      <ids-text>Card 3x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\" colspan=\"2\">\n    <div slot=\"card-header\">\n      <ids-text>Card 2x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nThe home page with custom cards width.\n\n```html\n<ids-home-page cardWidth=\"260\">\n  <ids-card slot=\"card\" colspan=\"3\">\n    <div slot=\"card-header\">\n      <ids-text>Card 3x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\" colspan=\"2\">\n    <div slot=\"card-header\">\n      <ids-text>Card 2x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nThe home page max columns.\n\n```html\n<ids-home-page cols=\"4\">\n  <ids-card slot=\"card\" colspan=\"4\">\n    <div slot=\"card-header\">\n      <ids-text>Card 4x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\" colspan=\"2\">\n    <div slot=\"card-header\">\n      <ids-text>Card 2x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nThe card gap for single span, apply same for both horizontal and vertical sides.\n\n```html\n<ids-home-page gap=\"50\">\n  <ids-card slot=\"card\" colspan=\"3\">\n    <div slot=\"card-header\">\n      <ids-text>Card 4x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 2x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nThe card horizontal gap for single span.\n\n```html\n<ids-home-page gap-x=\"50\">\n  <ids-card slot=\"card\" colspan=\"3\">\n    <div slot=\"card-header\">\n      <ids-text>Card 4x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 2x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\nThe card vertical gap for single span.\n\n```html\n<ids-home-page gap-y=\"50\">\n  <ids-card slot=\"card\" colspan=\"3\">\n    <div slot=\"card-header\">\n      <ids-text>Card 4x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 2x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n  <ids-card slot=\"card\">\n    <div slot=\"card-header\">\n      <ids-text>Card 1x1</ids-text>\n    </div>\n    <div slot=\"card-content\"></div>\n  </ids-card>\n</ids-home-page>\n```\n\n## Settings for HomePage\n\n- `animated` {boolean} Set to animated or not the home page cards on resize\n- `cardHeight` {number} Set card height for single span\n- `cardWidth` {number} Set card width for single span\n- `cols` {number} Set the number of columns to display\n- `gap` {number} Set card gap for single span, apply same for both horizontal and vertical sides\n- `gapX` {number} Set card horizontal gap for single span\n- `gapY` {number} Set card vertical gap for single span\n\n\n## Settings for cards\n\n- `colspan` {number} Set the horizontal span size (`card-width * colspan`)\n- `rowspan` {number} Set the vertical span size (`card-height * rowspan`)\n\n## Events\n\n- `resized` Fires after the page is resized and layout is set. Detail contains the element `elem` and the home page current status as rows, columns, container-height and matrix for each block.\n\n## Methods\n\n- `refresh` Refresh will resize calculations to update any changes.\n\n## Themeable Parts\n\n- `home-page` allows you to further style the home-page element\n- `cards` allows you to further style the cards container element\n\n## States and Variations (With Code Examples)\n\n- Animated cards on change or resize\n- Custom card height/width\n- Number of max columns to display\n- Horizontal and vertical span size\n- Card gap for single span both horizontal and vertical sides\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>: If the tab is focusable this will focus or unfocus content.\n\n## Responsive Guidelines\n\n- Flows the laid out in the best order and use of space it can be. It is possible to adjust columns to different size depending on how much screen and parent dimensions.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Home Page has all new markup and classes.\n\n**4.x to 5.x**\n\n- The HomePage component has been changed to a web component\n- Markup has changed to a custom element `<ids-home-page></ids-home-page>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n- If using events, events are now plain JS events.\n- The hero example must be created manually by styling a widget\n\n## Accessibility Guidelines\n\n- The component respects element tab order which is important between the main containers\n\n## Regional Considerations\n\nThe cards will flip to the alternate side in Right To Left mode.\n"}},{"name":"ids-hyperlink","attributes":[{"name":"colorVariants","values":[]},{"name":"href","description":"Set the link href","values":[]},{"name":"target","description":"Set the link target attribute","values":[]},{"name":"textDecoration","description":"Set the link text decoration styling","values":[]},{"name":"disabled","description":"Set the text to disabled color.","values":[]},{"name":"color","description":"\nIf set to \"unset\", color can be controlled by parent container","values":[]},{"name":"fontSize","description":"Set the font size/style of the text with a class.","values":[]},{"name":"fontWeight","description":"Adjust font weight; can be either \"bold\" \"lighter\" or not present\nsince font supports 300, 400, 600","values":[]},{"name":"allowEmptyHref","description":"Allows underline and styling of the link when href attribute is empty","values":[]}],"description":{"kind":"markdown","value":"# Ids Hyperlink Component\n\n## Description\n\nThis component styles hyperlinks to the design guidelines. Also called a link. Typically a hyperlink will open a file file or document or be used to navigate to a new location.\n\n## Use Cases\n\n- When you need static text on a page\n- When you need disabled appearing text in a page\n\n## Terminology\n\n- **Link/Hyperlink**: An interactive link to another page within Infor software to external destinations.\n- **Disabled**: A link can be disabled if its not actionable at the moment.\n\n## Features (With Code Examples)\n\nA normal hyperlink element used as a web component that opens a url in a new window.\n\n```html\n<ids-hyperlink href=\"http://www.example.com\" target=\"_blank\">Normal Link</ids-hyperlink>\n```\n\nA Disabled appearing hyperlink element.\n\n```html\n  <ids-hyperlink href=\"http://www.example.com\" disabled=\"true\" target=\"_blank\">Disabled Link</ids-hyperlink>\n```\n\n\n## Settings and Attributes\n\n- `disabled` {boolean} Set the link to disabled\n- `href` {string} Set the links href to a url or file\n- `target` {string} Set the links target attribute. Valid values are '_blank' | '_self' | '_parent' | '_top' | frame name.\n- `allow-empty-href` {boolean} Allows underline and styling of the link when href attribute is empty. Defaults to true.\n- `mode` {string} Set the theme mode\n- `version` {string} Set the theme version\n\n## Themeable Parts\n\n- `link` allows you to further style the link element\n\n## States and Variations (With Code Examples)\n\n- Disabled\n- Visited\n- Hover\n- Active\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>: If the link is enabled this will focus or unfocus the link.\n- <kbd>Enter</kbd>: If this will follow the link url or action.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container. Possibly scrolling as needed based on parent dimensions.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Used a css class on `<a>` tags\n\n**4.x to 5.x**\n\n- The Hyperlink component has been changed to a web component\n- Markup has changed to a custom element `<ids-hyperlink></ids-hyperlink>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n- If using events, events are now plain JS events.\n- The directional links have been removed/deprecated.\n\n## Accessibility Guidelines\n\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. Ensure the color tags that indicate state like OK, cancel, ect have other ways to indicate that information. This is failing.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and images of text has a contrast ratio of at least 4.5:1.   Ensure the color tags pass contrast.\n\n## Regional Considerations\n\nLink text should be localized in the current language. And should flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-image","attributes":[{"name":"src","description":"Set the path to the image","values":[]},{"name":"alt","description":"Set an alternate text for the image","values":[]},{"name":"size","description":"Set the size for the image","values":[]},{"name":"placeholder","description":"Set whether or not to replace image with placeholder initially","values":[]},{"name":"fallback","description":"Set whether or not to replace image with placeholder if the image fails to load","values":[]},{"name":"round","description":"Set whether or not the image is round","values":[]},{"name":"userStatus","description":"Set user status and render html element","values":[]},{"name":"initials","description":"Set initials and render html element","values":[]}],"description":{"kind":"markdown","value":"# Ids Image Component\n\n## Description\n\nThe `ids-image` component is a web component wrapper around a standard `<img>` tag to handle image sizes, placeholders, thumbnails with statuses and user initials\n\n## Use Cases\n- Display an images with different sizes\n- Display placeholder either from fallback or initially\n- Display a thumbnail image with different statuses\n- Display initials for the user\n\n## Settings (Attributes)\n- `src` `{string}` - Specifies the path to the image\n- `alt` `{string}` - Specifies an alternate text for an image\n- `size` `{auto|sm|md|lg}` - Specifies the size of the image, if no size is specified or size is not one of `auto|sm|md|lg` it defaults to `auto`\n  - `sm` - 60x60px\n  - `md` - 154x120px\n  - `lg` - 300x350px\n- `fallback` `{true|false}` - Whether or not to replace image with placeholder if the image fails to load\n- `placeholder` `{true|false}` - Whether or not to use placeholder, if set, `src` and `alt` attributes will be ignored, image will not load and placeholder will be used initially\n- `round` `{true|false}` - Whether or not to make the image round with 50x50x size\n- `user-status` `{available|away|busy|do-not-disturb|unknown}` - Specifies whether or not to show status icon at the bottom right corner of the image and what type of icon\n- `initials` `{string}` - Initials for the user, crops to two letters and uppercase automatically\n\n## Features (With Code Examples)\n\nBasic image behaves similarly to `<img>` tag in browser. Size is `auto` as default. Will show broken image if image fails to load\n\n```html\n<ids-image src=\"image.jpg\" alt=\"image auto\"></ids-image>\n```\n\nBasic image with fallback and size, broken image will be replaced with placeholder if image fails to load\n\n```html\n<ids-image src=\"image.jpg\" alt=\"image md\" size=\"md\" fallback=\"true\"></ids-image>\n```\n\nPlaceholder initially with size md, src and alt attributes are ignored\n\n```html\n<ids-image placeholder=\"true\" size=\"md\"></ids-image>\n```\n\nRound image\n\n```html\n<ids-image src=\"image.jpg\" alt=\"image round\" round=\"true\"></ids-image>\n```\n\nWith status\n\n```html\n<ids-image src=\"image.jpg\" alt=\"image round\" round=\"true\" user-status=\"available\"></ids-image>\n```\n\nInitials\n\n```html\n<ids-image round=\"true\" initials=\"mn\"></ids-image>\n```\n\nThe component can be controlled dynamically\n\n```js\nconst image = document.querySelector('ids-image');\n\n// Changing src and alt\nimage.src = 'another-image.jpg';\nimage.alt = 'changed alt';\n\n// Using fallback in case the image with new src fails to load\nimage.fallback = true;\nimage.src = 'might-not-exist.jpg';\n\n// Make it round\nimage.round = true;\n\n// Add status icon\nimage.userStatus = 'available';\n\n// Change to placeholder\nimage.src = null;\n\n// Remove status icon\nimage.userStatus = null;\n\n// Show initials\nimage.initials = 'mn';\n```\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Block grid / Image List partially replaces the carousel in 3.x\n\n**4.x to 5.x**\n\n- Swipe Container replaces the carousel in 3.x\n- Image List - can be done if needed with a toolbar and block grid\n- The Image css for sizes/placeholder and alerts/initials has been changed to a web component with settings\n- Markup has changed to a custom element `<ids-image></ids-image>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n"}},{"name":"ids-icon-attributes","description":{"kind":"markdown","value":"# Ids Icon Component\n\n## Description\n\nThe design system provides a list of standard icons which can be used in your applications. The list of icons is a result of a studying common iconography and consolidating that with standardized icons (for example, a floppy disk to represent a \"save\" function). The icons in the list should be familiar to users.\n\n## Use Cases\n\n- Icons are most effective when they improve visual interest and grab the user's attention. They help guide users while they're navigating a page.\n- Use too many icons and they'll become nothing more than decoration. Their use for navigation on a webpage can often cause dilution.\n\n## Terminology\n\n- **Icon**: An icon is a symbol. In this design case this is literal, for example  the little trashcan to indicate delete.\n- **Svg**: Stands for eXtensible Markup Language (XML)-based vector graphic format for the Web and other environments\n\n## Features (With Code Examples)\n\nFor a normal sized icon just specific the icon name and the web component will display the appropriate icon.\n\n```html\n<ids-icon icon=\"notes\"></ids-icon>\n```\n\nIcons come in 6 sizes depending where it is used.\n\n```html\n<ids-icon icon=\"notes\" size=\"xxl\"></ids-icon>\n<ids-icon icon=\"notes\" size=\"xl\"></ids-icon>\n<ids-icon icon=\"notes\" size=\"large\"></ids-icon>\n<ids-icon icon=\"notes\" size=\"medium\"></ids-icon>\n<ids-icon icon=\"notes\" size=\"small\"></ids-icon>\n<!-- Used only for extreme edge cases -->\n<ids-icon icon=\"notes\" size=\"xsmall\"></ids-icon>\n```\n\nIn addition to the default sizes the icon also supports custom height, width and viewbox properties\nfor specialized cases\n\n```html\n<ids-icon icon=\"notes\" custom-height=\"80\" custom-width=\"70\" custom-viewbox=\"0 0 50 50\"></ids-icon>\n```\n\nThe most common implementation of custom sizing is for empty-message icons, which are available through ids-icon\n\n```html\n<ids-icon icon=\"empty-generic\" custom-height=\"80\" custom-width=\"80\" custom-viewbox=\"0 0 80 80\"></ids-icon>\n```\n\nIcons also have offer notification badge options in 4 possible positions\n\n```html\n<ids-icon icon=\"notes\" badge-position=\"top-left\"></ids-icon>\n<ids-icon icon=\"notes\" badge-position=\"top-right\"></ids-icon>\n<ids-icon icon=\"notes\" badge-position=\"bottom-left\"></ids-icon>\n<ids-icon icon=\"notes\" badge-position=\"bottom-right\"></ids-icon>\n```\nThese badges can also be displayed in 5 possible colors\n\n```html\n\n<ids-icon icon=\"notes\" badge-position=\"top-left\" badge-color=\"base\"></ids-icon>\n<ids-icon icon=\"notes\" badge-position=\"top-left\" badge-color=\"info\"></ids-icon>\n<ids-icon icon=\"notes\" badge-position=\"top-left\"></ids-icon badge-color=\"warning\">\n<ids-icon icon=\"notes\" badge-position=\"top-left\"></ids-icon badge-color=\"success\">\n<ids-icon icon=\"notes\" badge-position=\"top-left\" badge-color=\"error\"></ids-icon>\n```\n\nAdd a custom icons by importing a custom icon file in the same format we use. The format of the json file is something like:\n\n```json\n{\n  \"my-icon1\": \"<path d=\\\"m7 16.81-1.57-1 .49-9L.83 3.37s-.51-1.51 1-1.56c1 .63 5.09 3.33 5.09 3.33l7.8-4.33 1.62 1-5.87 5.64 3.36 2.14 2.11-.9 1.31.85-.44.72-1.56 1-.39.63-.19 1.82-.45.73-1.31-.86-.07-2.36L9.45 9.1Z\\\"></path>\",\n  \"my-icon2\": \"<path d=\\\"m17.54 12.23-1.42 1H3.1l-2-2.6h16.42ZM3.32 8.85h2.74V7H3.32Zm4.78 0h2.74V7H8.1Zm8.56 1.62V5.19h-3.4v5.21\\\"></path>\"\n}\n```\n\nWe recommend you use [svgo](https://github.com/svg/svgo) to optimize your SVG before adding them to IdsIcon. In particular inline colors and transforms can causes issues rendering the icons in buttons and other places.\n\nTo import the file use the IdsIcon static api. The file only needs to be imported once because this is static then it can be used everywhere on the page or in your framework if you do it in the right place like app startup.\n\n```js\nimport customIconJSON from './custom-icon-data.json';\n\n// May need to fetch the file with ajax...\nIdsIcon.customIconData = customIconData; // JSON String\n```\n\nOne the files are imported they can be used like a normal ids-icon\n\n```html\n<ids-icon icon=\"my-icon1\" size=\"large\"></ids-icon>\n```\n\n## States and Variations\n\n- Color\n- Size\n- Alert\n- Badge-Position\n- Badge-Color\n- Height\n- Viewbox\n- Width\n\n## Keyboard Guidelines\n\nAn icon is not on its own keyboard focusable and has no keyboard interaction.\n\n## Responsive Guidelines\n\n- Flows within its parent/placement and is usually centered vertically.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Icons have all new markup and classes.\n\n**4.x to 5.x**\n\n- The Icon component has been changed to a web component\n- You no longer need the huge block of svg in the page.\n- The icon and size are set via properties/attributes\n- Markup has changed to a custom element `<ids-icon></ids-icon>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n- If using events, events are now plain JS events.\n- Can now display notification badge (combines this feature)\n- Can now be used to display empty-message options\n- The logos have been removed/deprecated.\n- The pseudo elements have been removed/deprecated.\n\n## Accessibility Guidelines\n\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. Ensure the color tags that indicate state like OK, cancel, ect have other ways to indicate that information. This is failing.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. Ensure the icons tags pass contrast when combined with text.\n\n## Regional Considerations\n\nSome icons that indicate direction will be flipped when in Right-To-Left languages. This is a TODO still.\n"}},{"name":"ids-icon","attributes":[{"name":"pathData","values":[]},{"name":"onLanguageChange","description":"Handle Languages Changes","values":[]},{"name":"customIconJsonData","description":"Holds the static single instance of custom icon data","values":[]},{"name":"customIconData","description":"Set the static custom icon instance","values":[]},{"name":"customIconData","description":"Get the static custom icon instance","values":[]},{"name":"badgeColor","values":[]},{"name":"badgePosition","values":[]},{"name":"height","description":"Returns the height attribute","values":[]},{"name":"viewbox","description":"Return the viewbox","values":[]},{"name":"width","description":"Return the width number","values":[]},{"name":"icon","description":"Sets the icon svg path to render","values":[]},{"name":"size","description":"Return the size. May be large, normal/medium or small","values":[]},{"name":"vertical","values":[]}],"description":{"kind":"markdown","value":"# Ids Icon Component\n\n## Description\n\nThe design system provides a list of standard icons which can be used in your applications. The list of icons is a result of a studying common iconography and consolidating that with standardized icons (for example, a floppy disk to represent a \"save\" function). The icons in the list should be familiar to users.\n\n## Use Cases\n\n- Icons are most effective when they improve visual interest and grab the user's attention. They help guide users while they're navigating a page.\n- Use too many icons and they'll become nothing more than decoration. Their use for navigation on a webpage can often cause dilution.\n\n## Terminology\n\n- **Icon**: An icon is a symbol. In this design case this is literal, for example  the little trashcan to indicate delete.\n- **Svg**: Stands for eXtensible Markup Language (XML)-based vector graphic format for the Web and other environments\n\n## Features (With Code Examples)\n\nFor a normal sized icon just specific the icon name and the web component will display the appropriate icon.\n\n```html\n<ids-icon icon=\"notes\"></ids-icon>\n```\n\nIcons come in 6 sizes depending where it is used.\n\n```html\n<ids-icon icon=\"notes\" size=\"xxl\"></ids-icon>\n<ids-icon icon=\"notes\" size=\"xl\"></ids-icon>\n<ids-icon icon=\"notes\" size=\"large\"></ids-icon>\n<ids-icon icon=\"notes\" size=\"medium\"></ids-icon>\n<ids-icon icon=\"notes\" size=\"small\"></ids-icon>\n<!-- Used only for extreme edge cases -->\n<ids-icon icon=\"notes\" size=\"xsmall\"></ids-icon>\n```\n\nIn addition to the default sizes the icon also supports custom height, width and viewbox properties\nfor specialized cases\n\n```html\n<ids-icon icon=\"notes\" custom-height=\"80\" custom-width=\"70\" custom-viewbox=\"0 0 50 50\"></ids-icon>\n```\n\nThe most common implementation of custom sizing is for empty-message icons, which are available through ids-icon\n\n```html\n<ids-icon icon=\"empty-generic\" custom-height=\"80\" custom-width=\"80\" custom-viewbox=\"0 0 80 80\"></ids-icon>\n```\n\nIcons also have offer notification badge options in 4 possible positions\n\n```html\n<ids-icon icon=\"notes\" badge-position=\"top-left\"></ids-icon>\n<ids-icon icon=\"notes\" badge-position=\"top-right\"></ids-icon>\n<ids-icon icon=\"notes\" badge-position=\"bottom-left\"></ids-icon>\n<ids-icon icon=\"notes\" badge-position=\"bottom-right\"></ids-icon>\n```\nThese badges can also be displayed in 5 possible colors\n\n```html\n\n<ids-icon icon=\"notes\" badge-position=\"top-left\" badge-color=\"base\"></ids-icon>\n<ids-icon icon=\"notes\" badge-position=\"top-left\" badge-color=\"info\"></ids-icon>\n<ids-icon icon=\"notes\" badge-position=\"top-left\"></ids-icon badge-color=\"warning\">\n<ids-icon icon=\"notes\" badge-position=\"top-left\"></ids-icon badge-color=\"success\">\n<ids-icon icon=\"notes\" badge-position=\"top-left\" badge-color=\"error\"></ids-icon>\n```\n\nAdd a custom icons by importing a custom icon file in the same format we use. The format of the json file is something like:\n\n```json\n{\n  \"my-icon1\": \"<path d=\\\"m7 16.81-1.57-1 .49-9L.83 3.37s-.51-1.51 1-1.56c1 .63 5.09 3.33 5.09 3.33l7.8-4.33 1.62 1-5.87 5.64 3.36 2.14 2.11-.9 1.31.85-.44.72-1.56 1-.39.63-.19 1.82-.45.73-1.31-.86-.07-2.36L9.45 9.1Z\\\"></path>\",\n  \"my-icon2\": \"<path d=\\\"m17.54 12.23-1.42 1H3.1l-2-2.6h16.42ZM3.32 8.85h2.74V7H3.32Zm4.78 0h2.74V7H8.1Zm8.56 1.62V5.19h-3.4v5.21\\\"></path>\"\n}\n```\n\nWe recommend you use [svgo](https://github.com/svg/svgo) to optimize your SVG before adding them to IdsIcon. In particular inline colors and transforms can causes issues rendering the icons in buttons and other places.\n\nTo import the file use the IdsIcon static api. The file only needs to be imported once because this is static then it can be used everywhere on the page or in your framework if you do it in the right place like app startup.\n\n```js\nimport customIconJSON from './custom-icon-data.json';\n\n// May need to fetch the file with ajax...\nIdsIcon.customIconData = customIconData; // JSON String\n```\n\nOne the files are imported they can be used like a normal ids-icon\n\n```html\n<ids-icon icon=\"my-icon1\" size=\"large\"></ids-icon>\n```\n\n## States and Variations\n\n- Color\n- Size\n- Alert\n- Badge-Position\n- Badge-Color\n- Height\n- Viewbox\n- Width\n\n## Keyboard Guidelines\n\nAn icon is not on its own keyboard focusable and has no keyboard interaction.\n\n## Responsive Guidelines\n\n- Flows within its parent/placement and is usually centered vertically.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Icons have all new markup and classes.\n\n**4.x to 5.x**\n\n- The Icon component has been changed to a web component\n- You no longer need the huge block of svg in the page.\n- The icon and size are set via properties/attributes\n- Markup has changed to a custom element `<ids-icon></ids-icon>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n- If using events, events are now plain JS events.\n- Can now display notification badge (combines this feature)\n- Can now be used to display empty-message options\n- The logos have been removed/deprecated.\n- The pseudo elements have been removed/deprecated.\n\n## Accessibility Guidelines\n\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. Ensure the color tags that indicate state like OK, cancel, ect have other ways to indicate that information. This is failing.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and images of text has a contrast ratio of at least 4.5:1. Ensure the icons tags pass contrast when combined with text.\n\n## Regional Considerations\n\nSome icons that indicate direction will be flipped when in Right-To-Left languages. This is a TODO still.\n"}},{"name":"ids-autocomplete","attributes":[{"name":"datasource","description":"Gets the internal IdsDataSource object","values":[]},{"name":"autocomplete","description":"Get the autocomplete attribute","values":[]},{"name":"data","description":"Get the data of the autocomplete","values":[]},{"name":"searchField","description":"Get searchField","values":[]},{"name":"popup","description":"Get the internal ids-popup element","values":[]},{"name":"listBox","description":"Get the internal ids-list-box element","values":[]},{"name":"options","description":"Get all internal ids-list-box-option elements","values":[]},{"name":"isSelected","description":"Get the selected ids-list-box-option element","values":[]}],"description":{"kind":"markdown","value":"# Ids Input Component\n\n## Description\n\nThe IDS Input component is a simple wrapper around a standard HTMLInputElement that is styled with Infor branding, and contains some additional API that makes it easy to set input, label, and functionality.\n\n## Use Cases\n\n- Create standalone inputs\n- Create inputs, each with different styling to provide context for actions that are disabled, readonly, and various sizes, types.\n\n## Terminology\n\n- Input: A standard basic input element. It can set to various types, size, and functionality. IDS Input will add `aria-required` for required elements.\n- Label: HTMLLabelElement to keep matching with HTMLInputElement. Make sure the input label has a meaningful relative to input. IDS Input will add sudo ui `*` for required elements.\n\n## Features (With Code Samples)\n\nA standard Text Input is a basic input element:\n\n```html\n<ids-input label=\"First Name\"></ids-input>\n```\n\nSet the types, available types are `'text'|'password'|'email'|'color'` and default type is `type=\"text\"`.\n\n```html\n<ids-input type=\"password\" label=\"Xtra Small\"></ids-input>\n```\n\nSet the sizes, available sizes are `'xs'|'sm'|'mm'|'md'|'lg'|'full'` and default type is `size=\"md\"`.\n\n```html\n<ids-input size=\"xs\" label=\"Xtra Small\"></ids-input>\n```\n\nAdd an Disabled Text Input this way:\n\n```html\n<ids-input label=\"Disabled\" disabled=\"true\"></ids-input>\n```\n\nAdd an Readonly Text Input this way:\n\n```html\n<ids-input label=\"Readonly\" readonly=\"true\"></ids-input>\n```\n\nSet the Dirty Tracking to Text Input this way. You can also call `resetDirtyTracker()` to reset the dirty tracking icon:\n\n```html\n<ids-input label=\"Dirty Tracking\" dirty-tracker=\"true\"></ids-input>\n```\n\nSet validation `required` to Text Input this way:\n\n```html\n<ids-input label=\"Last Name\" validate=\"required\"></ids-input>\n```\n\nSet the input to clearable and add a clear button:\n\n```html\n<ids-input label=\"Clearable\" clearable=\"true\"></ids-input>\n```\n\nSet the Auto Select to Text Input this way:\n\n```html\n<ids-input label=\"Autoselect\" value=\"Text select on focus\" autoselect=\"true\"></ids-input>\n```\n\nSet the Text Align to Text Input this way:\n\n```html\n<ids-input label=\"Default align (left)\" value=\"Default align\"></ids-input>\n<ids-input label=\"Left align\" value=\"Left align\" text-align=\"start\"></ids-input>\n<ids-input label=\"Center align\" value=\"Center align\" text-align=\"center\"></ids-input>\n<ids-input label=\"Right align\" value=\"Right align\" text-align=\"end\"></ids-input>\n```\n\nSet the caps lock alert indicator this way:\n\n```html\n<ids-input label=\"password\" caps-lock=\"true\" type=\"password\"></ids-input>\n```\n\nSet up for displaying the show/hide password button:\n\n```html\n<ids-input label=\"password\" revealable-text=\"true\" password-visible=\"false\" type=\"password\"></ids-input>\n```\n\nSet up for autocomplete input\n\n```html\n  <ids-input\n    id=\"input-autocomplete\"\n    placeholder=\"This input's label is visible\"\n    size=\"md\"\n    label=\"Autocomplete Input\"\n    autocomplete\n    search-field=\"label\"\n  >\n  </ids-input>\n```\n\n```js\nimport statesJSON from '../../../assets/data/states.json';\n\nconst input: any = document.querySelector('#input-autocomplete');\nconst url: any = statesJSON;\n\nconst setData = async () => {\n  const res = await fetch(url);\n  const data = await res.json();\n  input.data = data;\n};\n\nsetData();\n```\n\n## Settings (Attributes)\n\n- `autocomplete` can be set to true to enable autocomplete functionality.\n- `autoselect` {boolean} set auto select text on focus to input.\n- `bgTransparent` {boolean} set the transparent background to readonly input.\n- `clearable` {boolean} set (x) button to clear text on click/key to input. See [Ids Clearable Mixin](../../mixins/ids-clearable-mixin/README.md) for more information.\n- `clearableForced` {boolean} set (x) button to clear text on click/key to input, forced to be on readonly.\n- `colorVariant` {string} set the current color variant.\n- `compact` {boolean} sets the component to be compact mode.\n- `caps-lock` {boolean} sets whether the   indicator appears when caps lock is on.\n- `data` when autocomplete is enabled an instance of [IdsDatasource](../../core/README.md)]\n- `dirty-tracker` {boolean} set dirty tracker to input. See [Ids Dirty Tracker Mixin](../../mixins/ids-dirty-tracker-mixin/README.md) for more information.\n- `disabled` {boolean} set disabled state.\n- `fieldHeight` {string} defines the height of the input field. See [Ids Field Height Mixin](../../mixins/ids-field-height-mixin/README.md) for more information.\n- `label` {string} set the label text.\n- `labelState` {string} indicates that a label is hidden (note that for accessibility reasons, `label` should still be specified). See [Ids Label State Mixin](../../mixins/ids-label-state-mixin/README.md) for more information.\n- `mask` {array|function} defines how to mask the input.  See [Ids Mask Mixin](../ids-mask/README.md) for more information.\n- `noMargins` {boolean} sets whether or not no-margins around the component.\n- `password-visible` {boolean} sets whether the password is currently visible must be paired with revealable-text = 'true' and type = 'password'.\n- `placeholder` {string} set the placeholder text to input.\n- `size` {string} set the input size, it will set `md` as defaults.\n- `search-field` when autocomplete is enabled can be set to a string of the field to be searched in the dataset.\n- `revealable-text` {boolean} sets whether the show/hide button is available for password fields must be paired with type='password'\n- `readonly` {boolean} set readonly state.\n- `text-align` {string} set text-align to input, it will set `left` as defaults.\n- `type` {string} set the input type, it will set `text` as defaults.\n- `validate` {string} set the input validation rules, use `space` to add multiple validation rules.\n- `format` {string} if the validation rules include date/time, use the setting to set custom date/time format\n- `validationEvents` {string} set the input validation events, use `space` to add multiple validation rules, it will set `blur` as defaults.\n- `value` {string} set the input value.\n\n## Keyboard Guidelines\n\nThe IDS Input doesn't contain any interactions beyond a standard HTMLInputElement:\n\n- <kbd>Tab</kbd> and <kbd>Shift Tab</kbd> moves focus into the edit field to/from the next focusable item in the tab order.\n\n## Responsive Guidelines\n\n- Default size is 300px wide but there are a number of widths.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Block grid / Image List partially replaces the carousel in 3.x\n\n**4.x to 5.x**\n\n- The Input component has been changed to a web component and renamed to ids-input.\n- Markup has changed to a custom element `<ids-input></ids-input>` (see examples above)\n- Actions next to the input is deprecated, if needed you can code it with a button, popupmenu and input\n- If using events, events are now plain JS events (custom events)\n- Can now be imported as a single JS file and used with encapsulated styles\n- Can now be use variation of sizes (width/height)\n- If using a clearable X on the input the x is now tabbable by default for accessibility\n\nMarkup comparison:\n\n```html\n<!-- 4.x input example -->\n<div class=\"field\">\n  <label class=\"required\" for=\"last-name\">Last Name</label>\n  <input type=\"text\" id=\"last-name\" aria-required=\"true\" name=\"last-name\" data-validate=\"required\"/>\n</div>\n\n<!-- this is the same input using the WebComponent -->\n<ids-input label=\"Last Name\" id=\"last-name\" name=\"last-name\" validate=\"required\"></ids-input>\n```\n\n## Accessibility Guidelines\n\nThere should be a label on all inputs to give an indication what the field is containing.\n"}},{"name":"ids-input-attributes","description":{"kind":"markdown","value":"# Ids Input Component\n\n## Description\n\nThe IDS Input component is a simple wrapper around a standard HTMLInputElement that is styled with Infor branding, and contains some additional API that makes it easy to set input, label, and functionality.\n\n## Use Cases\n\n- Create standalone inputs\n- Create inputs, each with different styling to provide context for actions that are disabled, readonly, and various sizes, types.\n\n## Terminology\n\n- Input: A standard basic input element. It can set to various types, size, and functionality. IDS Input will add `aria-required` for required elements.\n- Label: HTMLLabelElement to keep matching with HTMLInputElement. Make sure the input label has a meaningful relative to input. IDS Input will add sudo ui `*` for required elements.\n\n## Features (With Code Samples)\n\nA standard Text Input is a basic input element:\n\n```html\n<ids-input label=\"First Name\"></ids-input>\n```\n\nSet the types, available types are `'text'|'password'|'email'|'color'` and default type is `type=\"text\"`.\n\n```html\n<ids-input type=\"password\" label=\"Xtra Small\"></ids-input>\n```\n\nSet the sizes, available sizes are `'xs'|'sm'|'mm'|'md'|'lg'|'full'` and default type is `size=\"md\"`.\n\n```html\n<ids-input size=\"xs\" label=\"Xtra Small\"></ids-input>\n```\n\nAdd an Disabled Text Input this way:\n\n```html\n<ids-input label=\"Disabled\" disabled=\"true\"></ids-input>\n```\n\nAdd an Readonly Text Input this way:\n\n```html\n<ids-input label=\"Readonly\" readonly=\"true\"></ids-input>\n```\n\nSet the Dirty Tracking to Text Input this way. You can also call `resetDirtyTracker()` to reset the dirty tracking icon:\n\n```html\n<ids-input label=\"Dirty Tracking\" dirty-tracker=\"true\"></ids-input>\n```\n\nSet validation `required` to Text Input this way:\n\n```html\n<ids-input label=\"Last Name\" validate=\"required\"></ids-input>\n```\n\nSet the input to clearable and add a clear button:\n\n```html\n<ids-input label=\"Clearable\" clearable=\"true\"></ids-input>\n```\n\nSet the Auto Select to Text Input this way:\n\n```html\n<ids-input label=\"Autoselect\" value=\"Text select on focus\" autoselect=\"true\"></ids-input>\n```\n\nSet the Text Align to Text Input this way:\n\n```html\n<ids-input label=\"Default align (left)\" value=\"Default align\"></ids-input>\n<ids-input label=\"Left align\" value=\"Left align\" text-align=\"start\"></ids-input>\n<ids-input label=\"Center align\" value=\"Center align\" text-align=\"center\"></ids-input>\n<ids-input label=\"Right align\" value=\"Right align\" text-align=\"end\"></ids-input>\n```\n\nSet the caps lock alert indicator this way:\n\n```html\n<ids-input label=\"password\" caps-lock=\"true\" type=\"password\"></ids-input>\n```\n\nSet up for displaying the show/hide password button:\n\n```html\n<ids-input label=\"password\" revealable-text=\"true\" password-visible=\"false\" type=\"password\"></ids-input>\n```\n\nSet up for autocomplete input\n\n```html\n  <ids-input\n    id=\"input-autocomplete\"\n    placeholder=\"This input's label is visible\"\n    size=\"md\"\n    label=\"Autocomplete Input\"\n    autocomplete\n    search-field=\"label\"\n  >\n  </ids-input>\n```\n\n```js\nimport statesJSON from '../../../assets/data/states.json';\n\nconst input: any = document.querySelector('#input-autocomplete');\nconst url: any = statesJSON;\n\nconst setData = async () => {\n  const res = await fetch(url);\n  const data = await res.json();\n  input.data = data;\n};\n\nsetData();\n```\n\n## Settings (Attributes)\n\n- `autocomplete` can be set to true to enable autocomplete functionality.\n- `autoselect` {boolean} set auto select text on focus to input.\n- `bgTransparent` {boolean} set the transparent background to readonly input.\n- `clearable` {boolean} set (x) button to clear text on click/key to input. See [Ids Clearable Mixin](../../mixins/ids-clearable-mixin/README.md) for more information.\n- `clearableForced` {boolean} set (x) button to clear text on click/key to input, forced to be on readonly.\n- `colorVariant` {string} set the current color variant.\n- `compact` {boolean} sets the component to be compact mode.\n- `caps-lock` {boolean} sets whether the   indicator appears when caps lock is on.\n- `data` when autocomplete is enabled an instance of [IdsDatasource](../../core/README.md)]\n- `dirty-tracker` {boolean} set dirty tracker to input. See [Ids Dirty Tracker Mixin](../../mixins/ids-dirty-tracker-mixin/README.md) for more information.\n- `disabled` {boolean} set disabled state.\n- `fieldHeight` {string} defines the height of the input field. See [Ids Field Height Mixin](../../mixins/ids-field-height-mixin/README.md) for more information.\n- `label` {string} set the label text.\n- `labelState` {string} indicates that a label is hidden (note that for accessibility reasons, `label` should still be specified). See [Ids Label State Mixin](../../mixins/ids-label-state-mixin/README.md) for more information.\n- `mask` {array|function} defines how to mask the input.  See [Ids Mask Mixin](../ids-mask/README.md) for more information.\n- `noMargins` {boolean} sets whether or not no-margins around the component.\n- `password-visible` {boolean} sets whether the password is currently visible must be paired with revealable-text = 'true' and type = 'password'.\n- `placeholder` {string} set the placeholder text to input.\n- `size` {string} set the input size, it will set `md` as defaults.\n- `search-field` when autocomplete is enabled can be set to a string of the field to be searched in the dataset.\n- `revealable-text` {boolean} sets whether the show/hide button is available for password fields must be paired with type='password'\n- `readonly` {boolean} set readonly state.\n- `text-align` {string} set text-align to input, it will set `left` as defaults.\n- `type` {string} set the input type, it will set `text` as defaults.\n- `validate` {string} set the input validation rules, use `space` to add multiple validation rules.\n- `format` {string} if the validation rules include date/time, use the setting to set custom date/time format\n- `validationEvents` {string} set the input validation events, use `space` to add multiple validation rules, it will set `blur` as defaults.\n- `value` {string} set the input value.\n\n## Keyboard Guidelines\n\nThe IDS Input doesn't contain any interactions beyond a standard HTMLInputElement:\n\n- <kbd>Tab</kbd> and <kbd>Shift Tab</kbd> moves focus into the edit field to/from the next focusable item in the tab order.\n\n## Responsive Guidelines\n\n- Default size is 300px wide but there are a number of widths.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Block grid / Image List partially replaces the carousel in 3.x\n\n**4.x to 5.x**\n\n- The Input component has been changed to a web component and renamed to ids-input.\n- Markup has changed to a custom element `<ids-input></ids-input>` (see examples above)\n- Actions next to the input is deprecated, if needed you can code it with a button, popupmenu and input\n- If using events, events are now plain JS events (custom events)\n- Can now be imported as a single JS file and used with encapsulated styles\n- Can now be use variation of sizes (width/height)\n- If using a clearable X on the input the x is now tabbable by default for accessibility\n\nMarkup comparison:\n\n```html\n<!-- 4.x input example -->\n<div class=\"field\">\n  <label class=\"required\" for=\"last-name\">Last Name</label>\n  <input type=\"text\" id=\"last-name\" aria-required=\"true\" name=\"last-name\" data-validate=\"required\"/>\n</div>\n\n<!-- this is the same input using the WebComponent -->\n<ids-input label=\"Last Name\" id=\"last-name\" name=\"last-name\" validate=\"required\"></ids-input>\n```\n\n## Accessibility Guidelines\n\nThere should be a label on all inputs to give an indication what the field is containing.\n"}},{"name":"ids-input","attributes":[{"name":"generatedId","values":[]},{"name":"triggeredByChange","values":[]},{"name":"isFormComponent","values":[]},{"name":"colorVariants","description":"Inherited from `IdsColorVariantMixin`","values":[]},{"name":"isPasswordVisible","values":[]},{"name":"input","values":[]},{"name":"capsLockIcon","values":[]},{"name":"fieldContainer","values":[]},{"name":"labelEl","values":[]},{"name":"revealablePassword","description":"sets whether password reveal functionality is available","values":[]},{"name":"capsLock","description":"sets whether capslock indicatoris enabled or disabled","values":[]},{"name":"passwordVisible","description":"sets whether the password is currently visible","values":[]},{"name":"active","description":"When set the input will add a CSS class `is-active` that simulates the text input being \"focused\".","values":[]},{"name":"autoselect","description":"When set the input will select all text on focus","values":[]},{"name":"bgTransparent","description":"When set the input will add css class `bg-transparent`","values":[]},{"name":"textEllipsis","description":"When set the input will add css class `text-ellipsis`","values":[]},{"name":"disabled","description":"Sets input to disabled","values":[]},{"name":"#labelEl","description":"internal reference to a label element a user provides","values":[]},{"name":"placeholder","description":"Set the `placeholder` of input","values":[]},{"name":"readonly","description":"Set the input to readonly state","values":[]},{"name":"readonlyBackground","values":[]},{"name":"labelWrap","description":"Set the label wrap setting of input","values":[]},{"name":"size","description":"Set the size (width) of input","values":[]},{"name":"textAlign","description":"Sets the text alignment","values":[]},{"name":"type","description":"Sets the input type","values":[]},{"name":"value","description":"Set the `value` attribute of input","values":[]},{"name":"#id","description":"set the id of the input, which will also determine the\ninput id for labels at #${id}-input","values":[]},{"name":"cursor","description":"Set the css cursor property to something other than text","values":[]},{"name":"noMargins","description":"Sets the no margins attribute","values":[]},{"name":"padding","description":"Sets the inner padding (inline-start and end)","values":[]},{"name":"format","description":"format attribute","values":[]}],"description":{"kind":"markdown","value":"# Ids Input Component\n\n## Description\n\nThe IDS Input component is a simple wrapper around a standard HTMLInputElement that is styled with Infor branding, and contains some additional API that makes it easy to set input, label, and functionality.\n\n## Use Cases\n\n- Create standalone inputs\n- Create inputs, each with different styling to provide context for actions that are disabled, readonly, and various sizes, types.\n\n## Terminology\n\n- Input: A standard basic input element. It can set to various types, size, and functionality. IDS Input will add `aria-required` for required elements.\n- Label: HTMLLabelElement to keep matching with HTMLInputElement. Make sure the input label has a meaningful relative to input. IDS Input will add sudo ui `*` for required elements.\n\n## Features (With Code Samples)\n\nA standard Text Input is a basic input element:\n\n```html\n<ids-input label=\"First Name\"></ids-input>\n```\n\nSet the types, available types are `'text'|'password'|'email'|'color'` and default type is `type=\"text\"`.\n\n```html\n<ids-input type=\"password\" label=\"Xtra Small\"></ids-input>\n```\n\nSet the sizes, available sizes are `'xs'|'sm'|'mm'|'md'|'lg'|'full'` and default type is `size=\"md\"`.\n\n```html\n<ids-input size=\"xs\" label=\"Xtra Small\"></ids-input>\n```\n\nAdd an Disabled Text Input this way:\n\n```html\n<ids-input label=\"Disabled\" disabled=\"true\"></ids-input>\n```\n\nAdd an Readonly Text Input this way:\n\n```html\n<ids-input label=\"Readonly\" readonly=\"true\"></ids-input>\n```\n\nSet the Dirty Tracking to Text Input this way. You can also call `resetDirtyTracker()` to reset the dirty tracking icon:\n\n```html\n<ids-input label=\"Dirty Tracking\" dirty-tracker=\"true\"></ids-input>\n```\n\nSet validation `required` to Text Input this way:\n\n```html\n<ids-input label=\"Last Name\" validate=\"required\"></ids-input>\n```\n\nSet the input to clearable and add a clear button:\n\n```html\n<ids-input label=\"Clearable\" clearable=\"true\"></ids-input>\n```\n\nSet the Auto Select to Text Input this way:\n\n```html\n<ids-input label=\"Autoselect\" value=\"Text select on focus\" autoselect=\"true\"></ids-input>\n```\n\nSet the Text Align to Text Input this way:\n\n```html\n<ids-input label=\"Default align (left)\" value=\"Default align\"></ids-input>\n<ids-input label=\"Left align\" value=\"Left align\" text-align=\"start\"></ids-input>\n<ids-input label=\"Center align\" value=\"Center align\" text-align=\"center\"></ids-input>\n<ids-input label=\"Right align\" value=\"Right align\" text-align=\"end\"></ids-input>\n```\n\nSet the caps lock alert indicator this way:\n\n```html\n<ids-input label=\"password\" caps-lock=\"true\" type=\"password\"></ids-input>\n```\n\nSet up for displaying the show/hide password button:\n\n```html\n<ids-input label=\"password\" revealable-text=\"true\" password-visible=\"false\" type=\"password\"></ids-input>\n```\n\nSet up for autocomplete input\n\n```html\n  <ids-input\n    id=\"input-autocomplete\"\n    placeholder=\"This input's label is visible\"\n    size=\"md\"\n    label=\"Autocomplete Input\"\n    autocomplete\n    search-field=\"label\"\n  >\n  </ids-input>\n```\n\n```js\nimport statesJSON from '../../../assets/data/states.json';\n\nconst input: any = document.querySelector('#input-autocomplete');\nconst url: any = statesJSON;\n\nconst setData = async () => {\n  const res = await fetch(url);\n  const data = await res.json();\n  input.data = data;\n};\n\nsetData();\n```\n\n## Settings (Attributes)\n\n- `autocomplete` can be set to true to enable autocomplete functionality.\n- `autoselect` {boolean} set auto select text on focus to input.\n- `bgTransparent` {boolean} set the transparent background to readonly input.\n- `clearable` {boolean} set (x) button to clear text on click/key to input. See [Ids Clearable Mixin](../../mixins/ids-clearable-mixin/README.md) for more information.\n- `clearableForced` {boolean} set (x) button to clear text on click/key to input, forced to be on readonly.\n- `colorVariant` {string} set the current color variant.\n- `compact` {boolean} sets the component to be compact mode.\n- `caps-lock` {boolean} sets whether the   indicator appears when caps lock is on.\n- `data` when autocomplete is enabled an instance of [IdsDatasource](../../core/README.md)]\n- `dirty-tracker` {boolean} set dirty tracker to input. See [Ids Dirty Tracker Mixin](../../mixins/ids-dirty-tracker-mixin/README.md) for more information.\n- `disabled` {boolean} set disabled state.\n- `fieldHeight` {string} defines the height of the input field. See [Ids Field Height Mixin](../../mixins/ids-field-height-mixin/README.md) for more information.\n- `label` {string} set the label text.\n- `labelState` {string} indicates that a label is hidden (note that for accessibility reasons, `label` should still be specified). See [Ids Label State Mixin](../../mixins/ids-label-state-mixin/README.md) for more information.\n- `mask` {array|function} defines how to mask the input.  See [Ids Mask Mixin](../ids-mask/README.md) for more information.\n- `noMargins` {boolean} sets whether or not no-margins around the component.\n- `password-visible` {boolean} sets whether the password is currently visible must be paired with revealable-text = 'true' and type = 'password'.\n- `placeholder` {string} set the placeholder text to input.\n- `size` {string} set the input size, it will set `md` as defaults.\n- `search-field` when autocomplete is enabled can be set to a string of the field to be searched in the dataset.\n- `revealable-text` {boolean} sets whether the show/hide button is available for password fields must be paired with type='password'\n- `readonly` {boolean} set readonly state.\n- `text-align` {string} set text-align to input, it will set `left` as defaults.\n- `type` {string} set the input type, it will set `text` as defaults.\n- `validate` {string} set the input validation rules, use `space` to add multiple validation rules.\n- `format` {string} if the validation rules include date/time, use the setting to set custom date/time format\n- `validationEvents` {string} set the input validation events, use `space` to add multiple validation rules, it will set `blur` as defaults.\n- `value` {string} set the input value.\n\n## Keyboard Guidelines\n\nThe IDS Input doesn't contain any interactions beyond a standard HTMLInputElement:\n\n- <kbd>Tab</kbd> and <kbd>Shift Tab</kbd> moves focus into the edit field to/from the next focusable item in the tab order.\n\n## Responsive Guidelines\n\n- Default size is 300px wide but there are a number of widths.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Block grid / Image List partially replaces the carousel in 3.x\n\n**4.x to 5.x**\n\n- The Input component has been changed to a web component and renamed to ids-input.\n- Markup has changed to a custom element `<ids-input></ids-input>` (see examples above)\n- Actions next to the input is deprecated, if needed you can code it with a button, popupmenu and input\n- If using events, events are now plain JS events (custom events)\n- Can now be imported as a single JS file and used with encapsulated styles\n- Can now be use variation of sizes (width/height)\n- If using a clearable X on the input the x is now tabbable by default for accessibility\n\nMarkup comparison:\n\n```html\n<!-- 4.x input example -->\n<div class=\"field\">\n  <label class=\"required\" for=\"last-name\">Last Name</label>\n  <input type=\"text\" id=\"last-name\" aria-required=\"true\" name=\"last-name\" data-validate=\"required\"/>\n</div>\n\n<!-- this is the same input using the WebComponent -->\n<ids-input label=\"Last Name\" id=\"last-name\" name=\"last-name\" validate=\"required\"></ids-input>\n```\n\n## Accessibility Guidelines\n\nThere should be a label on all inputs to give an indication what the field is containing.\n"}},{"name":"ids-layout-flex-item","description":{"kind":"markdown","value":"# Ids Layout Flex Component\n\n## Description\n\nThe Ids Layout Flex is comprised of 2 web components, IdsLayoutFlex and IdsLayoutFlexItem. IdsLayoutFlex is the parent container in which the child items defined. IdsLayoutFlexItem is a child element of Layout Flex. These elements contain the UI contents. A Layout Flex can also be nested inside a layout flex item.\n\n## Use Cases\n\n- Use to layout complex forms\n- Use to layout a list\n\n## Terminology\n\n- **Flex**: Container that has the `display: flex` property set on it. We refer to this as `ids-layout-flex`.\n- **FlexItem** Child element of layout flex, we refer to this as `ids-layout-flex-item`.\n\n## Features (With Code Examples)\n\nBy default the layout flex is set as direction row.\n\n```html\n<ids-layout-flex>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with gap (8).\nGap can set horizontal as (gap-x) and vertical as (gap-y)\nThe value can be use: 0, 1, 2, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40\n\n```html\n<ids-layout-flex gap=\"8\">\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with align-content (center).\nThe value can be use: flex-start, flex-end, center, space-between, space-around, space-evenly, stretch, start, end, baseline\n\n```html\n<ids-layout-flex align-content=\"center\">\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with align-items (center).\nThe value can be use: start, end, flex-start, flex-end, center, baseline, stretch\n\n```html\n<ids-layout-flex align-items=\"center\">\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with direction (column).\nThe value can be use: row, row-reverse, column, column-reverse\n\n```html\n<ids-layout-flex direction=\"column\">\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with display (inline-flex).\nThe value can be use: flex, inline-flex\n\n```html\n<ids-layout-flex display=\"inline-flex\">\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with justify-content (center).\nThe value can be use: start, end, flex-start, flex-end, center, left, right, space-between, space-around, space-evenly\n\n```html\n<ids-layout-flex justify-content=\"center\">\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with wrap (wrap).\nThe value can be use: nowrap, wrap, wrap-reverse\n\n```html\n<ids-layout-flex wrap=\"wrap\">\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with item align-self (center).\nThe value can be use: auto, baseline, center, stretch, flex-start, flex-end\n\n```html\n<ids-layout-flex>\n  <ids-layout-flex-item align-self=\"center\">\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with item grow (1).\nThe value can be use: 0, 1\n\n```html\n<ids-layout-flex>\n  <ids-layout-flex-item grow=\"1\">\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with item shrink (0).\nThe value can be use: 0, 1\n\n```html\n<ids-layout-flex>\n  <ids-layout-flex-item shrink=\"0\">\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nStandalone CSS Example\n\n```html\n<div class=\"ids-layout-flex ids-layout-flex-gap-8\">\n  <div class=\"ids-layout-flex-item\">\n    <span class=\"ids-text\">test</span>\n  </div>\n  <div class=\"ids-layout-flex-item\">\n    <span class=\"ids-text\">test</span>\n  </div>\n  <div class=\"ids-layout-flex-item\">\n    <span class=\"ids-text\">test</span>\n  </div>\n</div>\n```\n\n## Settings and Attributes (IdsLayoutFlex)\n\n- `alignContent` {string} sets the align-content setting, value can be use: `flex-start`, `flex-end`, `center`, `space-between`, `space-around`, `space-evenly`, `stretch`, `start`, `end`, `baseline`.\n- `alignItems` {string} sets the align-items setting, value can be use: `start`, `end`, `flex-start`, `flex-end`, `center`, `baseline`, `stretch`.\n- `direction` {string} sets the direction setting, value can be use: `row`, `row-reverse`, `column`, `column-reverse`.\n- `display` {string} sets the display setting, value can be use: `flex`, `inline-flex`.\n- `gap` {string|number} sets the gap apply same for both horizontal and vertical sides, value can be use: 0, 1, 2, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40.\n- `gapX` {string|number} sets the horizontal gap, value can be use: 0, 1, 2, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40.\n- `gapY` {string|number} sets the vertical gap, value can be use: 0, 1, 2, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40.\n- `justifyContent` {string} sets the justify-content setting, value can be use: `start`, `end`, `flex-start`, `flex-end`, `center`, `left`, `right`, `space-between`, `space-around`, `space-evenly`.\n- `wrap` {string} sets the wrap setting, value can be use: `nowrap`, `wrap`, `wrap-reverse`.\n\n## Settings and Attributes (IdsLayoutFlexItem)\n\n- `alignSelf` {string} sets the align-self setting, value can be use: `auto`, `baseline`, `center`, `stretch`, `flex-start`, `flex-end`.\n- `grow` {string|number} sets the grow setting, value can be use: 0, 1\n- `shrink` {string|number} sets the shrink setting, value can be use: 0, 1\n\n## Keyboard Guidelines\n\nA layout flex is not on its own keyboard focusable and has no keyboard interaction.\n\n## Responsive Guidelines\n\n- A Layout Flex will flow automatically with the screen size.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**4.x to 5.x**\n\n- New concept in 5.x\n\n## Regional Considerations\n\nThe entire flex will flip direction in Right-To-Left languages.\n"}},{"name":"ids-layout-flex","description":{"kind":"markdown","value":"# Ids Layout Flex Component\n\n## Description\n\nThe Ids Layout Flex is comprised of 2 web components, IdsLayoutFlex and IdsLayoutFlexItem. IdsLayoutFlex is the parent container in which the child items defined. IdsLayoutFlexItem is a child element of Layout Flex. These elements contain the UI contents. A Layout Flex can also be nested inside a layout flex item.\n\n## Use Cases\n\n- Use to layout complex forms\n- Use to layout a list\n\n## Terminology\n\n- **Flex**: Container that has the `display: flex` property set on it. We refer to this as `ids-layout-flex`.\n- **FlexItem** Child element of layout flex, we refer to this as `ids-layout-flex-item`.\n\n## Features (With Code Examples)\n\nBy default the layout flex is set as direction row.\n\n```html\n<ids-layout-flex>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with gap (8).\nGap can set horizontal as (gap-x) and vertical as (gap-y)\nThe value can be use: 0, 1, 2, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40\n\n```html\n<ids-layout-flex gap=\"8\">\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with align-content (center).\nThe value can be use: flex-start, flex-end, center, space-between, space-around, space-evenly, stretch, start, end, baseline\n\n```html\n<ids-layout-flex align-content=\"center\">\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with align-items (center).\nThe value can be use: start, end, flex-start, flex-end, center, baseline, stretch\n\n```html\n<ids-layout-flex align-items=\"center\">\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with direction (column).\nThe value can be use: row, row-reverse, column, column-reverse\n\n```html\n<ids-layout-flex direction=\"column\">\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with display (inline-flex).\nThe value can be use: flex, inline-flex\n\n```html\n<ids-layout-flex display=\"inline-flex\">\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with justify-content (center).\nThe value can be use: start, end, flex-start, flex-end, center, left, right, space-between, space-around, space-evenly\n\n```html\n<ids-layout-flex justify-content=\"center\">\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with wrap (wrap).\nThe value can be use: nowrap, wrap, wrap-reverse\n\n```html\n<ids-layout-flex wrap=\"wrap\">\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with item align-self (center).\nThe value can be use: auto, baseline, center, stretch, flex-start, flex-end\n\n```html\n<ids-layout-flex>\n  <ids-layout-flex-item align-self=\"center\">\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with item grow (1).\nThe value can be use: 0, 1\n\n```html\n<ids-layout-flex>\n  <ids-layout-flex-item grow=\"1\">\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nExample of flex with item shrink (0).\nThe value can be use: 0, 1\n\n```html\n<ids-layout-flex>\n  <ids-layout-flex-item shrink=\"0\">\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n  <ids-layout-flex-item>\n    <ids-text font-size=\"12\">test</ids-text>\n  </ids-layout-flex-item>\n</ids-layout-flex>\n```\n\nStandalone CSS Example\n\n```html\n<div class=\"ids-layout-flex ids-layout-flex-gap-8\">\n  <div class=\"ids-layout-flex-item\">\n    <span class=\"ids-text\">test</span>\n  </div>\n  <div class=\"ids-layout-flex-item\">\n    <span class=\"ids-text\">test</span>\n  </div>\n  <div class=\"ids-layout-flex-item\">\n    <span class=\"ids-text\">test</span>\n  </div>\n</div>\n```\n\n## Settings and Attributes (IdsLayoutFlex)\n\n- `alignContent` {string} sets the align-content setting, value can be use: `flex-start`, `flex-end`, `center`, `space-between`, `space-around`, `space-evenly`, `stretch`, `start`, `end`, `baseline`.\n- `alignItems` {string} sets the align-items setting, value can be use: `start`, `end`, `flex-start`, `flex-end`, `center`, `baseline`, `stretch`.\n- `direction` {string} sets the direction setting, value can be use: `row`, `row-reverse`, `column`, `column-reverse`.\n- `display` {string} sets the display setting, value can be use: `flex`, `inline-flex`.\n- `gap` {string|number} sets the gap apply same for both horizontal and vertical sides, value can be use: 0, 1, 2, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40.\n- `gapX` {string|number} sets the horizontal gap, value can be use: 0, 1, 2, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40.\n- `gapY` {string|number} sets the vertical gap, value can be use: 0, 1, 2, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40.\n- `justifyContent` {string} sets the justify-content setting, value can be use: `start`, `end`, `flex-start`, `flex-end`, `center`, `left`, `right`, `space-between`, `space-around`, `space-evenly`.\n- `wrap` {string} sets the wrap setting, value can be use: `nowrap`, `wrap`, `wrap-reverse`.\n\n## Settings and Attributes (IdsLayoutFlexItem)\n\n- `alignSelf` {string} sets the align-self setting, value can be use: `auto`, `baseline`, `center`, `stretch`, `flex-start`, `flex-end`.\n- `grow` {string|number} sets the grow setting, value can be use: 0, 1\n- `shrink` {string|number} sets the shrink setting, value can be use: 0, 1\n\n## Keyboard Guidelines\n\nA layout flex is not on its own keyboard focusable and has no keyboard interaction.\n\n## Responsive Guidelines\n\n- A Layout Flex will flow automatically with the screen size.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**4.x to 5.x**\n\n- New concept in 5.x\n\n## Regional Considerations\n\nThe entire flex will flip direction in Right-To-Left languages.\n"}},{"name":"ids-layout-grid-cell","attributes":[{"name":"closeButton","values":[]},{"name":"alignContent","description":"Get the grid align-content setting","values":[]},{"name":"colEnd","description":"Get col-end attribute","values":[]},{"name":"colEndXs","description":"Get col-end-xs attribute","values":[]},{"name":"colEndSm","description":"Get col-end-sm attribute","values":[]},{"name":"colEndMd","description":"Get col-end-md attribute","values":[]},{"name":"colEndLg","description":"Get col-end-lg attribute","values":[]},{"name":"colEndXl","description":"Get col-end-xl attribute","values":[]},{"name":"colEndXxl","description":"Get col-end-xxl attribute","values":[]},{"name":"colSpan","description":"Get col-span attribute","values":[]},{"name":"colSpanXs","description":"Get col-span-xs attribute","values":[]},{"name":"colSpanSm","description":"Get col-span-sm attribute","values":[]},{"name":"colSpanMd","description":"Get col-span-md attribute","values":[]},{"name":"colSpanLg","description":"Get col-span-lg attribute","values":[]},{"name":"colSpanXl","description":"Get col-span-xl attribute","values":[]},{"name":"colSpanXxl","description":"Get col-span-xxl attribute","values":[]},{"name":"colStart","description":"Get the col-start attribute","values":[]},{"name":"colStartXs","description":"Get the col-start-xs attribute","values":[]},{"name":"colStartSm","description":"Get the col-start-sm attribute","values":[]},{"name":"colStartMd","description":"Get the col-start-md attribute","values":[]},{"name":"colStartLg","description":"Get the col-start-lg attribute","values":[]},{"name":"colStartXl","description":"Get the col-start-xl attribute","values":[]},{"name":"colStartXxl","description":"Get the col-start-xxl attribute","values":[]},{"name":"editable","description":"Get the editable attribute","values":[]},{"name":"fill","description":"Get the fill attribute","values":[]},{"name":"height","description":"Get the height attribute","values":[]},{"name":"justifyContent","description":"Get the grid justify setting","values":[]},{"name":"minHeight","description":"Get the minHeight attribute","values":[]},{"name":"order","description":"Get the order attribute","values":[]},{"name":"orderXs","description":"Get the order-xs attribute","values":[]},{"name":"orderSm","description":"Get the order-sm attribute","values":[]},{"name":"orderMd","description":"Get the order-md attribute","values":[]},{"name":"orderLg","description":"Get the order-lg attribute","values":[]},{"name":"orderXl","description":"Get the order-xl attribute","values":[]},{"name":"orderXxl","description":"Get the order-xxl attribute","values":[]},{"name":"padding","description":"Get the padding attribute","values":[]},{"name":"rowSpan","description":"Get the row-span attribute","values":[]},{"name":"rowSpanXs","description":"Get the row-span attribute","values":[]},{"name":"rowSpanSm","description":"Get the row-span-sm attribute","values":[]},{"name":"rowSpanMd","description":"Get the row-span-md attribute","values":[]},{"name":"rowSpanLg","description":"Get the row-span-lg attribute","values":[]},{"name":"rowSpanXl","description":"Get the row-span-xl attribute","values":[]},{"name":"rowSpanXxl","description":"Get the row-span-xxl attribute","values":[]},{"name":"sticky","description":"Get the sticky attribute","values":[]},{"name":"stickyPosition","description":"Get the sticky-position attribute","values":[]}],"description":{"kind":"markdown","value":"# Ids Layout Grid Component\n\n## Description\n\nThe Ids Layout Grid is comprised of 2 web components, IdsLayoutGrid and IdsLayoutGridCell. IdsLayoutGrid is the parent grid container in which the columns and rows are defined. IdsLayoutGridCell is a child element of Layout Grid. These elements contain the contents of your UI and can span multi columns or rows and be positioned along the tracks of the Layout Grid. A Layout Grid can also be nested inside a Layout Grid Cell.\n\n## Use Cases\n\n- Use to create full page layouts (i.e Header, Sidebar, Main Content, Footer).\n- Use to layout complex forms\n- Use to layout a list of IdsCards\n\n## Attributes\n\n### IdsLayoutGrid\n- **AutoFit**: Automatically adjust the width or height of a cell, row, or column to fit its contents.\n- **AutoFill**: Automatically fill a range of cells with a pattern or sequence.\n- **Cols**: Specifies the number of columns by default in the grid.\n- **ColsXs**: Specifies the number of columns to use on extra small screens.\n- **ColsSm**: Specifies the number of columns to use on small screens.\n- **ColsMd**: Specifies the number of columns to use on medium screens.\n- **ColsLg**: Specifies the number of columns to use on large screens.\n- **ColsXl**: Specifies the number of columns to use on extra large screens.\n- **ColsXxl**: Specifies the number of columns to use on extra-extra large screens.\n- **Rows**: Specifies the number of rows by default in the grid.\n- **RowsXs**: Specifies the number of rows to use on extra small screens.\n- **RowsSm**: Specifies the number of rows to use on small screens.\n- **RowsMd**: Specifies the number of rows to use on medium screens.\n- **RowsLg**: Specifies the number of rows to use on large screens.\n- **RowsXl**: Specifies the number of rows to use on extra large screens.\n- **RowsXxl**: Specifies the number of rows to use on extra-extra large screens.\n- **RowHeight**: Specifies the height of a row in the grid.\n- **MinColWidth**: Specifies the minimum width of a column in a grid.\n- **MaxColWidth**: Specifies the maximum width of a column in a grid.\n- **MinRowHeight**: Specifies the minimum height of a row in a grid.\n- **MaxRowHeight**: Specifies the maximum height of a row in a grid.\n- **Gap**: Specifies the size of the gap between cells in a grid. If not assigned defaults to `md`.\n- **Margin**: Specifies the amount of space between a grid and its outer border.\n- **MarginY**: Specifies the amount of vertical space between a grid and its outer border.\n- **Padding**: Specifies the amount of space between a grid content and its inner border.\n- **PaddingX**: Specifies the amount of horizontal space between a grid content and its inner border.\n- **PaddingY**: Specifies the amount of vertical space between a grid and its inner border.\n- **JustifyContent**: Specifies how to align the items in a grid along the main axis. If not assigned defaults to `start`.\n- **Flow**: Specifies how the items in a grid should wrap or overflow when there isn't enough space.\n\n### IdsLayoutGridCell\n- **ColSpan**: Specifies the number of columns a cell should span by default in a grid.\n- **ColSpanXs**: Specifies the number of columns a cell should span on extra small screens.\n- **ColSpanSm**: Specifies the number of columns a cell should span on small screens.\n- **ColSpanMd**: Specifies the number of columns a cell should span on medium screens.\n- **ColSpanLg**: Specifies the number of columns a cell should span on large screens.\n- **ColSpanXl**: Specifies the number of columns a cell should span on extra large screens.\n- **ColSpanXxl**: Specifies the number of columns a cell should span on extra-extra large screens.\n- **ColStart**: Specifies the starting column for a cell by default in a grid.\n- **ColStartXs**: Specifies the starting column for a cell on extra small screens.\n- **ColStartSm**: Specifies the starting column for a cell on small screens.\n- **ColStartMd**: Specifies the starting column for a cell on medium screens.\n- **ColStartLg**: Specifies the starting column for a cell on large screens.\n- **ColStartXl**: Specifies the starting column for a cell on extra large screens.\n- **ColStartXxl**: Specifies the starting column for a cell on extra-extra large screens.\n- **ColEnd**: Specifies the ending column for a cell by default in a grid.\n- **ColEndXs**: Specifies the ending column for a cell on extra small screens.\n- **ColEndSm**: Specifies the ending column for a cell on small screens.\n- **ColEndMd**: Specifies the ending column for a cell on medium screens.\n- **ColEndLg**: Specifies the ending column for a cell on large screens.\n- **ColEndXl**: Specifies the ending column for a cell on extra large screens.\n- **ColEndXxl**: Specifies the ending column for a cell on extra-extra large screens.\n- **Editable**: Specifies whether the content of an element can be edited by the user.\n- **Fill**: Specifies whether an element should fill the available space in its container.\n- **Height**: Specifies the height of an element.\n- **MinHeight**: Specifies the minimum height of an element.\n- **Order**: Specifies the order in which an element should appear by default in a container.\n- **OrderXs**: Specifies the order in which an element should appear on extra small screens.\n- **OrderSm**: Specifies the order in which an element should appear on small screens.\n- **OrderMd**: Specifies the order in which an element should appear on medium screens.\n- **OrderLg**: Specifies the order in which an element should appear on large screens.\n- **OrderXl**: Specifies the order in which an element should appear on extra large screens.\n- **OrderXxl**: Specifies the order in which an element should appear on extra-extra large screens.\n- **RowSpan**: Specifies the number of rows a cell should span by default in a grid.\n- **RowSpanXs**: Specifies the number of rows a cell should span on extra small screens.\n- **RowSpanSm**: Specifies the number of rows a cell should span on small screens.\n- **RowSpanMd**: Specifies the number of rows a cell should span on medium screens.\n- **RowSpanLg**: Specifies the number of rows a cell should span on large screens.\n- **RowSpanXl**: Specifies the number of rows a cell should span on extra large screens.\n- **RowSpanXxl**: Specifies the number of rows a cell should span on extra-extra large screens.\n- **Sticky**: Specifies whether an element should be \"stuck\" to a viewport\n\n## Responsive Breakpoints\n\n- **XS**: 360px\n- **S**: 600px\n- **MD**: 840px\n- **LG**: 1024px\n- **XL**: 1280px\n- **XXL**: 1440px\n\n**Example Usage**\n## Features (With Code Examples)\n\n```html\n<ids-layout-grid cols=\"2\" cols-lg=\"4\" cols-xl=\"6\" cols-xxl=\"8\">\n```\n\nThis `<ids-layout-grid>` element has four attributes (cols, cols-lg, cols-xl, and cols-xxl) that are used to define the number of columns in the grid layout at different breakpoint sizes. The `cols` attribute sets the number of columns in the grid layout by default. The `cols-lg` attribute sets the number of columns in the grid layout at the lg breakpoint size (large devices/screen sizes). The `cols-xl` attribute sets the number of columns in the grid layout at the xl breakpoint size (extra-large devices/screen sizes).\n\nFinally, the `cols-xxl` attribute sets the number of columns in the grid layout at the xxl breakpoint size (extra-extra-large devices/screen sizes). Overall, this code is defining a grid layout that will display two columns by default and adjust the number of columns displayed at different breakpoint sizes for different device types.\n\n---\n\n```html\n<ids-layout-grid-cell col-span=\"2\" col-span-lg=\"4\">\n```\n\nThis `<ids-layout-grid-cell>` element is used to define a cell within a grid layout. It has two attributes (`col-span` and `col-span-lg`) that define the number of columns a cell should span at different breakpoint sizes. The `col-span` attribute sets the number of columns that the cell should span by default. The `col-span-lg` attribute sets the number of columns that the cell should span at the lg breakpoint size (large devices) and its value is set to 4. Overall, this code is defining a cell within a grid layout that will span two columns by default and adjust the number of columns it spans at the lg breakpoint size.\n\n---\n\n```html\n<ids-layout-grid\n    auto-fit\n    min-col-width=\"100px\"\n    max-col-width=\"1fr\"\n>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n</ids-layout-grid>\n```\n\nFor AutoFit layout the grid cells in this example have a min/max value of 100px and 1fr respectively. The cells will take up as much space as is available until they reach the threshold of the MinColWidth, then they will automatically shift until they reach that threshold again. This removes the need for media queries in many cases.\n\n---\n\n```html\n<ids-layout-grid cols=\"4\">\n   <ids-layout-grid-cell col-span=\"3\" fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell row-span=\"2\" fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n</ids-layout-grid>\n```\n\nAn Ids Layout Grid with a custom number of columns or rows. The example below shows a 4 column grid where the first cell spans 3 columns and the 3rd cell spans 2 rows.\n\n---\n\nExamples of grid with responsive col-spans\n\n```html\n<ids-layout-grid\n    cols=\"12\"\n>\n  <ids-layout-grid-cell col-span=\"12\" col-span-sm=\"6\" fill>\n    <ids-text font-size=\"12\">2 Cols</ids-text>\n  </ids-layout-grid-cell>\n  <ids-layout-grid-cell col-span=\"12\" col-span-sm=\"6\" col-span-md=\"4\" fill>\n    <ids-text font-size=\"12\">2 Cols</ids-text>\n  </ids-layout-grid-cell>\n</ids-layout-grid>\n```\n\n--\n\nNested Grid. An IdsLayoutGrid component can be nested inside an IdsLayoutGridCell.\n\n```html\n<ids-layout-grid cols=\"4\">\n   <ids-layout-grid-cell col-span=\"3\" fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell row-span=\"2\" fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill>\n      <ids-layout-grid auto>\n        <ids-layout-grid-cell fill></ids-layout-grid-cell>\n        <ids-layout-grid-cell fill></ids-layout-grid-cell>\n        <ids-layout-grid-cell fill></ids-layout-grid-cell>\n      </ids-layout-grid>\n   </ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n</ids-layout-grid>\n```\n\nStandalone CSS Example\n\n```html\n<div class=\"ids-layout-grid ids-layout-grid-cols-3\">\n  <div class=\"ids-layout-grid-cell ids-layout-grid-col-span-2 fill\"><ids-text font-size=\"12\">A</ids-text></div>\n  <div class=\"ids-layout-grid-cell fill\"><ids-text font-size=\"12\">B</ids-text></div>\n</div>\n```\n\n--\n## Keyboard Guidelines\n\nA layout grid is not on its own keyboard focusable and has no keyboard interaction.\n\n## Responsive Guidelines\n\n- A Layout Grid set to auto-fit or auto-fill will flow automatically with the screen size.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- New concept in 4.x\n\n**4.x to 5.x**\n\n- The Layout grid replaces the former grid entirely. Apply the new markup.\n- Using a 8pt style grid https://builttoadapt.io/intro-to-the-8-point-grid-system-d2573cde8632\n- Markup has changed to a custom element `<ids-layout-grid></ids-layout-grid>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Regional Considerations\n\nThe entire grid will flip direction in Right-To-Left languages.\n"}},{"name":"ids-layout-grid-common","description":{"kind":"markdown","value":"# Ids Layout Grid Component\n\n## Description\n\nThe Ids Layout Grid is comprised of 2 web components, IdsLayoutGrid and IdsLayoutGridCell. IdsLayoutGrid is the parent grid container in which the columns and rows are defined. IdsLayoutGridCell is a child element of Layout Grid. These elements contain the contents of your UI and can span multi columns or rows and be positioned along the tracks of the Layout Grid. A Layout Grid can also be nested inside a Layout Grid Cell.\n\n## Use Cases\n\n- Use to create full page layouts (i.e Header, Sidebar, Main Content, Footer).\n- Use to layout complex forms\n- Use to layout a list of IdsCards\n\n## Attributes\n\n### IdsLayoutGrid\n- **AutoFit**: Automatically adjust the width or height of a cell, row, or column to fit its contents.\n- **AutoFill**: Automatically fill a range of cells with a pattern or sequence.\n- **Cols**: Specifies the number of columns by default in the grid.\n- **ColsXs**: Specifies the number of columns to use on extra small screens.\n- **ColsSm**: Specifies the number of columns to use on small screens.\n- **ColsMd**: Specifies the number of columns to use on medium screens.\n- **ColsLg**: Specifies the number of columns to use on large screens.\n- **ColsXl**: Specifies the number of columns to use on extra large screens.\n- **ColsXxl**: Specifies the number of columns to use on extra-extra large screens.\n- **Rows**: Specifies the number of rows by default in the grid.\n- **RowsXs**: Specifies the number of rows to use on extra small screens.\n- **RowsSm**: Specifies the number of rows to use on small screens.\n- **RowsMd**: Specifies the number of rows to use on medium screens.\n- **RowsLg**: Specifies the number of rows to use on large screens.\n- **RowsXl**: Specifies the number of rows to use on extra large screens.\n- **RowsXxl**: Specifies the number of rows to use on extra-extra large screens.\n- **RowHeight**: Specifies the height of a row in the grid.\n- **MinColWidth**: Specifies the minimum width of a column in a grid.\n- **MaxColWidth**: Specifies the maximum width of a column in a grid.\n- **MinRowHeight**: Specifies the minimum height of a row in a grid.\n- **MaxRowHeight**: Specifies the maximum height of a row in a grid.\n- **Gap**: Specifies the size of the gap between cells in a grid. If not assigned defaults to `md`.\n- **Margin**: Specifies the amount of space between a grid and its outer border.\n- **MarginY**: Specifies the amount of vertical space between a grid and its outer border.\n- **Padding**: Specifies the amount of space between a grid content and its inner border.\n- **PaddingX**: Specifies the amount of horizontal space between a grid content and its inner border.\n- **PaddingY**: Specifies the amount of vertical space between a grid and its inner border.\n- **JustifyContent**: Specifies how to align the items in a grid along the main axis. If not assigned defaults to `start`.\n- **Flow**: Specifies how the items in a grid should wrap or overflow when there isn't enough space.\n\n### IdsLayoutGridCell\n- **ColSpan**: Specifies the number of columns a cell should span by default in a grid.\n- **ColSpanXs**: Specifies the number of columns a cell should span on extra small screens.\n- **ColSpanSm**: Specifies the number of columns a cell should span on small screens.\n- **ColSpanMd**: Specifies the number of columns a cell should span on medium screens.\n- **ColSpanLg**: Specifies the number of columns a cell should span on large screens.\n- **ColSpanXl**: Specifies the number of columns a cell should span on extra large screens.\n- **ColSpanXxl**: Specifies the number of columns a cell should span on extra-extra large screens.\n- **ColStart**: Specifies the starting column for a cell by default in a grid.\n- **ColStartXs**: Specifies the starting column for a cell on extra small screens.\n- **ColStartSm**: Specifies the starting column for a cell on small screens.\n- **ColStartMd**: Specifies the starting column for a cell on medium screens.\n- **ColStartLg**: Specifies the starting column for a cell on large screens.\n- **ColStartXl**: Specifies the starting column for a cell on extra large screens.\n- **ColStartXxl**: Specifies the starting column for a cell on extra-extra large screens.\n- **ColEnd**: Specifies the ending column for a cell by default in a grid.\n- **ColEndXs**: Specifies the ending column for a cell on extra small screens.\n- **ColEndSm**: Specifies the ending column for a cell on small screens.\n- **ColEndMd**: Specifies the ending column for a cell on medium screens.\n- **ColEndLg**: Specifies the ending column for a cell on large screens.\n- **ColEndXl**: Specifies the ending column for a cell on extra large screens.\n- **ColEndXxl**: Specifies the ending column for a cell on extra-extra large screens.\n- **Editable**: Specifies whether the content of an element can be edited by the user.\n- **Fill**: Specifies whether an element should fill the available space in its container.\n- **Height**: Specifies the height of an element.\n- **MinHeight**: Specifies the minimum height of an element.\n- **Order**: Specifies the order in which an element should appear by default in a container.\n- **OrderXs**: Specifies the order in which an element should appear on extra small screens.\n- **OrderSm**: Specifies the order in which an element should appear on small screens.\n- **OrderMd**: Specifies the order in which an element should appear on medium screens.\n- **OrderLg**: Specifies the order in which an element should appear on large screens.\n- **OrderXl**: Specifies the order in which an element should appear on extra large screens.\n- **OrderXxl**: Specifies the order in which an element should appear on extra-extra large screens.\n- **RowSpan**: Specifies the number of rows a cell should span by default in a grid.\n- **RowSpanXs**: Specifies the number of rows a cell should span on extra small screens.\n- **RowSpanSm**: Specifies the number of rows a cell should span on small screens.\n- **RowSpanMd**: Specifies the number of rows a cell should span on medium screens.\n- **RowSpanLg**: Specifies the number of rows a cell should span on large screens.\n- **RowSpanXl**: Specifies the number of rows a cell should span on extra large screens.\n- **RowSpanXxl**: Specifies the number of rows a cell should span on extra-extra large screens.\n- **Sticky**: Specifies whether an element should be \"stuck\" to a viewport\n\n## Responsive Breakpoints\n\n- **XS**: 360px\n- **S**: 600px\n- **MD**: 840px\n- **LG**: 1024px\n- **XL**: 1280px\n- **XXL**: 1440px\n\n**Example Usage**\n## Features (With Code Examples)\n\n```html\n<ids-layout-grid cols=\"2\" cols-lg=\"4\" cols-xl=\"6\" cols-xxl=\"8\">\n```\n\nThis `<ids-layout-grid>` element has four attributes (cols, cols-lg, cols-xl, and cols-xxl) that are used to define the number of columns in the grid layout at different breakpoint sizes. The `cols` attribute sets the number of columns in the grid layout by default. The `cols-lg` attribute sets the number of columns in the grid layout at the lg breakpoint size (large devices/screen sizes). The `cols-xl` attribute sets the number of columns in the grid layout at the xl breakpoint size (extra-large devices/screen sizes).\n\nFinally, the `cols-xxl` attribute sets the number of columns in the grid layout at the xxl breakpoint size (extra-extra-large devices/screen sizes). Overall, this code is defining a grid layout that will display two columns by default and adjust the number of columns displayed at different breakpoint sizes for different device types.\n\n---\n\n```html\n<ids-layout-grid-cell col-span=\"2\" col-span-lg=\"4\">\n```\n\nThis `<ids-layout-grid-cell>` element is used to define a cell within a grid layout. It has two attributes (`col-span` and `col-span-lg`) that define the number of columns a cell should span at different breakpoint sizes. The `col-span` attribute sets the number of columns that the cell should span by default. The `col-span-lg` attribute sets the number of columns that the cell should span at the lg breakpoint size (large devices) and its value is set to 4. Overall, this code is defining a cell within a grid layout that will span two columns by default and adjust the number of columns it spans at the lg breakpoint size.\n\n---\n\n```html\n<ids-layout-grid\n    auto-fit\n    min-col-width=\"100px\"\n    max-col-width=\"1fr\"\n>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n</ids-layout-grid>\n```\n\nFor AutoFit layout the grid cells in this example have a min/max value of 100px and 1fr respectively. The cells will take up as much space as is available until they reach the threshold of the MinColWidth, then they will automatically shift until they reach that threshold again. This removes the need for media queries in many cases.\n\n---\n\n```html\n<ids-layout-grid cols=\"4\">\n   <ids-layout-grid-cell col-span=\"3\" fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell row-span=\"2\" fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n</ids-layout-grid>\n```\n\nAn Ids Layout Grid with a custom number of columns or rows. The example below shows a 4 column grid where the first cell spans 3 columns and the 3rd cell spans 2 rows.\n\n---\n\nExamples of grid with responsive col-spans\n\n```html\n<ids-layout-grid\n    cols=\"12\"\n>\n  <ids-layout-grid-cell col-span=\"12\" col-span-sm=\"6\" fill>\n    <ids-text font-size=\"12\">2 Cols</ids-text>\n  </ids-layout-grid-cell>\n  <ids-layout-grid-cell col-span=\"12\" col-span-sm=\"6\" col-span-md=\"4\" fill>\n    <ids-text font-size=\"12\">2 Cols</ids-text>\n  </ids-layout-grid-cell>\n</ids-layout-grid>\n```\n\n--\n\nNested Grid. An IdsLayoutGrid component can be nested inside an IdsLayoutGridCell.\n\n```html\n<ids-layout-grid cols=\"4\">\n   <ids-layout-grid-cell col-span=\"3\" fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell row-span=\"2\" fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill>\n      <ids-layout-grid auto>\n        <ids-layout-grid-cell fill></ids-layout-grid-cell>\n        <ids-layout-grid-cell fill></ids-layout-grid-cell>\n        <ids-layout-grid-cell fill></ids-layout-grid-cell>\n      </ids-layout-grid>\n   </ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n</ids-layout-grid>\n```\n\nStandalone CSS Example\n\n```html\n<div class=\"ids-layout-grid ids-layout-grid-cols-3\">\n  <div class=\"ids-layout-grid-cell ids-layout-grid-col-span-2 fill\"><ids-text font-size=\"12\">A</ids-text></div>\n  <div class=\"ids-layout-grid-cell fill\"><ids-text font-size=\"12\">B</ids-text></div>\n</div>\n```\n\n--\n## Keyboard Guidelines\n\nA layout grid is not on its own keyboard focusable and has no keyboard interaction.\n\n## Responsive Guidelines\n\n- A Layout Grid set to auto-fit or auto-fill will flow automatically with the screen size.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- New concept in 4.x\n\n**4.x to 5.x**\n\n- The Layout grid replaces the former grid entirely. Apply the new markup.\n- Using a 8pt style grid https://builttoadapt.io/intro-to-the-8-point-grid-system-d2573cde8632\n- Markup has changed to a custom element `<ids-layout-grid></ids-layout-grid>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Regional Considerations\n\nThe entire grid will flip direction in Right-To-Left languages.\n"}},{"name":"ids-layout-grid","attributes":[{"name":"alignContent","description":"Get the grid align-content setting","values":[]},{"name":"alignItems","description":"Get the grid align-items setting","values":[]},{"name":"autoFit","description":"Get auto-fit attribute","values":[]},{"name":"autoFill","description":"Get auto-fill attribute","values":[]},{"name":"cols","description":"Get columns attribute","values":[]},{"name":"colsXs","description":"Get XS columns attribute","values":[]},{"name":"colsSm","description":"Get SM columns attribute","values":[]},{"name":"colsMd","description":"Get MD columns attribute","values":[]},{"name":"colsLg","description":"Get LG columns attribute","values":[]},{"name":"colsXl","description":"Get XL columns attribute","values":[]},{"name":"colsXxl","description":"Get XXL columns attribute","values":[]},{"name":"minColWidth","description":"Get the minColWidth attribute","values":[]},{"name":"minRowHeight","description":"Get the minRowHeight attribute","values":[]},{"name":"maxColWidth","description":"Get the maxColWidth attribute","values":[]},{"name":"maxRowHeight","description":"Get the maxRowHeight attribute","values":[]},{"name":"gap","description":"Handle The Gap Setting","values":[]},{"name":"margin","description":"Get the margin attribute","values":[]},{"name":"marginY","description":"Get the margin attribute","values":[]},{"name":"padding","description":"Get the padding attribute","values":[]},{"name":"paddingX","description":"Get the paddingX attribute","values":[]},{"name":"paddingY","description":"Get the paddingY attribute","values":[]},{"name":"justifyContent","description":"Get the grid justify setting","values":[]},{"name":"flow","description":"Get the flow attribute","values":[]},{"name":"rows","description":"Get the row attribute","values":[]},{"name":"rowsXs","description":"Get the rowXs attribute","values":[]},{"name":"rowsSm","description":"Get the rowSm attribute","values":[]},{"name":"rowsMd","description":"Get the rowMd attribute","values":[]},{"name":"rowsLg","description":"Get the rowLg attribute","values":[]},{"name":"rowsXl","description":"Get the rowXl attribute","values":[]},{"name":"rowsXxl","description":"Get the rowXxl attribute","values":[]},{"name":"rowHeight","description":"Get the rowHeight attribute","values":[]}],"description":{"kind":"markdown","value":"# Ids Layout Grid Component\n\n## Description\n\nThe Ids Layout Grid is comprised of 2 web components, IdsLayoutGrid and IdsLayoutGridCell. IdsLayoutGrid is the parent grid container in which the columns and rows are defined. IdsLayoutGridCell is a child element of Layout Grid. These elements contain the contents of your UI and can span multi columns or rows and be positioned along the tracks of the Layout Grid. A Layout Grid can also be nested inside a Layout Grid Cell.\n\n## Use Cases\n\n- Use to create full page layouts (i.e Header, Sidebar, Main Content, Footer).\n- Use to layout complex forms\n- Use to layout a list of IdsCards\n\n## Attributes\n\n### IdsLayoutGrid\n- **AutoFit**: Automatically adjust the width or height of a cell, row, or column to fit its contents.\n- **AutoFill**: Automatically fill a range of cells with a pattern or sequence.\n- **Cols**: Specifies the number of columns by default in the grid.\n- **ColsXs**: Specifies the number of columns to use on extra small screens.\n- **ColsSm**: Specifies the number of columns to use on small screens.\n- **ColsMd**: Specifies the number of columns to use on medium screens.\n- **ColsLg**: Specifies the number of columns to use on large screens.\n- **ColsXl**: Specifies the number of columns to use on extra large screens.\n- **ColsXxl**: Specifies the number of columns to use on extra-extra large screens.\n- **Rows**: Specifies the number of rows by default in the grid.\n- **RowsXs**: Specifies the number of rows to use on extra small screens.\n- **RowsSm**: Specifies the number of rows to use on small screens.\n- **RowsMd**: Specifies the number of rows to use on medium screens.\n- **RowsLg**: Specifies the number of rows to use on large screens.\n- **RowsXl**: Specifies the number of rows to use on extra large screens.\n- **RowsXxl**: Specifies the number of rows to use on extra-extra large screens.\n- **RowHeight**: Specifies the height of a row in the grid.\n- **MinColWidth**: Specifies the minimum width of a column in a grid.\n- **MaxColWidth**: Specifies the maximum width of a column in a grid.\n- **MinRowHeight**: Specifies the minimum height of a row in a grid.\n- **MaxRowHeight**: Specifies the maximum height of a row in a grid.\n- **Gap**: Specifies the size of the gap between cells in a grid. If not assigned defaults to `md`.\n- **Margin**: Specifies the amount of space between a grid and its outer border.\n- **MarginY**: Specifies the amount of vertical space between a grid and its outer border.\n- **Padding**: Specifies the amount of space between a grid content and its inner border.\n- **PaddingX**: Specifies the amount of horizontal space between a grid content and its inner border.\n- **PaddingY**: Specifies the amount of vertical space between a grid and its inner border.\n- **JustifyContent**: Specifies how to align the items in a grid along the main axis. If not assigned defaults to `start`.\n- **Flow**: Specifies how the items in a grid should wrap or overflow when there isn't enough space.\n\n### IdsLayoutGridCell\n- **ColSpan**: Specifies the number of columns a cell should span by default in a grid.\n- **ColSpanXs**: Specifies the number of columns a cell should span on extra small screens.\n- **ColSpanSm**: Specifies the number of columns a cell should span on small screens.\n- **ColSpanMd**: Specifies the number of columns a cell should span on medium screens.\n- **ColSpanLg**: Specifies the number of columns a cell should span on large screens.\n- **ColSpanXl**: Specifies the number of columns a cell should span on extra large screens.\n- **ColSpanXxl**: Specifies the number of columns a cell should span on extra-extra large screens.\n- **ColStart**: Specifies the starting column for a cell by default in a grid.\n- **ColStartXs**: Specifies the starting column for a cell on extra small screens.\n- **ColStartSm**: Specifies the starting column for a cell on small screens.\n- **ColStartMd**: Specifies the starting column for a cell on medium screens.\n- **ColStartLg**: Specifies the starting column for a cell on large screens.\n- **ColStartXl**: Specifies the starting column for a cell on extra large screens.\n- **ColStartXxl**: Specifies the starting column for a cell on extra-extra large screens.\n- **ColEnd**: Specifies the ending column for a cell by default in a grid.\n- **ColEndXs**: Specifies the ending column for a cell on extra small screens.\n- **ColEndSm**: Specifies the ending column for a cell on small screens.\n- **ColEndMd**: Specifies the ending column for a cell on medium screens.\n- **ColEndLg**: Specifies the ending column for a cell on large screens.\n- **ColEndXl**: Specifies the ending column for a cell on extra large screens.\n- **ColEndXxl**: Specifies the ending column for a cell on extra-extra large screens.\n- **Editable**: Specifies whether the content of an element can be edited by the user.\n- **Fill**: Specifies whether an element should fill the available space in its container.\n- **Height**: Specifies the height of an element.\n- **MinHeight**: Specifies the minimum height of an element.\n- **Order**: Specifies the order in which an element should appear by default in a container.\n- **OrderXs**: Specifies the order in which an element should appear on extra small screens.\n- **OrderSm**: Specifies the order in which an element should appear on small screens.\n- **OrderMd**: Specifies the order in which an element should appear on medium screens.\n- **OrderLg**: Specifies the order in which an element should appear on large screens.\n- **OrderXl**: Specifies the order in which an element should appear on extra large screens.\n- **OrderXxl**: Specifies the order in which an element should appear on extra-extra large screens.\n- **RowSpan**: Specifies the number of rows a cell should span by default in a grid.\n- **RowSpanXs**: Specifies the number of rows a cell should span on extra small screens.\n- **RowSpanSm**: Specifies the number of rows a cell should span on small screens.\n- **RowSpanMd**: Specifies the number of rows a cell should span on medium screens.\n- **RowSpanLg**: Specifies the number of rows a cell should span on large screens.\n- **RowSpanXl**: Specifies the number of rows a cell should span on extra large screens.\n- **RowSpanXxl**: Specifies the number of rows a cell should span on extra-extra large screens.\n- **Sticky**: Specifies whether an element should be \"stuck\" to a viewport\n\n## Responsive Breakpoints\n\n- **XS**: 360px\n- **S**: 600px\n- **MD**: 840px\n- **LG**: 1024px\n- **XL**: 1280px\n- **XXL**: 1440px\n\n**Example Usage**\n## Features (With Code Examples)\n\n```html\n<ids-layout-grid cols=\"2\" cols-lg=\"4\" cols-xl=\"6\" cols-xxl=\"8\">\n```\n\nThis `<ids-layout-grid>` element has four attributes (cols, cols-lg, cols-xl, and cols-xxl) that are used to define the number of columns in the grid layout at different breakpoint sizes. The `cols` attribute sets the number of columns in the grid layout by default. The `cols-lg` attribute sets the number of columns in the grid layout at the lg breakpoint size (large devices/screen sizes). The `cols-xl` attribute sets the number of columns in the grid layout at the xl breakpoint size (extra-large devices/screen sizes).\n\nFinally, the `cols-xxl` attribute sets the number of columns in the grid layout at the xxl breakpoint size (extra-extra-large devices/screen sizes). Overall, this code is defining a grid layout that will display two columns by default and adjust the number of columns displayed at different breakpoint sizes for different device types.\n\n---\n\n```html\n<ids-layout-grid-cell col-span=\"2\" col-span-lg=\"4\">\n```\n\nThis `<ids-layout-grid-cell>` element is used to define a cell within a grid layout. It has two attributes (`col-span` and `col-span-lg`) that define the number of columns a cell should span at different breakpoint sizes. The `col-span` attribute sets the number of columns that the cell should span by default. The `col-span-lg` attribute sets the number of columns that the cell should span at the lg breakpoint size (large devices) and its value is set to 4. Overall, this code is defining a cell within a grid layout that will span two columns by default and adjust the number of columns it spans at the lg breakpoint size.\n\n---\n\n```html\n<ids-layout-grid\n    auto-fit\n    min-col-width=\"100px\"\n    max-col-width=\"1fr\"\n>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n</ids-layout-grid>\n```\n\nFor AutoFit layout the grid cells in this example have a min/max value of 100px and 1fr respectively. The cells will take up as much space as is available until they reach the threshold of the MinColWidth, then they will automatically shift until they reach that threshold again. This removes the need for media queries in many cases.\n\n---\n\n```html\n<ids-layout-grid cols=\"4\">\n   <ids-layout-grid-cell col-span=\"3\" fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell row-span=\"2\" fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n</ids-layout-grid>\n```\n\nAn Ids Layout Grid with a custom number of columns or rows. The example below shows a 4 column grid where the first cell spans 3 columns and the 3rd cell spans 2 rows.\n\n---\n\nExamples of grid with responsive col-spans\n\n```html\n<ids-layout-grid\n    cols=\"12\"\n>\n  <ids-layout-grid-cell col-span=\"12\" col-span-sm=\"6\" fill>\n    <ids-text font-size=\"12\">2 Cols</ids-text>\n  </ids-layout-grid-cell>\n  <ids-layout-grid-cell col-span=\"12\" col-span-sm=\"6\" col-span-md=\"4\" fill>\n    <ids-text font-size=\"12\">2 Cols</ids-text>\n  </ids-layout-grid-cell>\n</ids-layout-grid>\n```\n\n--\n\nNested Grid. An IdsLayoutGrid component can be nested inside an IdsLayoutGridCell.\n\n```html\n<ids-layout-grid cols=\"4\">\n   <ids-layout-grid-cell col-span=\"3\" fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell row-span=\"2\" fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill>\n      <ids-layout-grid auto>\n        <ids-layout-grid-cell fill></ids-layout-grid-cell>\n        <ids-layout-grid-cell fill></ids-layout-grid-cell>\n        <ids-layout-grid-cell fill></ids-layout-grid-cell>\n      </ids-layout-grid>\n   </ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n   <ids-layout-grid-cell fill></ids-layout-grid-cell>\n</ids-layout-grid>\n```\n\nStandalone CSS Example\n\n```html\n<div class=\"ids-layout-grid ids-layout-grid-cols-3\">\n  <div class=\"ids-layout-grid-cell ids-layout-grid-col-span-2 fill\"><ids-text font-size=\"12\">A</ids-text></div>\n  <div class=\"ids-layout-grid-cell fill\"><ids-text font-size=\"12\">B</ids-text></div>\n</div>\n```\n\n--\n## Keyboard Guidelines\n\nA layout grid is not on its own keyboard focusable and has no keyboard interaction.\n\n## Responsive Guidelines\n\n- A Layout Grid set to auto-fit or auto-fill will flow automatically with the screen size.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- New concept in 4.x\n\n**4.x to 5.x**\n\n- The Layout grid replaces the former grid entirely. Apply the new markup.\n- Using a 8pt style grid https://builttoadapt.io/intro-to-the-8-point-grid-system-d2573cde8632\n- Markup has changed to a custom element `<ids-layout-grid></ids-layout-grid>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Regional Considerations\n\nThe entire grid will flip direction in Right-To-Left languages.\n"}},{"name":"ids-line-chart","attributes":[{"name":"selectionElements","description":"Return chart elements that get selection","values":[]},{"name":"markerSize","description":"Set the size of the markers (aka dots/ticks) in the chart","values":[]},{"name":"DEFAULT_SELECTABLE","values":[]},{"name":"initialized","values":[]},{"name":"svg","values":[]},{"name":"canvas","values":[]},{"name":"emptyMessage","values":[]},{"name":"legend","values":[]},{"name":"sectionWidths","values":[]},{"name":"sectionWidth","values":[]},{"name":"sectionHeights","values":[]},{"name":"sectionHeight","values":[]},{"name":"resizeToParentHeight","values":[]},{"name":"resizeToParentWidth","values":[]},{"name":"parentWidth","values":[]},{"name":"parentHeight","values":[]},{"name":"datasource","description":"Reference to datasource API","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"#xMaxTextWidth","description":"Max width for x-labels text","values":[]},{"name":"#yMaxTextWidth","description":"Max width for y-labels text","values":[]},{"name":"#resizeObserver","description":"Holds the resize observer object","values":[]},{"name":"isGrouped","values":[]},{"name":"markerData","description":"The marker data to use to draw the chart","values":[]},{"name":"#axisLabelsText","description":"Holds the axis labels text object","values":[]},{"name":"height","description":"The width of the chart (in pixels) or 'inherit' from the parent","values":[]},{"name":"horizontal","description":"Flips the orientation to horizontal\nsupported `Axis` and `Bar` type charts","values":[]},{"name":"width","description":"The width of the chart (in pixels) or 'inherit' from the parent","values":[]},{"name":"margins","description":"Set the left, right, top, bottom margins","values":[]},{"name":"bottomRotateMargin","description":"Get bottom rotate margin","values":[]},{"name":"axisLabelsMargin","description":"Get axis labels margin","values":[]},{"name":"textWidths","description":"Set the width the text labels/axes take up on each side.","values":[]},{"name":"data","description":"Set the data array of the chart","values":[]},{"name":"yAxisMin","description":"Set the minimum value on the y axis","values":[]},{"name":"showVerticalGridLines","description":"Show the vertical axis grid lines","values":[]},{"name":"showHorizontalGridLines","description":"Show the horizontal axis grid lines","values":[]},{"name":"colors","description":"Utility function to get the colors series being used in this chart","values":[]},{"name":"xAxisFormatter","description":"Set the format on the x axis items","values":[]},{"name":"yAxisFormatter","description":"Set the format on the y axis items","values":[]},{"name":"cubicBezier","description":"Get a reusable snippet to ease the animation","values":[]},{"name":"animated","description":"Set the animation on/off","values":[]},{"name":"animationSpeed","description":"Set the animation speed in s","values":[]},{"name":"alignXLabels","description":"Set the x axis label alignment between start, middle and end","values":[]},{"name":"stacked","description":"Stack the data forming a stacked bar chart","values":[]},{"name":"axisLabelBottom","description":"Set the bottom axis label text","values":[]},{"name":"axisLabelEnd","description":"Set the end axis label text","values":[]},{"name":"axisLabelMargin","description":"Set the margin for axis label text","values":[]},{"name":"axisLabelStart","description":"Set the start axis label text","values":[]},{"name":"axisLabelTop","description":"Set the top axis label text","values":[]},{"name":"rotateNameLabels","description":"Set the rotation for the axis name label text (eg 45deg)","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# Ids Line Chart Component\n\n## Description\n\nA line chart or line graph is a type of chart which displays information as a series of data points connected by straight line segments. Often Line charts convey a series of data over periods over time. Line charts can use both single and multiple variables to emphasize trends over several series. Users can interact by clicking or tapping on chart lines to focus on a certain series of data on a line chart. And users can also interact by hovering data points to reveal additional information in a tooltip.\n\nFor more information on line charts check out the article [Line Charts Made Simple](https://uxdesign.cc/line-chart-design-made-simple-a1b823510674).\n\n## Use Cases\n\n- Use when you want to show change over time.\n- Use when you want to show trends.\n- Use when you want to show comparison of change for several groups.\n- Use when you want to aid prediction.\n\n## Usage Considerations\n\n- Do not show too many lines at once as it may be difficult to interpret. Studies say 8 max is  a good number.\n- Hover tooltips should only be used to reveal additional non-critical information.\n\n## Terminology\n\n- **Marker**: A UI embellishments that shows the data points (i.e. the dots on a line chart).\n- **Domain**: The domain is all x-values (the values of the graph from left to right)\n- **Range**: The domain is all y-values (the values of the graph from down to up)\n- **Scale**: The range of values in the graph (the values of the graph from down to up) and the amount of steps between each value.\n\n## Features (With Code Examples)\n\nA line chart is defined with a custom element with a width and height.\n\n```html\n<ids-line-chart title=\"A line chart showing component usage\" width=\"800\" height=\"500\"></ids-line-chart>\n```\n\nDatasets can be added to the line chart by passing in an array of objects. Each object must have a `data` and object with `name` and `values` from the data points. Also a name should be given for each data object which will be used as the legend text. The `shortName` is used to show the short name of the legend text and the `abbrName` is used to show an even shorter name of the legend text in responsive situations.\n\n```html\nconst lineData2 = [{\n  data: [{\n    name: 'Jan',\n    value: 1\n  }, {\n    name: 'Feb',\n    value: 2\n  }, {\n    name: 'Mar',\n    value: 3\n  }, {\n    name: 'Apr',\n    value: 5\n  }, {\n    name: 'May',\n    value: 7\n  }, {\n    name: 'Jun',\n    value: 10\n  }],\n  name: 'Component A',\n  shortName: 'Comp A',\n  abbrName: 'A',\n}];\n\ndocument.querySelector('ids-line-chart').data = lineData;\n```\n\nAnother type of chart you can use is a sequential color chart. A sequence of colors is used to represent various concepts of range in low-high density, quantity, and concentration situations. I.E. The data is highly related and should be represented with a single color.\n\nTo achieve this it is recommended to use the `color` setting and pick one of the Ids Colors in the color palette and use variables in its range. For example:\n\n```js\n[{\n   \"data\": [],\n   \"name\": \"Component A\",\n   \"color\": \"var(--ids-color-azure-60)\n }, {\n   \"data\": [],\n   \"name\": \"Component B\",\n   \"shortName\": \"Comp B\",\n   \"abbreviatedName\": \"B\",\n   \"color\": \"var(--ids-color-azure-40)\"\n }, {\n   \"data\": [{\n   ],\n   \"name\": \"Component C\",\n   \"color\": \"var(--ids-color-azure-20)\"\n }]\n```\n\n## Class Hierarchy\n\n- IdsLineChart\n  - IdsAxisChart\n    - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Data Settings\n\nThe following data attributes can be used on the data passed to a chart.\n\n- `data` {object} A data group with one or more `name` and `value` pairs.\n- `shortName` {string} The short name of the legend text.\n- `abbrName` {string} A very short name of the legend text (one or two characters).\n- `color` {string} The color of this line group. This can be either a hex value for example `#FF0000` or a color name like `red` or an ids variable like `var(--ids-color-azure-20)`.\n\n## Settings\n\n- `title` {string} Sets the internal title of the chart (for accessibility).\n- `height` {number} Generally this is calculated automatically but can be used to set a specific height.\n- `width` {number} Generally this is calculated automatically but can be used to set a specific width.\n- `textWidths` {object} Generally this is calculated automatically but can be overridden by setting the amount of space to allocate for margins on the `{ left, right, top, bottom }` sides.\n- `textWidths` {object} Generally this is calculated automatically but can be overridden by setting the amount of space to allocate for text on the `{ left, right, top, bottom }` sides.\n- `yAxisMin` {number}  Set the minimum value on the y axis  (default: 0)\n- `showVerticalGridLines` {boolean}  Show the vertical axis grid lines (default: false)\n- `showHorizontalGridLines` {boolean}  Show the horizontal axis grid lines (default: true)\n- `animated` {boolean}  Set the animation on/off (default: true)\n\n## Events\n\n- `rendered` Fires each time the chart is rendered or rerendered (on resize).\n\n## Themeable Parts\n\n- `chart` the svg outer element\n- `svg` - the outside svg element\n- `marker` - the dots/markers in the chart\n- `line` - the lines in the chart\n\n## Animation\n\nAll points in the line rise along the y-axis from 0 to the appropriate values. Lines build and load at the same time.\n\n## States and Variations\n\n- Color\n- Disabled\n- Animation\n- Marker Style\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>: If the tab is focusable this will focus or unfocus the markers and legend elements\n- <kbd>Space</kbd>: If a marker or legend is focused this act as if clicking it.\n\n## Responsive Guidelines\n\n- Sizes to the given width/height defaulting to that of the immediate parent. In smaller breakpoints the abbreviated name(s) will be shown.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- The line chart was added after version 3.6 so new in 4.x and had a new way to invoke it.\n\n**5.x to 5.x**\n- Line Chart now uses all new markup and classes for web components (see above)\n- Now called IdsAccordion with a namespace\n- The data object is the same format except for two changes.\n  - `shortName` is now `shortName`\n  - `abbreviatedName` is now `abbrName`\n- If using side by side the old line chart requires the height and width of the parent to be visible. So you may need to toggle the visibility of `ids-container` or some new element if its nested in it.\n\n## Designs\n\n[Design Specs 4.5](https://www.figma.com/file/yaJ8mJrqRRej8oTsd6iT8P/IDS-(SoHo)-Component-Library-v4.5?node-id=760%3A771)\n[Design Specs 4.6](https://www.figma.com/file/ok0LLOT9PP1J0kBkPMaZ5c/IDS_Component_File_v4.6-(Draft))\n\n## Accessibility Guidelines\n\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. Ensure the color tags that indicate state like OK, cancel, ect have other ways to indicate that information.\n\n## Regional Considerations\n\nChart labels should be localized in the current language. The chart will flip in RTL mode. For some color blind users the svg patterns should be used.\n"}},{"name":"ids-list-box-option","attributes":[{"name":"value","values":[]}],"description":{"kind":"markdown","value":"# Ids List Box Component\n\n## Description\n\nThe List Box Component is used in the dropdown and autocomplete to form a aria list with options and give the right accessibility. It shouldn't need to be used directly.\nYou might want the listview component if considering using it directly or we might expand on it later.\n\n## Use Cases\n\n- Used with in dropdown and autocomplete\n\n## Terminology\n\n- **listbox**: The aria role for the outside container.\n- **option**: The aria role for the inner options\n\n## Features (With Code Examples)\n\nA normal ids-list-box with options\n\n```html\n<ids-list-box>\n    <ids-list-box-option value=\"opt1\" id=\"opt1\" tooltip=\"Additional Info on Option One\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2\" tooltip=\"Additional Info on Option Two\">Option Two</ids-list-box-option>\n    <ids-list-box-option value=\"opt3\" id=\"opt3\" tooltip=\"Additional Info on Option Three\">Option Three</ids-list-box-option>\n    <ids-list-box-option value=\"opt4\" id=\"opt4\" tooltip=\"Additional Info on Option Four\">Option Four</ids-list-box-option>\n    <ids-list-box-option value=\"opt5\" id=\"opt5\" tooltip=\"Additional Info on Option Five\">Option Five</ids-list-box-option>\n    <ids-list-box-option value=\"opt6\" id=\"opt6\" tooltip=\"Additional Info on Option Six\">Option Six</ids-list-box-option>\n</ids-list-box>\n```\n\n## Settings and Attributes\n\n- `value` {string} The value for use when the option is selected.\n- `id` {string} The id for the option (value is still always needed)\n- `group-label` {string} When set the option will act as group label when used `ids-dropdown`\n\n## Keyboard Guidelines\n\nThe board is done in the dropdown and autocomplete but we might change this.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container. Possibly scrolling as needed based on parent dimensions.\n\n## Converting from Previous Versions\n\n- 3.x: Did not exist\n- 4.x: Did not exist\n\n## Regional Considerations\n\nLabels should be localized in the current language. The icons will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-list-box","attributes":[],"description":{"kind":"markdown","value":"# Ids List Box Component\n\n## Description\n\nThe List Box Component is used in the dropdown and autocomplete to form a aria list with options and give the right accessibility. It shouldn't need to be used directly.\nYou might want the listview component if considering using it directly or we might expand on it later.\n\n## Use Cases\n\n- Used with in dropdown and autocomplete\n\n## Terminology\n\n- **listbox**: The aria role for the outside container.\n- **option**: The aria role for the inner options\n\n## Features (With Code Examples)\n\nA normal ids-list-box with options\n\n```html\n<ids-list-box>\n    <ids-list-box-option value=\"opt1\" id=\"opt1\" tooltip=\"Additional Info on Option One\">Option One</ids-list-box-option>\n    <ids-list-box-option value=\"opt2\" id=\"opt2\" tooltip=\"Additional Info on Option Two\">Option Two</ids-list-box-option>\n    <ids-list-box-option value=\"opt3\" id=\"opt3\" tooltip=\"Additional Info on Option Three\">Option Three</ids-list-box-option>\n    <ids-list-box-option value=\"opt4\" id=\"opt4\" tooltip=\"Additional Info on Option Four\">Option Four</ids-list-box-option>\n    <ids-list-box-option value=\"opt5\" id=\"opt5\" tooltip=\"Additional Info on Option Five\">Option Five</ids-list-box-option>\n    <ids-list-box-option value=\"opt6\" id=\"opt6\" tooltip=\"Additional Info on Option Six\">Option Six</ids-list-box-option>\n</ids-list-box>\n```\n\n## Settings and Attributes\n\n- `value` {string} The value for use when the option is selected.\n- `id` {string} The id for the option (value is still always needed)\n- `group-label` {string} When set the option will act as group label when used `ids-dropdown`\n\n## Keyboard Guidelines\n\nThe board is done in the dropdown and autocomplete but we might change this.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container. Possibly scrolling as needed based on parent dimensions.\n\n## Converting from Previous Versions\n\n- 3.x: Did not exist\n- 4.x: Did not exist\n\n## Regional Considerations\n\nLabels should be localized in the current language. The icons will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-list-builder","attributes":[{"name":"#selectedLiEditor","description":"Active editor of the selected list item","values":[]},{"name":"placeholder","description":"A clone of the list item being dragged,\nit appears during drag to help visualize where the dragged item's position","values":[]},{"name":"actions","description":"List of actions can be performed","values":[]},{"name":"parentEl","description":"Get the parent element","values":[]},{"name":"toolbar","description":"Get the toolbar element","values":[]},{"name":"selectable","description":"Set the selection mode of the listview","values":[]},{"name":"dataKeys","description":"Set the data array of the listview","values":[]},{"name":"data","description":"Set the data set of the list","values":[]},{"name":"selectedLi","values":[]},{"name":"allSelectedLi","values":[]},{"name":"virtualScroll","description":"List builder does not support VS","values":[]},{"name":"initialized","description":"Is the component initialized","values":[]},{"name":"#focusedLiIndex","description":"The currently focused list item","values":[]},{"name":"#activatedIndex","description":"The currently activated list item","values":[]},{"name":"#isTargetCheckbox","description":"The currently target while selecting","values":[]},{"name":"#isApply","description":"The currently apply state while single selecting","values":[]},{"name":"#size","description":"The currently list size","values":[]},{"name":"datasource","description":"The datasource container","values":[]},{"name":"defaultTemplate","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"virtualScrollContainer","values":[]},{"name":"body","values":[]},{"name":"ds","description":"Get the list of all data from dataset","values":[]},{"name":"loaded","description":"Used to determine if data has been loaded into IdsListView","values":[]},{"name":"height","description":"Set the expected height of the viewport for virtual scrolling","values":[]},{"name":"itemHeight","description":"Set the expected height of each item","values":[]},{"name":"activatedItem","description":"Get the activated item","values":[]},{"name":"selected","description":"Get the selected item/s","values":[]},{"name":"sortable","description":"Handles the sortable property and reflects it on the DOM.","values":[]},{"name":"suppressDeactivation","description":"Sets the items to be suppress deactivation for mixed selection only.","values":[]},{"name":"suppressDeselection","description":"Sets the items to be suppress deselection for single selection only.","values":[]},{"name":"hideCheckboxes","description":"Checkboxes will not render if true, only apply to multiple selection.","values":[]},{"name":"label","description":"Set the aria label text","values":[]}],"description":{"kind":"markdown","value":"# Ids ListBuilder\n\n## Description\n\nAn interactive list where you can add, move up/down, edit, and delete items which supports both mouse and keyboard navigation for accessibility.\n\nSelecting an item can be toggled by a mouse click or by tabbing to the list item and hitting 'Space'.\n\nMoving a selected list item up/down can be done by clicking and dragging list items up/down or by toggling the toolbar up/down buttons with mouse or keyboard.\n\nEditing a selected list item can be done by hitting 'Enter' or by toggling the toolbar edit button with mouse or keyboard.\n\nDeleting a selected list item can be done by toggling the toolbar delete button with mouse or keyboard.\n\nAdding a new list item can be done by toggling the toolbar add button with mouse or keyboard.\n\n## Use Cases\n\n- Allows for users to create and edit lists of varying content. After importing JSON or array of objects, allowing user to edit, order, add, and/or delete items.\n\n## Terminology\n\n- **Selected list item**: The currently toggled selected list item, indicated by a blue background and white text\n- **Toolbar**: At the top of the list builder, contains 5 buttons for interacting with the list items\n- **Template**: The pattern or structure of data to display for each list item\n\n## Features (With Code Samples)\n\n### A List Builder with a template to display productNames\n\n```html\n<ids-list-builder>\n  <template>\n    <ids-text font-size=\"16\" type=\"h2\">${productName}</ids-text>\n  </template>\n</ids-list-builder>\n```\n\nTo inject data you would do something like:\n\n```js\n  document.querySelector('ids-list-builder').data = [\n    {\n      id: 1,\n      productId: '7439937961',\n      productName: 'Steampan Lid',\n      inStock: true,\n      units: '9',\n      unitPrice: 23,\n      color: 'Green'\n    },\n    {\n      id: 2,\n      productId: '3672150959',\n      productName: 'Coconut - Creamed, Pure',\n      inStock: true,\n      units: '588',\n      unitPrice: 18,\n      color: 'Yellow'\n    },\n    {\n      id: 3,\n      productId: '8233719404',\n      productName: 'Onions - Red',\n      inStock: false,\n      units: '68',\n      unitPrice: 58,\n      color: 'Green'\n    },\n  ]\n```\n\nand if you want to display more data you could modify the template like so:\n\n```html\n<ids-list-builder>\n  <template>\n    <ids-text font-size=\"16\" type=\"h2\">Item: ${productName}</ids-text>\n    <ids-text font-size=\"16\" type=\"h2\">Price: ${unitPrice}</ids-text>\n    <ids-text font-size=\"16\" type=\"h2\">Stock: ${units}</ids-text>\n  </template>\n</ids-list-builder>\n```\n\nShow this list builder as a customized toolbar buttons\n\n```html\n  <ids-list-builder>\n    <ids-toolbar slot=\"toolbar\" type=\"formatter\" tabbable=\"true\">\n      <ids-toolbar-section type=\"buttonset\">\n        <ids-button list-builder-action=\"edit\" tooltip=\"Edit\" color-variant=\"alternate-formatter\">\n          <span class=\"audible\">Edit list item</span>\n          <ids-icon icon=\"edit\"></ids-icon>\n        </ids-button>\n        <ids-separator vertical></ids-separator>\n        <ids-button list-builder-action=\"move-up\" tooltip=\"Move Up\" color-variant=\"alternate-formatter\">\n          <span class=\"audible\">Move up list item</span>\n          <ids-icon icon=\"arrow-up\"></ids-icon>\n        </ids-button>\n        <ids-button list-builder-action=\"move-down\" tooltip=\"Move Down\" color-variant=\"alternate-formatter\">\n          <span class=\"audible\">Move down list item</span>\n          <ids-icon icon=\"arrow-down\"></ids-icon>\n        </ids-button>\n      </ids-toolbar-section>\n    </ids-toolbar>\n    <template>\n      <ids-text font-size=\"16\" type=\"span\">${manufacturerName}</ids-text>\n    </template>\n  </ids-list-builder>\n```\n\n## Settings (Attributes)\n\nSince this component inherits [IdsListView](../ids-list-view/README.md), it will have all of its properties. The only property that should be of concern, and overrides that of its super class, is `data`.\n\n- `data` {array} the list of items to populate the list builder with\n\n## Methods\n\n- `add()` Let insert a new list item, will deselect if selected more than one item\n- `delete()` It will remove selected list items\n- `edit()` Edit the selected list item, will edit first if selected more than one item\n- `moveUp()` Move up the selected list item, if selected more than one item will move up to the first selected and move together if selected not next to each other\n- `moveDown()` Move down the selected list item, if selected more than one item will move down to the last selected and move together if selected not next to each other\n\n## Responsive Guidelines\n\n- This component stretches to 100% width of its container\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- New pattern for 4.x\n\n**4.x to 5.x**\n\n- The Ids ListBuilder is now a Web Component\n- Instead of using classes to define it, it is done directly with a custom element and attributes\n- Markup has changed to a custom element `<ids-list-builder></ids-list-builder>` (see examples above)\n- Can now be imported as a single JS file and used with encapsulated styles\n\n```html\n<!-- 4.x example -->\n<div class=\"listbuilder\" id=\"example-listbuilder\" data-init=\"false\">\n  <div class=\"toolbar formatter-toolbar\">\n    <div class=\"buttonset\">\n\n      <button type=\"button\" class=\"btn-secondary\" title=\"Add New\" data-action=\"add\">\n        <svg class=\"icon\" focusable=\"false\" aria-hidden=\"true\" role=\"presentation\">\n          <use href=\"#icon-add\"></use>\n        </svg>\n        <span class=\"audible\">Add New</span>\n      </button>\n\n      <div class=\"separator\"></div>\n\n      <button type=\"button\" class=\"btn-secondary\" title=\"Go Up\" data-action=\"goup\">\n          <svg class=\"icon\" focusable=\"false\" aria-hidden=\"true\" role=\"presentation\">\n          <use href=\"#icon-up-arrow\"></use>\n          </svg>\n          <span class=\"audible\">Go Up</span>\n      </button>\n\n      <button type=\"button\" class=\"btn-secondary\" title=\"Go Down\" data-action=\"godown\">\n        <svg class=\"icon\" focusable=\"false\" aria-hidden=\"true\" role=\"presentation\">\n          <use href=\"#icon-down-arrow\"></use>\n        </svg>\n        <span class=\"audible\">Go Down</span>\n      </button>\n\n      <div class=\"separator\"></div>\n\n      <button type=\"button\" class=\"btn-secondary\" title=\"Edit\" data-action=\"edit\">\n        <svg class=\"icon\" focusable=\"false\" aria-hidden=\"true\" role=\"presentation\">\n          <use href=\"#icon-edit\"></use>\n        </svg>\n        <span class=\"audible\">Edit</span>\n      </button>\n      <button type=\"button\" class=\"btn-secondary\" title=\"Delete\" data-action=\"delete\">\n        <svg class=\"icon\" focusable=\"false\" aria-hidden=\"true\" role=\"presentation\">\n          <use href=\"#icon-delete\"></use>\n        </svg>\n        <span class=\"audible\">Delete</span>\n      </button>\n\n    </div>\n  </div>\n  <div class=\"listbuilder-content\">\n    <div class=\"listview\"></div>\n  </div>\n</div>\n\n<!-- this is the same using the WebComponent -->\n<ids-list-builder>\n  <template>\n    <ids-text font-size=\"16\" type=\"h2\">${productName}</ids-text>\n  </template>\n</ids-list-builder>\n```\n"}},{"name":"ids-list-view-search-mixin","attributes":[{"name":"searchFilterModes","description":"Possible Filter Modes","values":[]},{"name":"searchFilterCallback","description":"Search filter callback, use for custom filter to match","values":[]},{"name":"searchableTextCallback","description":"Searchable text callback","values":[]},{"name":"#term","description":"Current search term","values":[]},{"name":"searchContainer","description":"Get search container element","values":[]},{"name":"searchField","description":"Get searchf ield element","values":[]},{"name":"searchFieldId","description":"Set ID of the search field element to use for the search","values":[]},{"name":"searchFilterMode","description":"Set search filter mode","values":[]},{"name":"searchTermCaseSensitive","description":"Set search term case sensitive","values":[]},{"name":"searchTermMinSize","description":"Set search term min size, will trigger filtering only when its length is greater than or equals to term value.","values":[]},{"name":"searchable","description":"Set searchable which allows list view to be filtered","values":[]},{"name":"suppressHighlight","description":"Set search term text to be suppress highlight when using searchable","values":[]}],"description":{"kind":"markdown","value":"# Ids List View Component\n\n## Description\n\nDisplays a set of related data objects and their attributes in list format.\n\n## Use Cases\n\n- Best for limited attribute data that may or may not include clear differentiators like status.\n- Used to display relevant objects. The list view container can feature checkboxes, search bar, hyperlinks, and other elements.\n- Allows users to assign/remove objects. Displays when one or more rows are selected.\n- Can alert users of updates on objects.\n- Lists may be single, multiple or mixed selected\n- Lists can be filter data by using the search field\n- You can have a fixed list toolbar on top, which may contain a title and filtering/search options\n- You can have a contextual toolbar for selected items\n- Pagination is supported\n\n## Terminology\n\n- Card: UI design pattern that groups related information that resembles a card\n- Group Action: A special toolbar inside the card content area that can be used to act on the content.\n\n## Features (With Code Examples)\n\nThis example shows using a list view with an html template element bound to a dataset. This example is showing the list in a card but the card is optional.\n\nThe template shows the use of a string substitution to access the data element. Note that `dataset` is required to loop over the dataset option passed into the control.\n\n```html\n  <ids-card>\n  <div slot=\"card-header\">\n    <ids-text font-size=\"20\" type=\"h2\">Card Title One</ids-text>\n  </div>\n  <div slot=\"card-content\">\n    <ids-list-view id=\"list-view-1\" virtual-scroll=\"true\">\n      <template>\n        <ids-text font-size=\"16\" type=\"h2\">${productName}</ids-text>\n        <ids-text font-size=\"12\" type=\"span\">Count: ${units}</ids-text>\n        <ids-text font-size=\"12\" type=\"span\">Price: $ ${unitPrice}</ids-text>\n      </template>\n    </ids-list-view>\n  </div>\n</ids-card>\n```\n\n```js\n  const listView = document.querySelector('#list-view-1');\n  listView.data = products;\n```\n\nList view with pagination and mixed selectable type.\n\n```html\n<ids-list-view\n  id=\"list-view-1\"\n  item-height=\"76\"\n  selectable=\"mixed\"\n  pagination=\"client-side\"\n  page-size=\"5\"\n>\n  <template>\n    <ids-text font-size=\"16\" type=\"h2\">${productName}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Count: ${units}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Price: $ ${unitPrice}</ids-text>\n  </template>\n</ids-list-view>\n```\n\n```js\n  const listView = document.querySelector('#list-view-1');\n  listView.data = products;\n```\n\nList view with pagination with card footer.\n\n```html\n<ids-card>\n  <div slot=\"card-header\">\n    <ids-text font-size=\"20\" type=\"h2\">Product List</ids-text>\n  </div>\n  <div slot=\"card-content\">\n    <ids-list-view\n      id=\"list-view-1\"\n      pagination=\"client-side\"\n      page-size=\"10\",\n      pager-container=\"#cardfooter-list-view-1\"\n    >\n      <template>\n        <ids-text font-size=\"16\" type=\"h2\">${productName}</ids-text>\n        <ids-text font-size=\"12\" type=\"span\">Count: ${units}</ids-text>\n        <ids-text font-size=\"12\" type=\"span\">Price: $ ${unitPrice}</ids-text>\n      </template>\n    </ids-list-view>\n  </div>\n  <div id=\"cardfooter-list-view-1\" slot=\"card-footer\" no-padding>\n  </div>\n</ids-card>\n```\n\n```js\n  const listView = document.querySelector('#list-view-1');\n  listView.data = products;\n```\n\nList view with embellishment types.\n\n```html\n<ids-list-view id=\"list-view-1\">\n  <template>\n    ${#escalated}\n      ${#disabled}\n        <ids-text font-size=\"12\" type=\"span\" status=\"error\" disabled>Escalated (${escalated}X)</ids-text>\n      ${/disabled}\n      ${^disabled}\n        <ids-text font-size=\"12\" type=\"span\" status=\"error\">Escalated (${escalated}X)</ids-text>\n      ${/disabled}\n    ${/escalated}\n    <ids-text font-size=\"16\" font-weight=\"semi-bold\" type=\"p\">${productName}</ids-text>\n    <ids-hyperlink href=\"https://www.example.com/${productId}\" target=\"_blank\">${productId}</ids-hyperlink>\n    <ids-text font-size=\"12\" type=\"span\">Count: ${units}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Price: $ ${unitPrice}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\" text-align=\"end\">$ ${totalPrice}</ids-text>\n  </template>\n</ids-list-view>\n```\n\n```js\n  const listView = document.querySelector('#list-view-1');\n  listView.data = products;\n```\n\nList view using search field.\n\n```html\n<ids-list-view id=\"list-view-1\" searchable>\n  <template>\n    <ids-text font-size=\"16\" type=\"h2\">${productName}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Count: ${units}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Price: $ ${unitPrice}</ids-text>\n  </template>\n</ids-list-view>\n```\n\n```js\n  const listView = document.querySelector('#list-view-1');\n  listView.searchableTextCallback = (item: any) => item.productName;\n  listView.data = products;\n```\n\nList view using search field thru slot.\n\n```html\n<ids-list-view id=\"list-view-1\">\n  <ids-search-field slot=\"search\" label=\"List view search field\" label-state=\"collapsed\" size=\"full\" clearable no-margins></ids-search-field>\n  <template>\n    <ids-text font-size=\"16\" type=\"h2\">${productName}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Count: ${units}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Price: $ ${unitPrice}</ids-text>\n  </template>\n</ids-list-view>\n```\n\n```js\n  const listView = document.querySelector('#list-view-1');\n  listView.searchableTextCallback = (item: any) => item.productName;\n  listView.data = products;\n```\n\nList view using search field thru ID.\n\n```html\n  <ids-card>\n  <div slot=\"card-header\">\n    <ids-text font-size=\"20\" type=\"h2\">Card Title One</ids-text>\n  </div>\n  <div slot=\"card-content\">\n    <ids-search-field\n      placeholder=\"Search products\"\n      label=\"List view search field\"\n      color-variant=\"card\"\n      label-state=\"collapsed\"\n      id=\"list-view-1-search-field\"\n      size=\"full\"\n      clearable\n      no-margins\n    ></ids-search-field>\n    <div class=\"list-container\">\n      <ids-list-view id=\"list-view-1\" search-field-id=\"list-view-1-search-field\">\n        <template>\n          <ids-text font-size=\"16\" type=\"h2\">${productName}</ids-text>\n          <ids-text font-size=\"12\" type=\"span\">Count: ${units}</ids-text>\n          <ids-text font-size=\"12\" type=\"span\">Price: $ ${unitPrice}</ids-text>\n        </template>\n      </ids-list-view>\n    </div>\n  </div>\n</ids-card>\n```\n\n```js\n  const listView = document.querySelector('#list-view-1');\n  listView.searchableTextCallback = (item: any) => item.productName;\n  listView.data = products;\n```\n\nList view using search field with custom search filter.\n\n```html\n<ids-list-view id=\"list-view-1\" searchable>\n  <template>\n    <ids-text font-size=\"16\" type=\"h2\">${productName}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Count: ${units}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Price: $ ${unitPrice}</ids-text>\n  </template>\n</ids-list-view>\n```\n\n```js\n  const listView = document.querySelector('#list-view-1');\n\n  // Set custom search filter to match\n  listView.searchFilterCallback = (term: string) => {\n    const response = (item: any): boolean => {\n      const lcTerm = (term || '').toLowerCase();\n      const lcText = (item.comments || '').toLowerCase();\n\n      const match = lcText.indexOf(lcTerm) >= 0;\n      return !match;\n    };\n    return response;\n  };\n\n  // Set data to list\n  listView.data = products;\n```\n\n## Settings and Attributes\n\n- `height` {number|string} sets the expected height of the viewport for virtual scrolling\n- `hideCheckboxes` {boolean} sets the checkboxes to not render if true, only apply to multiple selection\n- `itemHeight` {number|string} sets the expected height of each item\n- `label` {string} sets the aria label text\n- `searchFieldId` {string} ID of the search field element to use for the search\n- `searchFilterMode` {'contains'|'keyword'|'phrase-starts-with'|'word-starts-with'} sets the search filter mode\n- `searchTermCaseSensitive` {boolean} sets search term case sensitive\n- `searchTermMinSize` {number} sets search term min size, will trigger filtering only when its length is greater than or equals to term value.\n- `searchable` {boolean} sets searchable which allows list view to be filtered.\n- `selectable` {string} sets the selection mode of the listview: `single`, `multiple`, `mixed`\n- `sortable` {boolean} sets the items to be sortable\n- `suppressDeactivation` {boolean} sets the items to be suppress deactivation for mixed selection only\n- `suppressDeselection` {boolean} sets the items to be suppress deselection for single selection only\n- `suppressHighlight` {boolean} sets search term text to be suppress highlight when using searchable\n- `virtualScroll` {boolean} sets the list view to use virtual scrolling for a large amount of items\n\n## Themeable Parts\n\n- `container` allows you to further style the root container element\n- `list` allows you to further style the `<ul>` elements text element\n- `listitem` allows you to further style the `<li>` elements text element\n- `search` allows you to further style the list view search slot element\n- `searchfield-container` allows you to further style the list view search-field container element\n- `searchfield-field-container` allows you to further style the list view search-field field container element\n- `searchfield-input` allows you to further style the list view search-field input element\n- `searchfield-popup` allows you to further style the list view search-field popup element\n\n## Events\n\n- `beforeselected` Fires before selected an item, you can return false in the response to veto\n- `selected` Fires after selected an item\n- `beforedeselected` Fires before deselected an item, you can return false in the response to veto\n- `deselected` Fires after deselected an item\n- `beforeitemactivated` Fires before activated an item, you can return false in the response to veto\n- `itemactivated` Fires after activated an item\n- `beforeitemdeactivated` Fires before deactivated an item, you can return false in the response to veto\n- `itemdeactivated` Fires after deactivated an item\n- `selectionchanged` Fires after selection changed, when use with selectAll(), deselectAll() or toggleAll()\n- `filtered` Fires after search term changed have detail type: 'apply' | 'clear'\n\n## Methods\n\n- `getAllLi(): array<unknown>` Get list of all items\n- `getAllSwappableItems(): array<unknown>` Get list of all swappable items\n- `dataIndex(index: number): number|null` Get data index for given page index\n- `pageIndex(dataIndex: number): number|null` Get page index for given data index\n- `isInPage(dataIndex: number): boolean` Check if given data index in current page\n- `focusLi(li?: HTMLElement|null): void` Set the focus for given list item\n- `getFocusedLi(): HTMLElement` Get currently focused list item\n- `getPreviousLi(li: HTMLElement): HTMLElement|undefined` Get previous list item for a given list item\n- `getNextLi(li: HTMLElement): HTMLElement|undefined` Get next list item for a given list item\n- `activateItem(dataIndex: number): boolean` Set a list item to be activated, in dataset\n- `deactivateItem(dataIndex: number): boolean` Set a list item to be deactivated, in dataset\n- `select(dataIndex: number): boolean` Set a list item to be selected, in dataset\n- `deselect(dataIndex: number): boolean` Set a list item to be deselect, in dataset\n- `selectAll(): void` Set a all list items to be selected\n- `deselectAll(): void` Set a all list items to be deselected\n- `searchFilterCallback(term: string): (((item: object) => boolean))` Set search filter callback, use for custom filter to match\n- `searchableTextCallback(item: object): string` Set searchable text callback\n\n## States and Variations (With Code Examples)\n\n- Hover\n- Selected\n- Focus\n- Disabled\n\n## Keyboard Guidelines\n\n- <kbd>Tab</kbd> When a list is tabbed to, select the first item if nothing else is already selected. A second tab will take the user out of the widget to the next tab stop on the page.\n- <kbd>Up/down arrow</kbd> navigate up and down the list.\n- <kbd>Shift+F10</kbd> If the current item has an associated context menu, then this key combination will launch that menu.\n- <kbd>Space</kbd> toggles <a href=\"http://access.aol.com/dhtml-style-guide-working-group/#checkbox\" target=\"_blank\">checkboxes</a> in the case of multi select or a list item in case of normal select\n\n## Responsive Guidelines\n\n- The list is 100% of the parent container in height and width so can be used in a widget object or responsive grid object.\n- The list body will expand vertically and horizontally to fill it the size of its parent container.\n- When used in homepages, special rules apply with sizes.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Single select roughly replaces the inforListBox component.\n- Multi select is a new feature, however it replaces the listbox with checkboxes construct.\n\n**4.x to 5.x**\n\n- The List View component has been changed to a web component and renamed to ids-list-view.\n- If using properties/settings these are now attributes.\n- Markup has changed to a custom element `<ids-list-view></ids-list-view>`\n- If using events events are now plain JS events for example\n- The template is now a template element that uses simple string substitution\n- Can now be imported as a single JS file and used with encapsulated styles (in some browsers)\n- Alternate row colors is deprecated\n\n## Accessibility Guidelines\n\n- 1.1.1 Non-text Content - All images, links and icons have text labels for screen readers when the formatters are used.\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. Ensure the color tags that indicate state like OK, cancel, ect have other ways to indicate that information. This is failing.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and images of text has a contrast ratio of at least 4.5:1.  All statuses and objects must pass.\n- 2.1.1 Keyboard - Make all functionality available from a keyboard. The grid has keyboard shortcuts and is usable with a screen reader due to the addition of aria tags.\n\n## Regional Considerations\n\nTitles should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German) and in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n"}},{"name":"ids-list-view","attributes":[{"name":"initialized","description":"Is the component initialized","values":[]},{"name":"#focusedLiIndex","description":"The currently focused list item","values":[]},{"name":"#activatedIndex","description":"The currently activated list item","values":[]},{"name":"#isTargetCheckbox","description":"The currently target while selecting","values":[]},{"name":"#isApply","description":"The currently apply state while single selecting","values":[]},{"name":"#size","description":"The currently list size","values":[]},{"name":"datasource","description":"The datasource container","values":[]},{"name":"defaultTemplate","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"virtualScrollContainer","values":[]},{"name":"body","values":[]},{"name":"ds","description":"Get the list of all data from dataset","values":[]},{"name":"data","description":"Set the data array of the listview","values":[]},{"name":"loaded","description":"Used to determine if data has been loaded into IdsListView","values":[]},{"name":"dataKeys","description":"Set the data array of the listview","values":[]},{"name":"virtualScroll","description":"Set the list view to use virtual scrolling for a large amount of elements.","values":[]},{"name":"height","description":"Set the expected height of the viewport for virtual scrolling","values":[]},{"name":"itemHeight","description":"Set the expected height of each item","values":[]},{"name":"selectable","description":"Set the selection mode of the listview","values":[]},{"name":"activatedItem","description":"Get the activated item","values":[]},{"name":"selected","description":"Get the selected item/s","values":[]},{"name":"sortable","description":"Handles the sortable property and reflects it on the DOM.","values":[]},{"name":"suppressDeactivation","description":"Sets the items to be suppress deactivation for mixed selection only.","values":[]},{"name":"suppressDeselection","description":"Sets the items to be suppress deselection for single selection only.","values":[]},{"name":"hideCheckboxes","description":"Checkboxes will not render if true, only apply to multiple selection.","values":[]},{"name":"label","description":"Set the aria label text","values":[]}],"description":{"kind":"markdown","value":"# Ids List View Component\n\n## Description\n\nDisplays a set of related data objects and their attributes in list format.\n\n## Use Cases\n\n- Best for limited attribute data that may or may not include clear differentiators like status.\n- Used to display relevant objects. The list view container can feature checkboxes, search bar, hyperlinks, and other elements.\n- Allows users to assign/remove objects. Displays when one or more rows are selected.\n- Can alert users of updates on objects.\n- Lists may be single, multiple or mixed selected\n- Lists can be filter data by using the search field\n- You can have a fixed list toolbar on top, which may contain a title and filtering/search options\n- You can have a contextual toolbar for selected items\n- Pagination is supported\n\n## Terminology\n\n- Card: UI design pattern that groups related information that resembles a card\n- Group Action: A special toolbar inside the card content area that can be used to act on the content.\n\n## Features (With Code Examples)\n\nThis example shows using a list view with an html template element bound to a dataset. This example is showing the list in a card but the card is optional.\n\nThe template shows the use of a string substitution to access the data element. Note that `dataset` is required to loop over the dataset option passed into the control.\n\n```html\n  <ids-card>\n  <div slot=\"card-header\">\n    <ids-text font-size=\"20\" type=\"h2\">Card Title One</ids-text>\n  </div>\n  <div slot=\"card-content\">\n    <ids-list-view id=\"list-view-1\" virtual-scroll=\"true\">\n      <template>\n        <ids-text font-size=\"16\" type=\"h2\">${productName}</ids-text>\n        <ids-text font-size=\"12\" type=\"span\">Count: ${units}</ids-text>\n        <ids-text font-size=\"12\" type=\"span\">Price: $ ${unitPrice}</ids-text>\n      </template>\n    </ids-list-view>\n  </div>\n</ids-card>\n```\n\n```js\n  const listView = document.querySelector('#list-view-1');\n  listView.data = products;\n```\n\nList view with pagination and mixed selectable type.\n\n```html\n<ids-list-view\n  id=\"list-view-1\"\n  item-height=\"76\"\n  selectable=\"mixed\"\n  pagination=\"client-side\"\n  page-size=\"5\"\n>\n  <template>\n    <ids-text font-size=\"16\" type=\"h2\">${productName}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Count: ${units}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Price: $ ${unitPrice}</ids-text>\n  </template>\n</ids-list-view>\n```\n\n```js\n  const listView = document.querySelector('#list-view-1');\n  listView.data = products;\n```\n\nList view with pagination with card footer.\n\n```html\n<ids-card>\n  <div slot=\"card-header\">\n    <ids-text font-size=\"20\" type=\"h2\">Product List</ids-text>\n  </div>\n  <div slot=\"card-content\">\n    <ids-list-view\n      id=\"list-view-1\"\n      pagination=\"client-side\"\n      page-size=\"10\",\n      pager-container=\"#cardfooter-list-view-1\"\n    >\n      <template>\n        <ids-text font-size=\"16\" type=\"h2\">${productName}</ids-text>\n        <ids-text font-size=\"12\" type=\"span\">Count: ${units}</ids-text>\n        <ids-text font-size=\"12\" type=\"span\">Price: $ ${unitPrice}</ids-text>\n      </template>\n    </ids-list-view>\n  </div>\n  <div id=\"cardfooter-list-view-1\" slot=\"card-footer\" no-padding>\n  </div>\n</ids-card>\n```\n\n```js\n  const listView = document.querySelector('#list-view-1');\n  listView.data = products;\n```\n\nList view with embellishment types.\n\n```html\n<ids-list-view id=\"list-view-1\">\n  <template>\n    ${#escalated}\n      ${#disabled}\n        <ids-text font-size=\"12\" type=\"span\" status=\"error\" disabled>Escalated (${escalated}X)</ids-text>\n      ${/disabled}\n      ${^disabled}\n        <ids-text font-size=\"12\" type=\"span\" status=\"error\">Escalated (${escalated}X)</ids-text>\n      ${/disabled}\n    ${/escalated}\n    <ids-text font-size=\"16\" font-weight=\"semi-bold\" type=\"p\">${productName}</ids-text>\n    <ids-hyperlink href=\"https://www.example.com/${productId}\" target=\"_blank\">${productId}</ids-hyperlink>\n    <ids-text font-size=\"12\" type=\"span\">Count: ${units}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Price: $ ${unitPrice}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\" text-align=\"end\">$ ${totalPrice}</ids-text>\n  </template>\n</ids-list-view>\n```\n\n```js\n  const listView = document.querySelector('#list-view-1');\n  listView.data = products;\n```\n\nList view using search field.\n\n```html\n<ids-list-view id=\"list-view-1\" searchable>\n  <template>\n    <ids-text font-size=\"16\" type=\"h2\">${productName}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Count: ${units}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Price: $ ${unitPrice}</ids-text>\n  </template>\n</ids-list-view>\n```\n\n```js\n  const listView = document.querySelector('#list-view-1');\n  listView.searchableTextCallback = (item: any) => item.productName;\n  listView.data = products;\n```\n\nList view using search field thru slot.\n\n```html\n<ids-list-view id=\"list-view-1\">\n  <ids-search-field slot=\"search\" label=\"List view search field\" label-state=\"collapsed\" size=\"full\" clearable no-margins></ids-search-field>\n  <template>\n    <ids-text font-size=\"16\" type=\"h2\">${productName}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Count: ${units}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Price: $ ${unitPrice}</ids-text>\n  </template>\n</ids-list-view>\n```\n\n```js\n  const listView = document.querySelector('#list-view-1');\n  listView.searchableTextCallback = (item: any) => item.productName;\n  listView.data = products;\n```\n\nList view using search field thru ID.\n\n```html\n  <ids-card>\n  <div slot=\"card-header\">\n    <ids-text font-size=\"20\" type=\"h2\">Card Title One</ids-text>\n  </div>\n  <div slot=\"card-content\">\n    <ids-search-field\n      placeholder=\"Search products\"\n      label=\"List view search field\"\n      color-variant=\"card\"\n      label-state=\"collapsed\"\n      id=\"list-view-1-search-field\"\n      size=\"full\"\n      clearable\n      no-margins\n    ></ids-search-field>\n    <div class=\"list-container\">\n      <ids-list-view id=\"list-view-1\" search-field-id=\"list-view-1-search-field\">\n        <template>\n          <ids-text font-size=\"16\" type=\"h2\">${productName}</ids-text>\n          <ids-text font-size=\"12\" type=\"span\">Count: ${units}</ids-text>\n          <ids-text font-size=\"12\" type=\"span\">Price: $ ${unitPrice}</ids-text>\n        </template>\n      </ids-list-view>\n    </div>\n  </div>\n</ids-card>\n```\n\n```js\n  const listView = document.querySelector('#list-view-1');\n  listView.searchableTextCallback = (item: any) => item.productName;\n  listView.data = products;\n```\n\nList view using search field with custom search filter.\n\n```html\n<ids-list-view id=\"list-view-1\" searchable>\n  <template>\n    <ids-text font-size=\"16\" type=\"h2\">${productName}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Count: ${units}</ids-text>\n    <ids-text font-size=\"12\" type=\"span\">Price: $ ${unitPrice}</ids-text>\n  </template>\n</ids-list-view>\n```\n\n```js\n  const listView = document.querySelector('#list-view-1');\n\n  // Set custom search filter to match\n  listView.searchFilterCallback = (term: string) => {\n    const response = (item: any): boolean => {\n      const lcTerm = (term || '').toLowerCase();\n      const lcText = (item.comments || '').toLowerCase();\n\n      const match = lcText.indexOf(lcTerm) >= 0;\n      return !match;\n    };\n    return response;\n  };\n\n  // Set data to list\n  listView.data = products;\n```\n\n## Settings and Attributes\n\n- `height` {number|string} sets the expected height of the viewport for virtual scrolling\n- `hideCheckboxes` {boolean} sets the checkboxes to not render if true, only apply to multiple selection\n- `itemHeight` {number|string} sets the expected height of each item\n- `label` {string} sets the aria label text\n- `searchFieldId` {string} ID of the search field element to use for the search\n- `searchFilterMode` {'contains'|'keyword'|'phrase-starts-with'|'word-starts-with'} sets the search filter mode\n- `searchTermCaseSensitive` {boolean} sets search term case sensitive\n- `searchTermMinSize` {number} sets search term min size, will trigger filtering only when its length is greater than or equals to term value.\n- `searchable` {boolean} sets searchable which allows list view to be filtered.\n- `selectable` {string} sets the selection mode of the listview: `single`, `multiple`, `mixed`\n- `sortable` {boolean} sets the items to be sortable\n- `suppressDeactivation` {boolean} sets the items to be suppress deactivation for mixed selection only\n- `suppressDeselection` {boolean} sets the items to be suppress deselection for single selection only\n- `suppressHighlight` {boolean} sets search term text to be suppress highlight when using searchable\n- `virtualScroll` {boolean} sets the list view to use virtual scrolling for a large amount of items\n\n## Themeable Parts\n\n- `container` allows you to further style the root container element\n- `list` allows you to further style the `<ul>` elements text element\n- `listitem` allows you to further style the `<li>` elements text element\n- `search` allows you to further style the list view search slot element\n- `searchfield-container` allows you to further style the list view search-field container element\n- `searchfield-field-container` allows you to further style the list view search-field field container element\n- `searchfield-input` allows you to further style the list view search-field input element\n- `searchfield-popup` allows you to further style the list view search-field popup element\n\n## Events\n\n- `beforeselected` Fires before selected an item, you can return false in the response to veto\n- `selected` Fires after selected an item\n- `beforedeselected` Fires before deselected an item, you can return false in the response to veto\n- `deselected` Fires after deselected an item\n- `beforeitemactivated` Fires before activated an item, you can return false in the response to veto\n- `itemactivated` Fires after activated an item\n- `beforeitemdeactivated` Fires before deactivated an item, you can return false in the response to veto\n- `itemdeactivated` Fires after deactivated an item\n- `selectionchanged` Fires after selection changed, when use with selectAll(), deselectAll() or toggleAll()\n- `filtered` Fires after search term changed have detail type: 'apply' | 'clear'\n\n## Methods\n\n- `getAllLi(): array<unknown>` Get list of all items\n- `getAllSwappableItems(): array<unknown>` Get list of all swappable items\n- `dataIndex(index: number): number|null` Get data index for given page index\n- `pageIndex(dataIndex: number): number|null` Get page index for given data index\n- `isInPage(dataIndex: number): boolean` Check if given data index in current page\n- `focusLi(li?: HTMLElement|null): void` Set the focus for given list item\n- `getFocusedLi(): HTMLElement` Get currently focused list item\n- `getPreviousLi(li: HTMLElement): HTMLElement|undefined` Get previous list item for a given list item\n- `getNextLi(li: HTMLElement): HTMLElement|undefined` Get next list item for a given list item\n- `activateItem(dataIndex: number): boolean` Set a list item to be activated, in dataset\n- `deactivateItem(dataIndex: number): boolean` Set a list item to be deactivated, in dataset\n- `select(dataIndex: number): boolean` Set a list item to be selected, in dataset\n- `deselect(dataIndex: number): boolean` Set a list item to be deselect, in dataset\n- `selectAll(): void` Set a all list items to be selected\n- `deselectAll(): void` Set a all list items to be deselected\n- `searchFilterCallback(term: string): (((item: object) => boolean))` Set search filter callback, use for custom filter to match\n- `searchableTextCallback(item: object): string` Set searchable text callback\n\n## States and Variations (With Code Examples)\n\n- Hover\n- Selected\n- Focus\n- Disabled\n\n## Keyboard Guidelines\n\n- <kbd>Tab</kbd> When a list is tabbed to, select the first item if nothing else is already selected. A second tab will take the user out of the widget to the next tab stop on the page.\n- <kbd>Up/down arrow</kbd> navigate up and down the list.\n- <kbd>Shift+F10</kbd> If the current item has an associated context menu, then this key combination will launch that menu.\n- <kbd>Space</kbd> toggles <a href=\"http://access.aol.com/dhtml-style-guide-working-group/#checkbox\" target=\"_blank\">checkboxes</a> in the case of multi select or a list item in case of normal select\n\n## Responsive Guidelines\n\n- The list is 100% of the parent container in height and width so can be used in a widget object or responsive grid object.\n- The list body will expand vertically and horizontally to fill it the size of its parent container.\n- When used in homepages, special rules apply with sizes.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Single select roughly replaces the inforListBox component.\n- Multi select is a new feature, however it replaces the listbox with checkboxes construct.\n\n**4.x to 5.x**\n\n- The List View component has been changed to a web component and renamed to ids-list-view.\n- If using properties/settings these are now attributes.\n- Markup has changed to a custom element `<ids-list-view></ids-list-view>`\n- If using events events are now plain JS events for example\n- The template is now a template element that uses simple string substitution\n- Can now be imported as a single JS file and used with encapsulated styles (in some browsers)\n- Alternate row colors is deprecated\n\n## Accessibility Guidelines\n\n- 1.1.1 Non-text Content - All images, links and icons have text labels for screen readers when the formatters are used.\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. Ensure the color tags that indicate state like OK, cancel, ect have other ways to indicate that information. This is failing.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and images of text has a contrast ratio of at least 4.5:1.  All statuses and objects must pass.\n- 2.1.1 Keyboard - Make all functionality available from a keyboard. The grid has keyboard shortcuts and is usable with a screen reader due to the addition of aria tags.\n\n## Regional Considerations\n\nTitles should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German) and in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n"}},{"name":"ids-lookup","attributes":[{"name":"triggerField","values":[]},{"name":"triggerButton","values":[]},{"name":"dataGrid","values":[]},{"name":"modal","values":[]},{"name":"listBox","values":[]},{"name":"isFormComponent","values":[]},{"name":"autocomplete","description":"Get the autocomplete attribute","values":[]},{"name":"value","description":"Set the value of the dropdown using the value/id attribute if present","values":[]},{"name":"readonly","description":"Sets the readonly state of the field","values":[]},{"name":"disabled","description":"Sets the disabled attribute","values":[]},{"name":"tabbable","description":"Set the trigger button to tabbable","values":[]},{"name":"columns","description":"Set the columns array of the data grid","values":[]},{"name":"data","description":"Set the data array of the data grid","values":[]},{"name":"dataGridSettings","description":"Set any number of dataGrid settings","values":[]},{"name":"validate","description":"Sets the validation check to use","values":[]},{"name":"validationEvents","description":"Set `validation-events` attribute","values":[]},{"name":"#title","description":"Set the modal title","values":[]},{"name":"field","description":"Set the field to use when populating the input","values":[]},{"name":"size","description":"Set the dropdown size","values":[]},{"name":"delimiter","description":"Set the string delimiter on selection","values":[]},{"name":"input","values":[]},{"name":"clearable","description":"Sets the clearable x button","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# Ids Lookup Component\n\n## Description\n\nA lookup is an input element that opens a modal with a data grid list for selecting grid rows.\n\nAllows for users to select from multiple complex options via input field component. Single selection and multi selection can be possible in the modal dialog by setting the data grid settings.\n\n## Use Cases\n\n- Best used when users need more contextual information around selecting options from the grid columns.\n- Use when you want users to contribute data to your website and let them organize their content themselves.\n\n## Terminology\n\n- **Grid/Data Grid**: Refers to a data grid when in a lookup as apposed to a responsive grid.\n\n## Features (With Code Examples)\n\nA normal lookup used as a web component. To distinguish between single and multi-select situations, use a checkbox column in multi-select and consider a radio select for single select. The set the appropriate settings in the data grid.\n\n```html\n<ids-lookup id=\"lookup-1\" label=\"Normal Lookup\"></ids-lookup>\n```\n\nIf necessary you can provide your own custom modal to the lookup. When doing this you control the modal contents and events entirely. The lookup will just open it for you.\n\n```html\n<ids-lookup id=\"custom-lookup\" label=\"Custom Lookup\">\n    <ids-modal slot=\"lookup-modal\" id=\"custom-lookup-modal\" aria-labelledby=\"custom-lookup-modal-title\">\n    <ids-text slot=\"title\" font-size=\"24\" type=\"h2\" id=\"lookup-modal-title\">Custom Lookup Modal</ids-text>\n    <ids-modal-button slot=\"buttons\" id=\"modal-close-btn\" appearance=\"primary\">\n        <span>Apply</span>\n    </ids-modal-button>\n    </ids-modal>\n</ids-lookup>\n```\n\nTo set all of the datagrid setting, pass the settings to the gridSettings property.\n\n```js\nlookup.dataGridSettings = {\n  rowSelection: 'multiple',\n  pageSize: 5,\n  pageNumber: 1,\n  pagination: 'client-side'\n};\nlookup.data = data;\n```\n\n## Settings and Attributes\n\n- `autocomplete` {boolean} Set the lookup to autocomplete, it will use the data for autocomplete / typeahead selection\n- `disabled` {boolean} Set the lookup to disabled state.\n- `readonly` {boolean} Set the lookup to readonly state.\n- `field` {string} Set the field to use in the data set when selecting.\n- `label` {string} Set the label on the input.\n- `tabbable` {boolean} Turns on the functionality allow the trigger to be tabbable. For accessibility reasons this should be on in most cases and this is the default.\n- `gridSettings` {object} An object containing name/value pairs for all the settings you want to pass to the data grid in the modal\n- `columns` {Array<object>} Set the data array of the data grid. This can be a JSON Array.\n- `data` {Array<object>} Set the columns array of the data grid. See column settings.\n- `validate` {'required' | string} Sets the validation routine to use\n- `validationEvents` {'blur' | string} Sets the validation events to use\n- `value` {string} Sets the field value, use commas to delimit multiple values.\n- `title` {string} Sets the title on the lookup.\n\n## Themeable Parts\n\n- `checkbox` allows you to further style the checkbox input element\n- `trigger-field` allows you to further style the trigger container\n- `input`  allows you to further style the input element\n- `trigger-button` allows you to further style the trigger button\n- `icon` allows you to further style the icon in the trigger button\n- `modal`  allows you to further style the modal dialog container\n- `data-grid` allows you to further style the data grid element\n\n## States and Variations\n\n- Default: The normal, unaltered state for lookups.\n- Hover: The state where a user moves over the lookup field with their cursor.\n- Focus: Indicates that the user has tabbed through and highlighted the lookup.\n- Disabled When the lookup is unable to be changed due to its dependence on other factors or partial irrelevance. Since these states can sometimes lead to confusion, it's useful to pair this state with a Tooltip explanation as to why it's disabled.\n- Readonly A lookup state where the selection is only, ever for viewing. While the information cannot be changed, users can copy and view the data. In general a label and value can also be used for read only states as well.\n- Error: The state where the user has interacted with the field and received an error. The lookup field is able to explain what caused the error below.\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>: Moves focus into the field to/from the next focusable item in the tab order.\n- <kbd>Down Arrow</kbd>: Opens the dialog if the input is enabled\n- <kbd>Esc</kbd>: Cancels and closes the open dialog\n- <kbd>Tab/Shift+Tab</kbd>: Tab and Shift Tab when the dialog is open, tab will move around the items, for example, from the search to the data grid\n- <kbd>Down/Up Arrow</kbd>: When focus is on the grid in the dialog this moves the focus up and down on the rows\n- <kbd>Space</kbd>: Toggle selection on the current row if multiselect. If single select, the row is selected and inserted if autoApply is enabled.\n\n## Responsive Guidelines\n\n- Default size is 300px wide but there are a number of widths in mobile mode it will go to 100%\n- The dialog stretches to 100% - 16px at smaller breakpoints\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Lookup had all new markup and classes for web components.\n- inforLookup class changed to lookup\n- Initialization options and API is different\n- Uses events rather than callbacks\n\n**4.x to 5.x**\n\n- It has all new markup and classes for web components.\n- Markup has changed to a custom element `<ids-lookup></ids-lookup>`\n- If using events events are now plain JS events for example\n- Can now be imported as a single JS file and used with encapsulated styles\n- Greatly simplified the API\n\n## Accessibility Guidelines\n\n- There should be a label on all lookups to give an indication what the field is containing.\n\n## Regional Considerations\n\nLabels should be localized in the current language. The close and link icons will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-mask-api","attributes":[],"description":{"kind":"markdown","value":"# Ids Mask Mixin\n\nThe Mask Mixin allows for finer control of text entered into an [Ids Input Component](../ids-input/README.md), and related components.  For example, a masked input field can be configured to only allow numbers and dashes, allowing for entry of a credit card number.  The Mask Mixin is also used in components like [Ids Date Picker](../ids-date-picker/README.md) or [Ids Time Picker](../ids-time-picker/README.md) to only allow dates/times to be entered in those fields, respectively.  The contents of the input field are modified as the user types into the field, allowing for instantaneous feedback.\n\n## Use Cases\n\nMasked input fields are used in the following cases:\n\n- Limiting text input to simple patterns, such as credit cards and phone numbers.\n- Automatically formatting numbers, dates, and times to match the current [Locale](./locale).\n\n## Terminology\n\n**Literal Character** - in a mask array, the literal characters are automatically filled in by the mask as the user types characters that match the surrounding pattern.  These characters may also be keyed in by the user.  For example, in a U.S.phone number that includes an area code, literal characters may be the parenthesis `()`, or the dashes `-` between the numbers.\n**Pattern Character** - in a mask array, pattern characters are represented by Regular Expressions.  When a user is typing into a masked field, if they type a character that matches a particular position's pattern character, that input will be accepted.  Otherwise, the input is thrown away.  For example, if the pattern character is `/\\d/` at index 0 inside a masked input field, and the user types \"0\", that number will be accepted and entered in the input.  However, if the user types \"A\", that input will be rejected.\n**Mask Function** a mask function is a Javascript function that takes two arguments (the value, and mask-specific options) that can be used to generate a mask pattern dynamically.  This is useful for input elements that mask against an indeterminate number of characters, or that need to alter the mask based on dynamic conditions. For example, the built in Date Masking function can support single or double digit Months and Days, but needs to alter the mask provided to date fields dynamically based on prior input.\n**Mask Array** a mask array (or pattern) is the array of literal and pattern characters used internally by masked input fields to resolve allowed input.  The contents of this array are the limiting factor for user input.\n**Mask Options** a setting on input fields that can define extra options that will be considered by a defined Mask function.\n\n## Features (With Code Samples)\n\n### Using Mask Arrays\n\nMasks can be applied very simply to an Ids Input by accessing its Javascript properties for masking.  Consider the following example:\n\n```html\n<ids-input id=\"my-input\" label=\"Phone Number\"></ids-input>\n```\n\nUsing Javascript, we can add a mask array using the following:\n\n```js\nconst input = document.querySelector('my-input');\ninput.mask = ['(', /\\d/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/ ];\n```\n\nNow when the user types into the field, the only input that will be accepted are numbers that fit within the contents of this array:\n\n```js\ninput.value = 'x1x2x3x4x5x6x7x8x9x0x';\n\nconsole.info(input.value);\n// returns '(123) 456-7890\n```\n\nThe contents of a mask array can be defined using any number of \"literal\" string characters (not replaced by masking, but will be filled in automatically), as well as regular expression-based \"pattern\" characters.  Regular expressions inside the mask array should be designed to match a single character.\n\n### Using Mask Functions\n\nIn some cases Masks need to be dynamic, changing in size to fit a particular kind of input.  Mask functions are capable of analyzing the raw value passed to the Mask API before returning a mask array.  This can be useful if you need to mask a specific section of input differently for several cases.\n\nMask functions take two arguments -- a string containing the raw value that will eventually be masked, and an object containing whatever settings your function will need for compiling the mask array and analyzing the raw value.  Mask functions should always eventually return a Mask Array of string literals and single-character regular expressions.\n\nA very basic example of a custom mask function would look like this:\n\n```js\nfunction customMaskFunction(rawValue, options) {\n  let arr = [];\n  // do some analysis on the raw value\n  // ...\n  return arr;\n}\n```\n\nIf a developer wished to build a mask function that always placed a suffix at the end of an indeterminately-sized number, it could be done this way:\n\n```js\nconst input = document.querySelector('my-input');\ninput.maskOptions = {\n  suffix: '%'\n};\ninput.mask = (rawValue, opts) => {\n  const totalDigits = rawValue.split('').map(() => /\\d/);\n  return [...totalDigits, opts.suffix];\n};\n```\n\n### Built-in Mask Functions\n\nIds Mask comes with some built in masking functions.  These hook into other IDS components and utilities to provide localization and formatting.\n\n#### Date Masks\n\nFor example, configuring an input field to mask as a U.S. localized short-hand date could be done this way:\n\n```js\nimport { dateMask } from 'ids-enterprise-wc'\n\nconst input = document.querySelector('my-input');\ninput.maskOptions = {\n  format: 'M/d/yyyy'\n};\ninput.mask = dateMask;\n```\n\nAs a convenience, built-in masks can also be automatically applied with shorthand string-based syntax:\n\n```js\ninput.mask = 'date';\n```\n\nWhen using the date mask this way, the automatically-applied date format will be a short date format supplied by [IdsLocale](../ids-locale/README.MD).\n\n#### Number Mask\n\nAnother example is configuring an input field to mask a fully-formatted number, with proper localization of thousands separator, decimal, and currency symbol placement.  An example of configuring the field for a U.S. localized formatted number could be this:\n\n```js\nimport { numberMask } from 'ids-enterprise-wc'\n\nconst input = document.querySelector('my-input');\ninput.maskOptions = {\n  allowDecimal: true,\n  allowNegative: true,\n  decimalLimit: 2,\n  integerLimit: 7,\n  prefix: '$'\n};\ninput.mask = numberMask;\n```\n\nAs a convenience, the number formatter can also be applied by string:\n\n```js\ninput.mask = 'number';\n```\n\nWhen using the number mask this way, the number will be formatted with localized decimal, thousands (group) separator, negative, and currency symbols supplied by [IdsLocale](../ids-locale/README.MD).\n\n## Settings (Attributes)\n\n- `mask` {Array<string|RegExp>|Function} the mask that is applied to the input.\n- `mask-options` {object} options that will be applied to a masking function in progress.\n- `mask-retain-positions` {boolean} if true, combined with guides, creates masked input that allows sections between literal characters to be removed/replaced without altering the position of the characters in other sections.\n- `mask-guide` {boolean} if true, displays the complete mask as a \"placeholder\" in the input field once input has been entered.  Pattern characters are represented as `_` or other defined character, and literal characters are shown in-line.  This feature is only applicable to array-based pattern masks.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Mask is a new component in 4.0.0\n- Invoke with `.mask()` on any `<input type=\"text\">` element\n\n**4.x to 5.x**\n\n- Mask is now an Ids Mixin applied to [IdsInput](../ids-input/README.md)\n- To enable a mask, all that's necessary is to define the `mask` attribute of an IdsInput\n- If using events, events are now plain JS events\n- 4.x `patternOptions` settings are applied to masks with the `mask-options` attribute on IdsInput. All the previous built-in mask settings have remained unchanged between 4.x and 5.x\n- When using `mask=\"date\"` on the element, an [IdsLocale](../ids-locale/README.md)-driven date format is applied to the field's mask\n- When using `mask=\"number\"` on the element, an [IdsLocale](../ids-locale/README.md)-driven number format is applied to the field's mask\n"}},{"name":"ids-mask-common","description":{"kind":"markdown","value":"# Ids Mask Mixin\n\nThe Mask Mixin allows for finer control of text entered into an [Ids Input Component](../ids-input/README.md), and related components.  For example, a masked input field can be configured to only allow numbers and dashes, allowing for entry of a credit card number.  The Mask Mixin is also used in components like [Ids Date Picker](../ids-date-picker/README.md) or [Ids Time Picker](../ids-time-picker/README.md) to only allow dates/times to be entered in those fields, respectively.  The contents of the input field are modified as the user types into the field, allowing for instantaneous feedback.\n\n## Use Cases\n\nMasked input fields are used in the following cases:\n\n- Limiting text input to simple patterns, such as credit cards and phone numbers.\n- Automatically formatting numbers, dates, and times to match the current [Locale](./locale).\n\n## Terminology\n\n**Literal Character** - in a mask array, the literal characters are automatically filled in by the mask as the user types characters that match the surrounding pattern.  These characters may also be keyed in by the user.  For example, in a U.S.phone number that includes an area code, literal characters may be the parenthesis `()`, or the dashes `-` between the numbers.\n**Pattern Character** - in a mask array, pattern characters are represented by Regular Expressions.  When a user is typing into a masked field, if they type a character that matches a particular position's pattern character, that input will be accepted.  Otherwise, the input is thrown away.  For example, if the pattern character is `/\\d/` at index 0 inside a masked input field, and the user types \"0\", that number will be accepted and entered in the input.  However, if the user types \"A\", that input will be rejected.\n**Mask Function** a mask function is a Javascript function that takes two arguments (the value, and mask-specific options) that can be used to generate a mask pattern dynamically.  This is useful for input elements that mask against an indeterminate number of characters, or that need to alter the mask based on dynamic conditions. For example, the built in Date Masking function can support single or double digit Months and Days, but needs to alter the mask provided to date fields dynamically based on prior input.\n**Mask Array** a mask array (or pattern) is the array of literal and pattern characters used internally by masked input fields to resolve allowed input.  The contents of this array are the limiting factor for user input.\n**Mask Options** a setting on input fields that can define extra options that will be considered by a defined Mask function.\n\n## Features (With Code Samples)\n\n### Using Mask Arrays\n\nMasks can be applied very simply to an Ids Input by accessing its Javascript properties for masking.  Consider the following example:\n\n```html\n<ids-input id=\"my-input\" label=\"Phone Number\"></ids-input>\n```\n\nUsing Javascript, we can add a mask array using the following:\n\n```js\nconst input = document.querySelector('my-input');\ninput.mask = ['(', /\\d/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/ ];\n```\n\nNow when the user types into the field, the only input that will be accepted are numbers that fit within the contents of this array:\n\n```js\ninput.value = 'x1x2x3x4x5x6x7x8x9x0x';\n\nconsole.info(input.value);\n// returns '(123) 456-7890\n```\n\nThe contents of a mask array can be defined using any number of \"literal\" string characters (not replaced by masking, but will be filled in automatically), as well as regular expression-based \"pattern\" characters.  Regular expressions inside the mask array should be designed to match a single character.\n\n### Using Mask Functions\n\nIn some cases Masks need to be dynamic, changing in size to fit a particular kind of input.  Mask functions are capable of analyzing the raw value passed to the Mask API before returning a mask array.  This can be useful if you need to mask a specific section of input differently for several cases.\n\nMask functions take two arguments -- a string containing the raw value that will eventually be masked, and an object containing whatever settings your function will need for compiling the mask array and analyzing the raw value.  Mask functions should always eventually return a Mask Array of string literals and single-character regular expressions.\n\nA very basic example of a custom mask function would look like this:\n\n```js\nfunction customMaskFunction(rawValue, options) {\n  let arr = [];\n  // do some analysis on the raw value\n  // ...\n  return arr;\n}\n```\n\nIf a developer wished to build a mask function that always placed a suffix at the end of an indeterminately-sized number, it could be done this way:\n\n```js\nconst input = document.querySelector('my-input');\ninput.maskOptions = {\n  suffix: '%'\n};\ninput.mask = (rawValue, opts) => {\n  const totalDigits = rawValue.split('').map(() => /\\d/);\n  return [...totalDigits, opts.suffix];\n};\n```\n\n### Built-in Mask Functions\n\nIds Mask comes with some built in masking functions.  These hook into other IDS components and utilities to provide localization and formatting.\n\n#### Date Masks\n\nFor example, configuring an input field to mask as a U.S. localized short-hand date could be done this way:\n\n```js\nimport { dateMask } from 'ids-enterprise-wc'\n\nconst input = document.querySelector('my-input');\ninput.maskOptions = {\n  format: 'M/d/yyyy'\n};\ninput.mask = dateMask;\n```\n\nAs a convenience, built-in masks can also be automatically applied with shorthand string-based syntax:\n\n```js\ninput.mask = 'date';\n```\n\nWhen using the date mask this way, the automatically-applied date format will be a short date format supplied by [IdsLocale](../ids-locale/README.MD).\n\n#### Number Mask\n\nAnother example is configuring an input field to mask a fully-formatted number, with proper localization of thousands separator, decimal, and currency symbol placement.  An example of configuring the field for a U.S. localized formatted number could be this:\n\n```js\nimport { numberMask } from 'ids-enterprise-wc'\n\nconst input = document.querySelector('my-input');\ninput.maskOptions = {\n  allowDecimal: true,\n  allowNegative: true,\n  decimalLimit: 2,\n  integerLimit: 7,\n  prefix: '$'\n};\ninput.mask = numberMask;\n```\n\nAs a convenience, the number formatter can also be applied by string:\n\n```js\ninput.mask = 'number';\n```\n\nWhen using the number mask this way, the number will be formatted with localized decimal, thousands (group) separator, negative, and currency symbols supplied by [IdsLocale](../ids-locale/README.MD).\n\n## Settings (Attributes)\n\n- `mask` {Array<string|RegExp>|Function} the mask that is applied to the input.\n- `mask-options` {object} options that will be applied to a masking function in progress.\n- `mask-retain-positions` {boolean} if true, combined with guides, creates masked input that allows sections between literal characters to be removed/replaced without altering the position of the characters in other sections.\n- `mask-guide` {boolean} if true, displays the complete mask as a \"placeholder\" in the input field once input has been entered.  Pattern characters are represented as `_` or other defined character, and literal characters are shown in-line.  This feature is only applicable to array-based pattern masks.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Mask is a new component in 4.0.0\n- Invoke with `.mask()` on any `<input type=\"text\">` element\n\n**4.x to 5.x**\n\n- Mask is now an Ids Mixin applied to [IdsInput](../ids-input/README.md)\n- To enable a mask, all that's necessary is to define the `mask` attribute of an IdsInput\n- If using events, events are now plain JS events\n- 4.x `patternOptions` settings are applied to masks with the `mask-options` attribute on IdsInput. All the previous built-in mask settings have remained unchanged between 4.x and 5.x\n- When using `mask=\"date\"` on the element, an [IdsLocale](../ids-locale/README.md)-driven date format is applied to the field's mask\n- When using `mask=\"number\"` on the element, an [IdsLocale](../ids-locale/README.md)-driven number format is applied to the field's mask\n"}},{"name":"ids-mask-global","description":{"kind":"markdown","value":"# Ids Mask Mixin\n\nThe Mask Mixin allows for finer control of text entered into an [Ids Input Component](../ids-input/README.md), and related components.  For example, a masked input field can be configured to only allow numbers and dashes, allowing for entry of a credit card number.  The Mask Mixin is also used in components like [Ids Date Picker](../ids-date-picker/README.md) or [Ids Time Picker](../ids-time-picker/README.md) to only allow dates/times to be entered in those fields, respectively.  The contents of the input field are modified as the user types into the field, allowing for instantaneous feedback.\n\n## Use Cases\n\nMasked input fields are used in the following cases:\n\n- Limiting text input to simple patterns, such as credit cards and phone numbers.\n- Automatically formatting numbers, dates, and times to match the current [Locale](./locale).\n\n## Terminology\n\n**Literal Character** - in a mask array, the literal characters are automatically filled in by the mask as the user types characters that match the surrounding pattern.  These characters may also be keyed in by the user.  For example, in a U.S.phone number that includes an area code, literal characters may be the parenthesis `()`, or the dashes `-` between the numbers.\n**Pattern Character** - in a mask array, pattern characters are represented by Regular Expressions.  When a user is typing into a masked field, if they type a character that matches a particular position's pattern character, that input will be accepted.  Otherwise, the input is thrown away.  For example, if the pattern character is `/\\d/` at index 0 inside a masked input field, and the user types \"0\", that number will be accepted and entered in the input.  However, if the user types \"A\", that input will be rejected.\n**Mask Function** a mask function is a Javascript function that takes two arguments (the value, and mask-specific options) that can be used to generate a mask pattern dynamically.  This is useful for input elements that mask against an indeterminate number of characters, or that need to alter the mask based on dynamic conditions. For example, the built in Date Masking function can support single or double digit Months and Days, but needs to alter the mask provided to date fields dynamically based on prior input.\n**Mask Array** a mask array (or pattern) is the array of literal and pattern characters used internally by masked input fields to resolve allowed input.  The contents of this array are the limiting factor for user input.\n**Mask Options** a setting on input fields that can define extra options that will be considered by a defined Mask function.\n\n## Features (With Code Samples)\n\n### Using Mask Arrays\n\nMasks can be applied very simply to an Ids Input by accessing its Javascript properties for masking.  Consider the following example:\n\n```html\n<ids-input id=\"my-input\" label=\"Phone Number\"></ids-input>\n```\n\nUsing Javascript, we can add a mask array using the following:\n\n```js\nconst input = document.querySelector('my-input');\ninput.mask = ['(', /\\d/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/ ];\n```\n\nNow when the user types into the field, the only input that will be accepted are numbers that fit within the contents of this array:\n\n```js\ninput.value = 'x1x2x3x4x5x6x7x8x9x0x';\n\nconsole.info(input.value);\n// returns '(123) 456-7890\n```\n\nThe contents of a mask array can be defined using any number of \"literal\" string characters (not replaced by masking, but will be filled in automatically), as well as regular expression-based \"pattern\" characters.  Regular expressions inside the mask array should be designed to match a single character.\n\n### Using Mask Functions\n\nIn some cases Masks need to be dynamic, changing in size to fit a particular kind of input.  Mask functions are capable of analyzing the raw value passed to the Mask API before returning a mask array.  This can be useful if you need to mask a specific section of input differently for several cases.\n\nMask functions take two arguments -- a string containing the raw value that will eventually be masked, and an object containing whatever settings your function will need for compiling the mask array and analyzing the raw value.  Mask functions should always eventually return a Mask Array of string literals and single-character regular expressions.\n\nA very basic example of a custom mask function would look like this:\n\n```js\nfunction customMaskFunction(rawValue, options) {\n  let arr = [];\n  // do some analysis on the raw value\n  // ...\n  return arr;\n}\n```\n\nIf a developer wished to build a mask function that always placed a suffix at the end of an indeterminately-sized number, it could be done this way:\n\n```js\nconst input = document.querySelector('my-input');\ninput.maskOptions = {\n  suffix: '%'\n};\ninput.mask = (rawValue, opts) => {\n  const totalDigits = rawValue.split('').map(() => /\\d/);\n  return [...totalDigits, opts.suffix];\n};\n```\n\n### Built-in Mask Functions\n\nIds Mask comes with some built in masking functions.  These hook into other IDS components and utilities to provide localization and formatting.\n\n#### Date Masks\n\nFor example, configuring an input field to mask as a U.S. localized short-hand date could be done this way:\n\n```js\nimport { dateMask } from 'ids-enterprise-wc'\n\nconst input = document.querySelector('my-input');\ninput.maskOptions = {\n  format: 'M/d/yyyy'\n};\ninput.mask = dateMask;\n```\n\nAs a convenience, built-in masks can also be automatically applied with shorthand string-based syntax:\n\n```js\ninput.mask = 'date';\n```\n\nWhen using the date mask this way, the automatically-applied date format will be a short date format supplied by [IdsLocale](../ids-locale/README.MD).\n\n#### Number Mask\n\nAnother example is configuring an input field to mask a fully-formatted number, with proper localization of thousands separator, decimal, and currency symbol placement.  An example of configuring the field for a U.S. localized formatted number could be this:\n\n```js\nimport { numberMask } from 'ids-enterprise-wc'\n\nconst input = document.querySelector('my-input');\ninput.maskOptions = {\n  allowDecimal: true,\n  allowNegative: true,\n  decimalLimit: 2,\n  integerLimit: 7,\n  prefix: '$'\n};\ninput.mask = numberMask;\n```\n\nAs a convenience, the number formatter can also be applied by string:\n\n```js\ninput.mask = 'number';\n```\n\nWhen using the number mask this way, the number will be formatted with localized decimal, thousands (group) separator, negative, and currency symbols supplied by [IdsLocale](../ids-locale/README.MD).\n\n## Settings (Attributes)\n\n- `mask` {Array<string|RegExp>|Function} the mask that is applied to the input.\n- `mask-options` {object} options that will be applied to a masking function in progress.\n- `mask-retain-positions` {boolean} if true, combined with guides, creates masked input that allows sections between literal characters to be removed/replaced without altering the position of the characters in other sections.\n- `mask-guide` {boolean} if true, displays the complete mask as a \"placeholder\" in the input field once input has been entered.  Pattern characters are represented as `_` or other defined character, and literal characters are shown in-line.  This feature is only applicable to array-based pattern masks.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Mask is a new component in 4.0.0\n- Invoke with `.mask()` on any `<input type=\"text\">` element\n\n**4.x to 5.x**\n\n- Mask is now an Ids Mixin applied to [IdsInput](../ids-input/README.md)\n- To enable a mask, all that's necessary is to define the `mask` attribute of an IdsInput\n- If using events, events are now plain JS events\n- 4.x `patternOptions` settings are applied to masks with the `mask-options` attribute on IdsInput. All the previous built-in mask settings have remained unchanged between 4.x and 5.x\n- When using `mask=\"date\"` on the element, an [IdsLocale](../ids-locale/README.md)-driven date format is applied to the field's mask\n- When using `mask=\"number\"` on the element, an [IdsLocale](../ids-locale/README.md)-driven number format is applied to the field's mask\n"}},{"name":"ids-masks","description":{"kind":"markdown","value":"# Ids Mask Mixin\n\nThe Mask Mixin allows for finer control of text entered into an [Ids Input Component](../ids-input/README.md), and related components.  For example, a masked input field can be configured to only allow numbers and dashes, allowing for entry of a credit card number.  The Mask Mixin is also used in components like [Ids Date Picker](../ids-date-picker/README.md) or [Ids Time Picker](../ids-time-picker/README.md) to only allow dates/times to be entered in those fields, respectively.  The contents of the input field are modified as the user types into the field, allowing for instantaneous feedback.\n\n## Use Cases\n\nMasked input fields are used in the following cases:\n\n- Limiting text input to simple patterns, such as credit cards and phone numbers.\n- Automatically formatting numbers, dates, and times to match the current [Locale](./locale).\n\n## Terminology\n\n**Literal Character** - in a mask array, the literal characters are automatically filled in by the mask as the user types characters that match the surrounding pattern.  These characters may also be keyed in by the user.  For example, in a U.S.phone number that includes an area code, literal characters may be the parenthesis `()`, or the dashes `-` between the numbers.\n**Pattern Character** - in a mask array, pattern characters are represented by Regular Expressions.  When a user is typing into a masked field, if they type a character that matches a particular position's pattern character, that input will be accepted.  Otherwise, the input is thrown away.  For example, if the pattern character is `/\\d/` at index 0 inside a masked input field, and the user types \"0\", that number will be accepted and entered in the input.  However, if the user types \"A\", that input will be rejected.\n**Mask Function** a mask function is a Javascript function that takes two arguments (the value, and mask-specific options) that can be used to generate a mask pattern dynamically.  This is useful for input elements that mask against an indeterminate number of characters, or that need to alter the mask based on dynamic conditions. For example, the built in Date Masking function can support single or double digit Months and Days, but needs to alter the mask provided to date fields dynamically based on prior input.\n**Mask Array** a mask array (or pattern) is the array of literal and pattern characters used internally by masked input fields to resolve allowed input.  The contents of this array are the limiting factor for user input.\n**Mask Options** a setting on input fields that can define extra options that will be considered by a defined Mask function.\n\n## Features (With Code Samples)\n\n### Using Mask Arrays\n\nMasks can be applied very simply to an Ids Input by accessing its Javascript properties for masking.  Consider the following example:\n\n```html\n<ids-input id=\"my-input\" label=\"Phone Number\"></ids-input>\n```\n\nUsing Javascript, we can add a mask array using the following:\n\n```js\nconst input = document.querySelector('my-input');\ninput.mask = ['(', /\\d/, /\\d/, /\\d/, ')', ' ', /\\d/, /\\d/, /\\d/, '-', /\\d/, /\\d/, /\\d/, /\\d/ ];\n```\n\nNow when the user types into the field, the only input that will be accepted are numbers that fit within the contents of this array:\n\n```js\ninput.value = 'x1x2x3x4x5x6x7x8x9x0x';\n\nconsole.info(input.value);\n// returns '(123) 456-7890\n```\n\nThe contents of a mask array can be defined using any number of \"literal\" string characters (not replaced by masking, but will be filled in automatically), as well as regular expression-based \"pattern\" characters.  Regular expressions inside the mask array should be designed to match a single character.\n\n### Using Mask Functions\n\nIn some cases Masks need to be dynamic, changing in size to fit a particular kind of input.  Mask functions are capable of analyzing the raw value passed to the Mask API before returning a mask array.  This can be useful if you need to mask a specific section of input differently for several cases.\n\nMask functions take two arguments -- a string containing the raw value that will eventually be masked, and an object containing whatever settings your function will need for compiling the mask array and analyzing the raw value.  Mask functions should always eventually return a Mask Array of string literals and single-character regular expressions.\n\nA very basic example of a custom mask function would look like this:\n\n```js\nfunction customMaskFunction(rawValue, options) {\n  let arr = [];\n  // do some analysis on the raw value\n  // ...\n  return arr;\n}\n```\n\nIf a developer wished to build a mask function that always placed a suffix at the end of an indeterminately-sized number, it could be done this way:\n\n```js\nconst input = document.querySelector('my-input');\ninput.maskOptions = {\n  suffix: '%'\n};\ninput.mask = (rawValue, opts) => {\n  const totalDigits = rawValue.split('').map(() => /\\d/);\n  return [...totalDigits, opts.suffix];\n};\n```\n\n### Built-in Mask Functions\n\nIds Mask comes with some built in masking functions.  These hook into other IDS components and utilities to provide localization and formatting.\n\n#### Date Masks\n\nFor example, configuring an input field to mask as a U.S. localized short-hand date could be done this way:\n\n```js\nimport { dateMask } from 'ids-enterprise-wc'\n\nconst input = document.querySelector('my-input');\ninput.maskOptions = {\n  format: 'M/d/yyyy'\n};\ninput.mask = dateMask;\n```\n\nAs a convenience, built-in masks can also be automatically applied with shorthand string-based syntax:\n\n```js\ninput.mask = 'date';\n```\n\nWhen using the date mask this way, the automatically-applied date format will be a short date format supplied by [IdsLocale](../ids-locale/README.MD).\n\n#### Number Mask\n\nAnother example is configuring an input field to mask a fully-formatted number, with proper localization of thousands separator, decimal, and currency symbol placement.  An example of configuring the field for a U.S. localized formatted number could be this:\n\n```js\nimport { numberMask } from 'ids-enterprise-wc'\n\nconst input = document.querySelector('my-input');\ninput.maskOptions = {\n  allowDecimal: true,\n  allowNegative: true,\n  decimalLimit: 2,\n  integerLimit: 7,\n  prefix: '$'\n};\ninput.mask = numberMask;\n```\n\nAs a convenience, the number formatter can also be applied by string:\n\n```js\ninput.mask = 'number';\n```\n\nWhen using the number mask this way, the number will be formatted with localized decimal, thousands (group) separator, negative, and currency symbols supplied by [IdsLocale](../ids-locale/README.MD).\n\n## Settings (Attributes)\n\n- `mask` {Array<string|RegExp>|Function} the mask that is applied to the input.\n- `mask-options` {object} options that will be applied to a masking function in progress.\n- `mask-retain-positions` {boolean} if true, combined with guides, creates masked input that allows sections between literal characters to be removed/replaced without altering the position of the characters in other sections.\n- `mask-guide` {boolean} if true, displays the complete mask as a \"placeholder\" in the input field once input has been entered.  Pattern characters are represented as `_` or other defined character, and literal characters are shown in-line.  This feature is only applicable to array-based pattern masks.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Mask is a new component in 4.0.0\n- Invoke with `.mask()` on any `<input type=\"text\">` element\n\n**4.x to 5.x**\n\n- Mask is now an Ids Mixin applied to [IdsInput](../ids-input/README.md)\n- To enable a mask, all that's necessary is to define the `mask` attribute of an IdsInput\n- If using events, events are now plain JS events\n- 4.x `patternOptions` settings are applied to masks with the `mask-options` attribute on IdsInput. All the previous built-in mask settings have remained unchanged between 4.x and 5.x\n- When using `mask=\"date\"` on the element, an [IdsLocale](../ids-locale/README.md)-driven date format is applied to the field's mask\n- When using `mask=\"number\"` on the element, an [IdsLocale](../ids-locale/README.md)-driven number format is applied to the field's mask\n"}},{"name":"ids-loading-indicator-attributes","description":{"kind":"markdown","value":"# Ids Loading Indicator Component\n\n## Description\n\nThe `<ids-loading-indicator>` component is used to notify the user that the system is processing a request, and that they must wait for that request to be processed before continuing with the current task. There are different indicators and UI styles for different scenarios. In previous versions this has been called Loading Indicator or Busy Indicator.\n\n## Use Cases\n\n- Loading indicators tell users about wait times for current processes. Examples can include, searching through a page and submitting a form or a page loading. These indicators communicate the status to the user.\n\n## Terminology\n\n- **Determinate**: Used when there is a defined loading time. These indicators display percentages that help approximate the wait time.\n- **Indeterminate**: Used when there is an undefined loading time. These indicators are for unspecified wait times, and do not include a percentage.\n\n## Features (With Code Examples)\n\nA page loader can be added to a page by adding an ids-loading-indicator to the page and running the scripts. It will not appear until the web component is in a `connnected` state.\n\nA circular and indeterminate indicator will be the default behavior of an `ids-loading-indicator` without attributes passed:\n```html\n<ids-loading-indicator></ids-loading-indicator>\n```\nAdding a `linear` flag sets the indicator to be a linear indicator:\n```html\n<ids-loading-indicator linear></ids-loading-indicator>\n```\n\nSetting any type of indicator's `progress` attribute will cause the indicator to become\ndeterminate and then represent the percentage given by the the attribute. In this example,\nthe progress is at 20% which would mean 20% of the linear indicator will be filled in/marked as\ncomplete.\n\n```html\n<ids-loading-indicator linear progress=\"20\"></ids-loading-indicator>\n```\n\nAdding the `percentage-visible` flag attribute will cause text to show up on an indicator:\n\n```html\n<ids-loading-indicator linear progress=\"20\" percentage-visible></ids-loading-indicator>\n```\n\nAdding a `sticky` attribute will set the indicator to a sticky indicator, which will affix\nthe indicator to the top of the current component.\n\n```html\n<ids-loading-indicator sticky></ids-loading-indicator>\n```\n\nIn the following example, the indicator is determinate, with 10% completion and\naffixed to the top of view it is currently in:\n```html\n<ids-loading-indicator progress=\"10\" sticky></ids-loading-indicator>\n```\n\n## Settings and Attributes\n\n- `progress` *{number | undefined}* Represents the percentage completed for the indicator; if not specified, the indicator is set into indeterminate mode (e.g. no specific progress with an animation)\n- `sticky` *{boolean}* Flags the indicator as an sticky indicator type; causes\nthe indicator to stick to the top of the innermost parent IdsElement and span it horizontally. If set, will flag this indicator as a linear or circular indicator.\n- `linear` *{boolean}* value Flags the indicator as a linear indicator type; causes the indicator to span its parent component horizontally and become a horizontal/linear bar. If set, removes other current flag types that may be set.\n- `percentage-visible` *{boolean}* Denotes that the percentage text should be visible (not applicable to `sticky` loading indicators).\n\n## Themeable Parts\n- `container` - the loader (svg) container element\n- `progress` - the percentage complete or active part of the indeterminate area\n- `circle` - the circle area which would span what the indicator would at 100% and always on the indicator.\n- `percentage-text` the percentage text shown (when `percentage-visible` flag is set)\n\n## Keyboard Guidelines\n\nNo keyboard shortcuts available -- the loading indicator is only meant to be a visual indicator to the user and not interactive.\n\n## Responsive Guidelines\n\n- if using a `sticky` indicator, the indicator will span 100% of the nearest `relative` positioned div.\n\n## Accessibility Guidelines\n\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. Ensure the color tags that indicate state like OK, cancel, ect have other ways to indicate that information. This is failing.\n- 1.1 Text Alternatives - Provide text alternatives for any non-text content so that it can be changed into other forms people need, such as large print, braille, speech, symbols or simpler language.\n\n## Regional Considerations\n\nAny Labels should be localized in the current language. The animation should flip in RTL mode (TBD)\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Has all new markup and styles.\n\n**4.x to 5.x**\n\n- Busy Indicator has been renamed to `ids-loading-indicator`.\n- It has all new markup and classes for web components.\n- Markup has changed to a custom element `<ids-loading-indicator></ids-loading-indicator>`\n- If using events events are now plain JS events for example\n- Can now be imported as a single JS file and used with encapsulated styles\n- Can change the type of indicator from Circular to Linear by applying a `linear` attribute flag, or make it a sticky/bar indicator that sticks to the top of a component via the `sticky` flag.\n- Can make the indicator determinate by providing a `progress` attribute with a number representing the percentage from 0-100 that the indicator is representing a process completed so far.\n"}},{"name":"ids-loading-indicator","attributes":[{"name":"inline","values":[]},{"name":"progress","values":[]},{"name":"sticky","values":[]},{"name":"percentageVisible","values":[]},{"name":"linear","values":[]},{"name":"type","values":[]},{"name":"#type","description":"type-flag set based on attributes","values":[]}],"description":{"kind":"markdown","value":"# Ids Loading Indicator Component\n\n## Description\n\nThe `<ids-loading-indicator>` component is used to notify the user that the system is processing a request, and that they must wait for that request to be processed before continuing with the current task. There are different indicators and UI styles for different scenarios. In previous versions this has been called Loading Indicator or Busy Indicator.\n\n## Use Cases\n\n- Loading indicators tell users about wait times for current processes. Examples can include, searching through a page and submitting a form or a page loading. These indicators communicate the status to the user.\n\n## Terminology\n\n- **Determinate**: Used when there is a defined loading time. These indicators display percentages that help approximate the wait time.\n- **Indeterminate**: Used when there is an undefined loading time. These indicators are for unspecified wait times, and do not include a percentage.\n\n## Features (With Code Examples)\n\nA page loader can be added to a page by adding an ids-loading-indicator to the page and running the scripts. It will not appear until the web component is in a `connnected` state.\n\nA circular and indeterminate indicator will be the default behavior of an `ids-loading-indicator` without attributes passed:\n```html\n<ids-loading-indicator></ids-loading-indicator>\n```\nAdding a `linear` flag sets the indicator to be a linear indicator:\n```html\n<ids-loading-indicator linear></ids-loading-indicator>\n```\n\nSetting any type of indicator's `progress` attribute will cause the indicator to become\ndeterminate and then represent the percentage given by the the attribute. In this example,\nthe progress is at 20% which would mean 20% of the linear indicator will be filled in/marked as\ncomplete.\n\n```html\n<ids-loading-indicator linear progress=\"20\"></ids-loading-indicator>\n```\n\nAdding the `percentage-visible` flag attribute will cause text to show up on an indicator:\n\n```html\n<ids-loading-indicator linear progress=\"20\" percentage-visible></ids-loading-indicator>\n```\n\nAdding a `sticky` attribute will set the indicator to a sticky indicator, which will affix\nthe indicator to the top of the current component.\n\n```html\n<ids-loading-indicator sticky></ids-loading-indicator>\n```\n\nIn the following example, the indicator is determinate, with 10% completion and\naffixed to the top of view it is currently in:\n```html\n<ids-loading-indicator progress=\"10\" sticky></ids-loading-indicator>\n```\n\n## Settings and Attributes\n\n- `progress` *{number | undefined}* Represents the percentage completed for the indicator; if not specified, the indicator is set into indeterminate mode (e.g. no specific progress with an animation)\n- `sticky` *{boolean}* Flags the indicator as an sticky indicator type; causes\nthe indicator to stick to the top of the innermost parent IdsElement and span it horizontally. If set, will flag this indicator as a linear or circular indicator.\n- `linear` *{boolean}* value Flags the indicator as a linear indicator type; causes the indicator to span its parent component horizontally and become a horizontal/linear bar. If set, removes other current flag types that may be set.\n- `percentage-visible` *{boolean}* Denotes that the percentage text should be visible (not applicable to `sticky` loading indicators).\n\n## Themeable Parts\n- `container` - the loader (svg) container element\n- `progress` - the percentage complete or active part of the indeterminate area\n- `circle` - the circle area which would span what the indicator would at 100% and always on the indicator.\n- `percentage-text` the percentage text shown (when `percentage-visible` flag is set)\n\n## Keyboard Guidelines\n\nNo keyboard shortcuts available -- the loading indicator is only meant to be a visual indicator to the user and not interactive.\n\n## Responsive Guidelines\n\n- if using a `sticky` indicator, the indicator will span 100% of the nearest `relative` positioned div.\n\n## Accessibility Guidelines\n\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. Ensure the color tags that indicate state like OK, cancel, ect have other ways to indicate that information. This is failing.\n- 1.1 Text Alternatives - Provide text alternatives for any non-text content so that it can be changed into other forms people need, such as large print, braille, speech, symbols or simpler language.\n\n## Regional Considerations\n\nAny Labels should be localized in the current language. The animation should flip in RTL mode (TBD)\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Has all new markup and styles.\n\n**4.x to 5.x**\n\n- Busy Indicator has been renamed to `ids-loading-indicator`.\n- It has all new markup and classes for web components.\n- Markup has changed to a custom element `<ids-loading-indicator></ids-loading-indicator>`\n- If using events events are now plain JS events for example\n- Can now be imported as a single JS file and used with encapsulated styles\n- Can change the type of indicator from Circular to Linear by applying a `linear` attribute flag, or make it a sticky/bar indicator that sticks to the top of a component via the `sticky` flag.\n- Can make the indicator determinate by providing a `progress` attribute with a number representing the percentage from 0-100 that the indicator is representing a process completed so far.\n"}},{"name":"ids-masthead","attributes":[{"name":"#cachedSlots","values":[]},{"name":"#cachedBreakpoints","values":[]},{"name":"elements","description":"Get a list of element dependencies for this component","values":[]},{"name":"slots","values":[]},{"name":"breakpoints","values":[]},{"name":"isMobile","values":[]},{"name":"isTablet","values":[]},{"name":"isDesktop","values":[]},{"name":"icon","description":"Gets the icon attribute","values":[]}],"description":{"kind":"markdown","value":"# Ids Masthead Component\n\n## Description\n\nThe Masthead Component is a very top level application toolbar with navigable links to useful applications/pages within the Web Application.\n\nThe masthead can be added to applications when not running inside mingle shell to add functionality that mingle would add that you need standalone. When running in mingle shell, you should detect and do not show the mast head.\n\nThe masthead can be found in tenant environments that are opted in to the CloudSuite. It provides navigation to other applications, homepages, and bookmarks within the environment. The masthead is a visual representation of InforOS, which serves as a database for all information and actions made by users within different applications within the suite.\n\nIn some cases, the masthead may be implemented in a context outside of the CloudSuite. This should only be done when it is necessary to surface global actions that affect more than one page within an application and do not fit into the context of a page header.\n\nActions and links found in the masthead are configurable by the tenant admin. The masthead will almost always have:\n\nThe application tray: allows users to navigate to other applications within a tenants suite\n- Search: pulls results from the current application and around the cloud suite\n- Bookmarks: allows users to save specific pages within applications and access them from anywhere within the cloud suite\n- User settings: central place for end users to view/edit their personal information and any global preferences\n\nSome optional features in the masthead:\n- Company logo/home icon: navigates the user to the default or preferred home page\n- Coleman\n- Inbox\n\n## Use Cases\n\n- A masthead can provide a prominent application level bar to other applications, homepages, and bookmarks within a Web Application.\n- A masthead can be utilized when it is necessary to surface global actions that affect more than one page within a Web Application.\n\n## Terminology\n\n- **Masthead**: A custom HTML element that serves as the primary header bar on a page.\n- **Icon**: Icon is the company-logo in the masthead.\n- **Title**: Title is text that appears next to the logo.\n- **Slots**: Slots are sections in the masthead that allow users to customize where buttons appear in the masthead. There are 4 slots: `start`, `center`, `end`, `more`.\n\n## Feature (With the Code Examples)\n\nAn masthead is created by using the `ids-masthead` tag. It has a `icon` property to set the desired logo/icon for the masthead.  It also has a `title` property to set the text that appears next to the logo/icon.\n\nMasthead with `icon` and `title` attributes:\n\n```html\n<ids-masthead icon=\"logo\" title=\"Infor Application\"></ids-masthead>\n```\n\nMasthead with `nav` elements as slots:\n\n```html\n<ids-masthead icon=\"logo\" title=\"Infor Application\">\n  <section slot=\"start\">\n    <ids-button icon=\"grid\"></ids-button>\n    <ids-button icon=\"star-outline\"></ids-button>\n  </section>\n  <section slot=\"center\">\n    <ids-button icon=\"info\"></ids-button>\n  </section>\n  <section slot=\"end\">\n    <ids-button icon=\"user\"></ids-button>\n    <ids-button icon=\"bookmark-outline\"></ids-button>\n  </section>\n</ids-masthead>\n```\n\n## Class Hierarchy\n\n- IdsMasthead\n  - IdsHeader\n- Mixins\n  - IdsEventsMixin\n  - IdsKeyboardMixin\n\n## Settings\n\n- `icon` {string} Sets the masthead's icon attribute\n- `title` {string} Sets the masthead's title attribute\n- `slots` {readonly} An object containing the masthead's slots/sections for start|center|end|more\n- `breakpoints` {readonly}  object containing (window.matchMedia) breakpoints for mobile|tablet|desktop\n- `isMobile` {readonly} Returns true if the mobile breakpoint is active\n- `isTablet` {readonly} Returns true if the tablet breakpoint is active\n- `isDesktop` {readonly} Returns true if the desktop breakpoint is active\n\n## Events\n\n- `tab` {KeyboardEvent} Pressing the tab keyboard button will traverse all buttons in the masthead.\n\n## Methods\n\n- `renderBreakpoint()` Rearranges user's slots in masthead according to desktop, tablet and mobile viewports.\n\n## Themeable Parts\n\n- None\n\n## States and Variations\n\n- Mobile, tablet and desktop viewports/breakpoints\n\n## Accessibility\n\n- Use the `role=\"banner\"` Landmark role\n- Should use html5 section or nav type\n\n## Keyboard Guidelines\n\nA masthead's action buttons should function as a toolbar, see [toolbar](../ids-toolbar/README.md) page for guidelines.\n\n## Responsive Guidelines\n\nA masthead will resize horizontally to mobile, tablet and desktop breakpoints. At the tablet and mobile breakpoints, buttons are moved into the \"More\" popup-menu.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Masthead replaces the inforTopBanner CSS. The markup and CSS Is entirely different to support new look and behavior.\n\n**4.x to 5.x**\n\n- The masthead component has been changed to a web component and renamed to ids-masthead.\n- If using properties/settings these are now attributes.\n- Markup has changed to a custom element `<ids-masthead></ids-masthead>`\n- If using events events are now plain JS events for example (i.e. button click events)\n- The template is now a template element that uses simple string substitution\n- Can now be imported as a single JS file and used with encapsulated styles (in some browsers)\n- Design has changed\n"}},{"name":"ids-menu-attributes","description":{"kind":"markdown","value":"# Ids Menu Component\n\n## Description\n\nThe IdsMenu Component provides the ui for a menu. This includes groups, icons, submenus, text, disabled ect. By itself a menu is not very useful and will just paint on the page as if it was open. Use [IdsMenuButton]('../ids-menu-button/README.md') in order to show a menu on a button click. Or use [IdsPopupMenu]('../ids-popup-menu/README.md') to show a menu on a click or right click anywhere on the page. The construction of a menu is comprised of several related components.\n\n`ids-menu-group` is used to create a group for a set of menu items.\n`ids-menu-header` is used a as a label for groups of menu items\n`ids-menu-item` is the main component normal menu items\n\n## Use Cases\n\n- Display an application menu\n- Display submenus\n- Display a menu with icons\n\n## Terminology\n\n**Group** A label separating items in the menu in a logical group\n**Submenus** A a list of choices that is part of another list of choices\n\n## Attributes and Properties (ids-menu-group)\n\n- `disabled` {boolean} true if the entire menu should become disabled\n- `keep-open` {boolean} true if selection of an item within this group should cause the parent menu to close\n- `selection` {string} The type of selection to set this group between `single` and `multiple` or `none`\n\n## Features (With Code Examples)\n\nA simple menu with three items can be created by creating a `ids-menu` with a single `ids-menu-group` and three `ids-menu-item` components.\n\n```html\n<ids-menu id=\"simple-menu\">\n  <ids-menu-group>\n    <ids-menu-item>One</ids-menu-item>\n    <ids-menu-item>Two</ids-menu-item>\n    <ids-menu-item>Three</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nA menu can have a toggle-able menu item that is indicated with a check that toggles when you turn it on and off. In this example selecting `Two` will mark it checked and unchecked\n\n```html\n<ids-menu id=\"simple-menu\">\n  <ids-menu-group>\n    <ids-menu-item>One</ids-menu-item>\n    <ids-menu-item toggleable>Two</ids-menu-item>\n    <ids-menu-item>Three</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nA more complicated menu can be formed using combinations of  `ids-menu` with a `ids-menu-group` and nested `ids-menu-item` components.\n\n```html\n<ids-menu id=\"complex-menu\">\n  <ids-menu-group id=\"main-settings\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n    <ids-separator></ids-separator>\n    <ids-menu-item value=\"long-no-icons\">Very long, indescribable action with no icons</ids-menu-item>\n    <ids-menu-item icon=\"url\" disabled=\"true\" value=\"big-with-icons\">\n      Another big menu item, but with icons!\n    </ids-menu-item>\n  </ids-menu-group>\n  <ids-separator></ids-separator>\n  <ids-menu-header id=\"additional-actions-header\">Additional Actions</ids-menu-header>\n  <ids-menu-group id=\"more-settings\" aria-describedby=\"additional-actions-header\">\n    <ids-menu-item value=\"more-actions\">\n      More Actions\n    </ids-menu-item>\n    <ids-menu-item icon=\"user\" value=\"even-more-actions\">\n        Even More Actions\n    </ids-menu-item>\n    <ids-menu-item id=\"no-select\" value=\"no-select\">This one can't be selected (Check the console)</ids-menu-item>\n    </ids-menu-group>\n    <ids-separator></ids-separator>\n    <ids-menu-group id=\"other-settings\">\n    <ids-menu-item icon=\"more\" value=\"other-items\">Other Items</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n### Selection Event Handling\n\nWhen an `<ids-menu-item>` element is selected from a menu, it has the potential to fire up to two different events.  The events fired depend on how the menu is configured.  Consider this menu:\n\n```html\n<ids-menu id=\"my-menu\">\n  <ids-menu-group id=\"main-settings\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nIn this example, when any of the menu's items are chosen by click or by keyboard, no selection events are fired.  This is because there is no `select` attribute determining single or multiple selection.  The menu item chosen will not change the menu's selection state, and will simply fire a `pick` event.\n\nThis next example will cause a both a `selected` event and a `pick` event to fire whenever an item is chosen.  No `deselected` events will fire in this case:\n\n```html\n<ids-menu id=\"my-menu\">\n  <ids-menu-group id=\"main-settings\" select=\"single\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nYou can also have `toggleable` menu items where the menu item check can be turned on and off. For example\n\n```html\n<ids-menu>\n  <ids-menu-group select=\"single\">\n    <ids-menu-item icon=\"mail\" toggable value=\"mail\">Keep Active</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nThis next example will cause a either a `selected` OR `deselected` event, as well as a `pick` event, to fire whenever an item is chosen.  When an item is chosen, its selection state is changed, and the event fired corresponds to its new value:\n\n```html\n<ids-menu id=\"my-menu\">\n  <ids-menu-group id=\"main-settings\" select=\"multiple\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\n### Shortcut keys\n\nIdsMenuItem elements can have a `shortcut-keys` attribute defined, which will pass text representing a keyboard shortcut to be displayed into the white space opposite the regular text:\n\n```html\n<ids-menu-item id=\"action-create\" icon=\"folder\" shortcut-keys=\"⌘+R\">Create New Folder</ids-menu-item>\n```\n\n```js\nconst menuItem = document.querySelector('ids-menu-item');\nmenuItem.setAttribute('shortcut-keys', '⌘+R');\n```\n\n## Class Hierarchy Menu Group\n\n- IdsMenuGroup\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Class Hierarchy Menu Header\n\n- IdsMenuHeader\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Class Hierarchy Menu Item\n\n- IdsMenuItem\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- This component is relatively backwards compatible except inforContextMenu should be replaced with popupmenu in the API call and class name\n- Remove class divider as it is deprecated\n- Checkbox construct is simplified\n- Group replaced with heading\n\n**4.x to 5.x**\n\n- The menu component has been changed to a web component and renamed to `ids-menu`.\n- If using properties/settings these are now attributes.\n- Markup has changed to a custom element `<ids-menu></ids-menu>`\n- If using events events are now plain JS events for example (i.e. menu click events)\n- Can now be imported as a single JS file and used with encapsulated styles\n"}},{"name":"ids-menu-group","attributes":[{"name":"menu","values":[]},{"name":"items","values":[]},{"name":"header","description":"Gets this groups descriptive header, if one is defined.","values":[]},{"name":"select","values":[]},{"name":"keepOpen","values":[]}],"description":{"kind":"markdown","value":"# Ids Menu Component\n\n## Description\n\nThe IdsMenu Component provides the ui for a menu. This includes groups, icons, submenus, text, disabled ect. By itself a menu is not very useful and will just paint on the page as if it was open. Use [IdsMenuButton]('../ids-menu-button/README.md') in order to show a menu on a button click. Or use [IdsPopupMenu]('../ids-popup-menu/README.md') to show a menu on a click or right click anywhere on the page. The construction of a menu is comprised of several related components.\n\n`ids-menu-group` is used to create a group for a set of menu items.\n`ids-menu-header` is used a as a label for groups of menu items\n`ids-menu-item` is the main component normal menu items\n\n## Use Cases\n\n- Display an application menu\n- Display submenus\n- Display a menu with icons\n\n## Terminology\n\n**Group** A label separating items in the menu in a logical group\n**Submenus** A a list of choices that is part of another list of choices\n\n## Attributes and Properties (ids-menu-group)\n\n- `disabled` {boolean} true if the entire menu should become disabled\n- `keep-open` {boolean} true if selection of an item within this group should cause the parent menu to close\n- `selection` {string} The type of selection to set this group between `single` and `multiple` or `none`\n\n## Features (With Code Examples)\n\nA simple menu with three items can be created by creating a `ids-menu` with a single `ids-menu-group` and three `ids-menu-item` components.\n\n```html\n<ids-menu id=\"simple-menu\">\n  <ids-menu-group>\n    <ids-menu-item>One</ids-menu-item>\n    <ids-menu-item>Two</ids-menu-item>\n    <ids-menu-item>Three</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nA menu can have a toggle-able menu item that is indicated with a check that toggles when you turn it on and off. In this example selecting `Two` will mark it checked and unchecked\n\n```html\n<ids-menu id=\"simple-menu\">\n  <ids-menu-group>\n    <ids-menu-item>One</ids-menu-item>\n    <ids-menu-item toggleable>Two</ids-menu-item>\n    <ids-menu-item>Three</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nA more complicated menu can be formed using combinations of  `ids-menu` with a `ids-menu-group` and nested `ids-menu-item` components.\n\n```html\n<ids-menu id=\"complex-menu\">\n  <ids-menu-group id=\"main-settings\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n    <ids-separator></ids-separator>\n    <ids-menu-item value=\"long-no-icons\">Very long, indescribable action with no icons</ids-menu-item>\n    <ids-menu-item icon=\"url\" disabled=\"true\" value=\"big-with-icons\">\n      Another big menu item, but with icons!\n    </ids-menu-item>\n  </ids-menu-group>\n  <ids-separator></ids-separator>\n  <ids-menu-header id=\"additional-actions-header\">Additional Actions</ids-menu-header>\n  <ids-menu-group id=\"more-settings\" aria-describedby=\"additional-actions-header\">\n    <ids-menu-item value=\"more-actions\">\n      More Actions\n    </ids-menu-item>\n    <ids-menu-item icon=\"user\" value=\"even-more-actions\">\n        Even More Actions\n    </ids-menu-item>\n    <ids-menu-item id=\"no-select\" value=\"no-select\">This one can't be selected (Check the console)</ids-menu-item>\n    </ids-menu-group>\n    <ids-separator></ids-separator>\n    <ids-menu-group id=\"other-settings\">\n    <ids-menu-item icon=\"more\" value=\"other-items\">Other Items</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n### Selection Event Handling\n\nWhen an `<ids-menu-item>` element is selected from a menu, it has the potential to fire up to two different events.  The events fired depend on how the menu is configured.  Consider this menu:\n\n```html\n<ids-menu id=\"my-menu\">\n  <ids-menu-group id=\"main-settings\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nIn this example, when any of the menu's items are chosen by click or by keyboard, no selection events are fired.  This is because there is no `select` attribute determining single or multiple selection.  The menu item chosen will not change the menu's selection state, and will simply fire a `pick` event.\n\nThis next example will cause a both a `selected` event and a `pick` event to fire whenever an item is chosen.  No `deselected` events will fire in this case:\n\n```html\n<ids-menu id=\"my-menu\">\n  <ids-menu-group id=\"main-settings\" select=\"single\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nYou can also have `toggleable` menu items where the menu item check can be turned on and off. For example\n\n```html\n<ids-menu>\n  <ids-menu-group select=\"single\">\n    <ids-menu-item icon=\"mail\" toggable value=\"mail\">Keep Active</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nThis next example will cause a either a `selected` OR `deselected` event, as well as a `pick` event, to fire whenever an item is chosen.  When an item is chosen, its selection state is changed, and the event fired corresponds to its new value:\n\n```html\n<ids-menu id=\"my-menu\">\n  <ids-menu-group id=\"main-settings\" select=\"multiple\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\n### Shortcut keys\n\nIdsMenuItem elements can have a `shortcut-keys` attribute defined, which will pass text representing a keyboard shortcut to be displayed into the white space opposite the regular text:\n\n```html\n<ids-menu-item id=\"action-create\" icon=\"folder\" shortcut-keys=\"⌘+R\">Create New Folder</ids-menu-item>\n```\n\n```js\nconst menuItem = document.querySelector('ids-menu-item');\nmenuItem.setAttribute('shortcut-keys', '⌘+R');\n```\n\n## Class Hierarchy Menu Group\n\n- IdsMenuGroup\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Class Hierarchy Menu Header\n\n- IdsMenuHeader\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Class Hierarchy Menu Item\n\n- IdsMenuItem\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- This component is relatively backwards compatible except inforContextMenu should be replaced with popupmenu in the API call and class name\n- Remove class divider as it is deprecated\n- Checkbox construct is simplified\n- Group replaced with heading\n\n**4.x to 5.x**\n\n- The menu component has been changed to a web component and renamed to `ids-menu`.\n- If using properties/settings these are now attributes.\n- Markup has changed to a custom element `<ids-menu></ids-menu>`\n- If using events events are now plain JS events for example (i.e. menu click events)\n- Can now be imported as a single JS file and used with encapsulated styles\n"}},{"name":"ids-menu-header","attributes":[{"name":"menu","values":[]}],"description":{"kind":"markdown","value":"# Ids Menu Component\n\n## Description\n\nThe IdsMenu Component provides the ui for a menu. This includes groups, icons, submenus, text, disabled ect. By itself a menu is not very useful and will just paint on the page as if it was open. Use [IdsMenuButton]('../ids-menu-button/README.md') in order to show a menu on a button click. Or use [IdsPopupMenu]('../ids-popup-menu/README.md') to show a menu on a click or right click anywhere on the page. The construction of a menu is comprised of several related components.\n\n`ids-menu-group` is used to create a group for a set of menu items.\n`ids-menu-header` is used a as a label for groups of menu items\n`ids-menu-item` is the main component normal menu items\n\n## Use Cases\n\n- Display an application menu\n- Display submenus\n- Display a menu with icons\n\n## Terminology\n\n**Group** A label separating items in the menu in a logical group\n**Submenus** A a list of choices that is part of another list of choices\n\n## Attributes and Properties (ids-menu-group)\n\n- `disabled` {boolean} true if the entire menu should become disabled\n- `keep-open` {boolean} true if selection of an item within this group should cause the parent menu to close\n- `selection` {string} The type of selection to set this group between `single` and `multiple` or `none`\n\n## Features (With Code Examples)\n\nA simple menu with three items can be created by creating a `ids-menu` with a single `ids-menu-group` and three `ids-menu-item` components.\n\n```html\n<ids-menu id=\"simple-menu\">\n  <ids-menu-group>\n    <ids-menu-item>One</ids-menu-item>\n    <ids-menu-item>Two</ids-menu-item>\n    <ids-menu-item>Three</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nA menu can have a toggle-able menu item that is indicated with a check that toggles when you turn it on and off. In this example selecting `Two` will mark it checked and unchecked\n\n```html\n<ids-menu id=\"simple-menu\">\n  <ids-menu-group>\n    <ids-menu-item>One</ids-menu-item>\n    <ids-menu-item toggleable>Two</ids-menu-item>\n    <ids-menu-item>Three</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nA more complicated menu can be formed using combinations of  `ids-menu` with a `ids-menu-group` and nested `ids-menu-item` components.\n\n```html\n<ids-menu id=\"complex-menu\">\n  <ids-menu-group id=\"main-settings\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n    <ids-separator></ids-separator>\n    <ids-menu-item value=\"long-no-icons\">Very long, indescribable action with no icons</ids-menu-item>\n    <ids-menu-item icon=\"url\" disabled=\"true\" value=\"big-with-icons\">\n      Another big menu item, but with icons!\n    </ids-menu-item>\n  </ids-menu-group>\n  <ids-separator></ids-separator>\n  <ids-menu-header id=\"additional-actions-header\">Additional Actions</ids-menu-header>\n  <ids-menu-group id=\"more-settings\" aria-describedby=\"additional-actions-header\">\n    <ids-menu-item value=\"more-actions\">\n      More Actions\n    </ids-menu-item>\n    <ids-menu-item icon=\"user\" value=\"even-more-actions\">\n        Even More Actions\n    </ids-menu-item>\n    <ids-menu-item id=\"no-select\" value=\"no-select\">This one can't be selected (Check the console)</ids-menu-item>\n    </ids-menu-group>\n    <ids-separator></ids-separator>\n    <ids-menu-group id=\"other-settings\">\n    <ids-menu-item icon=\"more\" value=\"other-items\">Other Items</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n### Selection Event Handling\n\nWhen an `<ids-menu-item>` element is selected from a menu, it has the potential to fire up to two different events.  The events fired depend on how the menu is configured.  Consider this menu:\n\n```html\n<ids-menu id=\"my-menu\">\n  <ids-menu-group id=\"main-settings\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nIn this example, when any of the menu's items are chosen by click or by keyboard, no selection events are fired.  This is because there is no `select` attribute determining single or multiple selection.  The menu item chosen will not change the menu's selection state, and will simply fire a `pick` event.\n\nThis next example will cause a both a `selected` event and a `pick` event to fire whenever an item is chosen.  No `deselected` events will fire in this case:\n\n```html\n<ids-menu id=\"my-menu\">\n  <ids-menu-group id=\"main-settings\" select=\"single\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nYou can also have `toggleable` menu items where the menu item check can be turned on and off. For example\n\n```html\n<ids-menu>\n  <ids-menu-group select=\"single\">\n    <ids-menu-item icon=\"mail\" toggable value=\"mail\">Keep Active</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nThis next example will cause a either a `selected` OR `deselected` event, as well as a `pick` event, to fire whenever an item is chosen.  When an item is chosen, its selection state is changed, and the event fired corresponds to its new value:\n\n```html\n<ids-menu id=\"my-menu\">\n  <ids-menu-group id=\"main-settings\" select=\"multiple\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\n### Shortcut keys\n\nIdsMenuItem elements can have a `shortcut-keys` attribute defined, which will pass text representing a keyboard shortcut to be displayed into the white space opposite the regular text:\n\n```html\n<ids-menu-item id=\"action-create\" icon=\"folder\" shortcut-keys=\"⌘+R\">Create New Folder</ids-menu-item>\n```\n\n```js\nconst menuItem = document.querySelector('ids-menu-item');\nmenuItem.setAttribute('shortcut-keys', '⌘+R');\n```\n\n## Class Hierarchy Menu Group\n\n- IdsMenuGroup\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Class Hierarchy Menu Header\n\n- IdsMenuHeader\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Class Hierarchy Menu Item\n\n- IdsMenuItem\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- This component is relatively backwards compatible except inforContextMenu should be replaced with popupmenu in the API call and class name\n- Remove class divider as it is deprecated\n- Checkbox construct is simplified\n- Group replaced with heading\n\n**4.x to 5.x**\n\n- The menu component has been changed to a web component and renamed to `ids-menu`.\n- If using properties/settings these are now attributes.\n- Markup has changed to a custom element `<ids-menu></ids-menu>`\n- If using events events are now plain JS events for example (i.e. menu click events)\n- Can now be imported as a single JS file and used with encapsulated styles\n"}},{"name":"ids-menu-item","attributes":[{"name":"shouldUpdate","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"a","values":[]},{"name":"menu","values":[]},{"name":"group","values":[]},{"name":"disabled","description":"Retrieve the disabled state of the inner button element","values":[]},{"name":"highlighted","values":[]},{"name":"icon","values":[]},{"name":"iconEl","values":[]},{"name":"submenu","values":[]},{"name":"hasSubmenu","values":[]},{"name":"isSelectable","values":[]},{"name":"selected","values":[]},{"name":"shortcutKeys","values":[]},{"name":"shortcutKeyEl","values":[]},{"name":"#tabIndex","description":"Passes a tabindex attribute from the custom element to the hyperlink","values":[]},{"name":"#target","values":[]},{"name":"target","values":[]},{"name":"text","values":[]},{"name":"textAlign","description":"Set the value of the text align attribute","values":[]},{"name":"value","values":[]},{"name":"viewbox","description":"Return the viewbox","values":[]},{"name":"toggleable","description":"Return the viewbox","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# Ids Menu Component\n\n## Description\n\nThe IdsMenu Component provides the ui for a menu. This includes groups, icons, submenus, text, disabled ect. By itself a menu is not very useful and will just paint on the page as if it was open. Use [IdsMenuButton]('../ids-menu-button/README.md') in order to show a menu on a button click. Or use [IdsPopupMenu]('../ids-popup-menu/README.md') to show a menu on a click or right click anywhere on the page. The construction of a menu is comprised of several related components.\n\n`ids-menu-group` is used to create a group for a set of menu items.\n`ids-menu-header` is used a as a label for groups of menu items\n`ids-menu-item` is the main component normal menu items\n\n## Use Cases\n\n- Display an application menu\n- Display submenus\n- Display a menu with icons\n\n## Terminology\n\n**Group** A label separating items in the menu in a logical group\n**Submenus** A a list of choices that is part of another list of choices\n\n## Attributes and Properties (ids-menu-group)\n\n- `disabled` {boolean} true if the entire menu should become disabled\n- `keep-open` {boolean} true if selection of an item within this group should cause the parent menu to close\n- `selection` {string} The type of selection to set this group between `single` and `multiple` or `none`\n\n## Features (With Code Examples)\n\nA simple menu with three items can be created by creating a `ids-menu` with a single `ids-menu-group` and three `ids-menu-item` components.\n\n```html\n<ids-menu id=\"simple-menu\">\n  <ids-menu-group>\n    <ids-menu-item>One</ids-menu-item>\n    <ids-menu-item>Two</ids-menu-item>\n    <ids-menu-item>Three</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nA menu can have a toggle-able menu item that is indicated with a check that toggles when you turn it on and off. In this example selecting `Two` will mark it checked and unchecked\n\n```html\n<ids-menu id=\"simple-menu\">\n  <ids-menu-group>\n    <ids-menu-item>One</ids-menu-item>\n    <ids-menu-item toggleable>Two</ids-menu-item>\n    <ids-menu-item>Three</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nA more complicated menu can be formed using combinations of  `ids-menu` with a `ids-menu-group` and nested `ids-menu-item` components.\n\n```html\n<ids-menu id=\"complex-menu\">\n  <ids-menu-group id=\"main-settings\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n    <ids-separator></ids-separator>\n    <ids-menu-item value=\"long-no-icons\">Very long, indescribable action with no icons</ids-menu-item>\n    <ids-menu-item icon=\"url\" disabled=\"true\" value=\"big-with-icons\">\n      Another big menu item, but with icons!\n    </ids-menu-item>\n  </ids-menu-group>\n  <ids-separator></ids-separator>\n  <ids-menu-header id=\"additional-actions-header\">Additional Actions</ids-menu-header>\n  <ids-menu-group id=\"more-settings\" aria-describedby=\"additional-actions-header\">\n    <ids-menu-item value=\"more-actions\">\n      More Actions\n    </ids-menu-item>\n    <ids-menu-item icon=\"user\" value=\"even-more-actions\">\n        Even More Actions\n    </ids-menu-item>\n    <ids-menu-item id=\"no-select\" value=\"no-select\">This one can't be selected (Check the console)</ids-menu-item>\n    </ids-menu-group>\n    <ids-separator></ids-separator>\n    <ids-menu-group id=\"other-settings\">\n    <ids-menu-item icon=\"more\" value=\"other-items\">Other Items</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n### Selection Event Handling\n\nWhen an `<ids-menu-item>` element is selected from a menu, it has the potential to fire up to two different events.  The events fired depend on how the menu is configured.  Consider this menu:\n\n```html\n<ids-menu id=\"my-menu\">\n  <ids-menu-group id=\"main-settings\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nIn this example, when any of the menu's items are chosen by click or by keyboard, no selection events are fired.  This is because there is no `select` attribute determining single or multiple selection.  The menu item chosen will not change the menu's selection state, and will simply fire a `pick` event.\n\nThis next example will cause a both a `selected` event and a `pick` event to fire whenever an item is chosen.  No `deselected` events will fire in this case:\n\n```html\n<ids-menu id=\"my-menu\">\n  <ids-menu-group id=\"main-settings\" select=\"single\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nYou can also have `toggleable` menu items where the menu item check can be turned on and off. For example\n\n```html\n<ids-menu>\n  <ids-menu-group select=\"single\">\n    <ids-menu-item icon=\"mail\" toggable value=\"mail\">Keep Active</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nThis next example will cause a either a `selected` OR `deselected` event, as well as a `pick` event, to fire whenever an item is chosen.  When an item is chosen, its selection state is changed, and the event fired corresponds to its new value:\n\n```html\n<ids-menu id=\"my-menu\">\n  <ids-menu-group id=\"main-settings\" select=\"multiple\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\n### Shortcut keys\n\nIdsMenuItem elements can have a `shortcut-keys` attribute defined, which will pass text representing a keyboard shortcut to be displayed into the white space opposite the regular text:\n\n```html\n<ids-menu-item id=\"action-create\" icon=\"folder\" shortcut-keys=\"⌘+R\">Create New Folder</ids-menu-item>\n```\n\n```js\nconst menuItem = document.querySelector('ids-menu-item');\nmenuItem.setAttribute('shortcut-keys', '⌘+R');\n```\n\n## Class Hierarchy Menu Group\n\n- IdsMenuGroup\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Class Hierarchy Menu Header\n\n- IdsMenuHeader\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Class Hierarchy Menu Item\n\n- IdsMenuItem\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- This component is relatively backwards compatible except inforContextMenu should be replaced with popupmenu in the API call and class name\n- Remove class divider as it is deprecated\n- Checkbox construct is simplified\n- Group replaced with heading\n\n**4.x to 5.x**\n\n- The menu component has been changed to a web component and renamed to `ids-menu`.\n- If using properties/settings these are now attributes.\n- Markup has changed to a custom element `<ids-menu></ids-menu>`\n- If using events events are now plain JS events for example (i.e. menu click events)\n- Can now be imported as a single JS file and used with encapsulated styles\n"}},{"name":"ids-menu","attributes":[{"name":"datasource","values":[]},{"name":"lastHovered","values":[]},{"name":"lastNavigated","values":[]},{"name":"childElements","description":"Safely retrieves child elements of the menu without regard\nfor whether or not they are direct descendants, or slotted","values":[]},{"name":"data","description":"Set the data array of the menu","values":[]},{"name":"groups","values":[]},{"name":"headers","values":[]},{"name":"items","values":[]},{"name":"focused","values":[]},{"name":"focusTarget","values":[]},{"name":"highlighted","values":[]},{"name":"parentMenu","values":[]},{"name":"parentMenuItem","values":[]},{"name":"submenus","values":[]},{"name":"disabled","values":[]},{"name":"hasIcons","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# Ids Menu Component\n\n## Description\n\nThe IdsMenu Component provides the ui for a menu. This includes groups, icons, submenus, text, disabled ect. By itself a menu is not very useful and will just paint on the page as if it was open. Use [IdsMenuButton]('../ids-menu-button/README.md') in order to show a menu on a button click. Or use [IdsPopupMenu]('../ids-popup-menu/README.md') to show a menu on a click or right click anywhere on the page. The construction of a menu is comprised of several related components.\n\n`ids-menu-group` is used to create a group for a set of menu items.\n`ids-menu-header` is used a as a label for groups of menu items\n`ids-menu-item` is the main component normal menu items\n\n## Use Cases\n\n- Display an application menu\n- Display submenus\n- Display a menu with icons\n\n## Terminology\n\n**Group** A label separating items in the menu in a logical group\n**Submenus** A a list of choices that is part of another list of choices\n\n## Attributes and Properties (ids-menu-group)\n\n- `disabled` {boolean} true if the entire menu should become disabled\n- `keep-open` {boolean} true if selection of an item within this group should cause the parent menu to close\n- `selection` {string} The type of selection to set this group between `single` and `multiple` or `none`\n\n## Features (With Code Examples)\n\nA simple menu with three items can be created by creating a `ids-menu` with a single `ids-menu-group` and three `ids-menu-item` components.\n\n```html\n<ids-menu id=\"simple-menu\">\n  <ids-menu-group>\n    <ids-menu-item>One</ids-menu-item>\n    <ids-menu-item>Two</ids-menu-item>\n    <ids-menu-item>Three</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nA menu can have a toggle-able menu item that is indicated with a check that toggles when you turn it on and off. In this example selecting `Two` will mark it checked and unchecked\n\n```html\n<ids-menu id=\"simple-menu\">\n  <ids-menu-group>\n    <ids-menu-item>One</ids-menu-item>\n    <ids-menu-item toggleable>Two</ids-menu-item>\n    <ids-menu-item>Three</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nA more complicated menu can be formed using combinations of  `ids-menu` with a `ids-menu-group` and nested `ids-menu-item` components.\n\n```html\n<ids-menu id=\"complex-menu\">\n  <ids-menu-group id=\"main-settings\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n    <ids-separator></ids-separator>\n    <ids-menu-item value=\"long-no-icons\">Very long, indescribable action with no icons</ids-menu-item>\n    <ids-menu-item icon=\"url\" disabled=\"true\" value=\"big-with-icons\">\n      Another big menu item, but with icons!\n    </ids-menu-item>\n  </ids-menu-group>\n  <ids-separator></ids-separator>\n  <ids-menu-header id=\"additional-actions-header\">Additional Actions</ids-menu-header>\n  <ids-menu-group id=\"more-settings\" aria-describedby=\"additional-actions-header\">\n    <ids-menu-item value=\"more-actions\">\n      More Actions\n    </ids-menu-item>\n    <ids-menu-item icon=\"user\" value=\"even-more-actions\">\n        Even More Actions\n    </ids-menu-item>\n    <ids-menu-item id=\"no-select\" value=\"no-select\">This one can't be selected (Check the console)</ids-menu-item>\n    </ids-menu-group>\n    <ids-separator></ids-separator>\n    <ids-menu-group id=\"other-settings\">\n    <ids-menu-item icon=\"more\" value=\"other-items\">Other Items</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n### Selection Event Handling\n\nWhen an `<ids-menu-item>` element is selected from a menu, it has the potential to fire up to two different events.  The events fired depend on how the menu is configured.  Consider this menu:\n\n```html\n<ids-menu id=\"my-menu\">\n  <ids-menu-group id=\"main-settings\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nIn this example, when any of the menu's items are chosen by click or by keyboard, no selection events are fired.  This is because there is no `select` attribute determining single or multiple selection.  The menu item chosen will not change the menu's selection state, and will simply fire a `pick` event.\n\nThis next example will cause a both a `selected` event and a `pick` event to fire whenever an item is chosen.  No `deselected` events will fire in this case:\n\n```html\n<ids-menu id=\"my-menu\">\n  <ids-menu-group id=\"main-settings\" select=\"single\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nYou can also have `toggleable` menu items where the menu item check can be turned on and off. For example\n\n```html\n<ids-menu>\n  <ids-menu-group select=\"single\">\n    <ids-menu-item icon=\"mail\" toggable value=\"mail\">Keep Active</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\nThis next example will cause a either a `selected` OR `deselected` event, as well as a `pick` event, to fire whenever an item is chosen.  When an item is chosen, its selection state is changed, and the event fired corresponds to its new value:\n\n```html\n<ids-menu id=\"my-menu\">\n  <ids-menu-group id=\"main-settings\" select=\"multiple\">\n    <ids-menu-item icon=\"mail\" value=\"mail\">Mail</ids-menu-item>\n    <ids-menu-item icon=\"filter\" value=\"filter\">Filter</ids-menu-item>\n    <ids-menu-item icon=\"settings\" value=\"settings\">Settings</ids-menu-item>\n  </ids-menu-group>\n</ids-menu>\n```\n\n### Shortcut keys\n\nIdsMenuItem elements can have a `shortcut-keys` attribute defined, which will pass text representing a keyboard shortcut to be displayed into the white space opposite the regular text:\n\n```html\n<ids-menu-item id=\"action-create\" icon=\"folder\" shortcut-keys=\"⌘+R\">Create New Folder</ids-menu-item>\n```\n\n```js\nconst menuItem = document.querySelector('ids-menu-item');\nmenuItem.setAttribute('shortcut-keys', '⌘+R');\n```\n\n## Class Hierarchy Menu Group\n\n- IdsMenuGroup\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Class Hierarchy Menu Header\n\n- IdsMenuHeader\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Class Hierarchy Menu Item\n\n- IdsMenuItem\n  - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsLocaleMixin\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- This component is relatively backwards compatible except inforContextMenu should be replaced with popupmenu in the API call and class name\n- Remove class divider as it is deprecated\n- Checkbox construct is simplified\n- Group replaced with heading\n\n**4.x to 5.x**\n\n- The menu component has been changed to a web component and renamed to `ids-menu`.\n- If using properties/settings these are now attributes.\n- Markup has changed to a custom element `<ids-menu></ids-menu>`\n- If using events events are now plain JS events for example (i.e. menu click events)\n- Can now be imported as a single JS file and used with encapsulated styles\n"}},{"name":"ids-menu-button-attributes","description":{"kind":"markdown","value":"# Ids Menu Button Component\n\n## Description\n\nThe IDS Menu Button component is an extension of the standard [Button component](../ids-button/README.md) that is styled with Infor branding, and allows for being implicitly linked to an [IDS Popup Menu Component](../ids-popup-menu/README.md) that can be used for triggering multiple different actions.\n\n## Use Cases\n\n- Create menu buttons that store multiple different actions\n- Create menu buttons that allow selection of single items within groups\n- Create menu buttons that allow selection of multiple items within groups\n\n## Terminology\n\n**Dropdown Icon** Menu Buttons have a secondary icon (separate from the IDS Button \"icon\" property) that acts as the Popup Menu's Arrow Target.  This icon is normally a standard \"dropdown\" icon, but can be changed if needed.\n\n## Settings (Attributes)\n\n- `disabled` true if the Menu Button should become disabled.  This also makes the attached Popupmenu and all of its sub-elements disabled.\n- `dropdownIcon` sets the type of icon to be used as the dropdown icon.  If null/empty, the dropdown icon is not displayed.  Note that this is different than the standard IDS Button `icon` property, and both can exist at the same time.\n- `formatterWidth` set the width and formatter style for menu button.\n- `menu` can be defined as a CSS selector string, or if using the JS property, can be a direct reference to an IdsPopupMenu component.\n- `value` sets/gets selected menu items by providing list of menu item values\n\n## States and Variations\n\nSince the menu button combined from several IDS Components, you can refer to their documentation for information about states/variants:\n\n- [IdsButton](../ids-button/README.md) for Button-specific states\n- [IdsPopupMenu](../ids-popup-menu/README.md) for Menu-specific states\n\n### Variations\n\n- [\"More Actions\" Button]() is technically a menu button, since it contains additional actions related to the current workflow hidden in a Popup Menu.  This variant displays no dropdown icon, and appears as an Icon Button.\n\n## Features (with code samples)\n\nMost menu buttons are implicitly linked to their Popup Menus using `id` attributes.  The Popup Menu also needs to be told which `target` element to use:\n\n```html\n<ids-menu-button id=\"my-button\" menu=\"my-menu\">\n    <span>My Menu Button</span>\n</ids-menu-button>\n<!-- ... -->\n<ids-popup-menu id=\"my-menu\" target=\"#my-button\">\n    <!-- ... -->\n</ids-popup-menu>\n```\n\nMenu Buttons themselves can have the Dropdown Icon set directly on the markup:\n\n```html\n<ids-menu-button id=\"my-button\" menu=\"my-menu\" dropdown-icon>\n    <span>My Menu Button</span>\n</ids-menu-button>\n```\n\nBoth the regular IdsButton `icon` setting and `dropdown-icon` can be used together:\n\n```html\n<ids-menu-button id=\"my-button\" menu=\"my-menu\" icon=\"settings\" dropdown-icon>\n    <span>My Menu Button</span>\n</ids-menu-button>\n```\n\nThe Dropdown Icon can be customized, if necessary:\n\n```html\n<ids-menu-button id=\"my-button\" menu=\"my-menu\" dropdown-icon=\"launch\">\n    <span>My Menu Button</span>\n</ids-menu-button>\n```\n\nThe button can set as formatter width and style:\n\n```html\n<ids-menu-button id=\"my-button\" menu=\"my-menu\" formatter-width=\"125px\" dropdown-icon>\n    <span>My Menu Button</span>\n</ids-menu-button>\n```\n\n## Keyboard Guidelines\n\n- <kbd>Enter/Return</kbd> When the Button is focused, will cause the menu to toggle open/closed.\n- <kbd>Enter/Return</kbd> When the Popup Menu Items are focused, performs selection/deselection where available.  On items that contain submenus, this will not select/deselect and will instead trigger the submenu.\n\n## Responsive Guidelines\n\n- When the menu is opened, it will intelligently decide which direction to flow.  If there is more space between the top of the button and the top of the viewport (compared to the bottom of the button/viewport), it will open above the button.  In some cases, the menu may open to the left/right of the button.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Menu Button was not a \"standard\" component in 4.x, and needed to be created manually.\n\n**4.x to 5.x**\n- Markup has changed to a custom element `<ids-menu-button></ids-menu-button>`\n- Can now be imported as a single JS file and used with encapsulated styles.\n- Now exists as its own component\n- Implicitly linked to a menu by using `menu=\"my-menu\"` CSS selector attribute, or direct element reference in JS\n"}},{"name":"ids-menu-button","attributes":[{"name":"protoClasses","description":"Figure out the classes","values":[]},{"name":"disabled","description":"Passes a disabled attribute from the custom element to the button","values":[]},{"name":"displaySelectedText","values":[]},{"name":"dropdownIcon","values":[]},{"name":"dropdownIconEl","values":[]},{"name":"menu","values":[]},{"name":"value","description":"Set menu's selected items by value","values":[]},{"name":"menuEl","values":[]},{"name":"formatterWidth","description":"Set the formatter width for menu button","values":[]},{"name":"shouldUpdate","values":[]},{"name":"colorVariants","description":"Inherited from `IdsColorVariantMixin`","values":[]},{"name":"button","values":[]},{"name":"cssClass","values":[]},{"name":"#tabIndex","description":"Passes a tabIndex attribute from the custom element to the button","values":[]},{"name":"icon","description":"Gets the current icon used on the button","values":[]},{"name":"iconEl","description":"Gets the current icon element","values":[]},{"name":"iconAlign","description":"Sets the automatic alignment of an existing icon to the 'start' or 'end' of the text","values":[]},{"name":"width","description":"Set width of button","values":[]},{"name":"text","values":[]},{"name":"appearance","description":"Set the button appearance between 'default', 'primary', 'secondary', 'tertiary', or 'destructive'","values":[]},{"name":"type","description":"Sets the HTMLButtonElement 'type' attribute","values":[]},{"name":"noMargins","description":"Sets the no margins attribute","values":[]},{"name":"noPadding","values":[]},{"name":"square","values":[]}],"description":{"kind":"markdown","value":"# Ids Menu Button Component\n\n## Description\n\nThe IDS Menu Button component is an extension of the standard [Button component](../ids-button/README.md) that is styled with Infor branding, and allows for being implicitly linked to an [IDS Popup Menu Component](../ids-popup-menu/README.md) that can be used for triggering multiple different actions.\n\n## Use Cases\n\n- Create menu buttons that store multiple different actions\n- Create menu buttons that allow selection of single items within groups\n- Create menu buttons that allow selection of multiple items within groups\n\n## Terminology\n\n**Dropdown Icon** Menu Buttons have a secondary icon (separate from the IDS Button \"icon\" property) that acts as the Popup Menu's Arrow Target.  This icon is normally a standard \"dropdown\" icon, but can be changed if needed.\n\n## Settings (Attributes)\n\n- `disabled` true if the Menu Button should become disabled.  This also makes the attached Popupmenu and all of its sub-elements disabled.\n- `dropdownIcon` sets the type of icon to be used as the dropdown icon.  If null/empty, the dropdown icon is not displayed.  Note that this is different than the standard IDS Button `icon` property, and both can exist at the same time.\n- `formatterWidth` set the width and formatter style for menu button.\n- `menu` can be defined as a CSS selector string, or if using the JS property, can be a direct reference to an IdsPopupMenu component.\n- `value` sets/gets selected menu items by providing list of menu item values\n\n## States and Variations\n\nSince the menu button combined from several IDS Components, you can refer to their documentation for information about states/variants:\n\n- [IdsButton](../ids-button/README.md) for Button-specific states\n- [IdsPopupMenu](../ids-popup-menu/README.md) for Menu-specific states\n\n### Variations\n\n- [\"More Actions\" Button]() is technically a menu button, since it contains additional actions related to the current workflow hidden in a Popup Menu.  This variant displays no dropdown icon, and appears as an Icon Button.\n\n## Features (with code samples)\n\nMost menu buttons are implicitly linked to their Popup Menus using `id` attributes.  The Popup Menu also needs to be told which `target` element to use:\n\n```html\n<ids-menu-button id=\"my-button\" menu=\"my-menu\">\n    <span>My Menu Button</span>\n</ids-menu-button>\n<!-- ... -->\n<ids-popup-menu id=\"my-menu\" target=\"#my-button\">\n    <!-- ... -->\n</ids-popup-menu>\n```\n\nMenu Buttons themselves can have the Dropdown Icon set directly on the markup:\n\n```html\n<ids-menu-button id=\"my-button\" menu=\"my-menu\" dropdown-icon>\n    <span>My Menu Button</span>\n</ids-menu-button>\n```\n\nBoth the regular IdsButton `icon` setting and `dropdown-icon` can be used together:\n\n```html\n<ids-menu-button id=\"my-button\" menu=\"my-menu\" icon=\"settings\" dropdown-icon>\n    <span>My Menu Button</span>\n</ids-menu-button>\n```\n\nThe Dropdown Icon can be customized, if necessary:\n\n```html\n<ids-menu-button id=\"my-button\" menu=\"my-menu\" dropdown-icon=\"launch\">\n    <span>My Menu Button</span>\n</ids-menu-button>\n```\n\nThe button can set as formatter width and style:\n\n```html\n<ids-menu-button id=\"my-button\" menu=\"my-menu\" formatter-width=\"125px\" dropdown-icon>\n    <span>My Menu Button</span>\n</ids-menu-button>\n```\n\n## Keyboard Guidelines\n\n- <kbd>Enter/Return</kbd> When the Button is focused, will cause the menu to toggle open/closed.\n- <kbd>Enter/Return</kbd> When the Popup Menu Items are focused, performs selection/deselection where available.  On items that contain submenus, this will not select/deselect and will instead trigger the submenu.\n\n## Responsive Guidelines\n\n- When the menu is opened, it will intelligently decide which direction to flow.  If there is more space between the top of the button and the top of the viewport (compared to the bottom of the button/viewport), it will open above the button.  In some cases, the menu may open to the left/right of the button.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n- Menu Button was not a \"standard\" component in 4.x, and needed to be created manually.\n\n**4.x to 5.x**\n- Markup has changed to a custom element `<ids-menu-button></ids-menu-button>`\n- Can now be imported as a single JS file and used with encapsulated styles.\n- Now exists as its own component\n- Implicitly linked to a menu by using `menu=\"my-menu\"` CSS selector attribute, or direct element reference in JS\n"}},{"name":"ids-message-attributes","description":{"kind":"markdown","value":"# Ids Message\n\nThe IdsMessage Component provides a quick interface for displaying an application message to the user in [Modal]('../ids-modal/README.md'), along with providing quick actions related to the message.\n\n## Use Cases\n\n- Display application information that requires a user's attention\n- Convey a specific status to the user\n- Provide actions that the user can take to address the information\n\n## Terminology\n\n**Status** Indicates whether the message is normal (default), error, warning, success, or informative\n\n## Attributes and Properties\n\n- `status` sets/removes the Status type\n- `message` sets the contents of the message\n\n## Features (With Code Examples)\n\nA basic, barebones message might look like this:\n\n```html\n<ids-message id=\"my-message\">\n    <p>This is my message</p>\n</ids-message>\n```\n\nMessages can have titles and buttons (just the same as [Modals](../ids-modal/README.md)), as well as Statuses.  Statuses and Titles are appended with an attribute on the Message, while Buttons are added by slot.\n\n```html\n<ids-message id=\"my-message\">\n    <ids-text slot=\"title\" font-size=\"24\" type=\"h2\">My Message Title</ids-text>\n    <p>This is my message</p>\n    <ids-modal-button slot=\"buttons\" appearance=\"secondary\">OK</ids-modal-button>\n    <ids-modal-button slot=\"buttons\" appearance=\"primary\" cancel>Cancel</ids-modal-button>\n</ids-message>\n```\n\nYou can manipulate the Message by using its Javascript API\n\n```js\nconst messageEl = document.querySelector('#my-message');\nmessageEl.messageTitle = 'Different Title';\nmessageEl.message = 'Alternate Message';\nmessageEl.status = 'success';\n```\n\nMessages extend [Modals](../ids-modal/README.md), so it's possible to configure them in similar fashion.  You can control Messages manually with the same API:\n\n```js\n// Manually show a Message Component\nconst messageEl = document.querySelector('#my-message');\nmessageEl.show();\n```\n\nYou can also use the Modal's `target` property to activate a Message component by clicking an associated target element, like a button for example:\n\n```html\n<ids-message id=\"my-message\">\n    <ids-text slot=\"title\" font-size=\"24\" type=\"h2\">My Message Title</ids-text>\n    <p>This is my message</p>\n    <ids-modal-button slot=\"buttons\" appearance=\"secondary\">OK</ids-modal-button>\n    <ids-modal-button slot=\"buttons\" appearance=\"primary\" cancel>Cancel</ids-modal-button>\n</ids-message>\n\n<ids-button id=\"trigger-button\" appearance=\"secondary\">\n    <span>Show Message</span>\n    <ids-icon icon=\"launch\"></ids-icon>\n</ids-button>\n```\n\n```js\n// Show a message component when clicking a trigger button\nconst messageEl = document.querySelector('#my-message');\nconst btnEl = document.querySelector('#trigger-button');\nmessageEl.target = btnEl;\n\nbtnEl.click();\n```\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Very similar and compatible with newer versions of 3.X\n- dialogType option deprecated. Instead use either modal or message component\n- shortMessage option now called message because there is only one option buttons works the same\n\n**4.x to 5.x**\n\n- The message component has been changed to a web component and renamed to `ids-message`.\n- If using properties/settings these are now attributes.\n- Markup has changed to a custom element `<ids-message></ids-message>`\n- If using events events are now plain JS events for example\n- Can now be imported as a single JS file and used with encapsulated styles\n- Close X is deprecated as it is redundant with the modal buttons\n- Allowed tags is not needed as you can put your own markup in the light DOM now\n- The Message component now extends the Modal component, containing the same properties and methods.\n- Modal Buttons, Title, Status, and Message can be changed via API\n"}},{"name":"ids-message","attributes":[{"name":"ariaLabelContent","description":"Used for ARIA Labels and other content","values":[]},{"name":"message","values":[]},{"name":"opacity","values":[]},{"name":"status","values":[]},{"name":"shouldUpdate","values":[]},{"name":"onButtonClick","values":[]},{"name":"globalKeydownListener","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"buttons","values":[]},{"name":"fullsize","values":[]},{"name":"overlay","values":[]},{"name":"messageTitle","values":[]},{"name":"#visible","values":[]},{"name":"visible","values":[]},{"name":"#setFocusIfVisible","values":[]}],"description":{"kind":"markdown","value":"# Ids Message\n\nThe IdsMessage Component provides a quick interface for displaying an application message to the user in [Modal]('../ids-modal/README.md'), along with providing quick actions related to the message.\n\n## Use Cases\n\n- Display application information that requires a user's attention\n- Convey a specific status to the user\n- Provide actions that the user can take to address the information\n\n## Terminology\n\n**Status** Indicates whether the message is normal (default), error, warning, success, or informative\n\n## Attributes and Properties\n\n- `status` sets/removes the Status type\n- `message` sets the contents of the message\n\n## Features (With Code Examples)\n\nA basic, barebones message might look like this:\n\n```html\n<ids-message id=\"my-message\">\n    <p>This is my message</p>\n</ids-message>\n```\n\nMessages can have titles and buttons (just the same as [Modals](../ids-modal/README.md)), as well as Statuses.  Statuses and Titles are appended with an attribute on the Message, while Buttons are added by slot.\n\n```html\n<ids-message id=\"my-message\">\n    <ids-text slot=\"title\" font-size=\"24\" type=\"h2\">My Message Title</ids-text>\n    <p>This is my message</p>\n    <ids-modal-button slot=\"buttons\" appearance=\"secondary\">OK</ids-modal-button>\n    <ids-modal-button slot=\"buttons\" appearance=\"primary\" cancel>Cancel</ids-modal-button>\n</ids-message>\n```\n\nYou can manipulate the Message by using its Javascript API\n\n```js\nconst messageEl = document.querySelector('#my-message');\nmessageEl.messageTitle = 'Different Title';\nmessageEl.message = 'Alternate Message';\nmessageEl.status = 'success';\n```\n\nMessages extend [Modals](../ids-modal/README.md), so it's possible to configure them in similar fashion.  You can control Messages manually with the same API:\n\n```js\n// Manually show a Message Component\nconst messageEl = document.querySelector('#my-message');\nmessageEl.show();\n```\n\nYou can also use the Modal's `target` property to activate a Message component by clicking an associated target element, like a button for example:\n\n```html\n<ids-message id=\"my-message\">\n    <ids-text slot=\"title\" font-size=\"24\" type=\"h2\">My Message Title</ids-text>\n    <p>This is my message</p>\n    <ids-modal-button slot=\"buttons\" appearance=\"secondary\">OK</ids-modal-button>\n    <ids-modal-button slot=\"buttons\" appearance=\"primary\" cancel>Cancel</ids-modal-button>\n</ids-message>\n\n<ids-button id=\"trigger-button\" appearance=\"secondary\">\n    <span>Show Message</span>\n    <ids-icon icon=\"launch\"></ids-icon>\n</ids-button>\n```\n\n```js\n// Show a message component when clicking a trigger button\nconst messageEl = document.querySelector('#my-message');\nconst btnEl = document.querySelector('#trigger-button');\nmessageEl.target = btnEl;\n\nbtnEl.click();\n```\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Very similar and compatible with newer versions of 3.X\n- dialogType option deprecated. Instead use either modal or message component\n- shortMessage option now called message because there is only one option buttons works the same\n\n**4.x to 5.x**\n\n- The message component has been changed to a web component and renamed to `ids-message`.\n- If using properties/settings these are now attributes.\n- Markup has changed to a custom element `<ids-message></ids-message>`\n- If using events events are now plain JS events for example\n- Can now be imported as a single JS file and used with encapsulated styles\n- Close X is deprecated as it is redundant with the modal buttons\n- Allowed tags is not needed as you can put your own markup in the light DOM now\n- The Message component now extends the Modal component, containing the same properties and methods.\n- Modal Buttons, Title, Status, and Message can be changed via API\n"}},{"name":"ids-modal-z-counter","description":{"kind":"markdown","value":"# Ids Modal Component\n\nThe Modal Component provides an interface for displaying information, forms, and other content over top of other content on the page.\n\nThe IDS Modal Component builds on top of the [Ids Popup](../ids-popup/README.md).\n\n## Use Cases\n\n- Display messages to the user regarding errors, alerts, or other info\n- Display small forms that may apply to the next step in a workflow, like inputs/buttons/dropdowns/etc.\n\n## Terminology\n\n**Overlay** The transparent background that exists between the Modal and the page content.  Its opacity can be adjusted.\n**Target** Refers to the element that will \"trigger\" the Modal by click.  This element is optional, as Modals can exist and be triggered by other operations.\n\n## Settings (Attributes)\n\n- `fullsize` used for defining what breakpoint (if any) should cause the modal to transform into fullsize mode, which takes up 100% width/height of the browser viewport.  Can also be set to `''` (no change) or `always` (always at 100%)\n- `visible` can be used to make the Modal show or hide\n- `buttons` (readonly) contains a list of references to any Modal Buttons present\n- `messageTitle` The text present at the very top of the Modal to indicate its purpose\n\n## Themeable Parts\n\n- `modal` allows you to further style or adjust the outer popup element\n- `overlay` allows you to adjust the overlay style\n\n## Features (With Code Examples)\n\nTo generate a standalone Modal component, simply add an `ids-modal` tag to the page with some content in its default slot.\n\n```html\n<ids-modal id=\"my-modal\">\n    <p>This is a simple Modal component</p>\n</ids-modal>\n```\n\nThis modal can be controlled with Javascript\n\n```js\nconst modal = document.querySelector('#my-modal');\nmodal.show();\n// ...Modal is displayed\n\nmodal.hide();\n// ...Modal is hidden\n```\n\n### Using a target\n\nOther elements on the page, such as an [Ids Button](../ids-button/README.md) can be used as a triggering element.  In this case, a click event is bound to the defined trigger element that will activate the modal.\n\n```html\n<ids-modal id=\"my-modal\">\n    <p>This is a simple Modal component</p>\n</ids-modal>\n\n<ids-button id=\"trigger-button\" appearance=\"secondary\">\n    <span>Trigger Modal</span>\n    <ids-icon icon=\"launch\"></ids-icon>\n</ids-button>\n```\n\n```js\nconst modal = document.querySelector('#my-modal');\nconst btn = document.querySelector('#trigger-button');\nmodal.target = btn;\n\nbtn.click();\n// ...Modal is triggered by its target element\n```\n### Adding a Message Title and Buttons\n\nIt's possible to append a Message Title to add more context, and Buttons to create multiple actions that can be triggered from the Modal.  To do so, take advantage of the Modal's slots:\n\n- The \"title\" slot, which can be populated by an [IdsText](../ids-text/README.md) or other text element, and will be located at the top of the Modal.\n- The \"buttons\" slot, which can be filled with one or multiple [IdsModalButtons](../ids-modal-button/README.md), and will be located at the bottom of the Modal.\n\n```html\n<ids-modal id=\"my-modal\">\n    <ids-text slot=\"title\" font-size=\"24\" type=\"h2\">This is the Title</ids-text>\n    <p>This is a simple Modal component</p>\n    <ids-modal-button slot=\"buttons\" id=\"ok\" appearance=\"primary\">OK</ids-modal-button>\n    <ids-modal-button slot=\"buttons\" id=\"cancel\" appearance=\"secondary\" cancel>Cancel</ids-modal-button>\n</ids-modal>\n```\n\n### Displaying in fullsize mode\n\nIdsModal can alter its display mode to take up 100% of the browser viewport's width/height by using the `fullsize` attribute:\n\n```html\n<ids-modal id=\"my-modal\" fullsize=\"lg\">\n    <ids-text slot=\"title\" font-size=\"24\" type=\"h2\">Fullsize Modal</ids-text>\n    <p>This modal will transform when below the `lg` breakpoint</p>\n    <ids-modal-button slot=\"buttons\" id=\"ok\" appearance=\"primary\">OK</ids-modal-button>\n    <ids-modal-button slot=\"buttons\" id=\"cancel\" appearance=\"secondary\" cancel>Cancel</ids-modal-button>\n</ids-modal>\n```\n\nThe fullsize attribute can be defined with an IDS Breakpoint, as defined in the [IdsBreakpointMixin](../../mixins/ids-breakpoint-mixin/README.md).  Alternatively, this setting can be changed to `null` or `''` resulting in no fullscreen mode, or `'always'` which forces the fullscreen mode to be displayed indefinitely.\n\nBy default, the fullsize setting on all modals is set to Small (sm) and will break when the viewport width is below 600px.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Modal was added in v4.0.0\n- Replace `.inforDialog()` with `.modal()`\n\n**4.x to 5.x**\n\n- Modal is now a custom element `<ids-modal></ids-modal>`\n- Modal content is now user-defined by slot\n- Triggering element for the modal is now configurable with the `target` prop\n- Events are now just plain JS events\n"}},{"name":"ids-modal","attributes":[{"name":"shouldUpdate","values":[]},{"name":"onButtonClick","values":[]},{"name":"globalKeydownListener","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"ariaLabelContent","description":"Used for ARIA Labels and other content","values":[]},{"name":"buttons","values":[]},{"name":"fullsize","values":[]},{"name":"overlay","values":[]},{"name":"messageTitle","values":[]},{"name":"#visible","values":[]},{"name":"visible","values":[]},{"name":"#setFocusIfVisible","values":[]}],"description":{"kind":"markdown","value":"# Ids Modal Component\n\nThe Modal Component provides an interface for displaying information, forms, and other content over top of other content on the page.\n\nThe IDS Modal Component builds on top of the [Ids Popup](../ids-popup/README.md).\n\n## Use Cases\n\n- Display messages to the user regarding errors, alerts, or other info\n- Display small forms that may apply to the next step in a workflow, like inputs/buttons/dropdowns/etc.\n\n## Terminology\n\n**Overlay** The transparent background that exists between the Modal and the page content.  Its opacity can be adjusted.\n**Target** Refers to the element that will \"trigger\" the Modal by click.  This element is optional, as Modals can exist and be triggered by other operations.\n\n## Settings (Attributes)\n\n- `fullsize` used for defining what breakpoint (if any) should cause the modal to transform into fullsize mode, which takes up 100% width/height of the browser viewport.  Can also be set to `''` (no change) or `always` (always at 100%)\n- `visible` can be used to make the Modal show or hide\n- `buttons` (readonly) contains a list of references to any Modal Buttons present\n- `messageTitle` The text present at the very top of the Modal to indicate its purpose\n\n## Themeable Parts\n\n- `modal` allows you to further style or adjust the outer popup element\n- `overlay` allows you to adjust the overlay style\n\n## Features (With Code Examples)\n\nTo generate a standalone Modal component, simply add an `ids-modal` tag to the page with some content in its default slot.\n\n```html\n<ids-modal id=\"my-modal\">\n    <p>This is a simple Modal component</p>\n</ids-modal>\n```\n\nThis modal can be controlled with Javascript\n\n```js\nconst modal = document.querySelector('#my-modal');\nmodal.show();\n// ...Modal is displayed\n\nmodal.hide();\n// ...Modal is hidden\n```\n\n### Using a target\n\nOther elements on the page, such as an [Ids Button](../ids-button/README.md) can be used as a triggering element.  In this case, a click event is bound to the defined trigger element that will activate the modal.\n\n```html\n<ids-modal id=\"my-modal\">\n    <p>This is a simple Modal component</p>\n</ids-modal>\n\n<ids-button id=\"trigger-button\" appearance=\"secondary\">\n    <span>Trigger Modal</span>\n    <ids-icon icon=\"launch\"></ids-icon>\n</ids-button>\n```\n\n```js\nconst modal = document.querySelector('#my-modal');\nconst btn = document.querySelector('#trigger-button');\nmodal.target = btn;\n\nbtn.click();\n// ...Modal is triggered by its target element\n```\n### Adding a Message Title and Buttons\n\nIt's possible to append a Message Title to add more context, and Buttons to create multiple actions that can be triggered from the Modal.  To do so, take advantage of the Modal's slots:\n\n- The \"title\" slot, which can be populated by an [IdsText](../ids-text/README.md) or other text element, and will be located at the top of the Modal.\n- The \"buttons\" slot, which can be filled with one or multiple [IdsModalButtons](../ids-modal-button/README.md), and will be located at the bottom of the Modal.\n\n```html\n<ids-modal id=\"my-modal\">\n    <ids-text slot=\"title\" font-size=\"24\" type=\"h2\">This is the Title</ids-text>\n    <p>This is a simple Modal component</p>\n    <ids-modal-button slot=\"buttons\" id=\"ok\" appearance=\"primary\">OK</ids-modal-button>\n    <ids-modal-button slot=\"buttons\" id=\"cancel\" appearance=\"secondary\" cancel>Cancel</ids-modal-button>\n</ids-modal>\n```\n\n### Displaying in fullsize mode\n\nIdsModal can alter its display mode to take up 100% of the browser viewport's width/height by using the `fullsize` attribute:\n\n```html\n<ids-modal id=\"my-modal\" fullsize=\"lg\">\n    <ids-text slot=\"title\" font-size=\"24\" type=\"h2\">Fullsize Modal</ids-text>\n    <p>This modal will transform when below the `lg` breakpoint</p>\n    <ids-modal-button slot=\"buttons\" id=\"ok\" appearance=\"primary\">OK</ids-modal-button>\n    <ids-modal-button slot=\"buttons\" id=\"cancel\" appearance=\"secondary\" cancel>Cancel</ids-modal-button>\n</ids-modal>\n```\n\nThe fullsize attribute can be defined with an IDS Breakpoint, as defined in the [IdsBreakpointMixin](../../mixins/ids-breakpoint-mixin/README.md).  Alternatively, this setting can be changed to `null` or `''` resulting in no fullscreen mode, or `'always'` which forces the fullscreen mode to be displayed indefinitely.\n\nBy default, the fullsize setting on all modals is set to Small (sm) and will break when the viewport width is below 600px.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Modal was added in v4.0.0\n- Replace `.inforDialog()` with `.modal()`\n\n**4.x to 5.x**\n\n- Modal is now a custom element `<ids-modal></ids-modal>`\n- Modal content is now user-defined by slot\n- Triggering element for the modal is now configurable with the `target` prop\n- Events are now just plain JS events\n"}},{"name":"ids-overlay","attributes":[{"name":"visible","values":[]},{"name":"opacity","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# Ids Modal Component\n\nThe Modal Component provides an interface for displaying information, forms, and other content over top of other content on the page.\n\nThe IDS Modal Component builds on top of the [Ids Popup](../ids-popup/README.md).\n\n## Use Cases\n\n- Display messages to the user regarding errors, alerts, or other info\n- Display small forms that may apply to the next step in a workflow, like inputs/buttons/dropdowns/etc.\n\n## Terminology\n\n**Overlay** The transparent background that exists between the Modal and the page content.  Its opacity can be adjusted.\n**Target** Refers to the element that will \"trigger\" the Modal by click.  This element is optional, as Modals can exist and be triggered by other operations.\n\n## Settings (Attributes)\n\n- `fullsize` used for defining what breakpoint (if any) should cause the modal to transform into fullsize mode, which takes up 100% width/height of the browser viewport.  Can also be set to `''` (no change) or `always` (always at 100%)\n- `visible` can be used to make the Modal show or hide\n- `buttons` (readonly) contains a list of references to any Modal Buttons present\n- `messageTitle` The text present at the very top of the Modal to indicate its purpose\n\n## Themeable Parts\n\n- `modal` allows you to further style or adjust the outer popup element\n- `overlay` allows you to adjust the overlay style\n\n## Features (With Code Examples)\n\nTo generate a standalone Modal component, simply add an `ids-modal` tag to the page with some content in its default slot.\n\n```html\n<ids-modal id=\"my-modal\">\n    <p>This is a simple Modal component</p>\n</ids-modal>\n```\n\nThis modal can be controlled with Javascript\n\n```js\nconst modal = document.querySelector('#my-modal');\nmodal.show();\n// ...Modal is displayed\n\nmodal.hide();\n// ...Modal is hidden\n```\n\n### Using a target\n\nOther elements on the page, such as an [Ids Button](../ids-button/README.md) can be used as a triggering element.  In this case, a click event is bound to the defined trigger element that will activate the modal.\n\n```html\n<ids-modal id=\"my-modal\">\n    <p>This is a simple Modal component</p>\n</ids-modal>\n\n<ids-button id=\"trigger-button\" appearance=\"secondary\">\n    <span>Trigger Modal</span>\n    <ids-icon icon=\"launch\"></ids-icon>\n</ids-button>\n```\n\n```js\nconst modal = document.querySelector('#my-modal');\nconst btn = document.querySelector('#trigger-button');\nmodal.target = btn;\n\nbtn.click();\n// ...Modal is triggered by its target element\n```\n### Adding a Message Title and Buttons\n\nIt's possible to append a Message Title to add more context, and Buttons to create multiple actions that can be triggered from the Modal.  To do so, take advantage of the Modal's slots:\n\n- The \"title\" slot, which can be populated by an [IdsText](../ids-text/README.md) or other text element, and will be located at the top of the Modal.\n- The \"buttons\" slot, which can be filled with one or multiple [IdsModalButtons](../ids-modal-button/README.md), and will be located at the bottom of the Modal.\n\n```html\n<ids-modal id=\"my-modal\">\n    <ids-text slot=\"title\" font-size=\"24\" type=\"h2\">This is the Title</ids-text>\n    <p>This is a simple Modal component</p>\n    <ids-modal-button slot=\"buttons\" id=\"ok\" appearance=\"primary\">OK</ids-modal-button>\n    <ids-modal-button slot=\"buttons\" id=\"cancel\" appearance=\"secondary\" cancel>Cancel</ids-modal-button>\n</ids-modal>\n```\n\n### Displaying in fullsize mode\n\nIdsModal can alter its display mode to take up 100% of the browser viewport's width/height by using the `fullsize` attribute:\n\n```html\n<ids-modal id=\"my-modal\" fullsize=\"lg\">\n    <ids-text slot=\"title\" font-size=\"24\" type=\"h2\">Fullsize Modal</ids-text>\n    <p>This modal will transform when below the `lg` breakpoint</p>\n    <ids-modal-button slot=\"buttons\" id=\"ok\" appearance=\"primary\">OK</ids-modal-button>\n    <ids-modal-button slot=\"buttons\" id=\"cancel\" appearance=\"secondary\" cancel>Cancel</ids-modal-button>\n</ids-modal>\n```\n\nThe fullsize attribute can be defined with an IDS Breakpoint, as defined in the [IdsBreakpointMixin](../../mixins/ids-breakpoint-mixin/README.md).  Alternatively, this setting can be changed to `null` or `''` resulting in no fullscreen mode, or `'always'` which forces the fullscreen mode to be displayed indefinitely.\n\nBy default, the fullsize setting on all modals is set to Small (sm) and will break when the viewport width is below 600px.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Modal was added in v4.0.0\n- Replace `.inforDialog()` with `.modal()`\n\n**4.x to 5.x**\n\n- Modal is now a custom element `<ids-modal></ids-modal>`\n- Modal content is now user-defined by slot\n- Triggering element for the modal is now configurable with the `target` prop\n- Events are now just plain JS events\n"}},{"name":"ids-modal-button","attributes":[{"name":"protoClasses","description":"Figure out the classes","values":[]},{"name":"cancel","values":[]},{"name":"shouldUpdate","values":[]},{"name":"colorVariants","description":"Inherited from `IdsColorVariantMixin`","values":[]},{"name":"button","values":[]},{"name":"cssClass","values":[]},{"name":"disabled","description":"Passes a disabled attribute from the custom element to the button","values":[]},{"name":"#tabIndex","description":"Passes a tabIndex attribute from the custom element to the button","values":[]},{"name":"icon","description":"Gets the current icon used on the button","values":[]},{"name":"iconEl","description":"Gets the current icon element","values":[]},{"name":"iconAlign","description":"Sets the automatic alignment of an existing icon to the 'start' or 'end' of the text","values":[]},{"name":"width","description":"Set width of button","values":[]},{"name":"text","values":[]},{"name":"appearance","description":"Set the button appearance between 'default', 'primary', 'secondary', 'tertiary', or 'destructive'","values":[]},{"name":"type","description":"Sets the HTMLButtonElement 'type' attribute","values":[]},{"name":"noMargins","description":"Sets the no margins attribute","values":[]},{"name":"noPadding","values":[]},{"name":"square","values":[]}],"description":{"kind":"markdown","value":"# Ids Modal Button Component\n\n## Description\n\nThe IdsModalButton Component is an extension of the regular [IdsButton Component](../ids-button/README.md) that displays the button in a larger style that fits within [IdsModal Components](../ids-modal/README.md).\n\n## Use Cases\n\n- Create buttons for use within Modal-type components\n\n## States/Attributes\n\n`cancel` a special flag that can be applied to Modal Buttons to more easily identify them as being associated with a \"cancelling\" action.\n\n## Features (With Code Examples)\n\nModal Buttons extend regular buttons and are constructed with similar markup.\n\n```html\n<ids-modal-button id=\"button-ok\" appearance=\"primary\">\n    <ids-text>OK</ids-text>\n</ids-modal-button>\n<ids-modal-button id=\"button-ok\" appearance=\"secondary\" cancel>\n    <ids-text>Cancel</ids-text>\n</ids-modal-button>\n```\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\nModal Buttons in 4.x were defined with only CSS classes\n\n**4.x to 5.x**\n\n- Modal Buttons are now standalone custom elements `<ids-modal-button></ids-modal-button>`\n"}},{"name":"ids-month-view-attribute-mixin","attributes":[{"name":"#disableSettings","values":[]},{"name":"#currentLegend","values":[]},{"name":"#rangeSettings","values":[]},{"name":"disableSettings","description":"Set disable settings","values":[]},{"name":"legend","description":"Set array of legend items to month view component\nValidation of data is provided by the month view component","values":[]},{"name":"rangeSettings","description":"Set range selection settings","values":[]},{"name":"useRange","description":"Set whether or not the component should be a range picker","values":[]}],"description":{"kind":"markdown","value":"# Ids Month View Component\n\n## Description\nThe `ids-month-view` component is a web component that provides calendar view with navigation\n\n## Use Cases\n- Display one month full size or compact view calendar\n- Display a day range more than one month\n\n## Settings (Attributes)\n- `month` `{string|number|null}` - Specifies a month to show from 0 to 11 range. 0 is January, 11 is December. Defaults to current date month if no specified or out of the range\n- `day` `{string|number|null}` - Specifies a day to initially set as active. Defaults to current date day if no specified or the day value is bigger than the month days\n- `year` `{string|number|null}` - Specifies a year to show. Defaults to current date year if no specified\n- `activeDate` - `{Date}` - Read only property to get selected day in a date format\n- `start-date` `{string|null}` - Specifies start of the range as a string date format.\nExamples of the format:\n  - Tue Nov 16 2021\n  - 2021-11-10T22:00:00.000Z\n  - 11/17/2021\n- `end-date` `{string|null}` - Specifies end of the range as a string date format.\nIf both start and end dates are set calendar toolbar will not be displayed.\n- `first-day-of-week` `{string|number|null}` - Specifies first day of the week from 0 to 6 range. 0 is Sunday, 1 is Monday. Defaults to 0 if no specified or out of the range\n- `show-today` `{true|false}` - Specifies whether or not to show the today button in the toolbar\n- `compact` `{true|false}` - Specifies whether or not the component should be compact view\n- `is-date-picker` `{true|false}` - Specifies whether or not the component is used in a date picker component popup\n- `legend` - Set array of legend items:\n  - `name` `{string}` - The name of the legend (required)\n  - `color` `{string}` - The color of the legend, either hex or IDS variable excluding `--ids-color-` part i.e. `emerald-60` (required)\n  - `dates` `{Array}` - Array of dates (either dates or dayOfWeek is required)\n  - `dayOfWeek` `{Array}` - Array of days of week where 0 is Sunday (either dates or dayOfWeek is required)\n- `disable` `{Object}` - Disable dates settings:\n  - `dates` `{Array}` - Disable specific dates (in a format that can be converted to a date)\n  - `years` `{Array}` - Disable specific years\n  - `minDate` `{string}` - Disable up to a minimum date\n  - `maxDate` `{string}` - Disable up to a maximum date\n  - `dayOfWeek` `{Array}` - Disable a specific of days of the week 0-6\n  - `isEnable` `{boolean}` - Enables the disabled dates. Default is false\n- `show-picklist-year` `{true|false}` Whether or not to show a list of years in the toolbar datepicker picklist, default if true\n- `show-picklist-month` `{true|false}` Whether or not to show a list of months in the toolbar datepicker picklist, default is true\n- `show-picklist-week` `{true|false}` Whether or not to show week numbers in the toolbar datepicker picklist\n\n## Settings (Properties)\n- `eventsData` `{Array<CalendarEventData>}` - Array of calendar event data to populate the month view\n- `eventTypesData` `{Array<CalendarEventTypeData>}` - Array of calendar event types used to categorize calendar events\n\n## Events\n- `dayselected` - Fires when a day is selected\n- `beforeeventrendered` Fires for each event rendered (full day or in day) before the element is added to the DOM\n- `aftereventrendered` Fires for each event rendered (full day or in day) after the element is added to the DOM\n\n## Methods\n- `isDisabledByDate(date: Date): boolean` - Defines if a date is in disabled settings\n\n## Keyboard Guidelines\n- <kbd>Tab</kbd> - Tabbing will tab across the header elements and into the monthview.\n- <kbd>Shift + Tab</kbd> reverses the direction of the tab order.\n- <kbd>Up</kbd> and <kbd>Down</kbd> goes to the same day of the week in the previous or next week respectively. If the user advances past the end of the month they continue into the next or previous month as appropriate\n- <kbd>Left</kbd> and <kbd>Right</kbd> advances one day to the next, also in a continuum. Visually, focus is moved from day to day and wraps from row to row in a grid of days and weeks\n- <kbd>Control + Page Up</kbd> moves to the same date in the previous year\n- <kbd>Control + Page Down</kbd> moves to the same date in the next year\n- <kbd>Home</kbd> moves to the first day of the current month\n- <kbd>End</kbd> moves to the last day of the current month\n- <kbd>Page Up</kbd> moves to the same date in the previous month\n- <kbd>Page Down</kbd> moves to the same date in the next month\n- <kbd>T</kbd> moves to today's date\n\n## Features (With Code Examples)\nWith no settings. Month/Day/Year defaults to current date. First day of the week is 0 - Sunday.\n\n```html\n<ids-month-view></ids-month-view>\n```\n\nSpecified date. First day of the week is 1 - Monday. Showing Today button in the toolbar.\n\n```html\n<ids-month-view\n  show-today=\"true\"\n  month=\"10\"\n  year=\"2021\"\n  day=\"15\"\n  first-day-of-week=\"1\"\n></ids-month-view>\n```\n\nSpecified date range. Showing more than one month of days. Calendar toolbar is hidden\n\n```html\n<ids-month-view\n  start-date=\"07/14/2021\"\n  end-date=\"02/03/2022\"\n></ids-month-view>\n```\n\nThe component can be controlled dynamically\n\n```js\nconst monthView = document.querySelector('ids-month-view');\n\n// Changing month (March)\nmonthView.month = 2;\n\n// Changing day\nmonthView.day = 4;\n\n// Changing year\nmonthView.year = 2016;\n\n// Changing first day of the week (Monday)\nmonthView.firstDayOfWeek = 1;\n\n// Make it compact\nmonthView.compact = true;\n\n// Showing date range\nmonthView.startDate = '07/14/2021';\nmonthView.endDate = '02/02/2022';\n\n// Set legend\nmonthView.legend = [\n  {\n    name: 'Public Holiday',\n    color: 'emerald-60',\n    dates: ['12/31/2021', '12/24/2021', '1/1/2022'],\n  },\n  { name: 'Weekends', color: 'amber-60', dayOfWeek: [0, 6] },\n  {\n    name: 'Other',\n    color: 'ruby-30',\n    dates: ['1/8/2022', '1/9/2022', '1/23/2022'],\n  },\n  {\n    name: 'Half Days',\n    color: 'amethyst-60',\n    dates: ['1/21/2022', '1/22/2022'],\n  },\n  {\n    name: 'Full Days',\n    color: '#1677ee',\n    dates: ['1/24/2022', '1/25/2022'],\n  }\n];\n\n// Unset legend\nmonthView.legend = null;\n\n// Add disabled dates\nmonthView.disableSettings = {\n  dates: ['2/7/2018', '2/9/2018', '2/10/2018', '2/11/2018'],\n  dayOfWeek: [0, 6],\n  minDate: '2/6/2018',\n  maxDate: '2/12/2018',\n  years: [2017, 2018],\n  isEnable: true\n}\n```\n\n## Accessibility\n\nThe monthview is a very complex component to code for accessibility. We take the following approach:\n\n- Add an `aria-label` to the calendar element\n- Add `aria-selected=true` to selected day\n- Each calendar item should have an audible label to announce the day of week while arrowing through days\n- For comparison, see a similar <a href=\"http://oaa-accessibility.org/example/15/\" target=\"_blank\">example</a>\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- This is a new component for 4.x\n\n**4.x to 5.x**\n\n- MonthView is now a custom element `<ids-month-view></ids-month-view>`\n- Events are now just plain JS events\n- Some options and events are not converted yet\n- To set range of dates now there are `start-date` and `end-date` attributes instead of `displayRange` setting\n"}},{"name":"ids-month-view-common","description":{"kind":"markdown","value":"# Ids Month View Component\n\n## Description\nThe `ids-month-view` component is a web component that provides calendar view with navigation\n\n## Use Cases\n- Display one month full size or compact view calendar\n- Display a day range more than one month\n\n## Settings (Attributes)\n- `month` `{string|number|null}` - Specifies a month to show from 0 to 11 range. 0 is January, 11 is December. Defaults to current date month if no specified or out of the range\n- `day` `{string|number|null}` - Specifies a day to initially set as active. Defaults to current date day if no specified or the day value is bigger than the month days\n- `year` `{string|number|null}` - Specifies a year to show. Defaults to current date year if no specified\n- `activeDate` - `{Date}` - Read only property to get selected day in a date format\n- `start-date` `{string|null}` - Specifies start of the range as a string date format.\nExamples of the format:\n  - Tue Nov 16 2021\n  - 2021-11-10T22:00:00.000Z\n  - 11/17/2021\n- `end-date` `{string|null}` - Specifies end of the range as a string date format.\nIf both start and end dates are set calendar toolbar will not be displayed.\n- `first-day-of-week` `{string|number|null}` - Specifies first day of the week from 0 to 6 range. 0 is Sunday, 1 is Monday. Defaults to 0 if no specified or out of the range\n- `show-today` `{true|false}` - Specifies whether or not to show the today button in the toolbar\n- `compact` `{true|false}` - Specifies whether or not the component should be compact view\n- `is-date-picker` `{true|false}` - Specifies whether or not the component is used in a date picker component popup\n- `legend` - Set array of legend items:\n  - `name` `{string}` - The name of the legend (required)\n  - `color` `{string}` - The color of the legend, either hex or IDS variable excluding `--ids-color-` part i.e. `emerald-60` (required)\n  - `dates` `{Array}` - Array of dates (either dates or dayOfWeek is required)\n  - `dayOfWeek` `{Array}` - Array of days of week where 0 is Sunday (either dates or dayOfWeek is required)\n- `disable` `{Object}` - Disable dates settings:\n  - `dates` `{Array}` - Disable specific dates (in a format that can be converted to a date)\n  - `years` `{Array}` - Disable specific years\n  - `minDate` `{string}` - Disable up to a minimum date\n  - `maxDate` `{string}` - Disable up to a maximum date\n  - `dayOfWeek` `{Array}` - Disable a specific of days of the week 0-6\n  - `isEnable` `{boolean}` - Enables the disabled dates. Default is false\n- `show-picklist-year` `{true|false}` Whether or not to show a list of years in the toolbar datepicker picklist, default if true\n- `show-picklist-month` `{true|false}` Whether or not to show a list of months in the toolbar datepicker picklist, default is true\n- `show-picklist-week` `{true|false}` Whether or not to show week numbers in the toolbar datepicker picklist\n\n## Settings (Properties)\n- `eventsData` `{Array<CalendarEventData>}` - Array of calendar event data to populate the month view\n- `eventTypesData` `{Array<CalendarEventTypeData>}` - Array of calendar event types used to categorize calendar events\n\n## Events\n- `dayselected` - Fires when a day is selected\n- `beforeeventrendered` Fires for each event rendered (full day or in day) before the element is added to the DOM\n- `aftereventrendered` Fires for each event rendered (full day or in day) after the element is added to the DOM\n\n## Methods\n- `isDisabledByDate(date: Date): boolean` - Defines if a date is in disabled settings\n\n## Keyboard Guidelines\n- <kbd>Tab</kbd> - Tabbing will tab across the header elements and into the monthview.\n- <kbd>Shift + Tab</kbd> reverses the direction of the tab order.\n- <kbd>Up</kbd> and <kbd>Down</kbd> goes to the same day of the week in the previous or next week respectively. If the user advances past the end of the month they continue into the next or previous month as appropriate\n- <kbd>Left</kbd> and <kbd>Right</kbd> advances one day to the next, also in a continuum. Visually, focus is moved from day to day and wraps from row to row in a grid of days and weeks\n- <kbd>Control + Page Up</kbd> moves to the same date in the previous year\n- <kbd>Control + Page Down</kbd> moves to the same date in the next year\n- <kbd>Home</kbd> moves to the first day of the current month\n- <kbd>End</kbd> moves to the last day of the current month\n- <kbd>Page Up</kbd> moves to the same date in the previous month\n- <kbd>Page Down</kbd> moves to the same date in the next month\n- <kbd>T</kbd> moves to today's date\n\n## Features (With Code Examples)\nWith no settings. Month/Day/Year defaults to current date. First day of the week is 0 - Sunday.\n\n```html\n<ids-month-view></ids-month-view>\n```\n\nSpecified date. First day of the week is 1 - Monday. Showing Today button in the toolbar.\n\n```html\n<ids-month-view\n  show-today=\"true\"\n  month=\"10\"\n  year=\"2021\"\n  day=\"15\"\n  first-day-of-week=\"1\"\n></ids-month-view>\n```\n\nSpecified date range. Showing more than one month of days. Calendar toolbar is hidden\n\n```html\n<ids-month-view\n  start-date=\"07/14/2021\"\n  end-date=\"02/03/2022\"\n></ids-month-view>\n```\n\nThe component can be controlled dynamically\n\n```js\nconst monthView = document.querySelector('ids-month-view');\n\n// Changing month (March)\nmonthView.month = 2;\n\n// Changing day\nmonthView.day = 4;\n\n// Changing year\nmonthView.year = 2016;\n\n// Changing first day of the week (Monday)\nmonthView.firstDayOfWeek = 1;\n\n// Make it compact\nmonthView.compact = true;\n\n// Showing date range\nmonthView.startDate = '07/14/2021';\nmonthView.endDate = '02/02/2022';\n\n// Set legend\nmonthView.legend = [\n  {\n    name: 'Public Holiday',\n    color: 'emerald-60',\n    dates: ['12/31/2021', '12/24/2021', '1/1/2022'],\n  },\n  { name: 'Weekends', color: 'amber-60', dayOfWeek: [0, 6] },\n  {\n    name: 'Other',\n    color: 'ruby-30',\n    dates: ['1/8/2022', '1/9/2022', '1/23/2022'],\n  },\n  {\n    name: 'Half Days',\n    color: 'amethyst-60',\n    dates: ['1/21/2022', '1/22/2022'],\n  },\n  {\n    name: 'Full Days',\n    color: '#1677ee',\n    dates: ['1/24/2022', '1/25/2022'],\n  }\n];\n\n// Unset legend\nmonthView.legend = null;\n\n// Add disabled dates\nmonthView.disableSettings = {\n  dates: ['2/7/2018', '2/9/2018', '2/10/2018', '2/11/2018'],\n  dayOfWeek: [0, 6],\n  minDate: '2/6/2018',\n  maxDate: '2/12/2018',\n  years: [2017, 2018],\n  isEnable: true\n}\n```\n\n## Accessibility\n\nThe monthview is a very complex component to code for accessibility. We take the following approach:\n\n- Add an `aria-label` to the calendar element\n- Add `aria-selected=true` to selected day\n- Each calendar item should have an audible label to announce the day of week while arrowing through days\n- For comparison, see a similar <a href=\"http://oaa-accessibility.org/example/15/\" target=\"_blank\">example</a>\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- This is a new component for 4.x\n\n**4.x to 5.x**\n\n- MonthView is now a custom element `<ids-month-view></ids-month-view>`\n- Events are now just plain JS events\n- Some options and events are not converted yet\n- To set range of dates now there are `start-date` and `end-date` attributes instead of `displayRange` setting\n"}},{"name":"ids-month-view","attributes":[{"name":"#isCustom","values":[]},{"name":"onLanguageChange","values":[]},{"name":"onLocaleChange","values":[]},{"name":"startDate","description":"Set start of the range to show","values":[]},{"name":"endDate","description":"Set end of the range to show","values":[]},{"name":"compact","description":"Set whether or not the component should be compact view","values":[]},{"name":"showWeekNumbers","values":[]},{"name":"isDatePicker","description":"Set whether or not the component is used in datepicker popup","values":[]},{"name":"showPicklistYear","description":"Whether or not to show a list of years in the toolbar datepicker picklist","values":[]},{"name":"showPicklistMonth","description":"Whether or not to show a list of months in the toolbar datepicker picklist","values":[]},{"name":"showPicklistWeek","description":"Whether or not to show week numbers in the toolbar datepicker picklist","values":[]},{"name":"onDayRender","description":"Function that fires as the day cell is rendered.","values":[]}],"description":{"kind":"markdown","value":"# Ids Month View Component\n\n## Description\nThe `ids-month-view` component is a web component that provides calendar view with navigation\n\n## Use Cases\n- Display one month full size or compact view calendar\n- Display a day range more than one month\n\n## Settings (Attributes)\n- `month` `{string|number|null}` - Specifies a month to show from 0 to 11 range. 0 is January, 11 is December. Defaults to current date month if no specified or out of the range\n- `day` `{string|number|null}` - Specifies a day to initially set as active. Defaults to current date day if no specified or the day value is bigger than the month days\n- `year` `{string|number|null}` - Specifies a year to show. Defaults to current date year if no specified\n- `activeDate` - `{Date}` - Read only property to get selected day in a date format\n- `start-date` `{string|null}` - Specifies start of the range as a string date format.\nExamples of the format:\n  - Tue Nov 16 2021\n  - 2021-11-10T22:00:00.000Z\n  - 11/17/2021\n- `end-date` `{string|null}` - Specifies end of the range as a string date format.\nIf both start and end dates are set calendar toolbar will not be displayed.\n- `first-day-of-week` `{string|number|null}` - Specifies first day of the week from 0 to 6 range. 0 is Sunday, 1 is Monday. Defaults to 0 if no specified or out of the range\n- `show-today` `{true|false}` - Specifies whether or not to show the today button in the toolbar\n- `compact` `{true|false}` - Specifies whether or not the component should be compact view\n- `is-date-picker` `{true|false}` - Specifies whether or not the component is used in a date picker component popup\n- `legend` - Set array of legend items:\n  - `name` `{string}` - The name of the legend (required)\n  - `color` `{string}` - The color of the legend, either hex or IDS variable excluding `--ids-color-` part i.e. `emerald-60` (required)\n  - `dates` `{Array}` - Array of dates (either dates or dayOfWeek is required)\n  - `dayOfWeek` `{Array}` - Array of days of week where 0 is Sunday (either dates or dayOfWeek is required)\n- `disable` `{Object}` - Disable dates settings:\n  - `dates` `{Array}` - Disable specific dates (in a format that can be converted to a date)\n  - `years` `{Array}` - Disable specific years\n  - `minDate` `{string}` - Disable up to a minimum date\n  - `maxDate` `{string}` - Disable up to a maximum date\n  - `dayOfWeek` `{Array}` - Disable a specific of days of the week 0-6\n  - `isEnable` `{boolean}` - Enables the disabled dates. Default is false\n- `show-picklist-year` `{true|false}` Whether or not to show a list of years in the toolbar datepicker picklist, default if true\n- `show-picklist-month` `{true|false}` Whether or not to show a list of months in the toolbar datepicker picklist, default is true\n- `show-picklist-week` `{true|false}` Whether or not to show week numbers in the toolbar datepicker picklist\n\n## Settings (Properties)\n- `eventsData` `{Array<CalendarEventData>}` - Array of calendar event data to populate the month view\n- `eventTypesData` `{Array<CalendarEventTypeData>}` - Array of calendar event types used to categorize calendar events\n\n## Events\n- `dayselected` - Fires when a day is selected\n- `beforeeventrendered` Fires for each event rendered (full day or in day) before the element is added to the DOM\n- `aftereventrendered` Fires for each event rendered (full day or in day) after the element is added to the DOM\n\n## Methods\n- `isDisabledByDate(date: Date): boolean` - Defines if a date is in disabled settings\n\n## Keyboard Guidelines\n- <kbd>Tab</kbd> - Tabbing will tab across the header elements and into the monthview.\n- <kbd>Shift + Tab</kbd> reverses the direction of the tab order.\n- <kbd>Up</kbd> and <kbd>Down</kbd> goes to the same day of the week in the previous or next week respectively. If the user advances past the end of the month they continue into the next or previous month as appropriate\n- <kbd>Left</kbd> and <kbd>Right</kbd> advances one day to the next, also in a continuum. Visually, focus is moved from day to day and wraps from row to row in a grid of days and weeks\n- <kbd>Control + Page Up</kbd> moves to the same date in the previous year\n- <kbd>Control + Page Down</kbd> moves to the same date in the next year\n- <kbd>Home</kbd> moves to the first day of the current month\n- <kbd>End</kbd> moves to the last day of the current month\n- <kbd>Page Up</kbd> moves to the same date in the previous month\n- <kbd>Page Down</kbd> moves to the same date in the next month\n- <kbd>T</kbd> moves to today's date\n\n## Features (With Code Examples)\nWith no settings. Month/Day/Year defaults to current date. First day of the week is 0 - Sunday.\n\n```html\n<ids-month-view></ids-month-view>\n```\n\nSpecified date. First day of the week is 1 - Monday. Showing Today button in the toolbar.\n\n```html\n<ids-month-view\n  show-today=\"true\"\n  month=\"10\"\n  year=\"2021\"\n  day=\"15\"\n  first-day-of-week=\"1\"\n></ids-month-view>\n```\n\nSpecified date range. Showing more than one month of days. Calendar toolbar is hidden\n\n```html\n<ids-month-view\n  start-date=\"07/14/2021\"\n  end-date=\"02/03/2022\"\n></ids-month-view>\n```\n\nThe component can be controlled dynamically\n\n```js\nconst monthView = document.querySelector('ids-month-view');\n\n// Changing month (March)\nmonthView.month = 2;\n\n// Changing day\nmonthView.day = 4;\n\n// Changing year\nmonthView.year = 2016;\n\n// Changing first day of the week (Monday)\nmonthView.firstDayOfWeek = 1;\n\n// Make it compact\nmonthView.compact = true;\n\n// Showing date range\nmonthView.startDate = '07/14/2021';\nmonthView.endDate = '02/02/2022';\n\n// Set legend\nmonthView.legend = [\n  {\n    name: 'Public Holiday',\n    color: 'emerald-60',\n    dates: ['12/31/2021', '12/24/2021', '1/1/2022'],\n  },\n  { name: 'Weekends', color: 'amber-60', dayOfWeek: [0, 6] },\n  {\n    name: 'Other',\n    color: 'ruby-30',\n    dates: ['1/8/2022', '1/9/2022', '1/23/2022'],\n  },\n  {\n    name: 'Half Days',\n    color: 'amethyst-60',\n    dates: ['1/21/2022', '1/22/2022'],\n  },\n  {\n    name: 'Full Days',\n    color: '#1677ee',\n    dates: ['1/24/2022', '1/25/2022'],\n  }\n];\n\n// Unset legend\nmonthView.legend = null;\n\n// Add disabled dates\nmonthView.disableSettings = {\n  dates: ['2/7/2018', '2/9/2018', '2/10/2018', '2/11/2018'],\n  dayOfWeek: [0, 6],\n  minDate: '2/6/2018',\n  maxDate: '2/12/2018',\n  years: [2017, 2018],\n  isEnable: true\n}\n```\n\n## Accessibility\n\nThe monthview is a very complex component to code for accessibility. We take the following approach:\n\n- Add an `aria-label` to the calendar element\n- Add `aria-selected=true` to selected day\n- Each calendar item should have an audible label to announce the day of week while arrowing through days\n- For comparison, see a similar <a href=\"http://oaa-accessibility.org/example/15/\" target=\"_blank\">example</a>\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- This is a new component for 4.x\n\n**4.x to 5.x**\n\n- MonthView is now a custom element `<ids-month-view></ids-month-view>`\n- Events are now just plain JS events\n- Some options and events are not converted yet\n- To set range of dates now there are `start-date` and `end-date` attributes instead of `displayRange` setting\n"}},{"name":"ids-multiselect","attributes":[{"name":"#selectedList","values":[]},{"name":"#optionsData","values":[]},{"name":"disabled","description":"Gets the value of the disabled property","values":[]},{"name":"tags","description":"returns whether the multiselect is set to display selections as tags","values":[]},{"name":"max","description":"returns the maximum number of allowed selections","values":[]},{"name":"value","description":"returns an array of the values that have been selected","values":[]},{"name":"isFormComponent","values":[]},{"name":"hasIcons","values":[]},{"name":"dropdownList","values":[]},{"name":"trigger","values":[]},{"name":"listBox","values":[]},{"name":"labelClicked","values":[]},{"name":"labelEl","values":[]},{"name":"openedByKeyboard","description":"Sets to true when a keyboard operation opens the dropdown (prevents extraneous event triggering)","values":[]},{"name":"closedByKeyboard","description":"Sets to true when a keyboard operation closes the dropdown (prevents extraneous event triggering)","values":[]},{"name":"#isMultiSelect","values":[]},{"name":"colorVariants","description":"List of available color variants for this component","values":[]},{"name":"input","values":[]},{"name":"popup","values":[]},{"name":"selectedOption","description":"Returns the selected Listbox option based on the Dropdown's value.","values":[]},{"name":"selected","description":"Returns the currently-selected Listbox option\n(may be different from the Dropdown's value because of user input)","values":[]},{"name":"selectedIndex","description":"Set the selected option by index","values":[]},{"name":"options","description":"Returns the currently available options","values":[]},{"name":"readonly","description":"Sets the readonly attribute","values":[]},{"name":"beforeShow","description":"An async function that fires as the dropdown is opening allowing you to set contents.","values":[]},{"name":"onLanguageChange","description":"Handle the Locale Change","values":[]},{"name":"validate","description":"Pass down `validate` attribute into IdsTriggerField","values":[]},{"name":"validationEvents","description":"Pass down `validation-events` attribute into IdsTriggerField","values":[]},{"name":"list","description":"Defines the existence of an external IdsDropdownList component, and connects this IdsDropdown\nto the component via events.","values":[]},{"name":"noMargins","description":"Sets the no margins attribute","values":[]},{"name":"typeahead","description":"Get the typeahead attribute","values":[]},{"name":"placeholder","description":"Get the placeholder attribute","values":[]},{"name":"showLoadingIndicator","description":"show-loading-indicator attribute","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# IDS Multiselect\n\n## Description\nIds Multiselect is similar to Ids Dropdown except it allows the end user to select more than one option from a list. Selected items can be displayed as dismissible tags or a comma separated string.\n\n## Use Cases\n\n- Use when you want a user to select one or more options from a list of values\n\n## Terminology\n\n- **List Box**: The Ux element that holds the items in the dropdown\n- **List Box Option**: The dropdown options but contained in a list box\n\n## Settings and Attributes\n\nIdsMultiselect inherits most of it's settings from ids-dropdown, please refer to that document [here](../ids-dropdown/README.md) for more details. Below are listed new settings or ones that have been modified or are different from ids-dropdown:\n\n- `disabled` {boolean} Sets multiselect to disabled including dismisiable tags\n- `tags` {boolean} sets whether to use tags to display selected values\n- `value` {Array} Sets the selected options to match the items in the array. This is no longer set as an attribute but as a property `document.querySelector('ids-multiselect').value = ['al', 'ar', 'ca']`\n- `max` {number} Sets maximum number of selected options\n- `selectedIndex` no longer provides functionality in ids-multiselect\n\n## Features (With Code Examples)\n\nA basic example of a multiselect in action.\n\n```html\n<ids-multiselect id=\"dropdown-1\" label=\"Test Dropdown\">\n  <ids-list-box>\n    <ids-list-box-option id=\"al\" value=\"al\"><ids-checkbox label=\"Alabama\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"ak\" value=\"ak\"><ids-checkbox label=\"Alaska\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"az\" value=\"az\"><ids-checkbox label=\"Arizona\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"ar\" value=\"ar\"><ids-checkbox label=\"Arkansas\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"ca\" value=\"ca\"><ids-checkbox label=\"California\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"co\" value=\"co\"><ids-checkbox label=\"Colorado\"></ids-checkbox></ids-list-box-option>\n  </ids-list-box>\n</ids-multiselect>\n```\n\nExample with a maximum selection\n\n```html\n<ids-multiselect id=\"dropdown-1\" label=\"Test Dropdown\" max=\"3\">\n  <ids-list-box>\n    <ids-list-box-option id=\"al\" value=\"al\"><ids-checkbox label=\"Alabama\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"ak\" value=\"ak\"><ids-checkbox label=\"Alaska\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"az\" value=\"az\"><ids-checkbox label=\"Arizona\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"ar\" value=\"ar\"><ids-checkbox label=\"Arkansas\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"ca\" value=\"ca\"><ids-checkbox label=\"California\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"co\" value=\"co\"><ids-checkbox label=\"Colorado\"></ids-checkbox></ids-list-box-option>\n  </ids-list-box>\n</ids-multiselect>\n```\n\nExample with tags\n\n```html\n<ids-multiselect id=\"dropdown-1\" label=\"Test Dropdown\" max=\"3\" tags=\"true\">\n  <ids-list-box>\n    <ids-list-box-option id=\"al\" value=\"al\"><ids-checkbox label=\"Alabama\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"ak\" value=\"ak\"><ids-checkbox label=\"Alaska\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"az\" value=\"az\"><ids-checkbox label=\"Arizona\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"ar\" value=\"ar\"><ids-checkbox label=\"Arkansas\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"ca\" value=\"ca\"><ids-checkbox label=\"California\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"co\" value=\"co\"><ids-checkbox label=\"Colorado\"></ids-checkbox></ids-list-box-option>\n  </ids-list-box>\n</ids-multiselect>\n```\n\nWith selected options initially. Add `selected` attribute to the selected options in the list.\n\n```html\n<ids-multiselect id=\"dropdown-1\" label=\"Test Dropdown\" max=\"3\" dirty-tracker=\"true\">\n  <ids-list-box>\n    <ids-list-box-option id=\"al\" value=\"al\" selected><ids-checkbox label=\"Alabama\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"ak\" value=\"ak\"><ids-checkbox label=\"Alaska\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"az\" value=\"az\"><ids-checkbox label=\"Arizona\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"ar\" value=\"ar\" selected><ids-checkbox label=\"Arkansas\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"ca\" value=\"ca\"><ids-checkbox label=\"California\"></ids-checkbox></ids-list-box-option>\n    <ids-list-box-option id=\"co\" value=\"co\"><ids-checkbox label=\"Colorado\"></ids-checkbox></ids-list-box-option>\n  </ids-list-box>\n</ids-multiselect>\n```\n"}},{"name":"ids-notification-attributes","description":{"kind":"markdown","value":"# Ids Notification Banner\n\n## Description\n\nThe Ids Notification Banner allows developers to display a message and optionally a link to more information to the user. A user can dismiss banner or click through the provided link. It sits the top of a page or a widget.\n\n## Use Cases\n\nThere are 4 different types of notification banners. Each type has a unique background color and icon.\n\n- success\n- warning\n- info\n- error\n\n## Features (With Code Examples)\n\nA success notification banner with link.\n\n```html\n<ids-notification-banner\n  id=\"ids-notification-banner-0\"\n  message-text=\"DTO rejected by your manager for Sept 30, 2023.\"\n  type=\"success\"\n  link=\"https://infor.com\">\n</ids-notification-banner>\n```\n\nAn info notification banner with custom link text\n\n```html\n<ids-notification-banner\n  id=\"ids-notification-banner-0\"\n  message-text=\"DTO rejected by your manager for Sept 30, 2023.\"\n  type=\"info\"\n  link=\"https://infor.com\"\n  link-text=\"Learn More\">\n</ids-notification-banner>\n```\n\nAn error notification banner with no link\n\n```html\n<ids-notification-banner\n  id=\"ids-notification-banner-0\"\n  message-text=\"DTO rejected by your manager for Sept 30, 2023.\"\n  type=\"error\">\n</ids-notification-banner>\n```\n\nAdd a notification banner dynamically\n\n```js\nconst notificationBanner = new IdsNotificationBanner();\nnotificationBanner.add({\n  id: 'ids-notification-banner-1',\n  parent: 'notification-container',\n  type: 'warning',\n  messageText: 'DTO accepted by your manager for Sept 30, 2023.',\n  link: 'https://infor.com',\n  linkText: 'Learn More'\n});\n```\n\n```html\n<div id=\"notification-banner\"></div>\n```\n\n## Settings and Attributes\n\n- `type` `{string}` can be 1 of 4 types (success, warning, info, error)\n- `message-text` `{string}` text shown inside the banner\n- `link` `{string | null}` url for the call to action in the banner\n- `link-text` `{string | null}` custom text for the call to action (if `null` will display \"Click to view\")\n\n## Themeable Parts\n\n- `bgColor` Allows you to further style the background\n- `closeBtn` Allows you to further style the close button\n- `messageText` Allows you to further style the message text\n- `linkText` Allows you to further style the link text\n\n## Keyboard Guidelines\n\n- TAB should move off of the component to the next focusable element on page.\n- SHIFT + TAB should move to previous focusable element on the page.\n\n## Responsive Guidelines\n\n- The notification is 100% wide and will full the parent container by default\n- The message text will be non-breaking and display ellipsis when there is not enough visible space.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Comparable to the inforSlideInDialog in 3.X\n\n**4.x to 5.x**\n\n- The notification component has been renamed to notification-banner\n- If using properties/settings these are now attributes.\n- Markup has changed to a custom element `<ids-message></ids-message>`\n- If using events events are now plain JS events for example\n- Can now be imported as a single JS file and used with encapsulated styles\n- The type, alert icon, message text, link and link text are all configurable via properties on the custom element\n- Additionally, user's can define the notification via a JS api, where the `parent` and `id` can be configured\n"}},{"name":"ids-notification-banner","attributes":[{"name":"type","description":"Set the type of the Notification Banner","values":[]},{"name":"link","description":"Set the link inside the Notification Banner","values":[]},{"name":"linkText","description":"Set the custom link text of the Notification Banner","values":[]},{"name":"messageText","description":"Set the message text of the Notification Banner","values":[]}],"description":{"kind":"markdown","value":"# Ids Notification Banner\n\n## Description\n\nThe Ids Notification Banner allows developers to display a message and optionally a link to more information to the user. A user can dismiss banner or click through the provided link. It sits the top of a page or a widget.\n\n## Use Cases\n\nThere are 4 different types of notification banners. Each type has a unique background color and icon.\n\n- success\n- warning\n- info\n- error\n\n## Features (With Code Examples)\n\nA success notification banner with link.\n\n```html\n<ids-notification-banner\n  id=\"ids-notification-banner-0\"\n  message-text=\"DTO rejected by your manager for Sept 30, 2023.\"\n  type=\"success\"\n  link=\"https://infor.com\">\n</ids-notification-banner>\n```\n\nAn info notification banner with custom link text\n\n```html\n<ids-notification-banner\n  id=\"ids-notification-banner-0\"\n  message-text=\"DTO rejected by your manager for Sept 30, 2023.\"\n  type=\"info\"\n  link=\"https://infor.com\"\n  link-text=\"Learn More\">\n</ids-notification-banner>\n```\n\nAn error notification banner with no link\n\n```html\n<ids-notification-banner\n  id=\"ids-notification-banner-0\"\n  message-text=\"DTO rejected by your manager for Sept 30, 2023.\"\n  type=\"error\">\n</ids-notification-banner>\n```\n\nAdd a notification banner dynamically\n\n```js\nconst notificationBanner = new IdsNotificationBanner();\nnotificationBanner.add({\n  id: 'ids-notification-banner-1',\n  parent: 'notification-container',\n  type: 'warning',\n  messageText: 'DTO accepted by your manager for Sept 30, 2023.',\n  link: 'https://infor.com',\n  linkText: 'Learn More'\n});\n```\n\n```html\n<div id=\"notification-banner\"></div>\n```\n\n## Settings and Attributes\n\n- `type` `{string}` can be 1 of 4 types (success, warning, info, error)\n- `message-text` `{string}` text shown inside the banner\n- `link` `{string | null}` url for the call to action in the banner\n- `link-text` `{string | null}` custom text for the call to action (if `null` will display \"Click to view\")\n\n## Themeable Parts\n\n- `bgColor` Allows you to further style the background\n- `closeBtn` Allows you to further style the close button\n- `messageText` Allows you to further style the message text\n- `linkText` Allows you to further style the link text\n\n## Keyboard Guidelines\n\n- TAB should move off of the component to the next focusable element on page.\n- SHIFT + TAB should move to previous focusable element on the page.\n\n## Responsive Guidelines\n\n- The notification is 100% wide and will full the parent container by default\n- The message text will be non-breaking and display ellipsis when there is not enough visible space.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Comparable to the inforSlideInDialog in 3.X\n\n**4.x to 5.x**\n\n- The notification component has been renamed to notification-banner\n- If using properties/settings these are now attributes.\n- Markup has changed to a custom element `<ids-message></ids-message>`\n- If using events events are now plain JS events for example\n- Can now be imported as a single JS file and used with encapsulated styles\n- The type, alert icon, message text, link and link text are all configurable via properties on the custom element\n- Additionally, user's can define the notification via a JS api, where the `parent` and `id` can be configured\n"}},{"name":"ids-pager-attributes","description":{"kind":"markdown","value":"# Ids Pager Component\n\nThe IDS Pager Component is used to provide an interface for browsing paginated data, providing methods of navigating and calculating the pages when provided a baseline of attributes.\n\n## Use Cases\n\n- There is a table, grid, document or other listing of data, which is displayed via pagination.\n- Controlling the pagination or keeping track of what is browsed in a data set.\n- Presenting digestible portions of large data sets.\n\n## Slots\n\n`start` and `end` slots allow you to position content to the left or the right side of the pager panel. If no slot is provided, the child-contents of the pager component will be automatically inserted into the middle slot.\n\n## Sub-Components\n\n**`<ids-pager-button>`**: represents a navigation button within the pager that is flagged with an attribute flag specifying what clicking it accomplishes e.g. `first`, `last`, `previous`, or `next`.\n\n**`<ids-pager-number-list>`**: provides a list of page numbered buttons which a user can click.\n\n**`<ids-pager-input>`**: provides a way for user to input numbers directly for the parent `ids-pager`.\n\n## Settings (ids-pager)\n\n- `page-size` {number} number of items to paginate\n- `page-number` {number} 1-based page index. Should reflect what page number is currently being displayed.\n- `total` {number} number of items the pager tracks\n- `disabled` {boolean} whether or not to disable this pager and all navigation buttons nested inside of it\n\n## Settings (ids-pager-number-list)\n\n- `disabled` {boolean} whether to override the natural or parent-disabled functionality to specifically disable the number buttons in this component.\n- `label` {string} sets the aria label text\n- `step` {number} sets the number of step for page number list\n\n## Settings (ids-pager-button)\n\n- `disabled` {boolean} whether to override natural or parent-disabled functionality to specifically disable this button.\n- `label` {string} sets the aria label text\n\n## Settings (ids-pager-input)\n\n- `disabled` {boolean} whether to override natural or parent-disabled functionality to specifically disable this button.\n\n## Themeable Parts (ids-pager)\n\n**container** - the overall `ids-pager` container\n\n## Themeable Parts (ids-pager-button)\n\n**button** - the `ids-button` component\n**icon** - the `ids-icon` component\n\n## Features (with code samples)\n\nA pager with a data set that represents 10 entries per page, with 100 items overall, with basic navigation buttons, and a user input:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"1\">\n  <ids-pager-button first></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\nA pager with a data set that represents 20 entries per page, with 63 items overall, with basic navigation buttons to go to the next or previous page, and a user input to enter a page number directly:\n```html\n<ids-pager page-size=\"20\" total=\"63\" page-number=\"2\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, surrounded by navigation buttons:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"150\">\n  <section>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-number-list></ids-pager-number-list>\n    <ids-pager-button next></ids-pager-button>\n  </section>\n  <section slot=\"end\">Right-Aligned Content</section>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, with custom steps limit:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"1500\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-number-list step=\"2\"></ids-pager-number-list>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, with show all step buttons (no-limit):\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"500\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-number-list step=\"-1\"></ids-pager-number-list>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with aria-label:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"1500\">\n  <ids-pager-button label=\"Previous page\" previous></ids-pager-button>\n  <ids-pager-number-list label=\"Page {num} of {total}\"></ids-pager-number-list>\n  <ids-pager-button label=\"Next page\" next></ids-pager-button>\n</ids-pager>\n```\n\n### Disabling Functionality\n\nA pager with all navigation buttons explicitly disabled:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\" disabled>\n  <ids-pager-button first></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\nA pager with only the `first` button disabled:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <ids-pager-button first disabled></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\n### With Aligned Sections on the Margins\n\nUser-defined right aligned content:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <section>\n    <ids-pager-button first></ids-pager-button>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-input></ids-pager-input>\n    <ids-pager-button next></ids-pager-button>\n    <ids-pager-button last></ids-pager-button>\n  </section>\n  <section slot=\"end\">\n    user defined right-aligned content\n  </section>\n</ids-pager>\n```\n\nA pager with user-defined content aligned to the left and to the right of the central navigation buttons:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <section slot=\"start\">\n    user defined left-aligned content\n  </section>\n  <section>\n    <ids-pager-button first></ids-pager-button>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-input></ids-pager-input>\n    <ids-pager-button next></ids-pager-button>\n    <ids-pager-button last></ids-pager-button>\n  </section>\n  <section slot=\"end\">\n    user defined right-aligned content\n  </section>\n</ids-pager>\n```\n\n## Keyboard Guidelines\n\n- <kbd>TAB</kbd> Move between `ids-pager-buttons` as well as inputs and `ids-pager-number-list` buttons, and also goes to the next element if at the end of the pager.\n- <kbd>SHIFT + TAB</kbd> should work similar to TAB but in reverse, and also to the previous element if at the beginning of the pager.\n- <kbd>ENTER</kbd> while focusing on the `ids-pager-input` submits the value\n\n## Usage Tips\n\n- the `page-size`, `page-number` and `total` are only useful in the context of the `ids-pager`. They should not be controlled at the level of the interactive buttons or the number list.\n- Content can be laid out for additional buttons/interactions/etc other than the `ids-pager-button`, but the standard navigation and user input components should be used wherever possible.\n- the page count on the pager can be accessed on the `ids-pager` element at any time via the `pageCount` property via JS for example:\n```js\n  const idsElement = document.querySelector('ids-pager');\n  const pageCount = idsElement.pageCount;\n```\n\n## Accessibility\n\n- 1.4.3 Contrast (Minimum) - there should be enough contrast on the background which the wizard resides on in the page.\n\n## Regional Considerations\n\nAll elements will flip to the alternate side in Right To Left mode, including user defined content. Alignment on left and right aligned slots will also flip.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- This did not exist as a standalone component\n- Datagrid paging has new options - see data grid docs\n\n**4.x to 5.x**\n\n- Pager is now a web component called ids-pager\n- Only has a standalone version now (simplified)\n- If using properties/settings are now attributes.\n- Markup has changed to a custom element `<ids-pager>`\n- If using events events are now plain JS events for example\n- Can now be imported as a single JS file and used with encapsulated styles\n- content is automatically managed/aligned via nesting controls inside of `<ids-pager-section>`\n- pagination is controlled via attributes on the `<ids-pager>` (`page-number`, `total`, `page-size`), and manages buttons and controls automatically.\n- buttons are managed by `<ids-pager-button>` with given functionality flags e.g. `<ids-pager-button start>`.\n- input box can be inserted `<ids-pager-input>`, and a number list with `<ids-pager-number-list>`\n"}},{"name":"ids-pager-button","attributes":[{"name":"DEFAULT_PAGE_SIZE","values":[]},{"name":"rootNode","values":[]},{"name":"button","values":[]},{"name":"icon","values":[]},{"name":"pager","description":"Reference to the pager parent","values":[]},{"name":"pageCount","values":[]},{"name":"first","values":[]},{"name":"last","values":[]},{"name":"next","values":[]},{"name":"previous","values":[]},{"name":"disabled","values":[]},{"name":"type","values":[]},{"name":"total","values":[]},{"name":"navDisabled","values":[]},{"name":"parentDisabled","values":[]},{"name":"pageNumber","values":[]},{"name":"pageSize","values":[]},{"name":"label","description":"Set the aria label text","values":[]}],"description":{"kind":"markdown","value":"# Ids Pager Component\n\nThe IDS Pager Component is used to provide an interface for browsing paginated data, providing methods of navigating and calculating the pages when provided a baseline of attributes.\n\n## Use Cases\n\n- There is a table, grid, document or other listing of data, which is displayed via pagination.\n- Controlling the pagination or keeping track of what is browsed in a data set.\n- Presenting digestible portions of large data sets.\n\n## Slots\n\n`start` and `end` slots allow you to position content to the left or the right side of the pager panel. If no slot is provided, the child-contents of the pager component will be automatically inserted into the middle slot.\n\n## Sub-Components\n\n**`<ids-pager-button>`**: represents a navigation button within the pager that is flagged with an attribute flag specifying what clicking it accomplishes e.g. `first`, `last`, `previous`, or `next`.\n\n**`<ids-pager-number-list>`**: provides a list of page numbered buttons which a user can click.\n\n**`<ids-pager-input>`**: provides a way for user to input numbers directly for the parent `ids-pager`.\n\n## Settings (ids-pager)\n\n- `page-size` {number} number of items to paginate\n- `page-number` {number} 1-based page index. Should reflect what page number is currently being displayed.\n- `total` {number} number of items the pager tracks\n- `disabled` {boolean} whether or not to disable this pager and all navigation buttons nested inside of it\n\n## Settings (ids-pager-number-list)\n\n- `disabled` {boolean} whether to override the natural or parent-disabled functionality to specifically disable the number buttons in this component.\n- `label` {string} sets the aria label text\n- `step` {number} sets the number of step for page number list\n\n## Settings (ids-pager-button)\n\n- `disabled` {boolean} whether to override natural or parent-disabled functionality to specifically disable this button.\n- `label` {string} sets the aria label text\n\n## Settings (ids-pager-input)\n\n- `disabled` {boolean} whether to override natural or parent-disabled functionality to specifically disable this button.\n\n## Themeable Parts (ids-pager)\n\n**container** - the overall `ids-pager` container\n\n## Themeable Parts (ids-pager-button)\n\n**button** - the `ids-button` component\n**icon** - the `ids-icon` component\n\n## Features (with code samples)\n\nA pager with a data set that represents 10 entries per page, with 100 items overall, with basic navigation buttons, and a user input:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"1\">\n  <ids-pager-button first></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\nA pager with a data set that represents 20 entries per page, with 63 items overall, with basic navigation buttons to go to the next or previous page, and a user input to enter a page number directly:\n```html\n<ids-pager page-size=\"20\" total=\"63\" page-number=\"2\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, surrounded by navigation buttons:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"150\">\n  <section>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-number-list></ids-pager-number-list>\n    <ids-pager-button next></ids-pager-button>\n  </section>\n  <section slot=\"end\">Right-Aligned Content</section>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, with custom steps limit:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"1500\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-number-list step=\"2\"></ids-pager-number-list>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, with show all step buttons (no-limit):\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"500\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-number-list step=\"-1\"></ids-pager-number-list>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with aria-label:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"1500\">\n  <ids-pager-button label=\"Previous page\" previous></ids-pager-button>\n  <ids-pager-number-list label=\"Page {num} of {total}\"></ids-pager-number-list>\n  <ids-pager-button label=\"Next page\" next></ids-pager-button>\n</ids-pager>\n```\n\n### Disabling Functionality\n\nA pager with all navigation buttons explicitly disabled:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\" disabled>\n  <ids-pager-button first></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\nA pager with only the `first` button disabled:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <ids-pager-button first disabled></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\n### With Aligned Sections on the Margins\n\nUser-defined right aligned content:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <section>\n    <ids-pager-button first></ids-pager-button>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-input></ids-pager-input>\n    <ids-pager-button next></ids-pager-button>\n    <ids-pager-button last></ids-pager-button>\n  </section>\n  <section slot=\"end\">\n    user defined right-aligned content\n  </section>\n</ids-pager>\n```\n\nA pager with user-defined content aligned to the left and to the right of the central navigation buttons:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <section slot=\"start\">\n    user defined left-aligned content\n  </section>\n  <section>\n    <ids-pager-button first></ids-pager-button>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-input></ids-pager-input>\n    <ids-pager-button next></ids-pager-button>\n    <ids-pager-button last></ids-pager-button>\n  </section>\n  <section slot=\"end\">\n    user defined right-aligned content\n  </section>\n</ids-pager>\n```\n\n## Keyboard Guidelines\n\n- <kbd>TAB</kbd> Move between `ids-pager-buttons` as well as inputs and `ids-pager-number-list` buttons, and also goes to the next element if at the end of the pager.\n- <kbd>SHIFT + TAB</kbd> should work similar to TAB but in reverse, and also to the previous element if at the beginning of the pager.\n- <kbd>ENTER</kbd> while focusing on the `ids-pager-input` submits the value\n\n## Usage Tips\n\n- the `page-size`, `page-number` and `total` are only useful in the context of the `ids-pager`. They should not be controlled at the level of the interactive buttons or the number list.\n- Content can be laid out for additional buttons/interactions/etc other than the `ids-pager-button`, but the standard navigation and user input components should be used wherever possible.\n- the page count on the pager can be accessed on the `ids-pager` element at any time via the `pageCount` property via JS for example:\n```js\n  const idsElement = document.querySelector('ids-pager');\n  const pageCount = idsElement.pageCount;\n```\n\n## Accessibility\n\n- 1.4.3 Contrast (Minimum) - there should be enough contrast on the background which the wizard resides on in the page.\n\n## Regional Considerations\n\nAll elements will flip to the alternate side in Right To Left mode, including user defined content. Alignment on left and right aligned slots will also flip.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- This did not exist as a standalone component\n- Datagrid paging has new options - see data grid docs\n\n**4.x to 5.x**\n\n- Pager is now a web component called ids-pager\n- Only has a standalone version now (simplified)\n- If using properties/settings are now attributes.\n- Markup has changed to a custom element `<ids-pager>`\n- If using events events are now plain JS events for example\n- Can now be imported as a single JS file and used with encapsulated styles\n- content is automatically managed/aligned via nesting controls inside of `<ids-pager-section>`\n- pagination is controlled via attributes on the `<ids-pager>` (`page-number`, `total`, `page-size`), and manages buttons and controls automatically.\n- buttons are managed by `<ids-pager-button>` with given functionality flags e.g. `<ids-pager-button start>`.\n- input box can be inserted `<ids-pager-input>`, and a number list with `<ids-pager-number-list>`\n"}},{"name":"ids-pager-dropdown","attributes":[{"name":"rootNode","values":[]},{"name":"DEFAULT_PAGE_SIZE","values":[]},{"name":"pager","description":"Reference to the pager parent","values":[]},{"name":"menuButton","description":"Reference to ids-menu-button#pager-size-menu-button","values":[]},{"name":"popupMenu","description":"Reference to ids-popup-menu#pager-size-menu","values":[]},{"name":"label","description":"Get the label for the pager-dropdown button","values":[]},{"name":"pageSize","description":"Get the page-size attribute","values":[]}],"description":{"kind":"markdown","value":"# Ids Pager Component\n\nThe IDS Pager Component is used to provide an interface for browsing paginated data, providing methods of navigating and calculating the pages when provided a baseline of attributes.\n\n## Use Cases\n\n- There is a table, grid, document or other listing of data, which is displayed via pagination.\n- Controlling the pagination or keeping track of what is browsed in a data set.\n- Presenting digestible portions of large data sets.\n\n## Slots\n\n`start` and `end` slots allow you to position content to the left or the right side of the pager panel. If no slot is provided, the child-contents of the pager component will be automatically inserted into the middle slot.\n\n## Sub-Components\n\n**`<ids-pager-button>`**: represents a navigation button within the pager that is flagged with an attribute flag specifying what clicking it accomplishes e.g. `first`, `last`, `previous`, or `next`.\n\n**`<ids-pager-number-list>`**: provides a list of page numbered buttons which a user can click.\n\n**`<ids-pager-input>`**: provides a way for user to input numbers directly for the parent `ids-pager`.\n\n## Settings (ids-pager)\n\n- `page-size` {number} number of items to paginate\n- `page-number` {number} 1-based page index. Should reflect what page number is currently being displayed.\n- `total` {number} number of items the pager tracks\n- `disabled` {boolean} whether or not to disable this pager and all navigation buttons nested inside of it\n\n## Settings (ids-pager-number-list)\n\n- `disabled` {boolean} whether to override the natural or parent-disabled functionality to specifically disable the number buttons in this component.\n- `label` {string} sets the aria label text\n- `step` {number} sets the number of step for page number list\n\n## Settings (ids-pager-button)\n\n- `disabled` {boolean} whether to override natural or parent-disabled functionality to specifically disable this button.\n- `label` {string} sets the aria label text\n\n## Settings (ids-pager-input)\n\n- `disabled` {boolean} whether to override natural or parent-disabled functionality to specifically disable this button.\n\n## Themeable Parts (ids-pager)\n\n**container** - the overall `ids-pager` container\n\n## Themeable Parts (ids-pager-button)\n\n**button** - the `ids-button` component\n**icon** - the `ids-icon` component\n\n## Features (with code samples)\n\nA pager with a data set that represents 10 entries per page, with 100 items overall, with basic navigation buttons, and a user input:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"1\">\n  <ids-pager-button first></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\nA pager with a data set that represents 20 entries per page, with 63 items overall, with basic navigation buttons to go to the next or previous page, and a user input to enter a page number directly:\n```html\n<ids-pager page-size=\"20\" total=\"63\" page-number=\"2\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, surrounded by navigation buttons:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"150\">\n  <section>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-number-list></ids-pager-number-list>\n    <ids-pager-button next></ids-pager-button>\n  </section>\n  <section slot=\"end\">Right-Aligned Content</section>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, with custom steps limit:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"1500\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-number-list step=\"2\"></ids-pager-number-list>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, with show all step buttons (no-limit):\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"500\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-number-list step=\"-1\"></ids-pager-number-list>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with aria-label:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"1500\">\n  <ids-pager-button label=\"Previous page\" previous></ids-pager-button>\n  <ids-pager-number-list label=\"Page {num} of {total}\"></ids-pager-number-list>\n  <ids-pager-button label=\"Next page\" next></ids-pager-button>\n</ids-pager>\n```\n\n### Disabling Functionality\n\nA pager with all navigation buttons explicitly disabled:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\" disabled>\n  <ids-pager-button first></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\nA pager with only the `first` button disabled:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <ids-pager-button first disabled></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\n### With Aligned Sections on the Margins\n\nUser-defined right aligned content:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <section>\n    <ids-pager-button first></ids-pager-button>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-input></ids-pager-input>\n    <ids-pager-button next></ids-pager-button>\n    <ids-pager-button last></ids-pager-button>\n  </section>\n  <section slot=\"end\">\n    user defined right-aligned content\n  </section>\n</ids-pager>\n```\n\nA pager with user-defined content aligned to the left and to the right of the central navigation buttons:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <section slot=\"start\">\n    user defined left-aligned content\n  </section>\n  <section>\n    <ids-pager-button first></ids-pager-button>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-input></ids-pager-input>\n    <ids-pager-button next></ids-pager-button>\n    <ids-pager-button last></ids-pager-button>\n  </section>\n  <section slot=\"end\">\n    user defined right-aligned content\n  </section>\n</ids-pager>\n```\n\n## Keyboard Guidelines\n\n- <kbd>TAB</kbd> Move between `ids-pager-buttons` as well as inputs and `ids-pager-number-list` buttons, and also goes to the next element if at the end of the pager.\n- <kbd>SHIFT + TAB</kbd> should work similar to TAB but in reverse, and also to the previous element if at the beginning of the pager.\n- <kbd>ENTER</kbd> while focusing on the `ids-pager-input` submits the value\n\n## Usage Tips\n\n- the `page-size`, `page-number` and `total` are only useful in the context of the `ids-pager`. They should not be controlled at the level of the interactive buttons or the number list.\n- Content can be laid out for additional buttons/interactions/etc other than the `ids-pager-button`, but the standard navigation and user input components should be used wherever possible.\n- the page count on the pager can be accessed on the `ids-pager` element at any time via the `pageCount` property via JS for example:\n```js\n  const idsElement = document.querySelector('ids-pager');\n  const pageCount = idsElement.pageCount;\n```\n\n## Accessibility\n\n- 1.4.3 Contrast (Minimum) - there should be enough contrast on the background which the wizard resides on in the page.\n\n## Regional Considerations\n\nAll elements will flip to the alternate side in Right To Left mode, including user defined content. Alignment on left and right aligned slots will also flip.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- This did not exist as a standalone component\n- Datagrid paging has new options - see data grid docs\n\n**4.x to 5.x**\n\n- Pager is now a web component called ids-pager\n- Only has a standalone version now (simplified)\n- If using properties/settings are now attributes.\n- Markup has changed to a custom element `<ids-pager>`\n- If using events events are now plain JS events for example\n- Can now be imported as a single JS file and used with encapsulated styles\n- content is automatically managed/aligned via nesting controls inside of `<ids-pager-section>`\n- pagination is controlled via attributes on the `<ids-pager>` (`page-number`, `total`, `page-size`), and manages buttons and controls automatically.\n- buttons are managed by `<ids-pager-button>` with given functionality flags e.g. `<ids-pager-button start>`.\n- input box can be inserted `<ids-pager-input>`, and a number list with `<ids-pager-number-list>`\n"}},{"name":"ids-pager-input","attributes":[{"name":"DEFAULT_PAGE_SIZE","values":[]},{"name":"rootNode","values":[]},{"name":"input","values":[]},{"name":"#inputChanged","description":"Track and use to prvent multiple input change events","values":[]},{"name":"pager","description":"Reference to the pager parent","values":[]},{"name":"pageSize","values":[]},{"name":"pageNumber","values":[]},{"name":"total","values":[]},{"name":"pageCount","values":[]},{"name":"disabled","values":[]},{"name":"parentDisabled","values":[]},{"name":"disabledOverall","values":[]}],"description":{"kind":"markdown","value":"# Ids Pager Component\n\nThe IDS Pager Component is used to provide an interface for browsing paginated data, providing methods of navigating and calculating the pages when provided a baseline of attributes.\n\n## Use Cases\n\n- There is a table, grid, document or other listing of data, which is displayed via pagination.\n- Controlling the pagination or keeping track of what is browsed in a data set.\n- Presenting digestible portions of large data sets.\n\n## Slots\n\n`start` and `end` slots allow you to position content to the left or the right side of the pager panel. If no slot is provided, the child-contents of the pager component will be automatically inserted into the middle slot.\n\n## Sub-Components\n\n**`<ids-pager-button>`**: represents a navigation button within the pager that is flagged with an attribute flag specifying what clicking it accomplishes e.g. `first`, `last`, `previous`, or `next`.\n\n**`<ids-pager-number-list>`**: provides a list of page numbered buttons which a user can click.\n\n**`<ids-pager-input>`**: provides a way for user to input numbers directly for the parent `ids-pager`.\n\n## Settings (ids-pager)\n\n- `page-size` {number} number of items to paginate\n- `page-number` {number} 1-based page index. Should reflect what page number is currently being displayed.\n- `total` {number} number of items the pager tracks\n- `disabled` {boolean} whether or not to disable this pager and all navigation buttons nested inside of it\n\n## Settings (ids-pager-number-list)\n\n- `disabled` {boolean} whether to override the natural or parent-disabled functionality to specifically disable the number buttons in this component.\n- `label` {string} sets the aria label text\n- `step` {number} sets the number of step for page number list\n\n## Settings (ids-pager-button)\n\n- `disabled` {boolean} whether to override natural or parent-disabled functionality to specifically disable this button.\n- `label` {string} sets the aria label text\n\n## Settings (ids-pager-input)\n\n- `disabled` {boolean} whether to override natural or parent-disabled functionality to specifically disable this button.\n\n## Themeable Parts (ids-pager)\n\n**container** - the overall `ids-pager` container\n\n## Themeable Parts (ids-pager-button)\n\n**button** - the `ids-button` component\n**icon** - the `ids-icon` component\n\n## Features (with code samples)\n\nA pager with a data set that represents 10 entries per page, with 100 items overall, with basic navigation buttons, and a user input:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"1\">\n  <ids-pager-button first></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\nA pager with a data set that represents 20 entries per page, with 63 items overall, with basic navigation buttons to go to the next or previous page, and a user input to enter a page number directly:\n```html\n<ids-pager page-size=\"20\" total=\"63\" page-number=\"2\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, surrounded by navigation buttons:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"150\">\n  <section>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-number-list></ids-pager-number-list>\n    <ids-pager-button next></ids-pager-button>\n  </section>\n  <section slot=\"end\">Right-Aligned Content</section>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, with custom steps limit:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"1500\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-number-list step=\"2\"></ids-pager-number-list>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, with show all step buttons (no-limit):\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"500\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-number-list step=\"-1\"></ids-pager-number-list>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with aria-label:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"1500\">\n  <ids-pager-button label=\"Previous page\" previous></ids-pager-button>\n  <ids-pager-number-list label=\"Page {num} of {total}\"></ids-pager-number-list>\n  <ids-pager-button label=\"Next page\" next></ids-pager-button>\n</ids-pager>\n```\n\n### Disabling Functionality\n\nA pager with all navigation buttons explicitly disabled:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\" disabled>\n  <ids-pager-button first></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\nA pager with only the `first` button disabled:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <ids-pager-button first disabled></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\n### With Aligned Sections on the Margins\n\nUser-defined right aligned content:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <section>\n    <ids-pager-button first></ids-pager-button>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-input></ids-pager-input>\n    <ids-pager-button next></ids-pager-button>\n    <ids-pager-button last></ids-pager-button>\n  </section>\n  <section slot=\"end\">\n    user defined right-aligned content\n  </section>\n</ids-pager>\n```\n\nA pager with user-defined content aligned to the left and to the right of the central navigation buttons:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <section slot=\"start\">\n    user defined left-aligned content\n  </section>\n  <section>\n    <ids-pager-button first></ids-pager-button>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-input></ids-pager-input>\n    <ids-pager-button next></ids-pager-button>\n    <ids-pager-button last></ids-pager-button>\n  </section>\n  <section slot=\"end\">\n    user defined right-aligned content\n  </section>\n</ids-pager>\n```\n\n## Keyboard Guidelines\n\n- <kbd>TAB</kbd> Move between `ids-pager-buttons` as well as inputs and `ids-pager-number-list` buttons, and also goes to the next element if at the end of the pager.\n- <kbd>SHIFT + TAB</kbd> should work similar to TAB but in reverse, and also to the previous element if at the beginning of the pager.\n- <kbd>ENTER</kbd> while focusing on the `ids-pager-input` submits the value\n\n## Usage Tips\n\n- the `page-size`, `page-number` and `total` are only useful in the context of the `ids-pager`. They should not be controlled at the level of the interactive buttons or the number list.\n- Content can be laid out for additional buttons/interactions/etc other than the `ids-pager-button`, but the standard navigation and user input components should be used wherever possible.\n- the page count on the pager can be accessed on the `ids-pager` element at any time via the `pageCount` property via JS for example:\n```js\n  const idsElement = document.querySelector('ids-pager');\n  const pageCount = idsElement.pageCount;\n```\n\n## Accessibility\n\n- 1.4.3 Contrast (Minimum) - there should be enough contrast on the background which the wizard resides on in the page.\n\n## Regional Considerations\n\nAll elements will flip to the alternate side in Right To Left mode, including user defined content. Alignment on left and right aligned slots will also flip.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- This did not exist as a standalone component\n- Datagrid paging has new options - see data grid docs\n\n**4.x to 5.x**\n\n- Pager is now a web component called ids-pager\n- Only has a standalone version now (simplified)\n- If using properties/settings are now attributes.\n- Markup has changed to a custom element `<ids-pager>`\n- If using events events are now plain JS events for example\n- Can now be imported as a single JS file and used with encapsulated styles\n- content is automatically managed/aligned via nesting controls inside of `<ids-pager-section>`\n- pagination is controlled via attributes on the `<ids-pager>` (`page-number`, `total`, `page-size`), and manages buttons and controls automatically.\n- buttons are managed by `<ids-pager-button>` with given functionality flags e.g. `<ids-pager-button start>`.\n- input box can be inserted `<ids-pager-input>`, and a number list with `<ids-pager-number-list>`\n"}},{"name":"ids-pager-number-list","attributes":[{"name":"DEFAULT_STEP","values":[]},{"name":"DEFAULT_PAGE_SIZE","values":[]},{"name":"rootNode","values":[]},{"name":"pager","description":"Reference to the pager parent","values":[]},{"name":"pageSize","values":[]},{"name":"pageNumber","values":[]},{"name":"total","values":[]},{"name":"pageCount","values":[]},{"name":"disabled","values":[]},{"name":"parentDisabled","values":[]},{"name":"disabledOverall","values":[]},{"name":"label","description":"Set the aria label text","values":[]},{"name":"step","description":"Set the number of step for page number list","values":[]}],"description":{"kind":"markdown","value":"# Ids Pager Component\n\nThe IDS Pager Component is used to provide an interface for browsing paginated data, providing methods of navigating and calculating the pages when provided a baseline of attributes.\n\n## Use Cases\n\n- There is a table, grid, document or other listing of data, which is displayed via pagination.\n- Controlling the pagination or keeping track of what is browsed in a data set.\n- Presenting digestible portions of large data sets.\n\n## Slots\n\n`start` and `end` slots allow you to position content to the left or the right side of the pager panel. If no slot is provided, the child-contents of the pager component will be automatically inserted into the middle slot.\n\n## Sub-Components\n\n**`<ids-pager-button>`**: represents a navigation button within the pager that is flagged with an attribute flag specifying what clicking it accomplishes e.g. `first`, `last`, `previous`, or `next`.\n\n**`<ids-pager-number-list>`**: provides a list of page numbered buttons which a user can click.\n\n**`<ids-pager-input>`**: provides a way for user to input numbers directly for the parent `ids-pager`.\n\n## Settings (ids-pager)\n\n- `page-size` {number} number of items to paginate\n- `page-number` {number} 1-based page index. Should reflect what page number is currently being displayed.\n- `total` {number} number of items the pager tracks\n- `disabled` {boolean} whether or not to disable this pager and all navigation buttons nested inside of it\n\n## Settings (ids-pager-number-list)\n\n- `disabled` {boolean} whether to override the natural or parent-disabled functionality to specifically disable the number buttons in this component.\n- `label` {string} sets the aria label text\n- `step` {number} sets the number of step for page number list\n\n## Settings (ids-pager-button)\n\n- `disabled` {boolean} whether to override natural or parent-disabled functionality to specifically disable this button.\n- `label` {string} sets the aria label text\n\n## Settings (ids-pager-input)\n\n- `disabled` {boolean} whether to override natural or parent-disabled functionality to specifically disable this button.\n\n## Themeable Parts (ids-pager)\n\n**container** - the overall `ids-pager` container\n\n## Themeable Parts (ids-pager-button)\n\n**button** - the `ids-button` component\n**icon** - the `ids-icon` component\n\n## Features (with code samples)\n\nA pager with a data set that represents 10 entries per page, with 100 items overall, with basic navigation buttons, and a user input:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"1\">\n  <ids-pager-button first></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\nA pager with a data set that represents 20 entries per page, with 63 items overall, with basic navigation buttons to go to the next or previous page, and a user input to enter a page number directly:\n```html\n<ids-pager page-size=\"20\" total=\"63\" page-number=\"2\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, surrounded by navigation buttons:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"150\">\n  <section>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-number-list></ids-pager-number-list>\n    <ids-pager-button next></ids-pager-button>\n  </section>\n  <section slot=\"end\">Right-Aligned Content</section>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, with custom steps limit:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"1500\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-number-list step=\"2\"></ids-pager-number-list>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, with show all step buttons (no-limit):\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"500\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-number-list step=\"-1\"></ids-pager-number-list>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with aria-label:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"1500\">\n  <ids-pager-button label=\"Previous page\" previous></ids-pager-button>\n  <ids-pager-number-list label=\"Page {num} of {total}\"></ids-pager-number-list>\n  <ids-pager-button label=\"Next page\" next></ids-pager-button>\n</ids-pager>\n```\n\n### Disabling Functionality\n\nA pager with all navigation buttons explicitly disabled:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\" disabled>\n  <ids-pager-button first></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\nA pager with only the `first` button disabled:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <ids-pager-button first disabled></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\n### With Aligned Sections on the Margins\n\nUser-defined right aligned content:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <section>\n    <ids-pager-button first></ids-pager-button>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-input></ids-pager-input>\n    <ids-pager-button next></ids-pager-button>\n    <ids-pager-button last></ids-pager-button>\n  </section>\n  <section slot=\"end\">\n    user defined right-aligned content\n  </section>\n</ids-pager>\n```\n\nA pager with user-defined content aligned to the left and to the right of the central navigation buttons:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <section slot=\"start\">\n    user defined left-aligned content\n  </section>\n  <section>\n    <ids-pager-button first></ids-pager-button>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-input></ids-pager-input>\n    <ids-pager-button next></ids-pager-button>\n    <ids-pager-button last></ids-pager-button>\n  </section>\n  <section slot=\"end\">\n    user defined right-aligned content\n  </section>\n</ids-pager>\n```\n\n## Keyboard Guidelines\n\n- <kbd>TAB</kbd> Move between `ids-pager-buttons` as well as inputs and `ids-pager-number-list` buttons, and also goes to the next element if at the end of the pager.\n- <kbd>SHIFT + TAB</kbd> should work similar to TAB but in reverse, and also to the previous element if at the beginning of the pager.\n- <kbd>ENTER</kbd> while focusing on the `ids-pager-input` submits the value\n\n## Usage Tips\n\n- the `page-size`, `page-number` and `total` are only useful in the context of the `ids-pager`. They should not be controlled at the level of the interactive buttons or the number list.\n- Content can be laid out for additional buttons/interactions/etc other than the `ids-pager-button`, but the standard navigation and user input components should be used wherever possible.\n- the page count on the pager can be accessed on the `ids-pager` element at any time via the `pageCount` property via JS for example:\n```js\n  const idsElement = document.querySelector('ids-pager');\n  const pageCount = idsElement.pageCount;\n```\n\n## Accessibility\n\n- 1.4.3 Contrast (Minimum) - there should be enough contrast on the background which the wizard resides on in the page.\n\n## Regional Considerations\n\nAll elements will flip to the alternate side in Right To Left mode, including user defined content. Alignment on left and right aligned slots will also flip.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- This did not exist as a standalone component\n- Datagrid paging has new options - see data grid docs\n\n**4.x to 5.x**\n\n- Pager is now a web component called ids-pager\n- Only has a standalone version now (simplified)\n- If using properties/settings are now attributes.\n- Markup has changed to a custom element `<ids-pager>`\n- If using events events are now plain JS events for example\n- Can now be imported as a single JS file and used with encapsulated styles\n- content is automatically managed/aligned via nesting controls inside of `<ids-pager-section>`\n- pagination is controlled via attributes on the `<ids-pager>` (`page-number`, `total`, `page-size`), and manages buttons and controls automatically.\n- buttons are managed by `<ids-pager-button>` with given functionality flags e.g. `<ids-pager-button start>`.\n- input box can be inserted `<ids-pager-input>`, and a number list with `<ids-pager-number-list>`\n"}},{"name":"ids-pager","attributes":[{"name":"DEFAULT_STEP","values":[]},{"name":"DEFAULT_PAGE_SIZE","values":[]},{"name":"elements","values":[]},{"name":"disabled","values":[]},{"name":"pageSize","values":[]},{"name":"pageNumber","values":[]},{"name":"pageCount","values":[]},{"name":"step","description":"Set the number of step for page number list","values":[]},{"name":"total","values":[]},{"name":"type","values":[]}],"description":{"kind":"markdown","value":"# Ids Pager Component\n\nThe IDS Pager Component is used to provide an interface for browsing paginated data, providing methods of navigating and calculating the pages when provided a baseline of attributes.\n\n## Use Cases\n\n- There is a table, grid, document or other listing of data, which is displayed via pagination.\n- Controlling the pagination or keeping track of what is browsed in a data set.\n- Presenting digestible portions of large data sets.\n\n## Slots\n\n`start` and `end` slots allow you to position content to the left or the right side of the pager panel. If no slot is provided, the child-contents of the pager component will be automatically inserted into the middle slot.\n\n## Sub-Components\n\n**`<ids-pager-button>`**: represents a navigation button within the pager that is flagged with an attribute flag specifying what clicking it accomplishes e.g. `first`, `last`, `previous`, or `next`.\n\n**`<ids-pager-number-list>`**: provides a list of page numbered buttons which a user can click.\n\n**`<ids-pager-input>`**: provides a way for user to input numbers directly for the parent `ids-pager`.\n\n## Settings (ids-pager)\n\n- `page-size` {number} number of items to paginate\n- `page-number` {number} 1-based page index. Should reflect what page number is currently being displayed.\n- `total` {number} number of items the pager tracks\n- `disabled` {boolean} whether or not to disable this pager and all navigation buttons nested inside of it\n\n## Settings (ids-pager-number-list)\n\n- `disabled` {boolean} whether to override the natural or parent-disabled functionality to specifically disable the number buttons in this component.\n- `label` {string} sets the aria label text\n- `step` {number} sets the number of step for page number list\n\n## Settings (ids-pager-button)\n\n- `disabled` {boolean} whether to override natural or parent-disabled functionality to specifically disable this button.\n- `label` {string} sets the aria label text\n\n## Settings (ids-pager-input)\n\n- `disabled` {boolean} whether to override natural or parent-disabled functionality to specifically disable this button.\n\n## Themeable Parts (ids-pager)\n\n**container** - the overall `ids-pager` container\n\n## Themeable Parts (ids-pager-button)\n\n**button** - the `ids-button` component\n**icon** - the `ids-icon` component\n\n## Features (with code samples)\n\nA pager with a data set that represents 10 entries per page, with 100 items overall, with basic navigation buttons, and a user input:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"1\">\n  <ids-pager-button first></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\nA pager with a data set that represents 20 entries per page, with 63 items overall, with basic navigation buttons to go to the next or previous page, and a user input to enter a page number directly:\n```html\n<ids-pager page-size=\"20\" total=\"63\" page-number=\"2\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, surrounded by navigation buttons:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"150\">\n  <section>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-number-list></ids-pager-number-list>\n    <ids-pager-button next></ids-pager-button>\n  </section>\n  <section slot=\"end\">Right-Aligned Content</section>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, with custom steps limit:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"1500\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-number-list step=\"2\"></ids-pager-number-list>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with numbered-page-buttons for navigation, with show all step buttons (no-limit):\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"500\">\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-number-list step=\"-1\"></ids-pager-number-list>\n  <ids-pager-button next></ids-pager-button>\n</ids-pager>\n```\n\nA pager with aria-label:\n```html\n<ids-pager page-size=\"20\" page-number=\"10\" total=\"1500\">\n  <ids-pager-button label=\"Previous page\" previous></ids-pager-button>\n  <ids-pager-number-list label=\"Page {num} of {total}\"></ids-pager-number-list>\n  <ids-pager-button label=\"Next page\" next></ids-pager-button>\n</ids-pager>\n```\n\n### Disabling Functionality\n\nA pager with all navigation buttons explicitly disabled:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\" disabled>\n  <ids-pager-button first></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\nA pager with only the `first` button disabled:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <ids-pager-button first disabled></ids-pager-button>\n  <ids-pager-button previous></ids-pager-button>\n  <ids-pager-input></ids-pager-input>\n  <ids-pager-button next></ids-pager-button>\n  <ids-pager-button last></ids-pager-button>\n</ids-pager>\n```\n\n### With Aligned Sections on the Margins\n\nUser-defined right aligned content:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <section>\n    <ids-pager-button first></ids-pager-button>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-input></ids-pager-input>\n    <ids-pager-button next></ids-pager-button>\n    <ids-pager-button last></ids-pager-button>\n  </section>\n  <section slot=\"end\">\n    user defined right-aligned content\n  </section>\n</ids-pager>\n```\n\nA pager with user-defined content aligned to the left and to the right of the central navigation buttons:\n```html\n<ids-pager page-size=\"10\" total=\"100\" page-number=\"2\">\n  <section slot=\"start\">\n    user defined left-aligned content\n  </section>\n  <section>\n    <ids-pager-button first></ids-pager-button>\n    <ids-pager-button previous></ids-pager-button>\n    <ids-pager-input></ids-pager-input>\n    <ids-pager-button next></ids-pager-button>\n    <ids-pager-button last></ids-pager-button>\n  </section>\n  <section slot=\"end\">\n    user defined right-aligned content\n  </section>\n</ids-pager>\n```\n\n## Keyboard Guidelines\n\n- <kbd>TAB</kbd> Move between `ids-pager-buttons` as well as inputs and `ids-pager-number-list` buttons, and also goes to the next element if at the end of the pager.\n- <kbd>SHIFT + TAB</kbd> should work similar to TAB but in reverse, and also to the previous element if at the beginning of the pager.\n- <kbd>ENTER</kbd> while focusing on the `ids-pager-input` submits the value\n\n## Usage Tips\n\n- the `page-size`, `page-number` and `total` are only useful in the context of the `ids-pager`. They should not be controlled at the level of the interactive buttons or the number list.\n- Content can be laid out for additional buttons/interactions/etc other than the `ids-pager-button`, but the standard navigation and user input components should be used wherever possible.\n- the page count on the pager can be accessed on the `ids-pager` element at any time via the `pageCount` property via JS for example:\n```js\n  const idsElement = document.querySelector('ids-pager');\n  const pageCount = idsElement.pageCount;\n```\n\n## Accessibility\n\n- 1.4.3 Contrast (Minimum) - there should be enough contrast on the background which the wizard resides on in the page.\n\n## Regional Considerations\n\nAll elements will flip to the alternate side in Right To Left mode, including user defined content. Alignment on left and right aligned slots will also flip.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- This did not exist as a standalone component\n- Datagrid paging has new options - see data grid docs\n\n**4.x to 5.x**\n\n- Pager is now a web component called ids-pager\n- Only has a standalone version now (simplified)\n- If using properties/settings are now attributes.\n- Markup has changed to a custom element `<ids-pager>`\n- If using events events are now plain JS events for example\n- Can now be imported as a single JS file and used with encapsulated styles\n- content is automatically managed/aligned via nesting controls inside of `<ids-pager-section>`\n- pagination is controlled via attributes on the `<ids-pager>` (`page-number`, `total`, `page-size`), and manages buttons and controls automatically.\n- buttons are managed by `<ids-pager-button>` with given functionality flags e.g. `<ids-pager-button start>`.\n- input box can be inserted `<ids-pager-input>`, and a number list with `<ids-pager-number-list>`\n"}},{"name":"ids-picker-popup-common","description":{"kind":"markdown","value":"# Ids Picker Popup\n\nIdsPickerPopup serves as a base component for Picker-type components to be built, such as [`IdsDatePicker`](../ids-date-picker/README.md).  This component encapsulates an [`IdsPopup`](../ids-popup/README.md) along with several helper mixins that manage attachment to other elements, triggering events, show/hide behavior, and more.\n"}},{"name":"ids-picker-popup","attributes":[{"name":"vetoableEventTypes","values":[]},{"name":"visible","values":[]}],"description":{"kind":"markdown","value":"# Ids Picker Popup\n\nIdsPickerPopup serves as a base component for Picker-type components to be built, such as [`IdsDatePicker`](../ids-date-picker/README.md).  This component encapsulates an [`IdsPopup`](../ids-popup/README.md) along with several helper mixins that manage attachment to other elements, triggering events, show/hide behavior, and more.\n"}},{"name":"ids-pie-chart","attributes":[{"name":"initialized","values":[]},{"name":"svg","values":[]},{"name":"svgContainer","values":[]},{"name":"emptyMessage","values":[]},{"name":"legend","values":[]},{"name":"percents","values":[]},{"name":"totals","values":[]},{"name":"datasource","description":"Reference to datasource API","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"onLocaleChange","values":[]},{"name":"onLanguageChange","values":[]},{"name":"legendFormatter","description":"Set the format on the legend items","values":[]},{"name":"viewBoxSize","description":"Viewbox size (square)","values":[]},{"name":"selectionElements","description":"Return chart elements that get selection","values":[]},{"name":"#sliceAngles","description":"Hold the angles for each slice","values":[]},{"name":"#tooltipDotSize","description":"Hold the size for tooltip dot","values":[]},{"name":"#tooltipDots","description":"Hold the tooltip dots","values":[]},{"name":"donut","description":"Sets the chart to donut chart","values":[]},{"name":"donutText","description":"Sets the charts middle text","values":[]},{"name":"height","description":"The width of the chart (in pixels) or 'inherit' from the parent","values":[]},{"name":"width","description":"The width of the chart (in pixels) or 'inherit' from the parent","values":[]},{"name":"data","description":"Set the data array of the chart","values":[]},{"name":"colors","description":"Utility function to get the colors series being used in this chart","values":[]},{"name":"animated","description":"Set the animation on/off","values":[]},{"name":"suppressTooltips","description":"Set the tooltips on/off","values":[]},{"name":"DEFAULT_SELECTABLE","values":[]}],"description":{"kind":"markdown","value":"# Ids Pie/Donut Chart Component\n\n## Description\n\nA pie chart (or a circle chart) is a circular statistical graphic which is divided into slices to illustrate numerical proportion. In a pie chart, the arc length of each slice is proportional to the quantity it represents.\n\nThe pie chart can be made into a donut chart by setting the `donut` setting. A donut chart is almost identical to a pie chart, but the center is cut out (hence the name `donut`). Donut charts are also used to show proportions of categories that make up the whole, but the center can also be used to display a data label.\n\nYou can control the size of the pie/donut chart by setting the size of the parent element the pie chart lives in. This may include possibly using an inset margin in some cases.\n\nHovering a chart slice with show a tooltip with the slice's value. This data is also shown as a percentage in the legend.\n\n## Use Cases\n\n- Showcasing part-to-whole relationships.\n- Compare any type of content or data that can be broken down into comparative categories Revenue, demographics, market shares, survey results\n- Display different data points that total 100%\n\n## Usage Considerations\n\n- You don’t want to display more than six categories of data or the pie chart can be difficult to read and compare the relative size of slices.\n- If you have a lot of smaller slices this can be difficult to read.\n- Hover tooltips should only be used to reveal additional non-critical information.\n\n## Terminology\n\n- **Slice**: The pieces of the pie in a pie style chart represented by an individual data point\n- **Arcs**: The lengths of the slices in a donut style chart represented by an individual data point\n- **Donut**: The center is cut out on a pie chart too look like a donut\n\n## Features (With Code Examples)\n\nAn pie chart is defined with the custom element. By default it will size to the parent element but a width and height can also be set.\n\n```html\n<ids-pie-chart title=\"A pie chart showing component usage\" id=\"index-example\" suppress-tooltips=\"true\"></ids-pie-chart>\n```\n\nDatasets can be added to the pie chart by passing in an array of objects. Each object must have a `data` and object with `name` and `values` to form the data points. Other information like the `color`, `tooltip` or accessible `pattern` can be provided.\n\n```js\nconst data = [{\n   \"data\": [{\n     \"name\": \"Item A\",\n     \"tooltip\": \"<b>Item A</b> ${percent}%\",\n     \"value\": 10.1,\n     \"pattern\": \"mesh\"\n   },{\n     \"name\": \"Item B\",\n     \"tooltip\": \"<b>Item B</b> ${value}\",\n     \"value\": 12.2,\n     \"pattern\": \"mixed\"\n   }, {\n     \"name\": \"Item C\",\n     \"tooltip\": \"<b>Item C</b> ${value}\",\n     \"value\": 14.35,\n     \"pattern\": \"lines\"\n   }];\n\ndocument.querySelector('ids-pie-chart').data = lineData;\n```\n\nA chart can also be a `donut`. If used provided or `donut-text` for the center. Be consice since there isnt a lot of room.\n\n## Class Hierarchy\n\n- IdsPieChart\n  - IdsElement\n- Mixins\n  IdsChartSelectionMixin\n  IdsChartLegendMixin\n  IdsLocaleMixin\n  IdsEventsMixin\n\n## Data Settings\n\nThe following data attributes can be used on the data passed to a chart. If using typescript the type is `IdsPieChartData`.\n\n- `data` {object} A data group with one or more `name` and `value` pairs.\n- `name` {string} The name for the legend text and tooltip representing the slice.\n- `value` {number} The value of the slice, calculated to a whole of 100% with the other data points.\n- `color` {string} The color of this axis group. This can be either a hex value for example `#FF0000` or a color name like `red` or an ids variable like `var(--ids-color-azure-20)`.\n- `tooltip` {string} The custom tooltip string (as static text). See the tooltip section for more information.\n- `pattern` {string} The name of the pattern to show instead of a solid color. See the pattern section for more information.\n- `patternColor` {string} The color to show for the pattern. This can be either a hex value for example `#FF0000` or a color name like `red` or an ids variable like `var(--ids-color-azure-20)`.\n\n## Settings\n\n- `legendPlacement` {string} By default the legend will be placed to the right of the chart but it can also be set to `bottom` or `top` or `left`.\n- `animated` {boolean} Disable the animation of the chart by setting this to false.\n- `data` {Array} The data points to use as described previously\n- `donut` {boolean} Set to true to make a donut chart.\n- `donutText` {string} The text to showin the middle of the chart. Be consice since there isnt a lot of room.\n- `height` {number} To set the height of the chart to a specific value in pixels.\n- `width` {number} To set the width of the chart to a specific value in pixels.\n- `title` {string} The topic of the chart. This will be used only for accessibility / screen readers and should always be set.\n- `suppress-tooltips` {boolean} Disable the tooltips (they are currently experimental).\n- `legendFormatter` {Function} A function to format the legend text for each data point.\n- `selectable` {boolean} Sets the selection mode.\n\nHere is an example of a pie chart with a legendFormatter.\n\n```js\nchart.legendFormatter = (slice, data) => {\n  return `${slice.name}: ${slice.value}`;\n}\n```\n\n## Patterns\n\nThe pie/donut chart includes patterns that can be used to assist color blind users. To use a pattern specify it on the `pattern` attribute it in the data. You can also set a `patternColor` otherwise it will use the default color for that item in the series.\n\n```js\nconst data: [{\n  \"name\": \"Item C\",\n  \"tooltip\": \"<b>Item C</b> ${value}\",\n  \"value\": 14.35,\n  \"pattern\": \"lines\"\n}, {\n  \"name\": \"Item D\",\n  \"tooltip\": \"<b>Item D</b> ${value}\",\n  \"value\": 15.6,\n  \"pattern\": \"pipes\"\n}];\n```\n\nThe following patterns are supported:\n\n```sh\narrows\nboxes\ncheckers\npatches\ncircles\nexes\ndiamonds\ndots\nstars\nmixed\nsquares\nhex\nbig-hex\nintersect\nlines\nbars\npipes\nmesh\npluses\nwaves\nbig-waves\n```\n\nHowever some look better than others when zoomed. So suggest:\n\n```sh\nmesh\ncircles\nboxes\ndots\nmixed\nlines\npipes\n```\n\n## Tooltip Customizations\n\nYou can customize the tooltip by changing some of the API settings. For just a static tooltip you can use the `tooltip` setting in the data at the same place as the `name` property.\n\nIf you need to change which items get tooltips you can override `tooltipElements` getter.\n\n```js\ntooltipElements() {\n  return this.container.querySelectorAll('circle'); // return the ones that get events\n}\n\nIf you need to change the tooltip contents you can override the `tooltipTemplate` function.\n\n```js\ntooltipTemplate() {\n  return '<b>${label}</b> ${value}';\n}\n```\n\nOr you can modify the tooltip in the slot.\n\n## Events\n\n- `rendered` Fires each time the chart is rendered or rerendered (on resize).\n- `beforeselected` Fires before selected, you can return false in the response to veto.\n- `selected` Fires after selected.\n- `beforedeselected` Fires before deselected, you can return false in the response to veto.\n- `deselected` Fires after deselected.\n\n## Methods\n\n- `rerender` Re render and reanimate the chart.\n- `tooltipData` Override the data for the tooltip.\n- `tooltipTemplate` Override the tooltip markup\n\n## Themeable Parts\n\n- `container` the outer container div element\n- `chart` the svg outer element\n- `circles` each circle element in the chart\n\n## Animation\n\nThe slices animate clockwise with a cubic bezier curve at 600ms.\n\n## States and Variations\n\n- selected (future)\n- disabled (future)\n\n## Keyboard Guidelines\n\nThe legend items are focusable and can be navigated with the tabs keys.\n\n## Responsive Guidelines\n\n- The area chart will fill the size of its parent container and readjust when the window is resized to the parent using css/svg viewbox\n\n## Converting from Previous Versions (Breaking Changes)\n\n**4.x to 5.x**\n- The pie chart was added after version 3.6 so new in 4.x\n\n**4.x to 5.x**\n- Pie component has changed to a custom element `<ids-pie-chart></ids-pie-chart>`\n- Donut component has been combined with a setting `<ids-pie-chart donut=\"true\" donut-text=\"Some Test\"></ids-pie-chart>`\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Accessibility Guidelines\n\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element.\n- Markup is to treat the pie slices as a list `role=\"list\"`. The pie slices are `role=\"listitem\"`. The tab index is not visible to the user as it is not needed and can be navigated with a screen reader.\n- Using voice over the sequence is to\n  - Navigate to the parent element above it  or parent page\n  - Hold <kbd>caps lock + left/right arrow</kbd>\n  - You will hear the title , followed by number of items and then each list item\n  - Proceed to use <kbd>caps lock + left/right arrow</kbd> will move through the list items announcing the values\n- The contrast and actual colors can be a concern for visibility impaired and color blind people. However, you can customize the color by passing higher contrast colors. Or you can add a pattern to the color with the `pattern` attribute.\n\n## Regional Considerations\n\nChart labels should be localized in the current language. The chart will flip in RTL mode. Note that in RTL languages clockwise is the same so the chart slices / arcs are not rotated.  For some color blind users the svg patterns can be used.\n"}},{"name":"ids-popup-attributes","description":{"kind":"markdown","value":"# Ids Popup Component\n\nThe IDS Popup Component allows for the placement of any HTML content in a fixed/absolute-positioned container anywhere on a page.  The component provides API for setting coordinates, or aligning the container in relation to a \"parent\" element on the page.  Additional API exists for modifying alignment, visibility, and controlling animation.\n\nThis component is a building-block component for many \"placeable\" IDS Components, such as the [Popup Menu](../ids-popup-menu/README.md) and [Modal](../ids-modal/README.md)\n\n## Use Cases\n\n- Placing HTML content using X/Y coordinates\n- Placing HTML content against a target element and using X/Y offsets\n\n## Terminology\n\n### Alignment\n\n**Align Target** Defines an external element that serves as a \"triggering\" element for the Popup.\n**Align Edge** Also called the \"primary alignment\", given two alignment values, the first one is the edge of an Align Target that the Popup will be placed against immediately. For example \"bottom\" will cause the Popup to be aligned at the bottom of the Align Target.\n**Primary Alignment** See \"Align Edge\"\n**Secondary Alignment** Given two alignment values, the secondary alignment is optional, and will cause the Popup to line up the given edge with the Align Target's given edge.  For example, given `top, left`, the secondary alignment will cause the Popup to align primarily to the top of the Align Target, but will also line up both the Popup and the Align Targets' left edges.\n\n### Other\n\n**Arrow** Popups can optionally display arrows that can point to content when used with an Align Target.\n**Arrow Target** The element that a Popup's Arrow will point toward.  This defaults to an Align Target, but can also be defined separately.\n**Bleeds** Determines when Popups are allowed to exist outside their defined Containing Element.  A Popup that does not bleed will remain contained, no matter what coordinates/offsets are provided.\n**Containing Element** Popups are confined to a contained area inside of a page.  This area may be the entire document body,\nan [IDS Container](../ids-container/README.md), or a custom-defined element.  If bleeding is disabled, the Popup will never cross the boundaries of the container.\n**Coordinates** When placed directly in a page (not aligned against an element), a Popup uses its provided x/y values as coordinates as if plotted on a graph.\n**Offsets** When placed against a parent element, a Popup uses its provided x/y values as offsets from the base position detected.\n**Type** Defines the style of Popup that can be used.  There are several different display types, the most common one being `menu`.\n\n## Themeable Parts\n\n- `popup` allows you to further style or adjust the outer popup element\n- `arrow` allows you to adjust the arrow element\n\n## Features (with code samples)\n\nCreating a Context-menu style that would open on click might look like the following:\n\n```html\n<ids-popup id=\"my-popup\" x=\"0\" y=\"10\" align=\"top, left\">\n  <div slot=\"content\">My Popup</div>\n</ids-popup>\n```\n\nTo create a Popup that appears to align itself against a button, you could do the following:\n\n```html\n<ids-popup id=\"my-popup\" x=\"10\" y=\"10\" align=\"top, left\" alignTarget=\"#my-button\">\n  <div slot=\"content\">My Popup</div>\n</ids-popup>\n\n...\n\n<ids-button id=\"my-button\">\n  <span>My Button</span>\n</ids-button>\n```\n\n### Using Visibility\n\nDisplay the Popup using the `visible` attribute:\n\n```html\n<ids-popup id=\"my-popup\"  x=\"10\" y=\"10\" align=\"top, left\" alignTarget=\"#my-button\" visible=\"true\">\n    <div slot=\"content\">My Popup</div>\n</ids-popup>\n```\n\nProgrammatically, you can use the `visible` JS property:\n\n```js\nconst popup = document.querySelector('#my-popup');\npopup.visible = true;\n```\n\n... or explicitly call `show()` or `hide()` methods:\n\n```js\nconst popup = document.querySelector('#my-popup');\nawait popup.show();\n\n// close\nawait popup.hide();\n```\n\nWhen the Popup is visible, it's possible to tell the Popup to re-render its position by using `place()`:\n\n```js\nconst popup = document.querySelector('#my-popup');\nawait popup.place();\n```\n\n### Size\n\nIdsPopup size can be controlled with the `max-height`, `width` and `height` properties.  These are convenience properties that set CSS-friendly size values on the IdsPopup's shadow root container:\n\n```html\n<ids-popup id=\"my-popup\" width=\"100%\" height=\"100%\" max-height=\"550px\" x=\"10\" y=\"10\" align=\"top, left\" alignTarget=\"#my-button\" visible=\"true\">\n    <div slot=\"content\">My Popup</div>\n</ids-popup>\n```\n\n### Place\n\nThe Popup's coordinates/offsets can be set individually.  The action of using the x/y setters will change the stored position internally, but will not automatically be rendered.  Also, the position will not be rendered if the Popup is not visible.\n\nTo initially set a Popup's position, you can use the following:\n\n```js\nconst popup = document.querySelector('#my-popup');\npopup.x = 100;\npopup.y = 200;\nawait popup.show();\nawait popup.place();\n```\n\nIt's also possible to set both coordinate values, make the Popup visible, and render the placement in one pass using `setPosition()`:\n\n```js\nconst popup = document.querySelector('#my-popup');\npopup.setPosition(100, 200, true, true);\n```\n\n### Position Styles\n\nThere are three position styles:\n\n`fixed` - Uses simpler algorithms using `position: fixed;` and ignores container scrolling.\n`absolute` - Uses `position: fixed;` and accounts for container scrolling.\n`viewport` - This ignores the x/y offsets and positions the Popup directly in the middle of the viewport.  This is used for [Modals](../ids-modal/README.md)\n\n### Animation Styles\n\nIf the `animated` property is set, the `animation-styles` available are:\n\n- `fade`: animates in/out using a simple fade transition.\n- `scale-in`: Grows in from the center, shrinks out to the center on top of a simple fade transition. This is used on [Modals](../ids-modal/README.md)\n\n### Using Arrows\n\nSome Popup styles need to \"point\" at their triggering element for context, such as [Tooltips](../ids-tooltip/README.md).  To create a Popup that uses an arrow, simply tell it which way to point:\n\n```html\n<ids-popup id=\"my-popup\" x=\"10\" y=\"10\" align=\"top, left\" alignTarget=\"#my-button\" arrow=\"top\">\n  <div slot=\"content\">My Popup</div>\n</ids-popup>\n<ids-button id=\"my-button\">\n  <span>My Button</span>\n</ids-button>\n```\n\nIn this configuration, if a Popup is given offset value that corresponds to the `alignEdge` is not greater than the size of the Popup, the arrow's placement will be autocorrect to try and stay in alignment with the `arrowTarget`. If the offset value is greater, the arrow will hide automatically.\n\n### Using Bleeds and Containment\n\nPopups can be configured to remain inside of a set boundary element, referred to as a Containing Element.  If defined, the Popup will not cross the boundaries the containing element.  An example of this functionality is the prevention of an [IdsPopupMenu](../ids-popup-menu/README.md) from appearing to be cut off by the browser's edges.\n\nUse of a containing element could be configured in this manner:\n\n```html\n<ids-popup id=\"my-popup\" x=\"0\" y=\"0\" align=\"top, left\">\n  <div slot=\"content\" style=\"width: 100px; height: 100px;\">My Popup</div>\n</ids-popup>\n\n<div id=\"my-container\" style=\"width: 500px; height: 500px;\"></div>\n```\n```js\nconst popup = document.querySelector('#my-popup');\nconst container = document.querySelector('#my-container');\npopup.containingElem = container;\n```\n\nAfter setting the `containingElem` property, setting coordinates will place the Popup in a position that accounts for not crossing the container's edges.  For example:\n\n```js\npopup.x = 500;\n```\n\nGiven this value, the Popup will attempt to set the X coordinate at 500px using the default alignment of `top, left`, which places the left-most edge of the Popup at 500px.  Placing in this position would cross the boundary of the container, so instead the Popup will be nudged back into the containing element entirely, ending up with an X placement around 400px.\n\nIt's also possible to disable the check for bleeding, if necessary:\n\n```js\npopup.bleed = false;\n```\n\nRunning this immediately after our example above will cause the Popup to actually be placed at 500px.\n\nIf we decide to remove containment by the element, we can simply set it back to it's default:\n\n```js\npopup.containingElem = document.querySelector('ids-container');\n```\n\n### Alter placement programmatically\n\nIn some cases, you may want to slightly adjust the values provided by the built-in placement methods.  The `onPlace` callback can be implemented for this purpose:\n\n```js\npopup.onPlace = (popupRect) => {\n    popupRect.x += 100;\n    popupRect.y += 50;\n    return popupRect;\n}\n```\n\nThe `popupRect` argument provides access to the editable [`DOMRect`](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect) object that the IdsPopup uses to place itself.  The callback returns the DOMRect with modified values.\n\n#### onXYSwitch callback\n\nWhen using `alignTarget` and offsets, occasionally it may be necessary for a 'top' or 'bottom'-aligned IdsPopup to switch axes and become aligned 'right' or 'left', for the purposes of remaining inside a container area.  After this occurs, an `onXYSwitch` callback is fired with an object containing several parameters.  You can modify this object and return it to provide additional changes to the placement algorithm:\n\n- `x/y`: number values that will be used for offsets\n- `flip`: boolean true if a flip occurs at all\n- `shouldSwitchXY`: boolean true if the flip that occured also swiched the x/y axes\n- `targetEdge`: the original target edge\n- `oppositeEdge`: the edge that will be used in the case of a normal, same-axis flip\n\nFor example, this occurs when [`IdsDatePicker`]('../ids-date-picker/README.md')'s popup flips to align on the X axis, which requires more space away from its target.\n\n## Usage Tips\n\n- When making a Popup that is placed in reference to an adjacent element, it must be placed AFTER it in the DOM. Placing it BEFORE the adjacent element can cause its placement to be incorrect on its first render.\n- When using an `alignTarget`, also using the `arrow` setting and pointing it in the direction of the `alignTarget` can help contextualize the relationship between the two elements.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Place was added in v4.2.2\n- All separate placement/popup logic was replaced with Place internally (not called)\n- Place could be invoked on a custom component with `$('#my-element').place();`\n\n**4.x to 5.x**\n\n- Place is now a custom element `<ids-popup></ids-popup>`\n- This is the new base component to be used for building Popupmenu, Tooltip, Modal, and any other component that requires placement of a absolute/fixed-position element.\n- All options/settings are now attributes: x, y, align, alignX, alignY, alignEdge, alignTarget, animated, visible.\n- Popup is now driven by its own HTMLElement rather than a being a behavior applied to any element: `<ids-popup x=\"0\" y=\"0\" align=\"top, left\">My Popup</ids-popup>`\n- Can now be imported as a single JS file and used with encapsulated styles\n"}},{"name":"ids-popup","attributes":[{"name":"shouldUpdate","values":[]},{"name":"isFlipped","values":[]},{"name":"scrollParentElem","values":[]},{"name":"#mo","description":"Watches for changes","values":[]},{"name":"#ro","description":"Watches for resizing that occurs whenever the page changes dimensions, and re-applies some\ncoordinate-specific values to the Popup's inner container.","values":[]},{"name":"innerRect","values":[]},{"name":"wrapper","values":[]},{"name":"#alignTarget","values":[]},{"name":"alignTarget","description":"Sets the element to align with via a css selector","values":[]},{"name":"#align","values":[]},{"name":"align","values":[]},{"name":"#alignX","values":[]},{"name":"alignX","description":"Strategy for the parent X alignment (see the ALIGNMENTS_X array)","values":[]},{"name":"#alignY","values":[]},{"name":"alignY","values":[]},{"name":"#alignEdge","values":[]},{"name":"#targetAlignEdge","description":"Updates when the popup changing its primary align edge","values":[]},{"name":"alignEdge","description":"Specifies the edge of the parent element to be placed adjacent,\nin configurations where a relative placement occurs","values":[]},{"name":"oppositeAlignEdge","values":[]},{"name":"maxHeight","description":"Set the max height value","values":[]},{"name":"#animated","values":[]},{"name":"animated","description":"Whether or not the component should animate its movement","values":[]},{"name":"#animationStyle","values":[]},{"name":"animationStyle","values":[]},{"name":"#bleed","values":[]},{"name":"bleed","values":[]},{"name":"#containingElem","values":[]},{"name":"containingElem","values":[]},{"name":"#arrow","values":[]},{"name":"arrow","description":"Specifies whether to show the Popup Arrow, and in which direction.\nThe direction is in relation to the alignment setting. So for example of you align: top\nyou want arrow: top as well.","values":[]},{"name":"arrowEl","values":[]},{"name":"#arrowTarget","values":[]},{"name":"arrowTarget","description":"Sets the element to align with via a css selector","values":[]},{"name":"#positionStyle","values":[]},{"name":"positionStyle","values":[]},{"name":"#type","values":[]},{"name":"type","values":[]},{"name":"open","values":[]},{"name":"#visible","values":[]},{"name":"visible","description":"Whether or not the component should be displayed","values":[]},{"name":"#x","values":[]},{"name":"x","description":"Sets the X (left) coordinate of the Popup","values":[]},{"name":"#y","values":[]},{"name":"y","description":"Sets the Y (top) coordinate of the Popup","values":[]},{"name":"height","values":[]},{"name":"width","values":[]}],"description":{"kind":"markdown","value":"# Ids Popup Component\n\nThe IDS Popup Component allows for the placement of any HTML content in a fixed/absolute-positioned container anywhere on a page.  The component provides API for setting coordinates, or aligning the container in relation to a \"parent\" element on the page.  Additional API exists for modifying alignment, visibility, and controlling animation.\n\nThis component is a building-block component for many \"placeable\" IDS Components, such as the [Popup Menu](../ids-popup-menu/README.md) and [Modal](../ids-modal/README.md)\n\n## Use Cases\n\n- Placing HTML content using X/Y coordinates\n- Placing HTML content against a target element and using X/Y offsets\n\n## Terminology\n\n### Alignment\n\n**Align Target** Defines an external element that serves as a \"triggering\" element for the Popup.\n**Align Edge** Also called the \"primary alignment\", given two alignment values, the first one is the edge of an Align Target that the Popup will be placed against immediately. For example \"bottom\" will cause the Popup to be aligned at the bottom of the Align Target.\n**Primary Alignment** See \"Align Edge\"\n**Secondary Alignment** Given two alignment values, the secondary alignment is optional, and will cause the Popup to line up the given edge with the Align Target's given edge.  For example, given `top, left`, the secondary alignment will cause the Popup to align primarily to the top of the Align Target, but will also line up both the Popup and the Align Targets' left edges.\n\n### Other\n\n**Arrow** Popups can optionally display arrows that can point to content when used with an Align Target.\n**Arrow Target** The element that a Popup's Arrow will point toward.  This defaults to an Align Target, but can also be defined separately.\n**Bleeds** Determines when Popups are allowed to exist outside their defined Containing Element.  A Popup that does not bleed will remain contained, no matter what coordinates/offsets are provided.\n**Containing Element** Popups are confined to a contained area inside of a page.  This area may be the entire document body,\nan [IDS Container](../ids-container/README.md), or a custom-defined element.  If bleeding is disabled, the Popup will never cross the boundaries of the container.\n**Coordinates** When placed directly in a page (not aligned against an element), a Popup uses its provided x/y values as coordinates as if plotted on a graph.\n**Offsets** When placed against a parent element, a Popup uses its provided x/y values as offsets from the base position detected.\n**Type** Defines the style of Popup that can be used.  There are several different display types, the most common one being `menu`.\n\n## Themeable Parts\n\n- `popup` allows you to further style or adjust the outer popup element\n- `arrow` allows you to adjust the arrow element\n\n## Features (with code samples)\n\nCreating a Context-menu style that would open on click might look like the following:\n\n```html\n<ids-popup id=\"my-popup\" x=\"0\" y=\"10\" align=\"top, left\">\n  <div slot=\"content\">My Popup</div>\n</ids-popup>\n```\n\nTo create a Popup that appears to align itself against a button, you could do the following:\n\n```html\n<ids-popup id=\"my-popup\" x=\"10\" y=\"10\" align=\"top, left\" alignTarget=\"#my-button\">\n  <div slot=\"content\">My Popup</div>\n</ids-popup>\n\n...\n\n<ids-button id=\"my-button\">\n  <span>My Button</span>\n</ids-button>\n```\n\n### Using Visibility\n\nDisplay the Popup using the `visible` attribute:\n\n```html\n<ids-popup id=\"my-popup\"  x=\"10\" y=\"10\" align=\"top, left\" alignTarget=\"#my-button\" visible=\"true\">\n    <div slot=\"content\">My Popup</div>\n</ids-popup>\n```\n\nProgrammatically, you can use the `visible` JS property:\n\n```js\nconst popup = document.querySelector('#my-popup');\npopup.visible = true;\n```\n\n... or explicitly call `show()` or `hide()` methods:\n\n```js\nconst popup = document.querySelector('#my-popup');\nawait popup.show();\n\n// close\nawait popup.hide();\n```\n\nWhen the Popup is visible, it's possible to tell the Popup to re-render its position by using `place()`:\n\n```js\nconst popup = document.querySelector('#my-popup');\nawait popup.place();\n```\n\n### Size\n\nIdsPopup size can be controlled with the `max-height`, `width` and `height` properties.  These are convenience properties that set CSS-friendly size values on the IdsPopup's shadow root container:\n\n```html\n<ids-popup id=\"my-popup\" width=\"100%\" height=\"100%\" max-height=\"550px\" x=\"10\" y=\"10\" align=\"top, left\" alignTarget=\"#my-button\" visible=\"true\">\n    <div slot=\"content\">My Popup</div>\n</ids-popup>\n```\n\n### Place\n\nThe Popup's coordinates/offsets can be set individually.  The action of using the x/y setters will change the stored position internally, but will not automatically be rendered.  Also, the position will not be rendered if the Popup is not visible.\n\nTo initially set a Popup's position, you can use the following:\n\n```js\nconst popup = document.querySelector('#my-popup');\npopup.x = 100;\npopup.y = 200;\nawait popup.show();\nawait popup.place();\n```\n\nIt's also possible to set both coordinate values, make the Popup visible, and render the placement in one pass using `setPosition()`:\n\n```js\nconst popup = document.querySelector('#my-popup');\npopup.setPosition(100, 200, true, true);\n```\n\n### Position Styles\n\nThere are three position styles:\n\n`fixed` - Uses simpler algorithms using `position: fixed;` and ignores container scrolling.\n`absolute` - Uses `position: fixed;` and accounts for container scrolling.\n`viewport` - This ignores the x/y offsets and positions the Popup directly in the middle of the viewport.  This is used for [Modals](../ids-modal/README.md)\n\n### Animation Styles\n\nIf the `animated` property is set, the `animation-styles` available are:\n\n- `fade`: animates in/out using a simple fade transition.\n- `scale-in`: Grows in from the center, shrinks out to the center on top of a simple fade transition. This is used on [Modals](../ids-modal/README.md)\n\n### Using Arrows\n\nSome Popup styles need to \"point\" at their triggering element for context, such as [Tooltips](../ids-tooltip/README.md).  To create a Popup that uses an arrow, simply tell it which way to point:\n\n```html\n<ids-popup id=\"my-popup\" x=\"10\" y=\"10\" align=\"top, left\" alignTarget=\"#my-button\" arrow=\"top\">\n  <div slot=\"content\">My Popup</div>\n</ids-popup>\n<ids-button id=\"my-button\">\n  <span>My Button</span>\n</ids-button>\n```\n\nIn this configuration, if a Popup is given offset value that corresponds to the `alignEdge` is not greater than the size of the Popup, the arrow's placement will be autocorrect to try and stay in alignment with the `arrowTarget`. If the offset value is greater, the arrow will hide automatically.\n\n### Using Bleeds and Containment\n\nPopups can be configured to remain inside of a set boundary element, referred to as a Containing Element.  If defined, the Popup will not cross the boundaries the containing element.  An example of this functionality is the prevention of an [IdsPopupMenu](../ids-popup-menu/README.md) from appearing to be cut off by the browser's edges.\n\nUse of a containing element could be configured in this manner:\n\n```html\n<ids-popup id=\"my-popup\" x=\"0\" y=\"0\" align=\"top, left\">\n  <div slot=\"content\" style=\"width: 100px; height: 100px;\">My Popup</div>\n</ids-popup>\n\n<div id=\"my-container\" style=\"width: 500px; height: 500px;\"></div>\n```\n```js\nconst popup = document.querySelector('#my-popup');\nconst container = document.querySelector('#my-container');\npopup.containingElem = container;\n```\n\nAfter setting the `containingElem` property, setting coordinates will place the Popup in a position that accounts for not crossing the container's edges.  For example:\n\n```js\npopup.x = 500;\n```\n\nGiven this value, the Popup will attempt to set the X coordinate at 500px using the default alignment of `top, left`, which places the left-most edge of the Popup at 500px.  Placing in this position would cross the boundary of the container, so instead the Popup will be nudged back into the containing element entirely, ending up with an X placement around 400px.\n\nIt's also possible to disable the check for bleeding, if necessary:\n\n```js\npopup.bleed = false;\n```\n\nRunning this immediately after our example above will cause the Popup to actually be placed at 500px.\n\nIf we decide to remove containment by the element, we can simply set it back to it's default:\n\n```js\npopup.containingElem = document.querySelector('ids-container');\n```\n\n### Alter placement programmatically\n\nIn some cases, you may want to slightly adjust the values provided by the built-in placement methods.  The `onPlace` callback can be implemented for this purpose:\n\n```js\npopup.onPlace = (popupRect) => {\n    popupRect.x += 100;\n    popupRect.y += 50;\n    return popupRect;\n}\n```\n\nThe `popupRect` argument provides access to the editable [`DOMRect`](https://developer.mozilla.org/en-US/docs/Web/API/DOMRect) object that the IdsPopup uses to place itself.  The callback returns the DOMRect with modified values.\n\n#### onXYSwitch callback\n\nWhen using `alignTarget` and offsets, occasionally it may be necessary for a 'top' or 'bottom'-aligned IdsPopup to switch axes and become aligned 'right' or 'left', for the purposes of remaining inside a container area.  After this occurs, an `onXYSwitch` callback is fired with an object containing several parameters.  You can modify this object and return it to provide additional changes to the placement algorithm:\n\n- `x/y`: number values that will be used for offsets\n- `flip`: boolean true if a flip occurs at all\n- `shouldSwitchXY`: boolean true if the flip that occured also swiched the x/y axes\n- `targetEdge`: the original target edge\n- `oppositeEdge`: the edge that will be used in the case of a normal, same-axis flip\n\nFor example, this occurs when [`IdsDatePicker`]('../ids-date-picker/README.md')'s popup flips to align on the X axis, which requires more space away from its target.\n\n## Usage Tips\n\n- When making a Popup that is placed in reference to an adjacent element, it must be placed AFTER it in the DOM. Placing it BEFORE the adjacent element can cause its placement to be incorrect on its first render.\n- When using an `alignTarget`, also using the `arrow` setting and pointing it in the direction of the `alignTarget` can help contextualize the relationship between the two elements.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Place was added in v4.2.2\n- All separate placement/popup logic was replaced with Place internally (not called)\n- Place could be invoked on a custom component with `$('#my-element').place();`\n\n**4.x to 5.x**\n\n- Place is now a custom element `<ids-popup></ids-popup>`\n- This is the new base component to be used for building Popupmenu, Tooltip, Modal, and any other component that requires placement of a absolute/fixed-position element.\n- All options/settings are now attributes: x, y, align, alignX, alignY, alignEdge, alignTarget, animated, visible.\n- Popup is now driven by its own HTMLElement rather than a being a behavior applied to any element: `<ids-popup x=\"0\" y=\"0\" align=\"top, left\">My Popup</ids-popup>`\n- Can now be imported as a single JS file and used with encapsulated styles\n"}},{"name":"ids-popup-menu","attributes":[{"name":"container","description":"Component's first child element (in IdsPopupMenu, this is always an IdsPopup component)","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"#mo","values":[]},{"name":"parentMenu","values":[]},{"name":"align","description":"Retrieves the `align` setting from the internal IdsPopup","values":[]},{"name":"visible","values":[]},{"name":"maxHeight","description":"Set the max height value","values":[]},{"name":"width","description":"Gets width","values":[]}],"description":{"kind":"markdown","value":"# Ids Popup Menu Component\n\n## Description\n\nThe Ids Popup Menu component allows the capability for providing lists of contextual options related to a current application, page, or widget.  The options within the menu provide values that can be acted on, events that can determine application function, and can contain toggle information.\n\nIds Popup Menus are able to be attached directly to the page, taking the place of standard browser context menus.  They are also able to be attached to specific components, such as buttons, input fields, and grid cells, to provide contextual options specific to those elements.\n\nThe Ids Popup Menu is a complex component that combines an [`IdsMenu`](../ids-menu/README.md) and [`IdsPopup`](./ids-popup/README.md) to create its core functionality.\n\n## Use Cases\n\n- Provide a list of actionable items related to an entire application (Context Menu behavior)\n- Provide a list of actionable items related to another widget (f.x.: MenuButton behavior, Data Grid cell options)\n- Attach major functions of an application to easily-accessible clicks/touches.\n\n## Terminology\n\n### Component Types\n\n**Menu** The base container element, `IdsMenu`, usually represented in the Shadow DOM with a standard HTML `<div>` tag.\n**Popup Menu** This specific component `IdsPopupMenu`, which wraps a standard menu in a \"Popup\" that can be hidden and shown on command.\n**Menu Item** A sub-component of the `IdsPopupMenu`, which is the actionable item within the menu.  These can have values, be selected or deselected, disabled, and icons.  They are also able to contain Submenus.\n**Menu Group** All menu items exist inside of an `IdsMenuGroup` sub-component type, which contains information about how selection can occur on its contained items. Selection be \"none\" (standard click behavior), \"single\" which allows only a single item in the group to be checked, or \"multi\" which allows any/all items in the group to be selected simultaneously. A menu can be comprised of one or multiple groups of items, and each group's selection within the parent menu is independent of the others.\n**Menu Header** This sub-component describes the contents of a specific Menu Group with an accessible heading, represented in the Shadow DOM with a `<li>`. Only one of these should exist within a Menu Group.\n**Separator** A simple sub-component that visually separates Menu Items.  These can be used either as direct children of the Menu between the Menu Groups (represented in Shadow DOM by a `<div>`), or inside of a Menu Group between the Menu Items (represented in Shadow DOM by a `<li>`).\n**Submenu** Nested `IdsPopupMenu` components that originate from a base Popup Menu.  These are attached to a parent menu item, and can be activated by hovering the menu item with a mouse, tapped, clicked, or by using some keyboard commands.\n\n### Behaviors\n\n**Keep Open** Defined on Menu Groups. The presence of this property causes a Popup Menu to remain open when one of the Menu Group's Menu Items is selected/deselected. The Popup Menu can only be closed by an explicit keyboard action, or by clicking/tapping outside of it. By default, selecting/deselecting a Menu Item will cause the Popup Menu to close.\n**Select** Defined on Menu Groups. This option defines the type of selection possible within the Menu Group. When this option is not present (default), simply selecting an item from the Popup Menu will store it as \"selected\" but not visually represent it as such. If this option exists and is set to \"single\", all Menu Items in the Menu Group will display a single-selectable checkmark when selected, causing the others in the group to become deselected. If this option is set to \"multiple\", each Menu Item in the group can be selected/deselected independently, and will be represented by a multi-selectable checkbox.\n**Target** Defined on Popup Menus. The Popup Menus can have a `target` property defined that will define another element in the page as being the \"actionable\" element for causing the menu to show/hide.\n**Trigger** Defined on Popup Menus. The name of the action that causes the Popup Menu to be displayed. The default behavior for Popup Menus will make them occur on the browser's document-level `contextmenu` event, but the trigger behavior can also occur on a left/right/middle `click`, as well as displaying when invoked by using the `immediate` behavior.\n\n## Settings (Attributes)\n\n### Popup Menu\n\n- `target` {HTMLElement} if defined, creates a link between this Popup Menu and another element in the DOM.\n- `trigger` {string} the action on which to activate the Popupmenu. This defaults to `contextmenu`, but can also be `click` or `immediate`.\n\n### Menu Group\n\n- `keep-open` {boolean} if true, causes the parent Popup Menu to remain open when an item within this group is selected/deselected.\n- `select` {string} Determines selection type. This defaults to \"none\", but can be \"single\" or \"multiple\".\n\n### Menu Item\n\n- `disabled` {boolean} set disabled state.\n- `href` {string} set the `href` attribute on the internal anchor.\n- `icon` {string} set the icon type used on the menu item.\n- `selected` {boolean} sets checkmark/checkbox state, if the menu item is selectable.\n- `submenu` {IdsPopupMenu} links a child Popupmenu to this element, if applicable.\n- `tabindex` {number} set the `tabindex` attribute on the internal anchor.\n- `value` {string} set the radio value.\n\n## Features (With Code Examples)\n\nIt's possible to create a Popupmenu that stands alone and takes the place of the browser's context menu by default:\n\n```html\n<ids-popup-menu id=\"popupmenu\">\n    <ids-menu-group>\n        <ids-menu-item value=\"1\">One</ids-menu-item>\n        <ids-menu-item value=\"2\">Two</ids-menu-item>\n        <ids-menu-item value=\"3\">Three</ids-menu-item>\n    </ids-menu-group>\n</ids-popup-menu>\n```\n\nIt's also possible to recreate this structure in raw Javascript:\n\n```js\nconst menu = new IdsPopupMenu();\nmenu.id = 'popupmenu';\ndocument.body.appendChild(menu);\n\nconst group = new IdsMenuGroup();\nmenu.appendChild(group);\n\nconst itemOne = new IdsMenuItem();\nitemOne.value = 1;\ngroup.appendChild(itemOne);\n\nconst itemTwo = new IdsMenuItem();\nitemTwo.value = 1;\ngroup.appendChild(itemTwo);\n\nconst itemThree = new IdsMenuItem();\nitemThree.value = 1;\ngroup.appendChild(itemThree);\n```\n\nAdditionally, it's possible to use an [IdsDataSource](../../core/README.md#ids-data-source) to populate the Popup Menu dynamically.  The component has a standardize JSON format that can be used to create a menu structure quickly:\n\n```js\nconst menu = new IdsPopupMenu();\nmenu.data = {\n    id: 'popupmenu',\n    contents: [\n        {\n            type: 'group',\n            items: [\n                {\n                    text: 'One',\n                    value: 1\n                },\n                {\n                    text: 'Two',\n                    value: 2\n                },\n                {\n                    text: 'Three',\n                    value: 3\n                },\n            ]\n        }\n    ]\n}\ndocument.body.appendChild(menu);\n```\n\n### Size\n\nIdsPopupMenu accepts `max-height` and `width` properties, which it passes directly into its inner [IdsPopup](../ids-popup/README.md#size) component for sizing:\n\n```html\n<ids-popup-menu id=\"popupmenu\" max-height=\"550px\" width=\"400px\"></ids-popupmenu>\n```\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Replace usage of `.inforContextMenu()` with `.contextmenu()` or `.popupmenu()` (depending on the use case)\n\n**4.x to 5.x**\n\n- Popup Menu is now a custom element `<ids-popup-menu></ids-popup-menu>`.\n- Events triggered by the Popup Menu are now plain JS (for example `selected`/`deselected`)\n- Selection of items is now divided up by Menu Groups `<ids-menu-group></ids-menu-group>`.  Multiple menu groups in each Popup Menu are supported, and selection in one group will not affect selection in other groups.\n- Many previous settings are now attribute-friendly (for example `closeOnSelect` is now a `keep-open` attribute on menu groups).\n- Made dynamic menus possible by using [IdsDataSource](../../core/README.md#ids-data-source)\n\n## Keyboard Guidelines\n\n- <kbd>Tab</kbd> Can be used to navigate to the next available menu item with a 0+ tab-index value.\n- <kbd>Shift + Tab</kbd> Does the opposite, navigating to the previous available menu item.\n- <kbd>Up/down arrow</kbd> navigate up and down the list.\n- <kbd>Left/right arrow</kbd> traverses nested Popup Menus.  If the currently-highlighted menu item contains a Submenu, pressing the right arrow will open that Submenu.  If the left arrow is pressed while a nested menu item is focused, its Submenu will be closed and focus will be returned to the parent menu item.\n- <kbd>Enter/Return</kbd> Perform selection/deselection where available.  On items that contain submenus, this will not select/deselect and will instead trigger the submenu.\n- <kbd>Shift+F10</kbd> can be used to trigger document-level Popup Menus that are bound to the `contextmenu` event.\n"}},{"name":"ids-process-indicator-step","attributes":[{"name":"label","description":"Sets the label for the step","values":[]},{"name":"status","description":"Sets the status for the step which determines the icon","values":[]}],"description":{"kind":"markdown","value":"# Ids Process Indicator Component\n\n## Description\n\nIndicates the process of an activity over a timeline with process steps showing details and status of what needs to be done and/or has been done/started/cancelled.\n\n## Use Cases\n\n- To show which stages of production are complete in a development lifecycle and what is left to be finished\n\n## Terminology\n\n- **Process Step**: each task/stage/to-do within the whole process\n- **Status**: done, started, or cancelled as indicated by a filled circle, empty circle, or red circle with an X, respectively\n- **Label**: the title of the process step\n\n## Settings (Attributes)\n\nUtilizes the child component IDS Process Step  which has `label` and `status` attribute. The colored process line will draw to the farthest process step with a non-null status. Which has the following attributes:\n\n- `label` {string} the title of the process step\n- `status` {string} `done` || `started` || `cancelled`\n\n## Features (With Code Samples)\n\nA simple process indicator with 3 process steps\n\n```html\n  <ids-process-indicator>\n    <ids-process-indicator-step label=\"Preparation\" status=\"done\"></ids-process-indicator-step>\n    <ids-process-indicator-step label=\"Manufacturing\" status=\"started\"></ids-process-indicator-step>\n    <ids-process-indicator-step label=\"Final Stage\"></ids-process-indicator-step>\n  </ids-process-indicator>\n```\n\nA simple process indicator with 2 process steps and additional details\n\n```html\n  <ids-process-indicator>\n    <ids-process-indicator-step label=\"Preparation\" status=\"done\">\n      <ids-text>Order the parts<ids-text>\n      <ids-text>Jan 31, 2021</ids-text>\n    </ids-process-indicator-step>\n    <ids-process-indicator-step label=\"Manufacturing\" status=\"started\">\n      <ids-text>Assemble and package product</ids-text>\n      <ids-text>Anticipated: Mar 1, 2021</ids-text>\n    </ids-process-indicator-step>\n    <ids-process-indicator-step label=\"Final Stage\" status=\"started\">\n      <ids-text>Deliver product to stores</ids-text>\n      <ids-text>Anticipated: July 1, 2021</ids-text>\n    </ids-process-indicator-step>\n  </ids-process-indicator>\n```\n\nA process indicator with 4 process steps and the 3 different possible statuses\n\n```html\n  <ids-process-indicator>\n    <ids-process-indicator-step label=\"Preparation\" status=\"done\">\n      <ids-text>Order the parts<ids-text>\n      <ids-text>Jan 31, 2021</ids-text>\n    </ids-process-indicator-step>\n    <ids-process-indicator-step label=\"Manufacturing\" status=\"started\">\n      <ids-text>Assemble and package product</ids-text>\n      <ids-text>Anticipated: Mar 1, 2021</ids-text>\n    </ids-process-indicator-step>\n    <ids-process-indicator-step label=\"Advertising\" status=\"cancelled\">\n      <ids-text>Assemble and package product</ids-text>\n      <ids-text>Anticipated: May 1, 2021</ids-text>\n      <ids-text>Cancelled due to COVID-19</ids-text>\n    </ids-process-indicator-step>\n    <ids-process-indicator-step label=\"Final Stage\">\n      <ids-text>Deliver product to stores</ids-text>\n      <ids-text>Anticipated: July 1, 2021</ids-text>\n    </ids-process-indicator-step>\n  </ids-process-indicator>\n```\n\n## Responsive Guidelines\n\n- The component stretches to 100% width of its container (horizontal orientation)\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Process Indicator was a new componet in v4.0.0\n- Can be invoked with `$('#my-element').processindicator();`\n\n**4.x to 5.x**\n\n- Process Indicator is now a custom element `<ids-process-indicator></ids-process-indicator>`\n\n### Converting from 4.x\n\n```html\n    <div class=\"process-indicator compact responsive has-labels\">\n      <span class=\"responsive-label\"><span>Current:</span> 3rd Level - Multiple Approvers</span>\n      <div class=\"display\">\n\n        <div class=\"step\" id=\"step3\" data-automation-id=\"step3-automation-id\">\n          <span class=\"label\">2nd Level</span>\n          <div class=\"lines\">\n            <span class=\"indicator darker\"></span>\n            <span class=\"separator darker\"></span>\n          </div>\n          <div class=\"details\">\n            <span class=\"heading\">Unreleased</span>\n            <a class=\"hyperlink hide-focus\" href=\"#\">\n              <svg class=\"icon icon-success\" focusable=\"false\" aria-hidden=\"true\" role=\"presentation\">\n                 <use href=\"#icon-success\"></use>\n              </svg>\n              <span>Melissa Nash</span>\n            </a>\n            <span>January 22, 2021 | 02:42AM</span>\n          </div>\n        </div>\n\n        <div class=\"step current\" id=\"step4\" data-automation-id=\"step4-automation-id\">\n          <span class=\"label\">3rd Level - Multiple Approvers</span>\n          <div class=\"lines\">\n            <span class=\"indicator processing\"></span>\n            <span class=\"separator darker\"></span>\n          </div>\n          <div class=\"details\">\n            <span class=\"heading\">Unreleased</span>\n            <a class=\"hyperlink hide-focus\" href=\"#\">\n              <svg class=\"icon icon-success\" focusable=\"false\" aria-hidden=\"true\" role=\"presentation\">\n                 <use href=\"#icon-success\"></use>\n              </svg>\n              <span>Garret Rounds</span>\n            </a>\n            <a class=\"hyperlink hide-focus\" href=\"#\">\n              <svg class=\"icon icon-empty-circle\" focusable=\"false\" aria-hidden=\"true\" role=\"presentation\">\n                 <use href=\"#icon-empty-circle\"></use>\n              </svg>\n              <span>Evelyn Lewis</span>\n            </a>\n            <span>Feb 2, 2021 | 21:12AM</span>\n          </div>\n        </div>\n\n        <div class=\"step\" id=\"step5\" data-automation-id=\"step5-automation-id\">\n          <span class=\"label\">4th level</span>\n          <div class=\"lines\">\n            <span class=\"indicator icon current\">\n              <svg class=\"icon icon-rejected-solid\" focusable=\"false\" aria-hidden=\"true\" role=\"presentation\">\n                 <use href=\"#icon-rejected-solid\"></use>\n              </svg>\n            </span>\n            <span class=\"separator\"></span>\n          </div>\n          <div class=\"details\">\n            <span class=\"heading\">Status</span>\n            <a class=\"hyperlink hide-focus\" href=\"#\">\n              <svg class=\"icon icon-rejected-outline\" focusable=\"false\" aria-hidden=\"true\" role=\"presentation\">\n                 <use href=\"#icon-rejected-outline\"></use>\n              </svg>\n              <span>John Jones</span>\n            </a>\n            <a class=\"hyperlink hide-focus\" href=\"#\">\n              <svg class=\"icon icon-empty-circle\" focusable=\"false\" aria-hidden=\"true\" role=\"presentation\">\n                 <use href=\"#icon-empty-circle\"></use>\n              </svg>\n              <span>James Martin</span>\n            </a>\n            <span>Feb 12, 2021 | 14:12AM</span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n```\nis the 4.x equivalent of the web component example below\n\n```html\n  <ids-process-indicator>\n    <ids-process-indicator-step label=\"2nd Level\" status=\"done\">\n      <ids-text>Unreleased</ids-text>\n      <ids-icon icon=\"success\" size=\"small\"></ids-icon>\n      <ids-hyperlink href=\"#\"><span>Melissa Nash</span></ids-hyperlink>\n      <ids-text class=\"date\">January 22, 2021 02:42 AM</ids-text>\n    </ids-process-indicator-step>\n    <ids-process-indicator-step label=\"3rd Level - Multiple Approvers\" status=\"started\">\n      <ids-text>Unreleased</ids-text>\n      <ids-icon icon=\"success\" size=\"small\"></ids-icon>\n      <ids-hyperlink href=\"#\"><span>Garret Rounds</span></ids-hyperlink>\n      <br>\n      <ids-icon icon=\"empty-circle\" size=\"small\"></ids-icon>\n      <ids-hyperlink href=\"#\"><span>Evelyn Lewis</span></ids-hyperlink>\n      <ids-text class=\"date\">Feb 2, 2021 21:12 AM</ids-text>\n    </ids-process-indicator-step>\n    <ids-process-indicator-step label=\"4th Level\" status=\"cancelled\">\n      <ids-text>Status</ids-text>\n      <ids-icon icon=\"rejected-outline\" size=\"small\"></ids-icon>\n      <ids-hyperlink href=\"#\"><span>John Jones</span></ids-hyperlink>\n      <br>\n      <ids-icon icon=\"empty-circle\" size=\"small\"></ids-icon>\n      <ids-hyperlink href=\"#\"><span>James Martin</span></ids-hyperlink>\n      <ids-text class=\"date\">Feb 12, 2021 14:12 AM</ids-text>\n    </ids-process-indicator-step>\n  </ids-process-indicator>\n```\n"}},{"name":"ids-process-indicator","attributes":[],"description":{"kind":"markdown","value":"# Ids Process Indicator Component\n\n## Description\n\nIndicates the process of an activity over a timeline with process steps showing details and status of what needs to be done and/or has been done/started/cancelled.\n\n## Use Cases\n\n- To show which stages of production are complete in a development lifecycle and what is left to be finished\n\n## Terminology\n\n- **Process Step**: each task/stage/to-do within the whole process\n- **Status**: done, started, or cancelled as indicated by a filled circle, empty circle, or red circle with an X, respectively\n- **Label**: the title of the process step\n\n## Settings (Attributes)\n\nUtilizes the child component IDS Process Step  which has `label` and `status` attribute. The colored process line will draw to the farthest process step with a non-null status. Which has the following attributes:\n\n- `label` {string} the title of the process step\n- `status` {string} `done` || `started` || `cancelled`\n\n## Features (With Code Samples)\n\nA simple process indicator with 3 process steps\n\n```html\n  <ids-process-indicator>\n    <ids-process-indicator-step label=\"Preparation\" status=\"done\"></ids-process-indicator-step>\n    <ids-process-indicator-step label=\"Manufacturing\" status=\"started\"></ids-process-indicator-step>\n    <ids-process-indicator-step label=\"Final Stage\"></ids-process-indicator-step>\n  </ids-process-indicator>\n```\n\nA simple process indicator with 2 process steps and additional details\n\n```html\n  <ids-process-indicator>\n    <ids-process-indicator-step label=\"Preparation\" status=\"done\">\n      <ids-text>Order the parts<ids-text>\n      <ids-text>Jan 31, 2021</ids-text>\n    </ids-process-indicator-step>\n    <ids-process-indicator-step label=\"Manufacturing\" status=\"started\">\n      <ids-text>Assemble and package product</ids-text>\n      <ids-text>Anticipated: Mar 1, 2021</ids-text>\n    </ids-process-indicator-step>\n    <ids-process-indicator-step label=\"Final Stage\" status=\"started\">\n      <ids-text>Deliver product to stores</ids-text>\n      <ids-text>Anticipated: July 1, 2021</ids-text>\n    </ids-process-indicator-step>\n  </ids-process-indicator>\n```\n\nA process indicator with 4 process steps and the 3 different possible statuses\n\n```html\n  <ids-process-indicator>\n    <ids-process-indicator-step label=\"Preparation\" status=\"done\">\n      <ids-text>Order the parts<ids-text>\n      <ids-text>Jan 31, 2021</ids-text>\n    </ids-process-indicator-step>\n    <ids-process-indicator-step label=\"Manufacturing\" status=\"started\">\n      <ids-text>Assemble and package product</ids-text>\n      <ids-text>Anticipated: Mar 1, 2021</ids-text>\n    </ids-process-indicator-step>\n    <ids-process-indicator-step label=\"Advertising\" status=\"cancelled\">\n      <ids-text>Assemble and package product</ids-text>\n      <ids-text>Anticipated: May 1, 2021</ids-text>\n      <ids-text>Cancelled due to COVID-19</ids-text>\n    </ids-process-indicator-step>\n    <ids-process-indicator-step label=\"Final Stage\">\n      <ids-text>Deliver product to stores</ids-text>\n      <ids-text>Anticipated: July 1, 2021</ids-text>\n    </ids-process-indicator-step>\n  </ids-process-indicator>\n```\n\n## Responsive Guidelines\n\n- The component stretches to 100% width of its container (horizontal orientation)\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Process Indicator was a new componet in v4.0.0\n- Can be invoked with `$('#my-element').processindicator();`\n\n**4.x to 5.x**\n\n- Process Indicator is now a custom element `<ids-process-indicator></ids-process-indicator>`\n\n### Converting from 4.x\n\n```html\n    <div class=\"process-indicator compact responsive has-labels\">\n      <span class=\"responsive-label\"><span>Current:</span> 3rd Level - Multiple Approvers</span>\n      <div class=\"display\">\n\n        <div class=\"step\" id=\"step3\" data-automation-id=\"step3-automation-id\">\n          <span class=\"label\">2nd Level</span>\n          <div class=\"lines\">\n            <span class=\"indicator darker\"></span>\n            <span class=\"separator darker\"></span>\n          </div>\n          <div class=\"details\">\n            <span class=\"heading\">Unreleased</span>\n            <a class=\"hyperlink hide-focus\" href=\"#\">\n              <svg class=\"icon icon-success\" focusable=\"false\" aria-hidden=\"true\" role=\"presentation\">\n                 <use href=\"#icon-success\"></use>\n              </svg>\n              <span>Melissa Nash</span>\n            </a>\n            <span>January 22, 2021 | 02:42AM</span>\n          </div>\n        </div>\n\n        <div class=\"step current\" id=\"step4\" data-automation-id=\"step4-automation-id\">\n          <span class=\"label\">3rd Level - Multiple Approvers</span>\n          <div class=\"lines\">\n            <span class=\"indicator processing\"></span>\n            <span class=\"separator darker\"></span>\n          </div>\n          <div class=\"details\">\n            <span class=\"heading\">Unreleased</span>\n            <a class=\"hyperlink hide-focus\" href=\"#\">\n              <svg class=\"icon icon-success\" focusable=\"false\" aria-hidden=\"true\" role=\"presentation\">\n                 <use href=\"#icon-success\"></use>\n              </svg>\n              <span>Garret Rounds</span>\n            </a>\n            <a class=\"hyperlink hide-focus\" href=\"#\">\n              <svg class=\"icon icon-empty-circle\" focusable=\"false\" aria-hidden=\"true\" role=\"presentation\">\n                 <use href=\"#icon-empty-circle\"></use>\n              </svg>\n              <span>Evelyn Lewis</span>\n            </a>\n            <span>Feb 2, 2021 | 21:12AM</span>\n          </div>\n        </div>\n\n        <div class=\"step\" id=\"step5\" data-automation-id=\"step5-automation-id\">\n          <span class=\"label\">4th level</span>\n          <div class=\"lines\">\n            <span class=\"indicator icon current\">\n              <svg class=\"icon icon-rejected-solid\" focusable=\"false\" aria-hidden=\"true\" role=\"presentation\">\n                 <use href=\"#icon-rejected-solid\"></use>\n              </svg>\n            </span>\n            <span class=\"separator\"></span>\n          </div>\n          <div class=\"details\">\n            <span class=\"heading\">Status</span>\n            <a class=\"hyperlink hide-focus\" href=\"#\">\n              <svg class=\"icon icon-rejected-outline\" focusable=\"false\" aria-hidden=\"true\" role=\"presentation\">\n                 <use href=\"#icon-rejected-outline\"></use>\n              </svg>\n              <span>John Jones</span>\n            </a>\n            <a class=\"hyperlink hide-focus\" href=\"#\">\n              <svg class=\"icon icon-empty-circle\" focusable=\"false\" aria-hidden=\"true\" role=\"presentation\">\n                 <use href=\"#icon-empty-circle\"></use>\n              </svg>\n              <span>James Martin</span>\n            </a>\n            <span>Feb 12, 2021 | 14:12AM</span>\n          </div>\n        </div>\n      </div>\n    </div>\n\n\n```\nis the 4.x equivalent of the web component example below\n\n```html\n  <ids-process-indicator>\n    <ids-process-indicator-step label=\"2nd Level\" status=\"done\">\n      <ids-text>Unreleased</ids-text>\n      <ids-icon icon=\"success\" size=\"small\"></ids-icon>\n      <ids-hyperlink href=\"#\"><span>Melissa Nash</span></ids-hyperlink>\n      <ids-text class=\"date\">January 22, 2021 02:42 AM</ids-text>\n    </ids-process-indicator-step>\n    <ids-process-indicator-step label=\"3rd Level - Multiple Approvers\" status=\"started\">\n      <ids-text>Unreleased</ids-text>\n      <ids-icon icon=\"success\" size=\"small\"></ids-icon>\n      <ids-hyperlink href=\"#\"><span>Garret Rounds</span></ids-hyperlink>\n      <br>\n      <ids-icon icon=\"empty-circle\" size=\"small\"></ids-icon>\n      <ids-hyperlink href=\"#\"><span>Evelyn Lewis</span></ids-hyperlink>\n      <ids-text class=\"date\">Feb 2, 2021 21:12 AM</ids-text>\n    </ids-process-indicator-step>\n    <ids-process-indicator-step label=\"4th Level\" status=\"cancelled\">\n      <ids-text>Status</ids-text>\n      <ids-icon icon=\"rejected-outline\" size=\"small\"></ids-icon>\n      <ids-hyperlink href=\"#\"><span>John Jones</span></ids-hyperlink>\n      <br>\n      <ids-icon icon=\"empty-circle\" size=\"small\"></ids-icon>\n      <ids-hyperlink href=\"#\"><span>James Martin</span></ids-hyperlink>\n      <ids-text class=\"date\">Feb 12, 2021 14:12 AM</ids-text>\n    </ids-process-indicator-step>\n  </ids-process-indicator>\n```\n"}},{"name":"ids-progress-bar","attributes":[{"name":"completed","description":"Get calculated completed value","values":[]},{"name":"disabled","description":"Sets the component to disabled","values":[]},{"name":"label","description":"Set the `label` text","values":[]},{"name":"labelAudible","description":"Sets to label text as audible","values":[]},{"name":"max","description":"Set the `max` attribute of progress","values":[]},{"name":"value","description":"Set the `value` attribute of progress","values":[]}],"description":{"kind":"markdown","value":"# Ids Progress Bar Component\n\n## Description\n\nDisplays feedback about a system process. It is best for showing feedback about a system process to show an unspecified wait time or display the length of a running process. The IDS progress indicator is a simple web component and the value can be set with the `value` setting/attribute.\n\n## Use Cases\n\n- Showing feedback about a running system process\n\n## Terminology\n\n- Progress Bar: A standard basic progress element. It can set to a max and value.\n- Label: A label web component element to label the process being shown. Make sure the progress label is meaningful relative to progress.\n\n## Features (With Code Samples)\n\nA standard basic progress element:\n\n```html\n<ids-progress-bar label=\"Basic\" value=\"30\"></ids-progress-bar>\n```\n\nRepresent an Disabled progress in this way:\n\n```html\n<ids-progress-bar label=\"Disabled\" disabled=\"true\" value=\"30\"></ids-progress-bar>\n```\n\nSet the max and value attributes to show progress in this way:\n\n```html\n<ids-progress-bar label=\"Max\" max=\"1\" value=\"0.7\"></ids-progress-bar>\n```\n\nSet the audible (screen reader only) label to Progress:\n\n```html\n<ids-progress-bar label=\"Audible label\" label-audible=\"true\" value=\"30\"></ids-progress-bar>\n```\n\n## Settings (Attributes)\n\n- `disabled` {boolean} set the disabled state.\n- `label` {string} set the label text\n- `label-audible` {boolean} set the label to audible (screen reader only)\n- `max` {string|number} set the progress max attribute.\n- `value` {string|number} set the progress value attribute.\n\n## Responsive Guidelines\n\n- Default size is 100% wide and it based on fluid design, stretching to the parent content.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Progress component was added in 4.0.0\n- Progress can be invoked with `$('#my-element').progress();`\n\n**4.x to 5.x**\n\n- Progress component has been renamed to \"Progress Bar\"\n- Progress Bar is a custom element `<ids-progress-bar></ids-progress-bar>`\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles\n\n### Converting from 4.x\n\nThe IDS Progress Bar component is now a WebComponent. Instead of using classes to define it, it is done directly with a custom element and attributes:\n\n```html\n<!-- 4.x progress example -->\n<div class=\"field\">\n  <label id=\"pr-label1\">Percent complete</label>\n    <div class=\"progress\">\n      <div class=\"progress-bar\" data-value=\"50\" id=\"progress-bar1\" aria-labelledby=\"pr-label1\"></div>\n    </div>\n</div>\n\n<!-- this is the same progress using the WebComponent -->\n<ids-progress-bar label=\"Percent complete\" value=\"50\"></ids-progress-bar>\n\n```\n"}},{"name":"ids-progress-chart","attributes":[{"name":"percentage","values":[]},{"name":"icon","description":"Sets the icon inside the label","values":[]},{"name":"color","description":"Set the color of the bar","values":[]},{"name":"progress","description":"Set the numeric value of progress that has been completed","values":[]},{"name":"total","description":"Set the total value of possible progress that can be completed","values":[]},{"name":"label","description":"Set the label title of the bar","values":[]},{"name":"progressLabel","description":"Set the label of completed progress--useful for displaying units","values":[]},{"name":"totalLabel","description":"Set the label of total possible progress--useful for displaying units","values":[]},{"name":"size","description":"Set the size of the progress bar (small, or normal (default)","values":[]}],"description":{"kind":"markdown","value":"# Ids Progress Chart Component\n\n## Description\n\nSimilar to the [Progress Bar](../ids-progress-bar/README.md) web component, this component is more ideal for creating a standard bar chart visual. It is useful for showing the progress completed or time remaining for a task/goal, since it has customizable labels and colors. It is a simple web component where the amount of progress and total progress can be set with the `progress` and `total` setting/attribute, respectively. Labels can be set with `label`, `label-progress`, `label-total` and can include icons which need to be inserted as a child of the component in the HTML.\n\n## Use Cases\n\n- Showing progress or time remaining for a task/goal\n\n## Terminology\n\n- Progress Chart: A standard basic progress element which has progress, total progress, and 3 customizable labels\n- Label: A label web component element to label the title, amount of progress, and amount of total progress\n\n## Features (With Code Samples)\n\nThe examples below can be viewed at [http://localhost:4300/ids-progress-chart/readme-examples](http://localhost:4300/ids-progress-chart/readme-examples)\n\n### A standard basic progress chart\n\n```html\n<ids-progress-chart label=\"Basic\" progress=\"50\"></ids-progress-chart>\n```\n\nThe default total is 100, so even if you leave that field blank, it will render as 50% progress. There is also a default color for the progress bar.\n\n### Adding colors\n\n```html\n<ids-progress-chart label=\"#A876EB\" color=\"#A876EB\" progress=\"50\"></ids-progress-chart>\n```\n\nWith the use of IDS tokens, the above is visually identical to the following:\n\n```html\n<ids-progress-chart label=\"Amethyst-40\" color=\"amethyst-40\" progress=\"50\"></ids-progress-chart>\n```\n\n### Using Decimals\n\n```html\n<ids-progress-chart label=\"Decimals\" progress=\"0.7\" total=\"1\"></ids-progress-chart>\n```\n\n### Adding labels\n\n```html\n<ids-progress-chart label=\"Decimals with labels\" label-progress=\"0.7\" progress=\"0.7\" label-total=\"1\" total=\"1\"></ids-progress-chart>\n```\n\n```html\n<ids-progress-chart label=\"Sprint progress\" label-progress=\"1 week\" progress=\"1\" label-total=\"2 wks\" total=\"2\"></ids-progress-chart>\n```\n\n### Indicating caution, warning, or error\n\nThere are colors associated with the certain statuses\n\n```html\n<ids-progress-chart label=\"Error\" color=\"error\" progress=\"50\" label-progress=\"50%\"></ids-progress-chart>\n```\n\n```html\n<ids-progress-chart label=\"Warning\" color=\"warning\" progress=\"50\" label-progress=\"50%\"></ids-progress-chart>\n```\n\n```html\n<ids-progress-chart label=\"Caution\" color=\"caution\" progress=\"50\" label-progress=\"50%\"></ids-progress-chart>\n```\n\nThese are the few scenarios where it will color the progress label as well\n\n### Adding icons\n\nYou can include icons in the label heading\n\n```html\n<ids-progress-chart icon=\"error\" label=\"Error with icon\" color=\"error\" progress=\"50\"></ids-progress-chart>\n```\n\n### Adjust the size\n\nThere are 2 sizes, `small` and `normal`\n\n```html\n<ids-progress-chart label=\"Compact\" size=\"small\" progress=\"50\"></ids-progress-chart>\n```\n\nIcons adjust accordingly to the size of the chart\n\n```html\n<ids-progress-chart icon=\"alert\" label=\"Compact w/ icon\" size=\"small\" progress=\"50\"></ids-progress-chart>\n```\n\n## Settings (Attributes)\n\n- `progress` { string | number } set the progress value attribute\n- `total` { string | number } set the total progress value attribute\n- `color` { string } set the color of the progress bar\n- `size` { 'small' | 'normal' } set the size of the progress bar\n- `label` { string } set the title label\n- `icon` { string } set the icon type\n- `label-progress` { string } set the progress value label\n- `label-total` { string } set the total progress value label\n\n## Responsive Guidelines\n\n- By default, the width stretches to 100% of the parent container\n- The minimum width is 66px\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n*Completion Chart:*\n- The Completion Chart component was added in v4.4.0\n- Completion Chart is invoked with `$('#my-element').chart({ type: 'completion-target' });`\n\n*Targeted Achievement Chart:*\n- The Targeted Achievement Chart component is new in 4.4.0\n- Targeted Achievement Chart is invoked with `$('#my-element').chart({ type: 'targeted-achievement' });`\n\n**4.x to 5.x**\n\n- Features from both Targeted Achievement Charts and Completion Charts have been merged into a new web component called IdsProgressChart\n- IdsProgressChart is a custom element `<ids-progress-chart></ids-progress-chart>`\n\n### Converting from 4.x\n\nThe IDS Progress Chart component is now a WebComponent. Instead of using classes to define it, it is done directly with a custom element and attributes:\n\n```html\n<!-- 4.x progress chart example -->\n<div class=\"field\">\n  <div id=\"example-8c\" class=\"chart-container\"></div>\n</div>\n```\n\n```js\n  $('body').on('initialized', function() {\n    var dataset8 = [{\n      data: [{\n        name: {text: 'Old Progress Chart'},\n        info: {value: '13h'},\n        completed: {value: 13, color: '#D66221'}\n      }]\n    }];\n\n    var api8c = $('#example-8c').chart({dataset: dataset8, type: 'completion-target'}).data('chart');\n  });\n```\n\n<!-- this is the same progress chart using the WebComponent -->\n```html\n<ids-progress-chart label=\"New Progress Chart\" progress=\"13\" label-progress=\"13h\" color=\"#D66221\"></ids-progress-chart>\n```\n"}},{"name":"ids-radio-group","attributes":[{"name":"isFormComponent","values":[]},{"name":"input","values":[]},{"name":"labelEl","values":[]},{"name":"checked","values":[]},{"name":"disabled","description":"Sets checkbox to disabled","values":[]},{"name":"horizontal","description":"Flips the checkbox orientation to horizontal","values":[]},{"name":"label","description":"Set the `label` text","values":[]},{"name":"labelRequired","description":"Sets the checkbox to required","values":[]},{"name":"value","description":"Sets the checkbox `value` attribute","values":[]}],"description":{"kind":"markdown","value":"# Ids Radio Component\n\n## Description\n\nThe IDS Radio component is a web component wrapper around a standard input radio element that is styled to Infor branding, and contains some additional API that makes it easy to set radio, label, and functionality.\n\nThe IDS Radio Group component is a simple wrapper around list of IDS radio, and contains some additional API that makes it easy to create a group of radios and add a group label, and other functionality.\n\n## Use Cases\n\n- Allows for making one selection out of a group of radio options.\n- Radio buttons are particularly useful in allowing users to make single choices from lists of selectable options. When\n\n## Terminology\n\n**Radio Button:** A standard basic radio button element. It can set to checked, unchecked and disabled.\n**Label:** HTMLLabelElement to keep matching with HTMLInputElement. Make sure the label has a meaningful content. IDS Radio Group will add sudo ui `*` for required elements.\n\n## Features (With Code Samples)\n\nA standard single unchecked radio element:\n\n```html\n<ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n```\n\nSet the radio as checked:\n\n```html\n<ids-radio value=\"opt1\" label=\"Option one\" checked=\"true\"></ids-radio>\n```\n\nAdd an unchecked and disabled radio:\n\n```html\n<ids-radio value=\"opt1\" label=\"Option one\" disabled=\"true\"></ids-radio>\n```\n\nAdd an checked and disabled radio:\n\n```html\n<ids-radio value=\"opt1\" label=\"Option one\" checked=\"true\" disabled=\"true\"></ids-radio>\n```\n\nAdd an colored radio - use this option only in special use cases\n\n```html\n<ids-radio checked=\"true\" color=\"emerald07\" value=\"emerald07\" label=\"Emerald 07\"></ids-radio>\n```\n\nA standard Radio Group unchecked element:\n\n```html\n<ids-radio-group label=\"Select delivery method\">\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\"></ids-radio>\n</ids-radio-group>\n```\n\nSet as Checked, the radio in Radio Group.\n\n```html\n<ids-radio-group label=\"Select delivery method\">\n  <ids-radio value=\"opt1\" label=\"Option one\" checked=\"true\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\"></ids-radio>\n</ids-radio-group>\n```\n\nSet Radio Group as No label.\n\n```html\n<ids-radio-group>\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\" checked=\"true\"></ids-radio>\n</ids-radio-group>\n```\n\nSet Radio Group Checked and Value\n\n```html\n<ids-radio-group label=\"Select delivery method\" value=\"opt1\">\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\"></ids-radio>\n</ids-radio-group>\n```\n\nSet the Dirty Tracking to Radio Group this way:\n\n```html\n<ids-radio-group label=\"Select delivery method\" dirty-tracker=\"true\">\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\" checked=\"true\"></ids-radio>\n  <ids-radio value=\"opt3\" label=\"Option three\"></ids-radio>\n</ids-radio-group>\n```\n\nSet Radio Group as Disabled Group (each radio will set to disabled):\n\n```html\n<ids-radio-group label=\"Select delivery method\" disabled=\"true\">\n  <ids-radio value=\"opt1\" label=\"Option one\" checked=\"true\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\"></ids-radio>\n</ids-radio-group>\n```\n\nSet Radio Group as Disabled Item:\n\n```html\n<ids-radio-group label=\"Select delivery method\">\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\" checked=\"true\"></ids-radio>\n  <ids-radio value=\"opt3\" label=\"Option three\" disabled=\"true\"></ids-radio>\n</ids-radio-group>\n```\n\nSet validation `required` to Radio Group this way:\n\n```html\n<ids-radio-group label=\"Select delivery method\" validate=\"required\" id=\"ids-radio-validation\">\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\"></ids-radio>\n  <ids-radio value=\"opt3\" label=\"Option three\" disabled=\"true\"></ids-radio>\n</ids-radio-group>\n<button id=\"btn-radio-validate\">Validate</button>\n```\n\nYou can also check validation with the JS api.\n\n```javascript\ndocument.querySelector('#btn-radio-validate').addEventListener('click', () => {\n  const radio = document.querySelector('#ids-radio-validation');\n  radio.checkValidation();\n});\n```\n\nSet validation `required` to Radio Group without label required indicator:\n\n```html\n<ids-radio-group label=\"Select delivery method\" label-required=\"false\" validate=\"required\">\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\"></ids-radio>\n</ids-radio-group>\n```\n\nSet Radio Group as Horizontal:\n\n```html\n<ids-radio-group label=\"Select delivery method\" horizontal=\"true\">\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\" checked=\"true\"></ids-radio>\n</ids-radio-group>\n```\n\n## Settings (Attributes) (for Radios)\n\n- `checked` {boolean} set checked state.\n- `color` {string} set the color for radio.\n- `disabled` {boolean} set disabled state.\n- `group-disabled` {boolean} set disabled state, if group disabled.\n- `horizontal` {boolean} set radio layout inline as horizontal.\n- `label` {string} set the label text.\n- `validation-has-error` {boolean} set the validation error state.\n- `value` {string} set the radio value.\n\n## Settings (Attributes) (for Radio Groups)\n\n- `dirty-tracker` {boolean} set dirty tracker.\n- `disabled` {boolean} set disabled state.\n- `horizontal` {boolean} set radio group layout inline as horizontal.\n- `label` {string} set the label text.\n- `label-required` {boolean} set validation `required` indicator, default is set to `true`.\n- `validate` {string} set the validation rule `required`.\n- `validation-events` {string} set the validation events, use `space` to add multiple default is set to `change`.\n- `value` {string} set the radio group value, will set as checked the matching radio value in list.\n\n## Themeable Parts\n\n- `radio` allows you to further style the actual radio input element\n- `circle` allows you to further style the visible circle element\n- `label` allows you to further style the label text element\n\n## States and Variations\n\n- Unchecked\n- Checked/Selected\n- Hover\n- Disabled\n- Focus\n- Error\n- Dirty\n- Active\n\n## Keyboard Guidelines\n\nThe IDS Radio doesn't contain any interactions beyond a standard radio input element:\n\n- <kbd>Tab</kbd> and <kbd>Shift Tab</kbd> moves focus into the edit field to/from the next focusable item in the tab order.\n- <kbd>Space</kbd> Toggle the checked/unchecked state on the active radio button.\n- <kbd>ArrowDown</kbd>, <kbd>ArrowRight</kbd>, <kbd>ArrowUp</kbd>, <kbd>ArrowLeft</kbd>, Moves within a radio group, each key will move and set checked next radio in the list.\n\n## Responsive Guidelines\n\n- Default display set vertical but can also use the  `horizontal` attribute as true for some cases.\n- Default display set as `block`, but can change to `inline-block` by use of `horizontal` attribute as `true`.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Radio button styles were implemented in 4.0.0\n- Radio buttons were CSS-only components\n\n**4.x to 5.x**\n\n- Radio component has changed to a custom element `<ids-radio-group></ids-radio-group>`\n- Individual radio buttons are standalone custom elements `<ids-radio></ids-radio>` and are slotted into groups\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles\n\n### Converting from 4.x\n\nRadio Buttons are now standalone web components instead of being defined only with CSS styles:\n\n```html\n<!-- 4.x radio example -->\n<div class=\"field\">\n  <input type=\"radio\" class=\"radio\" name=\"options\" value=\"opt1\" id=\"option1\" />\n  <label for=\"option1\" class=\"radio-label\">Option one</label>\n</div>\n\n<!-- This is the same radio using a WebComponent -->\n<ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n```\n\nThe same rules apply to Radio Groups, which are also now standalone web components:\n\n```html\n<!-- 4.x radio group example -->\n<fieldset class=\"radio-group\">\n  <legend>Select delivery method</legend>\n  <input type=\"radio\" class=\"radio\" name=\"options\" value=\"opt1\" id=\"option1\" />\n  <label for=\"option1\" class=\"radio-label\">Option one</label>\n  <br/>\n  <input type=\"radio\" class=\"radio\" name=\"options\" value=\"opt2\" checked=\"true\" id=\"option2\" />\n  <label for=\"option2\"  class=\"radio-label\">Option two</label>\n  <br/>\n  <input type=\"radio\" class=\"radio\" name=\"options\" value=\"opt3\" id=\"option3\" />\n  <label for=\"option3\" class=\"radio-label\">Option three</label>\n  <br/>\n  <input type=\"radio\" class=\"radio\" name=\"options\" value=\"opt4\" disabled=\"true\" id=\"option4\" />\n  <label for=\"option4\" class=\"radio-label\">Option four</label>\n</fieldset>\n\n<!-- this is the same radio group using the WebComponent -->\n<ids-radio-group label=\"Select delivery method\">\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\" checked=\"true\"></ids-radio>\n  <ids-radio value=\"opt3\" label=\"Option three\"></ids-radio>\n  <ids-radio value=\"opt4\" label=\"Option four\" disabled=\"true\"></ids-radio>\n</ids-radio-group>\n```\n"}},{"name":"ids-radio","attributes":[{"name":"input","values":[]},{"name":"labelEl","values":[]},{"name":"rootEl","values":[]},{"name":"checked","description":"Set `checked` attribute","values":[]},{"name":"color","description":"Set `color` attribute","values":[]},{"name":"disabled","description":"Set `disabled` attribute","values":[]},{"name":"groupDisabled","description":"Set `group-disabled` attribute","values":[]},{"name":"horizontal","description":"Set `horizontal` attribute `inline|block`, default as `block`","values":[]},{"name":"label","description":"Set the `label` text","values":[]},{"name":"validationHasError","description":"Set `validation-has-error` attribute","values":[]},{"name":"value","description":"Set the `value` attribute","values":[]}],"description":{"kind":"markdown","value":"# Ids Radio Component\n\n## Description\n\nThe IDS Radio component is a web component wrapper around a standard input radio element that is styled to Infor branding, and contains some additional API that makes it easy to set radio, label, and functionality.\n\nThe IDS Radio Group component is a simple wrapper around list of IDS radio, and contains some additional API that makes it easy to create a group of radios and add a group label, and other functionality.\n\n## Use Cases\n\n- Allows for making one selection out of a group of radio options.\n- Radio buttons are particularly useful in allowing users to make single choices from lists of selectable options. When\n\n## Terminology\n\n**Radio Button:** A standard basic radio button element. It can set to checked, unchecked and disabled.\n**Label:** HTMLLabelElement to keep matching with HTMLInputElement. Make sure the label has a meaningful content. IDS Radio Group will add sudo ui `*` for required elements.\n\n## Features (With Code Samples)\n\nA standard single unchecked radio element:\n\n```html\n<ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n```\n\nSet the radio as checked:\n\n```html\n<ids-radio value=\"opt1\" label=\"Option one\" checked=\"true\"></ids-radio>\n```\n\nAdd an unchecked and disabled radio:\n\n```html\n<ids-radio value=\"opt1\" label=\"Option one\" disabled=\"true\"></ids-radio>\n```\n\nAdd an checked and disabled radio:\n\n```html\n<ids-radio value=\"opt1\" label=\"Option one\" checked=\"true\" disabled=\"true\"></ids-radio>\n```\n\nAdd an colored radio - use this option only in special use cases\n\n```html\n<ids-radio checked=\"true\" color=\"emerald07\" value=\"emerald07\" label=\"Emerald 07\"></ids-radio>\n```\n\nA standard Radio Group unchecked element:\n\n```html\n<ids-radio-group label=\"Select delivery method\">\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\"></ids-radio>\n</ids-radio-group>\n```\n\nSet as Checked, the radio in Radio Group.\n\n```html\n<ids-radio-group label=\"Select delivery method\">\n  <ids-radio value=\"opt1\" label=\"Option one\" checked=\"true\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\"></ids-radio>\n</ids-radio-group>\n```\n\nSet Radio Group as No label.\n\n```html\n<ids-radio-group>\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\" checked=\"true\"></ids-radio>\n</ids-radio-group>\n```\n\nSet Radio Group Checked and Value\n\n```html\n<ids-radio-group label=\"Select delivery method\" value=\"opt1\">\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\"></ids-radio>\n</ids-radio-group>\n```\n\nSet the Dirty Tracking to Radio Group this way:\n\n```html\n<ids-radio-group label=\"Select delivery method\" dirty-tracker=\"true\">\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\" checked=\"true\"></ids-radio>\n  <ids-radio value=\"opt3\" label=\"Option three\"></ids-radio>\n</ids-radio-group>\n```\n\nSet Radio Group as Disabled Group (each radio will set to disabled):\n\n```html\n<ids-radio-group label=\"Select delivery method\" disabled=\"true\">\n  <ids-radio value=\"opt1\" label=\"Option one\" checked=\"true\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\"></ids-radio>\n</ids-radio-group>\n```\n\nSet Radio Group as Disabled Item:\n\n```html\n<ids-radio-group label=\"Select delivery method\">\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\" checked=\"true\"></ids-radio>\n  <ids-radio value=\"opt3\" label=\"Option three\" disabled=\"true\"></ids-radio>\n</ids-radio-group>\n```\n\nSet validation `required` to Radio Group this way:\n\n```html\n<ids-radio-group label=\"Select delivery method\" validate=\"required\" id=\"ids-radio-validation\">\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\"></ids-radio>\n  <ids-radio value=\"opt3\" label=\"Option three\" disabled=\"true\"></ids-radio>\n</ids-radio-group>\n<button id=\"btn-radio-validate\">Validate</button>\n```\n\nYou can also check validation with the JS api.\n\n```javascript\ndocument.querySelector('#btn-radio-validate').addEventListener('click', () => {\n  const radio = document.querySelector('#ids-radio-validation');\n  radio.checkValidation();\n});\n```\n\nSet validation `required` to Radio Group without label required indicator:\n\n```html\n<ids-radio-group label=\"Select delivery method\" label-required=\"false\" validate=\"required\">\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\"></ids-radio>\n</ids-radio-group>\n```\n\nSet Radio Group as Horizontal:\n\n```html\n<ids-radio-group label=\"Select delivery method\" horizontal=\"true\">\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\" checked=\"true\"></ids-radio>\n</ids-radio-group>\n```\n\n## Settings (Attributes) (for Radios)\n\n- `checked` {boolean} set checked state.\n- `color` {string} set the color for radio.\n- `disabled` {boolean} set disabled state.\n- `group-disabled` {boolean} set disabled state, if group disabled.\n- `horizontal` {boolean} set radio layout inline as horizontal.\n- `label` {string} set the label text.\n- `validation-has-error` {boolean} set the validation error state.\n- `value` {string} set the radio value.\n\n## Settings (Attributes) (for Radio Groups)\n\n- `dirty-tracker` {boolean} set dirty tracker.\n- `disabled` {boolean} set disabled state.\n- `horizontal` {boolean} set radio group layout inline as horizontal.\n- `label` {string} set the label text.\n- `label-required` {boolean} set validation `required` indicator, default is set to `true`.\n- `validate` {string} set the validation rule `required`.\n- `validation-events` {string} set the validation events, use `space` to add multiple default is set to `change`.\n- `value` {string} set the radio group value, will set as checked the matching radio value in list.\n\n## Themeable Parts\n\n- `radio` allows you to further style the actual radio input element\n- `circle` allows you to further style the visible circle element\n- `label` allows you to further style the label text element\n\n## States and Variations\n\n- Unchecked\n- Checked/Selected\n- Hover\n- Disabled\n- Focus\n- Error\n- Dirty\n- Active\n\n## Keyboard Guidelines\n\nThe IDS Radio doesn't contain any interactions beyond a standard radio input element:\n\n- <kbd>Tab</kbd> and <kbd>Shift Tab</kbd> moves focus into the edit field to/from the next focusable item in the tab order.\n- <kbd>Space</kbd> Toggle the checked/unchecked state on the active radio button.\n- <kbd>ArrowDown</kbd>, <kbd>ArrowRight</kbd>, <kbd>ArrowUp</kbd>, <kbd>ArrowLeft</kbd>, Moves within a radio group, each key will move and set checked next radio in the list.\n\n## Responsive Guidelines\n\n- Default display set vertical but can also use the  `horizontal` attribute as true for some cases.\n- Default display set as `block`, but can change to `inline-block` by use of `horizontal` attribute as `true`.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Radio button styles were implemented in 4.0.0\n- Radio buttons were CSS-only components\n\n**4.x to 5.x**\n\n- Radio component has changed to a custom element `<ids-radio-group></ids-radio-group>`\n- Individual radio buttons are standalone custom elements `<ids-radio></ids-radio>` and are slotted into groups\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles\n\n### Converting from 4.x\n\nRadio Buttons are now standalone web components instead of being defined only with CSS styles:\n\n```html\n<!-- 4.x radio example -->\n<div class=\"field\">\n  <input type=\"radio\" class=\"radio\" name=\"options\" value=\"opt1\" id=\"option1\" />\n  <label for=\"option1\" class=\"radio-label\">Option one</label>\n</div>\n\n<!-- This is the same radio using a WebComponent -->\n<ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n```\n\nThe same rules apply to Radio Groups, which are also now standalone web components:\n\n```html\n<!-- 4.x radio group example -->\n<fieldset class=\"radio-group\">\n  <legend>Select delivery method</legend>\n  <input type=\"radio\" class=\"radio\" name=\"options\" value=\"opt1\" id=\"option1\" />\n  <label for=\"option1\" class=\"radio-label\">Option one</label>\n  <br/>\n  <input type=\"radio\" class=\"radio\" name=\"options\" value=\"opt2\" checked=\"true\" id=\"option2\" />\n  <label for=\"option2\"  class=\"radio-label\">Option two</label>\n  <br/>\n  <input type=\"radio\" class=\"radio\" name=\"options\" value=\"opt3\" id=\"option3\" />\n  <label for=\"option3\" class=\"radio-label\">Option three</label>\n  <br/>\n  <input type=\"radio\" class=\"radio\" name=\"options\" value=\"opt4\" disabled=\"true\" id=\"option4\" />\n  <label for=\"option4\" class=\"radio-label\">Option four</label>\n</fieldset>\n\n<!-- this is the same radio group using the WebComponent -->\n<ids-radio-group label=\"Select delivery method\">\n  <ids-radio value=\"opt1\" label=\"Option one\"></ids-radio>\n  <ids-radio value=\"opt2\" label=\"Option two\" checked=\"true\"></ids-radio>\n  <ids-radio value=\"opt3\" label=\"Option three\"></ids-radio>\n  <ids-radio value=\"opt4\" label=\"Option four\" disabled=\"true\"></ids-radio>\n</ids-radio-group>\n```\n"}},{"name":"ids-rating","attributes":[{"name":"ratingArr","values":[]},{"name":"value","description":"Sets the value attribute","values":[]},{"name":"stars","description":"Sets the stars attribute","values":[]},{"name":"disabled","description":"Sets the disabled state","values":[]},{"name":"readonly","description":"Sets the readonly attribute","values":[]},{"name":"size","description":"Sets the size attribute","values":[]}],"description":{"kind":"markdown","value":"# Ids Rating\n\n## Description\n\nAllows for the display or selection of an objects rating.\n\n## Usage\n\nThe rating component displays a scale of selectable values in ascending order. A user can select a rating by clicking the star with the position that corresponds to the users rating out of the total. Best for showing a user's current selection relative to the lower and upper limits of a scale.\n\n## Code Examples\n\n\nThe rating component can be used as an interactive or read only element. Users may select any whole value out of the total as a rating. When functioning as a read-only element, ratings may use .5 decimals to more accurately display the average rating of an object.\n\nA basic rating with 5 stars by default and none checked.\n\n```html\n<ids-rating></ids-rating>\n```\n\nA rating rating with 4.5/5 which is also readonly. If using half stars the rating component should be readonly as you cannot click half stars in any way with the UI.\n\n```html\n<ids-rating stars=\"5\" readonly=\"true\" value=\"4.5\" size=\"large\"></ids-rating>\n```\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>: If the rating item is enabled this will focus or unfocus the star.\n- <kbd>Enter</kbd>: If this will follow the link url or action.\n\n## Accessibility Guidelines\n\n- `aubible` span are added for screen readers to hear the star information.\n\n## Settings and Attributes\n\n- `stars` {number} Sets the stars attribute to displayed the amount of items`stars=\"5\"`\n- `value` {number} Sets the rating value attribute. `value=\"0\"`\n- `readyonly` {boolean} Sets the readonly attribute. Valid values are 'true' | 'false'\n- `size` {number} Sets the rating size attribute. `size=\"large\"` Valid values are 'small' | 'medium' | 'large'\n- `mode` {string} Sets the theme mode\n- `version` {string} Sets the theme version\n- `disabled` {boolean} Sets the disabled state\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Rating component was added in v4.0.0\n- Can be invoked on an element with `$('#my-element').rating();`\n\n**4.x to 5.x**\n\n- Rating is now a custom element `<ids-rating></ids-rating>`\n\n### Version - 4.x:\n\n```html\n  <div class=\"rating\">\n  <input type=\"radio\" class=\"is-filled\" name=\"rating-name\" id=\"one-star-id1\"/>\n  <label for=\"one-star-id1\">\n    <svg class=\"icon\" focusable=\"false\" aria-hidden=\"true\">\n      <use href=\"#icon-star-filled\"/>\n    </svg>\n    <span class=\"audible\">1 out of 5 Stars</span>\n  </label>\n\n  <input type=\"radio\" class=\"is-filled\" name=\"rating-name\" id=\"two-star-id1\"/>\n  <label for=\"two-star-id1\">\n    <svg class=\"icon\" focusable=\"false\" aria-hidden=\"true\">\n      <use href=\"#icon-star-filled\"/>\n    </svg>\n    <span class=\"audible\">2 out of 5 Stars</span>\n  </label>\n\n  <input type=\"radio\" class=\"is-filled\" name=\"rating-name\" id=\"three-star-id1\"/>\n  <label for=\"three-star-id1\">\n    <svg class=\"icon\" focusable=\"false\" aria-hidden=\"true\">\n      <use href=\"#icon-star-filled\"/>\n    </svg>\n    <span class=\"audible\">3 out of 5 Stars</span>\n  </label>\n\n  <input type=\"radio\" class=\"is-half\" checked name=\"rating-name\" id=\"four-star-id1\"/>\n  <label for=\"four-star-id1\">\n    <svg class=\"icon\" focusable=\"false\" aria-hidden=\"true\">\n      <use href=\"#icon-star-half\"/>\n    </svg>\n    <span class=\"audible\">4 out of 5 Stars</span>\n  </label>\n\n  <input type=\"radio\" name=\"rating-name\" id=\"five-star-id1\"/>\n  <label for=\"five-star-id1\">\n    <svg class=\"icon\" focusable=\"false\" aria-hidden=\"true\">\n      <use href=\"#icon-star-filled\"/>\n    </svg>\n    <span class=\"audible\">5 out of 5 Stars</span>\n  </label>\n  </div>\n```\n\n### Version - 5.x:\n\n```html\n  <ids-rating></ids-rating>\n```\n"}},{"name":"ids-scroll-view","attributes":[{"name":"vetoableEventTypes","values":[]},{"name":"#activeNumber","description":"Current active slide index","values":[]},{"name":"#isClickOrKey","description":"State of action by click or keyboard","values":[]},{"name":"circleButtons","description":"Get the list of circle buttons","values":[]},{"name":"controls","description":"Get the controls container","values":[]},{"name":"loop","description":"Set the loop, true will loop back after next/previous reached to end","values":[]},{"name":"showTooltip","description":"Set the tooltip for circle buttons","values":[]},{"name":"suppressControls","description":"Set suppress controls for circle buttons","values":[]}],"description":{"kind":"markdown","value":"# Ids Scroll View Component\n\n## Description\n\nThe scroll view component allows swipe and scroll in between a number of slides/tabs or pages. The user can click the circle buttons or swipe left or right to activate adjacent page/slide/tabs. This component is roughly similar to the previous \"Circle Pager\". Its also similar to a \"Carousel\".\n\n## Use Cases\n\n- Use when a user is primarily a mobile user and they need to flip through a set of related objects or pages.\n- Do Not Use as a dumping ground for content or for primary / main interaction\n\n## Terminology\n\n- **Circle Pager**: The older 4.x name for his component\n- **Carousel**: Another name for this sort of component with slides and buttons\n\n## Settings and Attributes\n\n- `loop` {boolean} sets the loop, true will loop back after next/previous reached to end\n- `show-tooltip` {boolean} sets the tooltip for circle buttons\n- `suppress-controls` {boolean} sets suppress controls for circle buttons\n\n## Themeable Parts\n\n- `container` allows you to further style the parent container element\n- `scroll-view` allows you to further style the scrolling container\n- `controls` allows you to further style the control button area\n- `scroll-view-button` allows you to further style the individual circle buttons in the carousel\n\n## Events\n\n- `beforefirst` Fires before move to first slide, you can return false in the response to veto\n- `beforeprevious` Fires before move to previous slide, you can return false in the response to veto\n- `beforenext` Fires before move to next slide, you can return false in the response to veto\n- `beforelast` Fires before move to last slide, you can return false in the response to veto\n- `beforeslideto` Fires before move to given slide, you can return false in the response to veto\n- `scrolled` Fires after each slide move\n\n## Methods\n\n- `first(): void` Move to first slide\n- `previous(): void` Move to previous slide\n- `next(): void` Move to next slide\n- `last(): void` Move to last slide\n- `slideTo(slideNumber: number): void` Slide to given slide number\n- `currentSlideNumber(): number | undefined` Get the current slide number\n\n## Features (With Code Examples)\n\nA scrollview with images. You just need to add each element to the scroll view. Each of the immediate children should get `slot=\"scroll-view-item\"`. If using images the `alt` tag is very important for accessibility. As a tip you can add \"Slide N\" or similar text to the alt tag as it helps screen reader users for context.\n\n```html\n<ids-scroll-view>\n    <img slot=\"scroll-view-item\" src=\"../assets/images/camera-1.png\" alt=\"Slide 1, Sony Camera, Front\"/>\n    <img slot=\"scroll-view-item\" src=\"../assets/images/camera-2.png\" alt=\"Slide 3, Sony Camera, Back Display\"/>\n    <img slot=\"scroll-view-item\" src=\"../assets/images/camera-3.png\" alt=\"Slide 3, Sony Camera, From Top\"/>\n    <img slot=\"scroll-view-item\" src=\"../assets/images/camera-4.png\" alt=\"Slide 4, Olympus Camera, Front\"/>\n    <img slot=\"scroll-view-item\" src=\"../assets/images/camera-5.png\" alt=\"Slide 5, Olympus Camera, Exposed to water\"/>\n    <img slot=\"scroll-view-item\" src=\"../assets/images/camera-6.png\" alt=\"Slide 6, Sony E-mount Camera, Front\"/>\n</ids-scroll-view>\n```\n\n## States and Variations\n\n- Focus\n- Active Slide\n- Scrolling\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>: Tabs you into the sider control area\n- <kbd>ArrowLeft / ArrowRight</kbd>: Moves to the next or previous slide\n\n## Responsive\n\n- The container will respect the width and size of its parent flowing if necessary. If using images they may stretch so you may need to constrain the contain.\n\n## Mobile Guidelines\n\n- Swipe left or swipe right will do the same as clicking the next button in the list of buttons\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Circle Pager component replaced `.inforCarousel()` and `.circlePage()` from 3.x in a more limited fashion\n\n**4.x to 5.x**\n\n- IdsScrollView component replaces Circle Pager from the previous version and adds swiping\n- Markup has changed to a custom element `<ids-scroll-view></ids-scroll-view>`\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/yaJ8mJrqRRej8oTsd6iT8P/IDS-(SoHo)-Component-Library-v4.5?node-id=760%3A771)\n\n## Accessibility Guidelines\n\n- The first tab activated the list of tabs (the circle buttons)\n- Left and up key expose the previous or next slide\n- Only interactive elements on the visible slide can get focus\n- The tab container gets focus with the keyboard\n- The complementary landmark role is used to identify all the content and interactive controls associated with the carousel widget.\n- The landmark provides a means to navigate to and identify the carousel features.\n- `tablist` and `tab` roles are defined for the dots used to indicate the number of slides and which slide is selected.\n- `tabpanel` roles are defined for the slide content\n- `button` role is used to override semantics of the a element used to define the previous and next slide\n\n## Regional Considerations\n\nInternal Labels will be localized in the current language. The scroll direction and active button will be enabled. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-search-field","attributes":[{"name":"isFormComponent","values":[]},{"name":"colorVariants","description":"Inherited from `IdsColorVariantMixin`","values":[]},{"name":"#categoriesPopup","values":[]},{"name":"#categoriesMenuButton","values":[]},{"name":"#categoriesActionButton","values":[]},{"name":"#categories","values":[]},{"name":"categories","values":[]},{"name":"category","values":[]},{"name":"selectedCategories","values":[]},{"name":"action","values":[]},{"name":"multiple","values":[]},{"name":"value","description":"Set the `value` attribute of input","values":[]},{"name":"#previousSearchValue","values":[]},{"name":"elements","description":"Get a list of element dependencies for this component","values":[]},{"name":"buttons","values":[]},{"name":"tabbable","values":[]},{"name":"disabled","description":"Sets the disabled attribute","values":[]},{"name":"readonly","description":"Sets the readonly attribute","values":[]},{"name":"format","description":"Return format","values":[]},{"name":"generatedId","values":[]},{"name":"triggeredByChange","values":[]},{"name":"isPasswordVisible","values":[]},{"name":"input","values":[]},{"name":"capsLockIcon","values":[]},{"name":"fieldContainer","values":[]},{"name":"labelEl","values":[]},{"name":"revealablePassword","description":"sets whether password reveal functionality is available","values":[]},{"name":"capsLock","description":"sets whether capslock indicatoris enabled or disabled","values":[]},{"name":"passwordVisible","description":"sets whether the password is currently visible","values":[]},{"name":"active","description":"When set the input will add a CSS class `is-active` that simulates the text input being \"focused\".","values":[]},{"name":"autoselect","description":"When set the input will select all text on focus","values":[]},{"name":"bgTransparent","description":"When set the input will add css class `bg-transparent`","values":[]},{"name":"textEllipsis","description":"When set the input will add css class `text-ellipsis`","values":[]},{"name":"#labelEl","description":"internal reference to a label element a user provides","values":[]},{"name":"placeholder","description":"Set the `placeholder` of input","values":[]},{"name":"readonlyBackground","values":[]},{"name":"labelWrap","description":"Set the label wrap setting of input","values":[]},{"name":"size","description":"Set the size (width) of input","values":[]},{"name":"textAlign","description":"Sets the text alignment","values":[]},{"name":"type","description":"Sets the input type","values":[]},{"name":"#id","description":"set the id of the input, which will also determine the\ninput id for labels at #${id}-input","values":[]},{"name":"cursor","description":"Set the css cursor property to something other than text","values":[]},{"name":"noMargins","description":"Sets the no margins attribute","values":[]},{"name":"padding","description":"Sets the inner padding (inline-start and end)","values":[]}],"description":{"kind":"markdown","value":"# Ids Search Field\n\n## Description\n\nA specific composition of existing components [Trigger Field](../ids-trigger-field/README.md) and [Input](../ids-input/README.md) meant for searching purposes. This is ideally placed in a header or at the top of a page so that users can search by typing on an input field.\n\n## Use Cases\n\n- Searching for a product on a market place\n\n## Settings\n\n- `label` { string } title to describe the type of input\n- `value` { string } text value of the input\n- `placeholder` { string } text hint to show when input is empty\n- `disabled` { boolean } disallow editing input and tabbing interaction\n- `readonly` { boolean } disallow editing input\n- `categories` { string[] } an array of text that dictates what appears in the categories dropdown\n- `category` { string } sets the initial text that appears in the categories dropdown menu\n- `selectedCategories` { string[] } returns an array of currently selected categories\n- `action` { string } if set, an action button will appear on the search field, and this button fires the \"search\" event\n- `multiple` { boolean } if true, this will allow multiple categories to be selected in the category menu\n\n## Events\n- `search` - Fires when the category action-button is clicked or when the `Enter` key is pressed.\n- `selected` - Fires after a Category is selected.\n- `deselected` - Fires after a Category is deselected.\n- `change` - Fires when the search field's input field is changed\n- `input` - Fires when typing in the search field's input field\n\n## Features (With Code Samples)\n\nUsing a custom label and initial value\n```html\n<ids-search-field label=\"Pokemon\" value=\"Pikachu\"></ids-search-field>\n```\n\nUsing a custom Placeholder\n```html\n<ids-search-field label=\"Pokemon\" placeholder=\"Type any Pokemon name\"></ids-search-field>\n```\n\nDisabled state\n```html\n<ids-search-field disabled label=\"Pokemon\" placeholder=\"Snorlax\" value=\"\"></ids-search-field>\n```\n\nRead-only state\n```html\n    <ids-search-field readonly label=\"Pokemon\" value=\"Lapras\"></ids-search-field>\n```\n\nSearch field with Categories\n```html\n  <ids-search-field label=\"Categories\" category=\"Files\" clearable></ids-search-field>\n```\n```js\ndocument.querySelector('ids-search-field[category]')?.categories = ['Images', 'Documents', 'Audio', 'Video'];\n```\n\nSearch field with Categories that specifies that multiple can be selected\n```html\n  <ids-search-field label=\"Categories - Multiple\" category=\"Files\" multiple></ids-search-field>\n```\n```js\ndocument.querySelector('ids-search-field[multiple]')?.categories = ['Images', 'Documents', 'Audio', 'Video'];\n```\n\nSearch field with short version Categories dropdown menu (category attribute not set)\n```html\n  <ids-search-field label=\"Categories - Short\"  id=\"categories-short\"></ids-search-field>\n```\n```js\ndocument.querySelector('#categories-short')?.categories = ['Images', 'Documents', 'Audio', 'Video'];\n```\n\n## Responsive Guidelines\n\n- Because this component is simply an `ids-input` wrapped inside an `ids-trigger-field`, it will depend on the styling of those two components\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Searchfield is a new component added in v4.0.0\n- Searchfield is invoked with `$('#my-element').searchfield();`\n\n**4.x to 5.x**\n\n- Search Field is now a custom element `<ids-search-field></ids-search-field>`\n- Search Field extends IdsTriggerField and IdsInput, holding all functionality of those components\n\n### Converting from 4.x\n\n```html\n<!-- 4.x search field example -->\n<div class=\"field\">\n  <label for=\"searchfield\">Search</label>\n  <input id=\"searchfield\" name=\"searchfield\" class=\"searchfield\" data-options= \"{'clearable': 'true'}\" placeholder=\"Type a search term\"/>\n</div>\n\n<!-- this is the equivalent web component -->\n<ids-search-field label=\"Search\" placeholder=\"Type a seardch term\"></ids-search-field>\n"}},{"name":"ids-separator","attributes":[{"name":"colorVariants","description":"Inherited from `IdsColorVariantMixin`","values":[]},{"name":"vertical","description":"Set the separator to be vertical","values":[]}],"description":{"kind":"markdown","value":"# Ids Separator Component\n\nThe Separator Component provides a visual separator between two items. Its currently used on `ids-toolbar` and `ids-menu` and `ids-popupmenu`. In each case it adds a vertical line between two of the respective items.\n\nFor IDS Menu Component examples see [Ids Popup Menu](../ids-menu/README.md) and for IDS Toolbar Component examples see [Ids Toolbar](../ids-toolbar/README.md).\n\n## Use Cases\n\n- Display a visual split between two tabs that are not directly related\n- Display or split sections or menu items that are not directly related\n\n## Settings (Attributes)\n\n- `vertical` Can be used to turn set the separator between a horizontal and vertical. The vertical one is used on tabs and the horizontal (default) is used on menus\n\n## Themeable Parts\n\n- `separator` allows you to further style the separator element\n\n## Features (With Code Examples)\n\nTo Show separators between items in a menu you would do something like the following.\n\n```html\n<ids-popup-menu id=\"my-menu\" target=\"menu-button\" trigger-type=\"click\">\n    <ids-menu-group>\n        <ids-menu-item>Personalize Columns</ids-menu-item>\n    </ids-menu-group>\n    <ids-separator></ids-separator>\n    <ids-menu-group select=\"single\">\n        <ids-menu-header>Row Height</ids-menu-header>\n        <ids-menu-item disabled=\"true\">Extra Small</ids-menu-item>\n        <ids-menu-item>Small</ids-menu-item>\n        <ids-menu-item>Medium</ids-menu-item>\n        <ids-menu-item selected=\"true\">Large</ids-menu-item>\n    </ids-menu-group>\n    <ids-separator></ids-separator>\n    <ids-menu-group select=\"multiple\" keep-open=\"true\">\n        <ids-menu-item selected=\"true\">Show Filter Row</ids-menu-item>\n    </ids-menu-group>\n    <ids-menu-group>\n        <ids-menu-item>Run Filter</ids-menu-item>\n        <ids-menu-item>Clear Filter</ids-menu-item>\n    </ids-menu-group>\n</ids-popup-menu>\n```\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\nSeparator did not exist as a standalone component in this version\n\n**4.x to 5.x**\n\n- Separator is now a standalone custom element `<ids-separator><ids-separator>`\n"}},{"name":"ids-skip-link","attributes":[{"name":"href","description":"Set the link href","values":[]}],"description":{"kind":"markdown","value":"# Ids Skip Link Component\n\n## Description\n\nA skip link is a single element added first thing in your page. When the skip link is focused from the browser URL using <kbd>Tab</kbd>, it will activate allowing you to jump to a main section. The main content is not usually the first thing on a web page. Keyboard and screen reader users generally must navigate a long list of navigation links, sub-lists of links, corporate icons, site searches, and other elements before ever arriving at the main content. This is particularly difficult for users with some forms of motor disabilities.\n\nFor more details info on skip links see <a href=\"https://webaim.org/techniques/skipnav/\" target=\"_blank\">this article</a>.\n\n## Use Cases\n\n- When you want to add accessibility features to your application\n- When you have a lot of content at the top of every page such as links/navigation/headers that may need to be jumped over when familiar with the page\n\n## Terminology\n\n- **Link/Hyperlink**: An interactive link to another page within Infor software to external destinations.\n- **Skip Link**: An interactive link to jump past some page content\n\n## Features (With Code Examples)\n\nA normal skip link element as a custom element. That will link to a section with `id=\"main-content\"` somewhere else in the page\n\n```html\n<ids-skip-link href=\"#main-content\">Skip to Main Content</ids-skip-link>\n```\n\n## Settings and Attributes\n\n- `href` {string} Set the links href to a url or file\n- `mode` {string} Set the theme mode\n- `version` {string} Set the theme version\n\n## Themeable Parts\n\n- `skiplink` allows you to further style the skip link element\n\n## States and Variations (With Code Examples)\n\n- Focused / Active\n\n## Keyboard Guidelines\n\n- When you <kbd>Tab</kbd> from the browser bar into the page the skip link will appear on and be focused\n- <kbd>Enter</kbd> will follow the link to the `id` of the content area you specify\n\n## Responsive Guidelines\n\n- Skip links are fixed position\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\nSkip link is a CSS-only component applied to `<a>` tags.\n\n**4.x to 5.x**\n\n- Skip Link is now a standalone custom element `<ids-skip-link><ids-skip-link>`\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/yaJ8mJrqRRej8oTsd6iT8P/IDS-(SoHo)-Component-Library-v4.5?node-id=760%3A771)\n\n## Accessibility Guidelines\n\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. Ensure the color tags that indicate state like OK, cancel, ect have other ways to indicate that information. This is failing.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and images of text has a contrast ratio of at least 4.5:1.   Ensure the color tags pass contrast.\n\n## Regional Considerations\n\nLink text should be localized in the current language. And should flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-slider","attributes":[{"name":"DEFAULT_MIN","values":[]},{"name":"DEFAULT_MAX","values":[]},{"name":"DEFAULT_TYPE","values":[]},{"name":"#trackBounds","values":[]},{"name":"#label","values":[]},{"name":"#labelSecondary","values":[]},{"name":"#labels","values":[]},{"name":"#isRTL","values":[]},{"name":"#mouseHover","values":[]},{"name":"#percent","values":[]},{"name":"#percentSecondary","values":[]},{"name":"slider","values":[]},{"name":"trackArea","values":[]},{"name":"progressTrack","values":[]},{"name":"track","values":[]},{"name":"tickContainer","values":[]},{"name":"thumb","values":[]},{"name":"thumbDraggable","values":[]},{"name":"thumbShadow","values":[]},{"name":"tooltip","values":[]},{"name":"tooltipText","values":[]},{"name":"tooltipPin","values":[]},{"name":"firstTick","values":[]},{"name":"lastTick","values":[]},{"name":"thumbSecondary","values":[]},{"name":"thumbDraggableSecondary","values":[]},{"name":"thumbShadowSecondary","values":[]},{"name":"thumbSecondaryDraggable","values":[]},{"name":"tooltipSecondary","values":[]},{"name":"tooltipTextSecondary","values":[]},{"name":"tooltipPinSecondary","values":[]},{"name":"disabled","description":"Controls Slider disabled state","values":[]},{"name":"readonly","description":"Controls Slider readonly state","values":[]},{"name":"label","description":"Modifies the primary Slider thumb's label contents","values":[]},{"name":"labelSecondary","description":"Modifies the primary Slider thumb's label contents","values":[]},{"name":"vertical","description":"Set the orientation of the slider","values":[]},{"name":"isRTL","description":"Keep track of RTL","values":[]},{"name":"onLanguageChange","description":"Handle Languages Changes","values":[]},{"name":"labels","description":"Set the labels to display on each step/tick mark (only applicable to step sliders)","values":[]},{"name":"stepNumber","description":"Sets the interval between slider ticks (only applicable to step sliders)","values":[]},{"name":"percentSecondary","description":"Sets the secondary slider thumb value based on percentage (range slider only)","values":[]},{"name":"percent","description":"Sets the primary slider thumb value based on percentage","values":[]},{"name":"valueSecondary","description":"Set the secondary value of the slider (range slider only)","values":[]},{"name":"value","description":"Set the primary value of the slider","values":[]},{"name":"min","description":"Sets the minimum-possible value of the slider","values":[]},{"name":"max","description":"Sets the maximum-possible value of the slider","values":[]},{"name":"type","description":"Sets the slider type","values":[]},{"name":"showTooltip","description":"Enables a tooltip displaying thumb values when either thumb is focused","values":[]},{"name":"color","description":"Set the color of the bar","values":[]}],"description":{"kind":"markdown","value":"# Ids Slider Component\n\n## Description\n\nDisplays a range of selectable values(s) between a minimum and maximum, which can be controlled by the thumb(s) along the track of the slider. Configurations include the default (1 thumb), a range slider (2 thumbs), and a step slider (1 thumb and x amount of ticks). They can also be converted from horizontal (default) to vertical orientation. The value(s) can be modified by either clicking the area around the track, by dragging the thumb back and forth, or by focusing and pressing the arrow keys.  A user can select a single value or range of values.\n\n## Use Cases\n\n- Control an input with limited options through clicking/dragging/keyboard interaction.\n- Best for showing a user's current selection relative to the lower and upper limits of a scale.\n\n## Terminology\n\n- **Minimum**: The smallest value possible, on one end of the slider\n- **Maximum**: The largest value possible, on the other end of the slider\n- **Thumb**: The circular button that can be dragged back and forth on the slider to control input\n- **Tick**: The dots along the step slider that indicate the amount of choices for input\n- **Track**: The bar which the thumb moves along\n- **Track area**: The area around the track which can be clicked to modify the input value\n\n## Settings (Attributes)\n\n- `value` {number} set the primary value of the slider\n- `value-secondary` {number} set the secondary value of the slider (applicable only for range slider)\n- `min` {number} set the minimum value of the slider\n- `max` {number} set the maximum value of the slider\n- `color` {string} set the color of the slider\n- `type` {'single' | 'range' | 'step'} set the type of the slider\n- `show-tooltip` {boolean} if true, allows the display of a Tooltip on each slider handle during interactions\n- `step-number` {number >= 2} number of steps (applicable only for the step slider)\n- `vertical` {boolean}\n\n## Settings (Non-attributes)\n\n- `labels` {array} set the list of labels you want (applicable only for step slider)\n\n## Events\n\n- `drag` - passed up from Slider's thumbs in ShadowRoot, which are controlled by [IdsDraggable](../ids-draggable/README.md).  Listening to this event can enable special changes on the dragging of slider handles\n\n## Accessibility\n\nUsers can tab to focus on the thumb with <kbd>Tab<kbd> and modify values with <kbd>Arrow Up/Down/Left/Right</kbd>.\n\n## Features (With Code Samples)\n\nA simple single slider from 0 to 100\n\n```html\n<ids-slider value=\"50\" min=\"0\" max=\"100\"></ids-slider>\n```\n\nA range slider that can handle negative and positive values\n\n```html\n<ids-slider type=\"range\" min=\"-50\" max=\"50\"></ids-slider>\n```\n\nA step slider with custom color and 5 intervals\n\n```html\n<ids-slider type=\"step\" step-number=\"5\" color=\"green\"></ids-slider>\n```\n\nA vertical step slider witih 12 intervals\n\n```html\n<ids-slider vertical type=\"step\" step-number=\"12\"></ids-slider>\n```\n\n### Custom labels\n\nCustom label strings can be applied to a Slider with `type=\"step\"` set.\n\n```html\n<ids-slider type=\"step\"></ids-slider>\n```\n\nTo add custom labels, the `step-number` attribute must match the size of the array of labels to be applied.  Absent this match, the labels will be hidden:\n\n```js\nconst labels = ['very bad, poor, average, good, excellent'];\nconst slider = document.querySelector('ids-slider');\n\nslider.labels = labels;\nslider.stepNumber = labels.length;\n```\n\n## Responsive Guidelines\n\n- The slider stretches to 100% width of its container (horizontal orientation)\n- The slider has a minimum height of 300px (vertical orientation)\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Slider was a new component in v4.0.0\n- Slider can be invoked with `$('#my-element').slider();`\n\n**4.x to 5.x**\n\n- Slider is now a custom element `<ids-slider></ids-slider>`\n- Slider options are avaiable as attributes (such as `vertical`, `type`, etc)\n\n### Converting from 4.x\n\n```html\n<div class=\"field\">\n  <label for=\"slider-regular-example\">Regular</label>\n  <input id=\"slider-regular-example\" name=\"slider-regular\" class=\"slider\" type=\"range\"/>\n</div>\n```\nis the 4.x equivalent of the web component example below\n\n```html\n<ids-slider type=\"single\"></ids-slider>\n```\n"}},{"name":"ids-spinbox","attributes":[{"name":"isFormComponent","values":[]},{"name":"decrementButton","values":[]},{"name":"incrementButton","values":[]},{"name":"max","values":[]},{"name":"min","values":[]},{"name":"step","values":[]},{"name":"tabbable","description":"Override tabbable to simplify and ignore trigger buttons (never should be tabbable)","values":[]},{"name":"value","description":"Set the `value` attribute of input","values":[]},{"name":"disabled","description":"Sets the disabled attribute","values":[]},{"name":"readonly","description":"Sets the readonly attribute","values":[]},{"name":"#stepDirection","description":"represents the direction a user is holding for\nthe spinbox; works to enable long press intervals","values":[]},{"name":"#stepCycleTimeout","description":"stores a timeout related to value cycling","values":[]},{"name":"elements","description":"Get a list of element dependencies for this component","values":[]},{"name":"buttons","values":[]},{"name":"format","description":"Return format","values":[]},{"name":"generatedId","values":[]},{"name":"triggeredByChange","values":[]},{"name":"colorVariants","description":"Inherited from `IdsColorVariantMixin`","values":[]},{"name":"isPasswordVisible","values":[]},{"name":"input","values":[]},{"name":"capsLockIcon","values":[]},{"name":"fieldContainer","values":[]},{"name":"labelEl","values":[]},{"name":"revealablePassword","description":"sets whether password reveal functionality is available","values":[]},{"name":"capsLock","description":"sets whether capslock indicatoris enabled or disabled","values":[]},{"name":"passwordVisible","description":"sets whether the password is currently visible","values":[]},{"name":"active","description":"When set the input will add a CSS class `is-active` that simulates the text input being \"focused\".","values":[]},{"name":"autoselect","description":"When set the input will select all text on focus","values":[]},{"name":"bgTransparent","description":"When set the input will add css class `bg-transparent`","values":[]},{"name":"textEllipsis","description":"When set the input will add css class `text-ellipsis`","values":[]},{"name":"#labelEl","description":"internal reference to a label element a user provides","values":[]},{"name":"placeholder","description":"Set the `placeholder` of input","values":[]},{"name":"readonlyBackground","values":[]},{"name":"labelWrap","description":"Set the label wrap setting of input","values":[]},{"name":"size","description":"Set the size (width) of input","values":[]},{"name":"textAlign","description":"Sets the text alignment","values":[]},{"name":"type","description":"Sets the input type","values":[]},{"name":"#id","description":"set the id of the input, which will also determine the\ninput id for labels at #${id}-input","values":[]},{"name":"cursor","description":"Set the css cursor property to something other than text","values":[]},{"name":"noMargins","description":"Sets the no margins attribute","values":[]},{"name":"padding","description":"Sets the inner padding (inline-start and end)","values":[]}],"description":{"kind":"markdown","value":"# Ids Spinbox Component\n\n## Description\nAllows a user to input a value that goes up/down in specific intervals, and also optionally within a range of integers.\n\n## Use Cases\n- a normal input that goes up or down specific increments by it's nature.\n\n## Themeable Parts\n- `container` the overall spinbox container\n- `input` the spinbox center input\n- `button` increment/decrement buttons\n- `label` the label above the input\n- `validation` the validation message that pops up if any errors exist\n\n## Features (With Code Examples)\n\nSpinbox with a minimum and maximum\n\n```html\n<ids-spinbox\n  value=\"0\"\n  min=\"0\"\n  max=\"5\"\n  label=\"Enter an int from 0 to 5\"\n  placeholder=\"0=>5\"\n></ids-spinbox>\n```\n\nSpinbox which increments in intervals of 5\n```html\n <ids-spinbox\n  value=\"0\"\n  min=\"-25\"\n  max=\"25\"\n  step=\"5\"\n  label=\"Jumps 5 from -25 to 25\"\n></ids-spinbox>\n ```\n\nSpinbox which shows a marker with changes, and no range limits\n\n```html\n<ids-spinbox\n  value=\"0\"\n  label=\"Unbounded Spinbox\"\n  dirty-tracker=\"true\"\n></ids-spinbox>\n```\n\nSpinbox which is required to have a value set when tabbed off.\n\n```html\n<ids-spinbox\n  value=\"\"\n  label=\"Value Is Required\"\n  validation=\"required\"\n></ids-spinbox>\n```\n\n## Settings and Attributes\n\n`value` `{number}` the current number assigned to the step box\n\n`max` `{number}` maximum/ceiling value possible to assign to `value`\n\n`min` `{number}` minimum/floor value possible to assign to `value`\n\n`label` `{string}` label shown above the spinbox\n\n`labelState` `{string}` label whether a label's text has been flagged as hidden.\n(a label is still required for the sake of accessibility and will be applied on the input element)\n\n`placeholder` `{string}` text shown as a hint when user clears text on the input\n\n`validate` `{string}` validation message text; set to `required` to require validation.\n\n## Keyboard Guidelines\n- TAB should move off of the component to the next focusable element on page.\n- SHIFT + TAB should move to previous focusable element on the page.\n- UP/DOWN arrow keys should increment, and decrement the ids-spinbox value.\n\n## Responsive Guidelines\n\nN/A\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Spinbox was a new component added in v4.0.0\n- Spinbox can be invoked against an input field with `$('#my-element').spinbox();`\n\n**4.x to 5.x**\n\n- Spinbox is now a custom element `<ids-spinbox></ids-spinbox>`\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Accessibility Guidelines\n- 1.4.3 Contrast (Minimum) - there should be enough contrast on the background which the wizard resides on in the page.\n- Be sure to provide labels that provide clear intent as to the representation of the value which the spinbox controls.\n\n## Regional Considerations\nLabel text should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n"}},{"name":"ids-splitter-local-storage","attributes":[{"name":"root","values":[]}],"description":{"kind":"markdown","value":"# Ids Splitter Component\n\nThe Ids Splitter is used to divide the user interface of a page. It is composed of resizable \"panes\" which divide content. It can layout either horizontally or vertically along an axis where a user can resize the panes, these are represented as `<ids-splitter-pane>` components.\n\n![Different variations of IdsSplitterLayout](./doc/ids-splitter-markup-legend.png)\n\nThe pane can move to the left or the right of the screen. This allows the user to have control of the customized layout. Elements inside and outside the pane will be resized to fit depending on if their css is fluid.\n\n## Use Cases\n\n- Divides the user interface of a screen.\n\n## Terminology\n\n- **Splitter**: The splitter container element\n- **SplitterPane**: One zone/section inside the splitter\n- **SplitBar**: The generated bar element to drag panes to resize\n\n## Features (With Code Examples)\n\nA default splitter behavior, axis will set to \"x\" (horizontally) and align will set to \"start\".\n\n```html\n<ids-splitter>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter align set to end.\n\n```html\n<ids-splitter align=\"end\">\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set to initial size 30%.\n\n```html\n<ids-splitter>\n  <ids-splitter-pane size=\"30%\"></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set to minimum size of 10% to be resize.\n\n```html\n<ids-splitter>\n  <ids-splitter-pane min-size=\"10%\"></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set to maximum size of 80% to be resize, limited to single split only.\n\n```html\n<ids-splitter>\n  <ids-splitter-pane max-size=\"80%\"></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set to initial collapsed pane. Collapsed can only apply to start pane.\n\n```html\n<ids-splitter>\n  <ids-splitter-pane collapsed></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter with multiple splits.\n\n```html\n<ids-splitter>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set as vertically.\n\n```html\n<ids-splitter axis=\"y\">\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set to nested (horizontally and vertically).\n\n```html\n<ids-splitter>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane>\n    <ids-splitter axis=\"y\">\n      <ids-splitter-pane></ids-splitter-pane>\n      <ids-splitter-pane></ids-splitter-pane>\n    </ids-splitter>\n  </ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter with custom (aria-label) for draggable bar/s.\n\n```html\n<ids-splitter label=\"Custom Resize Text\">\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter to do the resize after drag-end.\n\n```html\n<ids-splitter resize-on-drag-end>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set as disabled.\n\n```html\n<ids-splitter disabled>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSave splitter position to local storage.\n\n```html\n<ids-splitter unique-id=\"some-uniqueid\" save-position>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\n## Settings and Attributes (Splitter)\n\n- `align` {string} Set the split bar align direction to start or end\n- `axis` {string} Set the splitter axis direction x: horizontal or y: vertical\n- `disabled` {boolean} Sets the splitter to disabled state\n- `label` {string} Set the aria-label text for each split bar\n- `resizeOnDragEnd` {boolean} Sets the splitter to resize on drag end\n- `savePosition` {boolean} Set splitter to save position to local storage.\n- `uniqueId` {string} Set uniqueId to save to local storage, so same saved position can be use for whole app.\n\n## Settings and Attributes (Splitter Pane)\n\n- `size` {string|number} Sets initially the pane size\n- `minSize` {string|number} Sets initially the pane minimum size\n- `maxSize` {string|number} Sets initially the pane maximum size\n- `collapsed` {boolean} Sets initially the pane to collapsed state\n\n## Theme-able Parts (Splitter)\n\n- `splitter` allows you to further style the splitter element\n- `split-bar` allows you to further style the split bar element\n- `split-bar-icon` allows you to further style the split bar icon element\n\n## Theme-able Parts (Splitter Pane)\n\n- `pane` allows you to further style the splitter pane element\n\n## Events (Splitter)\n\n- `beforecollapsed` Fires before the splitter pane get collapsed, you can return false in the response to veto\n- `collapsed` Fires after the splitter pane get collapsed\n- `beforeexpanded` Fires before the splitter pane get expanded, you can return false in the response to veto\n- `expanded` Fires after the splitter pane get expanded\n- `beforesizechanged` Fires before the splitter pane size changed, you can return false in the response to veto\n- `sizechanged` Fires after the splitter pane size changed\n- `save-position` Fires after the local storage settings changed in some way\n- `clear-position` Fires after clear the saved position from local storage\n\n## Methods (Splitter)\n\n- `clearPosition(uniqueId: string|undefined)` Clear the saved position from local storage, If uniqueId is undefined will use Internal attached\n- `clearPositionAll()` Clear all splitter related saved position from local storage\n- `collapse(options: { startPane: HTMLElement|string, endPane: HTMLElement|string }): void` Collapse start pane size for given start/end panes or panes CSS selector\n- `expand(options: { startPane: HTMLElement|string, endPane: HTMLElement|string }): void` Expand start pane size for given start/end panes or panes CSS selector\n- `getAllPairs(): Array<object>` Get list of splitter pairs\n- `getPair(options: { startPane: HTMLElement|string, endPane: HTMLElement|string }): object` Get a splitter pair by given start/end panes or panes CSS selector\n- `idTobeUse(uniqueId?: string, suffix?: string, prefix?: string): string` Get the id to be use\n- `isHorizontal(): boolean` Get true if current orientation is horizontal\n- `sizes(): Array<number>` Get list of current sizes\n- `minSizes(): Array<number>` Get list of current minimum sizes\n- `maxSizes(): Array<number>` Get list of current maximum sizes, limited to single split\n\n## States and Variations (With Code Examples)\n\n- Horizontal: Ability to display horizontal split content\n- Vertical: Ability to display vertical split content\n- Multiple: Splitter with multiple splits\n- Nested: Splitter nested with another splitter (horizontally and/or vertically)\n- Disabled: split-bar/s cannot be clicked, hovered, focused or dragged and not visible\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift + Tab</kbd>: This will focus or unfocus the split-bar/s.\n- <kbd>Down/Left Arrow</kbd>: Resize and moves the focused split-bar to left on horizontal, or bottom on vertical splitter.\n- <kbd>Up/Right Arrow</kbd>: Resize and moves the focused split-bar to right on horizontal, or top on vertical splitter.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Splitter was a new component added in v4.1.1\n- Splitter can be invoked on a container element with `$('#my-element').splitter();`\n\n**4.x to 5.x**\n\n- Splitter's base component is now a custom element `<ids-splitter></ids-splitter>`\n- Content that should live in \"split\" areas should be slotted into `<ids-splitter-pane></ids-splitter-pane>` components.\n- Splitter orientation can be set by use of `axis` settings.\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/ri2Knf3KchdfdzRAeds0Ab/IDS-Mobility-v4.6?node-id=1%3A5740)\n\n## Accessibility Guidelines\n\n- Splitter component contained in the element has a `role=\"group\"`.\n- Each pane element if `id` attribute not provided will add component generated default id to use with split-bar for reference.\n- Each split-bar element contains `role=\"separator\"`.\n- Each split-bar element contains `aria-label\"`, if `label` not provided will use component generated default text.\n- Each split-bar element contains its current state with a `horizontal` or `vertical` value as `aria-orientation`.\n- Each split-bar element contains `aria-controls` with value `{start-pane-id}` and `{end-pane-id}`.\n- Each split-bar element contains its current state with a `boolean` value as `aria-disabled`.\n\n## Regional Considerations\n\nIn Right To Left Languages the icons, text and alignment will flow to the other side. Labels should be localized in the current language.\n"}},{"name":"ids-splitter-pane","attributes":[],"description":{"kind":"markdown","value":"# Ids Splitter Component\n\nThe Ids Splitter is used to divide the user interface of a page. It is composed of resizable \"panes\" which divide content. It can layout either horizontally or vertically along an axis where a user can resize the panes, these are represented as `<ids-splitter-pane>` components.\n\n![Different variations of IdsSplitterLayout](./doc/ids-splitter-markup-legend.png)\n\nThe pane can move to the left or the right of the screen. This allows the user to have control of the customized layout. Elements inside and outside the pane will be resized to fit depending on if their css is fluid.\n\n## Use Cases\n\n- Divides the user interface of a screen.\n\n## Terminology\n\n- **Splitter**: The splitter container element\n- **SplitterPane**: One zone/section inside the splitter\n- **SplitBar**: The generated bar element to drag panes to resize\n\n## Features (With Code Examples)\n\nA default splitter behavior, axis will set to \"x\" (horizontally) and align will set to \"start\".\n\n```html\n<ids-splitter>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter align set to end.\n\n```html\n<ids-splitter align=\"end\">\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set to initial size 30%.\n\n```html\n<ids-splitter>\n  <ids-splitter-pane size=\"30%\"></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set to minimum size of 10% to be resize.\n\n```html\n<ids-splitter>\n  <ids-splitter-pane min-size=\"10%\"></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set to maximum size of 80% to be resize, limited to single split only.\n\n```html\n<ids-splitter>\n  <ids-splitter-pane max-size=\"80%\"></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set to initial collapsed pane. Collapsed can only apply to start pane.\n\n```html\n<ids-splitter>\n  <ids-splitter-pane collapsed></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter with multiple splits.\n\n```html\n<ids-splitter>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set as vertically.\n\n```html\n<ids-splitter axis=\"y\">\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set to nested (horizontally and vertically).\n\n```html\n<ids-splitter>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane>\n    <ids-splitter axis=\"y\">\n      <ids-splitter-pane></ids-splitter-pane>\n      <ids-splitter-pane></ids-splitter-pane>\n    </ids-splitter>\n  </ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter with custom (aria-label) for draggable bar/s.\n\n```html\n<ids-splitter label=\"Custom Resize Text\">\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter to do the resize after drag-end.\n\n```html\n<ids-splitter resize-on-drag-end>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set as disabled.\n\n```html\n<ids-splitter disabled>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSave splitter position to local storage.\n\n```html\n<ids-splitter unique-id=\"some-uniqueid\" save-position>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\n## Settings and Attributes (Splitter)\n\n- `align` {string} Set the split bar align direction to start or end\n- `axis` {string} Set the splitter axis direction x: horizontal or y: vertical\n- `disabled` {boolean} Sets the splitter to disabled state\n- `label` {string} Set the aria-label text for each split bar\n- `resizeOnDragEnd` {boolean} Sets the splitter to resize on drag end\n- `savePosition` {boolean} Set splitter to save position to local storage.\n- `uniqueId` {string} Set uniqueId to save to local storage, so same saved position can be use for whole app.\n\n## Settings and Attributes (Splitter Pane)\n\n- `size` {string|number} Sets initially the pane size\n- `minSize` {string|number} Sets initially the pane minimum size\n- `maxSize` {string|number} Sets initially the pane maximum size\n- `collapsed` {boolean} Sets initially the pane to collapsed state\n\n## Theme-able Parts (Splitter)\n\n- `splitter` allows you to further style the splitter element\n- `split-bar` allows you to further style the split bar element\n- `split-bar-icon` allows you to further style the split bar icon element\n\n## Theme-able Parts (Splitter Pane)\n\n- `pane` allows you to further style the splitter pane element\n\n## Events (Splitter)\n\n- `beforecollapsed` Fires before the splitter pane get collapsed, you can return false in the response to veto\n- `collapsed` Fires after the splitter pane get collapsed\n- `beforeexpanded` Fires before the splitter pane get expanded, you can return false in the response to veto\n- `expanded` Fires after the splitter pane get expanded\n- `beforesizechanged` Fires before the splitter pane size changed, you can return false in the response to veto\n- `sizechanged` Fires after the splitter pane size changed\n- `save-position` Fires after the local storage settings changed in some way\n- `clear-position` Fires after clear the saved position from local storage\n\n## Methods (Splitter)\n\n- `clearPosition(uniqueId: string|undefined)` Clear the saved position from local storage, If uniqueId is undefined will use Internal attached\n- `clearPositionAll()` Clear all splitter related saved position from local storage\n- `collapse(options: { startPane: HTMLElement|string, endPane: HTMLElement|string }): void` Collapse start pane size for given start/end panes or panes CSS selector\n- `expand(options: { startPane: HTMLElement|string, endPane: HTMLElement|string }): void` Expand start pane size for given start/end panes or panes CSS selector\n- `getAllPairs(): Array<object>` Get list of splitter pairs\n- `getPair(options: { startPane: HTMLElement|string, endPane: HTMLElement|string }): object` Get a splitter pair by given start/end panes or panes CSS selector\n- `idTobeUse(uniqueId?: string, suffix?: string, prefix?: string): string` Get the id to be use\n- `isHorizontal(): boolean` Get true if current orientation is horizontal\n- `sizes(): Array<number>` Get list of current sizes\n- `minSizes(): Array<number>` Get list of current minimum sizes\n- `maxSizes(): Array<number>` Get list of current maximum sizes, limited to single split\n\n## States and Variations (With Code Examples)\n\n- Horizontal: Ability to display horizontal split content\n- Vertical: Ability to display vertical split content\n- Multiple: Splitter with multiple splits\n- Nested: Splitter nested with another splitter (horizontally and/or vertically)\n- Disabled: split-bar/s cannot be clicked, hovered, focused or dragged and not visible\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift + Tab</kbd>: This will focus or unfocus the split-bar/s.\n- <kbd>Down/Left Arrow</kbd>: Resize and moves the focused split-bar to left on horizontal, or bottom on vertical splitter.\n- <kbd>Up/Right Arrow</kbd>: Resize and moves the focused split-bar to right on horizontal, or top on vertical splitter.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Splitter was a new component added in v4.1.1\n- Splitter can be invoked on a container element with `$('#my-element').splitter();`\n\n**4.x to 5.x**\n\n- Splitter's base component is now a custom element `<ids-splitter></ids-splitter>`\n- Content that should live in \"split\" areas should be slotted into `<ids-splitter-pane></ids-splitter-pane>` components.\n- Splitter orientation can be set by use of `axis` settings.\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/ri2Knf3KchdfdzRAeds0Ab/IDS-Mobility-v4.6?node-id=1%3A5740)\n\n## Accessibility Guidelines\n\n- Splitter component contained in the element has a `role=\"group\"`.\n- Each pane element if `id` attribute not provided will add component generated default id to use with split-bar for reference.\n- Each split-bar element contains `role=\"separator\"`.\n- Each split-bar element contains `aria-label\"`, if `label` not provided will use component generated default text.\n- Each split-bar element contains its current state with a `horizontal` or `vertical` value as `aria-orientation`.\n- Each split-bar element contains `aria-controls` with value `{start-pane-id}` and `{end-pane-id}`.\n- Each split-bar element contains its current state with a `boolean` value as `aria-disabled`.\n\n## Regional Considerations\n\nIn Right To Left Languages the icons, text and alignment will flow to the other side. Labels should be localized in the current language.\n"}},{"name":"ids-splitter","attributes":[{"name":"#container","description":"Container width.","values":[]},{"name":"#prop","description":"Store some properties based on current axis.","values":[]},{"name":"#moving","description":"Track while moving.","values":[]},{"name":"#panes","description":"List of pane elements attached.","values":[]},{"name":"#pairs","description":"List of pair elements attached.","values":[]},{"name":"#defaultsSize","description":"Defaults pane size.","values":[]},{"name":"#expandSizes","description":"List of pane expand sizes.","values":[]},{"name":"#sizes","description":"List of pane sizes.","values":[]},{"name":"#minSizes","description":"List of pane minimun sizes.","values":[]},{"name":"#maxSizes","description":"List of pane maximum sizes.","values":[]},{"name":"#resizeObserver","description":"Attach the resize observer.","values":[]},{"name":"#initObserver","description":"Attach the initialize observer.","values":[]},{"name":"#ls","description":"Local storage instance attached to component.","values":[]},{"name":"clearPosition","description":"Clear the saved position from local storage","values":[]},{"name":"clearPositionAll","description":"Clear all related saved position from local storage","values":[]},{"name":"idTobeUse","description":"Get the id to be use.","values":[]},{"name":"onLanguageChange","description":"Handle Languages Changes - for switching between RTL to LTR","values":[]},{"name":"isHorizontal","description":"Check if current orientation is horizontal","values":[]},{"name":"axis","description":"Set the splitter axis direction x: horizontal or y: vertical","values":[]},{"name":"disabled","description":"Sets the splitter to disabled","values":[]},{"name":"label","description":"Set the aria-label text for each split bar.","values":[]},{"name":"resizeOnDragEnd","description":"Sets the splitter to resize on drag end","values":[]},{"name":"savePosition","description":"Set splitter save position to local storage.","values":[]},{"name":"uniqueId","description":"Set uniqueId to save to local storage.","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# Ids Splitter Component\n\nThe Ids Splitter is used to divide the user interface of a page. It is composed of resizable \"panes\" which divide content. It can layout either horizontally or vertically along an axis where a user can resize the panes, these are represented as `<ids-splitter-pane>` components.\n\n![Different variations of IdsSplitterLayout](./doc/ids-splitter-markup-legend.png)\n\nThe pane can move to the left or the right of the screen. This allows the user to have control of the customized layout. Elements inside and outside the pane will be resized to fit depending on if their css is fluid.\n\n## Use Cases\n\n- Divides the user interface of a screen.\n\n## Terminology\n\n- **Splitter**: The splitter container element\n- **SplitterPane**: One zone/section inside the splitter\n- **SplitBar**: The generated bar element to drag panes to resize\n\n## Features (With Code Examples)\n\nA default splitter behavior, axis will set to \"x\" (horizontally) and align will set to \"start\".\n\n```html\n<ids-splitter>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter align set to end.\n\n```html\n<ids-splitter align=\"end\">\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set to initial size 30%.\n\n```html\n<ids-splitter>\n  <ids-splitter-pane size=\"30%\"></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set to minimum size of 10% to be resize.\n\n```html\n<ids-splitter>\n  <ids-splitter-pane min-size=\"10%\"></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set to maximum size of 80% to be resize, limited to single split only.\n\n```html\n<ids-splitter>\n  <ids-splitter-pane max-size=\"80%\"></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set to initial collapsed pane. Collapsed can only apply to start pane.\n\n```html\n<ids-splitter>\n  <ids-splitter-pane collapsed></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter with multiple splits.\n\n```html\n<ids-splitter>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set as vertically.\n\n```html\n<ids-splitter axis=\"y\">\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set to nested (horizontally and vertically).\n\n```html\n<ids-splitter>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane>\n    <ids-splitter axis=\"y\">\n      <ids-splitter-pane></ids-splitter-pane>\n      <ids-splitter-pane></ids-splitter-pane>\n    </ids-splitter>\n  </ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter with custom (aria-label) for draggable bar/s.\n\n```html\n<ids-splitter label=\"Custom Resize Text\">\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter to do the resize after drag-end.\n\n```html\n<ids-splitter resize-on-drag-end>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSplitter set as disabled.\n\n```html\n<ids-splitter disabled>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\nSave splitter position to local storage.\n\n```html\n<ids-splitter unique-id=\"some-uniqueid\" save-position>\n  <ids-splitter-pane></ids-splitter-pane>\n  <ids-splitter-pane></ids-splitter-pane>\n</ids-splitter>\n```\n\n## Settings and Attributes (Splitter)\n\n- `align` {string} Set the split bar align direction to start or end\n- `axis` {string} Set the splitter axis direction x: horizontal or y: vertical\n- `disabled` {boolean} Sets the splitter to disabled state\n- `label` {string} Set the aria-label text for each split bar\n- `resizeOnDragEnd` {boolean} Sets the splitter to resize on drag end\n- `savePosition` {boolean} Set splitter to save position to local storage.\n- `uniqueId` {string} Set uniqueId to save to local storage, so same saved position can be use for whole app.\n\n## Settings and Attributes (Splitter Pane)\n\n- `size` {string|number} Sets initially the pane size\n- `minSize` {string|number} Sets initially the pane minimum size\n- `maxSize` {string|number} Sets initially the pane maximum size\n- `collapsed` {boolean} Sets initially the pane to collapsed state\n\n## Theme-able Parts (Splitter)\n\n- `splitter` allows you to further style the splitter element\n- `split-bar` allows you to further style the split bar element\n- `split-bar-icon` allows you to further style the split bar icon element\n\n## Theme-able Parts (Splitter Pane)\n\n- `pane` allows you to further style the splitter pane element\n\n## Events (Splitter)\n\n- `beforecollapsed` Fires before the splitter pane get collapsed, you can return false in the response to veto\n- `collapsed` Fires after the splitter pane get collapsed\n- `beforeexpanded` Fires before the splitter pane get expanded, you can return false in the response to veto\n- `expanded` Fires after the splitter pane get expanded\n- `beforesizechanged` Fires before the splitter pane size changed, you can return false in the response to veto\n- `sizechanged` Fires after the splitter pane size changed\n- `save-position` Fires after the local storage settings changed in some way\n- `clear-position` Fires after clear the saved position from local storage\n\n## Methods (Splitter)\n\n- `clearPosition(uniqueId: string|undefined)` Clear the saved position from local storage, If uniqueId is undefined will use Internal attached\n- `clearPositionAll()` Clear all splitter related saved position from local storage\n- `collapse(options: { startPane: HTMLElement|string, endPane: HTMLElement|string }): void` Collapse start pane size for given start/end panes or panes CSS selector\n- `expand(options: { startPane: HTMLElement|string, endPane: HTMLElement|string }): void` Expand start pane size for given start/end panes or panes CSS selector\n- `getAllPairs(): Array<object>` Get list of splitter pairs\n- `getPair(options: { startPane: HTMLElement|string, endPane: HTMLElement|string }): object` Get a splitter pair by given start/end panes or panes CSS selector\n- `idTobeUse(uniqueId?: string, suffix?: string, prefix?: string): string` Get the id to be use\n- `isHorizontal(): boolean` Get true if current orientation is horizontal\n- `sizes(): Array<number>` Get list of current sizes\n- `minSizes(): Array<number>` Get list of current minimum sizes\n- `maxSizes(): Array<number>` Get list of current maximum sizes, limited to single split\n\n## States and Variations (With Code Examples)\n\n- Horizontal: Ability to display horizontal split content\n- Vertical: Ability to display vertical split content\n- Multiple: Splitter with multiple splits\n- Nested: Splitter nested with another splitter (horizontally and/or vertically)\n- Disabled: split-bar/s cannot be clicked, hovered, focused or dragged and not visible\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift + Tab</kbd>: This will focus or unfocus the split-bar/s.\n- <kbd>Down/Left Arrow</kbd>: Resize and moves the focused split-bar to left on horizontal, or bottom on vertical splitter.\n- <kbd>Up/Right Arrow</kbd>: Resize and moves the focused split-bar to right on horizontal, or top on vertical splitter.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Splitter was a new component added in v4.1.1\n- Splitter can be invoked on a container element with `$('#my-element').splitter();`\n\n**4.x to 5.x**\n\n- Splitter's base component is now a custom element `<ids-splitter></ids-splitter>`\n- Content that should live in \"split\" areas should be slotted into `<ids-splitter-pane></ids-splitter-pane>` components.\n- Splitter orientation can be set by use of `axis` settings.\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/ri2Knf3KchdfdzRAeds0Ab/IDS-Mobility-v4.6?node-id=1%3A5740)\n\n## Accessibility Guidelines\n\n- Splitter component contained in the element has a `role=\"group\"`.\n- Each pane element if `id` attribute not provided will add component generated default id to use with split-bar for reference.\n- Each split-bar element contains `role=\"separator\"`.\n- Each split-bar element contains `aria-label\"`, if `label` not provided will use component generated default text.\n- Each split-bar element contains its current state with a `horizontal` or `vertical` value as `aria-orientation`.\n- Each split-bar element contains `aria-controls` with value `{start-pane-id}` and `{end-pane-id}`.\n- Each split-bar element contains its current state with a `boolean` value as `aria-disabled`.\n\n## Regional Considerations\n\nIn Right To Left Languages the icons, text and alignment will flow to the other side. Labels should be localized in the current language.\n"}},{"name":"ids-step-chart","attributes":[{"name":"internalStepsInProgress","values":[]},{"name":"color","values":[]},{"name":"completedLabel","values":[]},{"name":"disabled","description":"Sets the disabled state","values":[]},{"name":"label","values":[]},{"name":"progressColor","values":[]},{"name":"stepNumber","values":[]},{"name":"stepsInProgress","values":[]},{"name":"value","values":[]}],"description":{"kind":"markdown","value":"# IDS Step Chart\n\n## Description\n\nStep chart provides a custom element <ids-step-chart></ids-step-chart> that, when provided provides a stepped indication that demonstrates progress toward a single goal with an individual bar, they are great for showing action steps or distance from a target number.\n\n## Use Cases\n\n- The step chart is designed to indicate progress through a series of steps, this can be a simple binary, step complete incomplete or optionally allows for a \"in progress\" state that indicates a step is partially completed. this also provides the option for labeling the chart with primary and secondary text indicators. see the features section for more details.\n\n## Terminology\n\n**Step**: Individual block in the component represented by a colored `<div>` can be completed, in progress or not done.\n\n**Completed**: A possible status of a step that will be displayed in a user selected color.\n\n**In Progress**: An optional status of a step that has not been completed but started, will be displayed in a user provided secondary color.\n\n**Not Started**: Default step status for step not in the other two categories, is set by the component to a default graphite.\n\n## Features (With Code Examples)\n\nIds step chart is created by using the <ids-step-chart> element.\nFor an implementation with only a primary label and completed uncompleted steps see the below example.\n\n```html\n<ids-step-chart label=\"2 of 7 steps completed\" color=\"azure06\" step-number=\"7\" value=\"2\">\n</ids-step-chart>\n```\n\nTo set in progress steps you must pass an array of strings or numbers where each item in the array is the number of the step you want to update and set the `progress-color` attribute.\n```html\n  <ids-step-chart label=\"2 of 7 steps completed\" color=\"azure06\" step-number=\"7\" value=\"3\" completed-label=\"5 days overdue\" progress-color=\"ruby02\">\n```\n\n```js\ninProgressTwo.stepsInProgress = ['3'];\n```\n\nto add a secondary label make use of the completed-label attribute\n\n```html\n  <ids-step-chart label=\"2 of 7 steps completed\" color=\"azure06\" step-number=\"7\" value=\"2\" completed-label=\"5 days remaining\">\n  </ids-step-chart>\n```\nIDS step chart also has an available slot `icon` that can be used to append content after the secondary label like so\n\n```html\n  <ids-step-chart label=\"2 of 7 steps completed\" color=\"azure06\" step-number=\"7\" value=\"3\" completed-label=\"5 days overdue\" progress-color=\"ruby02\">\n    <ids-icon id=\"alert\" slot=\"icon\" icon=\"warning\"></ids-icon>\n  </ids-step-chart>\n```\n\n## Settings and Attributes\n\n  - `color` {string} Sets the color used for completed steps (must use ids provided colors).\n  - `disabled` {boolean} Sets the disabled state.\n  - completed-label: secondary label for the component\n  - label: primary label for the component usually formatted as \"x of y steps completed\n  - progress-color: color used for flagged steps in progress (must use ids provided colors)\n  - stepsInProgress: an array of steps that should be flagged as in progress\n  - step-number: total number of steps in the chart\n  - value: total number of steps completed or in progress\n\n## Keyboard Guidelines\n\nThis component does not add any new keyboard functionality, steps are not tabbable but text is readable by screen readers.\n\n## Designs\n\n[design doc](https://www.figma.com/file/yaJ8mJrqRRej8oTsd6iT8P/IDS-(SoHo)-Component-Library-v4.5?node-id=760%3A771)\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Step Chart was added in v4.3.3\n- Step Chart is invoked with `$('#my-element').stepchart();`\n\n**4.x to 5.x**\n\n- Step Chart is now a custom element `<ids-step-chart></ids-step-chart>`\n- Settings are now attributes on the custom element\n\n### Converting from 4.x\n\nIf you are converting this from the enterprise version you will no longer be using the `data-options` attribute. Properties of the `data-options` objects are implemented as attributes of the `ids-step-chart` component as follows:\n\n- `steps: 7` => `step-number=\"7\"`\n- `completed: 2` => `value=\"2\"`\n- `extraText: '2 Days Overdue'` => `completed-label=\"2 Days Overdue\"`\n\nThe `iconType` option has been replaced with a slot called `icon` that can be injected with the desired markup like so:\n\n```html\n<ids-alert slot=\"icon\" icon=\"warning\"></ids-icon>\n```\n\nThe `inProgress` option has been replaced with a property on the component called `stepsInProgress`. This can be set to an array of numbers corresponding to the number of the steps you want to display as in progress. see this example below\n\n```js\neconst element = document.querySelectorAll('ids-step-chart')[3];\nelement.stepsInProgress = ['3'];\n```\n\nColor for `inProgress` steps is not set automatically and a color must be set using the `progress-color` attribute. to duplicate\nexisting red in progress steps use `ruby02`.\n\nlabeling for the step chart is handled through the `label` component attribute and there are no special format requirements\n\n## Accessibility Guidelines\n\nKeep in mind that individual steps are not focusable elements as they are purely visual. It is important to keep both primary and secondary labels up to date for screen reader users.\n\n#### Regional Considerations\n\nAdd info on what behaviors or considerations the developer needs to know regarding when running in different languages.\n"}},{"name":"ids-swaplist","attributes":[{"name":"datasource","values":[]},{"name":"defaultTemplate","values":[]},{"name":"data","description":"Set the data array of the swaplist","values":[]},{"name":"selectedItems","description":"Get all selected ids-swappable-item","values":[]},{"name":"count","description":"Get the count of lists","values":[]}],"description":{"kind":"markdown","value":"# Ids SwapList\n\n## Description\n\nA swaplist allows for easy movement of objects between two or more lists. The swaplist makes use of IdsSwappable for sorting and swapping functionality and IdsCard for layout.\n\n## Use Cases\n\nA common usecase for swaplists is to select items from a list of available objects. On one list, the user can view all available items. The user can then move an item from the available list to the selected list, and vice versa. This allows the user to view and track all items in the dataset. Users can drag and drop objects from list to list or select items and click an icon to move them to the desired list.\n\n## Features (With Code Samples)\n\nExample using js to populate the lists:\n\n```html\n<ids-swaplist id=\"swaplist-1\" count=\"2\"></ids-swaplist>\n```\n\n```js\nconst swappable = document.querySelector('#swaplist-1').container.querySelectorAll('ids-swappable');\n\ndata.forEach((d) => {\n    swappable.innerHTML += `\n    <ids-swappable-item>\n        <ids-text>${d.city}</ids-text>\n    </ids-swappable-item>\n    `;\n});\n```\n## Settings (Attributes)\n**count** Sets the amount of lists on the page. By default `count` is set to 2.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Swaplist was a new component created in v4.0.6\n\n**4.x to 5.x**\n\n- Swaplist is now a custom element `<ids-swaplist></ids-swaplist>`\n"}},{"name":"ids-swappable-item","attributes":[{"name":"dragMode","values":[]},{"name":"selected","description":"Get the selected attribute","values":[]},{"name":"selectedItems","description":"Get all selected swappable items","values":[]},{"name":"allItems","description":"Get all swappable items","values":[]},{"name":"originalText","description":"Get the originalText attribute","values":[]},{"name":"selection","description":"Get the selection attribute","values":[]},{"name":"tabbable","description":"Get whether the item currently allows tabbing.","values":[]}],"description":{"kind":"markdown","value":"# Ids Swappable\n\n## Description\nIdsSwappable is an abstract component that provides functionality for drag and drop between items or lists. It consists of two components `ids-swappable` which is a container for and number of `ids-swappable-item`. The `ids-swappable-item` makes use of s single `slot` where the user can use virtually any component they would like, most commonly `ids-text` or `ids-card`.\n\n## Use Cases\n\nIdsSwappable is used to create the [IdsSwaplist](../ids-swaplist/README.md), which is used to move objects between 2 or more lists, but is not limited to this use case. It can also be used to create standalone sortable/swappable element collections.\n\n## Features (With Code Samples)\n\nBasic Usage:\n\n```html\n<ids-swappable>\n    <ids-swappable-item>\n        <ids-text font-size=\"20\" type=\"h2\" overflow=\"ellipsis\" tooltip=\"true\">Item One</ids-text>\n    </ids-swappable-item>\n    <ids-swappable-item>\n        <ids-text font-size=\"20\" type=\"h2\" overflow=\"ellipsis\" tooltip=\"true\">Item Two</ids-text>=\n    </ids-swappable-item>\n    <ids-swappable-item>\n        <ids-text font-size=\"20\" type=\"h2\" overflow=\"ellipsis\" tooltip=\"true\">Item Three</ids-text>\n    </ids-swappable-item>\n</ids-swappable>\n```\n\nIdsSwaplist example:\n\n```html\n<ids-swaplist id=\"swaplist-1\" count=\"2\"></ids-swaplist>\n```\n\n```js\nconst swappable = document.querySelector('#swaplist-1').container.querySelectorAll('ids-swappable');\n\ndata.forEach((d) => {\n    swappable.innerHTML += `\n    <ids-swappable-item>\n        <ids-text>${d.city}</ids-text>\n    </ids-swappable-item>\n    `;\n});\n```\n\n### Mix with other components\n\nSome components support composition with IdsSwappable, such as [IdsTabs](../ids-tabs/README.md).  Since Tabs have their own process for handling selection, using `dragMode=\"always\"` ensures tabs can be moved around regardless of selection:\n\n```html\n<ids-tabs>\n    <ids-swappable dropzone=\"move\">\n        <ids-swappable-item drag-mode=\"always\">\n            <ids-tab value=\"contracts\">Contracts</ids-tab>\n        </ids-swappable-item>\n        <ids-swappable-item drag-mode=\"always\">\n            <ids-tab value=\"opportunities\">Opportunities</ids-tab>\n        </ids-swappable-item>\n        <ids-swappable-item drag-mode=\"always\">\n            <ids-tab value=\"attachments\" disabled>Attachments</ids-tab>\n        </ids-swappable-item>\n        <ids-swappable-item drag-mode=\"always\">\n            <ids-tab value=\"notes\">Notes</ids-tab>\n        </ids-swappable-item>\n    </ids-swappable>\n</ids-tabs>\n```\n\n## Settings (Attributes)\n\n### ids-swappable\n**selectedItems** Sets the multi-select attribute. Defaults to false.\n\n### ids-swappable-item\n**drag-mode** Defines how/when dragging can occur.  By default (`select`), swappable items must first be selected in order to be dragged.  Setting to `always` makes dragging possible at all times.\n**selected** Sets the selected attribute. Items need to be selected before that can be dragged.\n**originalText** Sets the originalText attribute. This happens when the component is connected and is used to revert the text after item is dropped.\n**tabbable** Sets if the item is tabbable. Defaults to true.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Sortable behavior is part of the Arrange component\n- Arrange was added in v4.2.1\n- Invoke the Arrange component on an element with `$('#my-element').arrange();`\n\n**4.x to 5.x**\n\n- Sortable behavior is now enabled by wrapping elements on a page with `<ids-swappable></ids-swappable>` and `<ids-swappable-item></ids-swappable-item>`\n"}},{"name":"ids-swappable","attributes":[{"name":"draggingElements","values":[]},{"name":"overElement","description":"Get the item that is dragged over","values":[]},{"name":"selectedItems","description":"Get all the selected ids-swappable-items in the current list","values":[]},{"name":"#startY","description":"Holds the current start `y` position for drag element","values":[]},{"name":"getDragAfterElement","description":"Calculate the position of the dragging element relative to the container","values":[]}],"description":{"kind":"markdown","value":"# Ids Swappable\n\n## Description\nIdsSwappable is an abstract component that provides functionality for drag and drop between items or lists. It consists of two components `ids-swappable` which is a container for and number of `ids-swappable-item`. The `ids-swappable-item` makes use of s single `slot` where the user can use virtually any component they would like, most commonly `ids-text` or `ids-card`.\n\n## Use Cases\n\nIdsSwappable is used to create the [IdsSwaplist](../ids-swaplist/README.md), which is used to move objects between 2 or more lists, but is not limited to this use case. It can also be used to create standalone sortable/swappable element collections.\n\n## Features (With Code Samples)\n\nBasic Usage:\n\n```html\n<ids-swappable>\n    <ids-swappable-item>\n        <ids-text font-size=\"20\" type=\"h2\" overflow=\"ellipsis\" tooltip=\"true\">Item One</ids-text>\n    </ids-swappable-item>\n    <ids-swappable-item>\n        <ids-text font-size=\"20\" type=\"h2\" overflow=\"ellipsis\" tooltip=\"true\">Item Two</ids-text>=\n    </ids-swappable-item>\n    <ids-swappable-item>\n        <ids-text font-size=\"20\" type=\"h2\" overflow=\"ellipsis\" tooltip=\"true\">Item Three</ids-text>\n    </ids-swappable-item>\n</ids-swappable>\n```\n\nIdsSwaplist example:\n\n```html\n<ids-swaplist id=\"swaplist-1\" count=\"2\"></ids-swaplist>\n```\n\n```js\nconst swappable = document.querySelector('#swaplist-1').container.querySelectorAll('ids-swappable');\n\ndata.forEach((d) => {\n    swappable.innerHTML += `\n    <ids-swappable-item>\n        <ids-text>${d.city}</ids-text>\n    </ids-swappable-item>\n    `;\n});\n```\n\n### Mix with other components\n\nSome components support composition with IdsSwappable, such as [IdsTabs](../ids-tabs/README.md).  Since Tabs have their own process for handling selection, using `dragMode=\"always\"` ensures tabs can be moved around regardless of selection:\n\n```html\n<ids-tabs>\n    <ids-swappable dropzone=\"move\">\n        <ids-swappable-item drag-mode=\"always\">\n            <ids-tab value=\"contracts\">Contracts</ids-tab>\n        </ids-swappable-item>\n        <ids-swappable-item drag-mode=\"always\">\n            <ids-tab value=\"opportunities\">Opportunities</ids-tab>\n        </ids-swappable-item>\n        <ids-swappable-item drag-mode=\"always\">\n            <ids-tab value=\"attachments\" disabled>Attachments</ids-tab>\n        </ids-swappable-item>\n        <ids-swappable-item drag-mode=\"always\">\n            <ids-tab value=\"notes\">Notes</ids-tab>\n        </ids-swappable-item>\n    </ids-swappable>\n</ids-tabs>\n```\n\n## Settings (Attributes)\n\n### ids-swappable\n**selectedItems** Sets the multi-select attribute. Defaults to false.\n\n### ids-swappable-item\n**drag-mode** Defines how/when dragging can occur.  By default (`select`), swappable items must first be selected in order to be dragged.  Setting to `always` makes dragging possible at all times.\n**selected** Sets the selected attribute. Items need to be selected before that can be dragged.\n**originalText** Sets the originalText attribute. This happens when the component is connected and is used to revert the text after item is dropped.\n**tabbable** Sets if the item is tabbable. Defaults to true.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Sortable behavior is part of the Arrange component\n- Arrange was added in v4.2.1\n- Invoke the Arrange component on an element with `$('#my-element').arrange();`\n\n**4.x to 5.x**\n\n- Sortable behavior is now enabled by wrapping elements on a page with `<ids-swappable></ids-swappable>` and `<ids-swappable-item></ids-swappable-item>`\n"}},{"name":"ids-swipe-action","attributes":[{"name":"leftButton","values":[]},{"name":"rightButton","values":[]},{"name":"swipeType","description":"Set the swipe interaction method between continuous and reveal (default)","values":[]}],"description":{"kind":"markdown","value":"# Ids Swipe Action Component\n\n## Description\n\nThe swipe action component is a simple component with one or two buttons on the left and right. The user can swipe left or right and activate the action or swipe left and right and click the button to activate the action. On desktop the user will use the actions button with a popup.\n\n## Use Cases\n\n- When you have a mobile heavy application and need to put swipe actions on a container\n\n## Terminology\n\n- **swipe**: An act or instance of moving one's finger across a touchscreen to activate a function.\n\n## Features (With Code Examples)\n\nA normal swipe action with two actions. In continuous mode the action will be executed as you swipe.\n\n```html\n<ids-card auto-height=\"true\">\n  <div slot=\"card-content\">\n    <ids-swipe-action swipe-type=\"continuous\">\n      <ids-button slot=\"action-left\" id=\"action-left-continuous\" type=\"swipe-action-left\">\n        <ids-icon icon=\"reply\" size=\"xsmall\"></ids-icon>\n        <span>Left Action</span>\n      </ids-button>\n      <div slot=\"contents\">\n        <ids-layout-grid cols=\"2\" no-margins=\"true\">\n          <ids-layout-grid-cell>\n            <ids-text font-size=\"16\">Tuesday, 22nd September</ids-text>\n            <ids-text font-size=\"14\">8:40AM-2:00PM</ids-text>\n          </ids-layout-grid-cell>\n          <ids-layout-grid-cell justify=\"end\">\n            <ids-menu-button id=\"actions-continuous\" menu=\"actions-continuous-menu\">\n              <ids-icon icon=\"more\"></ids-icon>\n              <span class=\"audible\">Actions</span>\n            </ids-menu-button>\n            <ids-popup-menu id=\"actions-continuous-menu\" target=\"actions-continuous\" trigger-type=\"click\">\n              <ids-menu-group>\n                <ids-menu-item>Right Action</ids-menu-item>\n                <ids-menu-item>Left Action</ids-menu-item>\n                <ids-menu-item>Other Action</ids-menu-item>\n              </ids-menu-group>\n            </ids-popup-menu>\n          </ids-layout-grid-cell>\n        </ids-layout-grid>\n      </div>\n      <ids-button slot=\"action-right\" id=\"action-right-continuous\" type=\"swipe-action-right\">\n        <ids-icon icon=\"tack\" size=\"xsmall\"></ids-icon>\n        <span>Right Action</span>\n      </ids-button>\n    </ids-swipe-action>\n  </div>\n</ids-card>\n```\n\n## Settings and Attributes\n\n- `swipeType` {string} Set the swipe interaction method between continuous and reveal (default)\n\n## Themeable Parts\n\n- `container` allows you to further style the container element\n- `action-left` allows you to further style the left action button\n- `action-right` allows you to further style the right action button\n\n## States and Variations\n\n- Open\n- Closed\n\n## Keyboard Guidelines\n\nThe swipe action is not keyboard friendly. For this we use the actions button for keyboard users.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container.\n- The swipe does work to a limited degree on chrome via a scroll action. But it is not the most user friendly interaction. For this we use the actions button for keyboard users.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Swipe Action is a new component in v4.53.0\n- Invoke Swipe Action on an element with `$('#my-element').swipeaction();`\n\n**4.x to 5.x**\n\n- Swipe Action has been added as a custom element `<ids-swipe-action></ids-swipe-action>`\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/yaJ8mJrqRRej8oTsd6iT8P/IDS-(SoHo)-Component-Library-v4.5?node-id=760%3A771)\n"}},{"name":"ids-switch","attributes":[{"name":"input","values":[]},{"name":"labelEl","values":[]},{"name":"isFormComponent","values":[]},{"name":"checked","description":"Sets the checked state to true or false","values":[]},{"name":"disabled","description":"Sets checkbox to disabled","values":[]},{"name":"label","description":"Set the `label` text","values":[]},{"name":"value","description":"Sets the checkbox `value` attribute","values":[]}],"description":{"kind":"markdown","value":"# Ids Switch Component\n\n## Description\n\nThe IDS Switch component is a simple wrapper around a standard HTMLInputElement that is styled with Infor branding. A switch component is essentially a specially-styled [checkbox component](./ids-checkbox). Consider using a checkbox for most form layouts; Switch is primarily for settings.\n\n## Use Cases\n\n- Create standalone switch\n- Create switch, each with different styling to provide context for actions that are checked, unchecked, value and disabled.\n\n## Terminology\n\n*Checkbox*: IDS Switch checkbox is a standard basic checkbox element. It can set to checked, unchecked and disabled.\n*Label*: HTMLLabelElement to keep matching with HTMLInputElement. Make sure the label has a meaningful relative.\n\n## Features (With Code Samples)\n\nA standard Switch unchecked element:\n\n```html\n<ids-switch label=\"Allow my profile to be searched\"></ids-switch>\n```\n\nSet as checked, the Switch.\n\n```html\n<ids-switch label=\"Allow notifications\" checked=\"true\"></ids-switch>\n```\n\nAdd an Disabled Switch as unchecked:\n\n```html\n<ids-switch label=\"Automatically approve requests\" disabled=\"true\"></ids-switch>\n```\n\nAdd an Disabled Switch as checked:\n\n```html\n<ids-switch label=\"Allow connections\" checked=\"true\" disabled=\"true\"></ids-switch>\n```\n\n## Settings (Attributes)\n\n- `checked` {boolean} set checked state.\n- `disabled` {boolean} set disabled state.\n- `label` {string} set the label text.\n- `value` {string} set the switch value.\n\n## Keyboard Guidelines\n\nThe IDS Switch doesn't contain any interactions beyond a standard Checkbox HTMLInputElement:\n\n- <kbd>Tab</kbd> and <kbd>Shift Tab</kbd> moves focus into the switch to/from the next focusable item in the tab order.\n- <kbd>Space</kbd> toggle the checked/unchecked state.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Switch was implemented in v4.0.0\n- Switch can be invoked with `$('#my-element').switch()`.\n\n**4.x to 5.x**\n\n- Markup has changed to a custom element `<ids-switch></ids-switch>`\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles\n"}},{"name":"ids-tab-content","attributes":[{"name":"value","values":[]},{"name":"active","values":[]}],"description":{"kind":"markdown","value":"# Ids Tabs Component\n\n## Description\n\nTabs are a navigation element used to allow users to easily access different areas of a site or different parts of an individual page. A user can navigate between page sections with a tab. Best for communicating different views of the data, or offering navigation between related data.\nway to highlight which section/content in a page you are currently\nfocused on.\n\n## Use Cases\n\n- Used when need information to be highly scannable and to simplify navigation.\n- Used when a page needs a more organized structure.\n\n## Features (With Code Examples)\n\nA normal default horizontal tab component.\n\n```html\n<ids-tabs value=\"one\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\nA vertical tabs component.\n\n```html\n<ids-tabs value=\"one\" orientation=\"vertical\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\nUsing a tab context to show the active tab content in `ids-tab-content`.\n```html\n<ids-tabs-context>\n    <!-- ^ context has no outward styling or content, but width/height or display can be set -->\n    <ids-tabs value=\"one\">\n        <ids-tab value=\"one\">Section 1</ids-tab>\n        <ids-tab value=\"two\">Section 2</ids-tab>\n        <ids-tab value=\"three\">Section 3</ids-tab>\n    </ids-tabs>\n    <div class=\"tab-content\">\n        <ids-tab-content value=\"one\">\n            This will be initially visible\n        </ids-tab-content>\n        <ids-tab-content value=\"two\">\n            If ids-tabs value=\"two\" is selected, or ids-tab with value \"two\"\n            is set as selected, then this will be visible and one will be hidden\n        </ids-tab-content>\n        <ids-tab-content value=\"three\">\n            And this will show if the ids-tabs value or selection becomes \"three\",\n            similar to the previous content entry. Only one will be shown at once.\n        </ids-tab-content>\n    </div>\n</ids-tabs-context>\n```\n\nIt's also possible to create Module Tabs for top-level navigation in your application\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\n### Overflowed Tabs\n\nWhen creating a tab list with many tabs, its possible there will not be enough screen real-estate to display them all.  In this situation you can also add a special \"More Tabs\" tab component:\n\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n    <ids-tab value=\"four\">Example Four</ids-tab>\n    <ids-tab value=\"five\">Example Five</ids-tab>\n    <ids-tab value=\"six\">Example Six</ids-tab>\n    <ids-tab-more overflow></ids-tab-more>\n</ids-tabs>\n```\n\n### Fixed placement of Tabs and Actions\n\nSome items slotted in IdsTabs should not spill into the \"More Actions\" area and should always be present.  Using the `fixed` slot name on these elements causes them to sit inside a \"fixed\" on the right of the IdsTabs.  In cases where overflow is present, the actions will be adjacent to a visible More Actions tab.\n\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n    <ids-tab value=\"four\">Example Four</ids-tab>\n    <ids-tab value=\"five\" slot=\"fixed\">Example Five</ids-tab>\n    <ids-tab value=\"six\" slot=\"fixed\">Example Six</ids-tab>\n    <ids-tab-more overflow></ids-tab-more>\n</ids-tabs>\n```\n\nWhen this component is present in a tab list, it will only be displayed when there is not enough space to display all other tabs present.  When clicking on this tab, it opens an [IdsPopupMenu](../ids-popup-menu/README.md) containing menu items that reflect all tabs currently \"overflowed\" (in practice, the tabs that are hidden).  Selecting an item from the menu causes the menu item's corresponding tab to be activated.\n\n### Dismissible Tabs\n\nTabs can be configured to display an optional [IdsTriggerButton](../ids-trigger-field/README.md) (marked with an \"X\") that will remove it from the tab list when clicked.  If a content pane with a matching `value` attribute exists, the IdsTabsContext element locates and removes it. When a tab is dismissed, it emits a `tabremove` event.\n\n```html\n<ids-tab value=\"one\" dismissible>Example One</dismissible>\n```\n\n## Settings and Attributes\n\n### Tab Container Settings (`ids-tabs`)\n- `disabled` {boolean} disables all tabs.\n- `value` {string} set which tab is currently selected. If tab children do not have a value, will fall back to being a 0-based index. Otherwise, it can also be any string as long as there are relevant matches for the values.\n- `orientation` {'horizontal' | 'vertical'} defaults to horizontal; controls the direction/axis tabs are flowed on.\n- `color-variant` {'alternate'|'module'} (optional) sets the Tabs color variant.  The `alternate` variant is used on header components and set automatically when placed inside of an `ids-header` component.  The `module` variant displays Module Tabs, which are generally used as top-level navigation only.\n\n### Individual Tabs Settings (`ids-tab`)\n- `actionable` {boolean} labels a tab as having a corresponding action, such as \"Add\", \"Reset\", \"Activate Application Menu\", etc.  Tabs that use this setting should also have an `onAction` callback applied, which will be triggered upon selecting the tab.  Tabs that are `actionable` will not cause content in tab panels to be displayed.\n- `disabled` {boolean} allows you to disable a tab among a set of tabs.\n- `selected` {boolean} allows for a tab to display its selected state.  In some cases, tabs with this value set to true will also automatically display their corresponding Tab Panel's content.  Tabs that have an `actionable` attribute applied are not able to be \"selected\" -- selecting those tabs will focus them.\n- `value` {string | number} the value which when the parent `ids-tabs` also has an equivalent for, selects this tab.\n\n## Themeable Parts\n### IdsTabs\n- `container` allows you to style the container of the tab\n\n## States and Variations (With Code Examples)\n\nWhen placed inside of an `IdsHeader` component, the `ids-tabs` component automatically gains the property `color-variant` which is set to `alternate` as it's default style.\n\n## Keyboard Guidelines\n\n- TAB should move off of the component to the next focusable element on page.\n- SHIFT + TAB should move to previous focusable element on the page.\n- Direction keys (UP/DOWN for vertical, LEFT/RIGHT for horizontal) should move between tabs\n- ENTER should select a tab.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container. Possibly scrolling as needed based on parent dimensions.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Tabs was implemented in v4.0.0\n- Tabs can be invoked with `$('#my-element').tabs()`.\n\n**4.x to 5.x**\n\n- Tabs are now custom elements `<ids-tabs value=${selection}></ids-tabs>`\n- If using events, events are now plain JS events\n- Can now be imported as a single JS file and used with encapsulated styles\n- Content within the tabs are specified as `<ids-tab value=${selection-value}>`Tab Label/Content`</ids-tab>`\n- Tabs and their panels are now wrapped with a context element `<ids-tabs-context></ids-tabs-context>` for controlling which tab is displayed\n- Tabs can optionally display overflow by inserting an `<ids-tab-more overflow></ids-tab-more>` component into the `<ids-tabs></ids-tabs>` component\n\n## Accessibility Guidelines\n\nTODO\n\n## Regional Considerations\n\nText within tabs should be localized in the current language. They should also should flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-tab-divider","attributes":[],"description":{"kind":"markdown","value":"# Ids Tabs Component\n\n## Description\n\nTabs are a navigation element used to allow users to easily access different areas of a site or different parts of an individual page. A user can navigate between page sections with a tab. Best for communicating different views of the data, or offering navigation between related data.\nway to highlight which section/content in a page you are currently\nfocused on.\n\n## Use Cases\n\n- Used when need information to be highly scannable and to simplify navigation.\n- Used when a page needs a more organized structure.\n\n## Features (With Code Examples)\n\nA normal default horizontal tab component.\n\n```html\n<ids-tabs value=\"one\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\nA vertical tabs component.\n\n```html\n<ids-tabs value=\"one\" orientation=\"vertical\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\nUsing a tab context to show the active tab content in `ids-tab-content`.\n```html\n<ids-tabs-context>\n    <!-- ^ context has no outward styling or content, but width/height or display can be set -->\n    <ids-tabs value=\"one\">\n        <ids-tab value=\"one\">Section 1</ids-tab>\n        <ids-tab value=\"two\">Section 2</ids-tab>\n        <ids-tab value=\"three\">Section 3</ids-tab>\n    </ids-tabs>\n    <div class=\"tab-content\">\n        <ids-tab-content value=\"one\">\n            This will be initially visible\n        </ids-tab-content>\n        <ids-tab-content value=\"two\">\n            If ids-tabs value=\"two\" is selected, or ids-tab with value \"two\"\n            is set as selected, then this will be visible and one will be hidden\n        </ids-tab-content>\n        <ids-tab-content value=\"three\">\n            And this will show if the ids-tabs value or selection becomes \"three\",\n            similar to the previous content entry. Only one will be shown at once.\n        </ids-tab-content>\n    </div>\n</ids-tabs-context>\n```\n\nIt's also possible to create Module Tabs for top-level navigation in your application\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\n### Overflowed Tabs\n\nWhen creating a tab list with many tabs, its possible there will not be enough screen real-estate to display them all.  In this situation you can also add a special \"More Tabs\" tab component:\n\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n    <ids-tab value=\"four\">Example Four</ids-tab>\n    <ids-tab value=\"five\">Example Five</ids-tab>\n    <ids-tab value=\"six\">Example Six</ids-tab>\n    <ids-tab-more overflow></ids-tab-more>\n</ids-tabs>\n```\n\n### Fixed placement of Tabs and Actions\n\nSome items slotted in IdsTabs should not spill into the \"More Actions\" area and should always be present.  Using the `fixed` slot name on these elements causes them to sit inside a \"fixed\" on the right of the IdsTabs.  In cases where overflow is present, the actions will be adjacent to a visible More Actions tab.\n\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n    <ids-tab value=\"four\">Example Four</ids-tab>\n    <ids-tab value=\"five\" slot=\"fixed\">Example Five</ids-tab>\n    <ids-tab value=\"six\" slot=\"fixed\">Example Six</ids-tab>\n    <ids-tab-more overflow></ids-tab-more>\n</ids-tabs>\n```\n\nWhen this component is present in a tab list, it will only be displayed when there is not enough space to display all other tabs present.  When clicking on this tab, it opens an [IdsPopupMenu](../ids-popup-menu/README.md) containing menu items that reflect all tabs currently \"overflowed\" (in practice, the tabs that are hidden).  Selecting an item from the menu causes the menu item's corresponding tab to be activated.\n\n### Dismissible Tabs\n\nTabs can be configured to display an optional [IdsTriggerButton](../ids-trigger-field/README.md) (marked with an \"X\") that will remove it from the tab list when clicked.  If a content pane with a matching `value` attribute exists, the IdsTabsContext element locates and removes it. When a tab is dismissed, it emits a `tabremove` event.\n\n```html\n<ids-tab value=\"one\" dismissible>Example One</dismissible>\n```\n\n## Settings and Attributes\n\n### Tab Container Settings (`ids-tabs`)\n- `disabled` {boolean} disables all tabs.\n- `value` {string} set which tab is currently selected. If tab children do not have a value, will fall back to being a 0-based index. Otherwise, it can also be any string as long as there are relevant matches for the values.\n- `orientation` {'horizontal' | 'vertical'} defaults to horizontal; controls the direction/axis tabs are flowed on.\n- `color-variant` {'alternate'|'module'} (optional) sets the Tabs color variant.  The `alternate` variant is used on header components and set automatically when placed inside of an `ids-header` component.  The `module` variant displays Module Tabs, which are generally used as top-level navigation only.\n\n### Individual Tabs Settings (`ids-tab`)\n- `actionable` {boolean} labels a tab as having a corresponding action, such as \"Add\", \"Reset\", \"Activate Application Menu\", etc.  Tabs that use this setting should also have an `onAction` callback applied, which will be triggered upon selecting the tab.  Tabs that are `actionable` will not cause content in tab panels to be displayed.\n- `disabled` {boolean} allows you to disable a tab among a set of tabs.\n- `selected` {boolean} allows for a tab to display its selected state.  In some cases, tabs with this value set to true will also automatically display their corresponding Tab Panel's content.  Tabs that have an `actionable` attribute applied are not able to be \"selected\" -- selecting those tabs will focus them.\n- `value` {string | number} the value which when the parent `ids-tabs` also has an equivalent for, selects this tab.\n\n## Themeable Parts\n### IdsTabs\n- `container` allows you to style the container of the tab\n\n## States and Variations (With Code Examples)\n\nWhen placed inside of an `IdsHeader` component, the `ids-tabs` component automatically gains the property `color-variant` which is set to `alternate` as it's default style.\n\n## Keyboard Guidelines\n\n- TAB should move off of the component to the next focusable element on page.\n- SHIFT + TAB should move to previous focusable element on the page.\n- Direction keys (UP/DOWN for vertical, LEFT/RIGHT for horizontal) should move between tabs\n- ENTER should select a tab.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container. Possibly scrolling as needed based on parent dimensions.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Tabs was implemented in v4.0.0\n- Tabs can be invoked with `$('#my-element').tabs()`.\n\n**4.x to 5.x**\n\n- Tabs are now custom elements `<ids-tabs value=${selection}></ids-tabs>`\n- If using events, events are now plain JS events\n- Can now be imported as a single JS file and used with encapsulated styles\n- Content within the tabs are specified as `<ids-tab value=${selection-value}>`Tab Label/Content`</ids-tab>`\n- Tabs and their panels are now wrapped with a context element `<ids-tabs-context></ids-tabs-context>` for controlling which tab is displayed\n- Tabs can optionally display overflow by inserting an `<ids-tab-more overflow></ids-tab-more>` component into the `<ids-tabs></ids-tabs>` component\n\n## Accessibility Guidelines\n\nTODO\n\n## Regional Considerations\n\nText within tabs should be localized in the current language. They should also should flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-tab-more","attributes":[{"name":"menu","values":[]},{"name":"moreActionsGroup","values":[]},{"name":"predefinedMenuItems","values":[]},{"name":"overflowMenuItems","values":[]},{"name":"availableOverflowTabs","values":[]},{"name":"overflow","values":[]},{"name":"onAction","values":[]},{"name":"colorVariants","description":"Inherited from `IdsColorVariantMixin`","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"actionable","values":[]},{"name":"dismissible","values":[]},{"name":"dismissibleBtnEl","description":"Provides a reference to a close button, if applicable","values":[]},{"name":"disabled","values":[]},{"name":"selected","values":[]},{"name":"value","values":[]},{"name":"count","values":[]},{"name":"#setDataTextForBoldFix","description":"Sets the data-text of nested ids-text to it's slot\ntext content. Fixes issue with bold moving around\nwhen we edit content.","values":[]}],"description":{"kind":"markdown","value":"# Ids Tabs Component\n\n## Description\n\nTabs are a navigation element used to allow users to easily access different areas of a site or different parts of an individual page. A user can navigate between page sections with a tab. Best for communicating different views of the data, or offering navigation between related data.\nway to highlight which section/content in a page you are currently\nfocused on.\n\n## Use Cases\n\n- Used when need information to be highly scannable and to simplify navigation.\n- Used when a page needs a more organized structure.\n\n## Features (With Code Examples)\n\nA normal default horizontal tab component.\n\n```html\n<ids-tabs value=\"one\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\nA vertical tabs component.\n\n```html\n<ids-tabs value=\"one\" orientation=\"vertical\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\nUsing a tab context to show the active tab content in `ids-tab-content`.\n```html\n<ids-tabs-context>\n    <!-- ^ context has no outward styling or content, but width/height or display can be set -->\n    <ids-tabs value=\"one\">\n        <ids-tab value=\"one\">Section 1</ids-tab>\n        <ids-tab value=\"two\">Section 2</ids-tab>\n        <ids-tab value=\"three\">Section 3</ids-tab>\n    </ids-tabs>\n    <div class=\"tab-content\">\n        <ids-tab-content value=\"one\">\n            This will be initially visible\n        </ids-tab-content>\n        <ids-tab-content value=\"two\">\n            If ids-tabs value=\"two\" is selected, or ids-tab with value \"two\"\n            is set as selected, then this will be visible and one will be hidden\n        </ids-tab-content>\n        <ids-tab-content value=\"three\">\n            And this will show if the ids-tabs value or selection becomes \"three\",\n            similar to the previous content entry. Only one will be shown at once.\n        </ids-tab-content>\n    </div>\n</ids-tabs-context>\n```\n\nIt's also possible to create Module Tabs for top-level navigation in your application\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\n### Overflowed Tabs\n\nWhen creating a tab list with many tabs, its possible there will not be enough screen real-estate to display them all.  In this situation you can also add a special \"More Tabs\" tab component:\n\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n    <ids-tab value=\"four\">Example Four</ids-tab>\n    <ids-tab value=\"five\">Example Five</ids-tab>\n    <ids-tab value=\"six\">Example Six</ids-tab>\n    <ids-tab-more overflow></ids-tab-more>\n</ids-tabs>\n```\n\n### Fixed placement of Tabs and Actions\n\nSome items slotted in IdsTabs should not spill into the \"More Actions\" area and should always be present.  Using the `fixed` slot name on these elements causes them to sit inside a \"fixed\" on the right of the IdsTabs.  In cases where overflow is present, the actions will be adjacent to a visible More Actions tab.\n\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n    <ids-tab value=\"four\">Example Four</ids-tab>\n    <ids-tab value=\"five\" slot=\"fixed\">Example Five</ids-tab>\n    <ids-tab value=\"six\" slot=\"fixed\">Example Six</ids-tab>\n    <ids-tab-more overflow></ids-tab-more>\n</ids-tabs>\n```\n\nWhen this component is present in a tab list, it will only be displayed when there is not enough space to display all other tabs present.  When clicking on this tab, it opens an [IdsPopupMenu](../ids-popup-menu/README.md) containing menu items that reflect all tabs currently \"overflowed\" (in practice, the tabs that are hidden).  Selecting an item from the menu causes the menu item's corresponding tab to be activated.\n\n### Dismissible Tabs\n\nTabs can be configured to display an optional [IdsTriggerButton](../ids-trigger-field/README.md) (marked with an \"X\") that will remove it from the tab list when clicked.  If a content pane with a matching `value` attribute exists, the IdsTabsContext element locates and removes it. When a tab is dismissed, it emits a `tabremove` event.\n\n```html\n<ids-tab value=\"one\" dismissible>Example One</dismissible>\n```\n\n## Settings and Attributes\n\n### Tab Container Settings (`ids-tabs`)\n- `disabled` {boolean} disables all tabs.\n- `value` {string} set which tab is currently selected. If tab children do not have a value, will fall back to being a 0-based index. Otherwise, it can also be any string as long as there are relevant matches for the values.\n- `orientation` {'horizontal' | 'vertical'} defaults to horizontal; controls the direction/axis tabs are flowed on.\n- `color-variant` {'alternate'|'module'} (optional) sets the Tabs color variant.  The `alternate` variant is used on header components and set automatically when placed inside of an `ids-header` component.  The `module` variant displays Module Tabs, which are generally used as top-level navigation only.\n\n### Individual Tabs Settings (`ids-tab`)\n- `actionable` {boolean} labels a tab as having a corresponding action, such as \"Add\", \"Reset\", \"Activate Application Menu\", etc.  Tabs that use this setting should also have an `onAction` callback applied, which will be triggered upon selecting the tab.  Tabs that are `actionable` will not cause content in tab panels to be displayed.\n- `disabled` {boolean} allows you to disable a tab among a set of tabs.\n- `selected` {boolean} allows for a tab to display its selected state.  In some cases, tabs with this value set to true will also automatically display their corresponding Tab Panel's content.  Tabs that have an `actionable` attribute applied are not able to be \"selected\" -- selecting those tabs will focus them.\n- `value` {string | number} the value which when the parent `ids-tabs` also has an equivalent for, selects this tab.\n\n## Themeable Parts\n### IdsTabs\n- `container` allows you to style the container of the tab\n\n## States and Variations (With Code Examples)\n\nWhen placed inside of an `IdsHeader` component, the `ids-tabs` component automatically gains the property `color-variant` which is set to `alternate` as it's default style.\n\n## Keyboard Guidelines\n\n- TAB should move off of the component to the next focusable element on page.\n- SHIFT + TAB should move to previous focusable element on the page.\n- Direction keys (UP/DOWN for vertical, LEFT/RIGHT for horizontal) should move between tabs\n- ENTER should select a tab.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container. Possibly scrolling as needed based on parent dimensions.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Tabs was implemented in v4.0.0\n- Tabs can be invoked with `$('#my-element').tabs()`.\n\n**4.x to 5.x**\n\n- Tabs are now custom elements `<ids-tabs value=${selection}></ids-tabs>`\n- If using events, events are now plain JS events\n- Can now be imported as a single JS file and used with encapsulated styles\n- Content within the tabs are specified as `<ids-tab value=${selection-value}>`Tab Label/Content`</ids-tab>`\n- Tabs and their panels are now wrapped with a context element `<ids-tabs-context></ids-tabs-context>` for controlling which tab is displayed\n- Tabs can optionally display overflow by inserting an `<ids-tab-more overflow></ids-tab-more>` component into the `<ids-tabs></ids-tabs>` component\n\n## Accessibility Guidelines\n\nTODO\n\n## Regional Considerations\n\nText within tabs should be localized in the current language. They should also should flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-tab","attributes":[{"name":"onAction","values":[]},{"name":"colorVariants","description":"Inherited from `IdsColorVariantMixin`","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"actionable","values":[]},{"name":"dismissible","values":[]},{"name":"dismissibleBtnEl","description":"Provides a reference to a close button, if applicable","values":[]},{"name":"disabled","values":[]},{"name":"selected","values":[]},{"name":"value","values":[]},{"name":"count","values":[]},{"name":"#setDataTextForBoldFix","description":"Sets the data-text of nested ids-text to it's slot\ntext content. Fixes issue with bold moving around\nwhen we edit content.","values":[]}],"description":{"kind":"markdown","value":"# Ids Tabs Component\n\n## Description\n\nTabs are a navigation element used to allow users to easily access different areas of a site or different parts of an individual page. A user can navigate between page sections with a tab. Best for communicating different views of the data, or offering navigation between related data.\nway to highlight which section/content in a page you are currently\nfocused on.\n\n## Use Cases\n\n- Used when need information to be highly scannable and to simplify navigation.\n- Used when a page needs a more organized structure.\n\n## Features (With Code Examples)\n\nA normal default horizontal tab component.\n\n```html\n<ids-tabs value=\"one\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\nA vertical tabs component.\n\n```html\n<ids-tabs value=\"one\" orientation=\"vertical\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\nUsing a tab context to show the active tab content in `ids-tab-content`.\n```html\n<ids-tabs-context>\n    <!-- ^ context has no outward styling or content, but width/height or display can be set -->\n    <ids-tabs value=\"one\">\n        <ids-tab value=\"one\">Section 1</ids-tab>\n        <ids-tab value=\"two\">Section 2</ids-tab>\n        <ids-tab value=\"three\">Section 3</ids-tab>\n    </ids-tabs>\n    <div class=\"tab-content\">\n        <ids-tab-content value=\"one\">\n            This will be initially visible\n        </ids-tab-content>\n        <ids-tab-content value=\"two\">\n            If ids-tabs value=\"two\" is selected, or ids-tab with value \"two\"\n            is set as selected, then this will be visible and one will be hidden\n        </ids-tab-content>\n        <ids-tab-content value=\"three\">\n            And this will show if the ids-tabs value or selection becomes \"three\",\n            similar to the previous content entry. Only one will be shown at once.\n        </ids-tab-content>\n    </div>\n</ids-tabs-context>\n```\n\nIt's also possible to create Module Tabs for top-level navigation in your application\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\n### Overflowed Tabs\n\nWhen creating a tab list with many tabs, its possible there will not be enough screen real-estate to display them all.  In this situation you can also add a special \"More Tabs\" tab component:\n\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n    <ids-tab value=\"four\">Example Four</ids-tab>\n    <ids-tab value=\"five\">Example Five</ids-tab>\n    <ids-tab value=\"six\">Example Six</ids-tab>\n    <ids-tab-more overflow></ids-tab-more>\n</ids-tabs>\n```\n\n### Fixed placement of Tabs and Actions\n\nSome items slotted in IdsTabs should not spill into the \"More Actions\" area and should always be present.  Using the `fixed` slot name on these elements causes them to sit inside a \"fixed\" on the right of the IdsTabs.  In cases where overflow is present, the actions will be adjacent to a visible More Actions tab.\n\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n    <ids-tab value=\"four\">Example Four</ids-tab>\n    <ids-tab value=\"five\" slot=\"fixed\">Example Five</ids-tab>\n    <ids-tab value=\"six\" slot=\"fixed\">Example Six</ids-tab>\n    <ids-tab-more overflow></ids-tab-more>\n</ids-tabs>\n```\n\nWhen this component is present in a tab list, it will only be displayed when there is not enough space to display all other tabs present.  When clicking on this tab, it opens an [IdsPopupMenu](../ids-popup-menu/README.md) containing menu items that reflect all tabs currently \"overflowed\" (in practice, the tabs that are hidden).  Selecting an item from the menu causes the menu item's corresponding tab to be activated.\n\n### Dismissible Tabs\n\nTabs can be configured to display an optional [IdsTriggerButton](../ids-trigger-field/README.md) (marked with an \"X\") that will remove it from the tab list when clicked.  If a content pane with a matching `value` attribute exists, the IdsTabsContext element locates and removes it. When a tab is dismissed, it emits a `tabremove` event.\n\n```html\n<ids-tab value=\"one\" dismissible>Example One</dismissible>\n```\n\n## Settings and Attributes\n\n### Tab Container Settings (`ids-tabs`)\n- `disabled` {boolean} disables all tabs.\n- `value` {string} set which tab is currently selected. If tab children do not have a value, will fall back to being a 0-based index. Otherwise, it can also be any string as long as there are relevant matches for the values.\n- `orientation` {'horizontal' | 'vertical'} defaults to horizontal; controls the direction/axis tabs are flowed on.\n- `color-variant` {'alternate'|'module'} (optional) sets the Tabs color variant.  The `alternate` variant is used on header components and set automatically when placed inside of an `ids-header` component.  The `module` variant displays Module Tabs, which are generally used as top-level navigation only.\n\n### Individual Tabs Settings (`ids-tab`)\n- `actionable` {boolean} labels a tab as having a corresponding action, such as \"Add\", \"Reset\", \"Activate Application Menu\", etc.  Tabs that use this setting should also have an `onAction` callback applied, which will be triggered upon selecting the tab.  Tabs that are `actionable` will not cause content in tab panels to be displayed.\n- `disabled` {boolean} allows you to disable a tab among a set of tabs.\n- `selected` {boolean} allows for a tab to display its selected state.  In some cases, tabs with this value set to true will also automatically display their corresponding Tab Panel's content.  Tabs that have an `actionable` attribute applied are not able to be \"selected\" -- selecting those tabs will focus them.\n- `value` {string | number} the value which when the parent `ids-tabs` also has an equivalent for, selects this tab.\n\n## Themeable Parts\n### IdsTabs\n- `container` allows you to style the container of the tab\n\n## States and Variations (With Code Examples)\n\nWhen placed inside of an `IdsHeader` component, the `ids-tabs` component automatically gains the property `color-variant` which is set to `alternate` as it's default style.\n\n## Keyboard Guidelines\n\n- TAB should move off of the component to the next focusable element on page.\n- SHIFT + TAB should move to previous focusable element on the page.\n- Direction keys (UP/DOWN for vertical, LEFT/RIGHT for horizontal) should move between tabs\n- ENTER should select a tab.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container. Possibly scrolling as needed based on parent dimensions.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Tabs was implemented in v4.0.0\n- Tabs can be invoked with `$('#my-element').tabs()`.\n\n**4.x to 5.x**\n\n- Tabs are now custom elements `<ids-tabs value=${selection}></ids-tabs>`\n- If using events, events are now plain JS events\n- Can now be imported as a single JS file and used with encapsulated styles\n- Content within the tabs are specified as `<ids-tab value=${selection-value}>`Tab Label/Content`</ids-tab>`\n- Tabs and their panels are now wrapped with a context element `<ids-tabs-context></ids-tabs-context>` for controlling which tab is displayed\n- Tabs can optionally display overflow by inserting an `<ids-tab-more overflow></ids-tab-more>` component into the `<ids-tabs></ids-tabs>` component\n\n## Accessibility Guidelines\n\nTODO\n\n## Regional Considerations\n\nText within tabs should be localized in the current language. They should also should flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-tabs-context","attributes":[{"name":"value","values":[]}],"description":{"kind":"markdown","value":"# Ids Tabs Component\n\n## Description\n\nTabs are a navigation element used to allow users to easily access different areas of a site or different parts of an individual page. A user can navigate between page sections with a tab. Best for communicating different views of the data, or offering navigation between related data.\nway to highlight which section/content in a page you are currently\nfocused on.\n\n## Use Cases\n\n- Used when need information to be highly scannable and to simplify navigation.\n- Used when a page needs a more organized structure.\n\n## Features (With Code Examples)\n\nA normal default horizontal tab component.\n\n```html\n<ids-tabs value=\"one\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\nA vertical tabs component.\n\n```html\n<ids-tabs value=\"one\" orientation=\"vertical\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\nUsing a tab context to show the active tab content in `ids-tab-content`.\n```html\n<ids-tabs-context>\n    <!-- ^ context has no outward styling or content, but width/height or display can be set -->\n    <ids-tabs value=\"one\">\n        <ids-tab value=\"one\">Section 1</ids-tab>\n        <ids-tab value=\"two\">Section 2</ids-tab>\n        <ids-tab value=\"three\">Section 3</ids-tab>\n    </ids-tabs>\n    <div class=\"tab-content\">\n        <ids-tab-content value=\"one\">\n            This will be initially visible\n        </ids-tab-content>\n        <ids-tab-content value=\"two\">\n            If ids-tabs value=\"two\" is selected, or ids-tab with value \"two\"\n            is set as selected, then this will be visible and one will be hidden\n        </ids-tab-content>\n        <ids-tab-content value=\"three\">\n            And this will show if the ids-tabs value or selection becomes \"three\",\n            similar to the previous content entry. Only one will be shown at once.\n        </ids-tab-content>\n    </div>\n</ids-tabs-context>\n```\n\nIt's also possible to create Module Tabs for top-level navigation in your application\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\n### Overflowed Tabs\n\nWhen creating a tab list with many tabs, its possible there will not be enough screen real-estate to display them all.  In this situation you can also add a special \"More Tabs\" tab component:\n\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n    <ids-tab value=\"four\">Example Four</ids-tab>\n    <ids-tab value=\"five\">Example Five</ids-tab>\n    <ids-tab value=\"six\">Example Six</ids-tab>\n    <ids-tab-more overflow></ids-tab-more>\n</ids-tabs>\n```\n\n### Fixed placement of Tabs and Actions\n\nSome items slotted in IdsTabs should not spill into the \"More Actions\" area and should always be present.  Using the `fixed` slot name on these elements causes them to sit inside a \"fixed\" on the right of the IdsTabs.  In cases where overflow is present, the actions will be adjacent to a visible More Actions tab.\n\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n    <ids-tab value=\"four\">Example Four</ids-tab>\n    <ids-tab value=\"five\" slot=\"fixed\">Example Five</ids-tab>\n    <ids-tab value=\"six\" slot=\"fixed\">Example Six</ids-tab>\n    <ids-tab-more overflow></ids-tab-more>\n</ids-tabs>\n```\n\nWhen this component is present in a tab list, it will only be displayed when there is not enough space to display all other tabs present.  When clicking on this tab, it opens an [IdsPopupMenu](../ids-popup-menu/README.md) containing menu items that reflect all tabs currently \"overflowed\" (in practice, the tabs that are hidden).  Selecting an item from the menu causes the menu item's corresponding tab to be activated.\n\n### Dismissible Tabs\n\nTabs can be configured to display an optional [IdsTriggerButton](../ids-trigger-field/README.md) (marked with an \"X\") that will remove it from the tab list when clicked.  If a content pane with a matching `value` attribute exists, the IdsTabsContext element locates and removes it. When a tab is dismissed, it emits a `tabremove` event.\n\n```html\n<ids-tab value=\"one\" dismissible>Example One</dismissible>\n```\n\n## Settings and Attributes\n\n### Tab Container Settings (`ids-tabs`)\n- `disabled` {boolean} disables all tabs.\n- `value` {string} set which tab is currently selected. If tab children do not have a value, will fall back to being a 0-based index. Otherwise, it can also be any string as long as there are relevant matches for the values.\n- `orientation` {'horizontal' | 'vertical'} defaults to horizontal; controls the direction/axis tabs are flowed on.\n- `color-variant` {'alternate'|'module'} (optional) sets the Tabs color variant.  The `alternate` variant is used on header components and set automatically when placed inside of an `ids-header` component.  The `module` variant displays Module Tabs, which are generally used as top-level navigation only.\n\n### Individual Tabs Settings (`ids-tab`)\n- `actionable` {boolean} labels a tab as having a corresponding action, such as \"Add\", \"Reset\", \"Activate Application Menu\", etc.  Tabs that use this setting should also have an `onAction` callback applied, which will be triggered upon selecting the tab.  Tabs that are `actionable` will not cause content in tab panels to be displayed.\n- `disabled` {boolean} allows you to disable a tab among a set of tabs.\n- `selected` {boolean} allows for a tab to display its selected state.  In some cases, tabs with this value set to true will also automatically display their corresponding Tab Panel's content.  Tabs that have an `actionable` attribute applied are not able to be \"selected\" -- selecting those tabs will focus them.\n- `value` {string | number} the value which when the parent `ids-tabs` also has an equivalent for, selects this tab.\n\n## Themeable Parts\n### IdsTabs\n- `container` allows you to style the container of the tab\n\n## States and Variations (With Code Examples)\n\nWhen placed inside of an `IdsHeader` component, the `ids-tabs` component automatically gains the property `color-variant` which is set to `alternate` as it's default style.\n\n## Keyboard Guidelines\n\n- TAB should move off of the component to the next focusable element on page.\n- SHIFT + TAB should move to previous focusable element on the page.\n- Direction keys (UP/DOWN for vertical, LEFT/RIGHT for horizontal) should move between tabs\n- ENTER should select a tab.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container. Possibly scrolling as needed based on parent dimensions.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Tabs was implemented in v4.0.0\n- Tabs can be invoked with `$('#my-element').tabs()`.\n\n**4.x to 5.x**\n\n- Tabs are now custom elements `<ids-tabs value=${selection}></ids-tabs>`\n- If using events, events are now plain JS events\n- Can now be imported as a single JS file and used with encapsulated styles\n- Content within the tabs are specified as `<ids-tab value=${selection-value}>`Tab Label/Content`</ids-tab>`\n- Tabs and their panels are now wrapped with a context element `<ids-tabs-context></ids-tabs-context>` for controlling which tab is displayed\n- Tabs can optionally display overflow by inserting an `<ids-tab-more overflow></ids-tab-more>` component into the `<ids-tabs></ids-tabs>` component\n\n## Accessibility Guidelines\n\nTODO\n\n## Regional Considerations\n\nText within tabs should be localized in the current language. They should also should flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-tabs","attributes":[{"name":"#ro","description":"Watches for changes to the Tab List size and recalculates overflowed tabs, if applicable","values":[]},{"name":"colorVariants","description":"Inherited from `IdsColorVariantMixin`","values":[]},{"name":"#value","values":[]},{"name":"value","values":[]},{"name":"tabListContainer","values":[]},{"name":"moreContainer","values":[]},{"name":"tabListElements","values":[]},{"name":"lastTab","values":[]},{"name":"lastNavigableTab","values":[]}],"description":{"kind":"markdown","value":"# Ids Tabs Component\n\n## Description\n\nTabs are a navigation element used to allow users to easily access different areas of a site or different parts of an individual page. A user can navigate between page sections with a tab. Best for communicating different views of the data, or offering navigation between related data.\nway to highlight which section/content in a page you are currently\nfocused on.\n\n## Use Cases\n\n- Used when need information to be highly scannable and to simplify navigation.\n- Used when a page needs a more organized structure.\n\n## Features (With Code Examples)\n\nA normal default horizontal tab component.\n\n```html\n<ids-tabs value=\"one\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\nA vertical tabs component.\n\n```html\n<ids-tabs value=\"one\" orientation=\"vertical\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\nUsing a tab context to show the active tab content in `ids-tab-content`.\n```html\n<ids-tabs-context>\n    <!-- ^ context has no outward styling or content, but width/height or display can be set -->\n    <ids-tabs value=\"one\">\n        <ids-tab value=\"one\">Section 1</ids-tab>\n        <ids-tab value=\"two\">Section 2</ids-tab>\n        <ids-tab value=\"three\">Section 3</ids-tab>\n    </ids-tabs>\n    <div class=\"tab-content\">\n        <ids-tab-content value=\"one\">\n            This will be initially visible\n        </ids-tab-content>\n        <ids-tab-content value=\"two\">\n            If ids-tabs value=\"two\" is selected, or ids-tab with value \"two\"\n            is set as selected, then this will be visible and one will be hidden\n        </ids-tab-content>\n        <ids-tab-content value=\"three\">\n            And this will show if the ids-tabs value or selection becomes \"three\",\n            similar to the previous content entry. Only one will be shown at once.\n        </ids-tab-content>\n    </div>\n</ids-tabs-context>\n```\n\nIt's also possible to create Module Tabs for top-level navigation in your application\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n</ids-tabs>\n```\n\n### Overflowed Tabs\n\nWhen creating a tab list with many tabs, its possible there will not be enough screen real-estate to display them all.  In this situation you can also add a special \"More Tabs\" tab component:\n\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n    <ids-tab value=\"four\">Example Four</ids-tab>\n    <ids-tab value=\"five\">Example Five</ids-tab>\n    <ids-tab value=\"six\">Example Six</ids-tab>\n    <ids-tab-more overflow></ids-tab-more>\n</ids-tabs>\n```\n\n### Fixed placement of Tabs and Actions\n\nSome items slotted in IdsTabs should not spill into the \"More Actions\" area and should always be present.  Using the `fixed` slot name on these elements causes them to sit inside a \"fixed\" on the right of the IdsTabs.  In cases where overflow is present, the actions will be adjacent to a visible More Actions tab.\n\n```html\n<ids-tabs value=\"one\" color-variant=\"module\">\n    <ids-tab value=\"one\">Example One</ids-tab>\n    <ids-tab value=\"two\">Example Two</ids-tab>\n    <ids-tab value=\"three\">Example Three</ids-tab>\n    <ids-tab value=\"four\">Example Four</ids-tab>\n    <ids-tab value=\"five\" slot=\"fixed\">Example Five</ids-tab>\n    <ids-tab value=\"six\" slot=\"fixed\">Example Six</ids-tab>\n    <ids-tab-more overflow></ids-tab-more>\n</ids-tabs>\n```\n\nWhen this component is present in a tab list, it will only be displayed when there is not enough space to display all other tabs present.  When clicking on this tab, it opens an [IdsPopupMenu](../ids-popup-menu/README.md) containing menu items that reflect all tabs currently \"overflowed\" (in practice, the tabs that are hidden).  Selecting an item from the menu causes the menu item's corresponding tab to be activated.\n\n### Dismissible Tabs\n\nTabs can be configured to display an optional [IdsTriggerButton](../ids-trigger-field/README.md) (marked with an \"X\") that will remove it from the tab list when clicked.  If a content pane with a matching `value` attribute exists, the IdsTabsContext element locates and removes it. When a tab is dismissed, it emits a `tabremove` event.\n\n```html\n<ids-tab value=\"one\" dismissible>Example One</dismissible>\n```\n\n## Settings and Attributes\n\n### Tab Container Settings (`ids-tabs`)\n- `disabled` {boolean} disables all tabs.\n- `value` {string} set which tab is currently selected. If tab children do not have a value, will fall back to being a 0-based index. Otherwise, it can also be any string as long as there are relevant matches for the values.\n- `orientation` {'horizontal' | 'vertical'} defaults to horizontal; controls the direction/axis tabs are flowed on.\n- `color-variant` {'alternate'|'module'} (optional) sets the Tabs color variant.  The `alternate` variant is used on header components and set automatically when placed inside of an `ids-header` component.  The `module` variant displays Module Tabs, which are generally used as top-level navigation only.\n\n### Individual Tabs Settings (`ids-tab`)\n- `actionable` {boolean} labels a tab as having a corresponding action, such as \"Add\", \"Reset\", \"Activate Application Menu\", etc.  Tabs that use this setting should also have an `onAction` callback applied, which will be triggered upon selecting the tab.  Tabs that are `actionable` will not cause content in tab panels to be displayed.\n- `disabled` {boolean} allows you to disable a tab among a set of tabs.\n- `selected` {boolean} allows for a tab to display its selected state.  In some cases, tabs with this value set to true will also automatically display their corresponding Tab Panel's content.  Tabs that have an `actionable` attribute applied are not able to be \"selected\" -- selecting those tabs will focus them.\n- `value` {string | number} the value which when the parent `ids-tabs` also has an equivalent for, selects this tab.\n\n## Themeable Parts\n### IdsTabs\n- `container` allows you to style the container of the tab\n\n## States and Variations (With Code Examples)\n\nWhen placed inside of an `IdsHeader` component, the `ids-tabs` component automatically gains the property `color-variant` which is set to `alternate` as it's default style.\n\n## Keyboard Guidelines\n\n- TAB should move off of the component to the next focusable element on page.\n- SHIFT + TAB should move to previous focusable element on the page.\n- Direction keys (UP/DOWN for vertical, LEFT/RIGHT for horizontal) should move between tabs\n- ENTER should select a tab.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container. Possibly scrolling as needed based on parent dimensions.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Tabs was implemented in v4.0.0\n- Tabs can be invoked with `$('#my-element').tabs()`.\n\n**4.x to 5.x**\n\n- Tabs are now custom elements `<ids-tabs value=${selection}></ids-tabs>`\n- If using events, events are now plain JS events\n- Can now be imported as a single JS file and used with encapsulated styles\n- Content within the tabs are specified as `<ids-tab value=${selection-value}>`Tab Label/Content`</ids-tab>`\n- Tabs and their panels are now wrapped with a context element `<ids-tabs-context></ids-tabs-context>` for controlling which tab is displayed\n- Tabs can optionally display overflow by inserting an `<ids-tab-more overflow></ids-tab-more>` component into the `<ids-tabs></ids-tabs>` component\n\n## Accessibility Guidelines\n\nTODO\n\n## Regional Considerations\n\nText within tabs should be localized in the current language. They should also should flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-tag","attributes":[{"name":"color","description":"Set the tag color","values":[]},{"name":"dismissible","description":"If set to true the tag has an x to dismiss","values":[]},{"name":"disabled","values":[]},{"name":"clickable","description":"Gets clickable state","values":[]}],"description":{"kind":"markdown","value":"# Ids Tag Component\n\n## Description\n\nTags are UI embellishments that are used to label, categorize and organize keywords surrounding\nsome contextual element such as a form.\n\n## Use Cases\n\n- Use when the content on your page is mapped into multiple categories and does not only fit into one hierarchical category.\n- Use when you want users to contribute data to your website and let them organize their content themselves.\n\n## Dos and Don'ts\n\n- Overcrowd your content with tags, so people can see the items clearly.\n- Don't use too many tags in order to use them clearly to capture what its tagging.\n\n## Terminology\n\n- **Tag**: A UI embellishments for classification\n- **Clickable/Dismissible**: Tag can be closed and removed with an X button\n- **Classification**:  How tags are labelled with colors and text\n- **Disabled**: Tag can be disabled so it cannot be followed or clicked.\n\n## Features (With Code Examples)\n\nA normal tag used as a web component.\n\n```html\n<ids-tag>Normal Tag</ids-tag>\n```\n\nA normal tag used using just the css. This is limited to normal tags only.\n\n```html\n<span class=\"ids-tag\">Normal Tag</span>\n```\n\nA colored tag is done by adding the `color` attribute and one of the following: secondary, error, success, caution or a hex color beginning with a # character.\n\n```html\n<ids-tag color=\"secondary\">Secondary Tag</ids-tag>\n<ids-tag color=\"error\">Error Tag</ids-tag>\n<ids-tag color=\"success\">Success Tag</ids-tag>\n<ids-tag color=\"caution\">Warning Tag</ids-tag>\n<ids-tag color=\"#EDE3FC\">Custom Tag Color</ids-tag>\n```\n\n## Class Hierarchy\n\n- IdsTag\n    - IdsElement\n- Mixins\n  IdsEventsMixin\n  IdsKeyboardMixin\n\n## Settings (Attributes)\n\n- `clickable` {boolean} Turns on the functionality to make the tag clickable like a link\n- `dismissible` {boolean} Turns on the functionality to add an (x) button to clear remove the tag\n- `color` {string} Sets the color to a internal color such as `azure` or may be a hex starting with a `#`\n\n## Events\n\n- `beforetagremove` Fire before the tag is removed allowing to veto the action. Detail contains the element `elem` and the callback for vetoing\n- `tagremove` Fires at the time the tag is removed. Detail contains the element `elem`\n- `aftertagremove` Fires after the tag is removed from the DOM. Detail contains the element `elem`\n\n## Methods\n\n- `dismiss` Removes the tag from the page.\n\n## Themeable Parts\n\n- `checkbox` allows you to further style the checkbox input element\n- `slider` allows you to further style the sliding part of the switch\n- `label` allows you to further style the label text\n\n## States and Variations\n\n- Color\n- Linkable\n- Badge\n- Disabled\n- Closable\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>: If the tab is focusable this will focus or unfocus the tag.\n- <kbd>Backspace / Alt+Del</kbd>: If the tag is dismissible then this will remove the tag.\n- <kbd>Enter</kbd>: If the tag is clickable then this will follow the tag link.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container. Possibly scrolling as needed based on parent dimensions.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Tag was implemented in v4.0.0\n- Tag can be invoked with `$('#my-element').tag()`.\n\n**4.x to 5.x**\n\n- Tags are now custom elements `<ids-tag color=\"error>Text</ids-tag>`\n- If using events events are now plain JS events. `beforetagremove`, `tagremove`, `aftertagremove`\n- If using properties/settings these are now attributes: `dismissible`, `color`\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs 4.5](https://www.figma.com/file/yaJ8mJrqRRej8oTsd6iT8P/IDS-(SoHo)-Component-Library-v4.5?node-id=760%3A771)\n[Design Specs 4.6](https://www.figma.com/file/ok0LLOT9PP1J0kBkPMaZ5c/IDS_Component_File_v4.6-(Draft))\n\n## Accessibility Guidelines\n\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. Ensure the color tags that indicate state like OK, cancel, ect have other ways to indicate that information. This is failing.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and images of text has a contrast ratio of at least 4.5:1.   Ensure the color tags pass contrast.\n\n## Regional Considerations\n\nLabels should be localized in the current language. The close and link icons will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-text","attributes":[{"name":"colorVariants","description":"Inherited from `IdsColorVariantMixin`","values":[]},{"name":"fontSize","description":"Set the font size of the text with a class.","values":[]},{"name":"fontWeight","description":"Adjust font weight; can be either \"bold\" or \"lighter\"","values":[]},{"name":"type","description":"Set the type of element it is (h1-h6, span (default))","values":[]},{"name":"color","description":"If set to \"unset\", color can be controlled by parent container\nIf set to \"muted\" will apply as disabled color","values":[]},{"name":"audible","description":"Set audible as screen reader only text","values":[]},{"name":"disabled","description":"Set the text to disabled color.","values":[]},{"name":"error","description":"Set the text to error color.","values":[]},{"name":"label","description":"Set the text to label color.","values":[]},{"name":"data","description":"Set the text to data color.","values":[]},{"name":"overflow","description":"Set how content overflows; can specify 'ellipsis', or undefined or 'none'","values":[]},{"name":"textAlign","description":"Set the given text align","values":[]},{"name":"status","description":"Set the given status","values":[]},{"name":"translateText","description":"If set to true the value in the text will be considered a key and\nsent to the translation function","values":[]}],"description":{"kind":"markdown","value":"# Ids Text Component\n\n## Description\n\nThis component styles arbitrary text elements using the design guidelines.\n\n## Use Cases\n\n- When you need static text on a page\n- When you need disabled appearing text in a page\n- When you need text to display status state in a page\n\n## Typography\n\nTypography is used to present content in a variety of styles and size, and is essential for establishing information hierarchies, ensuring readability, and creating consistency within the content of Infor products. Typography works in tandem with icons, colors, and user patterns to create a clear landscape of what is possible in any given application.\n\n### Typography Usage\n\nTypography in our design system is presented as a series of variants which can be mixed and matched to create different font styles for different copy on your product. Text sizes range from 10 to 72, with thick and thin weights. Infor Design System uses the Source Sans Pro font, which is a friendly and approachable sans serif that brings a human touch to our enterprise software.\n\nEach typographical style contains two size values. The first denotes the size of the type, while the second denotes the corresponding line height, which is shown as 125% of the type size.\n\nSee “Variations” for more detail about our typography and use cases.\n\n### Display Text - Brand use only\n\nRanging from 40 to 72 in size, these are meant for display in presentations and marketing materials. They are not used in applications or apps.\n\n### Heading Text\n\nRanging from 20 to 32 in size, heading text can have a weight of 400 or 600. These are meant for title text in applications, and might be seen on a masthead, application header, or widget title. We recommend that these sizes only be used as titles, rather than as paragraph or body text.\n\n### Body text\n\nRanging from 14 to 16 in size, body text can have a weight of 400 or 600. These are meant for display in applications and apps. Our most used text size is 16, which works well for body text in cards, tabs, modals and many other components. Captions or small text are 14.\n\n### Body Text (All Caps)\n\nRanging from 10 to 12 in size, small text can have a weight of 300 or 600. Due to its small size, this body text contains all capital letters to improve readability and fit accessibility standards. While these sizes can be used for captions, we recommend using them sparingly due to their reduced visibility.\n\n### Quick Reference\n\n|Name|Size (px)|Weight|Line Height|Capitalization|\n|----|---------|------|-----------|--------------|\nDisplay 01|72|300|91|Normal\nDisplay 02|60|300|75|Normal\nDisplay 03|48|300|60|Normal\nDisplay 04|40|300|50|Normal\nHeading 32|32|400|40|Normal\nHeading 32 Bold|32|600|40|Normal\nHeading 28|28|400|35|Normal\nHeading 28 Bold|28|600|35|Normal\nHeading 24|24|400|30|Normal\nHeading 24 Bold|24|600|30|Normal\nHeading 20|20|400|25|Normal\nHeading 20 Bold|20|600|25|Normal\nBody Text|16|400|20|Normal\nBody Text Bold|16|600|20|Normal\nBody SM|14|400|18|Normal\nBody SM Bold|14|600|18|Normal\nSmall Text 01|12|400|15|Uppercase\nSmall Text 01 Bold|12|600|15|Uppercase\nSmall 02|10|400|13|Uppercase\nSmall 02 Bold|10|600|13|Uppercase\n\n### Colors\n\nWhen using color in type, make sure to follow the guidelines below:\n\n1. Text color should have adequate contrast to its background. You can test the contrast [here](https://www.tpgi.com/color-contrast-checker/).\n2. Do not use alert colors unless the text corresponds to an alert.\n3. Text colors should be mapped to a style token in IDS to ensure consistency.\n\n### Common variations\n\nWhile most text will appear in Slate 08 and fall within the type styles defined above, text color may also take the following variations in certain circumstances:\n\n1. Descriptive Text\n\nThis is the most frequently-used text color and serves as the default for short phrases and longer paragraphs. The color used for descriptive text is usually Slate 10.\n\n2. Linked Text\n\nThis is an interactive link to another page in Infor software or to external webpages. Please refer to the hyperlink documentation for further details. Text is underlined and is in Azure 06.\n\n3. Muted Text\n\nThis shows disabled functions; this text cannot be edited when it shows in an input area. The color for muted or disabled text should appear in a Slate tone lighter than the descriptive text (usually 06 or lighter).\n\n4. Alert Text\n\nThis serves as notification text that tells users of changes, errors, or updates. The color for this text is Status 01 (Ruby 06).\n\n5. Strong Text\n\nThis is heavily weighted text, used to make terms or phrases stand out. This text will appear with a weight of 600. Because of its increased weight, strong text has more flexibility with its contrast to the background.\n\n### Visual Guidelines\n\nTake readability and line length into consideration when designing and working with all Infor CloudSuite applications. We suggest keeping text between 50-75 characters per line.\n\n### Typography References\n\nLearn more about this topic [here](https://www.interaction-design.org/literature/article/web-fonts-are-critical-to-the-online-user-experience-don-t-hurt-your-reader-s-eyes).\n\n## Terminology\n\n- **Text**: A a human-readable sequence of character s and the words\n- **Disabled**: Text can be disabled, this is usually done with some other element in mind. For example a disabled field label\n- **Audible**: Text that does not appear in the page but is read by users with screen readers in order to give them information.\n\n### Text alignments\n\nSets the horizontal alignment of the content inside a block element, setting can be specified in one of the following ways:\n\n- **Start**: It is same as left if direction is left-to-right and right if direction is right-to-left.\n- **End**: It is same as right if direction is left-to-right and left if direction is right-to-left.\n- **Center**: The content will be center align.\n- **Justify**: The content will be justified. Text should be spaced to line up its left and right edges to the left and right edges, except for the last line.\n\n### Text status\n\nText can be display the status state in a page. It will show bullet character along text. Text and bullet both are display in various colors based on type of status, available options are as:\n\n- **Base**: Show the base status, normal color for bullet and text.\n- **Error**: Show the error status, error color for built and text.\n- **Info**: Show the info status, info color for built and text.\n- **Success**: Show the success status, success color for built and text.\n- **Warning**: Show the warning status, warning color for built and text.\n\n## Features (With Code Examples)\n\nA normal text element used as a web component in size 16px.\n\n```html\n<ids-text font-size=\"16\">Normal Text</ids-text>\n```\n\nA Disabled appearing text element.\n\n```html\n<ids-text disabled=\"true\">Disabled Text</ids-text>\n```\n\nUsing the data/label.\n```html\n<ids-text label=\"true\">Title</ids-text>\n<ids-text data=\"true\">Some random data</ids-text>\n```\n\nUsing the text alignments.\n```html\n<ids-text text-align=\"end\">Some text display as end align</ids-text>\n```\n\nUsing the text status.\n```html\n<ids-text status=\"error\">Error</ids-text>\n```\n\n## Settings and Attributes\n\n- `type` {boolean} Set the type of element it is usually h1-h6. Defaults to span\n- `audible` {string} Set `audible` string (screen reader only text)\n- `disabled` {boolean} Set the text to disabled in appearance\n- `fontSize` {string} Set the size of font to use (in pixels) we use design tokens for this in specific increments [10 | 12 | 14 | 16 | 20 | 24 | 28 | 32 | 40 | 48 | 60 | 72 ]\n- `mode` {string} Set the theme mode\n- `version` {string} Set the theme version\n- `color` {string} If set to `unset`, the CSS color will be `'unset'` allowing you to color with surrounding content. If set to \"muted\" will apply as disabled color.\n- `color-variant` {string} can be set to \"alternate\" to display contrasting color for text via the [IdsColorVariantMixin](../../src/mixins/ids-color-variant/README.md)\n- `data` {boolean} Sets the css of the text to the according theme\n- `label` {boolean} Sets the css of the text to the according theme\n- `text-align` {string} Sets the text alignments `start`, `end`, `center`, `justify`\n- `status` {string} Sets the text status `base`, `error`, `info`, `success`, `warning`\n\n## Themeable Parts\n\n- `text` allows you to further style the text element\n\n## States and Variations (With Code Examples)\n\n- Audible\n- Size\n- Disabled\n- Color Variant (alternate)\n- Status\n- Text alignment\n\n## Keyboard Guidelines\n\nText is not keyboard focusable so has no keyboard shortcuts.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container. Possibly scrolling as needed based on parent dimensions.\n\n## Converting from Previous Versions\n\n- 3.x: Did not exist\n- 4.x: Convert spans/ h1-h6 to use the web component with types\n\n## Accessibility Guidelines\n\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. Ensure the color tags that indicate state like OK, cancel, ect have other ways to indicate that information. This is failing.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and images of text has a contrast ratio of at least 4.5:1.   Ensure the color tags pass contrast.\n\n## Regional Considerations\n\nText should be localized in the current language. And should flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-textarea","attributes":[{"name":"autogrowProcessing","values":[]},{"name":"isSafari","values":[]},{"name":"isFormComponent","values":[]},{"name":"input","values":[]},{"name":"fieldContainer","values":[]},{"name":"autogrow","description":"Set textarea height to be autogrow","values":[]},{"name":"autogrowMaxHeight","description":"Set textarea height to be autogrow-max-height","values":[]},{"name":"autoselect","description":"When set the textarea will select all text on focus","values":[]},{"name":"charMaxText","description":"Set `char-max-text` text for character counter","values":[]},{"name":"charRemainingText","description":"Set `char-remaining-text` text for character counter","values":[]},{"name":"characterCounter","description":"Set the `character-counter` feature","values":[]},{"name":"disabled","description":"Sets textarea to disabled","values":[]},{"name":"#labelEl","description":"internal reference to a label element a user provides","values":[]},{"name":"labelEl","values":[]},{"name":"maxlength","description":"Set the `maxlength` of textarea","values":[]},{"name":"placeholder","description":"Set the `placeholder` of textarea","values":[]},{"name":"printable","description":"Set the `printable` of textarea","values":[]},{"name":"readonly","description":"Set the textarea to readonly state","values":[]},{"name":"resizable","description":"Set the textarea to resizable state","values":[]},{"name":"rows","description":"Set the rows for textarea","values":[]},{"name":"size","description":"Set the size (width) of textarea","values":[]},{"name":"textAlign","description":"Sets the text alignment","values":[]},{"name":"value","description":"Set the `value` of textarea","values":[]}],"description":{"kind":"markdown","value":"# Ids Textarea Component\n\n## Description\n\nThe IDS Textarea component is a simple wrapper around a standard HTMLTextareaElement that is styled with Infor branding, and contains some additional API that makes it easy to set textarea, label, and functionality.\n\n## Use Cases\n\n- Create a standalone textarea\n- Create a textarea, with different styling to provide context for actions that are disabled, readonly, and various sizes, types.\n\n## Terminology\n\n- Textarea: A standard basic textarea element. It can set to various types, size, and functionality. IDS Textarea will add `aria-required` for required elements.\n- Label: HTMLLabelElement to keep matching with HTMLTextareaElement. Make sure the textarea label has a meaningful relative to textarea. IDS Textarea will add sudo ui `*` for required elements.\n\n## Features (With Code Samples)\n\nA standard Text Textarea is a basic textarea element:\n\n```html\n<ids-textarea label=\"Basic\"></ids-textarea>\n```\n\nSets textarea as Disabled:\n\n```html\n<ids-textarea label=\"Disabled\" disabled=\"true\"></ids-textarea>\n```\n\nAdd an Readonly to Textarea this way:\n\n```html\n<ids-textarea label=\"Readonly\" readonly=\"true\"></ids-textarea>\n```\n\nSet the Auto Select text to Textarea this way:\n\n```html\n<ids-textarea label=\"Autoselect\" autoselect=\"true\">Text select on focus</ids-textarea>\n```\n\nSet validation `required` to Textarea this way:\n\n```html\n<ids-textarea label=\"Required\" validate=\"required\"></ids-textarea>\n```\n\nSet the Dirty Tracking to Textarea this way:\n\n```html\n<ids-textarea label=\"Dirty Tracking\" dirty-tracker=\"true\"></ids-textarea>\n```\n\nSet the Resizable to Textarea this way:\n\n```html\n<ids-textarea label=\"Resizable\" resizable=\"true\"></ids-textarea>\n```\n\nSet the Max Length to Textarea this way:\n\n```html\n<ids-textarea label=\"Max Length\" maxlength=\"90\">Line One</ids-textarea>\n```\n\nSet the Max Length and Custom Text to Textarea this way:\n\n```html\n<ids-textarea label=\"Max Length (Custom Text)\" maxlength=\"90\" char-max-text=\"This text cannot exceed {0} characters.\" char-remaining-text=\"You can type {0} more characters.\">Line One</ids-textarea>\n```\n\nSet the Auto Grow to Textarea this way:\n\n```html\n<ids-textarea label=\"Auto Grow\" autogrow=\"true\"></ids-textarea>\n```\n\nSet the Auto Grow and Max Height to Textarea this way:\n\n```html\n<ids-textarea label=\"Auto Grow (Max Height)\" autogrow=\"true\" autogrow-max-height=\"200\"></ids-textarea>\n```\n\nSet the Rows to Textarea this way:\n\n```html\n<ids-textarea label=\"Rows\" rows=\"15\">Line One</ids-textarea>\n```\n\nSet the Text Align to Text Textarea this way:\n\n```html\n<ids-textarea label=\"Default align (left)\">Default align</ids-textarea>\n<ids-textarea label=\"Left align\" text-align=\"start\">Left align</ids-textarea>\n<ids-textarea label=\"Center align\" text-align=\"center\">Center align</ids-textarea>\n<ids-textarea label=\"Right align\" text-align=\"end\">Right align</ids-textarea>\n```\n\nSet the sizes, available sizes are `'sm'|'md'|'lg'|'full'` and default type is `size=\"md\"`.\n\n```html\n<ids-textarea label=\"Full\" size=\"full\"></ids-textarea>\n```\n\nSet the sizes, available sizes are `'sm'|'md'|'lg'|'full'` and default type is `size=\"md\"`.\n\n```html\n<ids-textarea label=\"Placeholder\" placeholder=\"Type your notes here...\">></ids-textarea>\n```\n\n## Settings (Attributes)\n\n- `autogrow` {boolean} set automatically expand to fit the contents when typing.\n- `autogrowMaxHeight` {number|string} set max height of the textarea when autogrow is enabled.\n- `autoselect` {boolean} set auto select text on focus to textarea.\n- `charMaxText` {string} set text that will be used in place of the `max` text.\n- `charRemainingText` {string} set text that will be used in place of the `remaining` text.\n- `characterCounter` {boolean} set a counter that counts down from the maximum character.\n- `clearable` {boolean} set clearable icon on the textarea. See [Ids Clearable Mixin](../../mixins/ids-clearable-mixin/README.md) for more information.\n- `dirty-tracker` {boolean} set dirty tracker to textarea. See [Ids Dirty Tracker Mixin](../../mixins/ids-dirty-tracker-mixin/README.md) for more information.\n- `disabled` {boolean} set disabled state.\n- `label` {string} set the label text.\n- `labelRequired` {boolean} set the required indicator on label text.\n- `maxlength` {number|string} set the maximum characters allowed in textarea.\n- `placeholder` {string} set the placeholder text to textarea.\n- `printable` {boolean} set whether or not the textarea can be displayed on a printed page.\n- `size` {string} set the textarea size, it will set `md` as defaults.\n- `readonly` {boolean} set readonly state.\n- `resizable` {boolean} set to resize the height of the textarea.\n- `rows` {number|string} set to visible height of a textarea in lines.\n- `text-align` {string} set text-align to textarea, it will set `left` as defaults.\n- `type` {string} set the textarea type, it will set `text` as defaults.\n- `validate` {string} set the textarea validation rules, use `space` to add multiple validation rules.\n- `validationEvents` {string} set the textarea validation events, use `space` to add multiple validation rules, it will set `blur` as defaults.\n- `value` {string} set the textarea value.\n\n## Themeable Parts\n\n- `textarea` allows you to further style the textarea input element\n- `label` allows you to further style the label text\n\n## Keyboard Guidelines\n\nThe IDS Textarea doesn't contain any interactions beyond a standard HTMLTextareaElement:\n\n- <kbd>Tab</kbd> and <kbd>Shift Tab</kbd> moves focus into the edit field to/from the next focusable item in the tab order.\n\n## Responsive Guidelines\n\n- Default size is 362px wide but there are a number of widths.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Textarea was implemented in v4.0.0\n- Textarea can be invoked with `$('#my-element').textarea()`.\n\n**4.x to 5.x**\n\n- Textareas are now custom elements `<ids-textarea></ids-textarea>`\n- If using events, events are now plain JS events\n- Can now be imported as a single JS file and used with encapsulated styles\n- If using the `clearable` attribute, the \"X\" trigger button on the textarea is now tabbable by default for accessibility\n\n### Converting from 4.x\n\nThe IDS Textarea component is now a WebComponent. Instead of using classes to define the type, it is done directly:\n\n```html\n<!-- 4.x textarea example -->\n<div class=\"field\">\n    <label for=\"textarea-desc\">Description</label>\n    <textarea class=\"textarea\" id=\"textarea-desc\" name=\"textarea-desc\"></textarea>\n</div>\n\n<!-- this is the same textarea using the WebComponent -->\n<ids-textarea label=\"Description\" id=\"textarea-desc\"></ids-textarea>\n```\n\n## Designs\n\n## Alternate Designs\n\n## Proposed Changes\n\n## Test Plan\n\n1. Accessibility - Axe\n1. Visual Regression Test\n1. Repeat Tests in All Supported Browsers\n1. Some of these as test cases from the [WC gold standard](https://github.com/webcomponents/gold-standard/wiki#api)\n1. Can be consumed in NG/Vue/React (pull it in standalone/built see it works standalone)\n\n## Accessibility Guidelines\n\n## Regional Considerations\n"}},{"name":"ids-theme-switcher","attributes":[{"name":"popup","values":[]},{"name":"menuButton","values":[]},{"name":"onLocaleChange","values":[]},{"name":"colorVariants","description":"Inherited from `IdsColorVariantMixin`","values":[]},{"name":"mode","description":"Set the mode of the current theme","values":[]},{"name":"selfManaged","description":"If true the themes are self managed by eh developer (no fetches will be attempted)","values":[]},{"name":"theme","description":"Set the theme","values":[]}],"description":{"kind":"markdown","value":"# Ids Theme Switcher Component\n\n## Description\n\nWe include a theme switcher component that can be visual or non visual. If visual it comes with a menu button to allow you to pick theme. If non visible you can set its properties and all other components in the page will change theme to the set theme.\n\nYou can include the initial theme one of two ways.\n\n1. Let the components manage the styles in head manually\n2. If you need to serve the css files in a different way you can include the theme manually as a link. Then the theme switcher will replace the file name section when you use it. Or you could full manage this yourself (replacing the theme file changes theme). For example:\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <link rel=\"stylesheet\" href=\"/my-place/themes/ids-theme-default-light.css\">\n</head>\n<body>\n```\n\n## Use Cases\n\n- When you want to use a common look across applications with a theme\n- When you prefer a dark vs light mode or need a high contrast mode for low light situations or Accessibility.\n\n## Terminology\n\n- **Theme**: A broad term to describe changing the look of the application. We essentially have 6 themes from a historical sense but have tried change Terminology over time and currently refer to a theme as one of the UI versions (New vs Classic)\n- **Modes**: Formerly called Variant and lets you switch between dark, light and high contrast with in the version essentially constituting a new theme.\n- **Versions**: Formerly called Theme and lets you switch between the New look and the Classic look and maybe in the future more themes.\n- **New**: The new Formerly called Uplift and Vibrant\n- **Classic**: Formerly called Soho and Subtle\n\n## Features (With Code Examples)\n\nAdd an ids-theme-switcher to the page near the top and set the version and mode properties.\n\n```html\n<ids-theme-switcher mode=\"dark\"></ids-theme-switcher>\n```\n\n## Settings and Attributes\n\n- `mode` {string} Turns on the functionality to add an (x) button to clear remove the tag\n- `selfManaged` {boolean} If added no links will attempt to be fetch via the fetch api. The expectation is you will manage the style sheet themes manually.\n\n## Converting from Previous Versions\n\n- 3.x: This version did not have any themes\n- 4.x: You no longer change the style sheet out like in previous versions\n- 5.x: You no longer need to change the style sheet out like in previous versions because the css in encapsulated within each component now\n\n## Proposed Changes\n\n- Fix Accessibility issue (1.4.1 Use of Color) by adding an icon to the color tags.\n- Fix Accessibility issue (1.4.3 Contrast (Minimum)) by changing or not using some tags\n\n## Accessibility Guidelines\n\n- 1.4.1 Use of Color - Color is not used as the only visual means of conveying information, indicating an action, prompting a response, or distinguishing a visual element. The New Version of the theme has better color usage than the classic theme.\n- 1.4.3 Contrast (Minimum) - The visual presentation of text and images of text has a contrast ratio of at least 4.5:1.   The New Version of the theme has better contrast than the classic theme. Light and Dark mode pass WCAG AA and High Contrast passes WCAG AAA\n\n## Regional Considerations\n\nAs a point of interest colors can have certain meanings associated with them for countries and cultures. We found this [article on color meaning](https://www.shutterstock.com/blog/color-symbolism-and-meanings-around-the-world) interesting.\n"}},{"name":"ids-time-picker-common","description":{"kind":"markdown","value":"# Ids Time Picker Component\n\n## Description\n\nThe Timepicker Component provides a click/touch user interface for setting a time.\n\n## Use Cases\n\n- Entering an exact, unrestricted time (allowing any time to be entered, such as 11:39). In this use case, users should be allowed to either type the time values or select them.\n- Entering time intervals (e.g., allowing time entry only in specific set intervals, such as 15 or 30 minutes). In this case, you should either prevent users from manually entering the minute values or automatically correct manual entries to the nearest interval\n- Entering time values only within a specific range of time (such as only enter times within standard business hours). In this case, you should either prevent users from manually entering values or automatically correct manual entries to the nearest valid time\n\n## Terminology\n\n- **Timepicker**: A UI element for setting hours, minutes, seconds and periods (am/pm).\n- **Popup**: A window/modal that appears when the timepicker is clicked.\n- **Dropdowns**: Input elements for selecting hours, minutes, seconds and periods (am/pm).\n- **Period**: AM (before noon) and PM (after noon).\n- **Toggle**: Timepicker's popup will be opened if already closed, or closed if already opened.\n- **Disabled**: Timepicker can be disabled so it cannot be followed or clicked.\n- **Readonly**: Timepicker can be set to readonly so it cannot be edited.\n\n## Settings (Attributes)\n\n- `autoselect` {boolean} Automatically opens the popup on focus.\n- `autoupdate` {boolean} Automatically updates the time string value and hides the \"Set Time\" button.\n- `colorVariant` {string} set the current color variant.\n- `compact` {boolean} sets the component to be compact mode.\n- `dirty-tracker` {boolean} sets the dirty tracking feature on to indicate a changed field. See [Ids Dirty Tracker Mixin](../../mixins/ids-dirty-tracker-mixin/README.md) for more information.\n- `disabled` {boolean} Disables the timepicker\n- `fieldHeight` {string} defines the field height. See [Ids Field Height Mixin](../../mixins/ids-field-height-mixin/README.md) for more information.\n- `readonly` {boolean} Makes the timepicker readonly\n- `label` {string} Set the timepicker's label\n- `labelState` {string} indicates that a label is hidden (note that for accessibility reasons, `label` should still be specified). See [Ids Label State Mixin](../../mixins/ids-label-state-mixin/README.md) for more information.\n- `placeholder` {string} Set the timepicker's placeholder\n- `noMargins` {boolean} sets whether or not no-margins around the component.\n- `size` {'sm' | 'md' | 'lg' | 'full' | string} Sets the size of the input-field's width\n- `embeddable` {boolean} Set whether or not to show only hours/minutes/seconds dropdowns without input\n- `minute-interval` {number} Set minutes dropdown options interval. Default is 5\n- `second-interval` {number} Set seconds dropdown options interval. Default is 5\n- `hours` {number} Set initial value for hours dropdown in the popup or retrieve the dropdown value\n- `minutes` {number} Set initial value for minutes dropdown in the popup or retrieve the dropdown value\n- `seconds` {number} Set initial value for seconds dropdown in the popup or retrieve the dropdown value\n- `period` {number} Set initial value for period dropdown in the popup or retrieve the dropdown value\n- `validate` {'required'|'time'|string} - Input validation rules\n- `validation-events` {string} - Input validation events, `change blur` as default\n- `start-hour` {number} - Set the start of limit hours. Default is 0\n- `end-hour` {number} - Set the end of limit hours. Default is 24\n- `use-current-time` {true|false} - Set whether or not to show current time in the dropdowns\n\n## Events\n- Event listeners for input (trigger field) `blur`, `change`, `focus`, `select`, `keydown`, `keypress`, `keyup`, `click`, `dbclick`, `beforetriggerclicked`, `triggerclicked` events can be added to `input` component property:\n\n```js\nconst timePicker = document.querySelector('ids-time-picker');\n\ntimePicker.input.addEventListener('change');\n```\n- Event listeners for popup `show`, `hide` events can be added to `popup` property:\n```js\nconst timePicker = document.querySelector('ids-time-picker');\n\ntimePicker.popup.addEventListener('show');\ntimePicker.popup.addEventListener('hide');\n```\n\n## Methods\n\n- `open()` Open the timepicker's popup window\n- `close()` Close the timepicker's popup window\n\n## Themeable Parts\n\n- `container` allowing to style the container of the component\n- `trigger-button` allowing to style the trigger button\n- `icon` allowing to style the icon in the trigger button\n- `input` allowing to style the input element\n- `popup` allowing to style the popup with dropdowns\n- `btn-set` allowing to style the set button in the popup\n- `hours` allowing to style the hours dropdown\n- `minutes` allowing to style the minutes dropdown\n- `seconds` allowing to style the seconds dropdown\n- `period` allowing to style the period dropdown\n\n\n## Features (With Code Examples)\n\nA normal timepicker used as a web component.\n\n```html\n<ids-time-picker\n  label=\"12-Hour Time Picker w/ seconds and period (am/pm)\"\n  placeholder=\"Enter your start time\"\n  format=\"hh:mm:ss a\"\n></ids-time-picker>\n```\n\nA `disabled` timepicker and a `readonly` timepicker.\n\n```html\n<ids-time-picker label=\"Disabled Time Picker\" value=\"10:30 AM\" disabled></ids-time-picker>\n\n<ids-time-picker label=\"Readonly Time Picker\" value=\"10:30 AM\" readonly></ids-time-picker>\n```\n\nAn `autoselect` timepicker and an `autoupdate` timepicker.\n\n```html\n<ids-time-picker label=\"Autoselect Time Picker\" value=\"10:30 AM\" autoselect></ids-time-picker>\n\n<ids-time-picker label=\"Autoupdate Time Picker\" value=\"10:30 AM\" autoupdate></ids-time-picker>\n```\n\nIt's also possible to configure the timepicker with a custom time format. This allows the timepicker to be configured in 24-hour/Miliary time and/or with a seconds picker for more accurate time.\n\n```html\n<ids-time-picker\n  label=\"12-Hour Time Picker (w/ seconds)\"\n  format=\"hh:mm:ss\"\n></ids-time-picker>\n\n<ids-time-picker\n  label=\"24-Hour Time Picker\"\n  format=\"HH:mm\"\n></ids-time-picker>\n```\n\nIt's also possible to control the intervals of minutes and seconds available for picking.\n\n```html\n<ids-time-picker\n  label=\"5-minute intervals\"\n  format=\"hh:mm\"\n  minute-interval=\"5\"\n></ids-time-picker>\n\n<ids-time-picker\n  label=\"10-second intervals\"\n  format=\"hh:mm:ss\"\n  second-interval=\"10\"\n></ids-time-picker>\n```\n\n## Class Hierarchy\n\n- IdsTimePicker\n    - IdsElement\n- Mixins\n    - IdsEventsMixin\n    - IdsKeyboardMixin\n    - IdsPopupOpenEventsMixin\n    - IdsLocaleMixin\n\n## Keyboard Guidelines\n\n- <kbd>Enter</kbd>: Toggles the popup window, if the timepicker is not disabled or readonly.\n- <kbd>Escape</kbd> or <kbd>Backspace</kbd>: Close the popup window, if the timepicker is not disabled or readonly.\n\n## Responsive Guidelines (TODO)\n\n- Flows with padding and margin within the width and height of the parent container. Possibly scrolling as needed based on parent dimensions.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Timepicker was implemented in v4.0.0\n- Timepicker can be invoked with `$('#my-element').timepicker()`.\n\n**4.x to 5.x**\n- Listeners for input and popup events should be added to references `input` and `popup` now. See Events section.\n- `disable/readonly/tabbable` are now attributes not methods\n- Timepicker are now custom element `<ids-time-picker></ids-time-picker>`\n- If using events, events are now plain JS events\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs WC](https://www.figma.com/file/ri2Knf3KchdfdzRAeds0Ab/IDS-Mobility-v4.6?node-id=1%3A5740)\n\n## Accessibility Guidelines\n\n- The Time Picker needs to support both manual time entry (hours, minutes, and, on rare occasions, seconds) as well as some method of selecting from valid entries. Depending on the use case, users may be able to manually enter a time or only select from a restricted set of values.\n\n## Regional Considerations (TODO)\n\nLabels should be localized in the current language. The close and link icons will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-time-picker-popup","attributes":[{"name":"isRendering","values":[]},{"name":"autoupdate","description":"Gets the autoupdate attribute","values":[]},{"name":"applyButtonEl","values":[]},{"name":"buttons","values":[]},{"name":"dropdownContainerEl","values":[]},{"name":"embeddable","description":"embeddable attribute","values":[]},{"name":"hours","description":"hours attribute, default is 1","values":[]},{"name":"minutes","description":"minutes attribute, default is 0","values":[]},{"name":"minuteInterval","description":"minute-interval attribute, default is 5","values":[]},{"name":"seconds","description":"seconds attribute, default is 0","values":[]},{"name":"secondInterval","description":"second-interval attribute, default is 5","values":[]},{"name":"period","description":"period attribute, default is first day period in locale calendar","values":[]},{"name":"startHour","description":"start-hour attribute, default is 0","values":[]},{"name":"endHour","description":"end-hour attribute, default is 24","values":[]},{"name":"useCurrentTime","description":"use-current-time attribute","values":[]},{"name":"#value","description":"Stored timestring-value of the timepickers input-field","values":[]},{"name":"value","description":"Gets a timestring that matches the format specified by this.format()","values":[]}],"description":{"kind":"markdown","value":"# Ids Time Picker Component\n\n## Description\n\nThe Timepicker Component provides a click/touch user interface for setting a time.\n\n## Use Cases\n\n- Entering an exact, unrestricted time (allowing any time to be entered, such as 11:39). In this use case, users should be allowed to either type the time values or select them.\n- Entering time intervals (e.g., allowing time entry only in specific set intervals, such as 15 or 30 minutes). In this case, you should either prevent users from manually entering the minute values or automatically correct manual entries to the nearest interval\n- Entering time values only within a specific range of time (such as only enter times within standard business hours). In this case, you should either prevent users from manually entering values or automatically correct manual entries to the nearest valid time\n\n## Terminology\n\n- **Timepicker**: A UI element for setting hours, minutes, seconds and periods (am/pm).\n- **Popup**: A window/modal that appears when the timepicker is clicked.\n- **Dropdowns**: Input elements for selecting hours, minutes, seconds and periods (am/pm).\n- **Period**: AM (before noon) and PM (after noon).\n- **Toggle**: Timepicker's popup will be opened if already closed, or closed if already opened.\n- **Disabled**: Timepicker can be disabled so it cannot be followed or clicked.\n- **Readonly**: Timepicker can be set to readonly so it cannot be edited.\n\n## Settings (Attributes)\n\n- `autoselect` {boolean} Automatically opens the popup on focus.\n- `autoupdate` {boolean} Automatically updates the time string value and hides the \"Set Time\" button.\n- `colorVariant` {string} set the current color variant.\n- `compact` {boolean} sets the component to be compact mode.\n- `dirty-tracker` {boolean} sets the dirty tracking feature on to indicate a changed field. See [Ids Dirty Tracker Mixin](../../mixins/ids-dirty-tracker-mixin/README.md) for more information.\n- `disabled` {boolean} Disables the timepicker\n- `fieldHeight` {string} defines the field height. See [Ids Field Height Mixin](../../mixins/ids-field-height-mixin/README.md) for more information.\n- `readonly` {boolean} Makes the timepicker readonly\n- `label` {string} Set the timepicker's label\n- `labelState` {string} indicates that a label is hidden (note that for accessibility reasons, `label` should still be specified). See [Ids Label State Mixin](../../mixins/ids-label-state-mixin/README.md) for more information.\n- `placeholder` {string} Set the timepicker's placeholder\n- `noMargins` {boolean} sets whether or not no-margins around the component.\n- `size` {'sm' | 'md' | 'lg' | 'full' | string} Sets the size of the input-field's width\n- `embeddable` {boolean} Set whether or not to show only hours/minutes/seconds dropdowns without input\n- `minute-interval` {number} Set minutes dropdown options interval. Default is 5\n- `second-interval` {number} Set seconds dropdown options interval. Default is 5\n- `hours` {number} Set initial value for hours dropdown in the popup or retrieve the dropdown value\n- `minutes` {number} Set initial value for minutes dropdown in the popup or retrieve the dropdown value\n- `seconds` {number} Set initial value for seconds dropdown in the popup or retrieve the dropdown value\n- `period` {number} Set initial value for period dropdown in the popup or retrieve the dropdown value\n- `validate` {'required'|'time'|string} - Input validation rules\n- `validation-events` {string} - Input validation events, `change blur` as default\n- `start-hour` {number} - Set the start of limit hours. Default is 0\n- `end-hour` {number} - Set the end of limit hours. Default is 24\n- `use-current-time` {true|false} - Set whether or not to show current time in the dropdowns\n\n## Events\n- Event listeners for input (trigger field) `blur`, `change`, `focus`, `select`, `keydown`, `keypress`, `keyup`, `click`, `dbclick`, `beforetriggerclicked`, `triggerclicked` events can be added to `input` component property:\n\n```js\nconst timePicker = document.querySelector('ids-time-picker');\n\ntimePicker.input.addEventListener('change');\n```\n- Event listeners for popup `show`, `hide` events can be added to `popup` property:\n```js\nconst timePicker = document.querySelector('ids-time-picker');\n\ntimePicker.popup.addEventListener('show');\ntimePicker.popup.addEventListener('hide');\n```\n\n## Methods\n\n- `open()` Open the timepicker's popup window\n- `close()` Close the timepicker's popup window\n\n## Themeable Parts\n\n- `container` allowing to style the container of the component\n- `trigger-button` allowing to style the trigger button\n- `icon` allowing to style the icon in the trigger button\n- `input` allowing to style the input element\n- `popup` allowing to style the popup with dropdowns\n- `btn-set` allowing to style the set button in the popup\n- `hours` allowing to style the hours dropdown\n- `minutes` allowing to style the minutes dropdown\n- `seconds` allowing to style the seconds dropdown\n- `period` allowing to style the period dropdown\n\n\n## Features (With Code Examples)\n\nA normal timepicker used as a web component.\n\n```html\n<ids-time-picker\n  label=\"12-Hour Time Picker w/ seconds and period (am/pm)\"\n  placeholder=\"Enter your start time\"\n  format=\"hh:mm:ss a\"\n></ids-time-picker>\n```\n\nA `disabled` timepicker and a `readonly` timepicker.\n\n```html\n<ids-time-picker label=\"Disabled Time Picker\" value=\"10:30 AM\" disabled></ids-time-picker>\n\n<ids-time-picker label=\"Readonly Time Picker\" value=\"10:30 AM\" readonly></ids-time-picker>\n```\n\nAn `autoselect` timepicker and an `autoupdate` timepicker.\n\n```html\n<ids-time-picker label=\"Autoselect Time Picker\" value=\"10:30 AM\" autoselect></ids-time-picker>\n\n<ids-time-picker label=\"Autoupdate Time Picker\" value=\"10:30 AM\" autoupdate></ids-time-picker>\n```\n\nIt's also possible to configure the timepicker with a custom time format. This allows the timepicker to be configured in 24-hour/Miliary time and/or with a seconds picker for more accurate time.\n\n```html\n<ids-time-picker\n  label=\"12-Hour Time Picker (w/ seconds)\"\n  format=\"hh:mm:ss\"\n></ids-time-picker>\n\n<ids-time-picker\n  label=\"24-Hour Time Picker\"\n  format=\"HH:mm\"\n></ids-time-picker>\n```\n\nIt's also possible to control the intervals of minutes and seconds available for picking.\n\n```html\n<ids-time-picker\n  label=\"5-minute intervals\"\n  format=\"hh:mm\"\n  minute-interval=\"5\"\n></ids-time-picker>\n\n<ids-time-picker\n  label=\"10-second intervals\"\n  format=\"hh:mm:ss\"\n  second-interval=\"10\"\n></ids-time-picker>\n```\n\n## Class Hierarchy\n\n- IdsTimePicker\n    - IdsElement\n- Mixins\n    - IdsEventsMixin\n    - IdsKeyboardMixin\n    - IdsPopupOpenEventsMixin\n    - IdsLocaleMixin\n\n## Keyboard Guidelines\n\n- <kbd>Enter</kbd>: Toggles the popup window, if the timepicker is not disabled or readonly.\n- <kbd>Escape</kbd> or <kbd>Backspace</kbd>: Close the popup window, if the timepicker is not disabled or readonly.\n\n## Responsive Guidelines (TODO)\n\n- Flows with padding and margin within the width and height of the parent container. Possibly scrolling as needed based on parent dimensions.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Timepicker was implemented in v4.0.0\n- Timepicker can be invoked with `$('#my-element').timepicker()`.\n\n**4.x to 5.x**\n- Listeners for input and popup events should be added to references `input` and `popup` now. See Events section.\n- `disable/readonly/tabbable` are now attributes not methods\n- Timepicker are now custom element `<ids-time-picker></ids-time-picker>`\n- If using events, events are now plain JS events\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs WC](https://www.figma.com/file/ri2Knf3KchdfdzRAeds0Ab/IDS-Mobility-v4.6?node-id=1%3A5740)\n\n## Accessibility Guidelines\n\n- The Time Picker needs to support both manual time entry (hours, minutes, and, on rare occasions, seconds) as well as some method of selecting from valid entries. Depending on the use case, users may be able to manually enter a time or only select from a restricted set of values.\n\n## Regional Considerations (TODO)\n\nLabels should be localized in the current language. The close and link icons will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-time-picker","attributes":[{"name":"isFormComponent","values":[]},{"name":"triggerButton","values":[]},{"name":"picker","values":[]},{"name":"colorVariants","description":"List of available color variants for this component","values":[]},{"name":"onLocaleChange","description":"Respond to changing locale","values":[]},{"name":"onLanguageChange","description":"Respond to changing language","values":[]},{"name":"popup","values":[]},{"name":"input","values":[]},{"name":"format","description":"Gets the time format to use in the picker. Defaults to the current locale's time format or english (\"hh:mm a\")","values":[]},{"name":"value","description":"Gets a timestring that matches the format specified by this.format()","values":[]},{"name":"autoselect","description":"Gets the autoselect attribute","values":[]},{"name":"autoupdate","description":"Gets the autoupdate attribute","values":[]},{"name":"disabled","description":"Gets the disabled attribute","values":[]},{"name":"readonly","description":"Gets the readonly attribute","values":[]},{"name":"placeholder","description":"Get the placeholder attribute","values":[]},{"name":"noMargins","description":"no-margins attribute","values":[]},{"name":"size","description":"Get the size attribute","values":[]},{"name":"minuteInterval","description":"minute-interval attribute, default is 5","values":[]},{"name":"secondInterval","description":"second-interval attribute, default is 5","values":[]},{"name":"embeddable","description":"embeddable attribute","values":[]},{"name":"hours","description":"hours attribute, default is 1","values":[]},{"name":"hours24","description":"Gets hours in 24 hour format","values":[]},{"name":"minutes","description":"minutes attribute, default is 0","values":[]},{"name":"seconds","description":"seconds attribute, default is 0","values":[]},{"name":"period","description":"period attribute, default is first day period in locale calendar","values":[]},{"name":"validate","description":"validate attribute","values":[]},{"name":"validationEvents","description":"validation-events attributes","values":[]},{"name":"tabbable","description":"tabbable attribute","values":[]},{"name":"startHour","description":"start-hour attribute, default is 0","values":[]},{"name":"endHour","description":"end-hour attribute, default is 24","values":[]},{"name":"useCurrentTime","description":"use-current-time attribute","values":[]},{"name":"mask","description":"mask attribute","values":[]}],"description":{"kind":"markdown","value":"# Ids Time Picker Component\n\n## Description\n\nThe Timepicker Component provides a click/touch user interface for setting a time.\n\n## Use Cases\n\n- Entering an exact, unrestricted time (allowing any time to be entered, such as 11:39). In this use case, users should be allowed to either type the time values or select them.\n- Entering time intervals (e.g., allowing time entry only in specific set intervals, such as 15 or 30 minutes). In this case, you should either prevent users from manually entering the minute values or automatically correct manual entries to the nearest interval\n- Entering time values only within a specific range of time (such as only enter times within standard business hours). In this case, you should either prevent users from manually entering values or automatically correct manual entries to the nearest valid time\n\n## Terminology\n\n- **Timepicker**: A UI element for setting hours, minutes, seconds and periods (am/pm).\n- **Popup**: A window/modal that appears when the timepicker is clicked.\n- **Dropdowns**: Input elements for selecting hours, minutes, seconds and periods (am/pm).\n- **Period**: AM (before noon) and PM (after noon).\n- **Toggle**: Timepicker's popup will be opened if already closed, or closed if already opened.\n- **Disabled**: Timepicker can be disabled so it cannot be followed or clicked.\n- **Readonly**: Timepicker can be set to readonly so it cannot be edited.\n\n## Settings (Attributes)\n\n- `autoselect` {boolean} Automatically opens the popup on focus.\n- `autoupdate` {boolean} Automatically updates the time string value and hides the \"Set Time\" button.\n- `colorVariant` {string} set the current color variant.\n- `compact` {boolean} sets the component to be compact mode.\n- `dirty-tracker` {boolean} sets the dirty tracking feature on to indicate a changed field. See [Ids Dirty Tracker Mixin](../../mixins/ids-dirty-tracker-mixin/README.md) for more information.\n- `disabled` {boolean} Disables the timepicker\n- `fieldHeight` {string} defines the field height. See [Ids Field Height Mixin](../../mixins/ids-field-height-mixin/README.md) for more information.\n- `readonly` {boolean} Makes the timepicker readonly\n- `label` {string} Set the timepicker's label\n- `labelState` {string} indicates that a label is hidden (note that for accessibility reasons, `label` should still be specified). See [Ids Label State Mixin](../../mixins/ids-label-state-mixin/README.md) for more information.\n- `placeholder` {string} Set the timepicker's placeholder\n- `noMargins` {boolean} sets whether or not no-margins around the component.\n- `size` {'sm' | 'md' | 'lg' | 'full' | string} Sets the size of the input-field's width\n- `embeddable` {boolean} Set whether or not to show only hours/minutes/seconds dropdowns without input\n- `minute-interval` {number} Set minutes dropdown options interval. Default is 5\n- `second-interval` {number} Set seconds dropdown options interval. Default is 5\n- `hours` {number} Set initial value for hours dropdown in the popup or retrieve the dropdown value\n- `minutes` {number} Set initial value for minutes dropdown in the popup or retrieve the dropdown value\n- `seconds` {number} Set initial value for seconds dropdown in the popup or retrieve the dropdown value\n- `period` {number} Set initial value for period dropdown in the popup or retrieve the dropdown value\n- `validate` {'required'|'time'|string} - Input validation rules\n- `validation-events` {string} - Input validation events, `change blur` as default\n- `start-hour` {number} - Set the start of limit hours. Default is 0\n- `end-hour` {number} - Set the end of limit hours. Default is 24\n- `use-current-time` {true|false} - Set whether or not to show current time in the dropdowns\n\n## Events\n- Event listeners for input (trigger field) `blur`, `change`, `focus`, `select`, `keydown`, `keypress`, `keyup`, `click`, `dbclick`, `beforetriggerclicked`, `triggerclicked` events can be added to `input` component property:\n\n```js\nconst timePicker = document.querySelector('ids-time-picker');\n\ntimePicker.input.addEventListener('change');\n```\n- Event listeners for popup `show`, `hide` events can be added to `popup` property:\n```js\nconst timePicker = document.querySelector('ids-time-picker');\n\ntimePicker.popup.addEventListener('show');\ntimePicker.popup.addEventListener('hide');\n```\n\n## Methods\n\n- `open()` Open the timepicker's popup window\n- `close()` Close the timepicker's popup window\n\n## Themeable Parts\n\n- `container` allowing to style the container of the component\n- `trigger-button` allowing to style the trigger button\n- `icon` allowing to style the icon in the trigger button\n- `input` allowing to style the input element\n- `popup` allowing to style the popup with dropdowns\n- `btn-set` allowing to style the set button in the popup\n- `hours` allowing to style the hours dropdown\n- `minutes` allowing to style the minutes dropdown\n- `seconds` allowing to style the seconds dropdown\n- `period` allowing to style the period dropdown\n\n\n## Features (With Code Examples)\n\nA normal timepicker used as a web component.\n\n```html\n<ids-time-picker\n  label=\"12-Hour Time Picker w/ seconds and period (am/pm)\"\n  placeholder=\"Enter your start time\"\n  format=\"hh:mm:ss a\"\n></ids-time-picker>\n```\n\nA `disabled` timepicker and a `readonly` timepicker.\n\n```html\n<ids-time-picker label=\"Disabled Time Picker\" value=\"10:30 AM\" disabled></ids-time-picker>\n\n<ids-time-picker label=\"Readonly Time Picker\" value=\"10:30 AM\" readonly></ids-time-picker>\n```\n\nAn `autoselect` timepicker and an `autoupdate` timepicker.\n\n```html\n<ids-time-picker label=\"Autoselect Time Picker\" value=\"10:30 AM\" autoselect></ids-time-picker>\n\n<ids-time-picker label=\"Autoupdate Time Picker\" value=\"10:30 AM\" autoupdate></ids-time-picker>\n```\n\nIt's also possible to configure the timepicker with a custom time format. This allows the timepicker to be configured in 24-hour/Miliary time and/or with a seconds picker for more accurate time.\n\n```html\n<ids-time-picker\n  label=\"12-Hour Time Picker (w/ seconds)\"\n  format=\"hh:mm:ss\"\n></ids-time-picker>\n\n<ids-time-picker\n  label=\"24-Hour Time Picker\"\n  format=\"HH:mm\"\n></ids-time-picker>\n```\n\nIt's also possible to control the intervals of minutes and seconds available for picking.\n\n```html\n<ids-time-picker\n  label=\"5-minute intervals\"\n  format=\"hh:mm\"\n  minute-interval=\"5\"\n></ids-time-picker>\n\n<ids-time-picker\n  label=\"10-second intervals\"\n  format=\"hh:mm:ss\"\n  second-interval=\"10\"\n></ids-time-picker>\n```\n\n## Class Hierarchy\n\n- IdsTimePicker\n    - IdsElement\n- Mixins\n    - IdsEventsMixin\n    - IdsKeyboardMixin\n    - IdsPopupOpenEventsMixin\n    - IdsLocaleMixin\n\n## Keyboard Guidelines\n\n- <kbd>Enter</kbd>: Toggles the popup window, if the timepicker is not disabled or readonly.\n- <kbd>Escape</kbd> or <kbd>Backspace</kbd>: Close the popup window, if the timepicker is not disabled or readonly.\n\n## Responsive Guidelines (TODO)\n\n- Flows with padding and margin within the width and height of the parent container. Possibly scrolling as needed based on parent dimensions.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Timepicker was implemented in v4.0.0\n- Timepicker can be invoked with `$('#my-element').timepicker()`.\n\n**4.x to 5.x**\n- Listeners for input and popup events should be added to references `input` and `popup` now. See Events section.\n- `disable/readonly/tabbable` are now attributes not methods\n- Timepicker are now custom element `<ids-time-picker></ids-time-picker>`\n- If using events, events are now plain JS events\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs WC](https://www.figma.com/file/ri2Knf3KchdfdzRAeds0Ab/IDS-Mobility-v4.6?node-id=1%3A5740)\n\n## Accessibility Guidelines\n\n- The Time Picker needs to support both manual time entry (hours, minutes, and, on rare occasions, seconds) as well as some method of selecting from valid entries. Depending on the use case, users may be able to manually enter a time or only select from a restricted set of values.\n\n## Regional Considerations (TODO)\n\nLabels should be localized in the current language. The close and link icons will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-toast-message","attributes":[{"name":"progressBarEl","values":[]},{"name":"audible","description":"Set as invisible on the screen, but still read out lout by screen readers.","values":[]},{"name":"progressBar","description":"Set toast to have a visible progress bar.","values":[]},{"name":"timeout","description":"Set the amount of time, the toast should be present on-screen.","values":[]},{"name":"messageId","description":"Set toast-id to manage each toast.","values":[]}],"description":{"kind":"markdown","value":"# Ids Toast Component\n\n## Description\n\nToasts are used to display confirmations of success, failure, or other statuses of system processes related to a user’s workflow. If a user submits a form, a toast will confirm the successful or unsuccessful completion of that submission. Toasts are dismissible via the “close” icon or the escape key. If not dismissed, the toast will hide after a configurable amount of time. The Toast will close itself after a timeout (default 6s) or if the close button is clicked. It is also possible to have more than one toast onscreen at a time.\n\n## Use Cases\n\n- Toast component use to give feedback to users after an action has taken place.\n- Use a toast component to display notifications and other non-critical messages.\n\n## Terminology\n\n**Title:** An html text element that display as toast message title.\n**Message:** An html text element that display as toast message body.\n**Close Button:** A trigger button to close the toast message.\n**Progress Bar:** An html element that display as progress bar.\n\n## Features (With Code Examples)\n\nA normal toast used as a web component.\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Toast Message</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.'\n  });\n});\n```\n\nSet position of the toast container in specific place\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Position</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    // 'bottom-end', 'bottom-start', 'top-end', 'top-start' (default: 'top-end')\n    toast.position = 'bottom-start';\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.'\n  });\n});\n```\n\nSet user to allows drag/drop the toast container\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Draggable</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    toast.draggable = true;\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.'\n  });\n});\n```\n\nSave toast container position to local storage, apply only when draggable set to true\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Save position</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  // uniqueId: Use when need to clear saved position from storage\n  // if not will use internal auto generated\n  const uniqueId = 'some-uniqueid';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    toast.draggable = true;\n    toast.uniqueId = uniqueId;\n    toast.savePosition = true;\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.'\n  });\n});\n```\n\nClear the saved position from local storage\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Clear saved position</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  // uniqueId: used with toast while saved position toast\n  const uniqueId = 'some-uniqueid';\n  const toast = document.createElement('ids-toast');\n  toast.clearPosition(uniqueId);\n});\n```\n\nClear all toast related saved position from local storage\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Clear (all) saved positions</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toast = document.createElement('ids-toast');\n  toast.clearPositionAll();\n});\n```\n\nSet to not destroy after complete all the toast messages\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>No destroy after complete</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    toast.destroyOnComplete = false;\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.'\n  });\n});\n```\n\nSet to put links in the toast message\n\n```html\nids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Allow link</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'Link in message: <ids-hyperlink href=\"http://www.example.com\" target=\"_blank\">Google</ids-hyperlink>',\n    allowLink: true\n  });\n});\n```\n\nSet the amount of time (2 seconds), the toast should be present on-screen\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Timeout (2 seconds)</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.',\n    timeout: 2000\n  });\n});\n```\n\nCustom text that use for close button label in the toast message\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Close button custom label text</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.',\n    closeButtonLabel: 'Click here to close'\n  });\n});\n```\n\nHide the progress bar in toast message\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Progress bar (hidden)</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.',\n    progressBar: false\n  });\n});\n```\n\nLet toast message to be invisible on the screen\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Audible only</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.',\n    audible: true\n  });\n});\n```\n\nToast message by markup\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Toast message by markup</span>\n</ids-button>\n<ids-toast id=\"toast-markup\" destroy-on-complete=\"false\">\n  <span slot=\"title\">Application Offline</span>\n  <span slot=\"message\">This is a Toast message.</span>\n</ids-toast>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\nconst toast = document.querySelector('#demo-toast');\n\nbtnToast?.addEventListener('click', () => {\n  toast.show();\n});\n```\n\n## Settings and Attributes (Toast)\n\n- `allowLink` {boolean} Set to put links in the toast message\n- `audible` {boolean} Set as invisible on the screen, but still read out loud by screen readers\n- `destroyOnComplete` {boolean} Set to destroy after complete all the toast messages\n- `draggable` {boolean} Set user to allows drag/drop the toast container\n- `position` {string} Set position of the toast container in specific place\n- `progressBar` {boolean} Set toast to have a visible progress bar\n- `savePosition` {boolean} Set toast container to save position to local storage, apply only when draggable set to true\n- `timeout` {number} Set the amount of time, the toast should be present on-screen\n- `uniqueId` {number} Set uniqueId to save to local storage, so same saved position can be use for whole app, apply only when draggable set to true\n\n## Settings and Attributes (Toast Message)\n\n- `audible` {boolean} Set as invisible on the screen, but still read out loud by screen readers\n- `progressBar` {boolean} Set toast to have a visible progress bar\n- `timeout` {number} Set the amount of time, the toast should be present on-screen\n- `messageId` {string} Set id to manage each toast message\n\n## Theme-able Parts (Toast Message)\n\n- `toast` allows you to further style the toast element\n- `title` allows you to further style the toast title element\n- `message` allows you to further style the toast message element\n- `progress-bar` allows you to further style the toast progress bar element\n- `close-button` allows you to further style the toast close button element\n- `close-button-icon` allows you to further style the toast close button icon element\n\n## Events (Toast)\n\n- `add-message` Fires while the toast message is added to container\n- `remove-message` Fires while the toast message is removed from container\n- `save-position` Fires after the local storage settings changed in some way\n- `clear-position` Fires after clear the saved position from local storage\n- `remove-container` Fires after removed the toast message container\n\n## Events (Toast Message)\n\n- `remove-message` Fires while the toast message is removed from container\n\n## Methods (Toast)\n\n- `clearPosition(uniqueId: string|undefined)` Clear the saved position from local storage, If uniqueId is undefined will use Internal attached\n- `clearPositionAll()` Clear all toast related saved position from local storage\n- `messageElem(messageId: string)` Get message element by given message id\n- `show(options: IdsToastShowSettings)` Set to show the toast message\n- `toastContainer()` Get the toast container\n\n## Methods (Toast Message)\n\n- `removeToastMessage()` Remove the toast message from container\n\n## States and Variations (With Code Examples)\n\n- Audible\n- Auto Closeable\n- Closeable\n- Contains Link\n- Draggable\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>: If the tab is focusable this will focus or unfocus the toast.\n- <kbd>Control+Alt+P</kbd>: It will toggle pause and play timeout timer.\n- <kbd>Escape</kbd>: It will close the toast message.\n\n## Responsive Guidelines\n\n- Toasts can be configured to appear at either the top-start, top-end, bottom-start or bottom-end of an application window.\n- Will be placed in the top-end corner by default.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Toasts were implemented in v4.0.0\n- Toasts can be invoked with `$('#my-element').toast()`.\n\n**4.x to 5.x**\n\n- Toasts are now custom elements `<ids-toast></ids-toast>`\n- If using events, events are now plain JS events\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/ok0LLOT9PP1J0kBkPMaZ5c/IDS_Component_File_v4.6-(Draft))\n\n## Accessibility Guidelines\n\n## Regional Considerations\n\nLabels should be localized in the current language. The close icon and progress bar will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-toast-shared","description":{"kind":"markdown","value":"# Ids Toast Component\n\n## Description\n\nToasts are used to display confirmations of success, failure, or other statuses of system processes related to a user’s workflow. If a user submits a form, a toast will confirm the successful or unsuccessful completion of that submission. Toasts are dismissible via the “close” icon or the escape key. If not dismissed, the toast will hide after a configurable amount of time. The Toast will close itself after a timeout (default 6s) or if the close button is clicked. It is also possible to have more than one toast onscreen at a time.\n\n## Use Cases\n\n- Toast component use to give feedback to users after an action has taken place.\n- Use a toast component to display notifications and other non-critical messages.\n\n## Terminology\n\n**Title:** An html text element that display as toast message title.\n**Message:** An html text element that display as toast message body.\n**Close Button:** A trigger button to close the toast message.\n**Progress Bar:** An html element that display as progress bar.\n\n## Features (With Code Examples)\n\nA normal toast used as a web component.\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Toast Message</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.'\n  });\n});\n```\n\nSet position of the toast container in specific place\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Position</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    // 'bottom-end', 'bottom-start', 'top-end', 'top-start' (default: 'top-end')\n    toast.position = 'bottom-start';\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.'\n  });\n});\n```\n\nSet user to allows drag/drop the toast container\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Draggable</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    toast.draggable = true;\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.'\n  });\n});\n```\n\nSave toast container position to local storage, apply only when draggable set to true\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Save position</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  // uniqueId: Use when need to clear saved position from storage\n  // if not will use internal auto generated\n  const uniqueId = 'some-uniqueid';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    toast.draggable = true;\n    toast.uniqueId = uniqueId;\n    toast.savePosition = true;\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.'\n  });\n});\n```\n\nClear the saved position from local storage\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Clear saved position</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  // uniqueId: used with toast while saved position toast\n  const uniqueId = 'some-uniqueid';\n  const toast = document.createElement('ids-toast');\n  toast.clearPosition(uniqueId);\n});\n```\n\nClear all toast related saved position from local storage\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Clear (all) saved positions</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toast = document.createElement('ids-toast');\n  toast.clearPositionAll();\n});\n```\n\nSet to not destroy after complete all the toast messages\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>No destroy after complete</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    toast.destroyOnComplete = false;\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.'\n  });\n});\n```\n\nSet to put links in the toast message\n\n```html\nids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Allow link</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'Link in message: <ids-hyperlink href=\"http://www.example.com\" target=\"_blank\">Google</ids-hyperlink>',\n    allowLink: true\n  });\n});\n```\n\nSet the amount of time (2 seconds), the toast should be present on-screen\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Timeout (2 seconds)</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.',\n    timeout: 2000\n  });\n});\n```\n\nCustom text that use for close button label in the toast message\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Close button custom label text</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.',\n    closeButtonLabel: 'Click here to close'\n  });\n});\n```\n\nHide the progress bar in toast message\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Progress bar (hidden)</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.',\n    progressBar: false\n  });\n});\n```\n\nLet toast message to be invisible on the screen\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Audible only</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.',\n    audible: true\n  });\n});\n```\n\nToast message by markup\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Toast message by markup</span>\n</ids-button>\n<ids-toast id=\"toast-markup\" destroy-on-complete=\"false\">\n  <span slot=\"title\">Application Offline</span>\n  <span slot=\"message\">This is a Toast message.</span>\n</ids-toast>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\nconst toast = document.querySelector('#demo-toast');\n\nbtnToast?.addEventListener('click', () => {\n  toast.show();\n});\n```\n\n## Settings and Attributes (Toast)\n\n- `allowLink` {boolean} Set to put links in the toast message\n- `audible` {boolean} Set as invisible on the screen, but still read out loud by screen readers\n- `destroyOnComplete` {boolean} Set to destroy after complete all the toast messages\n- `draggable` {boolean} Set user to allows drag/drop the toast container\n- `position` {string} Set position of the toast container in specific place\n- `progressBar` {boolean} Set toast to have a visible progress bar\n- `savePosition` {boolean} Set toast container to save position to local storage, apply only when draggable set to true\n- `timeout` {number} Set the amount of time, the toast should be present on-screen\n- `uniqueId` {number} Set uniqueId to save to local storage, so same saved position can be use for whole app, apply only when draggable set to true\n\n## Settings and Attributes (Toast Message)\n\n- `audible` {boolean} Set as invisible on the screen, but still read out loud by screen readers\n- `progressBar` {boolean} Set toast to have a visible progress bar\n- `timeout` {number} Set the amount of time, the toast should be present on-screen\n- `messageId` {string} Set id to manage each toast message\n\n## Theme-able Parts (Toast Message)\n\n- `toast` allows you to further style the toast element\n- `title` allows you to further style the toast title element\n- `message` allows you to further style the toast message element\n- `progress-bar` allows you to further style the toast progress bar element\n- `close-button` allows you to further style the toast close button element\n- `close-button-icon` allows you to further style the toast close button icon element\n\n## Events (Toast)\n\n- `add-message` Fires while the toast message is added to container\n- `remove-message` Fires while the toast message is removed from container\n- `save-position` Fires after the local storage settings changed in some way\n- `clear-position` Fires after clear the saved position from local storage\n- `remove-container` Fires after removed the toast message container\n\n## Events (Toast Message)\n\n- `remove-message` Fires while the toast message is removed from container\n\n## Methods (Toast)\n\n- `clearPosition(uniqueId: string|undefined)` Clear the saved position from local storage, If uniqueId is undefined will use Internal attached\n- `clearPositionAll()` Clear all toast related saved position from local storage\n- `messageElem(messageId: string)` Get message element by given message id\n- `show(options: IdsToastShowSettings)` Set to show the toast message\n- `toastContainer()` Get the toast container\n\n## Methods (Toast Message)\n\n- `removeToastMessage()` Remove the toast message from container\n\n## States and Variations (With Code Examples)\n\n- Audible\n- Auto Closeable\n- Closeable\n- Contains Link\n- Draggable\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>: If the tab is focusable this will focus or unfocus the toast.\n- <kbd>Control+Alt+P</kbd>: It will toggle pause and play timeout timer.\n- <kbd>Escape</kbd>: It will close the toast message.\n\n## Responsive Guidelines\n\n- Toasts can be configured to appear at either the top-start, top-end, bottom-start or bottom-end of an application window.\n- Will be placed in the top-end corner by default.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Toasts were implemented in v4.0.0\n- Toasts can be invoked with `$('#my-element').toast()`.\n\n**4.x to 5.x**\n\n- Toasts are now custom elements `<ids-toast></ids-toast>`\n- If using events, events are now plain JS events\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/ok0LLOT9PP1J0kBkPMaZ5c/IDS_Component_File_v4.6-(Draft))\n\n## Accessibility Guidelines\n\n## Regional Considerations\n\nLabels should be localized in the current language. The close icon and progress bar will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-toast","attributes":[{"name":"ls","values":[]},{"name":"#toastsMap","description":"Map of toast massages added in container, to keep track each toast.","values":[]},{"name":"#toastsCounter","description":"Toatl number of toast massages added in container.","values":[]},{"name":"allowLink","description":"Set to put links in the toast message.","values":[]},{"name":"audible","description":"Set as invisible on the screen, but still read out loud by screen readers.","values":[]},{"name":"destroyOnComplete","description":"Set to destroy after complete all the toasts.\nwill remove from DOM host element.","values":[]},{"name":"draggable","description":"Set user to allows drag/drop the toast container.","values":[]},{"name":"position","description":"Set position of the toast container in specific place.\nOptions: 'bottom-end', 'bottom-start', 'top-end', 'top-start'","values":[]},{"name":"progressBar","description":"Set toast to have a visible progress bar.","values":[]},{"name":"savePosition","description":"Set toast container to save position to local storage.","values":[]},{"name":"timeout","description":"Set the amount of time, the toast should be present on-screen.","values":[]},{"name":"uniqueId","description":"Set uniqueId to save to local storage, so same saved position can be use for whole app.","values":[]}],"description":{"kind":"markdown","value":"# Ids Toast Component\n\n## Description\n\nToasts are used to display confirmations of success, failure, or other statuses of system processes related to a user’s workflow. If a user submits a form, a toast will confirm the successful or unsuccessful completion of that submission. Toasts are dismissible via the “close” icon or the escape key. If not dismissed, the toast will hide after a configurable amount of time. The Toast will close itself after a timeout (default 6s) or if the close button is clicked. It is also possible to have more than one toast onscreen at a time.\n\n## Use Cases\n\n- Toast component use to give feedback to users after an action has taken place.\n- Use a toast component to display notifications and other non-critical messages.\n\n## Terminology\n\n**Title:** An html text element that display as toast message title.\n**Message:** An html text element that display as toast message body.\n**Close Button:** A trigger button to close the toast message.\n**Progress Bar:** An html element that display as progress bar.\n\n## Features (With Code Examples)\n\nA normal toast used as a web component.\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Toast Message</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.'\n  });\n});\n```\n\nSet position of the toast container in specific place\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Position</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    // 'bottom-end', 'bottom-start', 'top-end', 'top-start' (default: 'top-end')\n    toast.position = 'bottom-start';\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.'\n  });\n});\n```\n\nSet user to allows drag/drop the toast container\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Draggable</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    toast.draggable = true;\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.'\n  });\n});\n```\n\nSave toast container position to local storage, apply only when draggable set to true\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Save position</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  // uniqueId: Use when need to clear saved position from storage\n  // if not will use internal auto generated\n  const uniqueId = 'some-uniqueid';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    toast.draggable = true;\n    toast.uniqueId = uniqueId;\n    toast.savePosition = true;\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.'\n  });\n});\n```\n\nClear the saved position from local storage\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Clear saved position</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  // uniqueId: used with toast while saved position toast\n  const uniqueId = 'some-uniqueid';\n  const toast = document.createElement('ids-toast');\n  toast.clearPosition(uniqueId);\n});\n```\n\nClear all toast related saved position from local storage\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Clear (all) saved positions</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toast = document.createElement('ids-toast');\n  toast.clearPositionAll();\n});\n```\n\nSet to not destroy after complete all the toast messages\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>No destroy after complete</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    toast.destroyOnComplete = false;\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.'\n  });\n});\n```\n\nSet to put links in the toast message\n\n```html\nids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Allow link</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'Link in message: <ids-hyperlink href=\"http://www.example.com\" target=\"_blank\">Google</ids-hyperlink>',\n    allowLink: true\n  });\n});\n```\n\nSet the amount of time (2 seconds), the toast should be present on-screen\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Timeout (2 seconds)</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.',\n    timeout: 2000\n  });\n});\n```\n\nCustom text that use for close button label in the toast message\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Close button custom label text</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.',\n    closeButtonLabel: 'Click here to close'\n  });\n});\n```\n\nHide the progress bar in toast message\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Progress bar (hidden)</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.',\n    progressBar: false\n  });\n});\n```\n\nLet toast message to be invisible on the screen\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Audible only</span>\n</ids-button>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\n\nbtnToast?.addEventListener('click', () => {\n  const toastId = 'demo-toast';\n  let toast = document.querySelector(`#${toastId}`);\n  if (!toast) {\n    toast = document.createElement('ids-toast');\n    toast.setAttribute('id', toastId);\n    document.body.appendChild(toast);\n  }\n  toast.show({\n    title: 'Application Offline',\n    message: 'This is a Toast message.',\n    audible: true\n  });\n});\n```\n\nToast message by markup\n\n```html\n<ids-button id=\"btn-toast\" appearance=\"secondary\">\n  <span>Toast message by markup</span>\n</ids-button>\n<ids-toast id=\"toast-markup\" destroy-on-complete=\"false\">\n  <span slot=\"title\">Application Offline</span>\n  <span slot=\"message\">This is a Toast message.</span>\n</ids-toast>\n```\n\n```javascript\nconst btnToast = document.querySelector('#btn-toast');\nconst toast = document.querySelector('#demo-toast');\n\nbtnToast?.addEventListener('click', () => {\n  toast.show();\n});\n```\n\n## Settings and Attributes (Toast)\n\n- `allowLink` {boolean} Set to put links in the toast message\n- `audible` {boolean} Set as invisible on the screen, but still read out loud by screen readers\n- `destroyOnComplete` {boolean} Set to destroy after complete all the toast messages\n- `draggable` {boolean} Set user to allows drag/drop the toast container\n- `position` {string} Set position of the toast container in specific place\n- `progressBar` {boolean} Set toast to have a visible progress bar\n- `savePosition` {boolean} Set toast container to save position to local storage, apply only when draggable set to true\n- `timeout` {number} Set the amount of time, the toast should be present on-screen\n- `uniqueId` {number} Set uniqueId to save to local storage, so same saved position can be use for whole app, apply only when draggable set to true\n\n## Settings and Attributes (Toast Message)\n\n- `audible` {boolean} Set as invisible on the screen, but still read out loud by screen readers\n- `progressBar` {boolean} Set toast to have a visible progress bar\n- `timeout` {number} Set the amount of time, the toast should be present on-screen\n- `messageId` {string} Set id to manage each toast message\n\n## Theme-able Parts (Toast Message)\n\n- `toast` allows you to further style the toast element\n- `title` allows you to further style the toast title element\n- `message` allows you to further style the toast message element\n- `progress-bar` allows you to further style the toast progress bar element\n- `close-button` allows you to further style the toast close button element\n- `close-button-icon` allows you to further style the toast close button icon element\n\n## Events (Toast)\n\n- `add-message` Fires while the toast message is added to container\n- `remove-message` Fires while the toast message is removed from container\n- `save-position` Fires after the local storage settings changed in some way\n- `clear-position` Fires after clear the saved position from local storage\n- `remove-container` Fires after removed the toast message container\n\n## Events (Toast Message)\n\n- `remove-message` Fires while the toast message is removed from container\n\n## Methods (Toast)\n\n- `clearPosition(uniqueId: string|undefined)` Clear the saved position from local storage, If uniqueId is undefined will use Internal attached\n- `clearPositionAll()` Clear all toast related saved position from local storage\n- `messageElem(messageId: string)` Get message element by given message id\n- `show(options: IdsToastShowSettings)` Set to show the toast message\n- `toastContainer()` Get the toast container\n\n## Methods (Toast Message)\n\n- `removeToastMessage()` Remove the toast message from container\n\n## States and Variations (With Code Examples)\n\n- Audible\n- Auto Closeable\n- Closeable\n- Contains Link\n- Draggable\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>: If the tab is focusable this will focus or unfocus the toast.\n- <kbd>Control+Alt+P</kbd>: It will toggle pause and play timeout timer.\n- <kbd>Escape</kbd>: It will close the toast message.\n\n## Responsive Guidelines\n\n- Toasts can be configured to appear at either the top-start, top-end, bottom-start or bottom-end of an application window.\n- Will be placed in the top-end corner by default.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Toasts were implemented in v4.0.0\n- Toasts can be invoked with `$('#my-element').toast()`.\n\n**4.x to 5.x**\n\n- Toasts are now custom elements `<ids-toast></ids-toast>`\n- If using events, events are now plain JS events\n- Can now be imported as a single JS file and used with encapsulated styles\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/ok0LLOT9PP1J0kBkPMaZ5c/IDS_Component_File_v4.6-(Draft))\n\n## Accessibility Guidelines\n\n## Regional Considerations\n\nLabels should be localized in the current language. The close icon and progress bar will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-toggle-button","attributes":[{"name":"pressed","description":"Set the pressed (on/off) state","values":[]},{"name":"appearance","description":"Override setting the \"appearance\" on Toggle Buttons, since they can only be the default style","values":[]},{"name":"iconOff","description":"Defines the `unpressed/off` toggle state icon.","values":[]},{"name":"iconOn","description":"Defines the `pressed/on` toggle state icon.","values":[]},{"name":"textOff","description":"Defines the `unpressed/off` toggle state text.","values":[]},{"name":"textOn","description":"Defines the `pressed/on` toggle state icon.","values":[]},{"name":"shouldUpdate","values":[]},{"name":"colorVariants","description":"Inherited from `IdsColorVariantMixin`","values":[]},{"name":"protoClasses","description":"Figure out the classes","values":[]},{"name":"button","values":[]},{"name":"cssClass","values":[]},{"name":"disabled","description":"Passes a disabled attribute from the custom element to the button","values":[]},{"name":"#tabIndex","description":"Passes a tabIndex attribute from the custom element to the button","values":[]},{"name":"icon","description":"Gets the current icon used on the button","values":[]},{"name":"iconEl","description":"Gets the current icon element","values":[]},{"name":"iconAlign","description":"Sets the automatic alignment of an existing icon to the 'start' or 'end' of the text","values":[]},{"name":"width","description":"Set width of button","values":[]},{"name":"text","values":[]},{"name":"type","description":"Sets the HTMLButtonElement 'type' attribute","values":[]},{"name":"noMargins","description":"Sets the no margins attribute","values":[]},{"name":"noPadding","values":[]},{"name":"square","values":[]}],"description":{"kind":"markdown","value":"# Ids Toggle Button\n\n## Description\n\nThe IDS Toggle Button component is an extension of the standard [IDS Button](../ids-button/README.md) component, which provides some API around \"toggling\" a feature and having a \"pressed\" state, in addition to the IDS Button's standard features.\n\n## Use Cases\n\n- Create buttons with \"pressed\" and \"unpressed\" states, which represent an action being toggled \"on\" and \"off\".\n\n## Terminology\n\n- Unpressed: an unpressed state is the visual equivalent to turning a feature \"off\".\n- Pressed: a pressed state is the visual equivalent to turning a feature \"on\".\n- Toggle: the action of toggling switches between unpressed and pressed, swapping to the alternate of what is currently set.\n\n## Features (With Code Examples)\n\nWhile it's possible to manually set the `icon` and `text` attributes of a Toggle Button the same way that a standard IDS Button would be used, the Toggle Button also contains similarly-named attributes that represent their \"on\" (pressed) and \"off\" (unpressed) visual states. Consider the following example:\n\n```html\n<ids-toggle-button id=\"my-toggle\" icon=\"star-outlined\" icon-on=\"star-filled\" icon-off=\"star-outlined\" text-off=\"Toggle Button (Off)\" text-on=\"Toggle Button (On)\"></ids-toggle-button>\n```\n\nIn this example, the \"on\" (pressed) state would be:\n\n- `icon-on=\"star-filled\"`\n- `text-on=\"Toggle Button (On)\"`\n\nThe \"off\" (unpressed) state would be:\n\n- `icon-off=\"star-outlined\"`\n- `text-off=\"Toggle Button (Off)\"`\n\nIn the above example, the default state of the Toggle button will be \"off\", and the content of the `icon-off`/`text-off` properties will populate the standard `icon`/`text` button properties.  To default the button on, simply use the `pressed` attribute:\n\n```html\n<ids-toggle-button id=\"my-toggle\" pressed=\"true\" icon=\"star-filled\" icon-on=\"star-filled\" icon-off=\"star-outlined\" text-off=\"Toggle Button (Off)\" text-on=\"Toggle Button (On)\"></ids-toggle-button>\n```\n\n## States and Variations\n\nIn addition to having the same states as Buttons, Toggle Buttons can also have:\n\n- Pressed (on)\n- Unpressed (off)\n\n### \"Default\" Appearance\n\nToggle buttons can only be displayed in the \"default\" button appearance\n\n## Keyboard Guidelines\n\n## Responsive Guidelines\n\n## Converting from Previous Versions\n\n## Designs\n\n## Alternate Designs\n\n## Proposed Changes\n\n## Test Plan\n\n1. Accessibility - Axe\n1. Visual Regression Test\n1. Repeat Tests in All Supported Browsers\n1. Some of these as test cases from the [WC gold standard](https://github.com/webcomponents/gold-standard/wiki#api)\n1. Can be consumed in NG/Vue/React (pull it in standalone/built see it works standalone)\n\n## Accessibility Guidelines\n\n## Regional Considerations\n\nBe conscious of the layout of content within your buttons when they are present in RTL situations.\n"}},{"name":"ids-toolbar-more-actions","attributes":[{"name":"colorVariants","values":[]},{"name":"button","values":[]},{"name":"menu","values":[]},{"name":"predefinedMenuItems","values":[]},{"name":"overflowMenuItems","values":[]},{"name":"toolbar","values":[]},{"name":"disabled","values":[]},{"name":"overflow","values":[]},{"name":"toolbarType","values":[]},{"name":"type","description":"Overrides the standard toolbar section \"type\" getter, which always returns \"more\" in this case.","values":[]},{"name":"visible","values":[]}],"description":{"kind":"markdown","value":"# Ids Toolbar Component\n\n## Description\n\nThe Ids Toolbar is used for building highly-configurable Toolbars for sections of your application.  It displays [buttons](../ids-button/README.md), hyperlinks, and other components in different align-able sections, along with contextual information about a workflow or process.\n\nThe Ids Toolbar can also be responsive, intelligently hiding buttons that can't be shown on-screen, and displaying them in an overflow menu.\n\n## Use Cases\n\n- Provides contextual information for a workflow or process displayed on screen\n- Provides access to contextual actions for said workflow/process\n\n## Terminology\n\n**Section** Toolbars are divided into sections.  Each of these sections has their own alignment style and \"type\" that determines how it fits within the Toolbar.\n**Item** Toolbar items are the actionable elements within a toolbar.  In general they correspond standard HTML Elements or other IDS Components, such as buttons, hyperlinks, checkboxes, etc.\n**More Actions** This optional element can be applied to Toolbars that contain a significant number of actions that cannot all be displayed on screen at one time.  This element contains a menu button that will display any \"spilled-over\" contents from the Toolbar when active, once those actions are no longer visible on the Toolbar.\n\n## Settings (Attributes)\n\n### Toolbar\n\n- `disabled` makes the entire toolbar enabled/disabled\n- `focused` describes the currently-focused Toolbar item\n- `items` provides access to all Toolbar items in all sections\n- `sections` provides access to all the Toolbar's sections\n- `separators` provides access to all the Toolbar's separators\n- `tabbable` if true, makes it possible to navigate all Toolbar items by using the Tab/Shift+Tab keys by setting all items to a 0-or-more tabIndex property.  By default (false), only one Toolbar item at a time can have a 0-or-more tabIndex.\n\n### Toolbar Section\n\n- `align` - Determines the alignment of the items within this section.  Defaults to `start`, which is the left side of the Toolbar in a standard Left-to-Right toolbar setup.  Can also be `center` and `end` (right).\n- `favor` - Determines if this section should not shrink/collapse when the size of the entire Toolbar shrinks. This causes the other Toolbar sections to become smaller first.\n- `items` - provides access to all Toolbar items in this section.\n- `type` - Sets a pre-defined \"type\" on the toolbar section. This defaults to `static` but can also be set to `title`, `buttonset`, and `search` to mimic those specific sections. To create a custom section that fills available space, `fluid` is also an available type. Type `button` is for a single button in the section to maintain button's focus state.\n\n### Toolbar More Actions\n\n- `button` provides access to the internal [Menu Button component](../ids-menu-button/README.md)\n- `menu` provides access to the internal [Popup Menu component](../ids-popup-menu/README.md)\n- `overflow` if true, menu items that cannot be displayed in the main Toolbar area due to lack of space will be \"mirrored\" and generated as menu items in a special group inside this menu.  Clicking the mirrored menu items will cause the original Toolbar action to be fired.  When a [Menu Button](../ids-menu-button/README.md) component is mirrored, its attached menu is also mirrored as a submenu on its generated menu item.\n- `type` this component is a standalone toolbar section that always reports `more` for its type.\n\n## States and Variations\n\n- \"disabled\"\n- \"tabbable\"\n\nAside from the Toolbar-level disabled state, all individual Toolbar items are responsible for management of their own state.  For more information on these components' states, see their documentation pages.\n\n## Features (With Code Examples)\n\nIds Toolbars are comprised of the Toolbar element, an indeterminate number of Toolbar sections, and an optional \"More Actions\" menu button element. Inside of the different toolbar sections, it's possible to place different Ids Components.  Below is a basic example of what an entire Ids Toolbar may look like:\n\n```html\n<ids-toolbar>\n    <ids-toolbar-section type=\"title\">\n        <ids-text type=\"h3\">My Toolbar</ids-text>\n    </ids-toolbar-section>\n    <ids-toolbar-section type=\"buttonset\" align=\"end\">\n        <ids-button id=\"button-1\" role=\"button\">\n            <span>Text</span>\n        </ids-button>\n        <ids-button id=\"button-2\">\n            <span class=\"audible\">Settings</span>\n            <ids-icon icon=\"settings\"></ids-icon>\n        </ids-button>\n    </ids-toolbar-section>\n    <ids-toolbar-more-actions>\n        <ids-menu-group>\n            <ids-menu-item value=\"1\">Option One</ids-menu-item>\n            <ids-menu-item value=\"2\">Option Two</ids-menu-item>\n            <ids-menu-item value=\"3\">Option Three</ids-menu-item>\n            <ids-menu-item>More Options\n            <ids-popup-menu>\n                <ids-menu-group>\n                <ids-menu-item value=\"4\">Option Four</ids-menu-item>\n                <ids-menu-item value=\"5\">Option Five</ids-menu-item>\n                <ids-menu-item value=\"6\">Option Six</ids-menu-item>\n                </ids-menu-group>\n            </ids-popup-menu>\n            </ids-menu-item>\n        </ids-menu-group>\n    </ids-toolbar-more-actions>\n</ids-toolbar>\n```\n\n### Sections\n\nToolbar sections can be configured with different \"types\" that can determine their look/feel/function.  By default, the sections do not fill available space and contain no padding.  These are `static` toolbar sections:\n\n```html\n<ids-toolbar-section>\n    <ids-button icon=\"menu\" role=\"button\">\n        <span class=\"audible\">Application Menu Trigger</span>\n    </ids-button>\n</ids-toolbar-section>\n```\n\nFor compatibility with 4.x components Toolbars, the IDS Toolbar also supports `title` and `buttonset` section types that act similarly.  The styling is less rigid than in previous iterations, so to make a `buttonset` section \"right\"-aligned, it's necessary to add the `align=\"end\"` attribute:\n\n```html\n<ids-toolbar-section type=\"title\">\n    <ids-text font-size=\"20\">My Toolbar</ids-text>\n    <ids-text font-size=\"14\">With some extra information below</ids-text>\n</ids-toolbar-section>\n<ids-toolbar-section type=\"buttonset\" align=\"end\">\n    <ids-button id=\"button-1\" role=\"button\">\n        <span>Text</span>\n    </ids-button>\n    <ids-button id=\"button-2\">\n        <span class=\"audible\">Settings</span>\n        <ids-icon icon=\"settings\"></ids-icon>\n    </ids-button>\n</ids-toolbar-section>\n```\n\nToolbar Title sections can have multiple text elements, if needed:\n\n```html\n<ids-toolbar-section type=\"title\">\n    <ids-text font-size=\"20\">My Toolbar</ids-text>\n    <ids-text font-size=\"14\">With some extra information below</ids-text>\n</ids-toolbar-section>\n\n<!-- or... -->\n\n<ids-toolbar-section type=\"title\">\n    <ids-text font-size=\"20\">My Toolbar</ids-text>\n</ids-toolbar-section>\n```\n\nToolbar Buttonset sections can contain an indeterminate number of components.  Generally these are [Buttons](../ids-button/README.md), but other component types such as Hyperlinks and some Pickers are accepted.  The Buttonset Section is styled with CSS to prevent the wrapping of these elements to multiple lines, instead cutting off actions that don't fit.\n\n```html\n<ids-toolbar-section type=\"buttonset\" align=\"end\">\n    <ids-button id=\"button-1\" role=\"button\">\n        <span>Text</span>\n    </ids-button>\n    <ids-button id=\"button-2\">\n        <span class=\"audible\">Settings</span>\n        <ids-icon icon=\"settings\"></ids-icon>\n    </ids-button>\n    <ids-button id=\"button-3\" role=\"button\">\n        <span>Text</span>\n    </ids-button>\n    <ids-button id=\"button-4\" role=\"button\">\n        <span>Text</span>\n    </ids-button>\n</ids-toolbar-section>\n```\n\nToolbars can also contain sections that are meant to be customized with CSS.  It's possible to create custom static sections with the `static` type, but if you want to make a custom section that fills available space, use the `fluid` type:\n\n```html\n<ids-toolbar>\n    <!-- takes up as little space as possible --->\n    <ids-toolbar-section type=\"static\">\n        <ids-button id=\"button-1\" role=\"button\">\n            <span>Button 1</span>\n        </ids-button>\n    </ids-toolbar-section>\n\n    <!-- fills the rest of the toolbar space -->\n    <ids-toolbar-section type=\"fluid\" align=\"end\">\n        <ids-button id=\"button-2\" role=\"button\">\n            <span>Button 2</span>\n        </ids-button>\n    </ids-toolbar-section>\n<ids-toolbar>\n```\n\nThe toolbar can be set as the formatter styles:\n\n```html\n<ids-toolbar type=\"formatter\">\n  <ids-toolbar-section type=\"buttonset\">\n    <ids-button id=\"button-1\" role=\"button\">\n      <span>Button 1</span>\n    </ids-button>\n    <ids-separator vertical></ids-separator>\n    <ids-button id=\"button-2\" role=\"button\">\n      <span>Button 2</span>\n    </ids-button>\n  </ids-toolbar-section>\n<ids-toolbar>\n```\n\n### More Actions Button\n\nOptionally, toolbars can contain a \"More Actions\" Button, which is a [Menu Button]('../ids-menu-button/README.md) wrapped inside a special Toolbar Section.  This component's purpose is to provide ansulary actions that are related to your Toolbar's primary actions, but don't necessarily need to be readily available on a single click.  In responsive settings with many primary actions present, the Toolbar will collapse any actions that don't fit within its boundaries.  Optionally, the More Actions menu can display these collapsed actions at the top of its menu (also referred to as the \"overflow\" menu).\n\nThe Ids Toolbar More Actions component sits alongside the other toolbar sections, and contains a single slot that takes the same types of elements as a standard [Ids Popup Menu](../ids-popup-menu/README.md):\n\n```html\n<ids-toolbar-more-actions>\n    <ids-menu-group>\n        <ids-menu-item value=\"1\">Option One</ids-menu-item>\n        <ids-menu-item value=\"2\">Option Two</ids-menu-item>\n        <ids-menu-item value=\"3\">Option Three</ids-menu-item>\n        <ids-menu-item>More Options\n        <ids-popup-menu>\n            <ids-menu-group>\n            <ids-menu-item value=\"4\">Option Four</ids-menu-item>\n            <ids-menu-item value=\"5\">Option Five</ids-menu-item>\n            <ids-menu-item value=\"6\">Option Six</ids-menu-item>\n            </ids-menu-group>\n        </ids-popup-menu>\n        </ids-menu-item>\n    </ids-menu-group>\n</ids-toolbar-more-actions>\n```\n\nIf accompanied by a More Actions button with the `overflow` attribute set, Toolbar Actions that don't fit within their sections will be hidden in the Toolbar, but will also \"spill over\" into the More Actions menu, inside a special `IdsMenuGroup` with a `more-actions` attribute.  If a user clicks on one of the menu items that reflects a Toolbar element, the Toolbar element will also be \"clicked\".  This allows visually-hidden Toolbar actions to still remain available in responsive settings.\n\n```html\n<ids-toolbar-more-actions overflow>\n    <!--\n        Toolbar Items will be mirrored here inside a group that looks like:\n        <ids-menu-group more-actions>\n            <ids-menu-item>Text</ids-menu-item>\n            <ids-menu-item icon=\"settings\">Settings</ids-menu-item>\n            <ids-menu-item>Text</ids-menu-item>\n            <ids-menu-item>Text</ids-menu-item>\n        </ids-menu-group>\n    --->\n    <ids-menu-group>\n        <ids-menu-item value=\"1\">Option One</ids-menu-item>\n        <ids-menu-item value=\"2\">Option Two</ids-menu-item>\n        <ids-menu-item value=\"3\">Option Three</ids-menu-item>\n    </ids-menu-group>\n</ids-toolbar-more-actions>\n```\n\n### API Access\n\nAt the Toolbar level, it's possible to access all Items and Sections:\n\n```js\nconst items = document.querySelector('ids-toolbar').items;\nconst sections = document.querySelector('ids-toolbar').sections;\n```\n\nWithin each section, it's possible to access the section's items:\n\n```js\nconst items = document.querySelector('ids-toolbar-section').items;\n```\n\nWhen dealing with a More Actions button, its inner components' APIs are exposed:\n\n```js\nconst moreActionsButtonEl = document.querySelector('ids-toolbar-more-actions').button;\nconst moreActionsMenuEl = document.querySelector('ids-toolbar-more-actions').menu;\n```\n\nAccess to the different More Actions menu items is also exposed:\n\n```js\n// These items are defined inside the `<ids-toolbar-more-actions>` element's default slot.\nconst predefinedMenuItems = document.querySelector('ids-toolbar-more-actions').predefinedMenuItems;\n\n// These items are generated by the More Actions menu if the `overflow` attribute is set.\n// These items mirror the regular Toolbar elements.\nconst overflowMenuItems = document.querySelector('ids-toolbar-more-actions').overflowMenuItems;\n```\n\nOverflow menu items also provide a reference to their corresponding Toolbar element:\n\n```js\nconst overflowMenuItems = document.querySelector('ids-toolbar-more-actions').overflowMenuItems;\noverflowMenuItems.forEach((item) => {\n  console.info(item.overflowTarget); // <-- Points to the Toolbar button/element/etc\n});\n```\n\n### Events\n\nAll elements inside the Toolbar will fire a `selected` event when clicked.  The `selected` event from the More Actions menu's [IdsPopupMenu]('../ids-popup-menu/README.md) is converted into a Toolbar-compatible event automatically, so only one listener at the Toolbar level is needed:\n\n```js\nconst toolbarEl = document.querySelector('#my-toolbar');\ntoolbarEl.addEventListener('selected', (e) => {\n  console.info(e.detail); // Provides data about the originating element, and overflow status, if applicable\n}\n```\n\n## Keyboard Guidelines\n\nThe IDS Button doesn't contain any interactions beyond a standard HTMLButtonElement:\n\n- <kbd>Enter</kbd> keys selects a toolbar action and executes the action.  On menu buttons, the menu is activated/hidden, and an action is not executed until one of its menu items is selected.\n- <kbd>Left/Right Arrow</kbd> keys navigate the available toolbar items.\n- <kbd>Tab</kbd> or <kbd>Shift</kbd>/<kbd>Tab<kbd> keys cause navigation to occur.  When `tabbable=\"true\"`, using Tab/Shift+Tab causes navigation between Toolbar items. When `tabbable=\"false\"`, Navigation away from the toolbar will occur to the element after/before the Toolbar respectively.\n\n## Responsive Guidelines\n\n- Try not to provide an over-abundance of Toolbar Actions.  The Toolbar's intention is to provide contextual actions for a specific workflow. Providing too many actions can cause end-user confusion.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Toolbar was implemented in v4.0.0\n- Toolbar has new markup and can be invoked with `$('#my-toolbar').toolbar();`\n- Flex Toolbar replaced/deprecated Toolbar in v4.3.0\n- Flex Toolbar has new markup and can be invoked with `$('#my-toolbar').toolbarflex();`\n\n**4.x to 5.x**\n\n- Flex Toolbar is now a custom element `<ids-toolbar></ids-toolbar>`\n- Toolbar Sections are now codified as components `<ids-toolbar-section>`\n- More Actions Buttons are now a codified components `<ids-toolbar-more-actions>`\n- Toolbars now implement `tabbable` to enable use of (Shift)/Tab keys for navigation\n- Toolbar Section behavior is now controlled by attributes (`favor`, `type`, etc) instead of CSS classes.\n- Not including a More Actions button in markup explicitly disables the menu from being displayed.\n- The More Actions button can be configured NOT to automatically show overflow items by omitting its `overflow` attribute.  This allows for pre-defined menu items to be displayed without items being spilled over to the overflow menu.\n"}},{"name":"ids-toolbar-section","description":{"kind":"markdown","value":"# Ids Toolbar Component\n\n## Description\n\nThe Ids Toolbar is used for building highly-configurable Toolbars for sections of your application.  It displays [buttons](../ids-button/README.md), hyperlinks, and other components in different align-able sections, along with contextual information about a workflow or process.\n\nThe Ids Toolbar can also be responsive, intelligently hiding buttons that can't be shown on-screen, and displaying them in an overflow menu.\n\n## Use Cases\n\n- Provides contextual information for a workflow or process displayed on screen\n- Provides access to contextual actions for said workflow/process\n\n## Terminology\n\n**Section** Toolbars are divided into sections.  Each of these sections has their own alignment style and \"type\" that determines how it fits within the Toolbar.\n**Item** Toolbar items are the actionable elements within a toolbar.  In general they correspond standard HTML Elements or other IDS Components, such as buttons, hyperlinks, checkboxes, etc.\n**More Actions** This optional element can be applied to Toolbars that contain a significant number of actions that cannot all be displayed on screen at one time.  This element contains a menu button that will display any \"spilled-over\" contents from the Toolbar when active, once those actions are no longer visible on the Toolbar.\n\n## Settings (Attributes)\n\n### Toolbar\n\n- `disabled` makes the entire toolbar enabled/disabled\n- `focused` describes the currently-focused Toolbar item\n- `items` provides access to all Toolbar items in all sections\n- `sections` provides access to all the Toolbar's sections\n- `separators` provides access to all the Toolbar's separators\n- `tabbable` if true, makes it possible to navigate all Toolbar items by using the Tab/Shift+Tab keys by setting all items to a 0-or-more tabIndex property.  By default (false), only one Toolbar item at a time can have a 0-or-more tabIndex.\n\n### Toolbar Section\n\n- `align` - Determines the alignment of the items within this section.  Defaults to `start`, which is the left side of the Toolbar in a standard Left-to-Right toolbar setup.  Can also be `center` and `end` (right).\n- `favor` - Determines if this section should not shrink/collapse when the size of the entire Toolbar shrinks. This causes the other Toolbar sections to become smaller first.\n- `items` - provides access to all Toolbar items in this section.\n- `type` - Sets a pre-defined \"type\" on the toolbar section. This defaults to `static` but can also be set to `title`, `buttonset`, and `search` to mimic those specific sections. To create a custom section that fills available space, `fluid` is also an available type. Type `button` is for a single button in the section to maintain button's focus state.\n\n### Toolbar More Actions\n\n- `button` provides access to the internal [Menu Button component](../ids-menu-button/README.md)\n- `menu` provides access to the internal [Popup Menu component](../ids-popup-menu/README.md)\n- `overflow` if true, menu items that cannot be displayed in the main Toolbar area due to lack of space will be \"mirrored\" and generated as menu items in a special group inside this menu.  Clicking the mirrored menu items will cause the original Toolbar action to be fired.  When a [Menu Button](../ids-menu-button/README.md) component is mirrored, its attached menu is also mirrored as a submenu on its generated menu item.\n- `type` this component is a standalone toolbar section that always reports `more` for its type.\n\n## States and Variations\n\n- \"disabled\"\n- \"tabbable\"\n\nAside from the Toolbar-level disabled state, all individual Toolbar items are responsible for management of their own state.  For more information on these components' states, see their documentation pages.\n\n## Features (With Code Examples)\n\nIds Toolbars are comprised of the Toolbar element, an indeterminate number of Toolbar sections, and an optional \"More Actions\" menu button element. Inside of the different toolbar sections, it's possible to place different Ids Components.  Below is a basic example of what an entire Ids Toolbar may look like:\n\n```html\n<ids-toolbar>\n    <ids-toolbar-section type=\"title\">\n        <ids-text type=\"h3\">My Toolbar</ids-text>\n    </ids-toolbar-section>\n    <ids-toolbar-section type=\"buttonset\" align=\"end\">\n        <ids-button id=\"button-1\" role=\"button\">\n            <span>Text</span>\n        </ids-button>\n        <ids-button id=\"button-2\">\n            <span class=\"audible\">Settings</span>\n            <ids-icon icon=\"settings\"></ids-icon>\n        </ids-button>\n    </ids-toolbar-section>\n    <ids-toolbar-more-actions>\n        <ids-menu-group>\n            <ids-menu-item value=\"1\">Option One</ids-menu-item>\n            <ids-menu-item value=\"2\">Option Two</ids-menu-item>\n            <ids-menu-item value=\"3\">Option Three</ids-menu-item>\n            <ids-menu-item>More Options\n            <ids-popup-menu>\n                <ids-menu-group>\n                <ids-menu-item value=\"4\">Option Four</ids-menu-item>\n                <ids-menu-item value=\"5\">Option Five</ids-menu-item>\n                <ids-menu-item value=\"6\">Option Six</ids-menu-item>\n                </ids-menu-group>\n            </ids-popup-menu>\n            </ids-menu-item>\n        </ids-menu-group>\n    </ids-toolbar-more-actions>\n</ids-toolbar>\n```\n\n### Sections\n\nToolbar sections can be configured with different \"types\" that can determine their look/feel/function.  By default, the sections do not fill available space and contain no padding.  These are `static` toolbar sections:\n\n```html\n<ids-toolbar-section>\n    <ids-button icon=\"menu\" role=\"button\">\n        <span class=\"audible\">Application Menu Trigger</span>\n    </ids-button>\n</ids-toolbar-section>\n```\n\nFor compatibility with 4.x components Toolbars, the IDS Toolbar also supports `title` and `buttonset` section types that act similarly.  The styling is less rigid than in previous iterations, so to make a `buttonset` section \"right\"-aligned, it's necessary to add the `align=\"end\"` attribute:\n\n```html\n<ids-toolbar-section type=\"title\">\n    <ids-text font-size=\"20\">My Toolbar</ids-text>\n    <ids-text font-size=\"14\">With some extra information below</ids-text>\n</ids-toolbar-section>\n<ids-toolbar-section type=\"buttonset\" align=\"end\">\n    <ids-button id=\"button-1\" role=\"button\">\n        <span>Text</span>\n    </ids-button>\n    <ids-button id=\"button-2\">\n        <span class=\"audible\">Settings</span>\n        <ids-icon icon=\"settings\"></ids-icon>\n    </ids-button>\n</ids-toolbar-section>\n```\n\nToolbar Title sections can have multiple text elements, if needed:\n\n```html\n<ids-toolbar-section type=\"title\">\n    <ids-text font-size=\"20\">My Toolbar</ids-text>\n    <ids-text font-size=\"14\">With some extra information below</ids-text>\n</ids-toolbar-section>\n\n<!-- or... -->\n\n<ids-toolbar-section type=\"title\">\n    <ids-text font-size=\"20\">My Toolbar</ids-text>\n</ids-toolbar-section>\n```\n\nToolbar Buttonset sections can contain an indeterminate number of components.  Generally these are [Buttons](../ids-button/README.md), but other component types such as Hyperlinks and some Pickers are accepted.  The Buttonset Section is styled with CSS to prevent the wrapping of these elements to multiple lines, instead cutting off actions that don't fit.\n\n```html\n<ids-toolbar-section type=\"buttonset\" align=\"end\">\n    <ids-button id=\"button-1\" role=\"button\">\n        <span>Text</span>\n    </ids-button>\n    <ids-button id=\"button-2\">\n        <span class=\"audible\">Settings</span>\n        <ids-icon icon=\"settings\"></ids-icon>\n    </ids-button>\n    <ids-button id=\"button-3\" role=\"button\">\n        <span>Text</span>\n    </ids-button>\n    <ids-button id=\"button-4\" role=\"button\">\n        <span>Text</span>\n    </ids-button>\n</ids-toolbar-section>\n```\n\nToolbars can also contain sections that are meant to be customized with CSS.  It's possible to create custom static sections with the `static` type, but if you want to make a custom section that fills available space, use the `fluid` type:\n\n```html\n<ids-toolbar>\n    <!-- takes up as little space as possible --->\n    <ids-toolbar-section type=\"static\">\n        <ids-button id=\"button-1\" role=\"button\">\n            <span>Button 1</span>\n        </ids-button>\n    </ids-toolbar-section>\n\n    <!-- fills the rest of the toolbar space -->\n    <ids-toolbar-section type=\"fluid\" align=\"end\">\n        <ids-button id=\"button-2\" role=\"button\">\n            <span>Button 2</span>\n        </ids-button>\n    </ids-toolbar-section>\n<ids-toolbar>\n```\n\nThe toolbar can be set as the formatter styles:\n\n```html\n<ids-toolbar type=\"formatter\">\n  <ids-toolbar-section type=\"buttonset\">\n    <ids-button id=\"button-1\" role=\"button\">\n      <span>Button 1</span>\n    </ids-button>\n    <ids-separator vertical></ids-separator>\n    <ids-button id=\"button-2\" role=\"button\">\n      <span>Button 2</span>\n    </ids-button>\n  </ids-toolbar-section>\n<ids-toolbar>\n```\n\n### More Actions Button\n\nOptionally, toolbars can contain a \"More Actions\" Button, which is a [Menu Button]('../ids-menu-button/README.md) wrapped inside a special Toolbar Section.  This component's purpose is to provide ansulary actions that are related to your Toolbar's primary actions, but don't necessarily need to be readily available on a single click.  In responsive settings with many primary actions present, the Toolbar will collapse any actions that don't fit within its boundaries.  Optionally, the More Actions menu can display these collapsed actions at the top of its menu (also referred to as the \"overflow\" menu).\n\nThe Ids Toolbar More Actions component sits alongside the other toolbar sections, and contains a single slot that takes the same types of elements as a standard [Ids Popup Menu](../ids-popup-menu/README.md):\n\n```html\n<ids-toolbar-more-actions>\n    <ids-menu-group>\n        <ids-menu-item value=\"1\">Option One</ids-menu-item>\n        <ids-menu-item value=\"2\">Option Two</ids-menu-item>\n        <ids-menu-item value=\"3\">Option Three</ids-menu-item>\n        <ids-menu-item>More Options\n        <ids-popup-menu>\n            <ids-menu-group>\n            <ids-menu-item value=\"4\">Option Four</ids-menu-item>\n            <ids-menu-item value=\"5\">Option Five</ids-menu-item>\n            <ids-menu-item value=\"6\">Option Six</ids-menu-item>\n            </ids-menu-group>\n        </ids-popup-menu>\n        </ids-menu-item>\n    </ids-menu-group>\n</ids-toolbar-more-actions>\n```\n\nIf accompanied by a More Actions button with the `overflow` attribute set, Toolbar Actions that don't fit within their sections will be hidden in the Toolbar, but will also \"spill over\" into the More Actions menu, inside a special `IdsMenuGroup` with a `more-actions` attribute.  If a user clicks on one of the menu items that reflects a Toolbar element, the Toolbar element will also be \"clicked\".  This allows visually-hidden Toolbar actions to still remain available in responsive settings.\n\n```html\n<ids-toolbar-more-actions overflow>\n    <!--\n        Toolbar Items will be mirrored here inside a group that looks like:\n        <ids-menu-group more-actions>\n            <ids-menu-item>Text</ids-menu-item>\n            <ids-menu-item icon=\"settings\">Settings</ids-menu-item>\n            <ids-menu-item>Text</ids-menu-item>\n            <ids-menu-item>Text</ids-menu-item>\n        </ids-menu-group>\n    --->\n    <ids-menu-group>\n        <ids-menu-item value=\"1\">Option One</ids-menu-item>\n        <ids-menu-item value=\"2\">Option Two</ids-menu-item>\n        <ids-menu-item value=\"3\">Option Three</ids-menu-item>\n    </ids-menu-group>\n</ids-toolbar-more-actions>\n```\n\n### API Access\n\nAt the Toolbar level, it's possible to access all Items and Sections:\n\n```js\nconst items = document.querySelector('ids-toolbar').items;\nconst sections = document.querySelector('ids-toolbar').sections;\n```\n\nWithin each section, it's possible to access the section's items:\n\n```js\nconst items = document.querySelector('ids-toolbar-section').items;\n```\n\nWhen dealing with a More Actions button, its inner components' APIs are exposed:\n\n```js\nconst moreActionsButtonEl = document.querySelector('ids-toolbar-more-actions').button;\nconst moreActionsMenuEl = document.querySelector('ids-toolbar-more-actions').menu;\n```\n\nAccess to the different More Actions menu items is also exposed:\n\n```js\n// These items are defined inside the `<ids-toolbar-more-actions>` element's default slot.\nconst predefinedMenuItems = document.querySelector('ids-toolbar-more-actions').predefinedMenuItems;\n\n// These items are generated by the More Actions menu if the `overflow` attribute is set.\n// These items mirror the regular Toolbar elements.\nconst overflowMenuItems = document.querySelector('ids-toolbar-more-actions').overflowMenuItems;\n```\n\nOverflow menu items also provide a reference to their corresponding Toolbar element:\n\n```js\nconst overflowMenuItems = document.querySelector('ids-toolbar-more-actions').overflowMenuItems;\noverflowMenuItems.forEach((item) => {\n  console.info(item.overflowTarget); // <-- Points to the Toolbar button/element/etc\n});\n```\n\n### Events\n\nAll elements inside the Toolbar will fire a `selected` event when clicked.  The `selected` event from the More Actions menu's [IdsPopupMenu]('../ids-popup-menu/README.md) is converted into a Toolbar-compatible event automatically, so only one listener at the Toolbar level is needed:\n\n```js\nconst toolbarEl = document.querySelector('#my-toolbar');\ntoolbarEl.addEventListener('selected', (e) => {\n  console.info(e.detail); // Provides data about the originating element, and overflow status, if applicable\n}\n```\n\n## Keyboard Guidelines\n\nThe IDS Button doesn't contain any interactions beyond a standard HTMLButtonElement:\n\n- <kbd>Enter</kbd> keys selects a toolbar action and executes the action.  On menu buttons, the menu is activated/hidden, and an action is not executed until one of its menu items is selected.\n- <kbd>Left/Right Arrow</kbd> keys navigate the available toolbar items.\n- <kbd>Tab</kbd> or <kbd>Shift</kbd>/<kbd>Tab<kbd> keys cause navigation to occur.  When `tabbable=\"true\"`, using Tab/Shift+Tab causes navigation between Toolbar items. When `tabbable=\"false\"`, Navigation away from the toolbar will occur to the element after/before the Toolbar respectively.\n\n## Responsive Guidelines\n\n- Try not to provide an over-abundance of Toolbar Actions.  The Toolbar's intention is to provide contextual actions for a specific workflow. Providing too many actions can cause end-user confusion.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Toolbar was implemented in v4.0.0\n- Toolbar has new markup and can be invoked with `$('#my-toolbar').toolbar();`\n- Flex Toolbar replaced/deprecated Toolbar in v4.3.0\n- Flex Toolbar has new markup and can be invoked with `$('#my-toolbar').toolbarflex();`\n\n**4.x to 5.x**\n\n- Flex Toolbar is now a custom element `<ids-toolbar></ids-toolbar>`\n- Toolbar Sections are now codified as components `<ids-toolbar-section>`\n- More Actions Buttons are now a codified components `<ids-toolbar-more-actions>`\n- Toolbars now implement `tabbable` to enable use of (Shift)/Tab keys for navigation\n- Toolbar Section behavior is now controlled by attributes (`favor`, `type`, etc) instead of CSS classes.\n- Not including a More Actions button in markup explicitly disables the menu from being displayed.\n- The More Actions button can be configured NOT to automatically show overflow items by omitting its `overflow` attribute.  This allows for pre-defined menu items to be displayed without items being spilled over to the overflow menu.\n"}},{"name":"ids-toolbar","attributes":[{"name":"#resizeObserver","description":"Watches for Toolbar size changes","values":[]},{"name":"disabled","values":[]},{"name":"focused","values":[]},{"name":"items","values":[]},{"name":"textElems","values":[]},{"name":"separators","values":[]},{"name":"sections","values":[]},{"name":"tabbable","description":"If true, sets the Toolbar mode to allow ALL items to have a usable tabIndex.\nDefault is false, which means one Toolbar element is focusable at a time.","values":[]},{"name":"type","description":"Set the type for toolbar","values":[]},{"name":"padding","description":"If set to number the container will have padding added (in pixels)","values":[]}],"description":{"kind":"markdown","value":"# Ids Toolbar Component\n\n## Description\n\nThe Ids Toolbar is used for building highly-configurable Toolbars for sections of your application.  It displays [buttons](../ids-button/README.md), hyperlinks, and other components in different align-able sections, along with contextual information about a workflow or process.\n\nThe Ids Toolbar can also be responsive, intelligently hiding buttons that can't be shown on-screen, and displaying them in an overflow menu.\n\n## Use Cases\n\n- Provides contextual information for a workflow or process displayed on screen\n- Provides access to contextual actions for said workflow/process\n\n## Terminology\n\n**Section** Toolbars are divided into sections.  Each of these sections has their own alignment style and \"type\" that determines how it fits within the Toolbar.\n**Item** Toolbar items are the actionable elements within a toolbar.  In general they correspond standard HTML Elements or other IDS Components, such as buttons, hyperlinks, checkboxes, etc.\n**More Actions** This optional element can be applied to Toolbars that contain a significant number of actions that cannot all be displayed on screen at one time.  This element contains a menu button that will display any \"spilled-over\" contents from the Toolbar when active, once those actions are no longer visible on the Toolbar.\n\n## Settings (Attributes)\n\n### Toolbar\n\n- `disabled` makes the entire toolbar enabled/disabled\n- `focused` describes the currently-focused Toolbar item\n- `items` provides access to all Toolbar items in all sections\n- `sections` provides access to all the Toolbar's sections\n- `separators` provides access to all the Toolbar's separators\n- `tabbable` if true, makes it possible to navigate all Toolbar items by using the Tab/Shift+Tab keys by setting all items to a 0-or-more tabIndex property.  By default (false), only one Toolbar item at a time can have a 0-or-more tabIndex.\n\n### Toolbar Section\n\n- `align` - Determines the alignment of the items within this section.  Defaults to `start`, which is the left side of the Toolbar in a standard Left-to-Right toolbar setup.  Can also be `center` and `end` (right).\n- `favor` - Determines if this section should not shrink/collapse when the size of the entire Toolbar shrinks. This causes the other Toolbar sections to become smaller first.\n- `items` - provides access to all Toolbar items in this section.\n- `type` - Sets a pre-defined \"type\" on the toolbar section. This defaults to `static` but can also be set to `title`, `buttonset`, and `search` to mimic those specific sections. To create a custom section that fills available space, `fluid` is also an available type. Type `button` is for a single button in the section to maintain button's focus state.\n\n### Toolbar More Actions\n\n- `button` provides access to the internal [Menu Button component](../ids-menu-button/README.md)\n- `menu` provides access to the internal [Popup Menu component](../ids-popup-menu/README.md)\n- `overflow` if true, menu items that cannot be displayed in the main Toolbar area due to lack of space will be \"mirrored\" and generated as menu items in a special group inside this menu.  Clicking the mirrored menu items will cause the original Toolbar action to be fired.  When a [Menu Button](../ids-menu-button/README.md) component is mirrored, its attached menu is also mirrored as a submenu on its generated menu item.\n- `type` this component is a standalone toolbar section that always reports `more` for its type.\n\n## States and Variations\n\n- \"disabled\"\n- \"tabbable\"\n\nAside from the Toolbar-level disabled state, all individual Toolbar items are responsible for management of their own state.  For more information on these components' states, see their documentation pages.\n\n## Features (With Code Examples)\n\nIds Toolbars are comprised of the Toolbar element, an indeterminate number of Toolbar sections, and an optional \"More Actions\" menu button element. Inside of the different toolbar sections, it's possible to place different Ids Components.  Below is a basic example of what an entire Ids Toolbar may look like:\n\n```html\n<ids-toolbar>\n    <ids-toolbar-section type=\"title\">\n        <ids-text type=\"h3\">My Toolbar</ids-text>\n    </ids-toolbar-section>\n    <ids-toolbar-section type=\"buttonset\" align=\"end\">\n        <ids-button id=\"button-1\" role=\"button\">\n            <span>Text</span>\n        </ids-button>\n        <ids-button id=\"button-2\">\n            <span class=\"audible\">Settings</span>\n            <ids-icon icon=\"settings\"></ids-icon>\n        </ids-button>\n    </ids-toolbar-section>\n    <ids-toolbar-more-actions>\n        <ids-menu-group>\n            <ids-menu-item value=\"1\">Option One</ids-menu-item>\n            <ids-menu-item value=\"2\">Option Two</ids-menu-item>\n            <ids-menu-item value=\"3\">Option Three</ids-menu-item>\n            <ids-menu-item>More Options\n            <ids-popup-menu>\n                <ids-menu-group>\n                <ids-menu-item value=\"4\">Option Four</ids-menu-item>\n                <ids-menu-item value=\"5\">Option Five</ids-menu-item>\n                <ids-menu-item value=\"6\">Option Six</ids-menu-item>\n                </ids-menu-group>\n            </ids-popup-menu>\n            </ids-menu-item>\n        </ids-menu-group>\n    </ids-toolbar-more-actions>\n</ids-toolbar>\n```\n\n### Sections\n\nToolbar sections can be configured with different \"types\" that can determine their look/feel/function.  By default, the sections do not fill available space and contain no padding.  These are `static` toolbar sections:\n\n```html\n<ids-toolbar-section>\n    <ids-button icon=\"menu\" role=\"button\">\n        <span class=\"audible\">Application Menu Trigger</span>\n    </ids-button>\n</ids-toolbar-section>\n```\n\nFor compatibility with 4.x components Toolbars, the IDS Toolbar also supports `title` and `buttonset` section types that act similarly.  The styling is less rigid than in previous iterations, so to make a `buttonset` section \"right\"-aligned, it's necessary to add the `align=\"end\"` attribute:\n\n```html\n<ids-toolbar-section type=\"title\">\n    <ids-text font-size=\"20\">My Toolbar</ids-text>\n    <ids-text font-size=\"14\">With some extra information below</ids-text>\n</ids-toolbar-section>\n<ids-toolbar-section type=\"buttonset\" align=\"end\">\n    <ids-button id=\"button-1\" role=\"button\">\n        <span>Text</span>\n    </ids-button>\n    <ids-button id=\"button-2\">\n        <span class=\"audible\">Settings</span>\n        <ids-icon icon=\"settings\"></ids-icon>\n    </ids-button>\n</ids-toolbar-section>\n```\n\nToolbar Title sections can have multiple text elements, if needed:\n\n```html\n<ids-toolbar-section type=\"title\">\n    <ids-text font-size=\"20\">My Toolbar</ids-text>\n    <ids-text font-size=\"14\">With some extra information below</ids-text>\n</ids-toolbar-section>\n\n<!-- or... -->\n\n<ids-toolbar-section type=\"title\">\n    <ids-text font-size=\"20\">My Toolbar</ids-text>\n</ids-toolbar-section>\n```\n\nToolbar Buttonset sections can contain an indeterminate number of components.  Generally these are [Buttons](../ids-button/README.md), but other component types such as Hyperlinks and some Pickers are accepted.  The Buttonset Section is styled with CSS to prevent the wrapping of these elements to multiple lines, instead cutting off actions that don't fit.\n\n```html\n<ids-toolbar-section type=\"buttonset\" align=\"end\">\n    <ids-button id=\"button-1\" role=\"button\">\n        <span>Text</span>\n    </ids-button>\n    <ids-button id=\"button-2\">\n        <span class=\"audible\">Settings</span>\n        <ids-icon icon=\"settings\"></ids-icon>\n    </ids-button>\n    <ids-button id=\"button-3\" role=\"button\">\n        <span>Text</span>\n    </ids-button>\n    <ids-button id=\"button-4\" role=\"button\">\n        <span>Text</span>\n    </ids-button>\n</ids-toolbar-section>\n```\n\nToolbars can also contain sections that are meant to be customized with CSS.  It's possible to create custom static sections with the `static` type, but if you want to make a custom section that fills available space, use the `fluid` type:\n\n```html\n<ids-toolbar>\n    <!-- takes up as little space as possible --->\n    <ids-toolbar-section type=\"static\">\n        <ids-button id=\"button-1\" role=\"button\">\n            <span>Button 1</span>\n        </ids-button>\n    </ids-toolbar-section>\n\n    <!-- fills the rest of the toolbar space -->\n    <ids-toolbar-section type=\"fluid\" align=\"end\">\n        <ids-button id=\"button-2\" role=\"button\">\n            <span>Button 2</span>\n        </ids-button>\n    </ids-toolbar-section>\n<ids-toolbar>\n```\n\nThe toolbar can be set as the formatter styles:\n\n```html\n<ids-toolbar type=\"formatter\">\n  <ids-toolbar-section type=\"buttonset\">\n    <ids-button id=\"button-1\" role=\"button\">\n      <span>Button 1</span>\n    </ids-button>\n    <ids-separator vertical></ids-separator>\n    <ids-button id=\"button-2\" role=\"button\">\n      <span>Button 2</span>\n    </ids-button>\n  </ids-toolbar-section>\n<ids-toolbar>\n```\n\n### More Actions Button\n\nOptionally, toolbars can contain a \"More Actions\" Button, which is a [Menu Button]('../ids-menu-button/README.md) wrapped inside a special Toolbar Section.  This component's purpose is to provide ansulary actions that are related to your Toolbar's primary actions, but don't necessarily need to be readily available on a single click.  In responsive settings with many primary actions present, the Toolbar will collapse any actions that don't fit within its boundaries.  Optionally, the More Actions menu can display these collapsed actions at the top of its menu (also referred to as the \"overflow\" menu).\n\nThe Ids Toolbar More Actions component sits alongside the other toolbar sections, and contains a single slot that takes the same types of elements as a standard [Ids Popup Menu](../ids-popup-menu/README.md):\n\n```html\n<ids-toolbar-more-actions>\n    <ids-menu-group>\n        <ids-menu-item value=\"1\">Option One</ids-menu-item>\n        <ids-menu-item value=\"2\">Option Two</ids-menu-item>\n        <ids-menu-item value=\"3\">Option Three</ids-menu-item>\n        <ids-menu-item>More Options\n        <ids-popup-menu>\n            <ids-menu-group>\n            <ids-menu-item value=\"4\">Option Four</ids-menu-item>\n            <ids-menu-item value=\"5\">Option Five</ids-menu-item>\n            <ids-menu-item value=\"6\">Option Six</ids-menu-item>\n            </ids-menu-group>\n        </ids-popup-menu>\n        </ids-menu-item>\n    </ids-menu-group>\n</ids-toolbar-more-actions>\n```\n\nIf accompanied by a More Actions button with the `overflow` attribute set, Toolbar Actions that don't fit within their sections will be hidden in the Toolbar, but will also \"spill over\" into the More Actions menu, inside a special `IdsMenuGroup` with a `more-actions` attribute.  If a user clicks on one of the menu items that reflects a Toolbar element, the Toolbar element will also be \"clicked\".  This allows visually-hidden Toolbar actions to still remain available in responsive settings.\n\n```html\n<ids-toolbar-more-actions overflow>\n    <!--\n        Toolbar Items will be mirrored here inside a group that looks like:\n        <ids-menu-group more-actions>\n            <ids-menu-item>Text</ids-menu-item>\n            <ids-menu-item icon=\"settings\">Settings</ids-menu-item>\n            <ids-menu-item>Text</ids-menu-item>\n            <ids-menu-item>Text</ids-menu-item>\n        </ids-menu-group>\n    --->\n    <ids-menu-group>\n        <ids-menu-item value=\"1\">Option One</ids-menu-item>\n        <ids-menu-item value=\"2\">Option Two</ids-menu-item>\n        <ids-menu-item value=\"3\">Option Three</ids-menu-item>\n    </ids-menu-group>\n</ids-toolbar-more-actions>\n```\n\n### API Access\n\nAt the Toolbar level, it's possible to access all Items and Sections:\n\n```js\nconst items = document.querySelector('ids-toolbar').items;\nconst sections = document.querySelector('ids-toolbar').sections;\n```\n\nWithin each section, it's possible to access the section's items:\n\n```js\nconst items = document.querySelector('ids-toolbar-section').items;\n```\n\nWhen dealing with a More Actions button, its inner components' APIs are exposed:\n\n```js\nconst moreActionsButtonEl = document.querySelector('ids-toolbar-more-actions').button;\nconst moreActionsMenuEl = document.querySelector('ids-toolbar-more-actions').menu;\n```\n\nAccess to the different More Actions menu items is also exposed:\n\n```js\n// These items are defined inside the `<ids-toolbar-more-actions>` element's default slot.\nconst predefinedMenuItems = document.querySelector('ids-toolbar-more-actions').predefinedMenuItems;\n\n// These items are generated by the More Actions menu if the `overflow` attribute is set.\n// These items mirror the regular Toolbar elements.\nconst overflowMenuItems = document.querySelector('ids-toolbar-more-actions').overflowMenuItems;\n```\n\nOverflow menu items also provide a reference to their corresponding Toolbar element:\n\n```js\nconst overflowMenuItems = document.querySelector('ids-toolbar-more-actions').overflowMenuItems;\noverflowMenuItems.forEach((item) => {\n  console.info(item.overflowTarget); // <-- Points to the Toolbar button/element/etc\n});\n```\n\n### Events\n\nAll elements inside the Toolbar will fire a `selected` event when clicked.  The `selected` event from the More Actions menu's [IdsPopupMenu]('../ids-popup-menu/README.md) is converted into a Toolbar-compatible event automatically, so only one listener at the Toolbar level is needed:\n\n```js\nconst toolbarEl = document.querySelector('#my-toolbar');\ntoolbarEl.addEventListener('selected', (e) => {\n  console.info(e.detail); // Provides data about the originating element, and overflow status, if applicable\n}\n```\n\n## Keyboard Guidelines\n\nThe IDS Button doesn't contain any interactions beyond a standard HTMLButtonElement:\n\n- <kbd>Enter</kbd> keys selects a toolbar action and executes the action.  On menu buttons, the menu is activated/hidden, and an action is not executed until one of its menu items is selected.\n- <kbd>Left/Right Arrow</kbd> keys navigate the available toolbar items.\n- <kbd>Tab</kbd> or <kbd>Shift</kbd>/<kbd>Tab<kbd> keys cause navigation to occur.  When `tabbable=\"true\"`, using Tab/Shift+Tab causes navigation between Toolbar items. When `tabbable=\"false\"`, Navigation away from the toolbar will occur to the element after/before the Toolbar respectively.\n\n## Responsive Guidelines\n\n- Try not to provide an over-abundance of Toolbar Actions.  The Toolbar's intention is to provide contextual actions for a specific workflow. Providing too many actions can cause end-user confusion.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Toolbar was implemented in v4.0.0\n- Toolbar has new markup and can be invoked with `$('#my-toolbar').toolbar();`\n- Flex Toolbar replaced/deprecated Toolbar in v4.3.0\n- Flex Toolbar has new markup and can be invoked with `$('#my-toolbar').toolbarflex();`\n\n**4.x to 5.x**\n\n- Flex Toolbar is now a custom element `<ids-toolbar></ids-toolbar>`\n- Toolbar Sections are now codified as components `<ids-toolbar-section>`\n- More Actions Buttons are now a codified components `<ids-toolbar-more-actions>`\n- Toolbars now implement `tabbable` to enable use of (Shift)/Tab keys for navigation\n- Toolbar Section behavior is now controlled by attributes (`favor`, `type`, etc) instead of CSS classes.\n- Not including a More Actions button in markup explicitly disables the menu from being displayed.\n- The More Actions button can be configured NOT to automatically show overflow items by omitting its `overflow` attribute.  This allows for pre-defined menu items to be displayed without items being spilled over to the overflow menu.\n"}},{"name":"ids-tooltip","attributes":[{"name":"popup","values":[]},{"name":"beforeShow","description":"An async function that fires as the tooltip is showing allowing you to set contents.","values":[]},{"name":"delay","description":"Set how long after hover you should delay before showing","values":[]},{"name":"placement","description":"Sets the tooltip placement between left, right, top, bottom","values":[]},{"name":"target","description":"Set the target element for the tooltip","values":[]},{"name":"trigger","description":"Set trigger agains the target between hover, click and focus","values":[]},{"name":"visible","description":"Set tooltip immediately to visible/invisible","values":[]},{"name":"state","values":[]}],"description":{"kind":"markdown","value":"# Ids Tooltip Component\n\n## Description\n\nTooltips are a component thats used in conjunction with other components to show additional information and non critical information related to an element such as a button or field. A tooltip will displays information on either hover, tab and/or focus. In this version we have separated the tooltip from popups.\n\n## Use Cases\n\n- Displays additional non critical information thats not discernible from the interface/design.\n\n## Terminology\n\n- **Popup**: Any thing that popups up and positions use the ids-popup component\n- **Tooltip**: A message which appears when a cursor is positioned over an icon, image, hyperlink, or other element in a graphical user interface.\n\n## Features (With Code Examples)\n\nA normal tooltip used as a web component attached to a button.\n\n```html\n<ids-button id=\"button-1\">Example Button</ids-button>\n<ids-tooltip target=\"button-1\" placement=\"top\">Additional Information</ids-tooltip>\n```\n\nA tooltip can also be used more conveniently for text only tooltips on inputs and buttons as a mixin.\n\n```html\n<ids-button id=\"button-1\" tooltip=\"Additional Information\">Example Button</ids-button>\n```\n\nA tooltips content can be set in a synchronous way with the textContent attribute.\n\n```js\ndocument.querySelector('#button-1').textContent = 'New Content';\n```\n\nA tooltips content can be set in an synchronous way with the beforeShow property.\n\n```js\nconst dropdownAsync = document.querySelector('#dropdown-7');\n\ndropdownAsync.beforeShow = async function beforeShow() {\n  const url = '/data/bikes.json';\n  const res = await fetch(url);\n  const data = await res.json();\n  return data[1].manufacturerName;\n};\n```\n\nA tooltips can be manually set to visible, but it still needs an alignment target to do so.\n\n```js\ndocument.querySelector('#button-1').visible = true;\n```\n\n## Usage Guidance\n\n- Do not show critical information in a tooltip or use it for functionality, it should be strictly for supplemental information\n- Write concise tooltip text. Imagine someone on a small screen or with high zoom needing to pan around just to read the tooltip.\n- Avoid rich content. Formatting such as bold text, italics, headings, icons, etc. will not be conveyed through `aria-describedby` or `aria-labelledby`.\n- No interactive content. Any interactive content such as links or buttons should not be placed within a tooltip.\n\n## Settings and Attributes\n\n- `delay` {string | number} Set how long after hover you should delay before showing\n- `placement` {string} Sets the tooltip placement between left, right, top, bottom\n- `target` {string | HTMLElement} Set the target element via a css selector or HTMLElement\n- `trigger` {string} Set trigger agains the target between hover, click and focus\n- `visible` {string | boolean} Set tooltip immediately to visible/invisible\n\n## Events\n\n- `beforeshow` Fires just before the tooltip is shown (veto-able if returning false from the detail event)\n- `show` Fires at the time the ids-tooltip is shown\n- `aftershow` Fires after the tooltip is fully shown\n- `hide` Fires at the time the ids-tooltip is trying  to hide\n- `afterhide` Fires after the tooltip is fully hidden\n\n## Callbacks\n\n- `onHide` Fires when the tooltip is hidden\n\n## Themeable Parts\n\n- `popup` allows you to further style the popup container element\n- `tooltip` allows you to further style the tooltip element\n\n## States and Variations (With Code Examples)\n\n- Color\n- Open\n- Closed\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift+Tab</kbd>: If the element tooltip is showing on focus then this will cause the tooltip to appear.\n\n## Responsive Guidelines\n\n- Tooltips do not work well in mobile or in responsive situations and should be avoided. But the tooltip will attempt to adjust to fit the page as the popup menu allows.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Tooltips were implemented in v4.0.0\n- Tooltips have all new markup and classes, and can be invoked with `$('#my-element').tooltip()`.\n\n**4.x to 5.x**\n\n- Tooltip is now a custom element `<ids-tooltip></ids-tooltip>`\n- There is no longer a \"KeepOpen\" setting, instead add a component to the page and use `visible=true`\n- Tooltip can be used as a mixin or standalone component\n- Tooltip is no longer shared with popups so all options related to that are removed\n- Error Tooltips are removed/not needed at this time\n- attachToBody option is removed/not needed at this time\n- Content can now be set with `tooltipElem.textContent`\n- Instead of open and close use `tooltipElem.visible=true`\n- `aftershow` event was not needed as its the same as `show`, so this has been removed\n\n## Accessibility Guidelines\n\nFor a good article on making the tooltip accessible see [Tooltips WCAG 2.1](https://sarahmhigley.com/writing/tooltips-in-wcag-21/)\n\nTo make the tooltip accessible we do the following:\n\nWe use `aria-describedby` or `aria-labelledby` to associate the UI control with the tooltip. Do not put essential information in tooltips.\n\nThe following general rules apply:\n\n- Do not add interactive content (buttons/links ect) in a hyperlink\n- Only interactive elements should trigger tooltips. While disabled tooltips do work on hover they do not work on focus so are not accessible and should be avoided.- Tooltip text is purely supplemental, and should not override the existing accessible name for a control.\n\n## Regional Considerations\n\nTooltips should be localized in the current language. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai).\n"}},{"name":"ids-tree-node","attributes":[{"name":"nodeContainer","description":"Main node container","values":[]},{"name":"groupNodesEl","values":[]},{"name":"tree","values":[]},{"name":"isGroup","values":[]},{"name":"toggleIconHtml","description":"Gets toggle icon html","values":[]},{"name":"nodeIcon","description":"Gets the current node icon or expand/collapse icon","values":[]},{"name":"isSelected","description":"Gets the current state is selected or not","values":[]},{"name":"checkbox","values":[]},{"name":"isTabbable","description":"Gets the current state is tabbable or not","values":[]},{"name":"isMultiSelect","values":[]},{"name":"toggleClass","description":"Gets the current toggle css class name","values":[]},{"name":"toggleIcon","description":"Sets the tree group toggle icon","values":[]},{"name":"collapseIcon","description":"Sets the tree group collapse icon","values":[]},{"name":"disabled","description":"Sets the tree node to disabled","values":[]},{"name":"expandIcon","description":"Sets the tree group expand icon","values":[]},{"name":"expanded","description":"Sets the tree group to be expanded","values":[]},{"name":"icon","description":"Sets the tree node icon","values":[]},{"name":"label","description":"Set the node label text","values":[]},{"name":"selectable","description":"Sets the tree node to be selectable 'single', 'multiple'","values":[]},{"name":"selected","description":"Sets the tree node to be selected","values":[]},{"name":"tabbable","description":"Set if the node is tabbable","values":[]},{"name":"useToggleTarget","description":"Sets the tree to use toggle target","values":[]}],"description":{"kind":"markdown","value":"# Ids Tree Component\n\n## Description\n\nA tree is a structure that is hierarchical in structure. The tree consists of categories, subcategories and is vertical in format.\nTrees present a hierarchically structured list. Each node in the hierarchy may have child nodes, and nodes that have children may be expanded or collapsed to show or hide the children.\n\nFor example, in a file system that uses tree to display folders and files, a node representing a folder can be expanded to reveal the contents of the folder, which may be files, folders, or both. Tree node depth visualized by indentation in a list.\n\n## Use Cases\n\n- Tree component use to display hierarchically structured list.\n- To select node out of a set of hierarchically structured list nodes.\n\n## Terminology\n\n**Tree:** A hierarchical collection of labeled nodes, each represented by a TreeNode.\n**TreeNode:** A node can be expanded to reveal nodes, if any exist, and collapsed to hide nodes.\n**Text:** The label/text to represent each tree node.\n**Icon:** An icon to represent the node type tree node.\n**Badge:** Tree nodes can optionally display badges to visualize more data.\n\n## Features (With Code Examples)\n\nA normal tree used as a web component.\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\">\n  <ids-tree-node id=\"home\">Home</ids-tree-node>\n  <ids-tree-node id=\"public-folders\" label=\"Public Folders\">\n    <ids-tree-node id=\"leadership\">Leadership</ids-tree-node>\n  </ids-tree-node>\n</ids-tree>\n```\n\nA tree built as using data/datasource\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst treeDemo = document.querySelector('#tree-demo');\nif (treeDemo) {\n  (async function init() {\n    const url = '/data/tree-basic.json';\n    const res = await fetch(url);\n    const data = await res.json();\n    treeDemo.data = data;\n  }());\n}\n```\n\nA tree with expand or collapse group nodes\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\",\n  \"selected\": \"true\"\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"expanded\": \"true\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}, {\n  \"id\": \"icons\",\n  \"text\": \"Icons\",\n  \"expanded\": \"false\",\n  \"children\": [{\n    \"id\": \"audio\",\n    \"text\": \"Audio\",\n    \"icon\": \"tree-audio\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.data = dataset;\n```\n\nA tree with pre selected value thru data\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\",\n  \"selected\": \"true\"\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.data = dataset;\n```\n\nA tree using toggle target setting\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\"\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.useToggleTarget = true;\ntreeDemo?.data = dataset;\n```\n\nA tree using toggle target setting and (No Icon Rotation)\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\"\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.toggleIconRotate = false;\ntreeDemo?.useToggleTarget = true;\ntreeDemo?.data = dataset;\n```\n\nA tree with Custom Icons\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\"\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.useToggleTarget = true;\ntreeDemo?.toggleIconRotate = false;\ntreeDemo?.collapseIcon = 'user-folder-closed';\ntreeDemo?.expandIcon = 'user-folder-open';\ntreeDemo?.toggleCollapseIcon = 'chevron-right';\ntreeDemo?.toggleExpandIcon = 'chevron-down';\ntreeDemo?.icon = 'tree-doc';\ntreeDemo?.data = dataset;\n```\n\nA tree with Badges\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\",\n  \"badge\": {\n    \"text\": \"5\",\n    \"shape\": \"round\"\n  }\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.data = dataset;\n```\n\n## Settings and Attributes (Tree)\n\n- `collapseIcon` {string} Sets the tree group collapse icon\n- `data` {array} Set the data array for tree\n- `disabled` {boolean} Sets the tree to disabled state\n- `expandIcon` {string} Sets the tree group expand icon\n- `expanded` {boolean} Sets the tree to be expanded\n- `icon` {string} Sets the tree node icon\n- `label` {string} Set the tree aria label text\n- `selectable` {string} Sets the tree node to be selectable\n- `toggleCollapseIcon` {string} Sets the tree group toggle collapse icon\n- `toggleExpandIcon` {string} Sets the tree group toggle expand icon\n- `toggleIconRotate` {boolean} Sets the tree to use toggle icon rotate\n- `useToggleTarget` {boolean} Sets the tree to use toggle target\n\n## Settings and Attributes (Tree Node)\n\n- `collapseIcon` {string} Sets the tree group collapse icon\n- `disabled` {boolean} Sets the tree node to disabled\n- `expandIcon` {string} Sets the tree group expand icon\n- `expanded` {boolean} Sets the tree group to be expanded\n- `icon` {string} Sets the tree node icon\n- `label` {string} Set the node label text\n- `selectable` {string} Sets the tree node to be selectable\n- `selected` {boolean} Sets the tree node to be selected\n- `tabbable` {boolean} Set if the node is tabbable\n- `useToggleTarget` {boolean} Sets the tree node to use toggle target\n\n## Theme-able Parts (Tree)\n\n- `tree` allows you to further style the tree element\n\n## Theme-able Parts (Tree Node)\n\n- `group-node` allows you to further style the group node element\n- `node` allows you to further style the node element\n- `node-container` allows you to further style the node container element\n- `icon` allows you to further style the icon element\n- `toggle-icon` allows you to further style the toggle icon element\n- `text` allows you to further style the text element\n\n## Events (Tree)\n\n- `beforeselected` Fires before the tree node/group get selected, you can return false in the response to veto\n- `selected` Fires after the tree node/group get selected\n- `beforeunselected` Fires before the tree node/group get unselected, you can return false in the response to veto\n- `unselected` Fires after the tree node/group get unselected\n- `beforecollapsed` Fires before the tree group get collapsed, you can return false in the response to veto.\n- `collapsed` Fires after the tree group get collapsed\n- `beforeexpanded` Fires before the tree group get expanded, you can return false in the response to veto\n- `expanded` Fires after the tree group get expanded\n\n## Methods (Tree)\n\n- `collapseAll(): void` Collapse all attached nodes to the tree\n- `expandAll(): void` Expand all attached nodes to the tree\n- `collapse(selector: string): void` Collapse a tree node by given CSS selector\n- `expand(selector: string): void` Expand a tree node by given CSS selector\n- `toggle(selector: string): void` Toggle a tree node by given CSS selector\n- `select(selector: string): void` Selects a tree node by given CSS selector\n- `unselect(selector: string): void` UnSelects a tree node by given CSS selector\n- `isSelected(selector: string): boolean` Check if related node is selected or not, by given CSS selector\n- `getNode(selector: string): object` Get a tree node by given CSS selector\n\n## Methods (Tree Node)\n\n- `setFocus(): void` Set focus to node container\n\n## States and Variations (With Code Examples)\n\n- Badges: Ability to show some extra content\n- Custom Icons: End user can set custom icons to each node\n- Data/Datasource: Tree use the data array to set nodes\n- Disabled: Disabled nodes cannot be clicked, hovered, focused or selected\n- Expand or Collapse: Tree can display show/hide child nodes thru its parent/group node\n- Selection (single): Tree supports the single node selection\n- Toggle Target: This provide to toggle expand/collapse by icon only\n- Tree by Markup: Tree can set thru the markup only\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift + Tab</kbd>: This will focus or unfocus the tree.\n- <kbd>Enter or Space</kbd>: Performs the default action (select and toggle node) as on click event for the focused node.\n- <kbd>Down Arrow</kbd>: Moves focus to the next node that is focusable without opening or closing a node. If focus is on the last node, it does nothing.\n- <kbd>Up Arrow</kbd>: Moves focus to the previous node that is focusable without opening or closing a node. If focus is on the first node, it does nothing.\n- <kbd>Right Arrow</kbd>: When focus is on a closed node, it opens the node and focus does not move. When focus is on a open node, it moves focus to the first child node. When focus is on an end node, it does nothing.\n- <kbd>Left Arrow</kbd>: When focus is on an open node, it closes the node. When focus is on a child node that is also either node or a closed group node, it moves focus to its parent node. When focus is on a root node that is also either node or a closed group node, it does nothing.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container.\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/ri2Knf3KchdfdzRAeds0Ab/IDS-Mobility-v4.6?node-id=1%3A5740)\n\n## Accessibility Guidelines\n\n- Tree component contained in the element has a `role=\"tree\"` and `aria-label`\n- Each node element contains with `role=\"treeitem\"`\n- Each node element contains its current state with a `boolean` value as `aria-disabled`, `aria-selected`  and if it's a parent/group node `aria-expanded`\n- Each node element contains its current position with a `number` value as `aria-level`, `aria-setsize`, `aria-posinset`\n- Each parent/group node element contains with `role=\"group\"`\n\n## Regional Considerations\n\nIn Right To Left Languages the icons, text and alignment will flow to the other side. Labels should be localized in the current language.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Tree was introduced in v4.2.0\n- Tree is comprised of new HTML markup and classes, and is invoked with `$('#my-element').tree()`.\n\n**4.x to 5.x**\n\n- Tree is now a custom element. `<ids-tree></ids-tree>`\n- Individual Tree nodes are now also custom elements. `<ids-tree-node></ids-tree-node>`\n- Tree nodes can contain other tree nodes (nesting).\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles.\n"}},{"name":"ids-tree-shared","description":{"kind":"markdown","value":"# Ids Tree Component\n\n## Description\n\nA tree is a structure that is hierarchical in structure. The tree consists of categories, subcategories and is vertical in format.\nTrees present a hierarchically structured list. Each node in the hierarchy may have child nodes, and nodes that have children may be expanded or collapsed to show or hide the children.\n\nFor example, in a file system that uses tree to display folders and files, a node representing a folder can be expanded to reveal the contents of the folder, which may be files, folders, or both. Tree node depth visualized by indentation in a list.\n\n## Use Cases\n\n- Tree component use to display hierarchically structured list.\n- To select node out of a set of hierarchically structured list nodes.\n\n## Terminology\n\n**Tree:** A hierarchical collection of labeled nodes, each represented by a TreeNode.\n**TreeNode:** A node can be expanded to reveal nodes, if any exist, and collapsed to hide nodes.\n**Text:** The label/text to represent each tree node.\n**Icon:** An icon to represent the node type tree node.\n**Badge:** Tree nodes can optionally display badges to visualize more data.\n\n## Features (With Code Examples)\n\nA normal tree used as a web component.\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\">\n  <ids-tree-node id=\"home\">Home</ids-tree-node>\n  <ids-tree-node id=\"public-folders\" label=\"Public Folders\">\n    <ids-tree-node id=\"leadership\">Leadership</ids-tree-node>\n  </ids-tree-node>\n</ids-tree>\n```\n\nA tree built as using data/datasource\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst treeDemo = document.querySelector('#tree-demo');\nif (treeDemo) {\n  (async function init() {\n    const url = '/data/tree-basic.json';\n    const res = await fetch(url);\n    const data = await res.json();\n    treeDemo.data = data;\n  }());\n}\n```\n\nA tree with expand or collapse group nodes\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\",\n  \"selected\": \"true\"\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"expanded\": \"true\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}, {\n  \"id\": \"icons\",\n  \"text\": \"Icons\",\n  \"expanded\": \"false\",\n  \"children\": [{\n    \"id\": \"audio\",\n    \"text\": \"Audio\",\n    \"icon\": \"tree-audio\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.data = dataset;\n```\n\nA tree with pre selected value thru data\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\",\n  \"selected\": \"true\"\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.data = dataset;\n```\n\nA tree using toggle target setting\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\"\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.useToggleTarget = true;\ntreeDemo?.data = dataset;\n```\n\nA tree using toggle target setting and (No Icon Rotation)\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\"\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.toggleIconRotate = false;\ntreeDemo?.useToggleTarget = true;\ntreeDemo?.data = dataset;\n```\n\nA tree with Custom Icons\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\"\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.useToggleTarget = true;\ntreeDemo?.toggleIconRotate = false;\ntreeDemo?.collapseIcon = 'user-folder-closed';\ntreeDemo?.expandIcon = 'user-folder-open';\ntreeDemo?.toggleCollapseIcon = 'chevron-right';\ntreeDemo?.toggleExpandIcon = 'chevron-down';\ntreeDemo?.icon = 'tree-doc';\ntreeDemo?.data = dataset;\n```\n\nA tree with Badges\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\",\n  \"badge\": {\n    \"text\": \"5\",\n    \"shape\": \"round\"\n  }\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.data = dataset;\n```\n\n## Settings and Attributes (Tree)\n\n- `collapseIcon` {string} Sets the tree group collapse icon\n- `data` {array} Set the data array for tree\n- `disabled` {boolean} Sets the tree to disabled state\n- `expandIcon` {string} Sets the tree group expand icon\n- `expanded` {boolean} Sets the tree to be expanded\n- `icon` {string} Sets the tree node icon\n- `label` {string} Set the tree aria label text\n- `selectable` {string} Sets the tree node to be selectable\n- `toggleCollapseIcon` {string} Sets the tree group toggle collapse icon\n- `toggleExpandIcon` {string} Sets the tree group toggle expand icon\n- `toggleIconRotate` {boolean} Sets the tree to use toggle icon rotate\n- `useToggleTarget` {boolean} Sets the tree to use toggle target\n\n## Settings and Attributes (Tree Node)\n\n- `collapseIcon` {string} Sets the tree group collapse icon\n- `disabled` {boolean} Sets the tree node to disabled\n- `expandIcon` {string} Sets the tree group expand icon\n- `expanded` {boolean} Sets the tree group to be expanded\n- `icon` {string} Sets the tree node icon\n- `label` {string} Set the node label text\n- `selectable` {string} Sets the tree node to be selectable\n- `selected` {boolean} Sets the tree node to be selected\n- `tabbable` {boolean} Set if the node is tabbable\n- `useToggleTarget` {boolean} Sets the tree node to use toggle target\n\n## Theme-able Parts (Tree)\n\n- `tree` allows you to further style the tree element\n\n## Theme-able Parts (Tree Node)\n\n- `group-node` allows you to further style the group node element\n- `node` allows you to further style the node element\n- `node-container` allows you to further style the node container element\n- `icon` allows you to further style the icon element\n- `toggle-icon` allows you to further style the toggle icon element\n- `text` allows you to further style the text element\n\n## Events (Tree)\n\n- `beforeselected` Fires before the tree node/group get selected, you can return false in the response to veto\n- `selected` Fires after the tree node/group get selected\n- `beforeunselected` Fires before the tree node/group get unselected, you can return false in the response to veto\n- `unselected` Fires after the tree node/group get unselected\n- `beforecollapsed` Fires before the tree group get collapsed, you can return false in the response to veto.\n- `collapsed` Fires after the tree group get collapsed\n- `beforeexpanded` Fires before the tree group get expanded, you can return false in the response to veto\n- `expanded` Fires after the tree group get expanded\n\n## Methods (Tree)\n\n- `collapseAll(): void` Collapse all attached nodes to the tree\n- `expandAll(): void` Expand all attached nodes to the tree\n- `collapse(selector: string): void` Collapse a tree node by given CSS selector\n- `expand(selector: string): void` Expand a tree node by given CSS selector\n- `toggle(selector: string): void` Toggle a tree node by given CSS selector\n- `select(selector: string): void` Selects a tree node by given CSS selector\n- `unselect(selector: string): void` UnSelects a tree node by given CSS selector\n- `isSelected(selector: string): boolean` Check if related node is selected or not, by given CSS selector\n- `getNode(selector: string): object` Get a tree node by given CSS selector\n\n## Methods (Tree Node)\n\n- `setFocus(): void` Set focus to node container\n\n## States and Variations (With Code Examples)\n\n- Badges: Ability to show some extra content\n- Custom Icons: End user can set custom icons to each node\n- Data/Datasource: Tree use the data array to set nodes\n- Disabled: Disabled nodes cannot be clicked, hovered, focused or selected\n- Expand or Collapse: Tree can display show/hide child nodes thru its parent/group node\n- Selection (single): Tree supports the single node selection\n- Toggle Target: This provide to toggle expand/collapse by icon only\n- Tree by Markup: Tree can set thru the markup only\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift + Tab</kbd>: This will focus or unfocus the tree.\n- <kbd>Enter or Space</kbd>: Performs the default action (select and toggle node) as on click event for the focused node.\n- <kbd>Down Arrow</kbd>: Moves focus to the next node that is focusable without opening or closing a node. If focus is on the last node, it does nothing.\n- <kbd>Up Arrow</kbd>: Moves focus to the previous node that is focusable without opening or closing a node. If focus is on the first node, it does nothing.\n- <kbd>Right Arrow</kbd>: When focus is on a closed node, it opens the node and focus does not move. When focus is on a open node, it moves focus to the first child node. When focus is on an end node, it does nothing.\n- <kbd>Left Arrow</kbd>: When focus is on an open node, it closes the node. When focus is on a child node that is also either node or a closed group node, it moves focus to its parent node. When focus is on a root node that is also either node or a closed group node, it does nothing.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container.\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/ri2Knf3KchdfdzRAeds0Ab/IDS-Mobility-v4.6?node-id=1%3A5740)\n\n## Accessibility Guidelines\n\n- Tree component contained in the element has a `role=\"tree\"` and `aria-label`\n- Each node element contains with `role=\"treeitem\"`\n- Each node element contains its current state with a `boolean` value as `aria-disabled`, `aria-selected`  and if it's a parent/group node `aria-expanded`\n- Each node element contains its current position with a `number` value as `aria-level`, `aria-setsize`, `aria-posinset`\n- Each parent/group node element contains with `role=\"group\"`\n\n## Regional Considerations\n\nIn Right To Left Languages the icons, text and alignment will flow to the other side. Labels should be localized in the current language.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Tree was introduced in v4.2.0\n- Tree is comprised of new HTML markup and classes, and is invoked with `$('#my-element').tree()`.\n\n**4.x to 5.x**\n\n- Tree is now a custom element. `<ids-tree></ids-tree>`\n- Individual Tree nodes are now also custom elements. `<ids-tree-node></ids-tree-node>`\n- Tree nodes can contain other tree nodes (nesting).\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles.\n"}},{"name":"ids-tree","attributes":[{"name":"datasource","description":"Tree datasource.","values":[]},{"name":"#active","description":"Active node elements.","values":[]},{"name":"#nodes","description":"List of node elements attached to tree.","values":[]},{"name":"#nodesData","description":"The current flatten data array.","values":[]},{"name":"selected","description":"The currently selected","values":[]},{"name":"collapseIcon","description":"Sets the tree group collapse icon","values":[]},{"name":"data","description":"Set the data array of the tree","values":[]},{"name":"disabled","description":"Sets the tree to disabled","values":[]},{"name":"expandIcon","description":"Sets the tree group expand icon","values":[]},{"name":"expanded","description":"Sets the tree to be expanded","values":[]},{"name":"icon","description":"Sets the tree node icon","values":[]},{"name":"label","description":"Set the tree aria label text","values":[]},{"name":"selectable","description":"Sets the tree group to be selectable 'single', 'multiple'","values":[]},{"name":"isMultiSelect","values":[]},{"name":"toggleCollapseIcon","description":"Sets the tree group toggle collapse icon","values":[]},{"name":"toggleExpandIcon","description":"Sets the tree group toggle expand icon","values":[]},{"name":"toggleIconRotate","description":"Sets the tree to use toggle icon rotate","values":[]},{"name":"useToggleTarget","description":"Sets the tree to use toggle target","values":[]}],"description":{"kind":"markdown","value":"# Ids Tree Component\n\n## Description\n\nA tree is a structure that is hierarchical in structure. The tree consists of categories, subcategories and is vertical in format.\nTrees present a hierarchically structured list. Each node in the hierarchy may have child nodes, and nodes that have children may be expanded or collapsed to show or hide the children.\n\nFor example, in a file system that uses tree to display folders and files, a node representing a folder can be expanded to reveal the contents of the folder, which may be files, folders, or both. Tree node depth visualized by indentation in a list.\n\n## Use Cases\n\n- Tree component use to display hierarchically structured list.\n- To select node out of a set of hierarchically structured list nodes.\n\n## Terminology\n\n**Tree:** A hierarchical collection of labeled nodes, each represented by a TreeNode.\n**TreeNode:** A node can be expanded to reveal nodes, if any exist, and collapsed to hide nodes.\n**Text:** The label/text to represent each tree node.\n**Icon:** An icon to represent the node type tree node.\n**Badge:** Tree nodes can optionally display badges to visualize more data.\n\n## Features (With Code Examples)\n\nA normal tree used as a web component.\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\">\n  <ids-tree-node id=\"home\">Home</ids-tree-node>\n  <ids-tree-node id=\"public-folders\" label=\"Public Folders\">\n    <ids-tree-node id=\"leadership\">Leadership</ids-tree-node>\n  </ids-tree-node>\n</ids-tree>\n```\n\nA tree built as using data/datasource\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst treeDemo = document.querySelector('#tree-demo');\nif (treeDemo) {\n  (async function init() {\n    const url = '/data/tree-basic.json';\n    const res = await fetch(url);\n    const data = await res.json();\n    treeDemo.data = data;\n  }());\n}\n```\n\nA tree with expand or collapse group nodes\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\",\n  \"selected\": \"true\"\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"expanded\": \"true\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}, {\n  \"id\": \"icons\",\n  \"text\": \"Icons\",\n  \"expanded\": \"false\",\n  \"children\": [{\n    \"id\": \"audio\",\n    \"text\": \"Audio\",\n    \"icon\": \"tree-audio\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.data = dataset;\n```\n\nA tree with pre selected value thru data\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\",\n  \"selected\": \"true\"\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.data = dataset;\n```\n\nA tree using toggle target setting\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\"\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.useToggleTarget = true;\ntreeDemo?.data = dataset;\n```\n\nA tree using toggle target setting and (No Icon Rotation)\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\"\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.toggleIconRotate = false;\ntreeDemo?.useToggleTarget = true;\ntreeDemo?.data = dataset;\n```\n\nA tree with Custom Icons\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\"\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.useToggleTarget = true;\ntreeDemo?.toggleIconRotate = false;\ntreeDemo?.collapseIcon = 'user-folder-closed';\ntreeDemo?.expandIcon = 'user-folder-open';\ntreeDemo?.toggleCollapseIcon = 'chevron-right';\ntreeDemo?.toggleExpandIcon = 'chevron-down';\ntreeDemo?.icon = 'tree-doc';\ntreeDemo?.data = dataset;\n```\n\nA tree with Badges\n\n```html\n<ids-tree id=\"tree-demo\" label=\"Demo Tree\"></ids-tree>\n```\n\n```javascript\nconst dataset = [{\n  \"id\": \"home\",\n  \"text\": \"Home\",\n  \"badge\": {\n    \"text\": \"5\",\n    \"shape\": \"round\"\n  }\n}, {\n  \"id\": \"public-folders\",\n  \"text\": \"Public Folders\",\n  \"children\": [{\n    \"id\": \"leadership\",\n    \"text\": \"Leadership\"\n  }]\n}];\nconst treeDemo = document.querySelector('#tree-demo');\ntreeDemo?.data = dataset;\n```\n\n## Settings and Attributes (Tree)\n\n- `collapseIcon` {string} Sets the tree group collapse icon\n- `data` {array} Set the data array for tree\n- `disabled` {boolean} Sets the tree to disabled state\n- `expandIcon` {string} Sets the tree group expand icon\n- `expanded` {boolean} Sets the tree to be expanded\n- `icon` {string} Sets the tree node icon\n- `label` {string} Set the tree aria label text\n- `selectable` {string} Sets the tree node to be selectable\n- `toggleCollapseIcon` {string} Sets the tree group toggle collapse icon\n- `toggleExpandIcon` {string} Sets the tree group toggle expand icon\n- `toggleIconRotate` {boolean} Sets the tree to use toggle icon rotate\n- `useToggleTarget` {boolean} Sets the tree to use toggle target\n\n## Settings and Attributes (Tree Node)\n\n- `collapseIcon` {string} Sets the tree group collapse icon\n- `disabled` {boolean} Sets the tree node to disabled\n- `expandIcon` {string} Sets the tree group expand icon\n- `expanded` {boolean} Sets the tree group to be expanded\n- `icon` {string} Sets the tree node icon\n- `label` {string} Set the node label text\n- `selectable` {string} Sets the tree node to be selectable\n- `selected` {boolean} Sets the tree node to be selected\n- `tabbable` {boolean} Set if the node is tabbable\n- `useToggleTarget` {boolean} Sets the tree node to use toggle target\n\n## Theme-able Parts (Tree)\n\n- `tree` allows you to further style the tree element\n\n## Theme-able Parts (Tree Node)\n\n- `group-node` allows you to further style the group node element\n- `node` allows you to further style the node element\n- `node-container` allows you to further style the node container element\n- `icon` allows you to further style the icon element\n- `toggle-icon` allows you to further style the toggle icon element\n- `text` allows you to further style the text element\n\n## Events (Tree)\n\n- `beforeselected` Fires before the tree node/group get selected, you can return false in the response to veto\n- `selected` Fires after the tree node/group get selected\n- `beforeunselected` Fires before the tree node/group get unselected, you can return false in the response to veto\n- `unselected` Fires after the tree node/group get unselected\n- `beforecollapsed` Fires before the tree group get collapsed, you can return false in the response to veto.\n- `collapsed` Fires after the tree group get collapsed\n- `beforeexpanded` Fires before the tree group get expanded, you can return false in the response to veto\n- `expanded` Fires after the tree group get expanded\n\n## Methods (Tree)\n\n- `collapseAll(): void` Collapse all attached nodes to the tree\n- `expandAll(): void` Expand all attached nodes to the tree\n- `collapse(selector: string): void` Collapse a tree node by given CSS selector\n- `expand(selector: string): void` Expand a tree node by given CSS selector\n- `toggle(selector: string): void` Toggle a tree node by given CSS selector\n- `select(selector: string): void` Selects a tree node by given CSS selector\n- `unselect(selector: string): void` UnSelects a tree node by given CSS selector\n- `isSelected(selector: string): boolean` Check if related node is selected or not, by given CSS selector\n- `getNode(selector: string): object` Get a tree node by given CSS selector\n\n## Methods (Tree Node)\n\n- `setFocus(): void` Set focus to node container\n\n## States and Variations (With Code Examples)\n\n- Badges: Ability to show some extra content\n- Custom Icons: End user can set custom icons to each node\n- Data/Datasource: Tree use the data array to set nodes\n- Disabled: Disabled nodes cannot be clicked, hovered, focused or selected\n- Expand or Collapse: Tree can display show/hide child nodes thru its parent/group node\n- Selection (single): Tree supports the single node selection\n- Toggle Target: This provide to toggle expand/collapse by icon only\n- Tree by Markup: Tree can set thru the markup only\n\n## Keyboard Guidelines\n\n- <kbd>Tab/Shift + Tab</kbd>: This will focus or unfocus the tree.\n- <kbd>Enter or Space</kbd>: Performs the default action (select and toggle node) as on click event for the focused node.\n- <kbd>Down Arrow</kbd>: Moves focus to the next node that is focusable without opening or closing a node. If focus is on the last node, it does nothing.\n- <kbd>Up Arrow</kbd>: Moves focus to the previous node that is focusable without opening or closing a node. If focus is on the first node, it does nothing.\n- <kbd>Right Arrow</kbd>: When focus is on a closed node, it opens the node and focus does not move. When focus is on a open node, it moves focus to the first child node. When focus is on an end node, it does nothing.\n- <kbd>Left Arrow</kbd>: When focus is on an open node, it closes the node. When focus is on a child node that is also either node or a closed group node, it moves focus to its parent node. When focus is on a root node that is also either node or a closed group node, it does nothing.\n\n## Responsive Guidelines\n\n- Flows with padding and margin within the width and height of the parent container.\n\n## Designs\n\n[Design Specs](https://www.figma.com/file/ri2Knf3KchdfdzRAeds0Ab/IDS-Mobility-v4.6?node-id=1%3A5740)\n\n## Accessibility Guidelines\n\n- Tree component contained in the element has a `role=\"tree\"` and `aria-label`\n- Each node element contains with `role=\"treeitem\"`\n- Each node element contains its current state with a `boolean` value as `aria-disabled`, `aria-selected`  and if it's a parent/group node `aria-expanded`\n- Each node element contains its current position with a `number` value as `aria-level`, `aria-setsize`, `aria-posinset`\n- Each parent/group node element contains with `role=\"group\"`\n\n## Regional Considerations\n\nIn Right To Left Languages the icons, text and alignment will flow to the other side. Labels should be localized in the current language.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Tree was introduced in v4.2.0\n- Tree is comprised of new HTML markup and classes, and is invoked with `$('#my-element').tree()`.\n\n**4.x to 5.x**\n\n- Tree is now a custom element. `<ids-tree></ids-tree>`\n- Individual Tree nodes are now also custom elements. `<ids-tree-node></ids-tree-node>`\n- Tree nodes can contain other tree nodes (nesting).\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles.\n"}},{"name":"ids-treemap","attributes":[{"name":"d","values":[]},{"name":"height","values":[]},{"name":"width","values":[]},{"name":"Rectangle","values":[]},{"name":"initialData","values":[]},{"name":"data","description":"Get the data attribute","values":[]},{"name":"#getMaximum","description":"Get max number","values":[]},{"name":"#getMinimum","description":"Get min number","values":[]},{"name":"#sumReducer","description":"Sum Reducer","values":[]},{"name":"#roundValue","description":"Round Value and preserve 2 decimals","values":[]},{"name":"#validateArguments","description":"Validate the treemap object.","values":[]},{"name":"#worstRatio","description":"Calculate worst ratio","values":[]},{"name":"#getMinWidth","description":"Get the min width","values":[]},{"name":"#layoutRow","description":"Layout Row","values":[]},{"name":"#layoutLastRow","description":"Layout last row","values":[]},{"name":"#squarify","description":"Squarify","values":[]}],"description":{"kind":"markdown","value":"# Ids Treemap Component\n\n## Description\n\nTreemaps are used to display hierarchical data. This is useful when space is constrained and you need to see an overview of a large amount of hierarchical data. Treemaps should primarily be used with values that can be aggregated. Treemaps are economical in that they can be used within a limited space and yet display a large number of items simultaneously. When there is a correlation between color and size in the tree structure, you are able to see patterns that would be difficult to spot in other ways, for example, when a certain color is particularly relevant.\n\nTreemaps are not good when there is a big difference in the magnitude of the measure values. Nor is a treemap the right choice when mixing absolute and relative values. Negative values cannot be displayed in treemaps.\n\n## Terminology\n**result** This is a property / attr where the treemap data object gets stored.\n**title** This is an attribute where the treemap title is stored.\n\n## Features (With Code Examples)\n\n```html\n    <ids-treemap title=\"Storage Utilization (78 GB)\"></ids-treemap>\n```\n\n```js\nconst treeMapEl = document.querySelector('ids-treemap');\n\n  treeMapEl.result = treeMapEl.treeMap({\n    data: [\n      {\n        value: 28,\n        color: '#003876',\n        text: 'JSON',\n        label: '28%'\n      },\n      {\n        value: 18,\n        color: '#004A99',\n        text: 'PDF',\n        label: '18%'\n      },\n      {\n        value: 8,\n        color: '#0054B1',\n        text: 'BOD',\n        label: '8%'\n      },\n      {\n        value: 8,\n        color: '#0066D4',\n        text: 'TXT',\n        label: '8%'\n      },\n      {\n        value: 17,\n        color: '#0072ED',\n        text: 'CSV',\n        label: '17%'\n      },\n      {\n        value: 7,\n        color: '#1C86EF',\n        text: 'Assets',\n        label: '7%'\n      },\n      {\n        value: 14,\n        color: '#55A3F3',\n        text: 'Others',\n        label: '14%'\n      },\n    ],\n    width: 1000, // Optional. By default takes the width of the container.\n    height: 300\n  });\n```\n\n## Accessibility Guidelines\n\nThe contrast and actual colors can be a concern for visibility impaired and color blind people. However, you can customize the color by passing different contrast colors in the color option.\n\n## Usage Guidance\n\n- **data** Required. The data format should be as follows:\n```js\n{\n    data: [{\n        value: 28,\n        color: '#003876',\n        text: 'JSON',\n        label: '28%'\n      },\n      {\n        value: 18,\n        color: '#004A99',\n        text: 'PDF',\n        label: '18%'\n      }\n    ],\n    height: 300\n}\n```\n\n- **width** By default the treemap takes on the width of the container. The treemap will resize as the screen size changes.\n= **height** Required. You will need to set the height for the treemap.\n\n## Keyboard Shortcuts\n\nThis chart has no keyboard functionality\n\n## Responsive Information\n\nAs you resize the chart will redraw with in the width of the container width. The nodes in the treemap are sized in proportion.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Treemap was a new component created in v4.6.0\n\n**4.x to 5.x**\n\n- Treemap is now a custom element `<ids-treemap></ids-treemap>`\n"}},{"name":"ids-trigger-button","attributes":[{"name":"protoClasses","description":"Figure out the classes","values":[]},{"name":"tabbable","description":"Set if the trigger field is tabbable","values":[]},{"name":"readonly","description":"Set the trigger button to readonly color","values":[]},{"name":"inlineCssClass","values":[]},{"name":"inline","values":[]},{"name":"inheritColor","values":[]},{"name":"shouldUpdate","values":[]},{"name":"colorVariants","description":"Inherited from `IdsColorVariantMixin`","values":[]},{"name":"button","values":[]},{"name":"cssClass","values":[]},{"name":"disabled","description":"Passes a disabled attribute from the custom element to the button","values":[]},{"name":"#tabIndex","description":"Passes a tabIndex attribute from the custom element to the button","values":[]},{"name":"icon","description":"Gets the current icon used on the button","values":[]},{"name":"iconEl","description":"Gets the current icon element","values":[]},{"name":"iconAlign","description":"Sets the automatic alignment of an existing icon to the 'start' or 'end' of the text","values":[]},{"name":"width","description":"Set width of button","values":[]},{"name":"text","values":[]},{"name":"appearance","description":"Set the button appearance between 'default', 'primary', 'secondary', 'tertiary', or 'destructive'","values":[]},{"name":"type","description":"Sets the HTMLButtonElement 'type' attribute","values":[]},{"name":"noMargins","description":"Sets the no margins attribute","values":[]},{"name":"noPadding","values":[]},{"name":"square","values":[]}],"description":{"kind":"markdown","value":"# Ids Trigger Field Component\n\n## Description\n\nWe include a trigger field component that helps layout an input next to a button (the trigger button). This component can be used on its own, but its generally used to make other internal components (date picker, time picker ect).\n\n## Class Hierarchy\n\n- IdsTriggerField\n  - IdsInput\n    - IdsElement\n- Mixins\n  IdsDirtyTrackerMixin\n  IdsColorVariantMixin\n  IdsClearableMixin\n  IdsEventsMixin\n  IdsKeyboardMixin\n  IdsMaskMixin\n  IdsTooltipMixin\n  IdsValidationMixin\n\n## Use Cases\n\n- When you want an input with a trigger button/buttons that opens some kind of selection dialog that works with the field.\n\n## Terminology\n\n- **Trigger**: The button next to the input element\n- **Input**: The input element\n\n## Features (With Code Examples)\n\nAdd an IdsTriggerField to the page and inside its slot add one or more ids-trigger-buttons.  The `slot` attribute can be applied the IdsTriggerButton to control its placement, but by default they will appear at the \"end\" side of the trigger field:\n\n```html\n<ids-trigger-field size=\"sm\" label=\"Date Field\">\n  <ids-trigger-button slot=\"end\">\n    <ids-text audible=\"true\">Date Field trigger</ids-text>\n    <ids-icon icon=\"schedule\"></ids-icon>\n  </ids-trigger-button>\n</ids-trigger-field>\n```\n\nExample usage with buttons on both sides of input.\n\n```html\n<ids-trigger-field\n    id=\"trigger-field-1\"\n    label=\"Trigger field label\"\n>\n  <ids-trigger-button slot=\"start\">\n    <ids-icon class=\"ids-settings\" icon=\"settings\" size=\"medium\"></ids-icon>\n    <ids-text audible=\"true\">Call to action Button</ids-text>\n  </ids-trigger-button>\n  <ids-trigger-button slot=\"end\">\n    <ids-text audible=\"true\">Popup Activator Button</ids-text>\n    <ids-icon class=\"ids-dropdown\" icon=\"dropdown\" size=\"medium\"></ids-icon>\n  </ids-trigger-button>\n</ids-trigger-field>\n```\n\nThe `inline` attribute can be applied the IdsTriggerButton to alter the size of the field when the field height changes. Since trigger buttons are \"square\", they will respect the settings and fit the size of the field.\n\nExample usage with `inline` attribute enabled in ids-trigger-buttons.\n\n```html\n<ids-trigger-field size=\"sm\" label=\"Select an option\">\n  <ids-trigger-button slot=\"trigger-end\" inline>\n    <ids-text>Show options</ids-text>\n    <ids-icon icon=\"dropdown\"></ids-icon>\n  </ids-trigger-button>\n</ids-trigger-field>\n```\n\n## Settings and Attributes\n\n**Ids Trigger Field Component**\n  - `disabled` {boolean} set disabled state.\n  - `label` {string} This adds a label to the trigger field\n  - `size` {string} set the input size, it will set `md` as defaults\n  - `tabbable` {boolean} Turns on the functionality allow the trigger to be tabbable. For accessibility reasons this should be on in most cases and this is the default.\n  - `delimiter` {string} The delimiter to use when multiple values are selected.\n\n**Ids Trigger Button Component**\n  - `inline` {boolean} when some components alter the trigger button style to enable `inline`, it will:\n    - Set one visible border on the trigger botton:\n      - left side if slotted with \"trigger-end\"\n      - right side if slotted with \"trigger-start\"\n    - Alter the size of the trigger button to fit the size of the field if `field-height` or `compact` are set on IdsTriggerField.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- No separate Trigger Field component is present in 4.x\n\n**4.x to 5.x**\n\n- IdsTriggerField is a new component for 5.x\n\n## Regional Considerations\n\nIn Right To Left Languages the trigger field and alignment will flow to the other side.\n"}},{"name":"ids-trigger-field","attributes":[{"name":"elements","description":"Get a list of element dependencies for this component","values":[]},{"name":"buttons","values":[]},{"name":"tabbable","values":[]},{"name":"disabled","description":"Sets the disabled attribute","values":[]},{"name":"readonly","description":"Sets the readonly attribute","values":[]},{"name":"format","description":"Return format","values":[]},{"name":"generatedId","values":[]},{"name":"triggeredByChange","values":[]},{"name":"isFormComponent","values":[]},{"name":"colorVariants","description":"Inherited from `IdsColorVariantMixin`","values":[]},{"name":"isPasswordVisible","values":[]},{"name":"input","values":[]},{"name":"capsLockIcon","values":[]},{"name":"fieldContainer","values":[]},{"name":"labelEl","values":[]},{"name":"revealablePassword","description":"sets whether password reveal functionality is available","values":[]},{"name":"capsLock","description":"sets whether capslock indicatoris enabled or disabled","values":[]},{"name":"passwordVisible","description":"sets whether the password is currently visible","values":[]},{"name":"active","description":"When set the input will add a CSS class `is-active` that simulates the text input being \"focused\".","values":[]},{"name":"autoselect","description":"When set the input will select all text on focus","values":[]},{"name":"bgTransparent","description":"When set the input will add css class `bg-transparent`","values":[]},{"name":"textEllipsis","description":"When set the input will add css class `text-ellipsis`","values":[]},{"name":"#labelEl","description":"internal reference to a label element a user provides","values":[]},{"name":"placeholder","description":"Set the `placeholder` of input","values":[]},{"name":"readonlyBackground","values":[]},{"name":"labelWrap","description":"Set the label wrap setting of input","values":[]},{"name":"size","description":"Set the size (width) of input","values":[]},{"name":"textAlign","description":"Sets the text alignment","values":[]},{"name":"type","description":"Sets the input type","values":[]},{"name":"value","description":"Set the `value` attribute of input","values":[]},{"name":"#id","description":"set the id of the input, which will also determine the\ninput id for labels at #${id}-input","values":[]},{"name":"cursor","description":"Set the css cursor property to something other than text","values":[]},{"name":"noMargins","description":"Sets the no margins attribute","values":[]},{"name":"padding","description":"Sets the inner padding (inline-start and end)","values":[]}],"description":{"kind":"markdown","value":"# Ids Trigger Field Component\n\n## Description\n\nWe include a trigger field component that helps layout an input next to a button (the trigger button). This component can be used on its own, but its generally used to make other internal components (date picker, time picker ect).\n\n## Class Hierarchy\n\n- IdsTriggerField\n  - IdsInput\n    - IdsElement\n- Mixins\n  IdsDirtyTrackerMixin\n  IdsColorVariantMixin\n  IdsClearableMixin\n  IdsEventsMixin\n  IdsKeyboardMixin\n  IdsMaskMixin\n  IdsTooltipMixin\n  IdsValidationMixin\n\n## Use Cases\n\n- When you want an input with a trigger button/buttons that opens some kind of selection dialog that works with the field.\n\n## Terminology\n\n- **Trigger**: The button next to the input element\n- **Input**: The input element\n\n## Features (With Code Examples)\n\nAdd an IdsTriggerField to the page and inside its slot add one or more ids-trigger-buttons.  The `slot` attribute can be applied the IdsTriggerButton to control its placement, but by default they will appear at the \"end\" side of the trigger field:\n\n```html\n<ids-trigger-field size=\"sm\" label=\"Date Field\">\n  <ids-trigger-button slot=\"end\">\n    <ids-text audible=\"true\">Date Field trigger</ids-text>\n    <ids-icon icon=\"schedule\"></ids-icon>\n  </ids-trigger-button>\n</ids-trigger-field>\n```\n\nExample usage with buttons on both sides of input.\n\n```html\n<ids-trigger-field\n    id=\"trigger-field-1\"\n    label=\"Trigger field label\"\n>\n  <ids-trigger-button slot=\"start\">\n    <ids-icon class=\"ids-settings\" icon=\"settings\" size=\"medium\"></ids-icon>\n    <ids-text audible=\"true\">Call to action Button</ids-text>\n  </ids-trigger-button>\n  <ids-trigger-button slot=\"end\">\n    <ids-text audible=\"true\">Popup Activator Button</ids-text>\n    <ids-icon class=\"ids-dropdown\" icon=\"dropdown\" size=\"medium\"></ids-icon>\n  </ids-trigger-button>\n</ids-trigger-field>\n```\n\nThe `inline` attribute can be applied the IdsTriggerButton to alter the size of the field when the field height changes. Since trigger buttons are \"square\", they will respect the settings and fit the size of the field.\n\nExample usage with `inline` attribute enabled in ids-trigger-buttons.\n\n```html\n<ids-trigger-field size=\"sm\" label=\"Select an option\">\n  <ids-trigger-button slot=\"trigger-end\" inline>\n    <ids-text>Show options</ids-text>\n    <ids-icon icon=\"dropdown\"></ids-icon>\n  </ids-trigger-button>\n</ids-trigger-field>\n```\n\n## Settings and Attributes\n\n**Ids Trigger Field Component**\n  - `disabled` {boolean} set disabled state.\n  - `label` {string} This adds a label to the trigger field\n  - `size` {string} set the input size, it will set `md` as defaults\n  - `tabbable` {boolean} Turns on the functionality allow the trigger to be tabbable. For accessibility reasons this should be on in most cases and this is the default.\n  - `delimiter` {string} The delimiter to use when multiple values are selected.\n\n**Ids Trigger Button Component**\n  - `inline` {boolean} when some components alter the trigger button style to enable `inline`, it will:\n    - Set one visible border on the trigger botton:\n      - left side if slotted with \"trigger-end\"\n      - right side if slotted with \"trigger-start\"\n    - Alter the size of the trigger button to fit the size of the field if `field-height` or `compact` are set on IdsTriggerField.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- No separate Trigger Field component is present in 4.x\n\n**4.x to 5.x**\n\n- IdsTriggerField is a new component for 5.x\n\n## Regional Considerations\n\nIn Right To Left Languages the trigger field and alignment will flow to the other side.\n"}},{"name":"ids-upload","attributes":[{"name":"isFormComponent","values":[]},{"name":"isFilePickerOpened","values":[]},{"name":"trigger","values":[]},{"name":"fileInput","values":[]},{"name":"files","values":[]},{"name":"colorVariants","description":"List of available color variants for this component","values":[]},{"name":"input","values":[]},{"name":"textInput","description":"Get trigger field element as textInput","values":[]},{"name":"labelFiletypeDefault","description":"Default label for filetype","values":[]},{"name":"triggerLabelDefault","description":"Default label for trigger button","values":[]},{"name":"validationEventsDefault","description":"Default validation events","values":[]},{"name":"hasAccess","description":"Has access to use, if not disabled or readonly","values":[]},{"name":"accept","description":"Set `accept` attribute","values":[]},{"name":"disabled","description":"Set `disabled` attribute","values":[]},{"name":"labelFiletype","description":"Set the label for filetype","values":[]},{"name":"multiple","description":"Set the `multiple` attribute for filetype","values":[]},{"name":"noMargins","description":"Sets the no margins attribute","values":[]},{"name":"textEllipsis","description":"Set the text ellipsis for input text","values":[]},{"name":"placeholder","description":"Set the `placeholder` of input","values":[]},{"name":"readonly","description":"Set the `readonly` of input","values":[]},{"name":"size","description":"Set the size of input","values":[]},{"name":"tabbable","description":"Set if the upload is tabbable","values":[]},{"name":"triggerLabel","description":"Set the label for trigger button","values":[]},{"name":"validate","description":"Set `validate` attribute","values":[]},{"name":"validationEvents","description":"Sets which events to fire validation on","values":[]},{"name":"value","description":"Set the `value` for text input and file input","values":[]}],"description":{"kind":"markdown","value":"# Ids Upload Component\n\n## Description\n\nA form element that allows users to choose a file they want to upload. A user can prompt a system menu to select one or more file to upload.\n\n## Use Cases\n\n- Used for allowing users to select files from a local system to be uploaded to a server or application.\n\n## Terminology\n\n**Input Type File:** A standard basic input element with type as file.\n**Label:** HTMLLabelElement to keep matching with HTMLInputElement. Make sure the label has a meaningful relative.\n**Drag and Drop:** File/s can be drag from finder/explorer window and drop into upload field.\n\n## Features (With Code Samples)\n\nA standard single upload field:\n\n```html\n<ids-upload label=\"Upload a File\"></ids-upload>\n```\n\nA field that allows multiple files to be uploaded\n\n```html\n<ids-upload label=\"Multiple Files\" multiple=\"true\"></ids-upload>\n```\n\nOption to limit the file types to be uploaded\n\n```html\n<ids-upload label=\"Upload a File (.cvs,.xls,.xlsx)\" accept=\".cvs,.xls,.xlsx\"></ids-upload>\n```\n\nReadonly upload field\n\n```html\n<ids-upload label=\"Readonly\" readonly=\"true\"></ids-upload>\n```\n\nDisabled upload field\n\n```html\n<ids-upload label=\"Disabled\" disabled=\"true\"></ids-upload>\n```\n\nUpload field with dirty tracker\n\n```html\n<ids-upload label=\"Dirty Tracker\" dirty-tracker=\"true\"></ids-upload>\n```\n\nUpload field with required validation\n\n```html\n<ids-upload label=\"Required\" validate=\"required\"></ids-upload>\n```\n\nUpload field as tabbable\n\n```html\n<ids-upload label=\"Tabbable\" tabbable=\"true\"></ids-upload>\n```\n\nUpload field with hidden label state\n\n```html\n<ids-upload label=\"Label State (hidden)\" label-state=\"hidden\"></ids-upload>\n```\n\nUpload field with collapsed label state\n\n```html\n<ids-upload label=\"Label State (collapsed)\" label-state=\"collapsed\"></ids-upload>\n```\n\nUpload field as compact mode\n\n```html\n<ids-upload label=\"Compact\" compact=\"true\"></ids-upload>\n```\n\nUpload field with types of field heights\n\n```html\n<ids-upload field-height=\"xs\" label=\"Extra Small (compact)\"></ids-upload>\n<ids-upload field-height=\"sm\" label=\"Small\"></ids-upload>\n<ids-upload field-height=\"md\" label=\"Medium (default)\"></ids-upload>\n<ids-upload field-height=\"lg\" label=\"Large\"></ids-upload>\n```\n\nUpload field with types of sizes\n\n```html\n<ids-upload size=\"xs\" label=\"Extra Small\"></ids-upload>\n<ids-upload size=\"sm\" label=\"Small\"></ids-upload>\n<ids-upload size=\"mm\" label=\"Small - Medium\"></ids-upload>\n<ids-upload size=\"md\" label=\"Medium (default)\"></ids-upload>\n<ids-upload size=\"lg\" label=\"Large\"></ids-upload>\n<ids-upload size=\"full\" label=\"Full\"></ids-upload>\n```\n\n## Settings (Attributes)\n\n- `accept` {string} sets limit the file types to be uploaded.\n- `colorVariant` {string} set the current color variant.\n- `compact` {boolean} sets the component to be compact mode.\n- `dirty-tracker` {boolean} sets the dirty tracking feature on to indicate a changed field. See [Ids Dirty Tracker Mixin](../../mixins/ids-dirty-tracker-mixin/README.md) for more information.\n- `disabled` {boolean} sets to disabled state.\n- `fieldHeight` {string} defines the field height. See [Ids Field Height Mixin](../../mixins/ids-field-height-mixin/README.md) for more information.\n- `label` {string} sets the label text for text input.\n- `labelFiletype` {string} sets the label text for file input.\n- `language` {string} Sets the language for RTL and inner labels\n- `labelRequired` {boolean} Sets the validation required indicator on label text, it's default to `true`\n- `labelState` {string} indicates that a label is hidden (note that for accessibility reasons, `label` should still\n- `multiple` {boolean} sets to allows multiple files to be uploaded.\n- `noMargins` {boolean} sets whether or not no-margins around the component.\n- `textEllipsis` {boolean} sets ellipsis to be shown on text input.\n- `placeholder` {string} sets the input placeholder text.\n- `size` {'sm '|'md'|'lg'|'full'|string} sets the size (width) of input, it will set `md` as defaults.\n- `readonly` {boolean} sets to readonly state.\n- `triggerLabel` {string} sets the label text for trigger button.\n- `validate` {string} sets text input validation rules, use `space` to add multiple validation rules.\n- `validationEvents` {string} sets text input validation events, use `space` to add multiple validation rules, it will set `blur change` as defaults.\n- `value` {string} sets text input value.\n\n## Keyboard Guidelines\n\n- <kbd>Tab</kbd> and <kbd>Shift Tab</kbd> moves focus into the input field to/from the next focusable item in the tab order.\n- <kbd>Enter</kbd>, <kbd>Space</kbd> Open the file upload dialog box.\n- <kbd>Backspace</kbd> Clear the selected value.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Replace any calls to `inforFileField()` with `.fileupload()`\n- Replace class `inforLabel` with `label`\n- Replace class `inforFileField` with `fileupload`\n- Make sure the `<label>` wraps the `<input>` element\n\n**4.x to 5.x**\n\n- Markup has changed to a custom element `<ids-upload></ids-upload>`\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles\n- Shows percent progress on file\n\n```html\n<!-- 4.x fileupload example -->\n<div class=\"field\">\n  <label for=\"fileupload\">Upload a File</label>\n  <input type=\"file\" class=\"fileupload\" id=\"fileupload\" name=\"fileupload\"/>\n</div>\n\n<!-- this is the same using the WebComponent -->\n<ids-upload label=\"Upload a File\"></ids-upload>\n```\n"}},{"name":"ids-upload-advanced-file","attributes":[{"name":"loaded","description":"Get the bytes of the file is uploaded","values":[]},{"name":"loadedFormatted","description":"Get the bytes loaded value formatted (for example 10M)","values":[]},{"name":"sizeFormatted","description":"Get formatted size value","values":[]},{"name":"closeButtonText","description":"Get text for close button","values":[]},{"name":"startButtonText","description":"Get text for start button","values":[]},{"name":"progressLabelText","description":"Get text for progress label","values":[]},{"name":"errorHtml","description":"Get error html","values":[]},{"name":"disabled","description":"Sets the whole file element to disabled","values":[]},{"name":"error","description":"Sets the file state to show there was an error during the file operations","values":[]},{"name":"fileName","description":"Sets the file name","values":[]},{"name":"size","description":"Sets the file size in bytes","values":[]},{"name":"status","description":"Sets the file status","values":[]},{"name":"value","description":"Sets the progress bar value","values":[]}],"description":{"kind":"markdown","value":"# Ids Upload Advanced Component\n\n## Description\n\nThe IDS Upload Advanced component is a web component that contains an API that makes it easy to set functionality such as limit the file types, max file size, max number of files to be uploaded. It shows currently uploading files with a progress indicator. It l contains functionality to display the file status, error, progress and other functionality.\n\n## Use Cases\n\n- Upload files to a server with drag and drop or use browse file link to select a file\n- Displays the progress of the file upload process\n- Allows to aborted uploading files and manage upload files\n\n## Terminology\n\n**Drop Area:** An html element that display as drag and drop files target area.\n**Browse File Link:** A link to open the browse file window in lieu of drag drop\n\n## Features (With Code Samples)\n\nA standard upload advanced element:\n\n```html\n<ids-upload-advanced></ids-upload-advanced>\n```\n\nSet the whole upload advanced element to disabled. Note that making the component `disabled` while currently in the process of uploading, will not stop uploading.\n\n```html\n<ids-upload-advanced disabled=\"true\"></ids-upload-advanced>\n```\n\nSet to hide the browse link:\n\n```html\n<ids-upload-advanced show-browse-link=\"false\"></ids-upload-advanced>\n```\n\nSet to not allow automatic start of upload after files have been dropped or added via browser.\n\n```html\n<ids-upload-advanced auto-start=\"false\"></ids-upload-advanced>\n```\n\nSet custom icon in main drop area:\n\n```html\n<ids-upload-advanced icon=\"cloud\"></ids-upload-advanced>\n```\n\nAdd limit the file types (.png, .jpg):\n\n```html\n<ids-upload-advanced accept=\".png, .jpg\"></ids-upload-advanced>\n```\n\nSet max file size (in bytes), can be uploaded. An error will be shown if the file is over the limit.\n\n```html\n<ids-upload-advanced max-file-size=\"2097152\"></ids-upload-advanced>\n```\n\nSet max number of files in total, that can be uploaded:\n\n```html\n<ids-upload-advanced max-files=\"5\"></ids-upload-advanced>\n```\n\nSet max files can be in process uploading at one time.\n\n```html\n<ids-upload-advanced max-files-in-process=\"2\"></ids-upload-advanced>\n```\n\nSet custom param name, that might be used to read data from a server API.\n\n```html\n<ids-upload-advanced param-name=\"someCustomParamName\"></ids-upload-advanced>\n```\n\nSet the custom text strings using the named slots.\n\n```html\n<ids-upload-advanced>\n  <span slot=\"text-btn-cancel\">Cancel</span>\n  <span slot=\"text-btn-close-error\">Close</span>\n  <span slot=\"text-btn-remove\">Remove</span>\n  <span slot=\"text-droparea\">Drag and Drop Here</span>\n  <span slot=\"text-droparea-with-browse\">Drag/Drop here or Click {browseLink} to Browse.</span>\n  <span slot=\"text-droparea-with-browse-link\">here</span>\n  <span slot=\"text-progress-label\">{percent}% ({loaded}) loaded form total {size} - {file-name}</span>\n</ids-upload-advanced>\n```\n\nSet the custom error strings this way:\n\n```html\n<ids-upload-advanced accept=\".png\" max-files=\"5\" max-files-in-process=\"2\" max-file-size=\"1000000\">\n  <span slot=\"error-max-files\">Max files error</span>\n  <span slot=\"error-max-files-in-process\">Max files in process error</span>\n  <span slot=\"error-accept-file-type\">Limit file types error</span>\n  <span slot=\"error-max-file-size\">Max file size error</span>\n  <span slot=\"error-url\">Required URL error</span>\n  <span slot=\"error-xhr-headers\">XHRHeaders error</span>\n</ids-upload-advanced>\n```\n\nSet extra headers to send with XHR, when use component `XMLHttpRequest` to send files. XHR Headers must be a valid JSON string contains array of name/value objects.\n\n```html\n<ids-upload-advanced>\n  <span slot=\"xhr-headers\">[{ \"name\": \"header1\", \"value\": \"header1-value\" }]</span>\n</ids-upload-advanced>\n```\n\nSet the url to use component `XMLHttpRequest` to send files:\n\n```html\n<ids-upload-advanced url=\"http://somedomain.com/upload\"></ids-upload-advanced>\n```\n\nSet the method, when use component `XMLHttpRequest` method to send files. The default is set `POST`, it can be set to `PUT`.\n\n```html\n<ids-upload-advanced method=\"PUT\"></ids-upload-advanced>\n```\n\nYou can also set the custom `Send()` method with the JS api.\n\n```html\n<ids-upload-advanced id=\"some-id\"></ids-upload-advanced>\n```\n\n```javascript\n// Custom send method\nfunction customSendMethodXhr(formData, uiElem) {\n  const xhr = new XMLHttpRequest();\n  // attach ui method to set updates\n  xhr.upload.addEventListener('progress', uiElem.progressHandler.bind(uiElem), false);\n  xhr.addEventListener('load', uiElem.completeHandler.bind(uiElem), false);\n  xhr.addEventListener('error', uiElem.errorHandler.bind(uiElem), false);\n  xhr.addEventListener('abort', uiElem.abortHandler.bind(uiElem), false);\n\n  xhr.open('POST', 'http://somedomain/upload'); // Using post method\n  xhr.send(formData);\n\n  // File abort\n  uiElem?.addEventListener('abort', () => {\n    xhr.abort();\n  });\n}\n\n// Attach this custom send method, to upload element.\ndocument.addEventListener('DOMContentLoaded', () => {\n  const uploadEl = document.querySelector('#some-id');\n  uploadEl.send = customSendMethodXhr;\n});\n```\n\nSet an arbitrary error message.\n\n```html\n<ids-button id=\"error-btn\" appearance=\"secondary\">\n  <span>Set Error</span>\n</ids-button>\n<ids-upload-advanced id=\"error-el\"></ids-upload-advanced>\n```\n\n```javascript\nconst errorBtn = document.querySelector('#error-btn');\nconst errorEl = document.querySelector('#error-el');\nerrorBtn?.addEventListener('click', () => {\n  errorEl.setError({ message: 'Arbitrary error message' });\n});\n```\n\nSet an arbitrary error message on each file.\n-Add file/s to upload before apply error. It can only be apply before `completed` state.\n\n```html\n<ids-button id=\"error-files-btn\" appearance=\"secondary\">\n  <span>Set Error on each file</span>\n</ids-button>\n<ids-upload-advanced id=\"error-files-el\"></ids-upload-advanced>\n```\n\n```javascript\nconst errorFilesBtn = document.querySelector('#error-files-btn');\nconst errorFilesEl = document.querySelector('#error-files-el');\nerrorFilesBtn?.addEventListener('click', () => {\n  // fileNodes: can be use `all`, `notStarted`, `inProcess`\n  const fileNodes: any[] = errorFilesEl.all;\n  if (fileNodes.length) {\n    errorFilesEl.setError({ message: 'File arbitrary error message', fileNodes });\n  }\n});\n```\n\n## Settings (Attributes)\n\n### IDS Upload Advanced attributes and properties\n\n- `accept` {string} sets a limit on the file types that can be uploaded.\n- `auto-start` {boolean|string} allow automatic start upload, after files have been dropped or added.\n- `disabled` {boolean|string} sets the whole upload advanced element to disabled.\n- `icon` {string} sets the icon to be use in main drop area.\n- `icon-size` {string} sets the icon size to be use in main drop area.\n- `max-file-size` {number|string} sets the max file size in bytes.\n- `max-files` {number|string} sets the max number of files can be uploaded.\n- `max-files-in-process` {number|string} sets the max number of files can be uploaded while in process.\n- `method` {string} sets the method when use component `XMLHttpRequest` method to send files.\n- `param-name` {string} sets the variable name to read from server.\n- `show-browse-link` {boolean|string} sets a link to browse files to upload.\n- `url` {string} sets the url to use component `XMLHttpRequest` to send files.\n\n### IDS Upload Advanced File (file-component)\n\n- `disabled` {boolean} set the whole file element to disabled.\n- `error` {string} set the file state to show there was an error during the file operations.\n- `file-name` {string} set the file name.\n- `size` {number|string} set the file size in bytes.\n- `status` {string} set the file status.\n- `value` {number|string} set the progress bar value.\n\n## Text strings (use with slot)\n\n- `text-btn-cancel` Text for `x-close` button, while file in process.\n- `text-btn-cancel-all` Text for `cancel-all` button, when file status not-started.\n- `text-btn-close-error` Text for `x-close` button, when file gets error.\n- `text-btn-remove` Text for `x-close` button, when file complete uploading.\n- `text-btn-start` Text for `start` button, when file status not-started.\n- `text-btn-start-all` Text for `start-all` button, when file status not-started.\n- `text-droparea` Text to show in drop area.\n- `text-droparea-with-browse` Text to show in drop area when `show-browse-link` set to true.\n- `text-droparea-with-browse-link` Text for `browse` link, when `show-browse-link` set to true.\n- `text-progress-label` Text to set the label on progress component.\n\n## Error strings (use with slot)\n\n- `error-max-files` Error text to show when exceeded maximum number of files.\n- `error-max-files-in-process` Error text to show when exceeded maximum number of files in process.\n- `error-accept-file-type` Error text for limit the file types to be uploaded.\n- `error-max-file-size` Error text to show when exceeded maximum file size.\n- `error-url` Error text to show when url attribute not set.\n- `error-xhr-headers` Error text to show when given value not a valid JSON array of key/value objects.\n\n## Themeable Parts\n\n- `container` allows you to further style the main container element\n- `label` allows you to further style the label element\n- `link` allows you to further style the hyperlink element\n\n## Extra headers JSON array of key/value (use slot)\n\n- `xhr-headers` sets the HTTP headers to be send along if used component's `XMLHttpRequest` method. (*XHR Headers must be a valid JSON string contains array of name/value objects*)\n\n## Get current attached files from API (updated files data)\n\n- `all` List of all the files added.\n- `notStarted` List of files which not start uploading yet.\n- `inProcess` List of files in-process.\n- `aborted` List of files aborted.\n- `errored` List of all the files had error.\n- `completed` List of all completed files.\n\n## Events that triggered\n\n### Triggered on IdsUploadAdvanced\n\n- `filesdragenter` Triggered when files enter to drag area.\n- `filesdrop` Triggered when files dropped in to drag area.\n- `notstartedupload` Triggered when file sent to not-started status.\n- `beginupload` Triggered when each file sent to in-process.\n- `abort` Triggered when each file get abort.\n- `error` Triggered when each file get error.\n- `complete` Triggered when each file complete uploading.\n- `closebuttonclick` Triggered when clicked on close button in each file ui-element.\n\n### Triggered on IdsUploadAdvancedFile (file-component)\n\n- `notstartedupload` Triggered when file sent to not-started status.\n- `beginupload` Triggered when file sent to in-process.\n- `abort` Triggered when file get abort.\n- `error` Triggered when file get error.\n- `complete` Triggered when file complete uploading.\n- `closebuttonclick` Triggered when clicked on close button.\n\n## Keyboard Guidelines\n\nThe Ids Upload Advanced doesn't contain any interactions beyond a standard keys:\n\n- <kbd>Tab</kbd> and <kbd>Shift Tab</kbd> moves focus into the edit field to/from the next focusable item in the tab order.\n- <kbd>Space</kbd> and <kbd>Enter</kbd> open files browse window if on file browse link and behave as clicked on each buttons for example close button.\n\n## Responsive Guidelines\n\n- Its set as `block` element with `100%` width, so set the desired width on parent container in order to set the width.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- FileUploadAdvanced was a new component created in v4.2.0\n\n**4.x to 5.x**\n\n- Markup has changed to a custom element `<ids-upload-advanced></ids-upload-advanced>`\n- Each file's UI sections are represented by their own custom elements `<ids-upload-advanced-file></ids-upload-advanced-file>`\n- Each file's status can be observed by simple component properties, like `value`, `error`, or `size`.\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles.\n\n```html\n<!-- 4.x fileupload-advanced example -->\n<div class=\"field\">\n  <div class=\"fileupload-advanced\" data-options=\"{allowedTypes: 'jpg|png|gif'}\">\n</div>\n\n<!-- This is the same upload-advanced using a WebComponent -->\n<ids-upload-advanced accept=\".jpg, .png, .gif\"></ids-upload-advanced>\n```\n"}},{"name":"ids-upload-advanced-shared","description":{"kind":"markdown","value":"# Ids Upload Advanced Component\n\n## Description\n\nThe IDS Upload Advanced component is a web component that contains an API that makes it easy to set functionality such as limit the file types, max file size, max number of files to be uploaded. It shows currently uploading files with a progress indicator. It l contains functionality to display the file status, error, progress and other functionality.\n\n## Use Cases\n\n- Upload files to a server with drag and drop or use browse file link to select a file\n- Displays the progress of the file upload process\n- Allows to aborted uploading files and manage upload files\n\n## Terminology\n\n**Drop Area:** An html element that display as drag and drop files target area.\n**Browse File Link:** A link to open the browse file window in lieu of drag drop\n\n## Features (With Code Samples)\n\nA standard upload advanced element:\n\n```html\n<ids-upload-advanced></ids-upload-advanced>\n```\n\nSet the whole upload advanced element to disabled. Note that making the component `disabled` while currently in the process of uploading, will not stop uploading.\n\n```html\n<ids-upload-advanced disabled=\"true\"></ids-upload-advanced>\n```\n\nSet to hide the browse link:\n\n```html\n<ids-upload-advanced show-browse-link=\"false\"></ids-upload-advanced>\n```\n\nSet to not allow automatic start of upload after files have been dropped or added via browser.\n\n```html\n<ids-upload-advanced auto-start=\"false\"></ids-upload-advanced>\n```\n\nSet custom icon in main drop area:\n\n```html\n<ids-upload-advanced icon=\"cloud\"></ids-upload-advanced>\n```\n\nAdd limit the file types (.png, .jpg):\n\n```html\n<ids-upload-advanced accept=\".png, .jpg\"></ids-upload-advanced>\n```\n\nSet max file size (in bytes), can be uploaded. An error will be shown if the file is over the limit.\n\n```html\n<ids-upload-advanced max-file-size=\"2097152\"></ids-upload-advanced>\n```\n\nSet max number of files in total, that can be uploaded:\n\n```html\n<ids-upload-advanced max-files=\"5\"></ids-upload-advanced>\n```\n\nSet max files can be in process uploading at one time.\n\n```html\n<ids-upload-advanced max-files-in-process=\"2\"></ids-upload-advanced>\n```\n\nSet custom param name, that might be used to read data from a server API.\n\n```html\n<ids-upload-advanced param-name=\"someCustomParamName\"></ids-upload-advanced>\n```\n\nSet the custom text strings using the named slots.\n\n```html\n<ids-upload-advanced>\n  <span slot=\"text-btn-cancel\">Cancel</span>\n  <span slot=\"text-btn-close-error\">Close</span>\n  <span slot=\"text-btn-remove\">Remove</span>\n  <span slot=\"text-droparea\">Drag and Drop Here</span>\n  <span slot=\"text-droparea-with-browse\">Drag/Drop here or Click {browseLink} to Browse.</span>\n  <span slot=\"text-droparea-with-browse-link\">here</span>\n  <span slot=\"text-progress-label\">{percent}% ({loaded}) loaded form total {size} - {file-name}</span>\n</ids-upload-advanced>\n```\n\nSet the custom error strings this way:\n\n```html\n<ids-upload-advanced accept=\".png\" max-files=\"5\" max-files-in-process=\"2\" max-file-size=\"1000000\">\n  <span slot=\"error-max-files\">Max files error</span>\n  <span slot=\"error-max-files-in-process\">Max files in process error</span>\n  <span slot=\"error-accept-file-type\">Limit file types error</span>\n  <span slot=\"error-max-file-size\">Max file size error</span>\n  <span slot=\"error-url\">Required URL error</span>\n  <span slot=\"error-xhr-headers\">XHRHeaders error</span>\n</ids-upload-advanced>\n```\n\nSet extra headers to send with XHR, when use component `XMLHttpRequest` to send files. XHR Headers must be a valid JSON string contains array of name/value objects.\n\n```html\n<ids-upload-advanced>\n  <span slot=\"xhr-headers\">[{ \"name\": \"header1\", \"value\": \"header1-value\" }]</span>\n</ids-upload-advanced>\n```\n\nSet the url to use component `XMLHttpRequest` to send files:\n\n```html\n<ids-upload-advanced url=\"http://somedomain.com/upload\"></ids-upload-advanced>\n```\n\nSet the method, when use component `XMLHttpRequest` method to send files. The default is set `POST`, it can be set to `PUT`.\n\n```html\n<ids-upload-advanced method=\"PUT\"></ids-upload-advanced>\n```\n\nYou can also set the custom `Send()` method with the JS api.\n\n```html\n<ids-upload-advanced id=\"some-id\"></ids-upload-advanced>\n```\n\n```javascript\n// Custom send method\nfunction customSendMethodXhr(formData, uiElem) {\n  const xhr = new XMLHttpRequest();\n  // attach ui method to set updates\n  xhr.upload.addEventListener('progress', uiElem.progressHandler.bind(uiElem), false);\n  xhr.addEventListener('load', uiElem.completeHandler.bind(uiElem), false);\n  xhr.addEventListener('error', uiElem.errorHandler.bind(uiElem), false);\n  xhr.addEventListener('abort', uiElem.abortHandler.bind(uiElem), false);\n\n  xhr.open('POST', 'http://somedomain/upload'); // Using post method\n  xhr.send(formData);\n\n  // File abort\n  uiElem?.addEventListener('abort', () => {\n    xhr.abort();\n  });\n}\n\n// Attach this custom send method, to upload element.\ndocument.addEventListener('DOMContentLoaded', () => {\n  const uploadEl = document.querySelector('#some-id');\n  uploadEl.send = customSendMethodXhr;\n});\n```\n\nSet an arbitrary error message.\n\n```html\n<ids-button id=\"error-btn\" appearance=\"secondary\">\n  <span>Set Error</span>\n</ids-button>\n<ids-upload-advanced id=\"error-el\"></ids-upload-advanced>\n```\n\n```javascript\nconst errorBtn = document.querySelector('#error-btn');\nconst errorEl = document.querySelector('#error-el');\nerrorBtn?.addEventListener('click', () => {\n  errorEl.setError({ message: 'Arbitrary error message' });\n});\n```\n\nSet an arbitrary error message on each file.\n-Add file/s to upload before apply error. It can only be apply before `completed` state.\n\n```html\n<ids-button id=\"error-files-btn\" appearance=\"secondary\">\n  <span>Set Error on each file</span>\n</ids-button>\n<ids-upload-advanced id=\"error-files-el\"></ids-upload-advanced>\n```\n\n```javascript\nconst errorFilesBtn = document.querySelector('#error-files-btn');\nconst errorFilesEl = document.querySelector('#error-files-el');\nerrorFilesBtn?.addEventListener('click', () => {\n  // fileNodes: can be use `all`, `notStarted`, `inProcess`\n  const fileNodes: any[] = errorFilesEl.all;\n  if (fileNodes.length) {\n    errorFilesEl.setError({ message: 'File arbitrary error message', fileNodes });\n  }\n});\n```\n\n## Settings (Attributes)\n\n### IDS Upload Advanced attributes and properties\n\n- `accept` {string} sets a limit on the file types that can be uploaded.\n- `auto-start` {boolean|string} allow automatic start upload, after files have been dropped or added.\n- `disabled` {boolean|string} sets the whole upload advanced element to disabled.\n- `icon` {string} sets the icon to be use in main drop area.\n- `icon-size` {string} sets the icon size to be use in main drop area.\n- `max-file-size` {number|string} sets the max file size in bytes.\n- `max-files` {number|string} sets the max number of files can be uploaded.\n- `max-files-in-process` {number|string} sets the max number of files can be uploaded while in process.\n- `method` {string} sets the method when use component `XMLHttpRequest` method to send files.\n- `param-name` {string} sets the variable name to read from server.\n- `show-browse-link` {boolean|string} sets a link to browse files to upload.\n- `url` {string} sets the url to use component `XMLHttpRequest` to send files.\n\n### IDS Upload Advanced File (file-component)\n\n- `disabled` {boolean} set the whole file element to disabled.\n- `error` {string} set the file state to show there was an error during the file operations.\n- `file-name` {string} set the file name.\n- `size` {number|string} set the file size in bytes.\n- `status` {string} set the file status.\n- `value` {number|string} set the progress bar value.\n\n## Text strings (use with slot)\n\n- `text-btn-cancel` Text for `x-close` button, while file in process.\n- `text-btn-cancel-all` Text for `cancel-all` button, when file status not-started.\n- `text-btn-close-error` Text for `x-close` button, when file gets error.\n- `text-btn-remove` Text for `x-close` button, when file complete uploading.\n- `text-btn-start` Text for `start` button, when file status not-started.\n- `text-btn-start-all` Text for `start-all` button, when file status not-started.\n- `text-droparea` Text to show in drop area.\n- `text-droparea-with-browse` Text to show in drop area when `show-browse-link` set to true.\n- `text-droparea-with-browse-link` Text for `browse` link, when `show-browse-link` set to true.\n- `text-progress-label` Text to set the label on progress component.\n\n## Error strings (use with slot)\n\n- `error-max-files` Error text to show when exceeded maximum number of files.\n- `error-max-files-in-process` Error text to show when exceeded maximum number of files in process.\n- `error-accept-file-type` Error text for limit the file types to be uploaded.\n- `error-max-file-size` Error text to show when exceeded maximum file size.\n- `error-url` Error text to show when url attribute not set.\n- `error-xhr-headers` Error text to show when given value not a valid JSON array of key/value objects.\n\n## Themeable Parts\n\n- `container` allows you to further style the main container element\n- `label` allows you to further style the label element\n- `link` allows you to further style the hyperlink element\n\n## Extra headers JSON array of key/value (use slot)\n\n- `xhr-headers` sets the HTTP headers to be send along if used component's `XMLHttpRequest` method. (*XHR Headers must be a valid JSON string contains array of name/value objects*)\n\n## Get current attached files from API (updated files data)\n\n- `all` List of all the files added.\n- `notStarted` List of files which not start uploading yet.\n- `inProcess` List of files in-process.\n- `aborted` List of files aborted.\n- `errored` List of all the files had error.\n- `completed` List of all completed files.\n\n## Events that triggered\n\n### Triggered on IdsUploadAdvanced\n\n- `filesdragenter` Triggered when files enter to drag area.\n- `filesdrop` Triggered when files dropped in to drag area.\n- `notstartedupload` Triggered when file sent to not-started status.\n- `beginupload` Triggered when each file sent to in-process.\n- `abort` Triggered when each file get abort.\n- `error` Triggered when each file get error.\n- `complete` Triggered when each file complete uploading.\n- `closebuttonclick` Triggered when clicked on close button in each file ui-element.\n\n### Triggered on IdsUploadAdvancedFile (file-component)\n\n- `notstartedupload` Triggered when file sent to not-started status.\n- `beginupload` Triggered when file sent to in-process.\n- `abort` Triggered when file get abort.\n- `error` Triggered when file get error.\n- `complete` Triggered when file complete uploading.\n- `closebuttonclick` Triggered when clicked on close button.\n\n## Keyboard Guidelines\n\nThe Ids Upload Advanced doesn't contain any interactions beyond a standard keys:\n\n- <kbd>Tab</kbd> and <kbd>Shift Tab</kbd> moves focus into the edit field to/from the next focusable item in the tab order.\n- <kbd>Space</kbd> and <kbd>Enter</kbd> open files browse window if on file browse link and behave as clicked on each buttons for example close button.\n\n## Responsive Guidelines\n\n- Its set as `block` element with `100%` width, so set the desired width on parent container in order to set the width.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- FileUploadAdvanced was a new component created in v4.2.0\n\n**4.x to 5.x**\n\n- Markup has changed to a custom element `<ids-upload-advanced></ids-upload-advanced>`\n- Each file's UI sections are represented by their own custom elements `<ids-upload-advanced-file></ids-upload-advanced-file>`\n- Each file's status can be observed by simple component properties, like `value`, `error`, or `size`.\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles.\n\n```html\n<!-- 4.x fileupload-advanced example -->\n<div class=\"field\">\n  <div class=\"fileupload-advanced\" data-options=\"{allowedTypes: 'jpg|png|gif'}\">\n</div>\n\n<!-- This is the same upload-advanced using a WebComponent -->\n<ids-upload-advanced accept=\".jpg, .png, .gif\"></ids-upload-advanced>\n```\n"}},{"name":"ids-upload-advanced","attributes":[{"name":"fileInput","values":[]},{"name":"droparea","values":[]},{"name":"files","values":[]},{"name":"xhrHeaders","values":[]},{"name":"send","values":[]},{"name":"all","description":"Get list of all added files","values":[]},{"name":"notStarted","description":"Get list of not started files","values":[]},{"name":"inProcess","description":"Get list of in process files","values":[]},{"name":"aborted","description":"Get list of aborted files","values":[]},{"name":"errored","description":"Get list of errored files","values":[]},{"name":"completed","description":"Get list of completed files","values":[]},{"name":"fileSlotsTemplate","description":"Get template for current slots to use in file element","values":[]},{"name":"fileTemplate","description":"Get template for file element","values":[]},{"name":"toolbarTemplate","description":"Get template for toolbar element","values":[]},{"name":"errorMaxFilesVal","description":"Get error max files value","values":[]},{"name":"showBrowseLinkVal","description":"Get show browse link value","values":[]},{"name":"accept","description":"Sets limit the file types to be uploaded","values":[]},{"name":"autoStart","description":"Allow automatic start upload, after files have been dropped or added","values":[]},{"name":"disabled","description":"Sets the whole element to disabled","values":[]},{"name":"icon","description":"Sets the icon to be use in main drop area","values":[]},{"name":"iconSize","description":"Sets the icon size to be use in main drop area","values":[]},{"name":"maxFileSize","description":"Sets the max file size in bytes","values":[]},{"name":"maxFiles","description":"Sets the max number of files can be uploaded","values":[]},{"name":"maxFilesInProcess","description":"Sets the max number of files can be uploaded while in process","values":[]},{"name":"method","description":"Sets the method to use component XMLHttpRequest method to send files","values":[]},{"name":"paramName","description":"Sets the variable name to read from server","values":[]},{"name":"showBrowseLink","description":"Sets a link to browse files to upload","values":[]},{"name":"url","description":"Sets the url to use component XMLHttpRequest method to send files","values":[]}],"description":{"kind":"markdown","value":"# Ids Upload Advanced Component\n\n## Description\n\nThe IDS Upload Advanced component is a web component that contains an API that makes it easy to set functionality such as limit the file types, max file size, max number of files to be uploaded. It shows currently uploading files with a progress indicator. It l contains functionality to display the file status, error, progress and other functionality.\n\n## Use Cases\n\n- Upload files to a server with drag and drop or use browse file link to select a file\n- Displays the progress of the file upload process\n- Allows to aborted uploading files and manage upload files\n\n## Terminology\n\n**Drop Area:** An html element that display as drag and drop files target area.\n**Browse File Link:** A link to open the browse file window in lieu of drag drop\n\n## Features (With Code Samples)\n\nA standard upload advanced element:\n\n```html\n<ids-upload-advanced></ids-upload-advanced>\n```\n\nSet the whole upload advanced element to disabled. Note that making the component `disabled` while currently in the process of uploading, will not stop uploading.\n\n```html\n<ids-upload-advanced disabled=\"true\"></ids-upload-advanced>\n```\n\nSet to hide the browse link:\n\n```html\n<ids-upload-advanced show-browse-link=\"false\"></ids-upload-advanced>\n```\n\nSet to not allow automatic start of upload after files have been dropped or added via browser.\n\n```html\n<ids-upload-advanced auto-start=\"false\"></ids-upload-advanced>\n```\n\nSet custom icon in main drop area:\n\n```html\n<ids-upload-advanced icon=\"cloud\"></ids-upload-advanced>\n```\n\nAdd limit the file types (.png, .jpg):\n\n```html\n<ids-upload-advanced accept=\".png, .jpg\"></ids-upload-advanced>\n```\n\nSet max file size (in bytes), can be uploaded. An error will be shown if the file is over the limit.\n\n```html\n<ids-upload-advanced max-file-size=\"2097152\"></ids-upload-advanced>\n```\n\nSet max number of files in total, that can be uploaded:\n\n```html\n<ids-upload-advanced max-files=\"5\"></ids-upload-advanced>\n```\n\nSet max files can be in process uploading at one time.\n\n```html\n<ids-upload-advanced max-files-in-process=\"2\"></ids-upload-advanced>\n```\n\nSet custom param name, that might be used to read data from a server API.\n\n```html\n<ids-upload-advanced param-name=\"someCustomParamName\"></ids-upload-advanced>\n```\n\nSet the custom text strings using the named slots.\n\n```html\n<ids-upload-advanced>\n  <span slot=\"text-btn-cancel\">Cancel</span>\n  <span slot=\"text-btn-close-error\">Close</span>\n  <span slot=\"text-btn-remove\">Remove</span>\n  <span slot=\"text-droparea\">Drag and Drop Here</span>\n  <span slot=\"text-droparea-with-browse\">Drag/Drop here or Click {browseLink} to Browse.</span>\n  <span slot=\"text-droparea-with-browse-link\">here</span>\n  <span slot=\"text-progress-label\">{percent}% ({loaded}) loaded form total {size} - {file-name}</span>\n</ids-upload-advanced>\n```\n\nSet the custom error strings this way:\n\n```html\n<ids-upload-advanced accept=\".png\" max-files=\"5\" max-files-in-process=\"2\" max-file-size=\"1000000\">\n  <span slot=\"error-max-files\">Max files error</span>\n  <span slot=\"error-max-files-in-process\">Max files in process error</span>\n  <span slot=\"error-accept-file-type\">Limit file types error</span>\n  <span slot=\"error-max-file-size\">Max file size error</span>\n  <span slot=\"error-url\">Required URL error</span>\n  <span slot=\"error-xhr-headers\">XHRHeaders error</span>\n</ids-upload-advanced>\n```\n\nSet extra headers to send with XHR, when use component `XMLHttpRequest` to send files. XHR Headers must be a valid JSON string contains array of name/value objects.\n\n```html\n<ids-upload-advanced>\n  <span slot=\"xhr-headers\">[{ \"name\": \"header1\", \"value\": \"header1-value\" }]</span>\n</ids-upload-advanced>\n```\n\nSet the url to use component `XMLHttpRequest` to send files:\n\n```html\n<ids-upload-advanced url=\"http://somedomain.com/upload\"></ids-upload-advanced>\n```\n\nSet the method, when use component `XMLHttpRequest` method to send files. The default is set `POST`, it can be set to `PUT`.\n\n```html\n<ids-upload-advanced method=\"PUT\"></ids-upload-advanced>\n```\n\nYou can also set the custom `Send()` method with the JS api.\n\n```html\n<ids-upload-advanced id=\"some-id\"></ids-upload-advanced>\n```\n\n```javascript\n// Custom send method\nfunction customSendMethodXhr(formData, uiElem) {\n  const xhr = new XMLHttpRequest();\n  // attach ui method to set updates\n  xhr.upload.addEventListener('progress', uiElem.progressHandler.bind(uiElem), false);\n  xhr.addEventListener('load', uiElem.completeHandler.bind(uiElem), false);\n  xhr.addEventListener('error', uiElem.errorHandler.bind(uiElem), false);\n  xhr.addEventListener('abort', uiElem.abortHandler.bind(uiElem), false);\n\n  xhr.open('POST', 'http://somedomain/upload'); // Using post method\n  xhr.send(formData);\n\n  // File abort\n  uiElem?.addEventListener('abort', () => {\n    xhr.abort();\n  });\n}\n\n// Attach this custom send method, to upload element.\ndocument.addEventListener('DOMContentLoaded', () => {\n  const uploadEl = document.querySelector('#some-id');\n  uploadEl.send = customSendMethodXhr;\n});\n```\n\nSet an arbitrary error message.\n\n```html\n<ids-button id=\"error-btn\" appearance=\"secondary\">\n  <span>Set Error</span>\n</ids-button>\n<ids-upload-advanced id=\"error-el\"></ids-upload-advanced>\n```\n\n```javascript\nconst errorBtn = document.querySelector('#error-btn');\nconst errorEl = document.querySelector('#error-el');\nerrorBtn?.addEventListener('click', () => {\n  errorEl.setError({ message: 'Arbitrary error message' });\n});\n```\n\nSet an arbitrary error message on each file.\n-Add file/s to upload before apply error. It can only be apply before `completed` state.\n\n```html\n<ids-button id=\"error-files-btn\" appearance=\"secondary\">\n  <span>Set Error on each file</span>\n</ids-button>\n<ids-upload-advanced id=\"error-files-el\"></ids-upload-advanced>\n```\n\n```javascript\nconst errorFilesBtn = document.querySelector('#error-files-btn');\nconst errorFilesEl = document.querySelector('#error-files-el');\nerrorFilesBtn?.addEventListener('click', () => {\n  // fileNodes: can be use `all`, `notStarted`, `inProcess`\n  const fileNodes: any[] = errorFilesEl.all;\n  if (fileNodes.length) {\n    errorFilesEl.setError({ message: 'File arbitrary error message', fileNodes });\n  }\n});\n```\n\n## Settings (Attributes)\n\n### IDS Upload Advanced attributes and properties\n\n- `accept` {string} sets a limit on the file types that can be uploaded.\n- `auto-start` {boolean|string} allow automatic start upload, after files have been dropped or added.\n- `disabled` {boolean|string} sets the whole upload advanced element to disabled.\n- `icon` {string} sets the icon to be use in main drop area.\n- `icon-size` {string} sets the icon size to be use in main drop area.\n- `max-file-size` {number|string} sets the max file size in bytes.\n- `max-files` {number|string} sets the max number of files can be uploaded.\n- `max-files-in-process` {number|string} sets the max number of files can be uploaded while in process.\n- `method` {string} sets the method when use component `XMLHttpRequest` method to send files.\n- `param-name` {string} sets the variable name to read from server.\n- `show-browse-link` {boolean|string} sets a link to browse files to upload.\n- `url` {string} sets the url to use component `XMLHttpRequest` to send files.\n\n### IDS Upload Advanced File (file-component)\n\n- `disabled` {boolean} set the whole file element to disabled.\n- `error` {string} set the file state to show there was an error during the file operations.\n- `file-name` {string} set the file name.\n- `size` {number|string} set the file size in bytes.\n- `status` {string} set the file status.\n- `value` {number|string} set the progress bar value.\n\n## Text strings (use with slot)\n\n- `text-btn-cancel` Text for `x-close` button, while file in process.\n- `text-btn-cancel-all` Text for `cancel-all` button, when file status not-started.\n- `text-btn-close-error` Text for `x-close` button, when file gets error.\n- `text-btn-remove` Text for `x-close` button, when file complete uploading.\n- `text-btn-start` Text for `start` button, when file status not-started.\n- `text-btn-start-all` Text for `start-all` button, when file status not-started.\n- `text-droparea` Text to show in drop area.\n- `text-droparea-with-browse` Text to show in drop area when `show-browse-link` set to true.\n- `text-droparea-with-browse-link` Text for `browse` link, when `show-browse-link` set to true.\n- `text-progress-label` Text to set the label on progress component.\n\n## Error strings (use with slot)\n\n- `error-max-files` Error text to show when exceeded maximum number of files.\n- `error-max-files-in-process` Error text to show when exceeded maximum number of files in process.\n- `error-accept-file-type` Error text for limit the file types to be uploaded.\n- `error-max-file-size` Error text to show when exceeded maximum file size.\n- `error-url` Error text to show when url attribute not set.\n- `error-xhr-headers` Error text to show when given value not a valid JSON array of key/value objects.\n\n## Themeable Parts\n\n- `container` allows you to further style the main container element\n- `label` allows you to further style the label element\n- `link` allows you to further style the hyperlink element\n\n## Extra headers JSON array of key/value (use slot)\n\n- `xhr-headers` sets the HTTP headers to be send along if used component's `XMLHttpRequest` method. (*XHR Headers must be a valid JSON string contains array of name/value objects*)\n\n## Get current attached files from API (updated files data)\n\n- `all` List of all the files added.\n- `notStarted` List of files which not start uploading yet.\n- `inProcess` List of files in-process.\n- `aborted` List of files aborted.\n- `errored` List of all the files had error.\n- `completed` List of all completed files.\n\n## Events that triggered\n\n### Triggered on IdsUploadAdvanced\n\n- `filesdragenter` Triggered when files enter to drag area.\n- `filesdrop` Triggered when files dropped in to drag area.\n- `notstartedupload` Triggered when file sent to not-started status.\n- `beginupload` Triggered when each file sent to in-process.\n- `abort` Triggered when each file get abort.\n- `error` Triggered when each file get error.\n- `complete` Triggered when each file complete uploading.\n- `closebuttonclick` Triggered when clicked on close button in each file ui-element.\n\n### Triggered on IdsUploadAdvancedFile (file-component)\n\n- `notstartedupload` Triggered when file sent to not-started status.\n- `beginupload` Triggered when file sent to in-process.\n- `abort` Triggered when file get abort.\n- `error` Triggered when file get error.\n- `complete` Triggered when file complete uploading.\n- `closebuttonclick` Triggered when clicked on close button.\n\n## Keyboard Guidelines\n\nThe Ids Upload Advanced doesn't contain any interactions beyond a standard keys:\n\n- <kbd>Tab</kbd> and <kbd>Shift Tab</kbd> moves focus into the edit field to/from the next focusable item in the tab order.\n- <kbd>Space</kbd> and <kbd>Enter</kbd> open files browse window if on file browse link and behave as clicked on each buttons for example close button.\n\n## Responsive Guidelines\n\n- Its set as `block` element with `100%` width, so set the desired width on parent container in order to set the width.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- FileUploadAdvanced was a new component created in v4.2.0\n\n**4.x to 5.x**\n\n- Markup has changed to a custom element `<ids-upload-advanced></ids-upload-advanced>`\n- Each file's UI sections are represented by their own custom elements `<ids-upload-advanced-file></ids-upload-advanced-file>`\n- Each file's status can be observed by simple component properties, like `value`, `error`, or `size`.\n- If using events, events are now plain JS events.\n- Can now be imported as a single JS file and used with encapsulated styles.\n\n```html\n<!-- 4.x fileupload-advanced example -->\n<div class=\"field\">\n  <div class=\"fileupload-advanced\" data-options=\"{allowedTypes: 'jpg|png|gif'}\">\n</div>\n\n<!-- This is the same upload-advanced using a WebComponent -->\n<ids-upload-advanced accept=\".jpg, .png, .gif\"></ids-upload-advanced>\n```\n"}},{"name":"ids-virtual-scroll","attributes":[{"name":"datasource","values":[]},{"name":"timeout","values":[]},{"name":"initialized","values":[]},{"name":"lastStart","values":[]},{"name":"lastEnd","values":[]},{"name":"eventTarget","values":[]},{"name":"onAfterVirtualScroll","values":[]},{"name":"stringTemplate","values":[]},{"name":"height","description":"The height of the virtual scroll container","values":[]},{"name":"itemHeight","description":"The height of each item in the scroller. TODO: support dynamic heights","values":[]},{"name":"bufferSize","description":"Extra padding at the top and bottom so that the data transition smoothly","values":[]},{"name":"#scrollTop","description":"Set the scroll top position and scroll down to that location","values":[]},{"name":"contentHeight","description":"The height of the content behind the viewport","values":[]},{"name":"itemCount","values":[]},{"name":"offsetY","values":[]},{"name":"startIndex","values":[]},{"name":"data","description":"Set the data array of the listview","values":[]},{"name":"scrollTarget","description":"Set the scroll target to a external parent","values":[]}],"description":{"kind":"markdown","value":"# Ids Virtual Scroll Component\n\n## Description\n\nVirtual scrolling shows up the visible dom elements to the user, as the user scrolls, the next list is displayed. This gives faster experience as the full list is not loaded at one go and only loaded as per the visibility on the screen.\n\nFor this to work items must be fixed height. We set the item count and item template and then attach a dataset that will be used to render the templates plus a buffer of elements as we scroll up and down in the list.\n\n## Use Cases\n\n- For a data grid or list with thousands of elements that do not all need to be loaded at one time\n- For a feed similar to a twitter or facebook feed\n\n## Terminology\n\n- **Template**: The html markup to render for each item\n- **Viewport**: The visible scroll area that may not equal all the visible elements\n- **Classification**:  How tags are labelled with colors and text\n- **Disabled**: Tag can be disabled so it cannot be followed or clicked.\n\n## Features (With Code Examples)\n\nSet up a ids-virtual-scroll container and properties like height, item-height and item-count. Then inside the ids-virtual-scroll element we setup a structure to render where one element is `part=\"contents\"` this is the place where the item template will be rendered with the calculations.\n\n```html\n<ids-virtual-scroll id=\"virtual-scroll-1\" height=\"308\" item-height=\"20\" item-count=\"1000\">\n  <div class=\"ids-list-view\" part=\"contents\"></div>\n</ids-virtual-scroll>\n```\n\n```js\nconst virtualScroll = document.querySelector('#virtual-scroll-1');\nvirtualScrollUl.itemTemplate = (item) => `<li class=\"ids-virtual-scroll-item\" part=\"list-item\">${item.productName}</li>`;\nvirtualScrollUl.data = dataset;\n```\n\n## Settings and Attributes\n\n- `itemTemplate` {Function | string} Set the internal element template markup for a single element\n- `data` {Array<Object>} Attach a dataset that matches the list template and render.\n- `scrollTarget` {HTMLElement} Set internal element that will be the scrollable area.\n- `scrollTop` {number} Set the scroll top position and scroll down to that location.\n- `height` {number} The height in pixels we want the scroll area to be.\n- `itemHeight` {number} The height of each item in the list, must be fixed size.\n- `itemCount` {number} The number of elements in the dataset. This is also set internally when attaching data.\n- `bufferSize' {number} The number of extra elements to render to improve or tweak the scroll experience. This needs more research.\n\n## Keyboard Guidelines\n\n- <kbd>Up/Down Arrow</kbd>: If the scroll area is focused using the arrow keys will activate the scrolling.\n- <kbd>Home/End</kbd>: If the scroll area is focused using the arrow keys will scrolling to the start or end of the list\n\n## Responsive Guidelines\n\n- The width is responsive to the parent\n- The height is responsive to the screensize by default, but can also be specified a fixed `height` i.e. `height=\"500px\"`\n\n## Converting from Previous Versions\n\nNew Component for 5.0\n\n## Accessibility Guidelines\n\nThe use of this component is not recommended for Accessibility since the lack of elements in the page may pose issues for screen reader and other assistive technology. Consider a way to disable this functionality.\n"}},{"name":"ids-week-view","attributes":[{"name":"dayMap","values":[]},{"name":"vetoableEventTypes","values":[]},{"name":"ro","values":[]},{"name":"onLocaleChange","description":"Respond to locale changes","values":[]},{"name":"onLanguageChange","description":"Respond to language changes","values":[]},{"name":"#timelinePositionInterval","description":"Stored interval used to control timeline position","values":[]},{"name":"showToday","description":"Set whether or not the today button should be shown","values":[]},{"name":"startDate","description":"Set start of the week to show","values":[]},{"name":"endDate","description":"Set end of the week to show","values":[]},{"name":"startHour","description":"Set start hour of the day (0-24)","values":[]},{"name":"endHour","description":"Set end hour of the day (0-24)","values":[]},{"name":"showTimeline","description":"Set whether or not to show a bar across the current time","values":[]},{"name":"timelineInterval","description":"Set how often timeline should update it's position (in milliseconds)","values":[]}],"description":{"kind":"markdown","value":"# Ids Week View Component\n\n## Description\nThe `ids-week-view` component is a web component that provides calendar view that displays weeks and days\nwith navigation and current time indicator\n\n## Use Cases\n- Display one day calendar in selected dates\n- Display a week calendar in selected dates\n- Display multiple weeks calendar in selected dates\n- Display current time indicator\n\n## Settings (Attributes)\n- `start-date` `{string|null}` - Specifies start of the week as a string date format\nFirst day of the week from current date will be set if not valid date or no specified. Examples of the format:\n  - Tue Nov 16 2021\n  - 2021-11-10T22:00:00.000Z\n  - 11/17/2021\n- `end-date` `{string|null}` - Specifies end of the week as a string date format. Last day of the week from current date will be set if not valid date or no specified. See `start-date` for examples of the format\n- `start-hour` `{string|number|null}` - Specifies the hour to start on each day from 0 to 24 range. Defaults to 7 if no specified or out of the range\n- `end-hour` `{string|number|null}` - Specifies the hour to end on each day from 0 to 24 range. Defaults to 19 if no specified or out of the range\n- `first-day-of-week` `{string|number|null}` - Specifies first day of the week from 0 to 6 range. 0 is Sunday, 1 is Monday. Defaults to 0 if no specified or out of the range. The setting is used if no `start-date` or `end-date` specified and when Today button is clicked\n- `show-today` `{true|false}` - Whether or not to show the today button in the toolbar\n- `show-timeline` `{true|false}` - Whether or not to show current time indicator\n- `timeline-interval` {string|number|null} - Specifies how often timeline should update it's position (in milliseconds). Defaults to 30000 (30 seconds)\n\n## Settings (Properties)\n- `eventsData` `{Array<CalendarEventData>}` - Array of calendar event data to populate the week view\n- `eventTypesData` `{Array<CalendarEventTypeData>}` - Array of calendar event types used to categorize calendar events\n\n## Events\n\n- `beforeeventrendered` Fires for each event rendered (full day or in day) before the element is added to the DOM\n- `aftereventrendered` Fires for each event rendered (full day or in day) after the element is added to the DOM\n- `beforeweekrendered` Fires before a week view is rendered\n- `aftereweekrendered` Fires after a week view is rendered\n\n## Features (With Code Examples)\n\nWith no settings. Regular week 7 days to show. First day of the week is Sunday, last day of the week is Saturday. 7 AM - 7 PM hours.\nToday button doesn't appear in the toolbar. Current time indicator appears if the time is in range of 7 AM - 7 PM hours. Today's day is highlighted\n\n```html\n<ids-week-view></ids-week-view>\n```\n\nWith `first-day-of-week` setting. Regular week 7 days to show. First day of the week is Monday, last day of the week is Sunday. 7 AM - 7 PM hours.\nToday button doesn't appear in the toolbar. Current time indicator appears if the time is in range of 7 AM - 7 PM hours. Today's day is highlighted\n\n```html\n<ids-week-view first-day-of-week=\"1\"></ids-week-view>\n```\n\nOne day calendar. Start date is equal to end date. 7 AM - 7 PM hours. Today button appears. Current time indicator doesn't appear\n\n```html\n<ids-week-view\n  start-date=\"11/11/2021\"\n  end-date=\"11/11/2021\"\n  show-today=\"true\"\n  show-timeline=\"false\"\n></ids-week-view>\n```\n\nMultiple week calendar with start/end hours settings. Start hour is `10` - 10 AM. End hour is `15` - 3 PM\n\n```html\n<ids-week-view\n  start-date=\"11/01/2021\"\n  end-date=\"11/14/2021\"\n  start-hour=\"10\"\n  end-hour=\"15\"\n></ids-week-view>\n```\n\nThe component can be controlled dynamically\n\n```js\nconst weekView = document.querySelector('ids-week-view');\n\n// Changing start/end date\nweekView.startDate = 'Tue Nov 16 2021';\nweekView.endDate = '11/17/2021';\n\n// Changing start/end hours\nweekView.startHour = 6;\nweekView.endHour = 21;\n\n// Set current date week with Sunday first day of the week\nweekView.startDate = null;\nweekView.endDate = null;\nweekView.firstDayOfWeek = 0;\n\n// Remove today button from the toolbar\nweekView.showToday = false;\n\n// Remove timeline\nweekView.showTimeline = false;\n\n// Change timeline interval to 1 second\nweekView.timelineInterval = 1000;\n```\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Week View was a new component created in v4.23.0\n\n**4.x to 5.x**\n\n- Week View is now a custom element `<ids-week-view></ids-week-view>`\n- Most settings that were previously jQuery-based are now attributes (for example, `first-day-of-week` or `end-hour`)\n"}},{"name":"ids-wizard-step","description":{"kind":"markdown","value":"# Ids Wizard Component\n\n## Description\n\nDisplays feedback about a current process. A user can view a depiction of their current status within a process, and may optionally navigate between points. Best for displaying progress relative to the start and finish of a user workflow.\n\n## Use Cases\n\n- displaying a list of steps that have to be fulfilled in a given/pre-determined order.\n- optionally allowing a user to traverse a set of, or part of a set of steps.\n\n## Terminology\n\n- **Wizard**: the overall flow/process\n- **Step**: an individual step in the IdsWizard component; represented here by `IdsWizardStep`/`<ids-wizard-step>`\n\n## Themeable Parts\n- `wizard` allows you to style the overall wizard.\n- `step` allows you to style the step (markers + labels).\n- `path-segment` allows you to further style the line segments between markers.\n\n## Features (With Code Examples)\n\nA wizard is created by using the custom `ids-wizard` element. It's sub-components/steps are represented by `<ids-wizard-step>`.\n\nContent within the `<ids-wizard-step>` instances will be the text displayed in the label at each of these steps.\n\nThe current step number a wizard is showing has been traversed is denoted now only with the `step-number` attribute on `ids-wizard`.\n\n```html\n<ids-wizard step-number=1>\n  <ids-wizard-step>Step One<ids-wizard-step>\n  <ids-wizard-step> Step Two</ids-wizard-step>\n</ids-wizard>\n```\n\n## Settings and Attributes\n\n- `clickable` `{boolean}` If set, a user can click each step. Note that this is also settable within the `ids-wizard-step` children components to only enable specific step(s) to be clickable.\n- `step-number` the current step number.\n\n## Keyboard Guidelines\n\n- TAB should move to next step and/or label.\n- SHIFT + TAB should move to previous step and/or label.\n- ENTER key should select the focused label/step as well as change the page URL hash.\n\n## Responsive Guidelines\n\n- The wizard component's width should not exceed the width of the page.\n- The labels chosen and number of steps should fit within the page; or at least be obvious enough that a user can discern what labels achieve what function.\n\n## Designs\n\n## Accessibility Guidelines\n\n- 1.4.3 Contrast (Minimum) - there should be enough contrast on the background which the wizard resides on in the page.\n\n## Regional Considerations\n\nLabel text should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Wizard was a new component created in v4.0.0\n\n**4.x to 5.x**\n\n- Wizard is now a custom element `<ids-wizard></ids-wizard>`\n- \"Ticks\" are now called \"Steps\", and are codified as custom elements `<ids-wizard-step>MY-LABEL</ids-wizard-step>`\n- Setting the step number is done via `ids-wizard`'s `step-number` attribute.\n- `clickable` property is available on both any `ids-wizard-step` and `ids-wizard` overall.\n"}},{"name":"ids-wizard","attributes":[{"name":"shouldUpdateCallbacks","description":"whether to update callbacks after\na render() event","values":[]},{"name":"stepObserver","values":[]},{"name":"resizeObserver","values":[]},{"name":"stepNumber","description":"Set the step number","values":[]},{"name":"clickable","values":[]}],"description":{"kind":"markdown","value":"# Ids Wizard Component\n\n## Description\n\nDisplays feedback about a current process. A user can view a depiction of their current status within a process, and may optionally navigate between points. Best for displaying progress relative to the start and finish of a user workflow.\n\n## Use Cases\n\n- displaying a list of steps that have to be fulfilled in a given/pre-determined order.\n- optionally allowing a user to traverse a set of, or part of a set of steps.\n\n## Terminology\n\n- **Wizard**: the overall flow/process\n- **Step**: an individual step in the IdsWizard component; represented here by `IdsWizardStep`/`<ids-wizard-step>`\n\n## Themeable Parts\n- `wizard` allows you to style the overall wizard.\n- `step` allows you to style the step (markers + labels).\n- `path-segment` allows you to further style the line segments between markers.\n\n## Features (With Code Examples)\n\nA wizard is created by using the custom `ids-wizard` element. It's sub-components/steps are represented by `<ids-wizard-step>`.\n\nContent within the `<ids-wizard-step>` instances will be the text displayed in the label at each of these steps.\n\nThe current step number a wizard is showing has been traversed is denoted now only with the `step-number` attribute on `ids-wizard`.\n\n```html\n<ids-wizard step-number=1>\n  <ids-wizard-step>Step One<ids-wizard-step>\n  <ids-wizard-step> Step Two</ids-wizard-step>\n</ids-wizard>\n```\n\n## Settings and Attributes\n\n- `clickable` `{boolean}` If set, a user can click each step. Note that this is also settable within the `ids-wizard-step` children components to only enable specific step(s) to be clickable.\n- `step-number` the current step number.\n\n## Keyboard Guidelines\n\n- TAB should move to next step and/or label.\n- SHIFT + TAB should move to previous step and/or label.\n- ENTER key should select the focused label/step as well as change the page URL hash.\n\n## Responsive Guidelines\n\n- The wizard component's width should not exceed the width of the page.\n- The labels chosen and number of steps should fit within the page; or at least be obvious enough that a user can discern what labels achieve what function.\n\n## Designs\n\n## Accessibility Guidelines\n\n- 1.4.3 Contrast (Minimum) - there should be enough contrast on the background which the wizard resides on in the page.\n\n## Regional Considerations\n\nLabel text should be localized in the current language. All elements will flip to the alternate side in Right To Left mode. Consider that in some languages text may be a lot longer (German). And in some cases it cant be wrapped (Thai). For some of these cases text-ellipsis is supported.\n\n## Converting from Previous Versions (Breaking Changes)\n\n**3.x to 4.x**\n\n- Wizard was a new component created in v4.0.0\n\n**4.x to 5.x**\n\n- Wizard is now a custom element `<ids-wizard></ids-wizard>`\n- \"Ticks\" are now called \"Steps\", and are codified as custom elements `<ids-wizard-step>MY-LABEL</ids-wizard-step>`\n- Setting the step number is done via `ids-wizard`'s `step-number` attribute.\n- `clickable` property is available on both any `ids-wizard-step` and `ids-wizard` overall.\n"}}]}